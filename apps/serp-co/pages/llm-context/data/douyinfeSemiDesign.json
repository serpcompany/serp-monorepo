[
  {
    "owner": "douyinfe",
    "repo": "semi-design",
    "content": "TITLE: Installing Semi Design UI Library\nDESCRIPTION: Commands to install the Semi Design UI library using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# with npm\nnpm i @douyinfe/semi-ui\n\n# with yarn\nyarn add @douyinfe/semi-ui\n\n# with pnpm\npnpm add @douyinfe/semi-ui\n```\n\n----------------------------------------\n\nTITLE: Enumerating Plus Components in Semi Design\nDESCRIPTION: Provides a list of additional, more specialized components in the Semi Design library, including code highlighting and interactive elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: overview\nCODE:\n```\nCodeHighlight,\nMarkdown,\nLottie,\nChat,\nHotKeys,\nDragMove\n```\n\n----------------------------------------\n\nTITLE: Creating a Demo Grid Card using Semi-UI with React\nDESCRIPTION: This snippet demonstrates how to create a grid card layout using the Card and CardGroup components from the Semi-UI library in a React app. It imports necessary components, utilizes the CardGroup with a 'grid' type, and renders multiple Card components inside it. Each card includes title, content, and link functionality. The layout is responsive and showcases how to manage rendering dynamically based on an array.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, CardGroup, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    return (\n        <CardGroup type='grid'>\n            {\n                new Array(7).fill(null).map((v, idx)=>(\n                    <Card \n                        key={idx}\n                        shadows='hover'\n                        title='Card title'\n                        headerLine={false}\n                        style={{ width: 260 }}\n                        headerExtraContent={\n                            <Text link>\n                                More\n                            </Text>\n                        }\n                    >\n                        <Text>Card content</Text>\n                    </Card>\n                ))\n            }     \n        </CardGroup>\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-language Support in Semi Design Components\nDESCRIPTION: A React component demonstrating internationalization implementation across multiple Semi Design UI components. The code includes language configuration imports, a language switcher, and examples of various components like Pagination, Modal, Select, DatePicker, etc. with multi-language support.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport zh_CN from '@douyinfe/semi-ui/lib/es/locale/source/zh_CN';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\nimport en_US from '@douyinfe/semi-ui/lib/es/locale/source/en_US';\n// ... other imports\n\nclass I18nDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            locale: zh_CN,\n            localeCode: 'zh_CN',\n        };\n        this.onLanguageChange = this.onLanguageChange.bind(this);\n    }\n\n    onLanguageChange(code) {\n        let language = {\n            'zh_CN': zh_CN,\n            'en_GB': en_GB,\n            'en_US': en_US,\n            // ... other language mappings\n        };\n        this.setState({ locale: language[code], localeCode: code });\n    }\n\n    render() {\n        const { locale, localeCode } = this.state;\n        // Component implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Show Components in Semi Design\nDESCRIPTION: Provides an extensive list of components used for displaying various types of content and data in the Semi Design library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: overview\nCODE:\n```\nAvatar,\nBadge,\nCalendar,\nCard,\nCarousel,\nCollapse,\nCollapsible,\nDescriptions,\nDropdown,\nEmpty,\nImage,\nCropper,\nList,\nModal,\nOverflowList,\nPopover,\nScrollList,\nSideSheet,\nTable,\nTag,\nTimeline,\nTooltip,\nHighlight\n```\n\n----------------------------------------\n\nTITLE: Creating Top-nav Layout with Semi UI Components\nDESCRIPTION: Shows how to implement a complex top navigation layout using various Semi UI components including Layout, Nav, Button, Breadcrumb, Skeleton, and Avatar.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Content } = Layout;\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                <div>\n                    <Nav mode='horizontal' defaultSelectedKeys={['Home']}>\n                        <Nav.Header>\n                            <IconSemiLogo style={{ fontSize: 36 }} />\n                        </Nav.Header>\n                        <Nav.Item itemKey='Home' text='Home' icon={<IconHome size=\"large\" />} />\n                        <Nav.Item itemKey='Live' text='Live' icon={<IconLive size=\"large\" />} />\n                        <Nav.Item itemKey='Setting' text='Setting' icon={<IconSetting size=\"large\" />} />\n                        <Nav.Footer>\n                            <Button\n                                theme=\"borderless\"\n                                icon = {<IconBell size=\"large\"/>}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Button\n                                theme=\"borderless\"\n                                icon = {<IconHelpCircle size=\"large\"/>}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Avatar color='orange' size='small'>YJ</Avatar>\n                        </Nav.Footer>\n                    </Nav>\n                </div>\n            </Header>\n            <Content\n                style={{\n                    padding: '24px',\n                    backgroundColor: 'var(--semi-color-bg-0)'\n                }}\n            >\n                <Breadcrumb\n                    style={{\n                        marginBottom: '24px'\n                    }}\n                    routes={['Home', 'Page Section', 'Pagge Ssection', 'Detail']} />\n                <div\n                    style={{\n                        borderRadius: '10px',\n                        border: '1px solid var(--semi-color-border)',\n                        height: '376px',\n                        padding: '32px'\n                    }}\n                >\n                    <Skeleton placeholder={(<Skeleton.Paragraph rows={2}/>)} loading={true}>\n                        <p>Hi, Bytedance dance dance.</p>\n                        <p>Hi, Bytedance dance dance.</p>\n                    </Skeleton>\n                </div>\n            </Content>\n            <Footer\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    padding: '20px',\n                    color: 'var(--semi-color-text-2)',\n                    backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                }}\n            >\n                <span\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    <IconBytedanceLogo size='large' style={{ marginRight: '8px' }}/>\n                    <span>Copyright © 2019 ByteDance. All Rights Reserved. </span>\n                </span>\n                <span>\n                    <span style={{ marginRight: '24px' }}>Customer Service</span>\n                    <span>Feedback</span>\n                </span>\n            </Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Internationalization with LocaleProvider and ConfigProvider\nDESCRIPTION: This code wraps child components with LocaleProvider and ConfigProvider to apply internationalization settings. It sets the text direction to right-to-left specifically for Arabic language, while using left-to-right for all other languages, and passes the selected locale to both providers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<LocaleProvider locale={locale}>\n                    <ConfigProvider direction={localeCode === 'ar' ? 'rtl' : 'ltr'} locale={locale}>\n                        <I18nComponent />\n                    </ConfigProvider>\n                </LocaleProvider>\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Design with Package Managers\nDESCRIPTION: Commands for installing Semi Design using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 使用 npm\nnpm i @douyinfe/semi-ui\n\n# 使用 yarn\nyarn add @douyinfe/semi-ui\n\n# 使用 pnpm\npnpm add @douyinfe/semi-ui\n```\n\n----------------------------------------\n\nTITLE: Creating Left-sidebar Layout with Semi UI\nDESCRIPTION: Shows how to create a layout with a left sidebar using Semi UI Layout components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Layout>\n                <Sider style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}>Sider</Sider>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n            </Layout>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Multilingual Support in React Components with Semi Design\nDESCRIPTION: This code snippet demonstrates how to implement multilingual support in a React application using Semi Design components. It imports various language locales, sets up a language switching mechanism, and renders multiple components that support internationalization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport zh_CN from '@douyinfe/semi-ui/lib/es/locale/source/zh_CN';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\nimport en_US from '@douyinfe/semi-ui/lib/es/locale/source/en_US';\nimport ko_KR from '@douyinfe/semi-ui/lib/es/locale/source/ko_KR';\nimport ja_JP from '@douyinfe/semi-ui/lib/es/locale/source/ja_JP';\nimport vi_VN from '@douyinfe/semi-ui/lib/es/locale/source/vi_VN';\nimport ru_RU from '@douyinfe/semi-ui/lib/es/locale/source/ru_RU';\nimport id_ID from '@douyinfe/semi-ui/lib/es/locale/source/id_ID';\nimport ms_MY from '@douyinfe/semi-ui/lib/es/locale/source/ms_MY';\nimport th_TH from '@douyinfe/semi-ui/lib/es/locale/source/th_TH';\nimport tr_TR from '@douyinfe/semi-ui/lib/es/locale/source/tr_TR';\nimport pt_BR from '@douyinfe/semi-ui/lib/es/locale/source/pt_BR';\nimport zh_TW from '@douyinfe/semi-ui/lib/es/locale/source/zh_TW';\nimport sv_SE from '@douyinfe/semi-ui/lib/es/locale/source/sv_SE';\nimport pl_PL from '@douyinfe/semi-ui/lib/es/locale/source/pl_PL';\nimport nl_NL from '@douyinfe/semi-ui/lib/es/locale/source/nl_NL';\nimport ar from '@douyinfe/semi-ui/lib/es/locale/source/ar';\nimport es from '@douyinfe/semi-ui/lib/es/locale/source/es';\nimport it from '@douyinfe/semi-ui/lib/es/locale/source/it';\nimport de from '@douyinfe/semi-ui/lib/es/locale/source/de';\nimport fr from '@douyinfe/semi-ui/lib/es/locale/source/fr';\nimport ro from '@douyinfe/semi-ui/lib/es/locale/source/ro';\nimport { LocaleProvider, ConfigProvider, Pagination, Modal, Button, Select, Cascader, DatePicker, TreeSelect, Table, TimePicker, List, Calendar, Typography, Transfer, ImagePreview, Image, Form, Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconSemiLogo, IconStar } from '@douyinfe/semi-icons';\n\nclass I18nDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            locale: en_GB,\n            localeCode: 'en_GB',\n        };\n        this.onLanguageChange = this.onLanguageChange.bind(this);\n    }\n\n    onLanguageChange(code) {\n        let language = {\n            'zh_CN': zh_CN,\n            'en_GB': en_GB,\n            'ko_KR': ko_KR,\n            'ja_JP': ja_JP,\n            'ar': ar,\n            'vi_VN': vi_VN,\n            'ru_RU': ru_RU,\n            'id_ID': id_ID,\n            'ms_MY': ms_MY,\n            'th_TH': th_TH,\n            'tr_TR': tr_TR,\n            'sv_SE': sv_SE,\n            'pl_PL': pl_PL,\n            'nl_NL': nl_NL,\n            es,\n            de,\n            it,\n            fr,\n            ro\n        };\n        this.setState({ locale: language[code], localeCode: code });\n    }\n\n    render() {\n        const { locale, localeCode } = this.state;\n        const treeData = [\n            {\n                label: 'Asia',\n                value: 'asia',\n                key: '1',\n                children: [\n                    {\n                        label: 'China',\n                        value: 'china',\n                        key: '1-0',\n                        children: [\n                            { label: 'Beijing', value: 'beijing', key: '1-0-0' },\n                            { label: 'Shanghai', value: 'shanghai', key: '1-0-1' },\n                        ],\n                    },\n                    {\n                        label: 'Japan',\n                        value: 'japan',\n                        key: '1-1',\n                        children: [ { label: 'Osaka', value: 'osaka', key: '1-1-0' } ]\n                    },\n                ]\n            }\n        ];\n        const I18nComponent = () => {\n            const [modalVisible, setModalVisible] = useState(false);\n            const columns = useMemo(() => [\n                {\n                    title: 'Name',\n                    width: 250,\n                    dataIndex: 'name',\n                },\n                {\n                    title: 'Age',\n                    width: 150,\n                    dataIndex: 'age',\n                },\n                {\n                    title: 'Address',\n                    dataIndex: 'address',\n                },\n            ]);\n            const dataSource = useMemo(() => {\n                const data = [];\n                for (let i = 0; i < 46; i++) {\n                    data.push({\n                        key: '' + i,\n                        name: `Bytedance ${i}`,\n                        age: 32,\n                        address: `Beijing, Haidian. Zhichun Road ${i}`,\n                    });\n                }\n                return data;\n            });\n            const transferData = useMemo(() => {\n                return Array.from({ length: 100 }, (v, i) => {\n                    return {\n                        label: `Option Name ${i}`,\n                        value: i,\n                        disabled: false,\n                        key: i,\n                    };\n                });\n            });\n            const srcList = useMemo(() => ([\n                \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n                \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n                \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n                \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/colorful.jpg\",\n            ]), []);\n            const style = { margin: 10 };\n            return (\n                <>\n                    <h5>Pagination</h5>\n                    <Pagination total={100} showTotal showSizeChanger style={style} showQuickJumper/>\n                    <h5>Modal</h5>\n\n                    <div style={style}>\n                        <Button onClick={() => setModalVisible(true)}>\n                            Show Modal\n                        </Button>\n                        <Modal\n                            title=\"Modal\"\n                            visible={modalVisible}\n                            onOk={() => setModalVisible(false)}\n                            onCancel={() => setModalVisible(false)}\n                        >\n                            <p>This is the content of a basic modal.</p>\n                            <p>More content...</p>\n                        </Modal>\n                    </div>\n                    <h5>Select & Cascader</h5>\n                    <div style={style}>\n                        <Select filter style={{ width: '180px' }}>\n                            <Select.Option value='abc'>abc</Select.Option>\n                            <Select.Option value='vigo' disabled>vigo</Select.Option>\n                            <Select.Option value='hotsoon'>hotsoon</Select.Option>\n                        </Select>\n                        <Cascader\n                            style={{ width: 300, margin: 10 }}\n                            treeData={treeData}\n                            filterTreeNode\n                            prefix='Cascader'\n                        />\n                    </div>\n                    <h5>DatePicker</h5>\n                    <DatePicker style={{ ...style, width: 250 }} />\n                    <DatePicker style={{ ...style, width: 300 }} type='dateTime' />\n                    <DatePicker style={{ ...style, width: 300 }} type='dateRange' />\n                    <DatePicker style={{ ...style, width: 450 }} type='dateTimeRange' />\n                    <h5>TimePicker</h5>\n                    <TimePicker style={style} />\n                    <TimePicker use12Hours style={style} /><br/><br/>\n                    <h5>TreeSelect</h5>\n                    <TreeSelect\n                        style={{ ...style, width: 300 }}\n                        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                        treeData={treeData}\n                        filterTreeNode\n                    />\n                    <h5>Table</h5>\n                    <Table columns={columns} dataSource={dataSource} scroll={{ y: 320 }} />\n                    <h5>Table - Empty</h5>\n                    <Table columns={columns} dataSource={[]} scroll={{ y: 320 }} />\n                    <h5>List - Empty</h5>\n                    <List header={<div>List</div>} dataSource={[]}/>\n                    <h5>Calendar</h5>\n                    <Calendar mode='month' />\n                    <h5>Typography - Copyable</h5>\n                    <Typography.Paragraph copyable>Click to copy text.</Typography.Paragraph>\n                    <h5>Typography - Collapsible</h5>\n                    <Typography.Paragraph ellipsis={{ rows: 3, expandable: true, collapsible: true }} style={{ width: 300 }}>\n                        {`Expandable and collapsible: Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage, and then is heard no more; it is a tale told by an idiot, full of sound and fury, signifying nothing.`}\n                    </Typography.Paragraph>\n                    <h5>Transfer</h5>\n                    <Transfer\n                        style={{ width: 568, height: 416 }}\n                        dataSource={transferData}\n                    />\n                    <h5>Image</h5>\n                    <ImagePreview showTooltip>\n                        {srcList.map((src, index) => {\n                            return (\n                                <Image \n                                    key={index} \n                                    src={src} \n                                    width={200} \n                                    alt={`lamp${index + 1}`} \n                                    style={{ marginRight: 5 }}\n                                />\n                            );\n                        })}\n                    </ImagePreview>\n                    <h5>Form</h5>\n                </>\n            );\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete Option Data in Semi Design Select\nDESCRIPTION: This example shows how to get all attributes of a selected option using onChangeWithObject property. When enabled, the onChange callback receives the full option object instead of just the value property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select, TextArea } from '@douyinfe/semi-ui';\n\n() => {\n    const list = [\n        { value: 'douyin', label: 'Douyin', type: 1 },\n        { value: 'capcut', label: 'Capcut', type: 2 },\n        { value: 'xigua', label: 'BuzzVideo', type: 3 },\n    ];\n    const [cbValue, setCbValue] = useState();\n    const [multipleCbValue, setMultipleCbValue] = useState();\n\n    const onChange = value => {\n        setCbValue(value);\n        console.log(value);\n    };\n\n    const onMultipleChange = value => {\n        setMultipleCbValue(value);\n        console.log(value);\n    };\n\n    return (\n        <div>\n            <div>\n                <Select\n                    style={{ width: 150 }}\n                    onChangeWithObject\n                    optionList={list}\n                    defaultValue={list[0]}\n                    onChange={onChange}\n                ></Select>\n                <h4>onChang callback:</h4>\n                <TextArea style={{ width: 320, marginBottom: 48 }} autosize value={JSON.stringify(cbValue)} rows={2} />\n            </div>\n            <div>\n                <Select\n                    style={{ width: 320 }}\n                    onChangeWithObject\n                    multiple\n                    optionList={list}\n                    onChange={onMultipleChange}\n                    placeholder=\"Multiple Select\"\n                ></Select>\n                <h4>onChange callback:</h4>\n                <TextArea style={{ width: 320 }} autosize value={JSON.stringify(multipleCbValue)} />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Upload Component in React with Semi Design\nDESCRIPTION: This example demonstrates how to use Upload as a controlled component by passing a fileList prop and handling the onChange event. It shows proper state management where the component updates its internal state with a new array when files change.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const initList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n        {\n            uid: '2',\n            name: 'dy.jpeg',\n            status: 'uploading',\n            size: '222KB',\n            percent: 50,\n            preview: true,\n            fileInstance: new File([new ArrayBuffer(2048)], 'dy.jpeg', { type: 'image/jpeg' }),\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n\n    const [list, updateList] = useState(initList);\n\n    const onChange = ({ fileList, currentFile, event }) => {\n        console.log('onChange');\n        console.log(fileList);\n        console.log(currentFile);\n        let newFileList = [...fileList]; // spread to get new array\n        updateList(newFileList);\n    };\n\n    return (\n        <Upload\n            action=\"https://api.semi.design/upload\"\n            onChange={onChange}\n            fileList={list}\n            showRetry={false}\n        >\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Navigation with React Router Integration\nDESCRIPTION: Shows how to integrate Navigation component with React Router using renderWrapper prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"react-router-dom\";\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Nav\n            renderWrapper={({ itemElement, isSubNav, isInSubNav, props }) => {\n                const routerMap = {\n                    Home: \"/\",\n                    About: \"/about\",\n                    Dashboard: \"/dashboard\",\n                    \"Nothing Here\": \"/nothing-here\"\n                };\n                return (\n                    <Link\n                        style={{ textDecoration: \"none\" }}\n                        to={routerMap[props.itemKey]}\n                    >\n                        {itemElement}\n                    </Link>\n                );\n            }}\n            items={[\n                { itemKey: \"Home\", text: \"Home\" },\n                { itemKey: \"About\", text: \"About\" },\n                {\n                    text: \"Sub\",\n                    itemKey: \"Sub\",\n                    items: [\"Dashboard\", \"Nothing Here\"]\n                }\n            ]}\n        ></Nav>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Component in React\nDESCRIPTION: Shows how to implement a controlled Input component where the value is managed by React state and updated through the onChange callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\nclass InputDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: 'controlInput',\n            value2: 'input'\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n    onChange(value, e) {\n        console.log(value);\n        this.setState({ value });\n    }\n    render() {\n        return (\n            <>\n                <Input\n                    value={this.state.value}\n                    onChange={this.onChange}>\n                </Input>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout with Side Navigation using Semi Design UI\nDESCRIPTION: Demonstrates how to create a full page layout with side navigation, header with navigation items, content area with breadcrumb, and footer using Semi Design components. Includes responsive layout features and styling using Semi Design's design tokens.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Layout, Nav, Button, Breadcrumb, Skeleton, Avatar } from '@douyinfe/semi-ui';\nimport { IconBell, IconHelpCircle, IconBytedanceLogo, IconHome, IconHistogram, IconLive, IconSetting, IconSemiLogo } from '@douyinfe/semi-icons';\n\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                <Nav\n                    defaultSelectedKeys={['Home']}\n                    style={{ maxWidth: 220, height: '100%' }}\n                    items={[\n                        { itemKey: 'Home', text: '首页', icon: <IconHome size=\"large\" /> },\n                        { itemKey: 'Histogram', text: '基础数据', icon: <IconHistogram size=\"large\" /> },\n                        { itemKey: 'Live', text: '测试功能', icon: <IconLive size=\"large\" /> },\n                        { itemKey: 'Setting', text: '设置', icon: <IconSetting size=\"large\" /> },\n                    ]}\n                    header={{\n                        logo: <IconSemiLogo style={{ fontSize: 36 }} />,\n                        text: 'Semi Design',\n                    }}\n                    footer={{\n                        collapseButton: true,\n                    }}\n                />\n            </Sider>\n            <Layout>\n                <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <Nav\n                        mode=\"horizontal\"\n                        footer={\n                            <>\n                                <Button\n                                    theme=\"borderless\"\n                                    icon={<IconBell size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Button\n                                    theme=\"borderless\"\n                                    icon={<IconHelpCircle size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Avatar color=\"orange\" size=\"small\">\n                                    YJ\n                                </Avatar>\n                            </>\n                        }\n                    ></Nav>\n                </Header>\n                <Content\n                    style={{\n                        padding: '24px',\n                        backgroundColor: 'var(--semi-color-bg-0)',\n                    }}\n                >\n                    <Breadcrumb\n                        style={{\n                            marginBottom: '24px',\n                        }}\n                        routes={['首页', '当这个页面标题很长时需要省略', '上一页', '详情页']}\n                    />\n                    <div\n                        style={{\n                            borderRadius: '10px',\n                            border: '1px solid var(--semi-color-border)',\n                            height: '376px',\n                            padding: '32px',\n                        }}\n                    >\n                        <Skeleton placeholder={<Skeleton.Paragraph rows={2} />} loading={true}>\n                            <p>Hi, Bytedance dance dance.</p>\n                            <p>Hi, Bytedance dance dance.</p>\n                        </Skeleton>\n                    </div>\n                </Content>\n                <Footer\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        padding: '20px',\n                        color: 'var(--semi-color-text-2)',\n                        backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                    }}\n                >\n                    <span\n                        style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n                        <span>Copyright © 2019 ByteDance. All Rights Reserved. </span>\n                    </span>\n                    <span>\n                        <span style={{ marginRight: '24px' }}>平台客服</span>\n                        <span>反馈建议</span>\n                    </span>\n                </Footer>\n            </Layout>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Implementation Examples\nDESCRIPTION: Demonstrates different custom trigger implementations including styled backgrounds and tag-based triggers with multiple selection support.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Select, Tag } from '@douyinfe/semi-ui';\nimport { IconAppCenter, IconChevronDown } from '@douyinfe/semi-icons';\n\n() => {\n    const [valList, setValList] = useState(['douyin', 'ulikecam']);\n    const list = [\n        { value: 'douyin', label: 'Douyin' },\n        { value: 'ulikecam', label: 'UlikeCam' },\n        { value: 'jianying', label: 'Capcut' },\n        { value: 'doubao', label: 'Cici' },\n    ];\n    const triggerRender = ({ value }) => {\n        return (\n            <div\n                style={{\n                    minWidth: '112',\n                    backgroundColor: 'var(--semi-color-primary-light-default)',\n                    height: 32,\n                    display: 'flex',\n                    alignItems: 'center',\n                    paddingLeft: 12,\n                    borderRadius: 3,\n                    color: 'var(--semi-color-primary)',\n                }}\n            >\n                <div\n                    style={{\n                        fontWeight: 600,\n                        flexShrink: 0,\n                        fontSize: 14,\n                    }}\n                >\n                    AppName\n                </div>\n                <div\n                    style={{\n                        margin: 4,\n                        whiteSpace: 'nowrap',\n                        textOverflow: 'ellipsis',\n                        flexGrow: 1,\n                        overflow: 'hidden',\n                    }}\n                >\n                    {value.map(item => item.label).join(' , ')}\n                </div>\n                <IconAppCenter style={{ marginRight: 8, flexShrink: 0 }} />\n            </div>\n        );\n    };\n```\n\n----------------------------------------\n\nTITLE: Styling a Footer Component with Semi Design and CSS Variables\nDESCRIPTION: Implements a Footer component with custom styling using CSS-in-JS approach. The footer displays a logo with copyright information on the left and navigation links on the right. It uses Semi Design CSS variables for consistent theming and flexible styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<Footer\n    style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: '20px',\n        color: 'var(--semi-color-text-2)',\n        backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n    }}\n>\n    <span\n        style={{\n            display: 'flex',\n            alignItems: 'center',\n        }}\n    >\n        <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n        <span>Copyright © 2019 ByteDance. All Rights Reserved. </span>\n    </span>\n    <span>\n        <span style={{ marginRight: '24px' }}>Customer Service</span>\n        <span>Feedback</span>\n    </span>\n</Footer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Search with Debounce in Select Component (React/JSX)\nDESCRIPTION: This snippet demonstrates how to implement remote search with debounce in a Select component. It includes handling loading states, dynamic option updates, and controlled value management.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { debounce } from 'lodash-es';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const [loading, setLoading] = useState(false);\n    const optionList = [\n        { value: 'dsm', label: 'Semi DSM', type: 1 },\n        { value: 'd2c', label: 'Semi DesignToCode', type: 2 },\n        { value: 'c2d', label: 'Semi CodeToDesign', type: 3 },\n        { value: 'plugin', label: 'Semi Plugin', type: 4 },\n    ];\n    const [list, setList] = useState(optionList);\n    const [value, setValue] = useState('');\n\n    const handleMultipleChange = newValue => {\n        setValue(newValue);\n    };\n\n    const handleSearch = inputValue => {\n        setLoading(true);\n        let result = [];\n        if (inputValue) {\n            let length = Math.ceil(Math.random() * 100);\n            result = Array.from({ length }, (v, i) => {\n                return { value: inputValue + i, label: `Relative: ${inputValue}${i}`, type: i + 1 };\n            });\n            setTimeout(() => {\n                setLoading(false);\n                setList(result);\n            }, 1000);\n        } else {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Select\n            style={{ width: 300 }}\n            filter\n            remote\n            onChangeWithObject\n            multiple\n            value={value}\n            onSearch={debounce(handleSearch, 1000)}\n            optionList={list}\n            loading={loading}\n            onChange={handleMultipleChange}\n            emptyContent={null}\n        ></Select>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Implementation in React\nDESCRIPTION: Demonstrates a basic implementation of the DatePicker component with an onChange event handler that logs the selected date as a string.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker onChange={(date, dateString) => console.log(dateString)} style={{ width: 240 }} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UMD Usage of Semi Design in HTML\nDESCRIPTION: Example of using Semi Design components via UMD in an HTML file, including necessary script and link tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html lang=\"zh-cn\">\n    <head>\n        <script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n       <script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\n       <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\n\n       <script src=\"https://unpkg.com/@douyinfe/semi-ui@2.27.0/dist/umd/semi-ui.min.js\"></script>\n       <link rel=\"stylesheet\" href=\"https://unpkg.com/@douyinfe/semi-ui@2.27.0/dist/css/semi.css\">\n\n       <script src=\"https://unpkg.com/@douyinfe/semi-icons@latest/dist/umd/semi-icons.min.js\"></script>\n       <link rel=\"stylesheet\" href=\"https://unpkg.com/@douyinfe/semi-icons@latest/dist/css/semi-icons.css\">\n       <script src=\"https://unpkg.com/@douyinfe/semi-illustrations@latest/dist/umd/semi-illustrations.min.js\"></script>\n\n    </head>\n    <body>\n        <div id=\"root\"></div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Top-Nav SideBar Layout with Semi Design in React\nDESCRIPTION: This code demonstrates how to create a complete application layout with Semi Design components. It includes a header with navigation, a sidebar menu, content area with breadcrumbs and skeleton loading, and a footer with copyright information. The layout is built using Semi Design's Layout, Nav, Button, Breadcrumb, Skeleton, and Avatar components along with various icons from the Semi icon library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Layout, Nav, Button, Breadcrumb, Skeleton, Avatar } from '@douyinfe/semi-ui';\nimport { IconSemiLogo, IconBell, IconHelpCircle, IconBytedanceLogo, IconHome, IconHistogram, IconLive, IconSetting } from '@douyinfe/semi-icons';\n\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                <div >\n                    <Nav mode='horizontal' defaultSelectedKeys={['Home']}>\n                        <Nav.Header>\n                            <IconSemiLogo style={{ fontSize: 36 }} />\n                        </Nav.Header>\n                        <span\n                            style={{\n                                color: 'var(--semi-color-text-2)'\n                            }}\n                        >\n                            <span\n                                style={{\n                                    marginRight: '24px',\n                                    color: 'var(--semi-color-text-0)',\n                                    fontWeight: '600',\n                                }}>Semi Design</span>\n                            <span style={{ marginRight: '24px' }}>Semi Theme</span>\n                            <span>Semi Blocks</span>\n                        </span>\n                        <Nav.Footer>\n                            <Button\n                                theme=\"borderless\"\n                                icon = {<IconBell size=\"large\"/>}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Button\n                                theme=\"borderless\"\n                                icon = {<IconHelpCircle size=\"large\"/>}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Avatar color='orange' size='small'>YJ</Avatar>\n                        </Nav.Footer>\n                    </Nav>\n                </div>\n            </Header>\n            <Layout >\n                <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <Nav\n                        style={{ maxWidth: 220, height: '100%' }}\n                        defaultSelectedKeys={['Home']}\n                        items={[\n                            { itemKey: 'Home', text: 'Home', icon: <IconHome size=\"large\" /> },\n                            { itemKey: 'Histogram', text: 'Histogram', icon: <IconHistogram size=\"large\" /> },\n                            { itemKey: 'Live', text: 'Live', icon: <IconLive size=\"large\" /> },\n                            { itemKey: 'Setting', text: 'Setting', icon: <IconSetting size=\"large\" /> },\n                        ]}\n                        footer={{\n                            collapseButton: true,\n                        }}\n                    />\n                </Sider>\n                <Content\n                    style={{\n                        padding: '24px',\n                        backgroundColor: 'var(--semi-color-bg-0)'\n                    }}\n                >\n                    <Breadcrumb\n                        style={{\n                            marginBottom: '24px'\n                        }}\n                        routes={['Home', 'Page Section', 'Ppage Ssection', 'Detail']} />\n                    <div\n                        style={{\n                            borderRadius: '10px',\n                            border: '1px solid var(--semi-color-border)',\n                            height: '376px',\n                            padding: '32px'\n                        }}\n                    >\n                        <Skeleton placeholder={(<Skeleton.Paragraph rows={2}/>)} loading={true}>\n                            <p>Hi, Bytedance dance dance.</p>\n                            <p>Hi, Bytedance dance dance.</p>\n                        </Skeleton>\n                    </div>\n                </Content>\n            </Layout>\n            <Footer\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    padding: '20px',\n                    color: 'var(--semi-color-text-2)',\n                    backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                }}\n            >\n                <span\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n                    <span>Copyright © 2019 ByteDance. All Rights Reserved. </span>\n                </span>\n                <span>\n                    <span style={{ marginRight: '24px' }}>Customer Service</span>\n                    <span>Feedback</span>\n                </span>\n            </Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Navigation Layout with Semi Design in React\nDESCRIPTION: This code snippet demonstrates how to create a sidebar navigation layout using Semi Design components. It includes a sidebar with navigation items, a header with buttons and avatar, content area with breadcrumbs and skeleton loading, and a footer with copyright information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Layout, Nav, Button, Breadcrumb, Skeleton, Avatar } from '@douyinfe/semi-ui';\nimport { IconBell, IconHelpCircle, IconBytedanceLogo, IconHome, IconHistogram, IconLive, IconSetting, IconSemiLogo } from '@douyinfe/semi-icons';\n\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                <Nav\n                    defaultSelectedKeys={['Home']}\n                    style={{ maxWidth: 220, height: '100%' }}\n                    items={[\n                        { itemKey: 'Home', text: 'Home', icon: <IconHome size=\"large\" /> },\n                        { itemKey: 'Histogram', text: 'Histogram', icon: <IconHistogram size=\"large\" /> },\n                        { itemKey: 'Live', text: 'Live', icon: <IconLive size=\"large\" /> },\n                        { itemKey: 'Setting', text: 'Setting', icon: <IconSetting size=\"large\" /> },\n                    ]}\n                    header={{\n                        logo:  <IconSemiLogo style={{ fontSize: 36 }} />,\n                        text: 'Webcast'\n                    }}\n                    footer={{\n                        collapseButton: true,\n                    }}\n                />\n            </Sider>\n            <Layout>\n                <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <Nav\n                        mode='horizontal'\n                        footer={\n                            <>\n                                <Button\n                                    theme=\"borderless\"\n                                    icon = {<IconBell size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Button\n                                    theme=\"borderless\"\n                                    icon = {<IconHelpCircle size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Avatar color='orange' size='small'>YJ</Avatar>\n                            </>\n                        }\n                    >\n                    </Nav>\n                </Header>\n                <Content\n                    style={{\n                        padding: '24px',\n                        backgroundColor: 'var(--semi-color-bg-0)'\n                    }}\n                >\n                    <Breadcrumb\n                        style={{\n                            marginBottom: '24px'\n                        }}\n                        routes={['Home', 'Page Section', 'Pagge Ssection', 'Detail']} />\n                    <div\n                        style={{\n                            borderRadius: '10px',\n                            border: '1px solid var(--semi-color-border)',\n                            height: '376px',\n                            padding: '32px'\n                        }}\n                    >\n                        <Skeleton placeholder={(<Skeleton.Paragraph rows={2}/>)} loading={true}>\n                            <p>Hi, Bytedance dance dance.</p>\n                            <p>Hi, Bytedance dance dance.</p>\n                        </Skeleton>\n                    </div>\n                </Content>\n                <Footer\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        padding: '20px',\n                        color: 'var(--semi-color-text-2)',\n                        backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                    }}\n                >\n                    <span\n                        style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n                        <span>Copyright © 2019 ByteDance. All Rights Reserved. </span>\n                    </span>\n                    <span>\n                        <span style={{ marginRight: '24px' }}>Customer Service</span>\n                        <span>Feedback</span>\n                    </span>\n                </Footer>\n            </Layout>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing OuterTopSlot with Tabs in Select\nDESCRIPTION: Example of using outerTopSlot to add tabbed navigation within the Select dropdown. Demonstrates complex state management and dynamic option rendering based on selected tab.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const list = {\n        component: [\n            { value: 'select', label: 'Select' },\n            { value: 'tabs', label: 'Tabs' },\n            { value: 'avatar', label: 'Avatar' },\n            { value: 'button', label: 'Button' },\n        ],\n        design: [\n            { value: 'color', label: 'Color' },\n            { value: 'dark', label: 'Dark Mode' },\n            { value: 'icon', label: 'Icon' },\n            { value: 'font', label: 'Topography' },\n        ],\n        feedback: [\n            { value: 'faq', label: 'FAQ' },\n            { value: 'join', label: 'Join Chat Group' },\n            { value: 'hornbill', label: 'Hornbill' },\n        ],\n    };\n\n    const [key, setKey] = useState('component');\n    const [value, setValue] = useState({ value: 'faq', label: 'FAQ' });\n    const handleTabClick = itemKey => {\n        setKey(itemKey);\n    };\n\n    const tabStyle = {\n        cursor: 'pointer',\n        marginRight: 12,\n        paddingBottom: 4,\n    };\n    const tabActiveStyle = {\n        ...tabStyle,\n        borderBottom: '1px solid var(--semi-color-primary)',\n        fontWeight: 700,\n    };\n    const tabWrapper = {\n        display: 'flex',\n        paddingTop: 8,\n        paddingLeft: 32,\n        paddingRight: 32,\n        borderBottom: '0.5px solid var(--semi-color-border)',\n    };\n    const tabOptions = [\n        { itemKey: 'component', label: 'Compoonent' },\n        { itemKey: 'design', label: 'Design' },\n        { itemKey: 'feedback', label: 'Feedback' },\n    ];\n\n    const outerTopSlotNode = (\n        <div style={tabWrapper}>\n            {tabOptions.map((item, index) => {\n                style = item.itemKey === key ? tabActiveStyle : tabStyle;\n                return (\n                    <div style={style} key={item.itemKey} onClick={() => handleTabClick(item.itemKey)}>\n                        {item.label}\n                    </div>\n                );\n            })}\n        </div>\n    );\n    return (\n        <Select\n            defaultOpen\n            autoAdjustOverflow={false}\n            value={value}\n            onChangeWithObject\n            onChange={obj => setValue(obj)}\n            style={{ width: 200 }}\n            outerTopSlot={outerTopSlotNode}\n            optionList={list[key]}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Select Component with Dynamic OptGroup Generation\nDESCRIPTION: Shows how to programmatically generate grouped options from a data structure by mapping through groups and their children.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        {\n            label: 'Asia',\n            children: [\n                { value: 'a-1', label: 'China' },\n                { value: 'a-2', label: 'Korea' },\n            ],\n        },\n        {\n            label: 'Europe',\n            children: [\n                { value: 'b-1', label: 'Germany' },\n                { value: 'b-2', label: 'France' },\n            ],\n        },\n        {\n            label: 'South America',\n            children: [{ value: 'c-1', label: 'Peru' }],\n        },\n    ];\n    return (\n        <Select placeholder=\"\" style={{ width: 180 }} filter>\n            {data.map((group, index) => (\n                <Select.OptGroup label={group.label} key={`${index}-${group.label}`}>\n                    {group.children.map((option, index2) => (\n                        <Select.Option value={option.value} key={`${index2}-${group.label}`}>\n                            {option.label}\n                        </Select.Option>\n                    ))}\n                </Select.OptGroup>\n            ))}\n        </Select>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Opening Notifications with Static Methods\nDESCRIPTION: Examples of opening notifications using various static methods with options for message content and duration\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst id = Notification.open({ content: 'message', duration: 3 })\nNotification.info({ content: 'message', duration: 3 })\nNotification.error({ content: 'message', duration: 3 })\nNotification.warning({ content: 'message', duration: 3 })\nNotification.success({ content: 'message', duration: 3 })\n```\n\n----------------------------------------\n\nTITLE: Basic Card Implementation in Semi Design\nDESCRIPTION: Demonstrates a basic card with a title, content, and extra header content. It uses the Card and Typography components from Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n  \n    return (\n        <Card \n            title='Semi Design' \n            style={{ maxWidth: 360 }}\n            headerExtraContent={\n                <Text link>\n                    More\n                </Text>\n            }\n        >\n            Semi Design is a design system developed and maintained by IES-FE & IES-UED. The design system includes a design language and a set of reusable front-end components, helping designers and developers to more easily create high-quality, consistent user experience, design-compliant Web applications.\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Selector with Semi Design Select Component\nDESCRIPTION: This snippet implements a language dropdown selector using Semi Design's Select component. It offers 19 language options including Chinese, English, Japanese, and others, with English as the default selection, and triggers an onLanguageChange event handler when a language is selected.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ borderBottom: '1px solid var(--semi-color-border)', paddingBottom: 20 }}>\n                    <Select onChange={this.onLanguageChange} prefix='Switch Language' style={{ width: 250 }} defaultValue='en_GB'>\n                        <Select.Option value='zh_CN'>Chinese</Select.Option>\n                        <Select.Option value='en_GB'>English</Select.Option>\n                        <Select.Option value='ja_JP'>Japanese</Select.Option>\n                        <Select.Option value='ko_KR'>Korean</Select.Option>\n                        <Select.Option value='ar'>Arabic</Select.Option>\n                        <Select.Option value='vi_VN'>Vietnamese</Select.Option>\n                        <Select.Option value='ru_RU'>Russian</Select.Option>\n                        <Select.Option value='id_ID'>Indonesian</Select.Option>\n                        <Select.Option value='ms_MY'>Malay</Select.Option>\n                        <Select.Option value='th_TH'>Thai</Select.Option>\n                        <Select.Option value='tr_TR'>Turkish</Select.Option>\n                        <Select.Option value='es'>Spanish</Select.Option>\n                        <Select.Option value='de'>German</Select.Option>\n                        <Select.Option value='it'>Italian</Select.Option>\n                        <Select.Option value='fr'>French</Select.Option>\n                        <Select.Option value='ro'>Romanian</Select.Option>\n                        <Select.Option value='sv_SE'>Swedish</Select.Option>\n                        <Select.Option value='pl_PL'>Polish</Select.Option>\n                        <Select.Option value='nl_NL'>Dutch</Select.Option>\n                    </Select>\n                </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search in Select Component (React/JSX)\nDESCRIPTION: This snippet demonstrates how to enable basic search functionality in a Select component. It shows both single and multiple selection with search, and how to keep search keywords after selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select filter style={{ width: 180 }} placeholder=\"Searchable Select\">\n            <Select.Option value=\"app1\">Douyin</Select.Option>\n            <Select.Option value=\"app2\">Coze</Select.Option>\n            <Select.Option value=\"app3\">Capcut</Select.Option>\n            <Select.Option value=\"app4\">BuzzVideo</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            filter\n            multiple\n            style={{ width: 350 }}\n            placeholder=\"Searchable Multiple Select\"\n            autoClearSearchValue={false}\n        >\n            <Select.Option value=\"semi-0\">Semi-0</Select.Option>\n            <Select.Option value=\"semi-1\">Semi-1</Select.Option>\n            <Select.Option value=\"semi-2\">Semi-2</Select.Option>\n            <Select.Option value=\"semi-3\">Semi-3</Select.Option>\n            <Select.Option value=\"semi-4\">Semi-4</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Navigation with Custom Styles and Scrolling\nDESCRIPTION: Shows how to customize navigation styling using style and bodyStyle props. This example creates a scrollable navigation list with fixed header and footer by setting appropriate height values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconSetting, IconFolder } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                style={{ height: 520 }}\n                bodyStyle={{ height: 320 }}\n                defaultOpenKeys={['job', 'resource']}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                    {\n                        text: 'Task Platform',\n                        icon: <IconSetting />,\n                        itemKey: 'job',\n                        items: ['Task Management', 'User Task Query'],\n                    },\n                    {\n                        text: 'Resource Management',\n                        icon: <IconFolder />,\n                        itemKey: 'resource',\n                        items: ['Turntable Configuration', 'Turntable Review'],\n                    },\n                ]}\n                onSelect={key => console.log(key)}\n                header={{\n                    logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                    text: 'Live Platform'\n                }}\n                footer={{\n                    collapseButton: true,\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hint Functionality in Semi Design Chat Component\nDESCRIPTION: This example demonstrates how to set up the Chat component with hints feature. When users click on a hint, it becomes the new input content and triggers the onHintClick callback. The example includes configuration for different user roles, message handling, and basic hint display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'assistant',\n        id: '1',\n        createAt: 1715676751919,\n        content: 'Semi Design is a design system designed, developed, and maintained by the front-end team at Douyin and the MED product design team.',\n    }\n];\n\nconst hintsExample = [\n    \"Tell me more\",\n    \"What are the components of Semi Design?\",\n    \"What are the addresses of Semi Design's official website and github warehouse?\",\n]\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    height: 400,\n};\n\nlet id = 0;\nfunction getId() {\n    return `id-${id++}`\n}\nconst uploadProps = { action: 'https://api.semi.design/upload' }\n\nfunction DefaultChat() {\n    const [message, setMessage] = useState(defaultMessage);\n    const [hints, setHints] = useState(hintsExample);\n\n    const onHintClick = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"This is a mock response\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    onClear = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    return (\n        <Chat \n            hints={hints}\n            onHintClick={onHintClick}\n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            onClear={onClear}\n            uploadProps={uploadProps}\n        />\n    )\n}\n\nrender(DefaultChat);\n```\n\n----------------------------------------\n\nTITLE: Basic Semi-UI React Component Usage\nDESCRIPTION: Example showing how to use Semi-UI components in a React application, demonstrating Form and Button components with React 18's createRoot\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/README-zh_CN.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Button, Form } from '@douyinfe/semi-ui';\n\nconst App = () => (\n    <Form>\n        <Form.Input field='name' initValue='semi design'></Form.Input>\n        <Button htmlType='submit'>submit</Button>\n    </Form>\n);\n\nconst root = createRoot(document.querySelector('#app'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Using Semi Design Components in React\nDESCRIPTION: Example of importing and using Semi Design components in a React application. It demonstrates how to use the Button and Toast components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Button, Toast } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <Button onClick={() => Toast.warning({ content: 'welcome' })}>Hello Semi</Button>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Navigation with Side Layout using Semi Design in React\nDESCRIPTION: This code demonstrates how to create a comprehensive layout with top navigation and side navigation using Semi Design UI components. It includes a header with logo and user controls, a sidebar with navigation items, a content area with breadcrumbs, and a footer with copyright information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Layout, Nav, Button, Breadcrumb, Skeleton, Avatar } from '@douyinfe/semi-ui';\nimport { IconSemiLogo, IconBell, IconHelpCircle, IconBytedanceLogo, IconHome, IconHistogram, IconLive, IconSetting } from '@douyinfe/semi-icons';\n\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                <div>\n                    <Nav mode=\"horizontal\" defaultSelectedKeys={['Home']}>\n                        <Nav.Header>\n                            <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />\n                        </Nav.Header>\n                        <span\n                            style={{\n                                color: 'var(--semi-color-text-2)',\n                            }}\n                        >\n                            <span\n                                style={{\n                                    marginRight: '24px',\n                                    color: 'var(--semi-color-text-0)',\n                                    fontWeight: '600',\n                                }}\n                            >\n                                模版推荐\n                            </span>\n                            <span style={{ marginRight: '24px' }}>所有模版</span>\n                            <span>我的模版</span>\n                        </span>\n                        <Nav.Footer>\n                            <Button\n                                theme=\"borderless\"\n                                icon={<IconBell size=\"large\" />}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Button\n                                theme=\"borderless\"\n                                icon={<IconHelpCircle size=\"large\" />}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Avatar color=\"orange\" size=\"small\">\n                                YJ\n                            </Avatar>\n                        </Nav.Footer>\n                    </Nav>\n                </div>\n            </Header>\n            <Layout>\n                <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <Nav\n                        style={{ maxWidth: 220, height: '100%' }}\n                        defaultSelectedKeys={['Home']}\n                        items={[\n                            { itemKey: 'Home', text: '首页', icon: <IconHome size=\"large\" /> },\n                            { itemKey: 'Histogram', text: '基础数据', icon: <IconHistogram size=\"large\" /> },\n                            { itemKey: 'Live', text: '测试功能', icon: <IconLive size=\"large\" /> },\n                            { itemKey: 'Setting', text: '设置', icon: <IconSetting size=\"large\" /> },\n                        ]}\n                        footer={{\n                            collapseButton: true,\n                        }}\n                    />\n                </Sider>\n                <Content\n                    style={{\n                        padding: '24px',\n                        backgroundColor: 'var(--semi-color-bg-0)',\n                    }}\n                >\n                    <Breadcrumb\n                        style={{\n                            marginBottom: '24px',\n                        }}\n                        routes={['首页', '当这个页面标题很长时需要省略', '上一页', '详情页']}\n                    />\n                    <div\n                        style={{\n                            borderRadius: '10px',\n                            border: '1px solid var(--semi-color-border)',\n                            height: '376px',\n                            padding: '32px',\n                        }}\n                    >\n                        <Skeleton placeholder={<Skeleton.Paragraph rows={2} />} loading={true}>\n                            <p>Hi, Bytedance dance dance.</p>\n                            <p>Hi, Bytedance dance dance.</p>\n                        </Skeleton>\n                    </div>\n                </Content>\n            </Layout>\n            <Footer\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    padding: '20px',\n                    color: 'var(--semi-color-text-2)',\n                    backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                }}\n            >\n                <span\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n                    <span>Copyright © 2023 ByteDance. All Rights Reserved. </span>\n                </span>\n                <span>\n                    <span style={{ marginRight: '24px' }}>平台客服</span>\n                    <span>反馈建议</span>\n                </span>\n            </Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Disabled Time Ranges\nDESCRIPTION: Example showing how to disable specific date and time ranges in DatePicker component using disabledDate and disabledTime props. Includes examples for single date picker and date range picker.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport * as dateFns from 'date-fns';\nimport { range } from 'lodash-es';\n\nclass App extends React.Component {\n    constructor(props = {}) {\n        super(props);\n\n        this.today = () => new Date();\n\n        this.nextValidMonth = () => {\n            const nextValidDate = this.today();\n            nextValidDate.setMonth((nextValidDate.getMonth() + 1) % 12);\n            return nextValidDate;\n        };\n\n        this.disabledTime = date =>\n            dateFns.isToday(date)\n                ? {\n                    disabledHours: () => [17, 18],\n                    disabledMinutes: hour => (19 === hour ? range(0, 10, 1) : []),\n                    disabledSeconds: (hour, minute) => (hour === 20 && minute === 20 ? range(0, 20, 1) : []),\n                }\n                : null;\n\n        this.disabledTime2 = (date, panelType) => {\n            if (panelType === 'left') {\n                return { disabledHours: () => [17, 18] };\n            } else {\n                return { disabledHours: () => [12, 13, 14, 15, 16, 17, 18] };\n            }\n        };\n\n        this.disabledDate = date => {\n            const deadDate = this.today();\n            const month = deadDate.getMonth();\n            deadDate.setDate(28);\n            deadDate.setMonth((month + 1) % 12);\n            return date.getTime() < deadDate.getTime();\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h4>Disabled 17:00:00-18:00:00 today</h4>\n                    <DatePicker type=\"dateTime\" hideDisabledOptions={false} disabledTime={this.disabledTime} />\n                </div>\n                <div>\n                    <h4>Two panels disable different times</h4>\n                    <DatePicker\n                        type=\"dateTimeRange\"\n                        hideDisabledOptions={false}\n                        disabledTime={this.disabledTime2}\n                        style={{ width: 400 }}\n                    />\n                </div>\n                <div>\n                    <h4>Disable time before the 28th of next month</h4>\n                    <DatePicker\n                        type=\"dateTimeRange\"\n                        disabledDate={this.disabledDate}\n                        defaultPickerValue={this.nextValidMonth()}\n                        style={{ width: 400 }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic UserGuide Implementation with React\nDESCRIPTION: Demonstrates basic usage of UserGuide component with multiple steps, including Switch, Tag, and Button components as targets. Features event handlers for navigation and completion.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button onClick={showDialog}>Start Guide</Button>\n            <br />\n            <br />\n            <Space>\n                <Switch id={'basic-demo-1'} defaultChecked={true}></Switch>\n                <Tag id={'basic-demo-2'}> Default Tag </Tag>\n                <Button id={'basic-demo-3'}>Confirm</Button>\n            </Space>\n            <UserGuide\n                mode=\"popup\"\n                mask={true}\n                visible={visible}\n                steps={[\n                    {\n                        target: document.querySelector('#basic-demo-1'),\n                        title: \"Beginner's Guide\",\n                        description: 'Hello ByteDancer!',\n                        position: 'bottom',\n                    },\n                    {\n                        target: document.querySelector('#basic-demo-2'),\n                        title: 'Switch',\n                        description: 'This is a Semi Switch',\n                        position: 'bottom',\n                    },\n                    {\n                        target: document.querySelector('#basic-demo-3'),\n                        title: 'Button',\n                        description: 'This is a Semi Button',\n                        position: 'bottom',\n                    },\n                ]}\n                onChange={(current) => {\n                    console.log('Current guide step', current);\n                }}\n                onNext={(current) => {\n                    console.log('Next guide step');\n                }}\n                onPrev={(current) => {\n                    console.log('Previous guide step');\n                }}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Implementation with Items\nDESCRIPTION: Demonstrates basic usage of Navigation component with items, header and footer configuration. Shows how to set up navigation items with icons and text.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconSemiLogo } from '@douyinfe/semi-icons';\nimport { IconDescriptions, IconIntro, IconTree, IconAvatar, IconTreeSelect, IconTabs } from '@douyinfe/semi-icons-lab';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                bodyStyle={{ height: 320 }}\n                items={[\n                    { itemKey: 'user', text: '用户管理', icon: <IconAvatar /> },\n                    { itemKey: 'union', text: '活动管理', icon: <IconDescriptions /> },\n                    {\n                        text: '任务平台',\n                        icon: <IconTree />,\n                        itemKey: 'job',\n                        items: ['任务管理', '用户任务查询'],\n                    },\n                ]}\n                header={{\n                    logo: <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />,\n                    text: 'Semi 运营后台'\n                }}\n                footer={{\n                    collapseButton: true,\n                }}\n                onSelect={data => console.log('trigger onSelect: ', data)}\n                onClick={data => console.log('trigger onClick: ', data)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of TimePicker in React\nDESCRIPTION: Demonstrates the basic usage of the TimePicker component in a React functional component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Triggers for Cascader in React\nDESCRIPTION: This example demonstrates how to customize the display of the Cascader component using the triggerRender property. It shows both single-selection with a Button trigger and multi-selection with a TagInput component, providing custom rendering for selected values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Cascader, Button, Tag, TagInput } from '@douyinfe/semi-ui';\nimport { IconClose, IconChevronDown } from '@douyinfe/semi-icons';\n\n\nfunction Demo() {\n    const treeData = useMemo(() => [\n        {\n            label: 'Asia',\n            value: 'asia',\n            children: [\n                {\n                    label: 'China',\n                    value: 'china',\n                    children: [\n                        {\n                            label: 'Guangdong',\n                            value: 'guangdong',\n                        },\n                        {\n                            label: 'Beijing',\n                            value: 'beijing',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'shanghai',\n                        },\n                    ],\n                },\n                {\n                    label: 'Korea',\n                    value: 'korea',\n                    children: [\n                        {\n                            label: 'Seoul',\n                            value: 'seoul',\n                        }\n                    ]\n                },\n            ],\n        }\n    ], []);\n\n    const closeIcon = useCallback((value, onClear) => {\n        return value ? <IconClose onClick={onClear} /> : <IconChevronDown />;\n    }, []);\n\n    const triggerRenderSingle = ({ value, placeholder, onClear, ...rest }) => {\n        return (\n            <Button theme={'light'} icon={closeIcon(value, onClear)} iconPosition={'right'}>\n                {value && value.length > 0 ? getLabelFromValue(value) : placeholder}\n            </Button>\n        );\n    };\n\n    const getLabelFromValue = useCallback((value) => {\n        const valueArr = value.split('-').map(item => Number(item));\n        let resultData = treeData;\n        valueArr.forEach((item, index) => {\n            resultData = index === 0 ? resultData[item] : resultData.children[item];\n        });\n        return resultData.label;\n    }, [treeData]);\n\n    const triggerRenderMultiple = useCallback((props) => {\n        const { value, onSearch, onRemove } = props;\n        const onCloseTag = (value, e, tagKey) => {\n            onRemove(tagKey);\n        };\n\n        const renderTagItem = (value) => {\n            const label = getLabelFromValue(value);\n            return <Tag tagKey={value} key={value} closable onClose={onCloseTag} style={{ marginLeft: 2 }}>{label}</Tag>;\n        };\n        \n        return (\n            <TagInput\n                value={Array.from(value)}\n                onInputChange={onSearch}\n                renderTagItem={renderTagItem}\n            />\n        );\n    }, []);\n\n    return (\n        <>\n            <Cascader\n                treeData={treeData}\n                placeholder='Custom Trigger'\n                triggerRender={triggerRenderSingle}\n            />\n            <br />\n            <Cascader\n                triggerRender={triggerRenderMultiple}\n                multiple\n                filterTreeNode\n                treeData={treeData}\n                style={{ width: 300 }}\n                placeholder='Custom Trigger'\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Usage in React\nDESCRIPTION: Demonstrates basic usage of the Select component with default values and placeholders. Each Option must declare a 'value' attribute and the content will be rendered in the dropdown list.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select defaultValue=\"douyin\" style={{ width: 120 }}>\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select placeholder=\"Select line of business\" style={{ width: 120 }}>\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Chart Implementation in React with VChart\nDESCRIPTION: Creates a basic bar chart with configurable vertical/horizontal orientation. Uses sales data across weekdays and includes title, legends, and orientation controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\nimport { initVChartSemiTheme } from '@visactor/vchart-semi-theme';\n\ninitVChartSemiTheme();\n\nconst commonSpec = {\n  type: 'bar',\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { type:'Date', month: 'Monday', sales: 22 },\n        { type:'Date', month: 'Tuesday', sales: 13 },\n        { type:'Date', month: 'Wednesday', sales: 25 },\n        { type:'Date', month: 'Thursday', sales: 29 },\n        { type:'Date', month: 'Friday', sales: 38 }\n      ]\n    }\n  ],\n  title: {\n    visible: true,\n    text: 'Bar chart',\n    subtext: 'This is a bar chart',\n  },\n  legends: {\n    visible: true,\n  },\n  xField: 'month',\n  yField: 'sales',\n  seriesField: 'type',\n};\n\nfunction App() {\n  const [direction, setDirection] = useState(\"vertical\");\n  const onChange = useCallback((e) => setDirection(e.target.value), []);\n  const spec = useMemo(() => {\n    const isVertical = direction === 'vertical';\n    return {\n      ...commonSpec,\n      xField: isVertical ? 'month' : 'sales',\n      yField: isVertical ? 'sales' : 'month',\n      direction: direction,\n    };\n  }, [direction]);\n  return (\n    <>\n     <RadioGroup onChange={onChange} value={direction} >\n        <Radio value={'vertical'}>vertical</Radio>\n        <Radio value={'horizontal'}>horizontal</Radio>\n      </RadioGroup>\n      <div style={{ height: 440 }}>\n        <VChart\n          key={direction}\n          spec={spec}\n          option={{ mode: \"desktop-browser\" }}\n        />\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Vertical and Horizontal Resizable Layout in React\nDESCRIPTION: This snippet demonstrates how to create a complex nested layout with both vertical and horizontal resizable components. It uses ResizeGroup, ResizeItem, and ResizeHandler components from Semi Design, and includes resize event handling and toast notifications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [text, setText] = useState('Drag to resize')\n  const opts_1 = {\n    content: 'resize start',\n    duration: 1,\n    stack: true,\n  };\n  const opts = {\n    content: 'resize end',\n    duration: 1,\n    stack: true,\n  };\n  return (\n    <div style={{ width: '1000px', height: '600px' }}>\n      <ResizeGroup direction='vertical'>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n          defaultSize={\"20%\"}\n          onChange={() => { setText('resizing') }}\n          onResizeStart={() => Toast.info(opts_1)}\n          onResizeEnd={() => { Toast.info(opts); setText('Drag to resize') }}\n        >\n          <div style={{ marginLeft: '20%' }}>\n            {'header'}\n          </div>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          defaultSize={\"80%\"}\n          onChange={() => { setText('resizing') }}\n        >\n          <ResizeGroup direction='horizontal'>\n            <ResizeItem\n              style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"25%\"}\n              onChange={() => { setText('resizing') }}\n              onResizeStart={() => Toast.info(opts_1)}\n              onResizeEnd={() => { Toast.info(opts); setText('Drag to resize') }}\n            >\n              <div style={{ marginLeft: '20%' }}>\n                {'tab'}\n              </div>\n            </ResizeItem>\n            <ResizeHandler></ResizeHandler>\n            <ResizeItem\n              style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"75%\"}\n              onChange={() => { setText('resizing') }}\n            >\n              <div style={{ marginLeft: '20%' }}>\n                {text}\n              </div>\n            </ResizeItem>\n            \n          </ResizeGroup>\n        </ResizeItem>\n      </ResizeGroup>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Extra Areas in DatePicker with React and Semi Design\nDESCRIPTION: This snippet demonstrates how to use topSlot, bottomSlot, leftSlot, and rightSlot to render extra areas in the DatePicker component. It includes custom tabs, disabled date logic, and various DatePicker configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useMemo } from 'react';\nimport { DatePicker, Typography, Tabs, TabPane, Space } from '@douyinfe/semi-ui';\nimport { IconBulb } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Text } = Typography;\n    const [activeTab, setActiveTab] = useState('1');\n    const [date, setDate] = useState();\n    const uedDisabledDate = currentDate => currentDate && currentDate.getDate() > 10 && currentDate.getDate() < 15;\n    const testDisabledDate = currentDate => currentDate && currentDate.getDate() > 15 && currentDate.getDate() < 25;\n\n    const handleTabChange = tab => {\n        setActiveTab(tab);\n        setDate();\n    };\n\n    const handleDateChange = value => {\n        setDate(value);\n    };\n\n    const disabledDate = useMemo(() => (activeTab === '1' ? uedDisabledDate : testDisabledDate), [activeTab]);\n\n    const TopSlot = function(props) {\n        const { style } = props;\n        return (\n            <Tabs\n                size=\"small\"\n                onChange={handleTabChange}\n                activeKey={activeTab}\n                style={{ padding: '12px 20px 0', ...style }}\n            >\n                <TabPane tab=\"UED 排期\" itemKey=\"1\" />\n                <TabPane tab=\"测试排期\" itemKey=\"2\" />\n            </Tabs>\n        );\n    };\n\n    const BottomSlot = function(props) {\n        const { style } = props;\n        return (\n            <Space style={{ padding: '12px 20px', ...style }}>\n                <IconBulb style={{ color: 'rgba(var(--semi-amber-5), 1)' }} />\n                <Text strong style={{ color: 'var(--semi-color-text-2)' }}>\n                    定版前请阅读\n                </Text>\n                <Text link={{ href: 'https://semi.design/', target: '_blank' }}>发版须知</Text>\n            </Space>\n        );\n    };\n\n    const MonthBottomSlot = function(props) {\n        const { style } = props;\n        return (\n            <Space style={{ padding: '12px 20px', ...style }}>\n                <IconBulb style={{ color: 'rgba(var(--semi-amber-5), 1)' }} />\n                <Text strong style={{ color: 'var(--semi-color-text-2)' }}>\n                    请阅读\n                </Text>\n                <Text link={{ href: 'https://semi.design/', target: '_blank' }}>须知</Text>\n            </Space>\n        );\n    };\n\n    return (\n        <div>\n            <DatePicker\n                topSlot={<TopSlot />}\n                disabledDate={disabledDate}\n                value={date}\n                onChange={handleDateChange}\n                dropdownClassName=\"components-datepicker-demo-slot\"\n                placeholder=\"请选择排期\"\n            />\n            <br />\n            <br />\n            <DatePicker bottomSlot={<BottomSlot />} placeholder=\"请选择发版时间\" />\n            <br />\n            <br />\n            <DatePicker type=\"month\" bottomSlot={<MonthBottomSlot />} placeholder=\"请选择年月\" />\n            <br />\n            <br />\n            <DatePicker\n                topSlot={<TopSlot style={{ padding: '8px 12px 0' }} />}\n                bottomSlot={<BottomSlot style={{ padding: '8px 12px' }} />}\n                density=\"compact\"\n                placeholder=\"小尺寸\"\n                dropdownClassName=\"components-datepicker-demo-slot\"\n            />\n            <br />\n            <br />\n            <DatePicker type=\"dateTimeRange\" bottomSlot={<BottomSlot />} style={{ width: 400 }} />\n            <br />\n            <br />\n        </div>\n    );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.components-datepicker-demo-slot {\n    .semi-tabs-content {\n        padding: 0;\n    }\n\n    .semi-tabs-bar-line.semi-tabs-bar-top {\n        border-bottom: none;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Grid Layout with Semi Design in React\nDESCRIPTION: This code snippet demonstrates how to create a responsive grid layout using the Row and Col components from Semi Design. It showcases the use of responsive props for different screen sizes and gutter configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid\">\n        <Row gutter={{ xs: 16, sm: 16, md: 16, lg: 24, xl: 24, xxl: 24 }}>\n            <Col xs={2} sm={4} md={6} lg={8} xl={10}><div className=\"col-content\">Col</div></Col>\n            <Col xs={20} sm={16} md={12} lg={8} xl={4}><div className=\"col-content\">Col</div></Col>\n            <Col xs={2} sm={4} md={6} lg={8} xl={10}><div className=\"col-content\">Col</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}><div className=\"col-content\">Col</div></Col>\n            <Col xs={{ span: 11, offset: 1 }} lg={{ span: 6, offset: 2 }}><div className=\"col-content\">Col</div></Col>\n            <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}><div className=\"col-content\">Col</div></Col>\n        </Row>\n    </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Content Renderer with Source Card Implementation\nDESCRIPTION: Implementation of a custom chat interface with source card rendering and markdown content display functionality, including an expandable source information panel.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomRender() {\n    const [message, setMessage] = useState(defaultMessage);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n     const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            content: `This is a mock response`\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const renderContent = useCallback((props) => {\n        const { role, message, defaultNode, className } = props;\n        return <div className={className}>\n            {message.source && <SourceCard source={message.source} />}\n            <MarkdownRender raw={message.content}/>\n        </div>\n    }, []);\n\n    return (\n        <Chat\n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            chatBoxRenderConfig={{ renderChatBoxContent: renderContent }}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            uploadProps={uploadProps}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Light Theme Buttons\nDESCRIPTION: Demonstrates how to create buttons with the light theme (default) in various types.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const themes = [['light', 'light']];\n    const types = [['primary', 'primary'], ['secondary', 'secondary'], ['tertiary', 'tertiary'], ['warning', 'warning'], ['danger', 'danger']];\n\n    return (\n        <div>{\n            themes.map((theme, idxTheme) => (\n                <div key={idxTheme}>\n                    <ul style={{ listStyle: 'none', display: 'flex', margin: 0, padding: 0 }}>\n                        {types.map((type, idxType) => (\n                            <li key={'' + idxTheme + idxType} style={{ margin: 10 }}>\n                                <Button\n                                    theme={theme[0]}\n                                    type={type[0]}\n                                >\n                                    {theme[1]} {type[1]}\n                                </Button>\n                            </li>)\n                        )}\n                    </ul>\n                </div>))\n        }\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Upload in React\nDESCRIPTION: Shows various implementations of drag and drop upload functionality, including custom icons, text, and fully customized drag areas.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\n\n() => (\n    <Upload\n        action=\"//semi.design/api/upload\"\n        draggable={true}\n        dragMainText=\"Click to upload the file or drag and drop the file here\"\n        dragSubText=\"Support any type of file\"\n    ></Upload>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Picture Wall Upload Component with Image Thumbnails\nDESCRIPTION: This example shows how to create a picture wall upload interface by setting listType to 'picture'. It automatically uses the url property to display thumbnails for existing files in the defaultFileList.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dy.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n    return (\n        <>\n            <Upload action={action} listType=\"picture\" accept=\"image/*\" multiple defaultFileList={defaultFileList}>\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Controlled Properties in Semi-UI Navigation Component (JSX)\nDESCRIPTION: Example of using controlled properties in a Semi-UI Nav component with state management for isCollapsed, selectedKeys, and openKeys. Shows the implementation of callback handlers for each state change event.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconUserGroup, IconSetting } from '@douyinfe/semi-icons';\n\nfunction NavApp (props = {}) {\n    const [openKeys, setOpenKeys] = useState(['union-management', 'job']);\n    const [selectedKeys, setSelectedKeys] = useState(['User Task Query']);\n    const [isCollapsed, setIsCollapsed] = useState(true);\n\n    const onSelect = data => {\n        console.log('trigger onSelect: ', data);\n        setSelectedKeys([...data.selectedKeys]);\n    };\n    const onOpenChange = data => {\n        console.log('trigger onOpenChange: ', data);\n        setOpenKeys([...data.openKeys]);\n    };\n\n    const onCollapseChange = isCollapsed => {\n        setIsCollapsed(isCollapsed);\n    };\n\n    const items = useMemo(() => [\n        { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n        { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n        {\n            itemKey: 'union-management',\n            text: 'Union Management',\n            icon: <IconUserGroup />,\n            items: ['Announcement Settings', 'Union Query', 'Entry Information']\n        },\n        {\n            text: 'Task Platform',\n            icon: <IconSetting />,\n            itemKey: 'job',\n            items: ['Task Management', 'User Task Query'],\n        },\n    ], []);\n\n    return (\n        <Nav\n            isCollapsed={isCollapsed}\n            openKeys={openKeys}\n            selectedKeys={selectedKeys}\n            bodyStyle={{ height: 360 }}\n            items={items}\n            header={{\n                logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                text: 'Live Platform'\n            }}\n            footer={{\n                collapseButton: true\n            }}\n            onCollapseChange={onCollapseChange}\n            onOpenChange={onOpenChange}\n            onSelect={onSelect}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Usage in Semi-Design\nDESCRIPTION: Demonstrates the basic usage of the grid system, showing various column spans within rows. This example illustrates how to create a responsive layout using the 24-column grid.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid\">\n        <Row>\n            <Col span={24}><div className=\"col-content\">col-24</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={12}><div className=\"col-content\">col-12</div></Col>\n            <Col span={12}><div className=\"col-content\">col-12</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Horizontal and Vertical Navigation in Semi Design\nDESCRIPTION: Demonstrates how to implement a combined horizontal and vertical navigation layout commonly used in platform designs. Includes separate render methods for both navigation types.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav, Avatar, Dropdown, Select, Button } from '@douyinfe/semi-ui';\nimport { IconStar, IconUser, IconUserGroup, IconSetting, IconEdit, IconLanguage } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    constructor() {\n        this.items = [\n            { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n            { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n            {\n                itemKey: 'union-management',\n                text: 'Union Management',\n                icon: <IconUserGroup />,\n                items: ['Announcement Settings', 'Union Query', 'Entry Information']\n            },\n            {\n                itemKey: 'approve-management',\n                text: 'Approval Management',\n                icon: <IconEdit />,\n                items: [\n                    'Check-in Review',\n                    {\n                        itemKey: 'operation-management',\n                        text: 'Operations Management',\n                        items: [\n                            'Personnel Management',\n                            'Personnel Change'\n                        ]\n                    }\n                ]\n            },\n            {\n                text: 'Task Platform',\n                icon: <IconSetting />,\n                itemKey: 'job',\n                items: ['Task Management', 'User Task Query'],\n            },\n        ];\n\n        this.renderHorizontal = this.renderHorizontal.bind(this);\n        this.renderVertical = this.renderVertical.bind(this);\n    }\n\n    renderHorizontal() {\n        return (\n            <Nav\n                mode={'horizontal'}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                    {\n                        itemKey: 'approve-management',\n                        text: 'Approval Management',\n                        icon: <IconEdit />,\n                        items: [\n                            'Check-in Review',\n                            {\n                                itemKey: 'operation-management',\n                                text: 'Operations Management',\n                                items: [\n                                    'Personnel Management',\n                                    'Personnel Change'\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        text: 'Task Platform',\n                        icon: <IconSetting />,\n                        itemKey: 'job',\n                        items: ['Task Management', 'User Task Query'],\n                    },\n                ]}\n                onSelect={key => console.log(key)}\n                header={{\n                    logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                    text: 'Live Platform'\n                }}\n                footer={\n                    <Dropdown\n                        position=\"bottomRight\"\n                        render={\n                            <Dropdown.Menu>\n                                <Dropdown.Item>Detail</Dropdown.Item>\n                                <Dropdown.Item>Quit</Dropdown.Item>\n                            </Dropdown.Menu>\n                        }\n                    >\n                        <Avatar size=\"small\" color='light-blue' style={{ margin: 4 }}>BD</Avatar>\n                        <span>Bytedancer</span>\n                    </Dropdown>\n                }\n            />\n\n        );\n    }\n\n    renderVertical() {\n        return (\n            <Nav\n                bodyStyle={{ height: 320 }}\n                items={this.items}\n                onSelect={key => console.log(key)}\n                footer={{\n                    collapseButton: true,\n                }}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <>\n                {this.renderHorizontal()}\n                {this.renderVertical()}\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Chat Updates with Semi Design in React\nDESCRIPTION: This snippet demonstrates how to create a chat interface that dynamically updates with server-sent events. It uses the Semi Design Chat component and includes functionality for stopping message generation and handling file uploads.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"介绍一下 Semi design\"\n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: `\nSemi Design is a design system designed, developed and maintained by Douyin's front-end team and MED product design team. As a comprehensive, easy-to-use, high-quality modern application UI solution, Semi Design is extracted from the complex scenarios of ByteDance's various business lines. It has currently supported nearly a thousand platform products and served more than 100,000 internal and external users.[[1]](https://semi.design/zh-CN/start/introduction)。\n\nSemi Design features include:\n\n1. Simple and modern design.\n2. Provide theme solutions, which can be customized in depth.\n3. Provide two sets of light and dark color modes, easy to switch.\n4. Internationalization, covering 20+ languages ​​such as Simplified/Traditional Chinese, English, Japanese, Korean, Portuguese, etc. The date and time component provides global time zone support, and all components can automatically adapt to the Arabic RTL layout.\n5. Use Foundation and Adapter cross-framework technical solutions to facilitate expansion.\n\n---\nLearn more:\n1. [Introduction - Semi Design](https://semi.design/zh-CN/start/introduction)\n2. [Getting Started - Semi Design](https://semi.design/zh-CN/start/getting-started)\n3. [The evolution of Semi D2C design draft to code - Zhihu](https://zhuanlan.zhihu.com/p/667189184)\n`,\n    }\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    height: 600,\n}\n\nlet id = 0;\nfunction getId() {\n    return `id-${id++}`\n}\nconst uploadProps = { action: 'https://api.semi.design/upload' }\n\nfunction DynamicUpdateChat() {\n    const [message, setMessage] = useState(defaultMessage);\n    const intervalId = useRef();\n    const onMessageSend = useCallback((content, attachment) => {\n        setMessage((message) => {\n            return [\n                ...message,\n                {\n                    role: 'assistant',\n                    status: 'loading',\n                    createAt: Date.now(),\n                    id: getId()\n                }\n            ]\n        }); \n        generateMockResponse(content);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const generateMockResponse = useCallback((content) => {\n        const id = setInterval(() => {\n            setMessage((message) => {\n                const lastMessage = message[message.length - 1];\n                let newMessage = {...lastMessage};\n                if (lastMessage.status === 'loading') {\n                    newMessage = {\n                        ...newMessage,\n                        content:  `mock Response for ${content} \\n`,\n                        status: 'incomplete'\n                    }\n                } else if (lastMessage.status === 'incomplete') {\n                    if (lastMessage.content.length > 200) {\n                        clearInterval(id);\n                        intervalId.current = null\n                        newMessage = {\n                            ...newMessage,\n                            content: `${lastMessage.content} mock stream message`,\n                            status: 'complete'\n                        }\n                    } else {\n                        newMessage = {\n                            ...newMessage,\n                            content: `${lastMessage.content} mock stream message`\n                        }\n                    }  \n                }\n                return [ ...message.slice(0, -1), newMessage ]\n            })\n        }, 400);\n        intervalId.current = id;\n    }, []);\n\n    const onStopGenerator = useCallback(() => {\n        if (intervalId.current) {\n            clearInterval(intervalId.current);\n            setMessage((message) => {\n                const lastMessage = message[message.length - 1];\n                if (lastMessage.status && lastMessage.status !== 'complete') {\n                    const lastMessage = message[message.length - 1];\n                    let newMessage = {...lastMessage};\n                    newMessage.status = 'complete';\n                    return [\n                        ...message.slice(0, -1),\n                        newMessage\n                    ]\n                } else {\n                    return message;\n                }\n            })\n        }\n    }, [intervalId]);\n\n    return (\n        <Chat \n            chats={message}\n            showStopGenerate={true}\n            style={commonOuterStyle}\n            onStopGenerator={onStopGenerator}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            uploadProps={uploadProps}\n        />\n    )\n}\n\nrender(DynamicUpdateChat);\n```\n\n----------------------------------------\n\nTITLE: Synchronous File Validation with beforeUpload in React\nDESCRIPTION: This React component demonstrates synchronous file validation using the `beforeUpload` hook in Semi Design's Upload component. It showcases how to control the file upload process by returning a `beforeUploadResult` object, enabling actions such as preventing upload, changing file status, and setting custom validation messages.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\nclass ValidateDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.beforeUpload = this.beforeUpload.bind(this);\n        this.transformFile = this.transformFile.bind(this);\n        this.count = 0;\n    }\n\n    transformFile(fileInstance) {\n        if (this.count === 0) {\n            let newFile = new File([fileInstance], 'newFileName', { type: 'image/png' });\n            return newFile;\n        } else {\n            return fileInstance;\n        }\n    }\n\n    beforeUpload({ file, fileList }) {\n        let result;\n        if (this.count > 0) {\n            result = {\n                autoRemove: false,\n                fileInstance: file.fileInstance,\n                shouldUpload: true,\n            };\n        } else {\n            result = {\n                autoRemove: false,\n                fileInstance: file.fileInstance,\n                status: 'validateFail',\n                shouldUpload: false,\n            };\n        }\n        this.count = this.count + 1;\n        return result;\n    }\n\n    render() {\n        return (\n            <Upload\n                action=\"//semi.design/api/upload\"\n                transformFile={this.transformFile}\n                beforeUpload={this.beforeUpload}\n            >\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Click upload (synchronize check before upload)\n                </Button>\n            </Upload>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching System Theme Preferences with JavaScript\nDESCRIPTION: This JavaScript snippet uses the 'prefers-color-scheme' media query to detect system theme preferences and automatically switch between light and dark modes accordingly.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst mql = window.matchMedia('(prefers-color-scheme: dark)');\n\nfunction matchMode(e) {\n    const body = document.body;\n    if (e.matches) {\n        if (!body.hasAttribute('theme-mode')) {\n            body.setAttribute('theme-mode', 'dark');\n        }\n    } else {\n        if (body.hasAttribute('theme-mode')) {\n            body.removeAttribute('theme-mode');\n        }\n    }\n}\n\nmql.addListener(matchMode);\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload with Dynamic Button State\nDESCRIPTION: Shows how to implement a multiple file upload with dynamic button disabled state and upload limit warnings. Includes Toast notifications when limit is exceeded.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://semi.design/api/upload';\n    let [disabled, setDisabled] = useState(false);\n    let limit = 2;\n    let onChange = props => {\n        let length = props.fileList.length;\n        if (length === limit) {\n            setDisabled(true);\n        } else {\n            setDisabled(false);\n        }\n    };\n    return (\n        <Upload\n            action={action}\n            limit={limit}\n            onExceed={() => Toast.warning(`Up to ${limit} files are allowed to be uploaded`)}\n            onChange={onChange}\n        >\n            <Button icon={<IconUpload />} theme=\"light\" disabled={disabled}>\n                Click to upload (up to {limit} items)\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Usage in React\nDESCRIPTION: Demonstrates basic usage of the Pagination component with different total page counts and page sizes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={30} style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={80} style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={200} style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={80} pageSize={30} style={{ marginBottom: 12 }}></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Horizontal and Vertical Navigation with Semi Design in React\nDESCRIPTION: This code snippet showcases a more complex navigation setup using Semi Design components. It combines horizontal and vertical navigation, includes a layout with header, footer, and sidebar, and demonstrates the use of various Semi Design components like Layout, Breadcrumb, and Skeleton.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav, Avatar, Dropdown, Select, Button, Layout, Breadcrumb, Skeleton } from '@douyinfe/semi-ui';\nimport { IconStar, IconLanguage, IconSemiLogo, IconBytedanceLogo, IconBell, IconHelpCircle } from '@douyinfe/semi-icons';\nimport { IconTreeSelect, IconForm, IconBreadcrumb, IconBanner, IconBadge, IconNotification, IconSteps, IconTree, IconTabs, IconNavigation } from '@douyinfe/semi-icons-lab';\n\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n\n    const TopHeader = () => (\n        <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n            <div>\n                <Nav\n                    mode={'horizontal'}\n                    items={[\n                        { itemKey: 'user', text: '用户管理', icon: <IconBadge /> },\n                        { itemKey: 'union', text: '活动管理', icon: <IconTreeSelect /> },\n                        {\n                            itemKey: 'approve-management',\n                            text: '审批管理',\n                            icon: <IconBreadcrumb />,\n                            items: [\n                                '入驻审核',\n                                {\n                                    itemKey: 'operation-management',\n                                    text: '运营管理',\n                                    items: [\n                                        '人员管理',\n                                        '人员变更'\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            text: '任务平台',\n                            icon: <IconSteps />,\n                            itemKey: 'job',\n                            items: ['任务管理', '用户任务查询'],\n                        },\n                    ]}\n                    onSelect={key => console.log(key)}\n                    header={{\n                        logo: <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />,\n                        text: 'Semi 运营后台'\n                    }}\n                    footer={\n                        <Dropdown\n                            position=\"bottomRight\"\n                            render={\n                                <Dropdown.Menu>\n                                    <Dropdown.Item>详情</Dropdown.Item>\n                                    <Dropdown.Item>退出</Dropdown.Item>\n                                </Dropdown.Menu>\n                            }\n                        >\n                            <Avatar size=\"small\" color='light-blue' style={{ margin: 4 }}>BD</Avatar>\n                            <span>Bytedancer</span>\n                        </Dropdown>\n                    }\n                />\n            </div>\n        </Header>\n    );\n\n    const LeftNav = () => (\n        <Nav\n            style={{ maxWidth: 220, height: '100%' }}\n            defaultSelectedKeys={['Home']}\n            items={[\n                {\n                    itemKey: 'approve-management',\n                    text: '审批管理',\n                    icon: <IconBreadcrumb />,\n                    items: [\n                        '入驻审核',\n                        {\n                            itemKey: 'operation-management',\n                            text: '运营管理',\n                            items: [\n                                '人员管理',\n                                '人员变更'\n                            ]\n                        }\n                    ]\n                },\n                {\n                    text: '任务平台',\n                    icon: <IconSteps />,\n                    itemKey: 'job',\n                    items: ['任务管理', '用户任务查询'],\n                },\n                { itemKey: 'user', text: '用户管理', icon: <IconBadge /> },\n                { itemKey: 'union', text: '活动管理', icon: <IconTreeSelect /> },\n            ]}\n            footer={{\n                collapseButton: true,\n            }}\n        />\n    );\n\n    const FooterContent = () => (\n        <>\n            <span\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n                <span>Copyright © {new Date().getFullYear()} ByteDance. All Rights Reserved. </span>\n            </span>\n            <span>\n                <span style={{ marginRight: '24px' }}>平台客服</span>\n                <span>反馈建议</span>\n            </span>\n        </>\n    );\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <TopHeader />\n            <Layout>\n                <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <LeftNav />\n                </Sider>\n                <Content\n                    style={{\n                        padding: '24px',\n                        backgroundColor: 'var(--semi-color-bg-0)',\n                    }}\n                >\n                    <Breadcrumb\n                        style={{\n                            marginBottom: '24px',\n                        }}\n                        routes={['首页', '当这个页面标题很长时需要省略', '上一页', '详情页']}\n                    />\n                    <div\n                        style={{\n                            borderRadius: '10px',\n                            border: '1px solid var(--semi-color-border)',\n                            height: '376px',\n                            padding: '32px',\n                        }}\n                    >\n                        <Skeleton placeholder={<Skeleton.Paragraph rows={2} />} loading={true}>\n                            <p>Hi, Bytedance dance dance.</p>\n                            <p>Hi, Bytedance dance dance.</p>\n                        </Skeleton>\n                    </div>\n                </Content>\n            </Layout>\n            <Footer\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    padding: '20px',\n                    color: 'var(--semi-color-text-2)',\n                    backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                }}\n            >\n                <FooterContent />\n            </Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Semi Design with UMD Import in Browser\nDESCRIPTION: HTML setup for using Semi Design components directly in the browser using UMD imports. It includes necessary script and link tags for React, Semi UI, icons, and illustrations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html lang=\"zh-cn\">\n    <head>\n        <script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\n+       <script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\n+       <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\n\n+       <script src=\"https://unpkg.com/@douyinfe/semi-ui@2.27.0/dist/umd/semi-ui-react.min.js\"></script>\n+       <link rel=\"stylesheet\" href=\"https://unpkg.com/@douyinfe/semi-ui@2.27.0/dist/css/semi.css\">\n\n+       <script src=\"https://unpkg.com/@douyinfe/semi-icons@latest/dist/umd/semi-icons.min.js\"></script>\n+       <link rel=\"stylesheet\" href=\"https://unpkg.com/@douyinfe/semi-icons@latest/dist/css/semi-icons.css\">\n+       <script src=\"https://unpkg.com/@douyinfe/semi-illustrations@latest/dist/umd/semi-illustrations.min.js\"></script>\n\n    </head>\n    <body>\n        <div id=\"root\"></div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Content in Tree Component for React\nDESCRIPTION: This example demonstrates how to customize node content in the Tree component using ReactNodes for labels and the renderLabel prop for more complex rendering scenarios.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree, ButtonGroup, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n    };\n\n    const button = (\n        <ButtonGroup\n            size=\"small\"\n            theme=\"borderless\"\n        >\n            <Button\n                onClick={e => {\n                    Toast.info(opts);\n                    e.stopPropagation();\n                }}\n            >提示</Button>\n            <Button>点击</Button>\n        </ButtonGroup>\n    );\n\n    const style = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    };\n\n    const treeDataWithNode = [\n        {\n            label: (\n                <div style={style}>\n                    <span>亚洲</span>\n                    {button}\n                </div>\n            ),\n            value: 'yazhou',\n            key: 'yazhou',\n            children: [\n                {\n                    label: (\n                        <div style={style}>\n                            <span>中国</span>\n                            {button}\n                        </div>\n                    ),\n                    value: 'zhongguo',\n                    key: 'zhongguo'\n                },\n                {\n                    label: (\n                        <div style={style}>\n                            <span>日本</span>\n                            {button}\n                        </div>\n                    ),\n                    value: 'riben',\n                    key: 'riben',\n                },\n            ],\n        }\n    ];\n    const treeStyle = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n    return (\n        <Tree\n            treeData={treeDataWithNode}\n            style={treeStyle}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualized TreeSelect for Large Data Sets\nDESCRIPTION: Shows how to use virtualization with TreeSelect for rendering large sets of tree-structured data. The virtualize property configures height, width, and itemSize for efficient rendering, while showFilteredOnly improves search performance.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect, Button } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            gData: [],\n            total: 0,\n        };\n        this.onGen = this.onGen.bind(this);\n    }\n\n    generateData(x = 5, y = 4, z = 3, gData = []) {\n        // x：number of nodes\n        // y：number of nodes with children in each level\n        // z：number of level\n        function _loop(_level, _preKey, _tns) {\n            const preKey = _preKey || '0';\n            const tns = _tns || gData;\n\n            const children = [];\n            for (let i = 0; i < x; i++) {\n                const key = `${preKey}-${i}`;\n                tns.push({ label: `${key}-label`, key: `${key}-key`, value: `${key}-value` });\n                if (i < y) {\n                    children.push(key);\n                }\n            }\n            if (_level < 0) {\n                return tns;\n            }\n            const __level = _level - 1;\n            children.forEach((key, index) => {\n                tns[index].children = [];\n                return _loop(__level, key, tns[index].children);\n            });\n\n            return null;\n        }\n        _loop(z);\n        \n        function calcTotal(x, y, z) {\n            const rec = n => (n >= 0 ? x * y ** n-- + rec(n) : 0);\n            return rec(z + 1);\n        }\n        return { gData, total: calcTotal(x, y, z) };\n    }\n\n      \n    onGen() {\n        const { gData, total } = this.generateData();\n        this.setState({\n            gData,\n            total\n        });\n    };\n  \n    render() {\n        return (\n            <div style={{ padding: '0 20px' }}>\n                <Button onClick={this.onGen}>Generate Data: </Button>\n                <span>In total: {this.state.total}</span>\n                <br/>\n                <br/>\n                {this.state.gData.length ? (\n                    <TreeSelect\n                        style={{ width: 300 }}\n                        treeData={this.state.gData}\n                        filterTreeNode\n                        showFilteredOnly\n                        placeholder=\"Please select\"\n                        dropdownStyle={{ \n                            overflow: 'hidden'\n                        }}\n                        virtualize={{\n                            itemSize: 28,\n                            // dropDown height 300 minus search box height minus padding 8 * 2\n                            // or if you set dropDown height, it will automatically fill rest space\n                            height: 236                \n                        }}\n                    />\n                ) : null}\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioGroup with Various Options in React\nDESCRIPTION: This code snippet demonstrates how to use the RadioGroup component from Semi Design with different option configurations. It includes examples of plain options, options with disabled items, and options with extra styling and content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value1: 'Guest',\n            value2: 'Developer',\n            value3: 'Maintainer',\n        };\n        this.plainOptions = ['Guest', 'Developer', 'Maintainer'];\n        this.options = [\n            { label: 'Guest', value: 'Guest', extra: 'Semi Design', style: { width: 120 } },\n            { label: 'Developer', value: 'Developer', extra: 'Semi Design', style: { width: 120 } },\n            { label: 'Maintainer', value: 'Maintainer', extra: 'Semi Design', style: { width: 120 } },\n        ];\n        this.optionsWithDisabled = [\n            { label: 'Guest', value: 'Guest' },\n            { label: 'Developer', value: 'Developer' },\n            { label: 'Maintainer', value: 'Maintainer', disabled: true },\n        ];\n        this.onChange1 = this.onChange1.bind(this);\n        this.onChange2 = this.onChange2.bind(this);\n        this.onChange3 = this.onChange3.bind(this);\n    }\n    onChange1(e) {\n        console.log('radio1 checked', e.target.value);\n        this.setState({\n            value1: e.target.value,\n        });\n    }\n\n    onChange2(e) {\n        console.log('radio2 checked', e.target.value);\n        this.setState({\n            value2: e.target.value,\n        });\n    }\n\n    onChange3(e) {\n        console.log('radio3 checked', e.target.value);\n        this.setState({\n            value3: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <RadioGroup options={this.plainOptions} onChange={this.onChange1} value={this.state.value1} aria-label=\"RadioGroup demo\" name=\"demo-radio-group-1\"/>\n                <br />\n                <br />\n                <RadioGroup options={this.optionsWithDisabled} onChange={this.onChange2} value={this.state.value2} aria-label=\"RadioGroup demo\" name=\"demo-radio-group-2\"/>\n                <br />\n                <br />\n                <RadioGroup options={this.options} onChange={this.onChange3} value={this.state.value3}aria-label=\"RadioGroup demo\" name=\"demo-radio-group-3\"/>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Content Notifications in React\nDESCRIPTION: Demonstrates how to create notifications with custom content and links using the Semi-Design Notification and Typography components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const { Text } = Typography;\n\n    let opts = {\n        title: 'This is a title',\n        content: (\n            <>\n                <div>Hi, Bytedance dance dance</div>\n                <div style={{ marginTop: 8 }}>\n                    <Text link>查看详情</Text>\n                    <Text link style={{ marginLeft: 20 }}>\n                        一会再看\n                    </Text>\n                </div>\n            </>\n        ),\n        duration: 3,\n    };\n\n    return <Button onClick={() => Notification.info(opts)}>Display Notification</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Drag-and-Drop Upload Area in React\nDESCRIPTION: This snippet demonstrates how to fully customize the drag-and-drop area of a file upload component using React and the Semi Design UI library. It includes custom icons, text, and styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconBolt } from '@douyinfe/semi-icons';\n\n() => (<Upload\n    action=\"https://api.semi.design/upload\"\n    dragIcon={<IconBolt />}\n    draggable={true}\n    accept=\"application/pdf,.jpeg\"\n    style={{ marginTop: 10 }}\n>\n    <div className=\"components-upload-demo-drag-area\">\n        <img\n            src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n            height=\"96\"\n            alt='demo img'\n            style={{ borderRadius: 4 }}\n        />\n        <div\n            style={{\n                fontSize: 14,\n                marginTop: 8,\n                flexBasis: '100%',\n                textAlign: 'center',\n                color: 'var(--semi-color-tertiary)',\n            }}\n        >\n            Wow, you can really dance.\n        </div>\n    </div>\n</Upload>\n);\n```\n\nLANGUAGE: scss\nCODE:\n```\n.components-upload-demo-drag-area {\n    border-radius: var(--semi-border-radius-small);\n    border: 2px dashed var(--semi-color-border);\n    width: 100%;\n    padding: 12px;\n    background-color: var(--semi-color-tertiary-light-default);\n    display: flex;\n    cursor: pointer;\n    flex-wrap: wrap;\n    justify-content: center;\n    &:hover {\n        background-color: var(--semi-color-primary-light-default);\n        border-color: var(--semi-color-primary);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Implementation with Semi Design\nDESCRIPTION: Complete example showing basic chat functionality including message display, role configuration, and layout options. Demonstrates handling message sending, chat changes, and different display modes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat, Radio } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"Give an example of using Semi Design's Button component\",\n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: \"The following is an example of using Semi code：\\n\\`\\`\\`jsx \\nimport React from 'react';\\nimport { Button } from '@douyinfe/semi-ui';\\n\\nconst MyComponent = () => {\\n  return (\\n    <Button>Click me</Button>\\n );\\n};\\nexport default MyComponent;\\n\\`\\`\\`\\n\",\n    }\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Dimensions in Picture Wall Upload Component\nDESCRIPTION: This example shows how to set uniform dimensions for image thumbnails in a picture wall using picHeight and picWidth props. It also demonstrates proper integration with the Image component for preview functionality with consistent dimensions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'image-1.jpg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        }\n    ];\n    return (\n        <>\n            <Upload\n                action={action}\n                listType=\"picture\"\n                accept=\"image/*\"\n                multiple\n                defaultFileList={defaultFileList}\n                picHeight={110}\n                picWidth={200}\n                renderThumbnail={(file) => (<Image src={file.url} width={200} height={110} />)}\n            >\n                <IconPlus size=\"extra-large\" style={{ margin: 4 }} />\n                点击添加图片\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Mode Switch Button Component in React\nDESCRIPTION: This React component creates a button that toggles between light and dark modes. It updates the body attribute and notifies the site of the mode change.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const switchMode = () => {\n        const body = document.body;\n        if (body.hasAttribute('theme-mode')) {\n            body.removeAttribute('theme-mode');\n            // Notify our site to update current mode\n            window.setMode('light');\n        } else {\n            body.setAttribute('theme-mode', 'dark');\n            // Notify our site to update current mode\n            window.setMode('dark');\n        }\n    };\n\n    return (\n        <Button\n            onClick={switchMode}\n        >\n            Switch Mode\n        </Button>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Navigation Layout in React\nDESCRIPTION: Shows a complex layout example with top navigation, including a header with navigation items, content area with breadcrumbs, and a footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Content } = Layout;\n    return (\n        <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n            <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                <div>\n                    <Nav mode=\"horizontal\" defaultSelectedKeys={['Home']}>\n                        <Nav.Header>\n                            <IconSemiLogo style={{ fontSize: 36 }} />\n                        </Nav.Header>\n                        <Nav.Item itemKey=\"Home\" text=\"首页\" icon={<IconHome size=\"large\" />} />\n                        <Nav.Item itemKey=\"Live\" text=\"直播\" icon={<IconLive size=\"large\" />} />\n                        <Nav.Item itemKey=\"Setting\" text=\"设置\" icon={<IconSetting size=\"large\" />} />\n                        <Nav.Footer>\n                            <Button\n                                theme=\"borderless\"\n                                icon={<IconBell size=\"large\" />}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Button\n                                theme=\"borderless\"\n                                icon={<IconHelpCircle size=\"large\" />}\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                    marginRight: '12px',\n                                }}\n                            />\n                            <Avatar color=\"orange\" size=\"small\">\n                                YJ\n                            </Avatar>\n                        </Nav.Footer>\n                    </Nav>\n                </div>\n            </Header>\n            <Content\n                style={{\n                    padding: '24px',\n                    backgroundColor: 'var(--semi-color-bg-0)',\n                }}\n            >\n                <Breadcrumb\n                    style={{\n                        marginBottom: '24px',\n                    }}\n                    routes={['首页', '当这个页面标题很长时需要省略', '上一页', '详情页']}\n                />\n                <div\n                    style={{\n                        borderRadius: '10px',\n                        border: '1px solid var(--semi-color-border)',\n                        height: '376px',\n                        padding: '32px',\n                    }}\n                >\n                    <Skeleton placeholder={<Skeleton.Paragraph rows={2} />} loading={true}>\n                        <p>Hi, Bytedance dance dance.</p>\n                        <p>Hi, Bytedance dance dance.</p>\n                    </Skeleton>\n                </div>\n            </Content>\n            <Footer\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    padding: '20px',\n                    color: 'var(--semi-color-text-2)',\n                    backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n                }}\n            >\n                <span\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}\n                >\n                    <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n                    <span>Copyright © 2023 ByteDance. All Rights Reserved. </span>\n                </span>\n                <span>\n                    <span style={{ marginRight: '24px' }}>平台客服</span>\n                    <span>反馈建议</span>\n                </span>\n            </Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Semi UI Components in React\nDESCRIPTION: This snippet illustrates a simple React application using Semi UI components. It shows how to import components and render them in a functional component structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, Switch } from '@douyinfe/semi-ui';\n\nconst App = () => (\n    <>\n        <Button type='primary'>primary button</Button>\n        <Switch size='large' />\n    </>\n);\n\nReactDOM.render(<App />, document.querySelector('#app'));\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualization for Large Option Lists in Semi UI Select\nDESCRIPTION: This example demonstrates how to implement virtualization for Select components with a large number of options to optimize performance. The virtualize property configures the height, width, and itemSize of the virtualized list.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.semi-select-option-list > div {\n    will-change: unset !important; // 由于 react-window自带样式是内联的，所以这里用 important 覆盖\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const newOptions = Array.from({ length: 3000 }, (v, i) => ({ label: `option-${i}`, value: i }));\n    let virtualize = {\n        height: 270,\n        width: '100%',\n        itemSize: 36, // px\n    };\n    return (\n        <Select\n            placeholder=\"拥有3k个Option的Select\"\n            style={{ width: 260 }}\n            filter\n            virtualize={virtualize}\n            optionList={newOptions}\n        ></Select>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Notifications with Icons in React\nDESCRIPTION: Shows how to create notifications with built-in icons using different methods (success, info, warning, error) and how to implement custom icons using the icon property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\nimport { IconToutiaoLogo, IconVigoLogo } from '@douyinfe/semi-icons';\n\n() => {\n    let opts = {\n        title: 'Hi, Bytedance',\n        content: 'ies dance dance dance',\n        duration: 3,\n    };\n\n    return (\n        <>\n            <h5>Default Icon</h5>\n            <Button type='primary' onClick={()=>Notification.success(opts)} style={{ margin: 4 }}>\n                Success\n            </Button>\n            <Button onClick={() => Notification.info(opts)} style={{ margin: 4 }}>\n                Info\n            </Button>\n            <Button type=\"warning\" onClick={()=>Notification.warning(opts)} style={{ margin: 4 }}>\n                Warning\n            </Button>\n            <Button type=\"danger\" onClick={()=>Notification.error(opts)} style={{ margin: 4 }}>\n                Error\n            </Button>\n            <h5>Customized Icon</h5>\n            <Button\n                icon={<IconToutiaoLogo />}\n                style={{ marginRight: 5 }}\n                onClick={() =>\n                    Notification.info({\n                        ...opts,\n                        icon: <IconToutiaoLogo style={{ color: 'red' }} />,\n                    })\n                }\n            ></Button>\n            <Button\n                icon={<IconVigoLogo />}\n                style={{ marginRight: 5 }}\n                onClick={() => Notification.info({ ...opts, icon: <IconVigoLogo /> })}\n            ></Button>\n            <Button\n                icon={<IconVigoLogo />}\n                onClick={() => Notification.info({ ...opts, icon: <IconVigoLogo style={{ color: 'pink' }} /> })}\n            ></Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Imperative Modal Calls with Semi Design\nDESCRIPTION: This example shows how to use imperative calls (Modal.success, Modal.info, Modal.error, Modal.warning, Modal.confirm) to display different types of modal dialogs. It also demonstrates customizing icons and button properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\nimport { IconSend } from '@douyinfe/semi-icons';\n\nModalComponent = function(props) {\n    function success() {\n        Modal.success({ title: 'This is a success message', content: 'bla bla bla...' });\n    }\n\n    function info() {\n        Modal.info({ title: 'Here is some info', content: 'bla bla bla...' });\n    }\n\n    function error() {\n        Modal.error({ title: 'Unfortunately, there is an error', content: 'bla bla bla...' });\n    }\n\n    function warning() {\n        Modal.warning({ title: 'Warning: be cautious ahead', content: 'bla bla bla...' });\n    }\n\n    function confirm() {\n        Modal.confirm({ title: 'Are you sure ?', content: 'bla bla bla...' });\n    }\n\n    function custom() {\n        Modal.info({\n            title: 'This is a custom modal',\n            content: 'bla bla bla...',\n            icon: <IconSend />,\n            cancelButtonProps: { theme: 'borderless' },\n            okButtonProps: { theme: 'solid' },\n        });\n    }\n\n    return (\n        <div>\n            <Button onClick={info}>Info</Button>\n            <br />\n            <br />\n            <Button onClick={success}>Success</Button>\n            <br />\n            <br />\n            <Button onClick={error} type=\"danger\">\n                Error\n            </Button>\n            <br />\n            <br />\n            <Button onClick={warning} type=\"warning\">\n                Warning\n            </Button>\n            <br />\n            <br />\n            <Button onClick={confirm} type=\"primary\">\n                Confirm\n            </Button>\n            <br />\n            <br />\n            <Button onClick={custom}>Custom</Button>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Display Rendering in Cascader\nDESCRIPTION: Shows how to implement custom display rendering using displayRender prop for both single and multiple selection modes. Includes examples of custom formatting and Tag components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Tag, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }\n    ];\n    return (\n        <>\n            <Typography.Title heading={6}>single selection</Typography.Title>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Please select\"\n                displayRender={list => 'Selected：' + list.join(' -> ')}\n                defaultValue={['impressionism', 'visualArts', 'Monet']}\n            />\n            <br />\n            <br />\n            <Typography.Title heading={6}>multiple selection</Typography.Title>\n            <Cascader\n                multiple\n                style={{ width: 300 }}\n                treeData={treeData}\n                defaultValue={['impressionism', 'visualArts', 'Monet']}\n                placeholder=\"Please select\"\n                displayRender={(item, idx) => (\n                    <Tag\n                        style={{ marginRight: 4 }}\n                        color='white'\n                        key={`${idx}-${item.data.label}`}\n                    >\n                        {item.data.label}\n                    </Tag>\n                )}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FileItem Interface in TypeScript\nDESCRIPTION: This interface defines the structure of a file item used in the Upload component. It includes properties for tracking upload status, file metadata, preview settings, and validation information. The uid property is crucial as it serves as the unique identifier for file operations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileItem {\n    event?: event, // xhr event\n    fileInstance?: File, // original File Object which extends Blob, the file object actually obtained by the browser (https://developer.mozilla.org/zh-CN/docs/Web/API/File)\n    name: string,\n    percent?: number, // upload progress percentage\n    preview: boolean, // Whether to preview according to url\n    response?: any, // xhr's response, response body when the request is successful, and corresponding error when the request fails\n    shouldUpload?: boolean; // Should you continue to upload\n    showReplace?: boolean, // Separately control whether the file displays the replace button\n    showRetry?: boolean, // Separately control whether the file displays the retry button\n    size: string, // file size, unit kb\n    status: string, //'success' |'uploadFail' |'validateFail' |'validating' |'uploading' |'wait';\n    uid: string, // The unique identifier of the file. If the current file is selected and added by upload, the uid will be automatically generated. If it is defaultFileList, you need to ensure that it will not be repeated\n    url: string,\n    validateMessage?: ReactNode | string,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeSelect Component with Accessibility in TypeScript\nDESCRIPTION: Example of how to use the TreeSelect component with ARIA accessibility attributes for better screen reader support. The aria-label property provides a label that identifies the TreeSelect component's purpose for assistive technologies.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n    <TreeSelect\n        /* other attributes */\n        aria-label='example treeSelect'\n    />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Data Updates in Semi Design Chat\nDESCRIPTION: Demonstrates how to implement real-time chat updates using server-side events with Semi Design's Chat component. Includes functionality for stopping message generation and handling dynamic message updates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"介绍一下 Semi design\"\n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: `Semi Design 是由抖音前端团队和MED产品设计团队设计、开发并维护的设计系统。作为一个全面、易用、优质的现代应用UI解决方案，Semi Design从字节跳动各业务线的复杂场景中提炼而来，目前已经支撑了近千个平台产品，服务了内外部超过10万用户[[1]](https://semi.design/zh-CN/start/introduction)。\n\nSemi Design的特点包括：\n\n1. 设计简洁、现代化。\n2. 提供主题方案，可深度样式定制。\n3. 提供明暗色两套模式，切换方便。\n4. 国际化，覆盖了简/繁体中文、英语、日语、韩语、葡萄牙语等20+种语言，日期时间组件提供全球时区支持，全部组件可自动适配阿拉伯文RTL布局。\n5. 采用 Foundation 和 Adapter 跨框架技术方案，方便扩展。\n\n---\nLearn more:\n1. [Introduction 介绍 - Semi Design](https://semi.design/zh-CN/start/introduction)\n2. [Getting Started 快速开始 - Semi Design](https://semi.design/zh-CN/start/getting-started)\n3. [Semi D2C 设计稿转代码的演进之路 - 知乎](https://zhuanlan.zhihu.com/p/667189184)\n`,\n    }\n];\n\n// ... rest of the code\n```\n\n----------------------------------------\n\nTITLE: Photo Wall Upload Implementation\nDESCRIPTION: Implements a photo wall upload interface with automatic upload entry hiding when limit is reached. Includes default file list with image previews.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n        {\n            uid: '2',\n            name: 'dyBag2.jpeg',\n            status: 'success',\n            size: '222KB',\n            preview: true,\n            fileInstance: new File([new ArrayBuffer(2048)], 'abc.jpeg', { type: 'image/png' }),\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n    ];\n    return (\n        <Upload\n            action={action}\n            limit={2}\n            listType=\"picture\"\n            accept=\"image/*\"\n            defaultFileList={defaultFileList}\n            onExceed={() => Toast.warning('Only allow up to 2 files to be uploaded')}\n        >\n            <IconPlus size=\"extra-large\" />\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Navigation with JSX Writing Style\nDESCRIPTION: Demonstrates how to define navigation using JSX syntax instead of the items array. This approach uses Nav.Header, Nav.Item, Nav.Sub, and Nav.Footer components to construct the navigation structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconStar, IconUser, IconUserGroup } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                bodyStyle={{ height: 320 }}\n                defaultOpenKeys={['user', 'union']}\n                onSelect={data => console.log('trigger onSelect: ', data)}\n                onClick={data => console.log('trigger onClick: ', data)}\n            >\n                <Nav.Header logo={<img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />} text={'Live Platform'} />\n                <Nav.Item itemKey={'union'} text={'Union Center'} icon={<IconStar />} />\n                <Nav.Sub itemKey={'user'} text=\"User Management\" icon={<IconUser />}>\n                    <Nav.Item itemKey={'golder'} text={'Gold Master Management'} />\n                    <Nav.Item itemKey={'ban'} text={'User Ban'} />\n                </Nav.Sub>\n                <Nav.Sub itemKey={'union-management'} text=\"Union Management\" icon={<IconUserGroup />}>\n                    <Nav.Item itemKey={'notice'} text={'Announcement Settings'} />\n                    <Nav.Item itemKey={'query'} text={'Union Query'} />\n                    <Nav.Item itemKey={'info'} text={'Entry Information'} />\n                </Nav.Sub>\n                <Nav.Footer collapseButton={true} />\n            </Nav>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Icons in React\nDESCRIPTION: Shows how to create a custom icon using SVG and use it with the Icon component in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Icon } from '@douyinfe/semi-ui';\n\n() => {\n    function CustomIcon() {\n        return <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"11\" fill=\"#FBCD2C\"/>\n            <mask id=\"mask0\" masktype=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"1\" y=\"1\" width=\"22\" height=\"22\">\n                <circle cx=\"12\" cy=\"12\" r=\"11\" fill=\"#A2845E\"/>\n            </mask>\n            <g mask=\"url(#mask0)\">\n                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.9996 17.7963C13.7184 17.7963 15.2479 16.3561 16.0881 14.2048C16.6103 13.9909 17.1072 13.3424 17.334 12.4957C17.629 11.3948 17.5705 10.4118 16.7665 10.1059C16.6885 6.27115 15.1754 4.78714 11.9996 4.78714C8.82412 4.78714 7.31097 6.27097 7.2328 10.1052C6.42711 10.4103 6.36828 11.394 6.66349 12.4957C6.89064 13.3435 7.38849 13.9926 7.91145 14.2056C8.7518 16.3565 10.2811 17.7963 11.9996 17.7963ZM20.0126 23C20.34 23 20.5906 22.7037 20.4686 22.3999C19.6099 20.2625 16.1444 18.6636 12 18.6636C7.85555 18.6636 4.39008 20.2625 3.53142 22.3999C3.40937 22.7037 3.65999 23 3.9874 23H20.0126Z\" fill=\"white\"/>\n            </g>\n        </svg>;\n    }\n    return (\n        <div>\n            <Icon svg={<CustomIcon />} />\n            <Icon svg={<CustomIcon />} rotate={180} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Transfer Component with Custom Item Rendering in React\nDESCRIPTION: Demonstrates how to create a Transfer component with drag and drop functionality and custom rendering for selected items. Features include custom source item rendering with avatars, draggable selected items with custom handlers, and custom search filtering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer, Checkbox, Avatar } from '@douyinfe/semi-ui';\nimport { IconHandle, IconClose } from '@douyinfe/semi-icons';\n\n() => {\n    const renderSourceItem = item => {\n        return (\n            <div className=\"components-transfer-demo-source-item\" key={item.label}>\n                <Checkbox\n                    onChange={() => {\n                        item.onChange();\n                    }}\n                    key={item.label}\n                    checked={item.checked}\n                    style={{ height: 52, alignItems: 'center' }}\n                >\n                    <Avatar color={item.color} size=\"small\">\n                        {item.abbr}\n                    </Avatar>\n                    <div className=\"info\">\n                        <div className=\"name\">{item.label}</div>\n                        <div className=\"email\">{item.value}</div>\n                    </div>\n                </Checkbox>\n            </div>\n        );\n    };\n\n    const renderSelectedItem = item => {\n        const { sortableHandle } = item;\n        const DragHandle = sortableHandle(() => <IconHandle className={`semi-right-item-drag-handler`} />); \n        return (\n            <div className=\"components-transfer-demo-selected-item\" key={item.label}>\n                <DragHandle />\n                <Avatar color={item.color} size=\"small\">\n                    {item.abbr}\n                </Avatar>\n                <div className=\"info\">\n                    <div className=\"name\">{item.label}</div>\n                    <div className=\"email\">{item.value}</div>\n                </div>\n                <IconClose onClick={item.onRemove} />\n            </div>\n        );\n    };\n\n    const customFilter = (sugInput, item) => {\n        return item.value.includes(sugInput) || item.label.includes(sugInput);\n    };\n\n    const data = [\n        { label: 'Xiakeman', value: 'xiakeman@example.com', abbr: 'Xia', color: 'amber', area: 'US', key: 1 },\n        { label: 'Shenyue', value: 'shenyue@example.com', abbr: 'Shen', color: 'indigo', area: 'UK', key: 2 },\n        { label: 'Wenjiamao', value: 'wenjiamao@example.com', abbr: 'Wen', color: 'cyan', area: 'HK', key: 3 },\n        { label: 'Quchenyi', value: 'quchenyi@example.com', abbr: 'Qu', color: 'blue', area: 'India', key: 4 },\n        { label: 'Quchener', value: 'quchener@example.com', abbr: 'Er', color: 'blue', area: 'India', key: 5 },\n        { label: 'Quchensan', value: 'quchensan@example.com', abbr: 'San', color: 'blue', area: 'India', key: 6 },\n    ];\n\n    return (\n        <Transfer\n            draggable\n            style={{ width: 568 }}\n            dataSource={data}\n            filter={customFilter}\n            defaultValue={['xiakeman@example.com', 'shenyue@example.com']}\n            renderSelectedItem={renderSelectedItem}\n            renderSourceItem={renderSourceItem}\n            inputProps={{ placeholder: 'Search for a name or email' }}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic TreeSelect Data Update in React\nDESCRIPTION: Demonstrates how to dynamically update TreeSelect data using a button trigger. Generates random tree data with variable depths and children nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect, Button } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            treeData: [],\n        };\n        this.add = this.add.bind(this);\n    }\n    add() {\n        let itemLength = Math.floor(Math.random() * 5) + 1;\n        let treeData = new Array(itemLength).fill(0).map((v, i) => {\n            let length = Math.floor(Math.random() * 3);\n            let children = new Array(length).fill(0).map((cv, ci) => {\n                let child = {\n                    key: `${i}-${ci}`,\n                    label: `Leaf-${i}-${ci}`,\n                    value: `${i}-${ci}`\n                };\n                return child;\n            });\n            let item = {\n                key: `${i}`,\n                label: `Item-${i}`,\n                value: `${i}`,\n                children\n            };\n            return item;\n        });\n        this.setState({ treeData });\n    }\n    render() {\n        return (\n            <>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={this.state.treeData}\n                    placeholder=\"Please select\"\n                />\n                <br/>\n                <br/>\n                <Button onClick={this.add}>\n                    Update Data\n                </Button>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation - React/JSX\nDESCRIPTION: Demonstrates basic usage of Pagination component with different total values and page sizes\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={30} style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={80} style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={200} style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={80} pageSize={30} style={{ marginBottom: 12 }}></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Select with TagInput in React\nDESCRIPTION: Advanced example of customizing a Select component with the ability to sort selected options using drag-and-drop functionality. Integrates the TagInput component's drag capabilities with Select through the triggerRender prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Select, TagInput } from '@douyinfe/semi-ui';\n\n() => {\n    const [valList, setValList] = useState(['douyin', 'ulikecam']);\n    const [inputVal, setInputVal] = useState('');\n    const list = [\n        { value: 'douyin', label: '抖音' },\n        { value: 'ulikecam', label: '轻颜相机' },\n        { value: 'jianying', label: '剪映' },\n        { value: 'toutiao', label: '今日头条' },\n    ];\n     \n    const handleSort = (currentLabels) => {\n        const newValue = currentLabels.map(item => list.find((i) => i.label === item).value)\n        setValList(newValue);\n    };\n\n    const triggerRender = ({ value, onSearch, onClear }) => {\n        return (\n            <div onKeyDown={e=>e.stopPropagation()}>\n                <TagInput\n                    draggable\n                    allowDuplicates={false}\n                    value={value.map(item => item.label)}\n                    inputValue={inputVal}\n                    onInputChange={(word) => {\n                        onSearch(word);\n                        setInputVal(word);\n                    }}\n                    onChange={handleSort}\n                    onClear={() => onClear()}\n                    showClear\n                />\n            </div>\n        );\n    }; \n  \n    return (\n        <>\n            <h4>可对已选项拖拽重新排序的 Select </h4>\n            <Select\n                value={valList}\n                triggerRender={triggerRender}\n                optionList={list}\n                onChange={value => setValList(value)}\n                multiple\n                filter\n                style={{ width: 240 }}\n            ></Select>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Truncation with Typography Component in React\nDESCRIPTION: This snippet demonstrates various ways to use the ellipsis property of Typography components (Title, Text, Paragraph) to truncate text. It includes examples of single-line truncation, custom tooltips, multi-line truncation, and expandable text.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography, Tooltip } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Paragraph, Title, Text } = Typography;\n    const customRenderTooltip = useCallback((content, children) => {\n        return <Tooltip content={content} style={{ backgroundColor: 'var(--semi-color-primary)' }}>{children}</Tooltip>;\n    }, []);\n\n    return (\n        <div>\n            <Title heading={5} ellipsis={{ showTooltip: true }} style={{ width: 250 }}>\n                是一个很长很长很长很长5号标题\n            </Title>\n            <br />\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: '这是自定义要展示的内容' }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                可以自定义浮层里的展示内容试试看吧\n            </Text>\n            <br/>\n            <Text link ellipsis={{ showTooltip: true, pos: 'middle' }} style={{ width: 150 }}>\n                是一个很长很长很长很长的链接\n            </Text>\n            <br/>\n            <Paragraph ellipsis={{ suffix: '小尾巴' }} style={{ width: 300 }}>\n                有后缀的情况：Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。\n            </Paragraph>\n            <br/>\n            <Paragraph ellipsis={{ rows: 3 }} style={{ width: 300 }}>\n                这是一个多行截断的例子：Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n            </Paragraph>\n            <br/>\n            <Paragraph ellipsis={{ rows: 3, showTooltip: { type: 'popover', opts: { style: { width: 300 } } } }} style={{ width: 300 }}>\n                多行截断，展示 Popover：Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n            </Paragraph>\n            <br/>\n            <Paragraph ellipsis={{ rows: 3, expandable: true, collapsible: true, collapseText: '折叠我吧', onExpand: (bool, e) => console.log(bool, e) }} style={{ width: 300 }}>\n                支持展开和折叠：Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n            </Paragraph>\n            <br/>\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: '全英文设置了word-break' }\n                    },\n                    pos: 'middle'\n                }}\n                style={{ width: 150, wordBreak: 'break-word' }}\n            >\n                sssssssssssssssssssssssss\n            </Text>\n            <br/><br/>\n            <Title \n                heading={5} \n                ellipsis={{ \n                    showTooltip: {\n                        renderTooltip: customRenderTooltip\n                    }\n                }} \n                style={{ width: 250 }}\n            >\n                这是一个自定义弹出层组件的省略文本，背景色是蓝色\n            </Title>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Modal Layout with Semi Design\nDESCRIPTION: Shows how to create a highly customized Modal using header, footer, and List components. Includes custom icons and button styling with complex layout structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, List } from '@douyinfe/semi-ui';\nimport { IconVigoLogo, IconSemiLogo } from '@douyinfe/semi-icons';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    render() {\n        const data = [\n            {\n                icon: <IconSemiLogo style={{ fontSize: 48 }} />,\n                title: 'Boost new feature adoption with Integration',\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team'\n            },\n            {\n                icon: <IconVigoLogo style={{ fontSize: 48 }} />,\n                title: 'Introducing Dark Mode',\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team'\n            },\n            {\n                icon: <IconSemiLogo style={{ fontSize: 48 }} />,\n                title: 'New List Component',\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team'\n            },\n        ];\n        const btnStyle = {\n            width: 240,\n            margin: '4px 50px',\n        };\n        const footer = (\n            <div style={{ textAlign: 'center' }}>\n                <Button type=\"primary\" theme=\"solid\" onClick={this.handleOk} style={btnStyle}>\n                    Continue\n                </Button>\n                <Button type=\"primary\" theme=\"borderless\" onClick={this.handleCancel} style={btnStyle}>\n                    Learn more features\n                </Button>\n            </div>\n        );\n        return (\n            <>\n                <Button onClick={this.showDialog}>Customized Modal</Button>\n                <Modal\n                    header={null}\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    footer={footer}\n                >\n                    <h3 style={{ textAlign: 'center', fontSize: 24, margin: 40 }}>Semi Design New Features</h3>\n                    <List\n                        dataSource={data}\n                        split={false}\n                        renderItem={item => (\n                            <List.Item\n                                header={item.icon}\n                                main={\n                                    <div>\n                                        <h6 style={{ margin: 0, fontSize: 16 }}>{item.title}</h6>\n                                        <p style={{ marginTop: 4, color: 'var(--semi-color-text-1)' }}>{item.content}</p>\n                                    </div>\n                                }\n                            />)}\n                    />\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Feedback Components in Semi-Design\nDESCRIPTION: Usage of Toast notification components with different status types (success, info, warning, error) triggered by Button clicks. Each button displays a brief, non-intrusive notification message with the corresponding style.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n<Button type='primary' onClick={() => Toast.success(opts)} style={buttonStyle}>Toast of success information</Button>\n<Button onClick={() => Toast.info(opts)} style={buttonStyle}>Toast of prompt information</Button>\n<Button type=\"warning\" onClick={() => Toast.warning(opts)} style={buttonStyle}>Toast of waning information</Button>\n<Button type=\"danger\" onClick={() => Toast.error(opts)} style={buttonStyle}>Toast of failure information</Button>\n```\n\n----------------------------------------\n\nTITLE: Input Component with Prefix/Suffix in React\nDESCRIPTION: Demonstrates adding prefix and suffix icons or text to the Input component. When using text or Semi Icons, automatic spacing is added.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input, Typography } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\n() => (\n    <>\n        <Input prefix={<IconSearch />} showClear></Input>\n        <br/><br/>\n        <Input prefix=\"Prefix\" showClear></Input>\n        <br/><br/>\n        <Input suffix={<IconSearch />} showClear></Input>\n        <br/><br/>\n        <Input suffix={<Typography.Text strong type='secondary' style={{ marginRight: 8 }}>Suffix</Typography.Text>} showClear></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessibility Implementation for Progress Component\nDESCRIPTION: Code examples demonstrating accessibility best practices for the Progress component using ARIA attributes. Shows proper usage of aria-labelledby, aria-label, and aria-valuetext to enhance screen reader compatibility.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// good case\n<p id=\"progressbar-label\">Disk Usage</p>\n<Progress aria-labelledby=\"progressbar-label\" percent={80} />\n\n// good case\n<Progress aria-label='Percent of disk usage' percent={80} />\n<Progress aria-label='Percent of file downloaded' percent={80} />\n\n// usage of aria-valuetext\n<Progress aria-label='Percent of disk usage' percent={80} aria-valuetext=\"Step 2: Copying files... \"/>\n```\n\n----------------------------------------\n\nTITLE: Tree Transfer Component Implementation\nDESCRIPTION: Implementation of a tree-based transfer component using Semi Design's Tree component. Supports hierarchical data selection with customizable tree properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        // ... more cities\n                    ],\n                },\n                // ... more countries\n            ],\n        },\n        // ... more continents\n    ];\n\n    const [v, $v] = useState(['Shanghai']);\n\n    return (\n        <div style={{ margin: 10, padding: 10, width: 600 }}>\n            <Transfer dataSource={treeData} type=\"treeList\" value={v} onChange={$v}></Transfer>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Draggable Tree with Custom Label Rendering in Semi Design\nDESCRIPTION: This code implements a draggable tree with custom label rendering in Semi Design. It includes drag-and-drop functionality with position handling logic, selection state management with highlighting, and custom rendering of tree nodes with icons and labels.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\nimport { IconFixedStroked, IconSectionStroked, IconAbsoluteStroked, IconInnerSectionStroked, IconComponentStroked } from '@douyinfe/semi-icons';\n\n() => {\n    const [selected, setSelected] = useState(new Set());\n    const [selectedThroughParent, setSelectedThroughParent] = useState(new Set());\n    const defaultTreeData = [\n        {\n            label: '黑色固定按钮',\n            icon: <IconFixedStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n            key: 'fix-btn-0'\n        },\n        {\n            label: '模块',\n            key: 'module-0',\n            icon: <IconSectionStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n            children: [\n                {\n                    label: '可自由摆放的组件',\n                    icon: <IconAbsoluteStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                    key: 'free-compo-0',\n                },\n                {\n                    label: '分栏容器',\n                    icon: <IconSectionStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                    key: 'split-col-0',\n                    children: [\n                        {\n                            label: '按钮组件',\n                            icon: <IconComponentStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                            key: 'btn-0'\n                        },\n                        {\n                            label: '按钮组件',\n                            icon: <IconComponentStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                            key: 'btn-1'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: '模块',\n            icon: <IconSectionStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n            key: 'module-1',\n            children: [\n                {\n                    label: '自定义组件',\n                    icon: <IconComponentStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                    key: 'cus-0'\n                }\n            ]\n        }\n    ];\n    const [treeData, setTreeData] = useState(defaultTreeData);\n\n    const onDrop = (info) => {\n        const { dropToGap, node, dragNode } = info;\n        const dropKey = node.key;\n        const dragKey = dragNode.key;\n        const dropPos = node.pos.split('-');\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n        const data = [...treeData];\n        const loop = (data, key, callback) => {\n            data.forEach((item, ind, arr) => {\n                if (item.key === key) return callback(item, ind, arr);\n                if (item.children) return loop(item.children, key, callback);\n            });\n        };\n\n        let dragObj;\n        loop(data, dragKey, (item, ind, arr) => {\n            arr.splice(ind, 1);\n            dragObj = item;\n        });\n\n        if (!dropToGap) {\n            loop(data, dropKey, (item, ind, arr) => {\n                item.children = item.children || [];\n                item.children.push(dragObj);\n            });\n        } else if (dropPosition === 1 && node.children && node.expanded) {\n            loop(data, dropKey, item => {\n                item.children = item.children || [];\n                item.children.unshift(dragObj);\n            });\n        } else {\n            let dropNodeInd;\n            let dropNodePosArr;\n            loop(data, dropKey, (item, ind, arr) => {\n                dropNodePosArr = arr;\n                dropNodeInd = ind;\n            });\n            if (dropPosition === -1) {\n                dropNodePosArr.splice(dropNodeInd, 0, dragObj);\n            } else {\n                dropNodePosArr.splice(dropNodeInd + 1, 0, dragObj);\n            }\n        }\n        setTreeData(data);\n    };\n\n    const findDescendantKeys = (node) => {\n        const res = [node.key];\n        const findChild = item => {\n            if (!item) return;\n            const { children } = item;\n\n            if (children && children.length) {\n                children.forEach(child => {\n                    res.push(child.key);\n                    findChild(child);\n                });\n            }\n        };\n        findChild(node);\n        return res;\n    };\n\n    const handleSelect = (key, bool, node) => {\n        setSelected(new Set([key]));\n        const descendantKeys = findDescendantKeys(node);\n        setSelectedThroughParent(new Set(descendantKeys));\n    };\n\n    const renderLabel = ({\n        className,\n        data,\n        onClick,\n        expandIcon\n    }) => {\n        const { label, icon, key } = data;\n        const isLeaf = !(data.children && data.children.length);\n        const style = {\n            backgroundColor: selected.has(key)\n                ? 'rgba(var(--semi-blue-0), 1)'\n                : selectedThroughParent.has(key)\n                    ? 'rgba(var(--semi-blue-0), .5)' : 'transparent'\n        };\n        return (\n            <li\n                className={className}\n                role=\"treeitem\"\n                onClick={onClick}\n                style={style}\n            >\n                {isLeaf ? <span style={{ width: 24 }}></span> : expandIcon}\n                {icon}\n                <span>{label}</span>\n            </li>\n        );\n    };\n\n    const treeStyle = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n\n\n    return <Tree\n        treeData={treeData}\n        draggable\n        onDrop={onDrop}\n        renderFullLabel={renderLabel}\n        onSelect={handleSelect}\n        style={treeStyle}\n        defaultExpandAll\n    />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Nested Resizable Layout with Size Constraints in Semi-Design\nDESCRIPTION: This code shows a complex nested resizable layout with multiple levels of ResizeGroup components. It demonstrates how to set min/max size constraints for individual ResizeItem components and handle resize events in a complex hierarchy.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [text, setText] = useState('Drag to resize');\n    const opts_1 = {\n        content: 'resize start',\n        duration: 1,\n        stack: true,\n    };\n    const opts = {\n        content: 'resize end',\n        duration: 1,\n        stack: true,\n    };\n    return (\n        <div style={{ width: '1000px', height: '600px' }}>\n            <ResizeGroup direction=\"vertical\">\n                <ResizeItem defaultSize={'80%'}>\n                    <ResizeGroup direction=\"horizontal\">\n                        <ResizeItem\n                            style={{\n                                backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                border: 'var(--semi-color-border) 1px solid',\n                            }}\n                            defaultSize={'25%'}\n                            min={'10%'}\n                            max={'30%'}\n                        >\n                            <div style={{ marginLeft: '20%' }}>{text + ' min:10% max:30%'}</div>\n                        </ResizeItem>\n                        <ResizeHandler></ResizeHandler>\n                        <ResizeItem style={{ border: 'var(--semi-color-border) 1px solid' }} defaultSize={'50%'}>\n                            <div style={{ height: '100%' }}>\n                                <ResizeGroup direction=\"vertical\">\n                                    <ResizeItem\n                                        style={{\n                                            backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                            border: 'var(--semi-color-border) 1px solid',\n                                        }}\n                                        defaultSize={'33%'}\n                                        min={'10%'}\n                                        onChange={() => {\n                                            setText('resizing');\n                                        }}\n                                        onResizeEnd={() => {\n                                            setText('Drag to resize');\n                                        }}\n                                    >\n                                        <div style={{ marginLeft: '20%' }}>{text + ' min:10%'}</div>\n                                    </ResizeItem>\n                                    <ResizeHandler></ResizeHandler>\n                                    <ResizeItem\n                                        style={{\n                                            backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                            border: 'var(--semi-color-border) 1px solid',\n                                        }}\n                                        defaultSize={'33%'}\n                                        min={'10%'}\n                                        max={'40%'}\n                                    >\n                                        <div style={{ marginLeft: '20%' }}>{text + ' min:10% max:40%'}</div>\n                                    </ResizeItem>\n                                    <ResizeHandler></ResizeHandler>\n                                    <ResizeItem\n                                        style={{\n                                            backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                            border: 'var(--semi-color-border) 1px solid',\n                                        }}\n                                    >\n                                        <div style={{ marginLeft: '20%' }}>{text}</div>\n                                    </ResizeItem>\n                                </ResizeGroup>\n                            </div>\n                        </ResizeItem>\n                        <ResizeHandler></ResizeHandler>\n                        <ResizeItem\n                            style={{\n                                backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                border: 'var(--semi-color-border) 1px solid',\n                            }}\n                            defaultSize={'1'}\n                            max={'30%'}\n                        >\n                            <div style={{ marginLeft: '20%' }}>{text + ' max:30%'}</div>\n                        </ResizeItem>\n                    </ResizeGroup>\n                </ResizeItem>\n                <ResizeHandler></ResizeHandler>\n                <ResizeItem\n                    defaultSize={'20%'}\n                    onChange={() => {\n                        setText('resizing');\n                    }}\n                >\n                    <ResizeGroup direction=\"horizontal\">\n                        <ResizeItem\n                            style={{\n                                backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                border: 'var(--semi-color-border) 1px solid',\n                            }}\n                            defaultSize={'50%'}\n                        >\n                            <div style={{ marginLeft: '20%' }}>{'tab'}</div>\n                        </ResizeItem>\n                        <ResizeHandler></ResizeHandler>\n                        <ResizeItem\n                            style={{\n                                backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                border: 'var(--semi-color-border) 1px solid',\n                            }}\n                            defaultSize={'50%'}\n                        >\n                            <div style={{ marginLeft: '20%' }}>{'content'}</div>\n                        </ResizeItem>\n                    </ResizeGroup>\n                </ResizeItem>\n            </ResizeGroup>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Nested Resizable Layout with Min and Max Constraints in React\nDESCRIPTION: This code snippet showcases a more complex nested resizable layout using Semi Design components. It includes both vertical and horizontal resize groups with multiple ResizeItems, some of which have minimum and maximum size constraints.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [text, setText] = useState('Drag to resize')\n  const opts_1 = {\n    content: 'resize start',\n    duration: 1,\n    stack: true,\n  };\n  const opts = {\n    content: 'resize end',\n    duration: 1,\n    stack: true,\n  };\n  return (\n    <div style={{ width: '1000px', height: '600px' }}>\n      <ResizeGroup direction='vertical'>\n        <ResizeItem\n          defaultSize={\"80%\"}\n        >\n          <ResizeGroup direction='horizontal'>\n            <ResizeItem\n              style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"25%\"}\n              min={'10%'}\n              max={'30%'}\n            >\n              <div style={{ marginLeft: '20%' }}>\n                {text + ' min:10% max:30%'}\n              </div>\n            </ResizeItem>\n            <ResizeHandler></ResizeHandler>\n            <ResizeItem\n              style={{ border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"50%\"}\n            >\n              <div style={{ height: '100%' }}>\n                <ResizeGroup direction='vertical'>\n                  <ResizeItem\n                    style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n                    defaultSize={'33%'}\n                    min={'10%'}\n                    onChange={() => { setText('resizing') }}\n                    onResizeEnd={() => { setText('Drag to resize') }}\n                  >\n                    <div style={{ marginLeft: '20%' }}>\n                      {text + \" min:10%\"}\n                    </div>\n                  </ResizeItem>\n                  <ResizeHandler></ResizeHandler>\n                  <ResizeItem\n                    style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n                    defaultSize={'33%'}\n                    min={'10%'}\n                    max={'40%'}\n                  >\n                    <div style={{ marginLeft: '20%' }}>\n                      {text + \" min:10% max:40%\"}\n                    </div>\n                  </ResizeItem>\n                  <ResizeHandler></ResizeHandler>\n                  <ResizeItem\n                    style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n                  >\n                    <div style={{ marginLeft: '20%' }}>\n                      {text}\n                    </div>\n                  </ResizeItem>\n                </ResizeGroup>\n              </div>\n            </ResizeItem>\n            <ResizeHandler></ResizeHandler>\n            <ResizeItem\n              style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"1\"}\n              max={'30%'}\n            >\n              <div style={{ marginLeft: '20%' }}>\n                {text + ' max:30%'}\n              </div>\n            </ResizeItem>\n            \n          </ResizeGroup>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          defaultSize={\"20%\"}\n          onChange={() => { setText('resizing') }}\n        >\n          <ResizeGroup direction='horizontal'>\n            <ResizeItem\n              style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"50%\"}\n            >\n              <div style={{ marginLeft: '20%' }}>\n                {'tab'}\n              </div>\n            </ResizeItem>\n            <ResizeHandler></ResizeHandler>\n            <ResizeItem\n              style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n              defaultSize={\"50%\"}\n            >\n              <div style={{ marginLeft: '20%' }}>\n                {'content'}\n              </div>\n            </ResizeItem>\n          </ResizeGroup>\n        </ResizeItem>\n      </ResizeGroup>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Tabs with Add/Delete Functionality in Semi-Design\nDESCRIPTION: This example demonstrates how to dynamically update tabs by adding and removing tab panes. It maintains the tab state in the component and provides buttons to add new tabs or remove existing ones, updating the active key accordingly.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, ButtonGroup, Button } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.newTabIndex = 0;\n        const panes = [\n            { title: 'Tab 1', content: 'Content of Tab Pane 1', itemKey: '1' },\n            { title: 'Tab 2', content: 'Content of Tab Pane 2', itemKey: '2' },\n        ];\n        this.state = {\n            panes,\n            activeKey: panes[0].itemKey,\n        };\n    }\n\n    add() {\n        const { panes } = this.state;\n        const index = this.newTabIndex++;\n        panes.push({ title: `New Tab ${index}`, content: 'New Tab Pane', itemKey: `newTab${index}` });\n        this.setState({ panes, activeKey: `newTab${index}` });\n    }\n\n    remove() {\n        const { panes } = this.state;\n        if (panes.length > 1) {\n            panes.pop();\n            this.setState({ panes, activeKey: panes[panes.length - 1].itemKey });\n        }\n    }\n\n    handleChange(activeKey) {\n        this.setState({ activeKey });\n    }\n\n    render() {\n        const { panes, activeKey } = this.state;\n        return (\n            <Tabs\n                defaultActiveKey=\"1\"\n                activeKey={activeKey}\n                onChange={this.handleChange.bind(this)}\n                tabBarExtraContent={\n                    <ButtonGroup>\n                        <Button onClick={() => this.add()}>Add</Button>\n                        <Button onClick={() => this.remove()}>Delete</Button>\n                    </ButtonGroup>\n                }\n            >\n                {panes.map(pane => (\n                    <TabPane tab={pane.title} itemKey={pane.itemKey} key={pane.itemKey}>\n                        {pane.content}\n                    </TabPane>\n                ))}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Customizable Carousel Indicators in React\nDESCRIPTION: Demonstrates how to create a carousel with customizable indicators including different types (dot, line, columnar), positions (left, center, right), and sizes (small, medium). Uses Semi Design UI components with image slides and text content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, RadioGroup, Radio, Space, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const { Title, Paragraph } = Typography;\n    const [size, setSize] = useState('small');\n    const [type, setType] = useState('dot');\n    const [position, setPosition] = useState('left');\n\n    const style = {\n        width: '100%',\n        height: '400px',\n    };\n\n    const titleStyle = { \n        position: 'absolute', \n        top: '100px', \n        left: '100px'\n    };\n\n    const colorStyle = {\n        color: '#1C1F23'\n    };\n\n    const renderLogo = () => {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }}/>\n        );\n    };\n\n    const imgList = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n    ];\n\n    const textList = [\n        ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n        ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n        ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n    ];\n\n    return (\n        <div>\n            <Carousel style={style} indicatorType={type} indicatorPosition={position} indicatorSize={size} theme='dark' autoPlay={false}>\n                {\n                    imgList.map((src, index) => {\n                        return (\n                            <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                    {renderLogo()}\n                                    <Title heading={2} style={colorStyle}>{textList[index][0]}</Title>\n                                    <Space vertical align='start'>\n                                        <Paragraph style={colorStyle}>{textList[index][1]}</Paragraph>\n                                        <Paragraph style={colorStyle}>{textList[index][2]}</Paragraph>\n                                    </Space>\n                                </Space>\n                            </div>\n                        );\n                    })\n                }\n            </Carousel>\n            <br/>\n            <Space vertical align='start'>\n                <Space> \n                    <div>type</div>\n                    <RadioGroup onChange={e => setType(e.target.value)} value={type} type=\"button\">\n                        <Radio value='dot'>dot</Radio>\n                        <Radio value='line'>line</Radio>\n                        <Radio value='columnar'>columnar</Radio>\n                    </RadioGroup>\n                </Space>\n                <Space> \n                    <div>position</div>\n                    <RadioGroup onChange={e => setPosition(e.target.value)} value={position} type=\"button\">\n                        <Radio value='left'>left</Radio>\n                        <Radio value='center'>center</Radio>\n                        <Radio value='right'>right</Radio>\n                    </RadioGroup>\n                </Space>\n                <Space> \n                    <div>size</div>\n                    <RadioGroup onChange={e => setSize(e.target.value)} value={size} type=\"button\">\n                        <Radio value='small'>small</Radio>\n                        <Radio value='medium'>medium</Radio>\n                    </RadioGroup>\n                </Space>\n            </Space>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Select Components\nDESCRIPTION: Demonstrates how to create dependent select components where the options in the second select are determined by the selection in the first select. Implements a continent-country selection relationship.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\nclass Link extends React.Component {\n    get continents() {\n        return ['Asia', 'Europe'];\n    }\n    get maps() {\n        return {\n            Asia: ['China', 'Korea'],\n            Europe: ['United Kingdom', 'France', 'Germany'],\n        };\n    }\n    constructor() {\n        super();\n        this.state = {\n            continents: this.continents,\n            maps: this.maps,\n            countrys: this.maps[this.continents[0]],\n            country: this.maps[this.continents[0]][0],\n        };\n        this.continentsChange = this.continentsChange.bind(this);\n        this.countryChange = this.countryChange.bind(this);\n    }\n\n    continentsChange(newContinents) {\n        const { maps } = this.state;\n        this.setState({ countrys: maps[newContinents], country: maps[newContinents][0] });\n    }\n\n    countryChange(country) {\n        this.setState({ country });\n    }\n\n    render() {\n        const { continents, countrys, country } = this.state;\n        return (\n            <React.Fragment>\n                <Select\n                    style={{ width: '150px', margin: '10px' }}\n                    onChange={this.continentsChange}\n                    defaultValue={continents[0]}\n                >\n                    {continents.map(pro => (\n                        <Select.Option value={pro} key={pro}>\n                            {pro}\n                        </Select.Option>\n                    ))}\n                </Select>\n                <Select style={{ width: '150px', margin: '10px' }} value={country} onChange={this.countryChange}>\n                    {countrys.map(c => (\n                        <Select.Option value={c} key={c}>\n                            {c}\n                        </Select.Option>\n                    ))}\n                </Select>\n            </React.Fragment>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Box Rendering in React\nDESCRIPTION: React component demonstrating custom date box rendering using renderFullDate prop in DatePicker with conditional styling based on date status\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport classNames from 'classnames';\n\nfunction Demo() {\n    const renderFullDate = (dayNumber, fullDate, dayStatus) => {\n        const { isInRange, isHover, isSelected, isSelectedStart, isSelectedEnd } = dayStatus;\n        const prefix = 'components-datepicker-demo';\n\n        const dateCls = classNames({\n            [`${prefix}-day-inrange`]: isInRange,\n            [`${prefix}-day-hover`]: isHover,\n            [`${prefix}-day-selected`]: isSelected,\n            [`${prefix}-day-selected-start`]: isSelectedStart,\n            [`${prefix}-day-selected-end`]: isSelectedEnd,\n        });\n\n        const dayStyle = {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '80%',\n            height: '80%',\n            borderRadius: '50%',\n        };\n\n        return (\n            <div style={dayStyle} className={dateCls}>\n                {dayNumber}\n            </div>\n        );\n    };\n\n    return <DatePicker style={{ width: 260 }} type={'dateRange'} renderFullDate={renderFullDate} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Leaf-Only Single-Select in Semi Design Tree Component\nDESCRIPTION: This example shows how to customize the Tree component to allow single-selection only for leaf nodes. It uses the renderFullLabel prop to handle clicks differently for leaf and parent nodes, enabling selection only for leaf nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\n() => {\n    const renderLabel = ({\n        className,\n        onExpand,\n        onClick,\n        data,\n        expandIcon,\n    }) => {\n        const { label } = data;\n        const isLeaf = !(data.children && data.children.length);\n        return (\n            <li\n                className={className}\n                role=\"treeitem\"\n                onClick={isLeaf ? onClick : onExpand}\n            >\n                {isLeaf ? null : expandIcon}\n                <span>{label}</span>\n            </li>\n        );\n    };\n\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n\n    const treeStyle = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n    return (\n        <Tree\n            treeData={treeData}\n            renderFullLabel={renderLabel}\n            style={treeStyle}\n            onChange={(...args) => console.log('change', ...args)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: DragMove with Custom Move Handling in React\nDESCRIPTION: Shows how to use the customMove prop to implement custom positioning logic after dragging. This example includes size change on click and boundary restrictions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from'react';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction CustomMove() {\n  const containerRef = React.useRef();\n  const elementRef = React.useRef();\n  const startPoint = React.useRef();\n\n  const customMove = useCallback((element, top, left) => {\n    if (left + 100 > containerRef.current.offsetWidth) {\n      element.style.right = `${containerRef.current.offsetWidth - left - element.offsetWidth}px`\n      element.style.left = 'auto';\n    } else {\n      element.style.left = left + 'px';\n    } \n    element.style.top = top + 'px';\n  }, [])\n\n  const onMouseDown = useCallback((e) => {\n    startPoint.current = {\n      x: e.clientX,\n      y: e.clientY,\n    }\n  }, []);\n\n  const onMouseUp = useCallback((e) => {\n    if (startPoint.current) {\n      const { x, y } = startPoint.current;\n      if (Math.abs(e.clientX - x) < 5 && Math.abs(e.clientY - y) < 5) {\n        if (elementRef.current.style.width === '60px') {\n          elementRef.current.style.width = '100px';\n        } else {\n          elementRef.current.style.width = '60px';\n        }\n      }\n    }\n    startPoint.current = null;\n  }, []);\n\n  return (\n    <>\n      <span>蓝色色块点击可改变宽度，改变前后蓝色色块均不会超出范围限制 </span>\n      <br /><br />\n      <div \n        style={{ \n          backgroundColor: 'rgba(var(--semi-grey-2), 1)', width: 300, height: 300, \n          position: 'relative', padding: 10,\n          color: 'rgba(var(--semi-white), 1)', fontWeight: 500,\n        }} \n        ref={containerRef}\n      >\n        <span>Constrainer</span>\n        <DragMove\n          constrainer={() => containerRef.current}\n          customMove={customMove}\n        >\n          <div\n            style={{ backgroundColor: 'var(--semi-color-primary)',width: 60, height: 50,\n              display: 'flex', alignItems: 'center',justifyContent: 'center',\n              position: 'absolute', top: 50, left: 50, borderRadius: 10, padding: 5\n            }}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            ref={elementRef}\n          >Drag me</div>\n        </DragMove>\n      </div> \n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Preview Functionality in Upload Component\nDESCRIPTION: This example shows how to integrate the Image component with Upload using the renderThumbnail API to enable enlarged preview functionality when clicking on image thumbnails.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Image } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'music.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        }\n    ];\n    return (\n        <>\n            <Upload\n                action={action}\n                listType=\"picture\"\n                accept=\"image/*\"\n                multiple\n                defaultFileList={defaultFileList}\n                renderThumbnail={(file) => (<Image src={file.url} />)}\n            >\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Space Component in React\nDESCRIPTION: Demonstrates the basic usage of the Space component to set spacing between different UI elements like Switch and Buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Space>\n        <Switch defaultChecked={true}/>     \n        <Button type=\"secondary\">次要</Button>\n        <Button type=\"tertiary\">第三</Button>\n        <Button type=\"warning\">警告</Button>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Navigation Integration with React Router\nDESCRIPTION: Shows how to integrate the Nav component with routing libraries like react-router. This example uses renderWrapper to customize the navigation rendering and wrap each item in a Link component for routing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"react-router-dom\";\n\n()=>{\n    return <Nav\n        renderWrapper={({ itemElement, isSubNav, isInSubNav, props }) => {\n            const routerMap = {\n                Home: \"/\",\n                About: \"/about\",\n                Dashboard: \"/dashboard\",\n                \"Nothing Here\": \"/nothing-here\"\n            };\n            return (\n                <Link\n                    style={{ textDecoration: \"none\" }}\n                    to={routerMap[props.itemKey]}\n                >\n                    {itemElement}\n                </Link>\n            );\n        }}\n        items={[\n            { itemKey: \"Home\", text: \"Home\" },\n            { itemKey: \"About\", text: \"About\" },\n            {\n                text: \"Sub\",\n\n                itemKey: \"Sub\",\n                items: [\"Dashboard\", \"Nothing Here\"]\n            }\n        ]}\n    ></Nav>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Trigger Styles for Semi-Design Select in React\nDESCRIPTION: React example demonstrating how to create custom triggers for the Select component with different visual styles. Shows two variations: a colored background trigger and a Tag-based circular trigger with dropdown icon.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Select, Tag } from '@douyinfe/semi-ui';\nimport { IconAppCenter, IconChevronDown } from '@douyinfe/semi-icons';\n\n() => {\n    const [valList, setValList] = useState(['douyin', 'ulikecam']);\n    const list = [\n        { value: 'douyin', label: '抖音' },\n        { value: 'ulikecam', label: '轻颜相机' },\n        { value: 'jianying', label: '剪映' },\n        { value: 'toutiao', label: '今日头条' },\n    ];\n    const triggerRender = ({ value }) => {\n        return (\n            <div\n                style={{\n                    minWidth: '112',\n                    backgroundColor: 'var(--semi-color-primary-light-default)',\n                    height: 32,\n                    display: 'flex',\n                    alignItems: 'center',\n                    paddingLeft: 12,\n                    borderRadius: 3,\n                    color: 'var(--semi-color-primary)',\n                }}\n            >\n                <div\n                    style={{\n                        fontWeight: 600,\n                        flexShrink: 0,\n                        fontSize: 14,\n                    }}\n                >\n                    业务线\n                </div>\n                <div\n                    style={{\n                        margin: 4,\n                        whiteSpace: 'nowrap',\n                        textOverflow: 'ellipsis',\n                        flexGrow: 1,\n                        overflow: 'hidden',\n                    }}\n                >\n                    {value.map(item => item.label).join(' , ')}\n                </div>\n                <IconAppCenter style={{ marginRight: 8, flexShrink: 0 }} />\n            </div>\n        );\n    };\n\n    const triggerRender2 = ({ value, ...rest }) => {\n        return (\n            <div\n                style={{\n                    margin: 4,\n                    whiteSpace: 'nowrap',\n                    textOverflow: 'ellipsis',\n                    flexGrow: 1,\n                    overflow: 'hidden',\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <Tag size='large' color='cyan' shape='circle' suffixIcon={<IconChevronDown />}>\n                    {value.map(item => item.label).join(' / ')}\n                </Tag>\n            </div>\n        );\n    };\n\n    return (\n        <div>\n            <h4>不同背景色的触发器</h4>\n            <Select\n                value={valList}\n                triggerRender={triggerRender}\n                optionList={list}\n                onChange={value => setValList(value)}\n                multiple\n                filter\n                searchPosition='dropdown'\n                style={{ width: 240 }}\n            ></Select>\n            <br />\n            <br />\n            <h4>使用 circle Tag 作为触发器</h4>\n            <Select\n                value={valList}\n                onChange={value => setValList(value)}\n                triggerRender={triggerRender2}\n                optionList={list}\n                filter\n                multiple\n                searchPosition='dropdown'\n                style={{ width: 240, marginTop: 20, outline: 0 }}\n            ></Select>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Chart with VChart in React\nDESCRIPTION: This code implements a scatter chart visualization using @visactor/react-vchart. It plots country data showing the relationship between GDP and life expectancy, with bubble sizes representing population. The implementation includes crosshair interactions, axis configuration, and logarithmic scaling for bubble sizes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\n\nconst data = [\n  { continent: 'Americas', Country: 'Argentina', LifeExpectancy: 75.32, GDP: 12779.37964, Population: 40301927 },\n  { continent: 'Americas', Country: 'Brazil', LifeExpectancy: 72.39, GDP: 9065.800825, Population: 190010647 },\n  { continent: 'Americas', Country: 'Canada', LifeExpectancy: 80.653, GDP: 36319.23501, Population: 33390141 },\n  { continent: 'Americas', Country: 'Chile', LifeExpectancy: 78.553, GDP: 13171.63885, Population: 16284741 },\n  { continent: 'Americas', Country: 'Colombia', LifeExpectancy: 72.889, GDP: 7006.580419, Population: 44227550 },\n  { continent: 'Americas', Country: 'Costa Rica', LifeExpectancy: 78.782, GDP: 9645.06142, Population: 4133884 },\n  { continent: 'Americas', Country: 'Cuba', LifeExpectancy: 78.273, GDP: 8948.102923, Population: 11416987 },\n  { continent: 'Americas', Country: 'Dominican Republic', LifeExpectancy: 72.235, GDP: 6025.374752, Population: 9319622 },\n  { continent: 'Americas', Country: 'Ecuador', LifeExpectancy: 74.994, GDP: 6873.262326, Population: 13755680 },\n  { continent: 'Americas', Country: 'El Salvador', LifeExpectancy: 71.878, GDP: 5728.353514, Population: 6939688 },\n  { continent: 'Americas', Country: 'Guatemala', LifeExpectancy: 70.259, GDP: 5186.050003, Population: 12572928 },\n  { continent: 'Americas', Country: 'Honduras', LifeExpectancy: 70.198, GDP: 3548.330846, Population: 7483763 },\n  { continent: 'Americas', Country: 'Jamaica', LifeExpectancy: 72.567, GDP: 7320.880262, Population: 2780132 },\n  { continent: 'Americas', Country: 'Mexico', LifeExpectancy: 76.195, GDP: 11977.57496, Population: 108700891 },\n  { continent: 'Americas', Country: 'Nicaragua', LifeExpectancy: 72.899, GDP: 2749.320965, Population: 5675356 },\n  { continent: 'Americas', Country: 'Panama', LifeExpectancy: 75.537, GDP: 9809.185636, Population: 3242173 },\n  { continent: 'Americas', Country: 'Paraguay', LifeExpectancy: 71.752, GDP: 4172.838464, Population: 6667147 },\n  { continent: 'Americas', Country: 'Peru', LifeExpectancy: 71.421, GDP: 7408.905561, Population: 28674757 },\n  { continent: 'Americas', Country: 'Puerto Rico', LifeExpectancy: 78.746, GDP: 19328.70901, Population: 3942491 },\n  { continent: 'Americas', Country: 'Trinidad and Tobago', LifeExpectancy: 69.819, GDP: 18008.50924, Population: 1056608 },\n  { continent: 'Americas', Country: 'United States', LifeExpectancy: 78.242, GDP: 42951.65309, Population: 301139947 },\n  { continent: 'Americas', Country: 'Uruguay', LifeExpectancy: 76.384, GDP: 10611.46299, Population: 3447496 },\n  { continent: 'Americas', Country: 'Venezuela', LifeExpectancy: 73.747, GDP: 11415.80569, Population: 26084662 },\n  { continent: 'Asia', Country: 'China', LifeExpectancy: 72.961, GDP: 4959.114854, Population: 1318683096 },\n  { continent: 'Asia', Country: 'Hong Kong, China', LifeExpectancy: 82.208, GDP: 39724.97867, Population: 6980412 },\n  { continent: 'Asia', Country: 'Japan', LifeExpectancy: 82.603, GDP: 31656.06806, Population: 127467972 },\n  { continent: 'Asia', Country: 'Korea, Dem. Rep.', LifeExpectancy: 67.297, GDP: 1593.06548, Population: 23301725 },\n  { continent: 'Asia', Country: 'Korea, Rep.', LifeExpectancy: 78.623, GDP: 23348.13973, Population: 49044790 },\n  { continent: 'Europe', Country: 'Albania', LifeExpectancy: 76.423, GDP: 5937.029526, Population: 3600523 },\n  { continent: 'Europe', Country: 'Austria', LifeExpectancy: 79.829, GDP: 36126.4927, Population: 8199783 },\n  { continent: 'Europe', Country: 'Belgium', LifeExpectancy: 79.441, GDP: 33692.60508, Population: 10392226 },\n  { continent: 'Europe', Country: 'Bosnia and Herzegovina', LifeExpectancy: 74.852, GDP: 7446.298803, Population: 4552198 },\n  { continent: 'Europe', Country: 'Bulgaria', LifeExpectancy: 73.005, GDP: 10680.79282, Population: 7322858 },\n  { continent: 'Europe', Country: 'Croatia', LifeExpectancy: 75.748, GDP: 14619.22272, Population: 4493312 },\n  { continent: 'Europe', Country: 'Czech Republic', LifeExpectancy: 76.486, GDP: 22833.30851, Population: 10228744 },\n  { continent: 'Europe', Country: 'Denmark', LifeExpectancy: 78.332, GDP: 35278.41874, Population: 5468120 },\n  { continent: 'Europe', Country: 'Finland', LifeExpectancy: 79.313, GDP: 33207.0844, Population: 5238460 },\n  { continent: 'Europe', Country: 'France', LifeExpectancy: 80.657, GDP: 30470.0167, Population: 61083916 },\n  { continent: 'Europe', Country: 'Germany', LifeExpectancy: 79.406, GDP: 32170.37442, Population: 82400996 },\n  { continent: 'Europe', Country: 'Greece', LifeExpectancy: 79.483, GDP: 27538.41188, Population: 10706290 },\n  { continent: 'Europe', Country: 'Hungary', LifeExpectancy: 73.338, GDP: 18008.94444, Population: 9956108 },\n  { continent: 'Europe', Country: 'Iceland', LifeExpectancy: 81.757, GDP: 36180.78919, Population: 301931 },\n  { continent: 'Europe', Country: 'Ireland', LifeExpectancy: 78.885, GDP: 40675.99635, Population: 4109086 },\n  { continent: 'Europe', Country: 'Italy', LifeExpectancy: 80.546, GDP: 28569.7197, Population: 58147733 },\n  { continent: 'Europe', Country: 'Montenegro', LifeExpectancy: 74.543, GDP: 9253.896111, Population: 684736 },\n  { continent: 'Europe', Country: 'Netherlands', LifeExpectancy: 79.762, GDP: 36797.93332, Population: 16570613 },\n  { continent: 'Europe', Country: 'Norway', LifeExpectancy: 80.196, GDP: 49357.19017, Population: 4627926 },\n  { continent: 'Europe', Country: 'Poland', LifeExpectancy: 75.563, GDP: 15389.92468, Population: 38518241 },\n  { continent: 'Europe', Country: 'Portugal', LifeExpectancy: 78.098, GDP: 20509.64777, Population: 10642836 },\n  { continent: 'Europe', Country: 'Romania', LifeExpectancy: 72.476, GDP: 10808.47561, Population: 22276056 },\n  { continent: 'Europe', Country: 'Serbia', LifeExpectancy: 74.002, GDP: 9786.534714, Population: 10150265 },\n  { continent: 'Europe', Country: 'Slovak Republic', LifeExpectancy: 74.663, GDP: 18678.31435, Population: 5447502 },\n  { continent: 'Europe', Country: 'Slovenia', LifeExpectancy: 77.926, GDP: 25768.25759, Population: 2009245 },\n  { continent: 'Europe', Country: 'Spain', LifeExpectancy: 80.941, GDP: 28821.0637, Population: 40448191 },\n  { continent: 'Europe', Country: 'Sweden', LifeExpectancy: 80.884, GDP: 33859.74835, Population: 9031088 },\n  { continent: 'Europe', Country: 'Switzerland', LifeExpectancy: 81.701, GDP: 37506.41907, Population: 7554661 },\n  { continent: 'Europe', Country: 'Turkey', LifeExpectancy: 71.777, GDP: 8458.276384, Population: 71158647 },\n  { continent: 'Europe', Country: 'United Kingdom', LifeExpectancy: 79.425, GDP: 33203.26128, Population: 60776238 },\n  { continent: 'Oceania', Country: 'Australia', LifeExpectancy: 81.235, GDP: 34435.36744, Population: 20434176 },\n  { continent: 'Oceania', Country: 'New Zealand', LifeExpectancy: 80.204, GDP: 25185.00911, Population: 4115771 }\n];\n\nfunction logScale(value, domain, range) {\n  // Calculate the logarithm of the domain and range\n  const logDomain = domain.map(x => (x !== 0 ? Math.log10(x) : 0));\n  const logRange = range.map(x => Math.log10(x));\n  // Calculate the position of the value in the domain, map it to the range\n  const t = (Math.log10(value) - logDomain[0]) / (logDomain[1] - logDomain[0]);\n  const newValue = (logRange[1] - logRange[0]) * t + logRange[0];\n  // Return the mapped value and restore the logarithmic scaling\n  return Math.pow(10, newValue);\n}\n\n// chart spec\nconst spec = {\n  type: 'common',\n  series: [\n    {\n      type: 'scatter',\n      xField: 'GDP',\n      yField: 'LifeExpectancy',\n      seriesField: 'continent',\n      sizeField: 'Population',\n      size: d => logScale(d.Population, [0, Math.max(...data.map(d => d.Population))], [1, 20])\n    }\n  ],\n  crosshair: {\n    yField: {\n      visible: true,\n      line: { visible: true, type: 'line' },\n      label: { visible: true }\n    },\n    xField: {\n      visible: true,\n      line: { visible: true, type: 'line' },\n      label: { visible: true }\n    }\n  },\n  data: [{ id: 'data', values: data }],\n  title: {\n    visible: true,\n    text: 'Basic scatter chart',\n    subtext: 'This is a basic scatter chart',\n  },\n  axes: [\n    {\n      orient: 'left',\n      type: 'linear',\n      range: {\n        min: Math.min(...data.map(d => d.LifeExpectancy)),\n        max: Math.max(...data.map(d => d.LifeExpectancy))\n      },\n      domainLine: { visible: true }\n    },\n    {\n      orient: 'bottom',\n      type: 'linear',\n      domainLine: { visible: true }\n    }\n  ],\n  legends: [{ visible: true,}]\n};\n\nfunction App() {\n  return (\n    <div style={{ height: 460 }}>\n      <VChart\n        spec={spec}\n        option={{ mode: \"desktop-browser\" }}\n      />\n    </div>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Tooltip with Icon in React\nDESCRIPTION: This code snippet demonstrates a good practice for implementing an accessible Tooltip component with an Icon as its child. It shows how to properly use the aria-label attribute for better accessibility.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Good practices, add aria-label to description tooltip children\n/* eslint-disable */\n<Tooltip content={<p id='description'>Edit your setting</p>}>\n    <IconSetting aria-label='Settings'> \n    </IconSetting>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Grouped Transfer Component Implementation\nDESCRIPTION: Shows how to implement grouped data structure in Transfer component using type='groupList'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n() => {\n    const dataWithGroup = [\n        {\n            title: 'GroupA',\n            children: [\n                { label: 'A-1', value: 1, disabled: false, key: 1 },\n                { label: 'A-2', value: 2, disabled: false, key: 2 },\n                { label: 'A-3', value: 3, disabled: false, key: 3 },\n            ],\n        },\n        {\n            title: 'GroupB',\n            children: [\n                { label: 'B-1', value: 4, disabled: false, key: 4 },\n                { label: 'B-2', value: 5, disabled: false, key: 5 },\n                { label: 'B-3（disabled）', value: 6, disabled: true, key: 6 },\n            ],\n        },\n        {\n            title: 'GroupC',\n            children: [\n                { label: 'C-1', value: 7, disabled: false, key: 7 },\n                { label: 'C-2', value: 8, disabled: false, key: 8 },\n                { label: 'C-3', value: 9, disabled: false, key: 9 },\n                { label: 'C-4', value: 10, disabled: false, key: 10 },\n                { label: 'C-5', value: 11, disabled: false, key: 11 },\n                { label: 'C-6', value: 12, disabled: false, key: 12 },\n                { label: 'C-7', value: 13, disabled: false, key: 13 },\n            ],\n        },\n    ];\n    return (\n        <Transfer\n            type=\"groupList\"\n            defaultValue={[6]}\n            style={{ width: 568 }}\n            dataSource={dataWithGroup}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Closing a Toast in JavaScript\nDESCRIPTION: Demonstrates how to manually close a Toast notification using the toastId that was returned when the Toast was created.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nToast.close(toastId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tabs\nDESCRIPTION: Demonstrates how to disable specific tab panes within a tab group. Shows basic implementation with default active key selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"文档\" itemKey=\"1\">\n                    文档\n                </TabPane>\n                <TabPane tab=\"快速起步\" itemKey=\"2\" disabled>\n                    快速起步\n                </TabPane>\n                <TabPane tab=\"帮助\" itemKey=\"3\">\n                    帮助\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Input Area in Chat Component\nDESCRIPTION: Demonstrates how to use the custom input area render function within the Chat component. Manages message state and handles message sending with mock responses.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomRenderInputArea() {\n    const [message, setMessage] = useState(defaultMessage);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            content: `This is a mock response`\n        } \n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const renderInputArea = useCallback((props) => {\n        return (<CustomInputRender {...props} />)\n    }, []);    \n\n    return (\n        <Chat\n            renderInputArea={renderInputArea}\n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            uploadProps={uploadProps}\n        />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AutoComplete Component\nDESCRIPTION: AutoComplete的基本用法示例，展示了如何监听输入、提供建议选项并保持输入框受控状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\n() => {\n    const [stringData, setStringData] = useState([]);\n    const [value, setValue] = useState('');\n    const handleStringSearch = (value) => {\n        let result;\n        if (value) {\n            result = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\n        } else {\n            result = [];\n        }\n        setStringData(result);\n    };\n\n    const handleChange = (value) => {\n        console.log('onChange', value);\n        setValue(value);\n    };\n    return (\n        <AutoComplete\n            data={stringData}\n            value={value}\n            showClear\n            prefix={<IconSearch />}\n            placeholder=\"搜索... \"\n            onSearch={handleStringSearch}\n            onChange={handleChange}\n            style={{ width: 200 }}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Draggable Tree Implementation with Semi Design\nDESCRIPTION: This code snippet demonstrates how to create a draggable tree using the Semi Design library in React. It initializes tree data with a hierarchical structure and uses the `useState` hook to manage the tree data's state. The `onDrop` function handles the drag-and-drop logic, updating the tree structure based on the drop position and whether the drop is onto a node or into a gap between nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\n() => {\n    const initialData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        },\n        {\n            label: 'Europe',\n            value: 'Europe',\n            key: '2',\n        }\n    ];\n    const [treeData, setTreeData] = useState(initialData);\n\n    function onDrop(info) {\n        const { dropToGap, node, dragNode } = info;\n        const dropKey = node.key;\n        const dragKey = dragNode.key;\n        const dropPos = node.pos.split('-');\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n        const data = [...treeData];\n        const loop = (data, key, callback) => {\n            data.forEach((item, ind, arr) => {\n                if (item.key === key) return callback(item, ind, arr);\n                if (item.children) return loop(item.children, key, callback);\n            });\n        };\n        let dragObj;\n        loop(data, dragKey, (item, ind, arr) => {\n            arr.splice(ind, 1);\n            dragObj = item;\n        });\n\n        if (!dropToGap) {\n            // inset into the dropPosition\n            loop(data, dropKey, (item, ind, arr) => {\n                item.children = item.children || [];\n                item.children.push(dragObj);\n            });\n        } else if (dropPosition === 1 && node.children && node.expanded) {\n            // has children && expanded and drop into the node bottom gap\n            // insert to the top \n            loop(data, dropKey, item => {\n                item.children = item.children || [];\n                item.children.unshift(dragObj);\n            });\n        } else {\n            let dropNodeInd;\n            let dropNodePosArr;\n            loop(data, dropKey, (item, ind, arr) => {\n                dropNodePosArr = arr;\n                dropNodeInd = ind;\n            });\n            if (dropPosition === -1) {\n                // insert to top\n                dropNodePosArr.splice(dropNodeInd, 0, dragObj);\n            } else {\n                // insert to bottom\n                dropNodePosArr.splice(dropNodeInd + 1, 0, dragObj);\n            }\n        }\n        setTreeData(data);\n    }\n\n    return <Tree\n        treeData={treeData}\n        draggable\n        onDrop={onDrop}\n    />;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of Search Results in Cascader Component\nDESCRIPTION: This example demonstrates how to use filterRender to customize the appearance of search results in a Cascader component. It shows custom rendering for both single and multiple selection modes with text ellipsis handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ninterface filterRenderProps {\n    className: string;\n    inputValue: string;     // Search bar search content\n    disabled: boolean;      // Whether to disable\n    data: CascaderData[];   // Search result data\n    selected: boolean;      // Selected state when single selection\n    checkStatus:  {         // Checked state when multiple selection\n        checked: boolean;\n        halfChecked: boolean;\n    };\n    onClick: (e: React.MouseEvent) => void;      // Callback when clicked option in single selection \n    onCheck: (e: React.MouseEvent) => void;      // Callback when clicked option in multiple selection\n }\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Cascader, Typography, Checkbox } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Semi',\n            value: 'Semi',\n            children: [\n                {\n                    label: 'Semi-Material Semi-Material Semi-Material Semi-Material',\n                    value: 'Semi-Material',\n                    \n                },\n                {\n                    label: 'Semi-DSM Semi-DSM Semi-DSM Semi-DSM',\n                    value: 'Semi-DSM',\n                    \n                },\n                {\n                    label: 'Semi Design Semi Design Semi Design Semi Design',\n                    value: 'Semi Design',\n                    \n                },\n                {\n                    label: 'Semi-C2D Semi-C2D Semi-C2D Semi-C2D Semi-C2D',\n                    value: 'Semi-C2D',\n                },\n                {\n                    label: 'Semi-D2C Semi-D2C Semi-D2C Semi-D2C Semi-D2C ',\n                    value: 'Semi-D2C',\n                },\n            ],\n        }\n    ];\n    const { Text } = Typography;\n\n    const renderSearchOptionSingle = (props) => {\n        const { className, data, onClick, onKeyPress, selected } = props;\n\n        return (\n            <li\n                className={className}\n                style={{ justifyContent: 'flex-start' }}\n                role=\"treeitem\"\n                onClick={onClick}\n                onKeyPress={onKeyPress}\n            > \n                <Text \n                    ellipsis={{ showTooltip: { opts: { style: { wordBreak: 'break-all' } } } }} \n                    style={{ width: 270, color: selected ? 'var(--semi-color-primary)': undefined }}\n                >\n                    {data.map(item => item.label ).join(' / ')}\n                </Text>\n            </li>\n        );\n    };\n\n    const renderSearchOptionMultiple = (props) => {\n        const { className, data, checkStatus, onClick, onKeyPress } = props;\n\n        return (\n            <li\n                className={className}\n                style={{ justifyContent: 'flex-start' }}\n                role=\"treeitem\"\n                onClick={onCheck}\n                onKeyPress={onKeyPress}\n            > \n                <Checkbox\n                    onChange={onCheck}\n                    indeterminate={checkStatus.halfChecked}\n                    checked={checkStatus.checked}\n                    style={{ marginRight: 8 }}\n                />\n                <Text \n                    ellipsis={{ showTooltip: { opts: { style: { wordBreak: 'break-all' } } } }} \n                    style={{ width: 250 }}\n                >\n                    {data.map(item => item.label).join(' / ')}\n                </Text>\n            </li>\n        );\n    };\n    \n    return (\n        <div>\n            <p>Mouse over the option to view the complete content of the omitted text</p>\n            <br />\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Single selection, enter s\"\n                filterTreeNode\n                filterRender={renderSearchOptionSingle}\n            />\n            <br />\n            <Cascader\n                multiple\n                style={{ width: 300, marginTop: 20 }}\n                treeData={treeData}\n                placeholder=\"Multiple selection, enter s\"\n                filterTreeNode\n                filterRender={renderSearchOptionMultiple}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal UserGuide with React\nDESCRIPTION: This snippet demonstrates how to use the UserGuide component in a modal mode, set via the `mode` property. It configures the guide to display steps as a modal, utilizing the `Image` and `Typography` components within the step definitions. This provides a visually distinct and focused user guidance experience.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch, Image, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button onClick={showDialog}>Start Guide</Button>\n            <UserGuide\n                mode=\"modal\"\n                mask={true}\n                visible={visible}\n                steps={[\n                    {\n                        title: 'Welcome to Semi DSM!',\n                        description: <div>You can start from the published theme, or choose {<Typography.Text strong>Create Now</Typography.Text>} to create a new theme</div>,\n                        cover: <Image \n                            width={'600px'} \n                            height={'100%'} \n                            src=\"https://lf9-static.bytednsdoc.com/obj/eden-cn/nuhpxphk/dsm/dsm_welcome.png\"\n                        />,\n                        position: 'bottom',\n                    },\n                    {\n                        title: 'High-available color palette',\n                        description: 'After selecting the main color, our color algorithm will generate a high-available color palette for you',\n                        cover: <Image \n                            width={'600px'} \n                            height={'100%'} \n                            src=\"https://lf9-static.bytednsdoc.com/obj/eden-cn/nuhpxphk/dsm/dsm_console.png\"\n                        />,\n                        position: 'bottom',\n                    },\n                    {\n                        title: 'Customize freely',\n                        description: 'Start customizing your design system!',\n                        cover: <Image \n                            width={'600px'} \n                            height={'100%'} \n                            src=\"https://lf9-static.bytednsdoc.com/obj/eden-cn/nuhpxphk/dsm/dsm_palette.png\" \n                        />,\n                        position: 'bottom',\n                    },\n                ]}\n                onChange={(current) => {\n                    console.log('Current guide step', current);\n                }}\n                onNext={(current) => {\n                    console.log('Next guide step');\n                }}\n                onPrev={(current) => {\n                    console.log('Previous guide step');\n                }}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Success Toast with JSX\nDESCRIPTION: Example of rendering a success Toast component with simple content. This demonstrates the recommended simple content style.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastCard type='success' content='Ticket transferred' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload with Default File List in React\nDESCRIPTION: This example demonstrates how to use the Upload component with a defaultFileList to display uploaded files. It includes configuration for previewing thumbnails by setting the preview attribute to true.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n        {\n            uid: '2',\n            name: 'abc.jpeg',\n            status: 'uploadFail',\n            size: '222KB',\n            preview: true,\n            fileInstance: new File([new ArrayBuffer(2048)], 'abc.jpeg', { type: 'image/png' }),\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n    ];\n\n    return (\n        <>\n            <Upload action={action} defaultFileList={defaultFileList}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Click upload\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Avatar Component\nDESCRIPTION: Example showing how to implement an accessible Avatar component with alt text for screen readers\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/accessibility/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Avatar\n            alt=\"Person Name\"\n            src=\"https://lf9-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/a11y-img-alt-avatar.png\"\n            style={{ margin: 4 }}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Validation with beforeUpload in React\nDESCRIPTION: This React component demonstrates asynchronous file validation using the `beforeUpload` hook and Promises in Semi Design's Upload component. It shows how to delay the validation process and either resolve (allow upload) or reject (prevent upload) based on asynchronous operations. Error messages can also be passed to the user.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\nclass AsyncBeforeUploadDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.beforeUpload = this.beforeUpload.bind(this);\n        this.count = 0;\n    }\n\n    beforeUpload({ file, fileList }) {\n        let result;\n        return new Promise((resolve, reject) => {\n            if (this.count > 1) {\n                result = {\n                    autoRemove: false,\n                    shouldUpload: true,\n                };\n                this.count = this.count + 1;\n                resolve(result);\n            } else {\n                result = {\n                    autoRemove: false,\n                    fileInstance: file.fileInstance,\n                    status: 'validateFail',\n                    shouldUpload: false,\n                    validateMessage: `${this.count + 1} is doomed to fail`,\n                };\n                this.count = this.count + 1;\n                reject(result);\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Upload action=\"//semi.design/api/upload\" beforeUpload={this.beforeUpload}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Click upload (asynchronous verification before upload)\n                </Button>\n            </Upload>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 响应式栅格布局 (React)\nDESCRIPTION: 使用预设的响应式属性（xs, sm, md, lg, xl, xxl）创建响应式布局。展示了如何根据不同屏幕尺寸调整列的大小和偏移。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid\">\n        <Row gutter={{ xs: 16, sm: 16, md: 16, lg: 24, xl: 24, xxl: 24 }}>\n            <Col xs={2} sm={4} md={6} lg={8} xl={10}><div className=\"col-content\">Col</div></Col>\n            <Col xs={20} sm={16} md={12} lg={8} xl={4}><div className=\"col-content\">Col</div></Col>\n            <Col xs={2} sm={4} md={6} lg={8} xl={10}><div className=\"col-content\">Col</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}><div className=\"col-content\">Col</div></Col>\n            <Col xs={{ span: 11, offset: 1 }} lg={{ span: 6, offset: 2 }}><div className=\"col-content\">Col</div></Col>\n            <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}><div className=\"col-content\">Col</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Remote Search with AutoComplete Component\nDESCRIPTION: 展示如何实现远程搜索功能，通过onSearch获取用户输入并动态更新数据。还展示了如何使用loading状态和自定义图标。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\nimport { IconSelect, IconForm, IconTable, IconInput, IconButton } from '@douyinfe/semi-icons-lab';\n\n() => {\n    let initList = [\n        { value: 'select', label: '选择器', icon: <IconSelect/> },\n        { value: 'input', label: '输入框', icon: <IconInput/> },\n        { value: 'form', label: '表单', icon: <IconForm /> },\n        { value: 'button', label: '按钮', icon: <IconButton /> },\n        { value: 'table', label: '表格', icon: <IconTable /> },\n    ];\n\n    const [loading, setLoading] = useState(false);\n    const [list, setList] = useState(initList);\n\n    const handleSearch = (inputValue) => {\n        setLoading(true);\n        let newList = initList;\n        if (inputValue) {\n            newList = list.filter(item => item.value.includes(inputValue));\n        }\n        setTimeout(() => {\n            setList(newList);\n            setLoading(false);\n        }, 1000);\n    };\n\n    const search = debounce(handleSearch, 200);\n\n    const handleSelect = () => {\n        console.log(value);\n    };\n\n    const renderItem = (item) => {\n        return (\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n                <div style={{ fontSize: 32 }}>{item.icon}</div>\n                <div style={{ marginLeft: 12 }}>\n                    <p>{item.value}</p>\n                    <p>{item.label}</p>\n                </div>\n            </div>\n        );\n    };\n\n    const renderSelectedItem = (item) => {\n        // 注意：与其他组件如Select不同，此处只能返回String类型的值，不能返回ReactNode\n        return item.value;\n    };\n\n    return (\n        <AutoComplete\n            data={list}\n            style={{ width: 250 }}\n            prefix={<IconSearch />}\n            onSearch={search}\n            loading={loading}\n            renderItem={renderItem}\n            renderSelectedItem={renderSelectedItem}\n            onSelect={handleSelect}\n        ></AutoComplete>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Modal Instance in React\nDESCRIPTION: Example showing how to create a modal using the Modal.info() method, then update its properties and finally destroy it. This demonstrates the instance management capabilities of modals created with static methods.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst modal = Modal.info();\n\nmodal.update({\n  title: 'Updated Title',\n  content: 'Updated Content',\n});\n\nmodal.destroy();\n```\n\n----------------------------------------\n\nTITLE: Tree Component with Connection Lines in Semi Design\nDESCRIPTION: This example demonstrates how to display connection lines between tree nodes using the showLine property. The connection lines can be toggled on and off using a switch control, showing the visual hierarchy between parent and child nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from 'react';\nimport { Tree, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [show, setShow] = useState(true);\n    const onChange = useCallback((value) => {\n        setShow(value);\n    }, []);\n    const treeData = useMemo(() => {\n        return [\n            {\n                label: 'parent-0',\n                key: 'parent-0',\n                children: [\n                    {\n                        label: 'leaf-0-0',\n                        key: 'leaf-0-0',\n                        children: [\n                            {\n                                label: 'leaf-0-0-0',\n                                key: 'leaf-0-0-0',\n                            },\n                            {\n                                label: 'leaf-0-0-1',\n                                key: 'leaf-0-0-1',\n                            },\n                            {\n                                label: 'leaf-0-0-2',\n                                key: 'leaf-0-0-2',\n                            },\n                        ]\n                    },\n                    {\n                        label: 'leaf-0-1',\n                        key: 'leaf-0-1',\n                    }\n                ]\n            },\n            {\n                label: 'parent-1',\n                key: 'parent-1',\n            }\n        ];\n    }, []);\n\n    const style = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n\n    return (\n        <>\n            <div style={{ display: 'flex', alignItems: 'center', columnGap: 5, marginBottom: 5 }}>\n                <strong>showLine </strong>\n                <Switch checked={show} onChange={onChange} />\n            </div>\n            <Tree\n                showLine={show}\n                defaultExpandAll\n                treeData={treeData}\n                style={style}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: React Component for Radar Chart with VChart and Semi UI\nDESCRIPTION: This React component integrates VChart and Semi UI to display a selectable radar chart. It uses a RadioGroup from Semi UI to toggle between a basic and a grouped radar chart, dynamically updating the VChart component with the corresponding specification (basicSpec or groupSpec).  The component manages state to control the selected chart type and utilizes VChart to render the chart.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [type, setType] = useState('group');\n  const onChange = useCallback((e) => setType(e.target.value), []);\n  return (\n    <>\n      <RadioGroup onChange={onChange} value={type} >\n        <Radio value={'basic'}>Basic radar chart</Radio>\n        <Radio value={'group'}>Grouped radar chart</Radio>\n      </RadioGroup>\n      <div style={{ height: 440 }}>\n        <VChart\n            spec={type === 'basic' ? basicSpec : groupSpec}\n            option={{ mode: \"desktop-browser\" }}\n        />\n      </div>\n    </>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entries with allowCreate in Semi UI Select\nDESCRIPTION: This example shows how to enable users to create and select entries that don't exist in the option list using the allowCreate property. It also demonstrates how to customize the creation item's appearance using renderCreateItem.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const optionList = [\n        { value: 'douyin', label: '抖音' },\n        { value: 'ulikecam', label: '轻颜相机' },\n        { value: 'jianying', label: '剪映' },\n        { value: 'toutiao', label: '今日头条' },\n    ];\n    return (\n        <>\n            <Select\n                style={{ width: 400 }}\n                optionList={optionList}\n                allowCreate={true}\n                multiple={true}\n                filter={true}\n                onChange={v => console.log(v)}\n                defaultActiveFirstOption\n            ></Select>\n            <br />\n            <br />\n            <Select\n                style={{ width: 400 }}\n                optionList={optionList}\n                allowCreate={true}\n                multiple={true}\n                filter={true}\n                placeholder=\"With renderCreateItem\"\n                renderCreateItem={(input, isFocus, style) => (<div style={{ padding: 10, ...style }}>Create Item：{input}</div>)}\n                onChange={v => console.log(v)}\n                defaultActiveFirstOption\n            ></Select>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Upload Request with mockRequest in React\nDESCRIPTION: This React component demonstrates how to implement a custom upload request using the `customRequest` prop in Semi Design's Upload component. It showcases how to override the default upload behavior and manually control the upload process, including progress updates, success, and error handling, using a mock request implementation.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const mockRequest = ({ file, onProgress, onError, onSuccess }) => {\n        let count = 0;\n        let interval = setInterval(() => {\n            if (count === 100) {\n                clearInterval(interval);\n                onSuccess();\n                return;\n            }\n            onProgress({ total: 100, loaded: count });\n            count += 20;\n        }, 500);\n    };\n\n    return (\n        <Upload action=\"//semi.design/api/upload\" customRequest={mockRequest}>\n            <Button icon={<IconUpload />} theme=\"light\">\n                Click upload\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker with Top and Bottom Slots in React using Semi-Design\nDESCRIPTION: This example demonstrates how to use 'topSlot' and 'bottomSlot' props to add custom content to the DatePicker component. It includes tabs for different schedules and informational text at the bottom.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useMemo } from 'react';\nimport { DatePicker, Typography, Tabs, TabPane, Space } from '@douyinfe/semi-ui';\nimport { IconBulb } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    const [activeTab, setActiveTab] = useState('1');\n    const [date, setDate] = useState();\n    const uedDisabledDate = currentDate => currentDate && currentDate.getDate() > 10 && currentDate.getDate() < 15;\n    const testDisabledDate = currentDate => currentDate && currentDate.getDate() > 15 && currentDate.getDate() < 25;\n\n    const handleTabChange = tab => {\n        setActiveTab(tab);\n        setDate();\n    };\n\n    const handleDateChange = value => {\n        setDate(value);\n    };\n\n    const disabledDate = useMemo(() => (activeTab === '1' ? uedDisabledDate : testDisabledDate), [activeTab]);\n\n    const TopSlot = function (props) {\n        const { style } = props;\n        return (\n            <Tabs size=\"small\" onChange={handleTabChange} activeKey={activeTab} style={{ padding: '12px 20px 0', ...style }}>\n                <TabPane tab=\"UED Schedule\" itemKey=\"1\" />\n                <TabPane tab=\"Test schedule\" itemKey=\"2\" />\n            </Tabs>\n        );\n    };\n\n    const BottomSlot = function (props) {\n        const { style } = props;\n        return (\n            <Space style={{ padding: '12px 20px', ...style }}>\n                <IconBulb style={{ color: 'rgba(var(--semi-amber-5), 1)' }} />\n                <Text strong style={{ color: 'var(--semi-color-text-2)' }}>\n                    Please read before finalizing\n                </Text>\n                <Text link={{ href: 'https://semi.design/', target: '_blank' }}>Release notice</Text>\n            </Space>\n        );\n    };\n\n    const MonthBottomSlot = function (props) {\n        const { style } = props;\n        return (\n            <Space style={{ padding: '12px 20px', ...style }}>\n                <IconBulb style={{ color: 'rgba(var(--semi-amber-5), 1)' }} />\n                <Text strong style={{ color: 'var(--semi-color-text-2)' }}>\n                    please read\n                </Text>\n                <Text link={{ href: 'https://semi.design/', target: '_blank' }}>Notice</Text>\n            </Space>\n        );\n    };\n\n    return (\n        <div>\n            <DatePicker \n                topSlot={<TopSlot />}\n                disabledDate={disabledDate}\n                value={date}\n                onChange={handleDateChange}\n                dropdownClassName=\"components-datepicker-demo-slot\"\n                placeholder=\"Please select a schedule\"\n            />\n            <br /><br />\n            <DatePicker\n                bottomSlot={<BottomSlot />}\n                placeholder=\"Please select release time\"\n            />\n            <br /><br />\n            <DatePicker\n                type=\"month\"\n                bottomSlot={<MonthBottomSlot />}\n                placeholder=\"Please select month\"\n            />\n            <br /><br />\n            <DatePicker \n                topSlot={<TopSlot style={{ padding: '8px 12px 0' }} />} \n                bottomSlot={<BottomSlot style={{ padding: '8px 12px' }} />} \n                density=\"compact\"\n                dropdownClassName=\"components-datepicker-demo-slot\"\n            />\n            <br /><br />\n            <DatePicker \n                type=\"dateTimeRange\"\n                bottomSlot={<BottomSlot />}\n                style={{ width: 400 }}\n                placeholder=\"Please select a time range\"\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Async Data with Cascader in React\nDESCRIPTION: This example demonstrates how to load data asynchronously in a Cascader component using the loadData property. It implements dynamic loading of child options when a parent option is selected, with a simulated API call using setTimeout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const initialData = [\n        {\n            label: 'Node1',\n            value: '0-0',\n        },\n        {\n            label: 'Node2',\n            value: '0-1',\n        },\n        {\n            label: 'Node3',\n            value: '0-2',\n            isLeaf: true\n        },\n    ];\n    const [data, setData] = useState(initialData);\n    \n    const updateTreeData = (list, value, children) => {\n        return list.map(node => {\n            if (node.value === value) {\n                return { ...node, children };\n            }\n            if (node.children) {\n                return { ...node, children: updateTreeData(node.children, value, children) };\n            }\n            return node;\n        });\n    };\n\n    const onLoadData = selectedOpt => {\n        const targetOpt = selectedOpt[selectedOpt.length - 1];\n        const { label, value } = targetOpt;\n        return new Promise(resolve => {\n            if (targetOpt.children) {\n                resolve();\n                return;\n            }\n\n            setTimeout(() => {\n                setData(origin =>\n                    updateTreeData(origin, value, [\n                        {\n                            label: `${label} - 1`,\n                            value: `${label}-1`,\n                            isLeaf: selectedOpt.length > 1\n                        },\n                        {\n                            label: `${label} - 2`,\n                            value: `${label}-2`,\n                            isLeaf: selectedOpt.length > 1\n                        },\n                    ]),\n                );\n                resolve();\n            }, 1000);\n        });\n    };\n\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={data}\n            loadData={onLoadData}\n            placeholder=\"Please select\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Layout with Semi UI\nDESCRIPTION: Demonstrates how to create a responsive layout using the Sider component's breakpoint prop and onBreakpoint callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const onbreakpoint = (screen, bool) => {\n        console.log(screen, bool);\n    };\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    const { Header, Footer, Sider, Content } = Layout;\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Layout>\n                <Sider\n                    style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}\n                    breakpoint={['md']}\n                    onBreakpoint={onbreakpoint}\n                >\n                    Sider\n                </Sider>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n            </Layout>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Different Toast Types in JavaScript\nDESCRIPTION: Shows the different Toast methods available for displaying notifications of various types. Each method can accept either an options object or a simple string.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nToast.info(options || string)\nToast.error(options || string)\nToast.warning(options || string)\nToast.success(options || string)\n```\n\n----------------------------------------\n\nTITLE: Tooltip Trigger Configuration\nDESCRIPTION: This code shows how to configure the event that triggers the Tooltip's visibility using the `trigger` prop. It demonstrates different trigger options, including `hover`, `click`, `focus`, `contextMenu`, and `custom`. When `trigger` is set to `custom`, the `visible` prop is used to control the Tooltip's visibility programmatically. The example also uses `getPopupContainer` to specify where the tooltip should render in the DOM.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tooltip, Button, Input, RadioGroup, Radio } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [visible, setVisible] = useState(false);\n    // container 需要设置 position: relative\n    const getPopupContainer = () => document.querySelector('#tooltip-container');\n\n    return (\n        <div style={{ width: '100%', height: '100%', overflow: 'hidden', position: 'relative' }} id=\"tooltip-container\">\n            <div style={{ width: '150%', height: '150%', paddingLeft: 50, paddingTop: 50 }}>\n                <Tooltip content={'hi bytedance'} getPopupContainer={getPopupContainer}>\n                    <Button theme='solid' type='tertiary' style={{ marginBottom: 20 }}>悬停显示</Button>\n                </Tooltip>\n                <br />\n                <Tooltip content={'hi bytedance'} trigger=\"click\" getPopupContainer={getPopupContainer}>\n                    <Button style={{ marginBottom: 20 }}>点击显示</Button>\n                </Tooltip>\n                <br />\n                <Tooltip content={'hi bytedance'} trigger=\"focus\" getPopupContainer={getPopupContainer}>\n                    <Input style={{ width: 100, marginBottom: 20 }} placeholder=\"聚焦显示\" />\n                </Tooltip>\n                <br />\n                <Tooltip content={'hi bytedance'} trigger=\"contextMenu\" getPopupContainer={getPopupContainer}>\n                    <Button theme='solid' type='secondary' style={{ marginBottom: 20 }}>右键点击展示</Button>\n                </Tooltip>\n                <br />\n                <Tooltip\n                    content={'hi bytedance'}\n                    trigger=\"custom\"\n                    visible={visible}\n                    getPopupContainer={getPopupContainer}\n                >\n                    <span style={{ display: 'inline-block' }}>\n                        <RadioGroup type='button' onChange={(e) => setVisible(e.target.value)} value={visible}>\n                            <Radio value={true}>受控显示</Radio>\n                            <Radio value={false}>受控隐藏</Radio>\n                        </RadioGroup>\n                    </span>\n                </Tooltip>\n            </div>\n        </div>\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing TimePicker Panel Header and Footer in React\nDESCRIPTION: Demonstrates how to set custom header and footer for the TimePicker panel, including for time range selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { TimePicker, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [open, setOpen] = useState(false);\n    const closePanel = () => setOpen(false);\n    const onOpenChange = open => {\n        setOpen(open);\n        console.log(open);\n    };\n\n    return (\n        <div>\n            <TimePicker\n                open={open}\n                onOpenChange={onOpenChange}\n                panelHeader={'Time Select'}\n                panelFooter={<Button onClick={closePanel}>close</Button>}\n            />\n            <br/><br/>\n            <TimePicker\n                type='timeRange'\n                panelHeader={['start header', 'end header']}\n                panelFooter={[\n                    <Button key=\"1\" onClick={() => {console.log('start footer');}}>start footer</Button>, \n                    <Button key=\"2\" onClick={() => {console.log('end footer');}}>end footer</Button>\n                ]}\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Empty Content in Semi-Design AutoComplete Component\nDESCRIPTION: This code demonstrates how to customize the empty content display of an AutoComplete component using the Empty component with a custom illustration. It implements a search functionality with loading states and displays a custom empty state when no results are available.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete, Empty } from '@douyinfe/semi-ui';\nimport { IllustrationNoContent } from '@douyinfe/semi-illustrations';\n\n() => {\n    let [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = v => {\n        setLoading(true);\n        setTimeout(() => {\n            if (!v) {\n                setData([]);\n                setLoading(false);\n                return;\n            }\n            setData(() => {\n                const res = Array.from(Array(5)).map(c => Math.random());\n                return res;\n            });\n            setLoading(false);\n        }, 1000);\n    };\n\n    return (\n        <AutoComplete\n            loading={loading}\n            data={data}\n            emptyContent={<Empty style={{ padding: 12, width: 300 }} image={<IllustrationNoContent style={{ width: 150, height: 150 }}/>} description={'no content yet'} />}\n            onSearch={fetchData}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Listener Target in HotKeys Component\nDESCRIPTION: Demonstrates how to use the 'getListenerTarget' prop to change the DOM element on which the HotKeys component listens for events.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/hotkeys/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useRef } from 'react';\nimport { HotKeys, Input, Modal } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const hotKeys = [\"Control\", \"q\"]\n  const [visible, setVisible] = useState(false);\n  const showDialog = () => {\n      setVisible(true);\n  };\n  const handleOk = () => {\n      setVisible(false);\n  };\n  const handleCancel = () => {\n      setVisible(false);\n  };\n\n  const inputRef = useRef(null);\n  return (\n    <div>\n      <Input ref={inputRef} placeholder='test for target'></Input>\n      <HotKeys hotKeys={hotKeys} onHotKey={showDialog} \n        getListenerTarget={() => inputRef.current}>\n      </HotKeys>\n      <Modal\n          title=\"Dialog\"\n          visible={visible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n      >\n          This is the Modal opened by hotkey: {hotKeys.join('+')}.\n      </Modal>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Event Bubbling in Collapse Header with Custom Elements\nDESCRIPTION: This snippet demonstrates how to prevent click event bubbling when adding custom elements like Input inside a Collapse.Header. It uses stopPropagation() within an onClick handler to ensure clicking the input doesn't trigger the collapse/expand action.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse, Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Collapse>\n        <Collapse.Panel\n            header={\n                <div style={{ display: 'inline-flex' }} onClick={e => e.stopPropagation()}>\n                    <span>Panel header</span>\n                    <Input />\n                </div>\n            }\n            itemKey=\"1\"\n        >\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hint Rendering in React with Semi UI Chat Component\nDESCRIPTION: This code demonstrates how to implement custom hint rendering using the Chat component from Semi UI. It includes state management, custom styling, and event handling for the chat interface.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'assistant',\n        id: '1',\n        createAt: 1715676751919,\n        content: 'Semi Design 是由抖音前端团队和MED产品设计团队设计、开发并维护的设计系统，你可以向我提问任何关于 Semi 的问题。',\n    }\n];\n\nconst hintsExample = [\n    \"告诉我更多\",\n    \"Semi Design 的组件有哪些？\",\n    \"我能够通过 DSM 定制自己的主题吗？\",\n]\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    height: 400,\n};\n\nlet id = 0;\nfunction getId() {\n    return `id-${id++}`\n}\nconst uploadProps = { action: 'https://api.semi.design/upload' }\n\nfunction DefaultChat() {\n    const [message, setMessage] = useState(defaultMessage);\n    const [hints, setHints] = useState(hintsExample);\n\n    const onHintClick = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"这是一条 mock 回复信息\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n        setHints([]);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const commonHintStyle = useMemo(() => ({\n        border: '1px solid var(--semi-color-border)',\n        padding: '10px',\n        borderRadius: '10px',\n        color: 'var( --semi-color-text-1)',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        cursor: 'pointer',\n        fontSize: '14px'\n    }), []);\n    \n    const renderHintBox = useCallback((props) => {\n        const { content, onHintClick, index } = props;\n        return <div style={commonHintStyle} onClick={onHintClick} key={index}>\n            {content}\n            <IconArrowRight style={{ marginLeft: 10 }}>click me</IconArrowRight>\n        </div>\n    }, []);\n\n    onClear = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    return (\n        <Chat \n            renderHintBox={renderHintBox}\n            hints={hints}\n            onHintClick={onHintClick}\n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            onClear={onClear}\n            uploadProps={uploadProps}\n        />\n    )\n}\n\nrender(DefaultChat);\n```\n\n----------------------------------------\n\nTITLE: Custom Render Drag Transfer Implementation\nDESCRIPTION: Implementation of a transfer component with custom rendering and drag-and-drop functionality. Handles store data with customizable source and selected panels.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nclass CustomRenderDragDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: Array.from({ length: 100 }, (v, i) => ({\n                label: `海底捞门店 ${i}`,\n                value: i,\n                disabled: false,\n                key: `key-${i}`,\n            })),\n        };\n        this.renderSourcePanel = this.renderSourcePanel.bind(this);\n        this.renderSelectedPanel = this.renderSelectedPanel.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n    }\n    // ... rest of implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Option Rendering in Select Component with React\nDESCRIPTION: Example showing how to use renderOptionItem for complete control over option rendering in the Select dropdown. Includes custom styles for selected, focused, and disabled states, and incorporates Checkbox and Highlight components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select, Checkbox, Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const [inputValue, setInputValue] = useState('');\n    const renderOptionItem = renderProps => {\n        const {\n            disabled,\n            selected,\n            label,\n            value,\n            focused,\n            className,\n            style,\n            onMouseEnter,\n            onClick,\n            empty,\n            emptyContent,\n            ...rest\n        } = renderProps;\n        const optionCls = classNames({\n            ['custom-option-render']: true,\n            ['custom-option-render-focused']: focused,\n            ['custom-option-render-disabled']: disabled,\n            ['custom-option-render-selected']: selected,\n            className\n        });\n        const searchWords = [inputValue];\n\n        // Notice：\n        // 1.props传入的style需在wrapper dom上进行消费，否则在虚拟化场景下会无法正常使用\n        // 2.选中(selected)、聚焦(focused)、禁用(disabled)等状态的样式需自行加上，你可以从props中获取到相对的boolean值\n        // 3.onMouseEnter、className需在wrapper dom上绑定，否则上下键盘操作时显示会有问题\n        \n        return (\n            <div style={style} className={optionCls} onClick={() => onClick()} onMouseEnter={e => onMouseEnter()}>\n                <Checkbox checked={selected} />\n                <div className=\"option-right\">\n                    <Highlight sourceString={label} searchWords={searchWords} />\n                </div>\n            </div>\n        );\n    };\n\n    const optionList = [\n        { value: 'douyin', label: '抖音', otherKey: 0 },\n        { value: 'ulikecam', label: '轻颜相机', disabled: true, otherKey: 1 },\n        { value: 'jianying', label: '剪映', otherKey: 2 },\n        { value: 'toutiao', label: '今日头条', otherKey: 3 },\n    ];\n\n    return (\n        <>\n            <Select\n                filter\n                placeholder=\"单选\"\n                onSearch={(v) => setInputValue(v)}\n                dropdownClassName=\"components-select-demo-renderOptionItem\"\n                optionList={optionList}\n                style={{ width: 180 }}\n                renderOptionItem={renderOptionItem}\n            />\n            <br />\n            <br />\n            <Select\n                filter\n                placeholder=\"多选\"\n                multiple\n                onSearch={(v) => setInputValue(v)}\n                dropdownClassName=\"components-select-demo-renderOptionItem\"\n                optionList={optionList}\n                style={{ width: 320 }}\n                renderOptionItem={renderOptionItem}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker Methods Demo in React\nDESCRIPTION: Demonstrates usage of DatePicker manual control methods (open, close, focus, blur) using refs in a React component. Shows implementation with event handling and button controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { DatePicker, Space, Button } from '@douyinfe/semi-ui';\nimport { BaseDatePicker } from '@douyinfe/semi-ui/lib/es/datePicker';\n\nfunction Demo() {\n    const ref = useRef();\n    // Typescript\n    // const ref = useRef<BaseDatePicker>();\n    // Why not import the DatePicker exported by the entry? \n    // The entry component is a forwardRef component, and the ref is transparently passed to this component\n\n    const handleClickOutside = () => {\n        console.log('click outside');\n    };\n\n    return (\n        <Space vertical align={'start'}>\n            <Space>\n                <Button onClick={() => ref.current.open()}>open</Button>\n                <Button onClick={() => ref.current.close()}>close</Button>\n                <Button onClick={() => ref.current.focus()}>focus</Button>\n                <Button onClick={() => ref.current.blur()}>blur</Button>\n            </Space>\n            <div>\n                <DatePicker type=\"dateTime\" ref={ref} onClickOutSide={handleClickOutside} />\n            </div>\n        </Space>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modal with Hooks and Context in Semi Design\nDESCRIPTION: This example demonstrates how to use Modal.useModal() to create modals that can read context. It shows integration with ConfigProvider for localization support using the en_GB locale.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider, Button, Modal } from '@douyinfe/semi-ui';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\n\nfunction Demo(props = {}) {\n    const [modal, contextHolder] = Modal.useModal();\n    const config = { title: 'This is a success message', content: 'Context consumer' };\n\n    return (\n        <ConfigProvider locale={en_GB}>\n            <div>\n                <Button\n                    onClick={() => {\n                        modal.confirm(config);\n                    }}\n                >\n                    Confirm Modal\n                </Button>\n            </div>\n            {contextHolder}\n        </ConfigProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Upload Button Location in Picture Wall Component\nDESCRIPTION: This example demonstrates how to customize the position of the upload button in a picture wall using the hotSpotLocation prop. It allows changing the position between 'start' and 'end' of the list with a radio button control.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Select, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport { IconPlus, IconEyeOpened } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'resso.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n    ];\n    const handlePreview = (file) => {\n        const feature = \"width=300,height=300\";\n        window.open(file.url, 'imagePreview', feature);\n    };\n    const [hotSpotLocation, setLocation] = useState('end');\n    return (\n        <>\n            <RadioGroup\n                value={hotSpotLocation}\n                type='button'\n                onChange={e => setLocation(e.target.value)}>\n                <Radio value='start'>start</Radio>\n                <Radio value='end'>end</Radio>\n            </RadioGroup>\n            <hr />\n            <Upload\n                action={action}\n                listType=\"picture\"\n                showPicInfo\n                accept=\"image/*\"\n                multiple\n                hotSpotLocation={hotSpotLocation}\n                defaultFileList={defaultFileList}\n                onPreviewClick={handlePreview}\n            >\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced InputNumber Features\nDESCRIPTION: Shows advanced features including default values, disabled state, precision control, and inner buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div style={{ width: 280 }}>\n                <label>Set defaultValue to 1 </label>\n                <InputNumber defaultValue={1} />\n                <br/><br/>\n\n                <label>Set disabled to true</label>\n                <InputNumber defaultValue={2} disabled />\n                <br/><br/>\n\n                <label>Set precision to 2 </label>\n                <InputNumber precision={2} defaultValue={1.234} />\n                <br/><br/>\n\n                <label>Set innerButtons=true </label>\n                <InputNumber innerButtons={true} suffix={'Hour'} defaultValue={1} style={{ width: 190 }} />\n                <br/>\n\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Styles and Position in React with Semi Design\nDESCRIPTION: This example demonstrates how to customize a Modal's appearance using style properties like bodyStyle, centered positioning, and maskStyle. The Modal displays information about Semi Design with scrollable content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true,\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false,\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false,\n        });\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>自定义对话框样式</Button>\n                <Modal\n                    title=\"自定义样式\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    centered\n                    bodyStyle={{ overflow: 'auto', height: 200 }}\n                >\n                    <p style={{ lineHeight: 1.8 }}>\n                        Semi Design 是由抖音前端团队与 UED\n                        团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的\n                        Web 应用。\n                    </p>\n                    <p style={{ lineHeight: 1.8 }}>\n                        区别于其他的设计系统而言，Semi Design 以用户中心、内容优先、设计人性化为设计理念，具有以下优势：\n                    </p>\n                    <ul>\n                        <li>\n                            <p>Semi Design 以内容优先进行设计。</p>\n                        </li>\n                        <li>\n                            <p>更容易地自定义主题。</p>\n                        </li>\n                        <li>\n                            <p>适用国际化场景。</p>\n                        </li>\n                        <li>\n                            <p>效率场景加入人性化关怀</p>\n                        </li>\n                    </ul>\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Leaf-Only Multi-Select in Semi Design Tree Component\nDESCRIPTION: This example demonstrates how to customize the Tree component to allow multi-selection only for leaf nodes. It uses the renderFullLabel prop to render checkboxes only for leaf nodes and handles expand/collapse for parent nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree, Checkbox } from '@douyinfe/semi-ui';\n\n() => {\n    const renderLabel = ({\n        className,\n        onExpand,\n        data,\n        onCheck,\n        checkStatus,\n        expandIcon,\n    }) => {\n        const { label } = data;\n        const isLeaf = !(data.children && data.children.length);\n        return (\n            <li\n                className={className}\n                role=\"treeitem\"\n                onClick={isLeaf ? onCheck : onExpand}\n            >\n                {isLeaf ? null : expandIcon}\n                {isLeaf ? <div onClick={onCheck} role='checkbox' tabIndex={0} aria-checked={checkStatus.checked}>\n                    <Checkbox\n                        indeterminate={checkStatus.halfChecked}\n                        checked={checkStatus.checked}\n                        style={{ marginRight: 8 }}\n                    />\n                </div> : null}\n                <span>{label}</span>\n            </li>\n        );\n    };\n\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n\n    const treeStyle = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n    return (\n        <Tree\n            treeData={treeData}\n            renderFullLabel={renderLabel}\n            multiple\n            leafOnly\n            style={treeStyle}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Transition Animation in React\nDESCRIPTION: Example of using the Transition component from @douyinfe/semi-animation-react to create a show/hide animation effect on a heading element. The component uses state to toggle visibility and applies opacity and scale transformations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation-react/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Transition } from \"@douyinfe/semi-animation-react\";\nimport { useState } from \"react\";\n\nexport default function App() {\n  const [visible, setVisible] = useState(false);\n  return (\n    <div className=\"App\">\n      <Transition\n        state={visible ? \"enter\" : \"leave\"}\n        from={{ opacity: 0, scale: 0}}\n        enter={{ opacity: 1, scale: 1 }}\n        leave={{ opacity: 0, scale: 0 }}\n      >\n        {({ scale, opacity }: any) => (\n          <h2 style={{transform: `scale(${scale})`, opacity}}>\n            Toggle to see some animation happen!\n          </h2>\n        )}\n      </Transition>\n\n      <button onClick={() => {\n        setVisible((state) => !state)\n      }}>toggle</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: 渲染带事件的日历 - React\nDESCRIPTION: 通过 events 属性传入需要渲染的事件。events 是一个由 event objects 组成的数组，具体形式请参考 events API。此示例展示了如何在不同视图模式下渲染事件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar, DatePicker, RadioGroup, Radio } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            mode: 'week',\n            displayValue: new Date(2019, 6, 23, 8, 32, 0),\n        };\n    }\n\n    onSelect(e) {\n        this.setState({\n            mode: e.target.value,\n        });\n    }\n\n    onChangeDate(e) {\n        this.setState({\n            displayValue: e,\n        });\n    }\n\n    render() {\n        const { mode, displayValue } = this.state;\n        const isMonthView = mode === 'month';\n        const dailyEventStyle = {\n            borderRadius: '3px',\n            boxSizing: 'border-box',\n            border: 'var(--semi-color-primary) 1px solid',\n            padding: '10px',\n            backgroundColor: 'var(--semi-color-primary-light-default)',\n            height: '100%',\n            overflow: 'hidden',\n        };\n        const allDayStyle = {\n            borderRadius: '3px',\n            boxSizing: 'border-box',\n            border: 'var(--semi-color-bg-1) 1px solid',\n            padding: '2px 4px',\n            backgroundColor: 'var(--semi-color-primary-light-active)',\n            height: '100%',\n            overflow: 'hidden',\n        };\n        const dailyStyle = isMonthView ? allDayStyle : dailyEventStyle;\n        const events = [\n            {\n                key: '0',\n                start: new Date(2019, 5, 25, 14, 45, 0),\n                end: new Date(2019, 6, 26, 6, 18, 0),\n                children: <div style={dailyStyle}>6月25日 14:45 ~ 7月26日 6:18</div>,\n            },\n            {\n                key: '1',\n                start: new Date(2019, 6, 18, 10, 0, 0),\n                end: new Date(2019, 6, 30, 8, 0, 0),\n                children: <div style={allDayStyle}>7月18日 10:00 ~ 7月30日 8:00</div>,\n            },\n            {\n                key: '2',\n                start: new Date(2019, 6, 19, 20, 0, 0),\n                end: new Date(2019, 6, 23, 14, 0, 0),\n                children: <div style={allDayStyle}>7月19日 20:00 ~ 7月23日 14:00</div>,\n            },\n            {\n                key: '3',\n                start: new Date(2019, 6, 21, 6, 0, 0),\n                end: new Date(2019, 6, 25, 6, 0, 0),\n                children: <div style={allDayStyle}>7月21日 6:00 ~ 7月25日 6:00</div>,\n            },\n            {\n                key: '4',\n                allDay: true,\n                start: new Date(2019, 6, 22, 8, 0, 0),\n                children: <div style={allDayStyle}>7月22日 全天</div>,\n            },\n            {\n                key: '5',\n                start: new Date(2019, 6, 22, 9, 0, 0),\n                end: new Date(2019, 6, 23, 23, 0, 0),\n                children: <div style={allDayStyle}>7月22日 9:00 ~ 7月23日 23:00</div>,\n            },\n            {\n                key: '6',\n                start: new Date(2019, 6, 23, 8, 32, 0),\n                end: new Date(2019, 6, 23, 8, 42, 0),\n                children: <div style={dailyStyle}>7月23日 8:32</div>,\n            },\n            {\n                key: '7',\n                start: new Date(2019, 6, 23, 14, 30, 0),\n                end: new Date(2019, 6, 23, 20, 0, 0),\n                children: <div style={dailyStyle}>7月23日 14:30-20:00</div>,\n            },\n            {\n                key: '8',\n                start: new Date(2019, 6, 25, 8, 0, 0),\n                end: new Date(2019, 6, 27, 6, 0, 0),\n                children: <div style={allDayStyle}>7月25日 8:00 ~ 7月27日 6:00</div>,\n            },\n            {\n                key: '9',\n                start: new Date(2019, 6, 26, 10, 0, 0),\n                end: new Date(2019, 6, 27, 16, 0, 0),\n                children: <div style={allDayStyle}>7月26日 10:00 ~ 7月27日 16:00</div>,\n            },\n        ];\n        return (\n            <>\n                <RadioGroup onChange={e => this.onSelect(e)} value={mode} type=\"button\">\n                    <Radio value={'day'}>日视图</Radio>\n                    <Radio value={'week'}>周视图</Radio>\n                    <Radio value={'month'}>月视图</Radio>\n                    <Radio value={'range'}>多日视图</Radio>\n                </RadioGroup>\n                <br />\n                <br />\n                <DatePicker value={displayValue} onChange={e => this.onChangeDate(e)} />\n                <br />\n                <br />\n                <Calendar\n                    height={400}\n                    mode={mode}\n                    displayValue={displayValue}\n                    events={events}\n                    minEventHeight={40}\n                    range={mode === 'range' ? [new Date(2019, 6, 23), new Date(2019, 6, 26)] : []}\n                ></Calendar>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Dark Mode with System Preferences in Semi Design\nDESCRIPTION: Uses the 'prefers-color-scheme' media query to automatically switch between light and dark modes based on system preferences.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst mql = window.matchMedia('(prefers-color-scheme: dark)');\n\nfunction matchMode(e) {\n    const body = document.body;\n    if (e.matches) {\n        if (!body.hasAttribute('theme-mode')) {\n            body.setAttribute('theme-mode', 'dark');\n        }\n    } else {\n        if (body.hasAttribute('theme-mode')) {\n            body.removeAttribute('theme-mode');\n        }\n    }\n}\n\nmql.addListener(matchMode);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Option Modification in Semi Design Select\nDESCRIPTION: This example demonstrates how to dynamically update the options in a Select component. It uses a controlled component approach with useState hook to manage and update the available options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let [options, setOptions] = useState([1, 2, 3, 4]);\n    function add() {\n        let length = Math.ceil(Math.random() * 10);\n        let newOptions = Array.from({ length }, (v, i) => i + 1);\n        setOptions(newOptions);\n    }\n    return (\n        <>\n            <Select style={{ width: '180px' }} value={4}>\n                {options.map(option => (\n                    <Select.Option value={option} key={option}>\n                        {option}\n                    </Select.Option>\n                ))}\n            </Select>\n            <br />\n            <br />\n            <Button onClick={add}>ChangeOptions Dynamic</Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stacked Area Charts with VChart in React\nDESCRIPTION: This example shows how to create a stacked area chart using @visactor/react-vchart. It displays country-based data for various product types with a custom tooltip that calculates and displays the total value across all countries.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\n\nconst commonSpec = {\n  type: 'area',\n  stack: true,\n  title: {\n    visible: true,\n    text: 'Stacked area chart',\n    subtext: 'This is a stacked area chart',\n  },\n  xField: 'type',\n  yField: 'value',\n  seriesField: 'country',\n  legends: { visible: true },\n  tooltip: {\n    dimension: {\n      updateContent: data => {\n        let sum = 0;\n        data.forEach(datum => {\n          sum += +datum.value;\n        });\n        data.push({\n          hasShape: 'false',\n          key: 'Total',\n          value: sum\n        });\n        return data;\n      }\n    }\n  }\n};\n\nconst values = [[4229, 4376, 3054, 12814], [3932, 3987, 5067, 13012], \n [5221, 3574, 7004, 11624], [9256, 4376, 9054, 8814],[3308, 4572, 12043, 12998], \n [5432, 3417, 15067, 12321],[13701, 5231, 10119, 10342],[4008, 4572, 12043, 22998], \n [18712, 6134, 10419, 11261]].reduce((acc, arr, index) => {\n  const type = ['Nail polish', 'Eyebrow pencil', 'Rouge', 'Lipstick', 'Eyeshadows', \n 'Eyeliner', 'Foundation', 'Lip gloss', 'Mascara'][index];\n  const result = ['Africa', 'EU', 'China', 'USA'].map((item, innerIndex) => ({\n      country: item,\n      type: type,\n      value: arr[innerIndex],\n    }));\n    return acc.concat(result);\n }, []);\n\nconst data = {\n  fields: {\n    country: {\n      domain: ['Africa', 'EU', 'China', 'USA'].reverse(),\n      lockStatisticsByDomain: true\n    }\n  },\n  values: values,\n}\n\nfunction App() {\n  return (\n    <div style={{ height: 460 }}>\n      <VChart\n          spec={{ ...commonSpec,  data: data }}\n          option={{ mode: \"desktop-browser\"}}\n      />\n    </div>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Using Simple JSON Format for Tree Data in React\nDESCRIPTION: This example demonstrates how to use simple JSON format to provide tree data to the Tree component. It uses the treeDataSimpleJson prop and shows how to handle selection changes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\n() => {\n    const json = {\n        \"Node1\": {\n            \"Child Node1\": '0-0-1',\n            \"Child Node2\": '0-0-2',\n        },\n        \"Node2\": \"0-1\"\n    };\n    const style = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n    return (\n        <Tree\n            treeDataSimpleJson={json}\n            multiple\n            onChange={e => console.log('当前所有选中项: ', e)}\n            onSelect={e => console.log('当前选项: ', e)}\n            style={style}\n        />\n\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Resizable Layout with Basic Resize Events in Semi-Design\nDESCRIPTION: This code demonstrates a nested resizable layout using Semi-Design's ResizeGroup component with vertical and horizontal directions. It includes resize event handlers for tracking resize start, resize in progress, and resize end events, with Toast notifications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [text, setText] = useState('Drag to resize');\n    const opts_1 = {\n        content: 'resize start',\n        duration: 1,\n        stack: true,\n    };\n    const opts = {\n        content: 'resize end',\n        duration: 1,\n        stack: true,\n    };\n    return (\n        <div style={{ width: '1000px', height: '600px' }}>\n            <ResizeGroup direction=\"vertical\">\n                <ResizeItem\n                    style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                    defaultSize={'20%'}\n                    onChange={() => {\n                        setText('resizing');\n                    }}\n                    onResizeStart={() => Toast.info(opts_1)}\n                    onResizeEnd={() => {\n                        Toast.info(opts);\n                        setText('Drag to resize');\n                    }}\n                >\n                    <div style={{ marginLeft: '20%' }}>{'header'}</div>\n                </ResizeItem>\n                <ResizeHandler></ResizeHandler>\n                <ResizeItem\n                    defaultSize={'80%'}\n                    onChange={() => {\n                        setText('resizing');\n                    }}\n                >\n                    <ResizeGroup direction=\"horizontal\">\n                        <ResizeItem\n                            style={{\n                                backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                border: 'var(--semi-color-border) 1px solid',\n                            }}\n                            defaultSize={'25%'}\n                            onChange={() => {\n                                setText('resizing');\n                            }}\n                            onResizeStart={() => Toast.info(opts_1)}\n                            onResizeEnd={() => {\n                                Toast.info(opts);\n                                setText('Drag to resize');\n                            }}\n                        >\n                            <div style={{ marginLeft: '20%' }}>{'tab'}</div>\n                        </ResizeItem>\n                        <ResizeHandler></ResizeHandler>\n                        <ResizeItem\n                            style={{\n                                backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                                border: 'var(--semi-color-border) 1px solid',\n                            }}\n                            defaultSize={'75%'}\n                            onChange={() => {\n                                setText('resizing');\n                            }}\n                        >\n                            <div style={{ marginLeft: '20%' }}>{text}</div>\n                        </ResizeItem>\n                    </ResizeGroup>\n                </ResizeItem>\n            </ResizeGroup>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LocaleProvider with Language Imports in React\nDESCRIPTION: This snippet demonstrates how to import various language locales and use the LocaleProvider component to wrap the application for global localization effect.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport zh_CN from '@douyinfe/semi-ui/lib/es/locale/source/zh_CN';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\nimport en_US from '@douyinfe/semi-ui/lib/es/locale/source/en_US';\nimport ko_KR from '@douyinfe/semi-ui/lib/es/locale/source/ko_KR';\nimport ja_JP from '@douyinfe/semi-ui/lib/es/locale/source/ja_JP';\nimport vi_VN from '@douyinfe/semi-ui/lib/es/locale/source/vi_VN';\nimport ru_RU from '@douyinfe/semi-ui/lib/es/locale/source/ru_RU';\nimport id_ID from '@douyinfe/semi-ui/lib/es/locale/source/id_ID';\nimport ms_MY from '@douyinfe/semi-ui/lib/es/locale/source/ms_MY';\nimport th_TH from '@douyinfe/semi-ui/lib/es/locale/source/th_TH';\nimport tr_TR from '@douyinfe/semi-ui/lib/es/locale/source/tr_TR';\nimport pt_BR from '@douyinfe/semi-ui/lib/es/locale/source/pt_BR';\nimport zh_TW from '@douyinfe/semi-ui/lib/es/locale/source/zh_TW';\nimport sv_SE from '@douyinfe/semi-ui/lib/es/locale/source/sv_SE';\nimport pl_PL from '@douyinfe/semi-ui/lib/es/locale/source/pl_PL';\nimport nl_NL from '@douyinfe/semi-ui/lib/es/locale/source/nl_NL';\nimport ar from '@douyinfe/semi-ui/lib/es/locale/source/ar';\nimport es from '@douyinfe/semi-ui/lib/es/locale/source/es';\nimport it from '@douyinfe/semi-ui/lib/es/locale/source/it';\nimport de from '@douyinfe/semi-ui/lib/es/locale/source/de';\nimport fr from '@douyinfe/semi-ui/lib/es/locale/source/fr';\nimport ro from '@douyinfe/semi-ui/lib/es/locale/source/fr';\n\nimport { LocaleProvider } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <LocaleProvider locale={en_GB}>\n            {/* eslint-disable-next-line react/jsx-no-undef */}\n            <App />\n        </LocaleProvider>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing More Tag with renderMore Function\nDESCRIPTION: Demonstrates how to customize the appearance and behavior of the \"more\" indicator using the renderMore prop. This example uses a Popover to display additional avatars when hovering over the +N indicator.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar, AvatarGroup, Popover } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const renderMore = (restNumber, restAvatars) => {\n        const content = (\n            restAvatars.map((avatar, index) => {\n                return (\n                    <div style={{ paddingBottom: '12px' }} key={index}>\n                        {React.cloneElement(avatar, { size: 'extra-small' })}\n                        <span style={{ marginLeft: 8, fontSize: 14 }}>This is a sentence</span>\n                    </div>\n                );\n            })\n        );\n        return (\n            <Popover content={content} autoAdjustOverflow={false} position={'bottomRight'} style={{ padding: '12px 8px', paddingBottom: 0 }}>\n                <Avatar>\n                    {`+${restNumber}`}\n                </Avatar>\n            </Popover>\n        );\n    };\n\n    return (\n        <AvatarGroup maxCount={3} renderMore={renderMore}>\n            <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n            <Avatar alt='Caroline Xiao'>CX</Avatar>\n            <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n            <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n            <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n        </AvatarGroup>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Dark/Light Mode with Semi Design Components in React\nDESCRIPTION: This code snippet demonstrates how to create a layout with various Semi Design components and implement a switchable local dark/light mode. It uses React hooks to manage the mode state and applies the appropriate CSS class to the content area.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Layout, Nav, Button, Breadcrumb, Avatar, Steps, Pagination, Row, Badge, Tag, Rating, Tooltip, Timeline, Popover } from '@douyinfe/semi-ui';\nimport { IconSemiLogo, IconCamera, IconBell, IconHelpCircle, IconBytedanceLogo, IconHome, IconHistogram, IconLive, IconSetting, IconEdit, IconList } from '@douyinfe/semi-icons';\n\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const [mode, setMode] = useState('semi-always-dark');\n\n    const switchMode = () => {\n        const newMode = mode === 'semi-always-dark' ? 'semi-always-light' : 'semi-always-dark';\n        setMode(newMode);\n    };\n\n    const rowStyle = { margin: '16px 10px' };\n    const badgeStyle = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n        display: 'inline-block',\n    };\n    const tagStyle = { marginRight: 8, marginBottom: 8 };\n\n    return (\n        <>\n            <Button\n                onClick={switchMode}\n                style={{ marginBottom: 4 }}\n            >\n                Switch Content Mode\n            </Button>\n            <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n                <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <div>\n                        <Nav mode=\"horizontal\" defaultSelectedKeys={['Home']}>\n                            <Nav.Header>\n                                <IconSemiLogo style={{ width: '96px', height: '36px', fontSize: 36 }} />\n                            </Nav.Header>\n                            <span\n                                style={{\n                                    color: 'var(--semi-color-text-2)',\n                                }}\n                            >\n                                <span\n                                    style={{\n                                        marginRight: '24px',\n                                        color: 'var(--semi-color-text-0)',\n                                        fontWeight: '600',\n                                    }}\n                                >\n                                    模版推荐\n                                </span>\n                                <span style={{ marginRight: '24px' }}>所有模版</span>\n                                <span>我的模版</span>\n                            </span>\n                            <Nav.Footer>\n                                <Button\n                                    theme=\"borderless\"\n                                    icon={<IconBell size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Button\n                                    theme=\"borderless\"\n                                    icon={<IconHelpCircle size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Avatar color=\"orange\" size=\"small\">\n                                    YJ\n                                </Avatar>\n                            </Nav.Footer>\n                        </Nav>\n                    </div>\n                </Header>\n                <Layout>\n                    <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                        <Nav\n                            style={{ maxWidth: 220, height: '100%' }}\n                            defaultSelectedKeys={['Home']}\n                            items={[\n                                { itemKey: 'Home', text: '首页', icon: <IconHome size=\"large\" /> },\n                                { itemKey: 'Histogram', text: '基础数据', icon: <IconHistogram size=\"large\" /> },\n                                { itemKey: 'Live', text: '测试功能', icon: <IconLive size=\"large\" /> },\n                                { itemKey: 'Setting', text: '设置', icon: <IconSetting size=\"large\" /> },\n                            ]}\n                            footer={{\n                                collapseButton: true,\n                            }}\n                        />\n                    </Sider>\n                    <Content\n                        className={mode}\n                        style={{\n                            padding: '24px',\n                            backgroundColor: 'var(--semi-color-bg-1)',\n                        }}\n                    >\n                        <Breadcrumb\n                            style={{\n                                marginBottom: '24px',\n                            }}\n                            routes={['首页', '当这个页面标题很长时需要省略', '上一页', '详情页']}\n                        />\n                        <div\n                            style={{\n                                borderRadius: '10px',\n                                border: '1px solid var(--semi-color-border)',\n                                height: '700px',\n                                padding: '32px'\n                            }}\n                        >\n                            <Row style={rowStyle}>\n                                <div id='popup-layer'></div>\n                                <Nav\n                                    mode={'horizontal'}\n                                    getPopupContainer={() => document.querySelector('#popup-layer')}\n                                    items={[\n                                        { itemKey: 'user', text: 'Option1', icon: <IconEdit /> },\n                                        { itemKey: 'union', text: 'Option2', icon: <IconCamera /> },\n                                        {\n                                            itemKey: 'approve-management',\n                                            text: 'Group3',\n                                            icon: <IconList />,\n                                            items: [\n                                                '3-1',\n                                                '3-2'\n                                            ]\n                                        },\n                                    ]}\n                                />\n                                <br /><br />\n                                <Pagination total={80} showSizeChanger></Pagination>\n                                <br />\n                                <Steps current={1}>\n                                    <Steps.Step title=\"Finished\" description=\"This is a description.\" />\n                                    <Steps.Step title=\"In Progress\" description=\"This is a description.\" />\n                                    <Steps.Step title=\"Waiting\" description=\"This is a description.\" />\n                                </Steps>\n                                <br />\n                                <Steps current={1} status=\"error\">\n                                    <Steps.Step title=\"Finished\" description=\"This is a description\" />\n                                    <Steps.Step title=\"In Process\" description=\"This is a description\" />\n                                    <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n                                </Steps>\n                            </Row>\n                            <Row style={rowStyle}>\n                                <div style={{ display: 'flex' }}>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge count={5} theme='solid' >\n                                            <Avatar color='blue' shape='square' style={badgeStyle}>XZ</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge count={5} theme='light' >\n                                            <Avatar color='cyan' shape='square' style={badgeStyle}>YB</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge count={5} theme='inverted'>\n                                            <Avatar color='indigo' shape='square' style={badgeStyle}>LX</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge dot theme='solid' >\n                                            <Avatar color='light-blue' shape='square' style={badgeStyle}>YZ</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge dot theme='light' >\n                                            <Avatar color='teal' shape='square' style={badgeStyle}>HW</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: '8px', borderRadius: '4px', backgroundColor: 'var(--semi-color-fill-0)' }}>\n                                        <Badge dot theme='inverted'>\n                                            <Avatar color='green' shape='square' style={badgeStyle}>XM</Avatar>\n                                        </Badge>\n                                    </div>\n                                </div>\n                            </Row>\n                        </div>\n                    </Content>\n                </Layout>\n            </Layout>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 快捷方式日期时间选择 DatePicker - React\nDESCRIPTION: 通过 presets 属性设置快捷日期选择选项，并使用 presetPosition 控制快捷选项的位置。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => {\n    const presets = [\n        {\n            text: 'Today',\n            start: new Date(),\n            end: new Date(),\n        },\n        {\n            text: 'Tomorrow',\n            start: new Date(new Date().valueOf() + 1000 * 3600 * 24),\n            end: new Date(new Date().valueOf() + 1000 * 3600 * 24),\n        },\n    ];\n    return <DatePicker type=\"dateTime\" presets={presets} presetPosition=\"left\"/>;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage in React\nDESCRIPTION: 展示Switch组件的基本用法，包括默认状态和通过defaultChecked设置初始状态。组件使用onChange事件监听状态变化，并通过aria-label提高可访问性。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch onChange={(v, e) => console.log(v)} aria-label=\"a switch for demo\"></Switch>\n        <br />\n        <Switch defaultChecked={true} onChange={(v, e) => console.log(v)} aria-label=\"a switch for semi demo\"></Switch>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Avatar Upload with Custom Hover Mask\nDESCRIPTION: Demonstrates how to implement avatar upload functionality with a custom hover mask. The component updates the avatar image on successful upload and shows a camera icon on hover.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Avatar, Toast } from '@douyinfe/semi-ui';\nimport { IconCamera } from '@douyinfe/semi-icons';\n\n() => {\n    const [url, setUrl] = useState('https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png');\n    const onSuccess = (response, file) => {\n        Toast.success('Avatar updated successfully');\n        // const url = response.url;\n        setUrl('https://sf6-cdn-tos.douyinstatic.com/obj/ttfe/ies/semi/ttmoment.jpeg');\n    };\n\n    const style = {\n        backgroundColor: 'var(--semi-color-overlay-bg)',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: 'var(--semi-color-white)',\n    };\n    \n    const hoverMask = (<div style={style}>\n        <IconCamera />\n    </div>);\n\n    const api = '//semi.design/api/upload';\n    let imageOnly = 'image/*';\n\n    return (\n        <Upload\n            className=\"avatar-upload\"\n            action={api}\n            onSuccess={onSuccess}\n            accept={imageOnly}\n            showUploadList={false}\n            onError={() => Toast.error('upload failed')}\n        >\n            <Avatar src={url} style={{ margin: 4 }} hoverMask={hoverMask} />\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Draggable Select with TagInput Integration\nDESCRIPTION: Advanced example showing how to implement a draggable Select component by combining Select with TagInput's drag-and-sort functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Select, TagInput } from '@douyinfe/semi-ui';\n\n() => {\n    const [valList, setValList] = useState(['douyin', 'ulikecam']);\n    const [inputVal, setInputVal] = useState('');\n    const list = [\n        { value: 'douyin', label: 'Douyin' },\n        { value: 'ulikecam', label: 'UlikeCam' },\n        { value: 'jianying', label: 'Capcut' },\n        { value: 'doubao', label: 'Cici' },\n    ];\n     \n    const handleSort = (currentLabels) => {\n        const newValue = currentLabels.map(item => list.find((i) => i.label === item).value)\n        setValList(newValue);\n    };\n\n    const triggerRender = ({ value, onSearch, onClear }) => {\n        return (\n            <div onKeyDown={e=>e.stopPropagation()}>\n                <TagInput\n                    draggable\n                    allowDuplicates={false}\n                    value={value.map(item => item.label)}\n                    inputValue={inputVal}\n                    onInputChange={(word) => {\n                        onSearch(word);\n                        setInputVal(word);\n                    }}\n                    onChange={handleSort}\n                    onClear={() => onClear()}\n                    showClear\n                />\n            </div>\n        );\n    };\n```\n\n----------------------------------------\n\nTITLE: UserGuide with Customizable Spotlight Padding\nDESCRIPTION: Shows how to adjust the highlight area size using spotlightPadding property, with both global and step-specific padding configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button onClick={showDialog}>Start Guide</Button>\n            <br />\n            <br />\n            <Space>\n                <Switch id={'padding-demo-1'} defaultChecked={true}></Switch>\n                <Tag id={'padding-demo-2'}> Default Tag </Tag>\n                <Button id={'padding-demo-3'}>Confirm</Button>\n            </Space>\n            <UserGuide\n                mode=\"popup\"\n                mask={true}\n                visible={visible}\n                spotlightPadding={10}\n                steps={[\n                    {\n                        target: document.querySelector('#padding-demo-1'),\n                        title: \"Beginner's Guide\",\n                        description: 'Hello ByteDancer!',\n                    },\n                    {\n                        target: document.querySelector('#padding-demo-2'),\n                        title: 'New Padding',\n                        description: 'This is 10px padding',\n                    },\n                    {\n                        target: document.querySelector('#padding-demo-3'),\n                        title: 'Change Padding',\n                        spotlightPadding: 15,\n                        description: 'We change the Padding to 15px',\n                    },\n                ]}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Expansion Behavior in Cascader Component\nDESCRIPTION: Shows how to use the showNext prop to configure when the Cascader's dropdown submenu expands. It can be set to 'click' (default) or 'hover', allowing for different user interaction patterns.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            style={{ width: 400 }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n            showNext=\"hover\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in React\nDESCRIPTION: Demonstrates the basic usage of a Checkbox component with an onChange event handler.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Checkbox aria-label=\"Checkbox demo\" onChange={e => console.log(e)}>\n        Semi Design\n    </Checkbox>\n);\n```\n\n----------------------------------------\n\nTITLE: ARIA Accessibility Example\nDESCRIPTION: Example of implementing ARIA accessibility attributes for Timeline component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n<Timeline aria-label=\"Accident timeline\">\n    <Timeline.Item time=\"2015-09-01\">Accident started</Timeline.Item>\n    <Timeline.Item time=\"2015-09-01\">Process</Timeline.Item>\n</Timeline>\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeGroup with Multiple ResizeItems\nDESCRIPTION: Example showing the ResizeGroup component with multiple ResizeItems that can be resized horizontally. Demonstrates usage of min/max constraints and resize event handlers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup, Toast } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [text, setText] = useState('Drag to resize')\n  return (\n    <div style={{ width: '1000px', height: '100px' }}>\n      <ResizeGroup direction='horizontal'>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n          defaultSize={'400px'}\n          min={'10%'}\n          onChange={() => { setText('resizing') }}\n          onResizeEnd={() => { setText('Drag to resize') }}\n        >\n          <div style={{ marginLeft: '20%' }}>\n            {text + \" min:10%\"}\n          </div>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n          defaultSize={'20%'}\n          min={'10%'}\n          max={'30%'}\n          onChange={() => { setText('resizing') }}\n        >\n          <div style={{ marginLeft: '20%' }}>\n            {text + \" min:10% max:30%\"}\n          </div>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n          defaultSize={'0.5'}\n          onChange={() => { setText('resizing') }}\n        >\n          <div style={{ marginLeft: '20%' }}>\n            {text}\n          </div>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n          defaultSize={1}\n          onChange={() => { setText('resizing') }}\n        >\n          <div style={{ marginLeft: '20%' }}>\n            {text}\n          </div>\n        </ResizeItem>\n      </ResizeGroup>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Usage\nDESCRIPTION: Demonstrates basic usage of Skeleton component with different placeholder types including Avatar, Image, Title, Paragraph, and Button. Includes a toggle switch to control loading state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Switch, Button, Avatar } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = { loading: true };\n    }\n\n    showContent() {\n        const { loading } = this.state;\n        this.setState({\n            loading: !loading,\n        });\n    }\n\n    render() {\n        const { loading } = this.state;\n        return (\n            <>\n                <span style={{ display: 'flex', alignItems: 'center' }}>\n                    <Switch onChange={() => this.showContent()} />\n                    <span style={{ marginLeft: '10px' }}>Show Loading Content</span>\n                </span>\n                <br />\n                <Skeleton placeholder={<Skeleton.Avatar />} loading={loading}>\n                    <Avatar color=\"blue\" style={{ marginBottom: 10 }}>\n                        U\n                    </Avatar>\n                </Skeleton>\n                <br />\n                <Skeleton style={{ width: 200, height: 150 }} placeholder={<Skeleton.Image />} loading={loading}>\n                    <img\n                        src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/avatarDemo.jpeg\"\n                        height=\"150\"\n                        alt=\"avatar\"\n                    />\n                </Skeleton>\n                <br />\n                <Skeleton\n                    style={{ width: 80 }}\n                    placeholder={<Skeleton.Title style={{ marginBottom: 10 }} />}\n                    loading={loading}\n                >\n                    <h4 style={{ marginBottom: 0 }}>Semi UI</h4>\n                </Skeleton>\n                <Skeleton style={{ width: 240 }} placeholder={<Skeleton.Paragraph rows={2} />} loading={loading}>\n                    <p style={{ width: 240 }}>Carefully polish the user experience of each component.</p>\n                </Skeleton>\n                <br />\n                <Skeleton placeholder={<Skeleton.Button />} loading={loading}>\n                    <Button>Button</Button>\n                </Skeleton>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining renderFileOperation and ImagePreview in React Upload\nDESCRIPTION: Demonstrates how to combine 'renderFileOperation' with 'ImagePreview' to create a custom file operation area with an expand button for image preview. It uses state to control the visibility of the image preview.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useStae } from 'react';\nimport { Upload, Button, ImagePreview } from '@douyinfe/semi-ui';\nimport { IconUpload, IconDownload, IconEyeOpened, IconDelete, IconExpand } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const [visible, setVisible] = useState(false);\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        }\n    ];\n    const renderFileOperation = (fileItem) => (\n        <div style={{ display: 'flex', columnGap: 8, padding: '0 8px' }}>\n            <Button\n                icon={<IconExpand></IconExpand>}\n                type=\"tertiary\"\n                theme=\"borderless\"\n                size=\"small\"\n                onClick={()=> setVisible(true)}\n            >\n            </Button>\n            <Button icon={<IconDownload></IconDownload>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n            <Button onClick={e=>fileItem.onRemove()} icon={<IconDelete></IconDelete>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n            <ImagePreview\n                src={fileItem.url}\n                visible={visible}\n                onVisibleChange={setVisible}\n            />\n        </div>\n    );\n    return <Upload action={action} defaultFileList={defaultFileList} itemStyle={{ width: 300 }} renderFileOperation={renderFileOperation}>\n        <Button icon={<IconUpload />} theme=\"light\">点击上传</Button>\n    </Upload>;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating CheckboxGroup with Grid Layout in React\nDESCRIPTION: Example of combining CheckboxGroup with Row and Col components to create flexible grid-based layouts for checkboxes, enabling responsive design patterns.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup, Checkbox, Row, Col } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup style={{ width: '100%' }} aria-label=\"Checkbox demo\">\n        <Row>\n            <Col span={8}>\n                <Checkbox value=\"A\">A</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"B\">B</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"C\">C</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"D\">D</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"E\">E</Checkbox>\n            </Col>\n        </Row>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Chat Status Implementation Example\nDESCRIPTION: Example showing different chat message states including success, loading, and error states. Demonstrates how to handle various message statuses and their visual representations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'assistant',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Success response\",   \n    },\n    {\n        id: 'loading',\n        role: 'assistant',\n        status: 'loading'\n    },\n    {\n        role: 'assistant',\n        id: 'error',\n        content: 'Error response',\n        status: 'error'\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Avatar Upload with Custom Hover Mask in React\nDESCRIPTION: Implements an avatar upload functionality with a custom hover mask using the Upload and Avatar components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Avatar, Toast } from '@douyinfe/semi-ui';\nimport { IconCamera } from '@douyinfe/semi-icons';\n\n() => {\n    const [url, setUrl] = useState('https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png');\n    const onSuccess = (response, file) => {\n        Toast.success('头像更新成功');\n        setUrl('https://sf6-cdn-tos.douyinstatic.com/obj/ttfe/ies/semi/ttmoment.jpeg');\n    };\n\n    const style = {\n        backgroundColor: 'var(--semi-color-overlay-bg)',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: 'var(--semi-color-white)',\n    };\n    \n    const hoverMask = (<div style={style}>\n        <IconCamera />\n    </div>);\n\n    const api = 'https://api.semi.design/upload';\n    let imageOnly = 'image/*';\n\n    return (\n        <Upload\n            className=\"avatar-upload\"\n            action={api}\n            onSuccess={onSuccess}\n            accept={imageOnly}\n            showUploadList={false}\n            onError={() => Toast.error('上传失败')}\n        >\n            <Avatar src={url} style={{ margin: 4 }} hoverMask={hoverMask} />\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom File Operation UI\nDESCRIPTION: Demonstrates custom file operation area implementation with renderFileOperation prop, including preview, download, and delete actions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload, IconDownload, IconEyeOpened, IconDelete } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        }\n    ];\n    const renderFileOperation = (fileItem) => (\n        <div style={{ display: 'flex', columnGap: 8, padding: '0 8px' }}>\n            <Button icon={<IconEyeOpened></IconEyeOpened>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n            <Button icon={<IconDownload></IconDownload>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n            <Button onClick={e=>fileItem.onRemove()} icon={<IconDelete></IconDelete>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n        </div>\n    );\n    return (\n        <Upload action={action} defaultFileList={defaultFileList} itemStyle={{ width: 300 }} renderFileOperation={renderFileOperation}>\n            <Button icon={<IconUpload />} theme=\"light\">Upload</Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Behavior for Truncated Text in React\nDESCRIPTION: This snippet shows how to customize the tooltip behavior for truncated text using the Typography component. It demonstrates different ways to handle long text in tooltips, including using custom CSS classes and inline styles.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    return (\n        <div>\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: '架构|Semi-inf|graph.cheet.relation' }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                有问题的超长文本发生截断时可按需进行自定义配置\n            </Text>\n            <br />\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: '架构|Semi-inf|graph.cheet.relation', className: 'components-typography-demo' }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                覆盖类名超长文本发生截断时可使用类名覆盖进行自定义配置\n            </Text>\n            <br />\n            <Text \n                ellipsis={{\n                    showTooltip: {\n                        opts: { content: '架构|Semi-inf|graph.cheet.relation', style: { wordBreak: 'break-all' } }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                覆盖style超长文本发生截断时可使用style进行自定义配置\n            </Text>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Clearable Rating Component in React\nDESCRIPTION: Shows how to create Rating components that can be cleared or not cleared on click.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Rating } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <span>Clear when clicking</span>\n        <br />\n        <Rating allowClear={true} defaultValue={3} />\n        <br />\n        <br />\n        <span>Unable to clear when clicking</span>\n        <br />\n        <Rating allowClear={false} defaultValue={3} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Percentage Stacked Bar Chart Implementation in React with VChart\nDESCRIPTION: Implements a percentage-based stacked bar chart with formatted axis labels showing population distribution. Features percentage calculations and customized axis formatting.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'bar',\n  percent: true,\n  stack: true,\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { State: 'WY', Age: 'Under 5 Years', Population: 25635 },\n        { State: 'WY', Age: '5 to 13 Years', Population: 1890 },\n        { State: 'WY', Age: '14 to 17 Years', Population: 9314 },\n        { State: 'DC', Age: 'Under 5 Years', Population: 30352 },\n        { State: 'DC', Age: '5 to 13 Years', Population: 20439 },\n        { State: 'DC', Age: '14 to 17 Years', Population: 10225 },\n        { State: 'VT', Age: 'Under 5 Years', Population: 38253 },\n        { State: 'VT', Age: '5 to 13 Years', Population: 42538 },\n        { State: 'VT', Age: '14 to 17 Years', Population: 15757 },\n        { State: 'ND', Age: 'Under 5 Years', Population: 51896 },\n        { State: 'ND', Age: '5 to 13 Years', Population: 67358 },\n        { State: 'ND', Age: '14 to 17 Years', Population: 18794 },\n        { State: 'AK', Age: 'Under 5 Years', Population: 72083 },\n        { State: 'AK', Age: '5 to 13 Years', Population: 85640},\n        { State: 'AK', Age: '14 to 17 Years', Population: 22153 }\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag-and-Drop Upload in React\nDESCRIPTION: This code snippet shows how to create a drag-and-drop file upload component using the Semi Design UI library. It includes customization options for the drag area's content and appearance.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\n\n() => (\n    <Upload\n        action=\"https://api.semi.design/upload\"\n        draggable={true}\n        dragMainText={'点击上传文件或拖拽文件到这里'}\n        dragSubText=\"支持任意类型文件\"\n    ></Upload>\n);\n```\n\n----------------------------------------\n\nTITLE: Tabs with More Dropdown Menu in React\nDESCRIPTION: Demonstrates how to use the 'more' prop to collapse excess tabs into a dropdown menu, specifying the number of tabs to collapse.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <Tabs more={4} style={{ width: '60%', margin: '20px' }} type=\"card\">\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                    Content of card tab {i}\n                </TabPane>\n            ))}\n        </Tabs>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Line Charts with VChart in React\nDESCRIPTION: This code snippet demonstrates how to create both single and multi-series line charts using @visactor/react-vchart. It includes interactive radio buttons for switching between chart types and displays medal data across years.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'line',\n  xField: 'year',\n  yField: 'count',\n  seriesField: 'medalType',\n  legends: { visible: true }\n};\n\nconst data = [[40, 32, 34, 36, 45, 33, 34, 83, 36, 37, 44, 37, 35, 36, 46],\n  [19, 25, 21, 26, 28, 31, 35, 60, 31, 34, 32, 24, 40, 38, 29],\n  [17, 17, 16, 28, 34, 30, 25, 30, 27, 37, 25, 33, 26, 36, 29]].map((arr, outer) => {\n  const type = ['Gold', 'Silver', 'Bronze'][outer];\n  return arr.map((item, inner) => ({\n    year: `${inner * 4 + 1952}`,\n    count: item,\n    medalType: type,\n  }));\n});\n\nfunction App() {\n  const [type, setType] = useState('multiple');\n  const onChange = useCallback((e) => setType(e.target.value), []);\n  const spec = useMemo(() => {\n    return {\n      ...commonSpec,\n      title: {\n        visible: true,\n        text: `${type === \"multiple\" ? \"Multi-series\" : \"Basic\"} line chart`,\n        subtext: `This is a ${type === \"multiple\" ? \"multi-series\" : \"basic\"} line chart`,\n      },\n      data: { values: type === 'multiple' ? data[0].concat(data[1]).concat(data[2]) : data[0] }\n    };\n  }, [type])\n\n  return (\n    <>\n      <RadioGroup onChange={onChange} value={type} >\n        <Radio value={'multiple'}>multiple</Radio>\n        <Radio value={'single'}>single</Radio>\n      </RadioGroup>\n      <div style={{ height: 440 }}>\n        <VChart\n            key={type}\n            spec={spec}\n            option={{ mode: \"desktop-browser\"}}\n        />\n      </div>\n    </>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Button States with Semi Design\nDESCRIPTION: Shows how to implement loading states in buttons with state management. Includes examples of loading states with different button types and icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button } from '@douyinfe/semi-ui';\nimport { IconDelete } from '@douyinfe/semi-icons';\n\nfunction ButtonDemo() {\n    const [saveLoading, setSaveLoading] = useState(false);\n    const [delLoading, setDelLoading] = useState(true);\n    const [repLoading, setRepLoading] = useState(true);\n\n    const reset = status => {\n        status = !!status;\n        setSaveLoading(status);\n        setDelLoading(status);\n        setRepLoading(status);\n    };\n\n    return (\n        <div>\n            <div>\n                <div className=\"btn-margin-right\" style={{ display: 'inline-flex', alignItems: 'center', paddingBottom: 14 }}>\n                    <Button onClick={() => reset(false)}>Stop loading</Button>\n                    <Button onClick={() => reset(true)}>Start loading</Button>\n                </div>\n            </div>\n            <hr/>\n            <Button loading={saveLoading} onClick={() => setSaveLoading(true)} style={{ marginRight: 14 }}>Save</Button>\n            <Button loading={delLoading} icon={<IconDelete />} type=\"danger\" onClick={() => setDelLoading(true)} style={{ marginRight: 14 }}>Delete</Button>\n            <div style={{ width: 200, display: 'inline-block' }}>\n                <Button loading={repLoading} type=\"warning\" block theme=\"solid\" onClick={() => setRepLoading(true)}>Revoke</Button>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart Implementation with VChart\nDESCRIPTION: Implements a grouped bar chart showing democracy vs autocracy data over time. Features direction switching and grouped data visualization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst commonSpec = {\n  type: 'bar',\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { type: 'Autocracies', year: '1930', value: 129 },\n        { type: 'Autocracies', year: '1940', value: 133 },\n        { type: 'Democracies', year: '1930', value: 22 },\n        { type: 'Democracies', year: '1940', value: 13 }\n      ]\n    }\n  ],\n  seriesField: 'type',\n  title: {\n    visible: true,\n    text: 'Grouped bar chart',\n    subtext: 'This is a grouped bar chart',\n  },\n  legends: {\n    visible: true,\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Component in React\nDESCRIPTION: Shows how to use a Checkbox as a controlled component, with state management and toggle functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            checked: true,\n            disabled: false,\n        };\n        this.toggleChecked = this.toggleChecked.bind(this);\n        this.toggleDisable = this.toggleDisable.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    toggleChecked () {\n        this.setState({ checked: !this.state.checked });\n    };\n\n    toggleDisable () {\n        this.setState({ disabled: !this.state.disabled });\n    };\n\n    onChange (e) {\n        console.log('checked = ', e.target.checked);\n        this.setState({\n            checked: e.target.checked,\n        });\n    };\n\n    render() {\n        const label = `${this.state.checked ? 'Checked' : 'Unchecked'} ${\n            this.state.disabled ? 'Disabled' : 'Enabled'\n        }`;\n        return (\n            <div>\n                <p style={{ marginBottom: '20px' }}>\n                    <Checkbox\n                        checked={this.state.checked}\n                        disabled={this.state.disabled}\n                        onChange={this.onChange}\n                        aria-label=\"Checkbox demo\"\n                    >\n                        {label}\n                    </Checkbox>\n                </p>\n                <p>\n                    <Button type=\"primary\" size=\"small\" onClick={this.toggleChecked}>\n                        {!this.state.checked ? 'Check' : 'Uncheck'}\n                    </Button>\n                    <Button\n                        style={{ marginLeft: '10px' }}\n                        type=\"primary\"\n                        size=\"small\"\n                        onClick={this.toggleDisable}\n                    >\n                        {!this.state.disabled ? 'Disable' : 'Enable'}\n                    </Button>\n                </p>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Fully Customized Modal with Semi Design\nDESCRIPTION: This example shows how to create a completely customized Modal by using the header and footer properties. The Modal displays a list of Semi Design features with custom icons and buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, List } from '@douyinfe/semi-ui';\nimport { IconVigoLogo, IconSemiLogo } from '@douyinfe/semi-icons';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true,\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false,\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false,\n        });\n    }\n    render() {\n        const data = [\n            {\n                icon: <IconSemiLogo style={{ fontSize: 48 }} />,\n                title: 'Boost new feature adoption with Integration',\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team',\n            },\n            {\n                icon: <IconVigoLogo style={{ fontSize: 48 }} />,\n                title: 'Introducing Dark Mode',\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team',\n            },\n            {\n                icon: <IconSemiLogo style={{ fontSize: 48 }} />,\n                title: 'New List Component',\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team',\n            },\n        ];\n        const btnStyle = {\n            width: 240,\n            margin: '4px 50px',\n        };\n        const footer = (\n            <div style={{ textAlign: 'center' }}>\n                <Button type=\"primary\" theme=\"solid\" onClick={this.handleOk} style={btnStyle}>\n                    Continue\n                </Button>\n                <Button type=\"primary\" theme=\"borderless\" onClick={this.handleCancel} style={btnStyle}>\n                    Learn more features\n                </Button>\n            </div>\n        );\n        return (\n            <>\n                <Button onClick={this.showDialog}>自定义对话框</Button>\n                <Modal\n                    header={null}\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    footer={footer}\n                >\n                    <h3 style={{ textAlign: 'center', fontSize: 24, margin: 40 }}>Semi Design New Features</h3>\n                    <List\n                        dataSource={data}\n                        split={false}\n                        renderItem={item => (\n                            <List.Item\n                                header={item.icon}\n                                main={\n                                    <div>\n                                        <h6 style={{ margin: 0, fontSize: 16 }}>{item.title}</h6>\n                                        <p style={{ marginTop: 4, color: 'var(--semi-color-text-1)' }}>\n                                            {item.content}\n                                        </p>\n                                    </div>\n                                }\n                            />\n                        )}\n                    />\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PinCode with Manual Focus Control\nDESCRIPTION: Demonstrates how to manually control focus and blur states of PinCode inputs using ref methods.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [value, setValue] = useState('69af41');\n    const ref = useRef();\n    return (\n        <>\n            <Button onClick={() => ref.current.focus(2)}>Focus Third Input</Button>\n            <br />\n            <br />\n            <PinCode\n                format={'mixed'}\n                ref={ref}\n                onComplete={value => console.log('pincode: ', value)}\n                value={value}\n                onChange={v => {\n                    console.log(v);\n                    setValue(v);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Tabs with Line/Card/Button Types in React\nDESCRIPTION: Demonstrates vertical tab implementation with radio button type selection. Includes icons and content rendering for documentation, quick start, and help sections.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport { IconFile, IconGlobe, IconHelpCircle } from '@douyinfe/semi-icons';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            type: 'line',\n        };\n    }\n\n    onSelect(e) {\n        this.setState({\n            type: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <RadioGroup\n                    onChange={e => this.onSelect(e)}\n                    value={this.state.type}\n                    type=\"button\"\n                    style={{\n                        display: 'flex',\n                        width: 200,\n                        justifyContent: 'center',\n                    }}\n                >\n                    <Radio value={'line'}>Line</Radio>\n                    <Radio value={'card'}>Card</Radio>\n                    <Radio value={'button'}>Button</Radio>\n                </RadioGroup>\n                <br />\n                <br />\n                <Tabs tabPosition=\"left\" type={this.state.type}>\n                    <TabPane\n                        tab={\n                            <span>\n                                <IconFile />\n                                文档\n                            </span>\n                        }\n                        itemKey=\"1\"\n                    >\n                        <div style={{ padding: '0 24px' }}>\n                            <h3>文档</h3>\n                            <p style={{ lineHeight: 1.8 }}>\n                                Semi Design 是由抖音前端团队与 UED\n                                团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的\n                                Web 应用。\n                            </p>\n                            <p style={{ lineHeight: 1.8 }}>\n                                区别于其他的设计系统而言，Semi Design\n                                以用户中心、内容优先、设计人性化为设计理念，具有以下优势：\n                            </p>\n                        </div>\n                    </TabPane>\n                    <TabPane\n                        tab={\n                            <span>\n                                <IconGlobe />\n                                快速起步\n                            </span>\n                        }\n                        itemKey=\"2\"\n                    >\n                        <div style={{ padding: '0 24px' }}>\n                            <h3>快速起步</h3>\n                            <pre\n                                style={{\n                                    margin: '24px 0',\n                                    padding: '20px',\n                                    border: 'none',\n                                    whiteSpace: 'normal',\n                                    borderRadius: '6px',\n                                    color: 'var(--semi-color-text-1)',\n                                    backgroundColor: 'var(--semi-color-fill-0)',\n                                }}\n                            >\n                                <code>yarn add @douyinfe/semi-ui</code>\n                            </pre>\n                        </div>\n                    </TabPane>\n                    <TabPane\n                        tab={\n                            <span>\n                                <IconHelpCircle />\n                                帮助\n                            </span>\n                        }\n                        itemKey=\"3\"\n                    >\n                        <div style={{ padding: '0 24px' }}>\n                            <h3>帮助</h3>\n                            <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\n                                Q：有新组件需求、或者现有组件feature不能满足业务需求？\n                            </p>\n                            <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\n                                右上角问题反馈，提交issue，label选择Feature Request / New Component Request\n                                我们会高优处理这些需求。\n                            </p>\n                            <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\n                                Q：对组件的使用有疑惑？\n                            </p>\n                            <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\n                                欢迎进我们的客服lark群进行咨询提问。\n                            </p>\n                        </div>\n                    </TabPane>\n                </Tabs>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Chart with VChart in React\nDESCRIPTION: Creates a configurable line chart component with single/multiple series options. Uses VChart with React to visualize medal count data over years, allowing toggle between single and multiple series views.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'line',\n  xField: 'year',\n  yField: 'count',\n  seriesField: 'medalType',\n  legends: { visible: true }\n};\n\nconst data = [[40, 32, 34, 36, 45, 33, 34, 83, 36, 37, 44, 37, 35, 36, 46],\n  [19, 25, 21, 26, 28, 31, 35, 60, 31, 34, 32, 24, 40, 38, 29],\n  [17, 17, 16, 28, 34, 30, 25, 30, 27, 37, 25, 33, 26, 36, 29]].map((arr, outer) => {\n  const type = ['Gold', 'Silver', 'Bronze'][outer];\n  return arr.map((item, inner) => ({\n    year: `${inner * 4 + 1952}`,\n    count: item,\n    medalType: type,\n  }));\n});\n\nfunction App() {\n  const [type, setType] = useState('multiple');\n  const onChange = useCallback((e) => setType(e.target.value), []);\n  const spec = useMemo(() => {\n    return {\n      ...commonSpec,\n      title: {\n        visible: true,\n        text: `${type === \"multiple\" ? \"Multi-series\" : \"Basic\"} line chart`,\n        subtext: `This is a ${type === \"multiple\" ? \"multi-series\" : \"basic\"} line chart`,\n      },\n      data: { values: type === 'multiple' ? data[0].concat(data[1]).concat(data[2]) : data[0] }\n    };\n  }, [type])\n\n  return (\n    <>\n      <RadioGroup onChange={onChange} value={type} >\n        <Radio value={'multiple'}>multiple</Radio>\n        <Radio value={'single'}>single</Radio>\n      </RadioGroup>\n      <div style={{ height: 440 }}>\n        <VChart\n            key={type}\n            spec={spec}\n            option={{ mode: \"desktop-browser\"}}\n        />\n      </div>\n    </>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Implementation\nDESCRIPTION: Demonstrates the basic usage of Timeline component with multiple items showing different timestamps\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\n\n() => (\n    <Timeline>\n        <Timeline.Item time=\"2019-07-14 10:35\">第一个节点内容</Timeline.Item>\n        <Timeline.Item time=\"2019-06-13 16:17\">第二个节点内容</Timeline.Item>\n        <Timeline.Item time=\"2019-05-14 18:34\">第三个节点内容</Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Hint Rendering in Semi Design Chat Component\nDESCRIPTION: This example demonstrates how to customize the appearance of hint boxes using the renderHintBox prop. The component renders hints with custom styling and includes an arrow icon. The example shows a complete implementation with state management and event handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'assistant',\n        id: '1',\n        createAt: 1715676751919,\n        content: 'Semi Design is a design system designed, developed, and maintained by the front-end team at Douyin and the MED product design team.',\n    }\n];\n\nconst hintsExample = [\n    \"Tell me more\",\n    \"What are the components of Semi Design?\",\n    \"What are the addresses of Semi Design's official website and github warehouse?\",\n]\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    height: 400,\n};\n\nlet id = 0;\nfunction getId() {\n    return `id-${id++}`\n}\nconst uploadProps = { action: 'https://api.semi.design/upload' }\n\nfunction DefaultChat() {\n    const [message, setMessage] = useState(defaultMessage);\n    const [hints, setHints] = useState(hintsExample);\n\n    const onHintClick = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"This is a mock reply message\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n        setHints([]);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const commonHintStyle = useMemo(() => ({\n        border: '1px solid var(--semi-color-border)',\n        padding: '10px',\n        borderRadius: '10px',\n        color: 'var( --semi-color-text-1)',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        cursor: 'pointer',\n        fontSize: '14px'\n    }), []);\n    \n    const renderHintBox = useCallback((props) => {\n        const { content, onHintClick, index } = props;\n        return <div style={commonHintStyle} onClick={onHintClick} key={index}>\n            {content}\n            <IconArrowRight style={{ marginLeft: 10 }}>click me</IconArrowRight>\n        </div>\n    }, []);\n\n    onClear = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    return (\n        <Chat \n            renderHintBox={renderHintBox}\n            hints={hints}\n            onHintClick={onHintClick}\n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            onClear={onClear}\n            uploadProps={uploadProps}\n        />\n    )\n}\n\nrender(DefaultChat);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Renderer with Chat Component\nDESCRIPTION: Shows implementation of a custom chat interface with action renderer, message handling, and basic chat functionality using Semi Design's Chat component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomRender() {\n    const [message, setMessage] = useState(defaultMessage);\n\n    const customRenderAction = useCallback((props) => {\n        return <CustomActions {...props} />\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            content: `This is a mock response`\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    return (\n        <Chat\n            chatBoxRenderConfig={{ \n                renderChatBoxAction: customRenderAction \n            }}\n            style={commonOuterStyle}\n            chats={message}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            roleConfig={roleInfo}\n            uploadProps={uploadProps}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Max Count and Popover\nDESCRIPTION: Shows how to use TagGroup to manage collections of tags with maxTagCount to limit displayed tags and showPopover to reveal hidden tags on hover.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagGroup } from '@douyinfe/semi-ui';\n\n() => {\n    const tagList = [\n        { color: 'white', children: 'Abc' },\n        { color: 'white', children: 'Hotsoon' },\n        { color: 'white', children: 'Toutiao' },\n        { color: 'white', children: 'Vigo' },\n        { color: 'white', children: 'Pipixia' },\n    ];\n    const src =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png';\n    const tagList2 = [\n        { color: 'white', children: 'Abcd', avatarSrc: src },\n        { color: 'white', children: 'Hotsoon', avatarSrc: src },\n        { color: 'white', children: 'Toutiao', avatarSrc: src },\n        { color: 'white', children: 'Vigo', avatarSrc: src },\n        { color: 'white', children: 'Pipixia', avatarSrc: src },\n    ];\n    const divStyle = {\n        backgroundColor: 'var(--semi-color-fill-0)',\n        height: 35,\n        width: 300,\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 10px',\n        marginBottom: 30,\n    };\n    const tagGroupStyle = {\n        display: 'flex',\n        alignItems: 'center',\n        width: 350,\n    };\n    return (\n        <>\n            <div style={divStyle}>\n                <TagGroup\n                    maxTagCount={3}\n                    style={tagGroupStyle}\n                    tagList={tagList}\n                    size=\"large\"\n                />\n            </div>\n            <div style={divStyle}>\n                <TagGroup\n                    maxTagCount={2}\n                    style={tagGroupStyle}\n                    tagList={tagList2}\n                    size=\"large\"\n                    avatarShape=\"circle\"\n                    showPopover\n                />\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Half Star Rating Component in React\nDESCRIPTION: Shows how to use the Rating component with half-star and decimal ratings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Rating } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Rating allowHalf defaultValue={3.5} />\n        <br />\n        <Rating allowHalf defaultValue={3.65} disabled/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Different Banner Types in React\nDESCRIPTION: Shows the four different types of banners: info, warning, danger, and success. Each type has a distinct visual style to communicate different levels of importance.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Banner } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Banner \n            type=\"info\"\n            description=\"Semi D2C 现已支持 Figma DevMode, 安装插件，随时查阅图层对应的前端代码\"\n        />\n        <br/>\n        <Banner \n            type=\"warning\"\n            description=\"当前使用 Figma UI Kit 为旧版，可能无法支持完整的 Design to code 能力\"\n        />\n        <br/>\n        <Banner \n            type=\"danger\"\n            description=\"当前使用 API 已过期，请尽快升级\"\n        />\n        <br/>\n        <Banner \n            type=\"success\"\n            description=\"Semi DSM, Make Semi Design to Any Design\"\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Carousel Animation and Speed in React with Semi Design\nDESCRIPTION: This snippet shows how to customize the animation type and speed of a Carousel component. It sets the animation to 'fade' and adjusts the transition speed between slides.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, Typography, Space } from '@douyinfe/semi-ui';\n\n() => {\n    const { Title, Paragraph } = Typography;\n\n    const style = {\n        width: '100%',\n        height: '400px',\n    };\n\n    const titleStyle = { \n        position: 'absolute', \n        top: '100px', \n        left: '100px'\n    };\n\n    const colorStyle = {\n        color: '#1C1F23'\n    };\n\n    const renderLogo = () => {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }}/>\n        );\n    };\n\n\n    const imgList = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n    ];\n\n    const textList = [\n        ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n        ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n        ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n    ];\n\n    return (\n        <div>\n            <Carousel style={style} speed={1000} animation='fade' theme='dark' autoPlay={false}>\n                {\n                    imgList.map((src, index) => {\n                        return (\n                            <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                    {renderLogo()}\n                                    <Title heading={2} style={colorStyle}>{textList[index][0]}</Title>\n                                    <Space vertical align='start'>\n                                        <Paragraph style={colorStyle}>{textList[index][1]}</Paragraph>\n                                        <Paragraph style={colorStyle}>{textList[index][2]}</Paragraph>\n                                    </Space>\n                                </Space>\n                            </div>\n                        );\n                    })\n                }\n            </Carousel>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Semi Design Components in React\nDESCRIPTION: Example of importing and using Semi Design components (Button and Toast) in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react';\nimport { Button, Toast } from '@douyinfe/semi-ui';\n\nconst SemiApp = () => {\n    return (\n        <Button onClick={() => Toast.warning({ content: 'welcome' })}>Hello Semi</Button>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Date Content Rendering\nDESCRIPTION: Example of customizing the rendering of individual date cells in the DatePicker calendar using renderDate prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker, Tooltip } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const dateStyle = {\n        width: '100%',\n        height: '100%',\n        border: '1px solid var(--semi-color-primary)',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    };\n    const renderDate = (dayNumber, fullDate) => {\n        if (dayNumber === 1) {\n            return (\n                <Tooltip content={'Always Day 1'}>\n                    <div style={dateStyle}>\n                        {dayNumber}\n                    </div>\n                </Tooltip>\n            );\n        }\n        return dayNumber;\n    };\n    return <DatePicker renderDate={renderDate} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-expanding TextArea Component in React\nDESCRIPTION: Demonstrates TextArea with autosize functionality that automatically adjusts height based on content, with optional minimum and maximum row limits.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TextArea } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <TextArea autosize rows={1} />\n        <br/><br/>\n        <TextArea autosize={{ minRows: 1, maxRows: 3}} />\n        <br/><br/>\n        <TextArea autosize maxCount={100} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Remote Search with AutoComplete in React\nDESCRIPTION: Demonstrates how to implement remote search functionality with AutoComplete, including loading state and debounced search.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\nclass ObjectDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            list: [\n                { value: 'abc', label: 'douyin', email: '1@gmail.com', type: 2 },\n                { value: 'hotsoon', label: 'huoshan', email: '2@gmail.com', type: 3 },\n                { value: 'pipixia', label: 'pip', email: '3@gmail.com' },\n            ],\n            loading: false,\n        };\n        this.onSearch = this.onSearch.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n        this.renderSelectedItem = this.renderSelectedItem.bind(this);\n        this.search = debounce(this.search.bind(this), 200);\n    }\n\n    onSearch(inputValue) {\n        this.setState({ loading: true });\n        this.search(inputValue);\n    }\n\n    search(inputValue) {\n        let { list } = this.state;\n        const newList = list.map(item => {\n            let num = Math.random()\n                .toString()\n                .slice(2, 5);\n            let option = inputValue + '-' + num;\n            return { ...item, label: 'Name:' + option, value: option };\n        });\n        this.setState({ list: newList, loading: false });\n    }\n\n    handleSelect(value) {\n        console.log(value);\n    }\n\n    renderItem(item) {\n        return (\n            <div>\n                <div>{item.label}</div>\n                <div>email: {item.email}</div>\n                <div style={{ color: 'pink' }}>value: {item.value}</div>\n            </div>\n        );\n    }\n\n    renderSelectedItem(item) {\n        // Note: Unlike Select, only String type values can be returned here, ReactNode cannot be returned\n        return item.value;\n    }\n\n    render() {\n        const { loading } = this.state;\n        return (\n            <div>\n                <AutoComplete\n                    data={this.state.list}\n                    style={{ width: 250 }}\n                    prefix={<IconSearch />}\n                    onSearch={this.onSearch}\n                    loading={loading}\n                    onChangeWithObject\n                    renderItem={this.renderItem}\n                    renderSelectedItem={this.renderSelectedItem}\n                    onSelect={this.handleSelect}\n                ></AutoComplete>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Week Selection with DatePicker\nDESCRIPTION: Shows how to implement week selection using dateRange type combined with startDateOffset and endDateOffset props to select specific ranges with a single click.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const handleChange = date => {\n        console.log('date changed', date);\n    };\n\n    return (\n        <div>\n            <h4>Choose a week</h4>\n            <DatePicker\n                style={{ width: 260 }}\n                type=\"dateRange\"\n                weekStartsOn={1}\n                startDateOffset={date => dateFns.startOfWeek(date, { weekStartsOn: 1 })}\n                endDateOffset={date => dateFns.endOfWeek(date, { weekStartsOn: 1 })}\n                onChange={handleChange}\n            />\n            <br />\n            <br />\n            <h4>Choose two weeks</h4>\n            <DatePicker\n                style={{ width: 260 }}\n                type=\"dateRange\"\n                weekStartsOn={1}\n                startDateOffset={date => dateFns.startOfWeek(date, { weekStartsOn: 1 })}\n                endDateOffset={date => dateFns.add(dateFns.endOfWeek(date, { weekStartsOn: 1 }), { days: 7 })}\n                onChange={handleChange}\n            />\n            <br />\n            <br />\n            <h4>Select the current day and the next 6 days</h4>\n            <DatePicker\n                style={{ width: 260 }}\n                type=\"dateRange\"\n                weekStartsOn={1}\n                endDateOffset={date => dateFns.add(date, { days: 6 })}\n                onChange={handleChange}\n            />\n            <br />\n            <br />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Cards with Meta in Semi Design\nDESCRIPTION: Shows how to create more complex cards using Card.Meta for flexible content, including title, avatar, description, cover image, and footer actions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Avatar, Space, Button, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Meta } = Card;\n    const { Text } = Typography;\n\n    return (\n        <Card\n            style={{ maxWidth: 340 }}\n            title={\n                <Meta \n                    title=\"Semi Doc\" \n                    description=\"全面、易用、优质\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n            }\n            headerExtraContent={\n                <Text link>\n                    More\n                </Text>\n            }\n            cover={ \n                <img \n                    alt=\"example\" \n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo.jpeg\" \n                />\n            }\n            footerLine={ true }\n            footerStyle={{ display: 'flex', justifyContent: 'flex-end' }}\n            footer={\n                <Space>\n                    <Button theme='borderless' type='primary'>精选案例</Button>\n                    <Button theme='solid' type='primary'>开始使用</Button>\n                </Space>\n            }\n        >\n            Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Navigation with Semi Design Nav Component in React\nDESCRIPTION: This code snippet demonstrates how to create a horizontal navigation bar using the Nav component from Semi Design. It includes dropdown menus, icons, and a custom header and footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav, Avatar, Dropdown } from '@douyinfe/semi-ui';\nimport { IconStar, IconUser, IconUserGroup, IconSetting, IconEdit, IconSemiLogo } from '@douyinfe/semi-icons';\nimport { IconTreeSelect, IconForm, IconBreadcrumb, IconBanner, IconBadge, IconNotification, IconSteps, IconTree, IconTabs, IconNavigation } from '@douyinfe/semi-icons-lab';\n\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <div style={{ width: '100%' }}>\n                <Nav\n                    mode={'horizontal'}\n                    items={[\n                        { itemKey: 'user', text: '用户管理', icon: <IconBadge /> },\n                        { itemKey: 'union', text: '活动管理', icon: <IconTreeSelect /> },\n                        {\n                            itemKey: 'approve-management',\n                            text: '审批管理',\n                            icon: <IconBreadcrumb />,\n                            items: [\n                                '入驻审核',\n                                {\n                                    itemKey: 'operation-management',\n                                    text: '运营管理',\n                                    items: [\n                                        '人员管理',\n                                        '人员变更'\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            text: '任务平台',\n                            icon: <IconSteps />,\n                            itemKey: 'job',\n                            items: ['任务管理', '用户任务查询'],\n                        },\n                    ]}\n                    onSelect={key => console.log(key)}\n                    header={{\n                        logo: <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />,\n                        text: 'Semi 运营后台'\n                    }}\n                    footer={\n                        <Dropdown\n                            position=\"bottomRight\"\n                            render={\n                                <Dropdown.Menu>\n                                    <Dropdown.Item>详情</Dropdown.Item>\n                                    <Dropdown.Item>退出</Dropdown.Item>\n                                </Dropdown.Menu>\n                            }\n                        >\n                            <Avatar size=\"small\" color='light-blue' style={{ margin: 4 }}>BD</Avatar>\n                            <span>Bytedancer</span>\n                        </Dropdown>\n                    }\n                />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Transfer with Custom Item Rendering in React\nDESCRIPTION: This example shows how to create a Transfer component with draggable items and custom rendering for both source and selected items. It includes custom filtering, avatar display, and drag handle implementation.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer, Checkbox, Avatar } from '@douyinfe/semi-ui';\nimport { IconHandle, IconClose } from '@douyinfe/semi-icons';\n\n() => {\n    const renderSourceItem = item => {\n        return (\n            <div className=\"components-transfer-demo-source-item\" key={item.label}>\n                <Checkbox\n                    onChange={() => {\n                        item.onChange();\n                    }}\n                    key={item.label}\n                    checked={item.checked}\n                    style={{ height: 52, alignItems: 'center' }}\n                >\n                    <Avatar color={item.color} size=\"small\">\n                        {item.abbr}\n                    </Avatar>\n                    <div className=\"info\">\n                        <div className=\"name\">{item.label}</div>\n                        <div className=\"email\">{item.value}</div>\n                    </div>\n                </Checkbox>\n            </div>\n        );\n    };\n\n    const renderSelectedItem = item => {\n        const { sortableHandle } = item;\n        const DragHandle = sortableHandle(() => <IconHandle className={`semi-right-item-drag-handler`} />); \n        return (\n            <div className=\"components-transfer-demo-selected-item\" key={item.label}>\n                <DragHandle />\n                <Avatar color={item.color} size=\"small\">\n                    {item.abbr}\n                </Avatar>\n                <div className=\"info\">\n                    <div className=\"name\">{item.label}</div>\n                    <div className=\"email\">{item.value}</div>\n                </div>\n                <IconClose onClick={item.onRemove} />\n            </div>\n        );\n    };\n\n    const customFilter = (sugInput, item) => {\n        return item.value.includes(sugInput) || item.label.includes(sugInput);\n    };\n\n    const data = [\n        { label: '夏可漫', value: 'xiakeman@example.com', abbr: '夏', color: 'amber', area: 'US', key: 1 },\n        { label: '申悦', value: 'shenyue@example.com', abbr: '申', color: 'indigo', area: 'UK', key: 2 },\n        { label: '文嘉茂', value: 'wenjiamao@example.com', abbr: '文', color: 'cyan', area: 'HK', key: 3 },\n        { label: '曲晨一', value: 'quchenyi@example.com', abbr: '曲', color: 'blue', area: 'India', key: 4 },\n        { label: '曲晨二', value: 'quchener@example.com', abbr: '二', color: 'blue', area: 'India', key: 5 },\n        { label: '曲晨三', value: 'quchensan@example.com', abbr: '三', color: 'blue', area: 'India', key: 6 },\n    ];\n\n    return (\n        <Transfer\n            draggable\n            style={{ width: 568 }}\n            dataSource={data}\n            filter={customFilter}\n            defaultValue={['xiakeman@example.com', 'shenyue@example.com']}\n            renderSelectedItem={renderSelectedItem}\n            renderSourceItem={renderSourceItem}\n            inputProps={{ placeholder: '搜索姓名或邮箱' }}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Colors for Light/Dark Mode in CSS\nDESCRIPTION: This CSS snippet sets the default text and background colors for the body element using Semi Design's CSS variables. This allows for automatic adaptation to light/dark mode changes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n     color: var(--semi-color-text-0);\n     background-color: var( --semi-color-bg-0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable TreeSelect with Multiple Modes\nDESCRIPTION: Demonstrates implementation of searchable TreeSelect with both single and multiple selection modes. Features include filtered view toggle, custom search behavior, and autofocus functionality. Uses hierarchical data structure representing geographical locations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect, Switch } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            showFilteredOnly: false,\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSearch = this.onSearch.bind(this);\n    }\n    onChange(showFilteredOnly) {\n        this.setState({ showFilteredOnly });\n    }\n    onSearch(inputValue, filteredExpandedKeys, filteredNodes) {\n        console.log('onSearch', inputValue, filteredExpandedKeys, filteredNodes);\n    }\n    render() {\n        const treeData = [\n            {\n                label: 'Asia',\n                value: 'Asia',\n                key: '0',\n                children: [\n                    {\n                        label: 'China',\n                        value: 'China',\n                        key: '0-0',\n                        children: [\n                            {\n                                label: 'Beijing',\n                                value: 'Beijing',\n                                key: '0-0-0',\n                            },\n                            {\n                                label: 'Shanghai',\n                                value: 'Shanghai',\n                                key: '0-0-1',\n                            },\n                        ],\n                    },\n                    {\n                        label: 'Japan',\n                        value: 'Japan',\n                        key: '0-1',\n                        children: [\n                            {\n                                label: 'Osaka',\n                                value: 'Osaka',\n                                key: '0-1-0'\n                            }\n                        ]\n                    },\n                ],\n            },\n            {\n                label: 'North America',\n                value: 'North America',\n                key: '1',\n                children: [\n                    {\n                        label: 'United States',\n                        value: 'United States',\n                        key: '1-0'\n                    },\n                    {\n                        label: 'Canada',\n                        value: 'Canada',\n                        key: '1-1'\n                    }\n                ]\n            }\n        ];\n        const { showFilteredOnly } = this.state;\n        return (\n            <>\n                <span>showFilteredOnly</span>\n                <Switch\n                    checked={showFilteredOnly}\n                    onChange={this.onChange}\n                    size=\"small\"\n                />\n                <br/>\n                <br/>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={treeData}\n                    filterTreeNode\n                    showFilteredOnly={showFilteredOnly}\n                    placeholder=\"Single Searchable TreeSelect\"\n                    searchPlaceholder=\"Start searching\"\n                    onSearch={this.onSearch}\n                />\n                <br/>\n                <br/>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={treeData}\n                    multiple\n                    filterTreeNode\n                    maxTagCount={2}\n                    showFilteredOnly={showFilteredOnly}\n                    placeholder=\"Multiple Searchable TreeSelect\"\n                    searchPlaceholder=\"Start searching\"\n                    onSearch={this.onSearch}\n                />\n                <br/>\n                <br/>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={treeData}\n                    multiple\n                    filterTreeNode\n                    maxTagCount={2}\n                    showFilteredOnly={showFilteredOnly}\n                    placeholder=\"search input autofocus\"\n                    searchPlaceholder=\"autofocus\"\n                    searchAutoFocus\n                    onSearch={this.onSearch}\n                />\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Merge Value in Cascader (React/JSX)\nDESCRIPTION: Demonstrates how to use the autoMergeValue prop in a Cascader component to control whether descendant nodes are included when selecting an ancestor node in multi-selection mode. The example uses a tree structure representing art movements and artists.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const [value, setValue] = useState(['impressionism', 'visualArts']);\n    const onChange = value => {\n        setValue(value);\n    };\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }\n    ];\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n            value={value}\n            multiple\n            autoMergeValue={false}\n            onChange={e => onChange(e)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: PinCode with Character Format Restrictions\nDESCRIPTION: Shows different ways to restrict the input format of PinCode using the format prop. Examples include number-only, mixed alphanumeric, uppercase letters only (via regex), and lowercase letters only (via function validator).\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode, Button, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <>\n            <Typography.Text>纯数字</Typography.Text>\n            <PinCode format={'number'} onComplete={value => console.log('pincode: ', value)} />\n            <br />\n            <Typography.Text>字母和数字</Typography.Text>\n            <PinCode format={'mixed'} onComplete={value => console.log('pincode: ', value)} />\n            <br />\n            <Typography.Text>只大写字母</Typography.Text>\n            <PinCode format={/[A-Z]/} onComplete={value => console.log('pincode: ', value)} />\n            <br />\n            <Typography.Text>只小写字母(函数判断)</Typography.Text>\n            <PinCode\n                format={char => {\n                    return /[a-z]/.test(char);\n                }}\n                onComplete={value => console.log('pincode: ', value)}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Tooltip with Popconfirm in React using Semi-Design\nDESCRIPTION: Illustrates how to use Tooltip in combination with Popconfirm. It demonstrates the need to add an intermediate element to prevent trigger event hijacking when nesting these components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popconfirm, Tooltip, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Popconfirm content=\"Are you sure to delete this comment\" title='Confirm Delete'>\n        <span style={{ display: 'inline-block' }}>\n            <Tooltip content={'Delete Comment'}>\n                <Button type=\"danger\">Delete</Button>\n            </Tooltip>\n        </span>\n    </Popconfirm>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Option Rendering in React - JSX\nDESCRIPTION: This snippet defines a custom option rendering function for a Select component. It handles various states such as selected, disabled, and focused, and binds required event handlers correctly. The 'renderOptionItem' function takes 'renderProps' as input to configure the option's appearance and behavior. It is used in two Select components with different configurations for single and multiple selections.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Select, Checkbox } from '@douyinfe/semi-ui';\n\n() => {\n    const renderOptionItem = renderProps => {\n        const {\n            disabled,\n            selected,\n            label,\n            value,\n            focused,\n            className,\n            style,\n            onMouseEnter,\n            onClick,\n            empty,\n            emptyContent,\n            ...rest\n        } = renderProps;\n        const optionCls = classNames({\n            ['custom-option-render']: true,\n            ['custom-option-render-focused']: focused,\n            ['custom-option-render-disabled']: disabled,\n            ['custom-option-render-selected']: selected,\n            className,\n        });\n        // Notice：\n        // 1. The style passed in by props needs to be consumed on wrapper dom, otherwise it will not be able to be used normally in virtualization scenarios\n        // 2. The styles of selected (selected), focused (focused), disabled (disabled) and other states need to be added by yourself, you can get the relative boolean value from props\n        // 3.onMouseEnter needs to be bound on the wrapper dom, otherwise the display will be problematic when the upper and lower keyboards are operated\n\n        return (\n            <div style={style} className={optionCls} onClick={() => onClick()} onMouseEnter={e => onMouseEnter()}>\n                <Checkbox checked={selected} />\n                <div className=\"option-right\">{label}</div>\n            </div>\n        );\n    };\n\n    const optionList = [\n        { value: 'douyin', label: 'Semi', otherKey: 0 },\n        { value: 'capcut', label: 'Capcut', disabled: true, otherKey: 1 },\n        { value: 'cam', label: 'UlikeCam', otherKey: 2 },\n        { value: 'buzz', label: 'Buzz', otherKey: 3 },\n    ];\n\n    return (\n        <>\n            <Select\n                filter\n                defaultOpen\n                defaultValue=\"douyin\"\n                dropdownClassName=\"components-select-demo-renderOptionItem\"\n                optionList={optionList}\n                style={{ width: 180 }}\n                renderOptionItem={renderOptionItem}\n            />\n            <br />\n            <br />\n            <Select\n                filter\n                placeholder=\"multiple\"\n                multiple\n                dropdownClassName=\"components-select-demo-renderOptionItem\"\n                optionList={optionList}\n                style={{ width: 320, marginTop: 180 }}\n                renderOptionItem={renderOptionItem}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating File Information with afterUpload in React\nDESCRIPTION: This React component demonstrates how to update file information after a successful upload using the `afterUpload` hook in Semi Design's Upload component. It showcases how to modify the file status, validation message, and file name based on the server response.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\nclass ValidateDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.count = 0;\n    }\n\n    afterUpload({ response, file }) {\n        // It can be returned according to the business interface to determine whether the upload is successful.\n        if (response.status_code === 200) {\n            return {\n                autoRemove: false,\n                status: 'uploadFail',\n                validateMessage: 'The content is illegal',\n                name: 'RenameByServer.jpg',\n            };\n        } else {\n            return {};\n        }\n    }\n\n    render() {\n        return (\n            <Upload action=\"//semi.design/api/upload\" afterUpload={this.afterUpload}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Click upload\n                </Button>\n            </Upload>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Preview Bottom Menu with Custom Controls\nDESCRIPTION: Demonstrates how to customize the preview's bottom operation area by implementing a custom renderPreviewMenu function with custom buttons and controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useCallback } from 'react';\nimport { Image, ImagePreview, Button } from '@douyinfe/semi-ui';\nimport { IconChevronLeft, IconChevronRight, IconMinus, IconPlus, IconRotate, IconDownload, IconRealSizeStroked, IconWindowAdaptionStroked } from \"@douyinfe/semi-icons\";\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n    ]), []);\n\n    const renderPreviewMenu = useCallback((props) => {\n        const {\n            ratio,\n            disabledPrev,\n            disabledNext,\n            disableZoomIn,\n            disableZoomOut,\n            disableDownload,\n            onDownload,\n            onNext,\n            onPrev,\n            onRotateLeft,\n            onRatioClick,\n            onZoomIn,\n            onZoomOut,\n        } = props;\n        return (\n            <div \n                style={{ \n                    background: \"grey\", \n                    height: 40, \n                    width: 280, \n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-around\",\n                    borderRadius: 3,\n                }}\n            >\n                <Button\n                    icon={<IconChevronLeft size=\"large\" />}\n                    type=\"tertiary\"\n                    onClick={!disabledPrev ? onPrev : undefined}\n                    disabled={disabledPrev}\n                />\n                <Button\n                    icon={<IconChevronRight size=\"large\" />}\n                    type=\"tertiary\"                     \n                    onClick={!disabledNext ? onNext : undefined}\n                    disabled={disabledNext}\n                />\n                <Button\n                    icon={<IconMinus size=\"large\" />}\n                    type=\"tertiary\"\n                    onClick={!disableZoomOut ? onZoomOut : undefined}\n                    disabled={disableZoomOut} \n                />\n                <Button\n                    icon={<IconPlus size=\"large\" />}\n                    type=\"tertiary\"\n                    onClick={!disableZoomIn ? onZoomIn : undefined} \n                    disabled={disableZoomIn}\n                />\n                <Button\n                    icon={ratio === \"adaptation\" ? <IconRealSizeStroked size=\"large\" /> : <IconWindowAdaptionStroked size=\"large\" />}\n                    type=\"tertiary\"\n                    onClick={onRatioClick} \n                />\n                <Button\n                    icon={<IconRotate size=\"large\" />}\n                    type=\"tertiary\"\n                    onClick={onRotateLeft}\n                />\n                <Button\n                    icon={<IconDownload size=\"large\" />}\n                    type=\"tertiary\"\n                    onClick={!disableDownload ? onDownload : undefined}\n                    disabled={disableDownload}\n                />\n            </div>);\n    }, []);\n\n    return ( \n        <ImagePreview renderPreviewMenu={renderPreviewMenu}>\n            {srcList.map((src, index) => {\n                return (\n                    <Image \n                        key={index} \n                        src={src} \n                        width={200} \n                        alt={`lamp${index + 1}`}\n                        style={{ marginRight: 5 }} \n                    />\n                );\n            })}\n        </ImagePreview>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Upload Implementation with Button Trigger\nDESCRIPTION: Demonstrates the basic usage of the Upload component with a Button that triggers the file selection dialog. Files will be uploaded automatically after selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => (\n    <Upload action=\"//semi.design/api/upload\">\n        <Button icon={<IconUpload />} theme=\"light\">\n            Click upload\n        </Button>\n    </Upload>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Date and Time Selection Shortcuts in React with Semi-Design DatePicker\nDESCRIPTION: This snippet shows how to add preset shortcuts to the DatePicker component for quick date selection. It uses the 'presets' prop to define custom shortcuts.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        this.presets = [\n            {\n                text: 'Today',\n                start: new Date(),\n                end: new Date(),\n            },\n            () => ({\n                text: 'Tomorrow',\n                start: new Date(new Date().valueOf() + 1000 * 3600 * 24),\n                end: new Date(new Date().valueOf() + 1000 * 3600 * 24),\n            }),\n        ];\n    }\n\n    render() {\n        return <DatePicker type=\"dateTime\" presets={this.presets} presetPosition=\"left\"/>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Time Picker with ScrollList in React\nDESCRIPTION: Demonstrates basic usage of ScrollList and ScrollItem to create a time picker with AM/PM, hours, and minutes selection. Shows how to handle selection events and customize appearance.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/scrolllist/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ScrollList, ScrollItem, Button } from '@douyinfe/semi-ui';\n\nclass ScrollListDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectIndex1: 1,\n            selectIndex2: 1,\n            selectIndex3: 1,\n        };\n\n        this.ampms = [{\n            value: 'AM',\n        }, {\n            value: 'PM',\n        }];\n\n        this.hours = new Array(12).fill(0).map((itm, index) => {\n            return {\n                value: index + 1\n            };\n        });\n\n        this.minutes = new Array(60).fill(0).map((itm, index) => {\n            return {\n                value: index,\n                disabled: Math.random() > 0.5 ? true : false\n            };\n        });\n\n        this.onSelectAP = this.onSelectAP.bind(this);\n        this.onSelectHour = this.onSelectHour.bind(this);\n        this.onSelectMinute = this.onSelectMinute.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.renderFooter = this.renderFooter.bind(this);\n    }\n\n    onSelectAP(data) {\n        this.setState({\n            ['selectIndex' + data.type]: data.index,\n        });\n    }\n\n\n    onSelectHour(data) {\n        console.log('You have choose the hour for: ', data.value);\n        this.setState({\n            ['selectIndex' + data.type]: data.index,\n        });\n    }\n\n    onSelectMinute(data) {\n        console.log('You have choose the minute for: ', data.value);\n        this.setState({\n            ['selectIndex' + data.type]: data.index,\n        });\n    }\n\n    handleClose() {\n        console.log('close');\n    }\n\n    renderFooter() {\n        return (\n            <Button size=\"small\" type=\"primary\" onClick={this.handleClose}>\n                Ok\n            </Button>\n        );\n    };\n\n    render() {\n        let list = this.list;\n        const scrollStyle = {\n            border: 'unset',\n            boxShadow: 'unset',\n        };\n        return (\n            <ScrollList style={scrollStyle} header={'Infinite Scroll List'} footer={this.renderFooter()}>\n                <ScrollItem mode=\"wheel\" cycled={false} list={this.ampms} type={1} selectedIndex={this.state.selectIndex1} onSelect={this.onSelectAP} />\n                <ScrollItem mode=\"wheel\" cycled={true} list={this.hours} type={2} selectedIndex={this.state.selectIndex2} onSelect={this.onSelectHour} />\n                <ScrollItem mode=\"wheel\" cycled={true} list={this.minutes} type={3} selectedIndex={this.state.selectIndex3} onSelect={this.onSelectMinute} />\n            </ScrollList>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AudioPlayer Implementation in React\nDESCRIPTION: Demonstrates various ways to use AudioPlayer with different input formats including single URL, URL arrays, and object configurations. Shows how to handle audio metadata like titles and cover images.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const audioUrl = 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3';\n    const audioUrlArr = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3',\n    ];\n    const audioUrlObj = {\n        src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n        title: 'Audio Title',\n        cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n    };\n    const audioUrlArrObj = [\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n            title: 'Audio Title 1',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3',\n            title: 'Audio Title 2',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n    ];\n  \n    return (\n        <div style={{ width: '100%' }}>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrl}\n                />\n            </div>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrlObj}\n                />\n            </div>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrlArr}\n                />\n            </div>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrlArrObj}\n                />\n            </div>\n        </div>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled TimePicker Component in React\nDESCRIPTION: Demonstrates how to create a controlled TimePicker component using state and onChange handler.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: null,\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(time) {\n        console.log(time);\n        this.setState({ value: time });\n    }\n\n    render() {\n        return <TimePicker value={this.state.value} onChange={this.onChange} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Upload Request with Progress Simulation in React\nDESCRIPTION: Example of how to implement a custom upload request using the mockRequest function. This demonstrates how to simulate upload progress with an interval timer and properly trigger success callbacks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const mockRequest = ({ file, onProgress, onError, onSuccess }) => {\n        let count = 0;\n        let interval = setInterval(() => {\n            if (count === 100) {\n                clearInterval(interval);\n                onSuccess();\n                return;\n            }\n            onProgress({ total: 100, loaded: count });\n            count += 20;\n        }, 500);\n    };\n\n    return (\n        <Upload action=\"https://api.semi.design/upload\" customRequest={mockRequest}>\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Element Styles in MarkdownRender for React\nDESCRIPTION: Shows how to override the default styling of Markdown elements in the MarkdownRender component, specifically changing the color of h2 headings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/markdownrender/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MarkdownRender, Typography } from '@douyinfe/semi-ui';\nimport * as SemiMarkdownComponents from \"@douyinfe/semi-ui/markdownRender/components\"\n\nfunction Demo() {\n    const components ={...SemiMarkdownComponents};\n    \n    components['h2'] = ({children}) => <Typography.Title heading={2} style={{color:\"var(--semi-color-primary)\"}}>{children}</Typography.Title>\n    \n    return <MarkdownRender raw={`## From Semi Design to Any Design, quickly define your design system and apply it in design drafts and codes`} components={components} />\n}\n```\n\n----------------------------------------\n\nTITLE: Input Group Component with Various Inputs in React\nDESCRIPTION: Demonstrates combining multiple input components within an InputGroup container. Supports Input, InputNumber, Select, AutoComplete, TreeSelect, Cascader, and DatePicker.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputGroup, Input, InputNumber, AutoComplete, DatePicker, Select } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <InputGroup>\n            <Input placeholder=\"Name\" style={{ width: 100 }} />\n            <InputNumber placeholder=\"Score\" style={{ width: 140 }} />\n        </InputGroup>\n        <br/><br/><br/>\n        <InputGroup size={'small'}>\n            <Select style={{ width: '100px' }} defaultValue='home'>\n                <Select.Option value='home'>Home</Select.Option>\n                <Select.Option value='work'>Work</Select.Option>\n            </Select>\n            <AutoComplete\n                data={['Beijing Haidian']}\n                placeholder='Address: '\n                style={{ width: 180 }}\n            >\n            </AutoComplete>\n        </InputGroup>\n        <br/><br/><br/>\n        <InputGroup size={'small'}>\n            <Select style={{ width: '100px' }} defaultValue='signup'>\n                <Select.Option value='signup'>Sign Up</Select.Option>\n                <Select.Option value='signin'>Sign In</Select.Option>\n            </Select>\n            <Input placeholder=\"Email\" style={{ width: 180 }} />\n        </InputGroup>\n        <br/><br/><br/>\n        <InputGroup size={'small'}>\n            <Input placeholder=\"Name\" style={{ width: 100 }} />\n            <DatePicker placeholder=\"Birthday\" />\n        </InputGroup>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization with LocaleProvider in React\nDESCRIPTION: This example shows how to use LocaleProvider to switch between English and Japanese localizations for the Pagination component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport en_GB from '@douyinfe/semi-ui/locale/source/en_GB';\nimport ja_JP from '@douyinfe/semi-ui/locale/source/ja_JP';\nimport { LocaleProvider, Pagination } from '@douyinfe/semi-ui';\n\nclass I18nDemo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <>\n                <LocaleProvider locale={en_GB}>\n                    <Pagination total={100} showTotal showSizeChanger style={{ margin: 20 }} />\n                </LocaleProvider>\n                <LocaleProvider locale={ja_JP}>\n                    <Pagination total={100} showTotal showSizeChanger style={{ margin: 20 }} />\n                </LocaleProvider>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Implementation with Multiple Items\nDESCRIPTION: Demonstrates basic dropdown usage with various item types, icons, and hotkeys. Shows how to use Dropdown.Menu, Dropdown.Item, Dropdown.Title, and Dropdown.Divider components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Button, HotKeys } from '@douyinfe/semi-ui';\nimport { IconBox, IconSetting, IconForward, IconRefresh, IconSearch, IconAlertCircle } from \"@douyinfe/semi-icons\";\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\nfunction Demo() {\n    return (\n        <Dropdown\n            position=\"bottomLeft\"\n            render={\n                <Dropdown.Menu>\n                    <Dropdown.Title>Group 1</Dropdown.Title>\n                    <Dropdown.Item icon={<IconBox />}>\n                        Menu Item 1\n                        <HotKeys\n                            style={{ marginLeft: 20 }}\n                            hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.B]}\n                            content={['Ctrl', 'B']}\n                        ></HotKeys>\n                    </Dropdown.Item>\n                    <Dropdown.Item icon={<IconSetting />}>\n                        Menu Item 2\n                        <HotKeys\n                            style={{ marginLeft: 20 }}\n                            hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.V]}\n                            content={['Ctrl', 'V']}\n                        ></HotKeys>\n                    </Dropdown.Item>\n                    <Dropdown.Item disabled icon={<IconForward />}>\n                        Menu Item 3\n                        <HotKeys\n                            style={{ marginLeft: 20 }}\n                            hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.F3]}\n                            content={['Ctrl', 'F3']}\n                        ></HotKeys>\n                    </Dropdown.Item>\n                    <Dropdown.Divider />\n                    <Dropdown.Title>Group 2</Dropdown.Title>\n                    <Dropdown.Item type=\"tertiary\" icon={<IconRefresh />}>Tertiary text</Dropdown.Item>\n                    <Dropdown.Item type=\"warning\" icon={<IconSearch />}>\n                        Warning Text\n                    </Dropdown.Item>\n                    <Dropdown.Item type=\"danger\" icon={<IconAlertCircle />}>Danger text</Dropdown.Item>\n                </Dropdown.Menu>\n            }\n        >\n            <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                Hover Me\n            </Button>\n        </Dropdown>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable TagInput in React\nDESCRIPTION: Example showing how to implement drag-and-drop functionality in TagInput component. Demonstrates usage of draggable prop and handling duplicate prevention.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput\n        draggable\n        allowDuplicates={false}\n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']}\n        placeholder='please enter...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Internationalized Components with LocaleConsumer in React\nDESCRIPTION: This snippet demonstrates how to use LocaleConsumer to create custom internationalized components that can access localeCode and specific component localization data from the Semi LocaleProvider context.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport zh_CN from '@douyinfe/semi-ui/lib/es/locale/source/zh_CN';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\nimport ko_KR from '@douyinfe/semi-ui/lib/es/locale/source/ko_KR';\nimport { LocaleProvider, LocaleConsumer } from '@douyinfe/semi-ui';\n\n\nclass GetLocaleFromSemi extends React.Component {\n    render() {\n        return <LocaleConsumer componentName=\"TimePicker\">\n            {\n                (localeData, localeCode, dateFnsLocale) => (\n                    <div>{localeCode} : {localeData.begin}</div>\n                )\n            }\n        </LocaleConsumer>;\n    }\n}\n\nclass ExtractComponent extends React.Component {\n    render() {\n        return <LocaleConsumer componentName=\"ComponentA\">\n            {\n                (localeData, localeCode, dateFnsLocale) => (\n                    <div>{localeData.customKey}</div>\n                )\n            }\n        </LocaleConsumer>;\n    }\n}\n\n\nclass I18nCustomDemo extends React.Component {\n    render() {\n        const new_zh_CN = { ...zh_CN, ComponentA: { customKey: 'semi' } };\n        const new_ko_KR = { ...ko_KR, ComponentA: { customKey: 'design' } };\n        const new_en_GB = { ...en_GB, ComponentA: { customKey: 'dsm' } };\n\n        return (\n            <>\n                <LocaleProvider locale={new_zh_CN}>\n                    <GetLocaleFromSemi />\n                </LocaleProvider>\n                <LocaleProvider locale={new_ko_KR}>\n                    <GetLocaleFromSemi />\n                </LocaleProvider>\n                <LocaleProvider locale={new_en_GB}>\n                    <GetLocaleFromSemi />\n                </LocaleProvider>\n                <LocaleProvider locale={new_zh_CN}>\n                    <ExtractComponent />\n                </LocaleProvider>\n                <LocaleProvider locale={new_ko_KR}>\n                    <ExtractComponent />\n                </LocaleProvider>\n                <LocaleProvider locale={new_en_GB}>\n                    <ExtractComponent />\n                </LocaleProvider>\n            </>\n        );\n    }\n}\n\nrender(I18nCustomDemo);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hints Functionality in Semi Design Chat\nDESCRIPTION: Example implementation of the hints functionality in the Chat component. It shows how to provide suggestion chips to users and handle click events on these hints, which populate the input field and can trigger actions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction DefaultChat() {\n    const [message, setMessage] = useState(defaultMessage);\n    const [hints, setHints] = useState(hintsExample);\n\n    const onHintClick = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"这是一条 mock 回复信息\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    onClear = useCallback(() => {\n        setHints([]);\n    }, [])\n\n    return (\n        <Chat \n            hints={hints}\n            onHintClick={onHintClick}\n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            onClear={onClear}\n            uploadProps={uploadProps}\n        />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Rendering in React TagInput\nDESCRIPTION: Example showing how to customize tag rendering using renderTagItem prop with avatar and close icon. Demonstrates handling of custom tag formatting with user avatars.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput, Avatar } from '@douyinfe/semi-ui';\nimport { IconClose } from '@douyinfe/semi-ui-icons';\n\nclass CustomRender extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: ['xiakeman']\n        };\n        this.list = [\n            { \"name\": \"xiakeman\", \"avatar\": \"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/avatarDemo.jpeg\" },\n            { \"name\": \"shenyue\", \"avatar\": \"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/bf8647bffab13c38772c9ff94bf91a9d.jpg\" },\n            { \"name\": \"quchenyi\", \"avatar\": \"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dbf7351bb779433d17c4f50478cf42f7.jpg\" },\n            { \"name\": \"wenjiamao\", \"avatar\": \"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/7abf810ff060ac3387bd027ead92c4e0.jpg\" },\n        ];\n        this.mapList = new Map(this.list.map( item => [item.name, item]));\n    }\n\n    renderTagItem(value, index, onClose) {\n        const data = this.mapList.get(value);\n        return (\n            <div \n                key={index} \n                style={{ display: 'flex', alignItems: 'center', fontSize: 14, marginRight: 10 }}\n            >\n                <Avatar \n                    alt='avatar'\n                    src={data?data.avatar:'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png'} \n                    size=\"extra-small\" \n                />\n                <span style={{ marginLeft: 8 }}>\n                    {`${value}@semi.com`}\n                </span>\n                <IconClose onClick={onClose} />\n            </div>\n        );\n    }\n\n    render() {\n        const { value } = this.state;\n        return (\n            <TagInput \n                value={value} \n                onChange={value=>this.setState({ value })}\n                renderTagItem={(value, index, onClose) => this.renderTagItem(value, index, onClose)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Change on Select in React\nDESCRIPTION: This example demonstrates the use of Cascader component with changeOnSelect prop, allowing parent options to be selected. It shows both regular and searchable versions of the component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <div>\n            <Cascader\n                style={{ width: 400 }}\n                treeData={treeData}\n                changeOnSelect\n                placeholder=\"Change on select\"\n            />\n            <br/>\n            <br/>\n            <Cascader\n                style={{ width: 400 }}\n                treeData={treeData}\n                changeOnSelect\n                placeholder=\"Searchable change on select\"\n                filterTreeNode\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Upload Button Implementation in React\nDESCRIPTION: Demonstrates the basic usage of the Upload component with a button trigger.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    return (\n        <Upload action=\"https://api.semi.design/upload\">\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Dropdown Menu Positioning in React\nDESCRIPTION: Demonstrates how to set the position of the dropdown menu for AutoComplete using the position prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            position=\"top\"\n            placeholder=\"The options menu is shown at the top\"\n            style={{ width: 200, margin: 10 }}\n        ></AutoComplete>\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            position=\"rightTop\"\n            placeholder=\"The options menu is shown on the right\"\n            style={{ width: 200, margin: 10 }}\n        ></AutoComplete>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Week Start Day in Calendar\nDESCRIPTION: Demonstrates how to set the starting day of the week in the Calendar component using the weekStartsOn prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { RadioGroup, Calendar, Radio } from '@douyinfe/semi-ui';\n\n() => {\n    const [v, setV] = useState(0);\n    return (\n        <div>\n            <RadioGroup type=\"button\" defaultValue={v} aria-label=\"StartOfWeek\" name=\"demo-radio-group-vertical\" onChange={e => setV(e.target.value)}>\n                <Radio value={0}>Sunday</Radio>\n                <Radio value={1}>Mon</Radio>\n                <Radio value={2}>Tue</Radio>\n                <Radio value={3}>Wed</Radio>\n                <Radio value={4}>Thu</Radio>\n                <Radio value={5}>Fri</Radio>\n                <Radio value={6}>Sat</Radio>\n            </RadioGroup>\n            <Calendar\n                mode=\"month\"\n                weekStartsOn={v}\n            ></Calendar>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Slots to Cascader Component in React\nDESCRIPTION: Demonstrates how to add custom content using bottomSlot and topSlot props in the Cascader component. This example shows how to add a custom footer with a link to create new options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const { Text } = Typography;\n    const slotStyle = {\n        height: '36px',\n        display: 'flex',\n        padding: '0 32px',\n        alignItems: 'center',\n        cursor: 'pointer',\n        borderTop: '1px solid var(--semi-color-border)'\n    };\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n            bottomSlot={\n                <div style={slotStyle}>\n                    <Text>{`Can't find a relevant option?`}</Text>\n                    <Text link>Go to create</Text>\n                </div>\n            }\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Date Disabling in DatePicker Range with React and Semi Design\nDESCRIPTION: This snippet shows how to dynamically disable dates in a DatePicker range component based on the current selection. It uses the 'disabledDate' prop with an options parameter.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport * as dateFns from 'date-fns';\n\n() => (\n    <div>\n        <h4>动态禁用日期：禁止选择之前的日期</h4>\n        <DatePicker\n            type={'dateRange'}\n            disabledDate={(date, options) => {\n                const { rangeStart } = options;\n                const startDate = dateFns.parseISO(rangeStart);\n                return dateFns.isBefore(date, startDate);\n            }}\n            style={{ width: 260 }}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker Controls with React\nDESCRIPTION: Example demonstrating how to use DatePicker component with ref-based controls for opening, closing, focusing and blurring the picker. Shows integration with Space and Button components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { DatePicker, Space, Button } from '@douyinfe/semi-ui';\nimport { BaseDatePicker } from '@douyinfe/semi-ui/lib/es/datePicker';\n\nfunction Demo() {\n    const ref = useRef();\n    // Typescript 写法\n    // const ref = useRef<BaseDatePicker>();\n    // 为什么不引用入口导出的 DatePicker？-> 入口组件是个 forwardRef 组件，ref 透传到了这个组件上\n\n\n    const handleClickOutside = () => {\n        console.log('click outside');\n    };\n\n    return (\n        <Space vertical align={'start'}>\n            <Space>\n                <Button onClick={() => ref.current.open()}>open</Button>\n                <Button onClick={() => ref.current.close()}>close</Button>\n                <Button onClick={() => ref.current.focus()}>focus</Button>\n                <Button onClick={() => ref.current.blur()}>blur</Button>\n            </Space>\n            <div>\n                <DatePicker type=\"dateTime\" ref={ref} onClickOutSide={handleClickOutside} />\n            </div>\n        </Space>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Avatar, Title, and Paragraph Skeleton Components\nDESCRIPTION: Shows how to combine Avatar, Title, and Paragraph skeleton components to create a complex content placeholder for user profile with description.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        display: 'flex',\n        alignItems: 'flex-start',\n    };\n\n    const placeholder = (\n        <div style={style}>\n            <Skeleton.Avatar style={{ marginRight: 12 }} />\n            <div>\n                <Skeleton.Title style={{ width: 120, marginBottom: 12, marginTop: 12 }} />\n                <Skeleton.Paragraph style={{ width: 240 }} rows={3} />\n            </div>\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <div style={style}>\n                <Avatar color=\"blue\" style={{ marginRight: 12 }}>\n                    UI\n                </Avatar>\n                <div>\n                    <h3>Semi UI</h3>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                </div>\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Implementation in React\nDESCRIPTION: Demonstrates basic usage of Modal component with open/close functionality and event handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n        console.log('Ok button clicked');\n    }\n    handleAfterClose(){\n        console.log('After Close callback executed');\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n        console.log('Cancel button clicked');\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>Open Modal</Button>\n                <Modal\n                    title=\"Basic Modal\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    afterClose={this.handleAfterClose}\n                    onCancel={this.handleCancel}\n                    closeOnEsc={true}\n                >\n                    This is the content of a basic modal.\n                    <br/>\n                    More content...\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SideSheet Implementation\nDESCRIPTION: Demonstrates basic usage of SideSheet with a toggle button and basic content. The panel slides from the right by default and can be closed by clicking the mask area.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const change = () => {\n        setVisible(!visible);\n    };\n    return (\n        <>\n            <Button onClick={change}>Open SideSheet</Button>\n            <SideSheet title=\"滑动侧边栏\" visible={visible} onCancel={change}>\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Dark/Light Mode with Semi Design Components in React\nDESCRIPTION: This code snippet demonstrates how to create a layout with various Semi Design components and implement block-level dark/light mode switching. It includes a header, sidebar, and content area with multiple UI elements such as Nav, Button, Breadcrumb, Steps, and Badges.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Layout, Nav, Button, Breadcrumb, Avatar, Steps, Pagination, Row, Badge, Tag, Rating, Tooltip, Timeline, Popover } from '@douyinfe/semi-ui';\nimport { IconSemiLogo, IconCamera, IconBell, IconHelpCircle, IconBytedanceLogo, IconHome, IconHistogram, IconLive, IconSetting, IconEdit, IconList } from '@douyinfe/semi-icons';\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const [mode, setMode] = useState('semi-always-dark');\n\n    const switchMode = () => {\n        const newMode = mode === 'semi-always-dark' ? 'semi-always-light' : 'semi-always-dark';\n        setMode(newMode);\n    };\n\n    const rowStyle = { margin: '16px 10px' };\n    const badgeStyle = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n        display: 'inline-block',\n    };\n    const tagStyle = { marginRight: 8, marginBottom: 8 };\n\n    return (\n        <>\n            <Button\n                onClick={switchMode}\n                style={{ marginBottom: 4 }}\n            >\n                Switch Content Mode\n            </Button>\n            <Layout style={{ border: '1px solid var(--semi-color-border)' }}>\n                <Header style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                    <div >\n                        <Nav mode='horizontal' defaultSelectedKeys={['Home']}>\n                            <Nav.Header>\n                                <IconSemiLogo style={{ fontSize: 36 }} />\n                            </Nav.Header>\n                            <span\n                                style={{\n                                    color: 'var(--semi-color-text-2)'\n                                }}\n                            >\n                                <span\n                                    style={{\n                                        marginRight: '24px',\n                                        color: 'var(--semi-color-text-0)',\n                                        fontWeight: '600',\n                                    }}>Semi Design</span>\n                                <span style={{ marginRight: '24px' }}>Semi Theme</span>\n                                <span>Semi Blocks</span>\n                            </span>\n                            <Nav.Footer>\n                                <Button\n                                    theme=\"borderless\"\n                                    icon={<IconBell size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Button\n                                    theme=\"borderless\"\n                                    icon={<IconHelpCircle size=\"large\" />}\n                                    style={{\n                                        color: 'var(--semi-color-text-2)',\n                                        marginRight: '12px',\n                                    }}\n                                />\n                                <Avatar color='orange' size='small'>YJ</Avatar>\n                            </Nav.Footer>\n                        </Nav>\n                    </div>\n                </Header>\n                <Layout >\n                    <Sider style={{ backgroundColor: 'var(--semi-color-bg-1)' }}>\n                        <Nav\n                            style={{ maxWidth: 220, height: '100%' }}\n                            defaultSelectedKeys={['Home']}\n                            items={[\n                                { itemKey: 'Home', text: 'Home', icon: <IconHome size=\"large\" /> },\n                                { itemKey: 'Histogram', text: 'Histogram', icon: <IconHistogram size=\"large\" /> },\n                                { itemKey: 'Live', text: 'Live', icon: <IconLive size=\"large\" /> },\n                                { itemKey: 'Setting', text: 'Setting', icon: <IconSetting size=\"large\" /> },\n                            ]}\n                            footer={{\n                                collapseButton: true,\n                            }}\n                        />\n                    </Sider>\n                    <Content\n                        className={mode}\n                        style={{\n                            padding: '24px',\n                            backgroundColor: 'var(--semi-color-bg-1)'\n                        }}\n                    >\n                        <Breadcrumb\n                            style={{\n                                marginBottom: '24px'\n                            }}\n                            routes={['Home', 'Page Section', 'Detail']}\n                        />\n                        <div\n                            style={{\n                                borderRadius: '10px',\n                                border: '1px solid var(--semi-color-border)',\n                                height: '700px',\n                                padding: '32px'\n                            }}\n                        >\n                            <Row style={rowStyle}>\n                                <div id='popup-layer'></div>\n                                <Nav\n                                    mode={'horizontal'}\n                                    getPopupContainer={() => document.querySelector('#popup-layer')}\n                                    items={[\n                                        { itemKey: 'user', text: 'Option1', icon: <IconEdit /> },\n                                        { itemKey: 'union', text: 'Option2', icon: <IconCamera /> },\n                                        {\n                                            itemKey: 'approve-management',\n                                            text: 'Group3',\n                                            icon: <IconList />,\n                                            items: [\n                                                '3-1',\n                                                '3-2'\n                                            ]\n                                        },\n                                    ]}\n                                />\n                                <br /><br />\n                                <Pagination total={80} showSizeChanger></Pagination>\n                                <br />\n                                <Steps current={1}>\n                                    <Steps.Step title=\"Finished\" description=\"This is a description.\" />\n                                    <Steps.Step title=\"In Progress\" description=\"This is a description.\" />\n                                    <Steps.Step title=\"Waiting\" description=\"This is a description.\" />\n                                </Steps>\n                                <br />\n                                <Steps current={1} status=\"error\">\n                                    <Steps.Step title=\"Finished\" description=\"This is a description\" />\n                                    <Steps.Step title=\"In Process\" description=\"This is a description\" />\n                                    <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n                                </Steps>\n                            </Row>\n                            <Row style={rowStyle}>\n                                <div style={{ display: 'flex' }}>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge count={5} theme='solid' >\n                                            <Avatar color='blue' shape='square' style={badgeStyle}>XZ</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge count={5} theme='light' >\n                                            <Avatar color='cyan' shape='square' style={badgeStyle}>YB</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge count={5} theme='inverted'>\n                                            <Avatar color='indigo' shape='square' style={badgeStyle}>LX</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge dot theme='solid' >\n                                            <Avatar color='light-blue' shape='square' style={badgeStyle}>YZ</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: 8 }}>\n                                        <Badge dot theme='light' >\n                                            <Avatar color='teal' shape='square' style={badgeStyle}>HW</Avatar>\n                                        </Badge>\n                                    </div>\n                                    <div style={{ padding: '8px', borderRadius: '4px', backgroundColor: 'var(--semi-color-fill-0)' }}>\n                                        <Badge dot theme='inverted'>\n                                            <Avatar color='green' shape='square' style={badgeStyle}>XM</Avatar>\n                                        </Badge>\n                                    </div>\n                                </div>\n                                <br />\n                                <div>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component Usage with Different Child Types\nDESCRIPTION: Demonstrates using Tooltip with different types of children components including functional components with forwardRef, class components, and DOM elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { forwardRef } from 'react';\nimport { Tooltip, Space } from '@douyinfe/semi-ui';\n\nconst style={ border: '2px solid var(--semi-color-border)', paddingLeft: 4, paddingRight: 4, borderRadius: 4 };\n\nconst FCChildren = forwardRef((props, ref) => {\n    return (<span {...props} ref={ref} style={style}>Functional Component</span>);\n});\n\nclass MyComponent extends React.Component {\n    render() {\n        return (<span {...this.props} style={style}>ClassComponent</span>);\n    }\n};\n\nfunction Demo() {\n    return (\n        <Space>\n            <Tooltip content={'semi design'}>\n                <FCChildren />\n            </Tooltip>\n            <Tooltip content={'semi design'}>\n                <MyComponent />\n            </Tooltip>\n            <Tooltip content={'semi design'}>\n                <span style={style}>DOM</span>\n            </Tooltip>\n        </Space>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Progress Bars with strokeGradient in React\nDESCRIPTION: This example demonstrates how to create circular and linear progress bars with gradient colors using the Progress component from Semi Design. It uses the strokeGradient property to automatically fill color intervals between defined color stops and shows both static and animated implementations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { Space, Progress, Button } from '@douyinfe/semi-ui';\nimport { IconChevronLeft, IconChevronRight } from '@douyinfe/semi-icons';\n\n() => {\n    const [percent, setPercent] = useState(65);\n    const [percentInterval, setPercentInterval] = useState(0);\n    useEffect(() => {\n        setTimeout(\n            () => {\n                setPercentInterval(percentInterval > 100 ? 0 : percentInterval + 3);\n            },\n            percentInterval === 0 || percentInterval > 100 ? 1200 : 290 - (percentInterval % 50) * 3\n        );\n    }, [percentInterval]);\n    const strokeArr = [\n        { percent: 0, color: 'rgb(249, 57, 32)' },\n        { percent: 50, color: '#46259E' },\n        { percent: 100, color: 'hsla(125, 50%, 46% / 1)' },\n    ];\n    const strokeArrReverse = [\n        { percent: 0, color: 'hsla(125, 50%, 46% / 1)' },\n        { percent: 50, color: '#46259E' },\n        { percent: 100, color: 'rgb(249, 57, 32)' },\n    ];\n    return (\n        <>\n            <Space spacing={20}>\n                <div>\n                    <Progress\n                        percent={percentInterval}\n                        stroke={strokeArr}\n                        strokeGradient={true}\n                        showInfo\n                        type=\"circle\"\n                        width={100}\n                        aria-label=\"file download speed\"\n                    />\n                </div>\n                <div>\n                    <Progress\n                        percent={percentInterval}\n                        stroke={strokeArrReverse}\n                        strokeGradient={true}\n                        showInfo\n                        type=\"circle\"\n                        width={100}\n                        aria-label=\"file download speed\"\n                    />\n                </div>\n            </Space>\n            <div style={{ width: '100%', margin: '20px 0 10px' }}>\n                <Progress\n                    percent={percent}\n                    stroke={strokeArr}\n                    strokeGradient={true}\n                    showInfo\n                    size=\"large\"\n                    aria-label=\"file download speed\"\n                />\n            </div>\n            <Button\n                icon={<IconChevronLeft />}\n                theme=\"light\"\n                onClick={() => {\n                    setPercent(percent - 5);\n                }}\n                disabled={percent === 0}\n            />\n            <Button\n                icon={<IconChevronRight />}\n                theme=\"light\"\n                onClick={() => {\n                    setPercent(percent + 5);\n                }}\n                disabled={percent === 100}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Position in Scrollable Tabs (React)\nDESCRIPTION: Shows how to modify the position of scroll arrows in the Tabs component using the 'arrowPosition' prop. The example demonstrates 'start', 'both', and 'end' positions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible arrowPosition={'start'}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                        <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                            Content of card tab {i}\n                        </TabPane>\n                    ))}\n                </Tabs>\n                <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible arrowPosition={'both'}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                        <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                            Content of card tab {i}\n                        </TabPane>\n                    ))}\n                </Tabs>\n                <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible arrowPosition={'end'}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                        <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                            Content of card tab {i}\n                        </TabPane>\n                    ))}\n                </Tabs>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Arrow Point Center Demo\nDESCRIPTION: Shows the difference between arrow pointing at center versus edge alignment in tooltips.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <>\n            <div>\n                <Tooltip\n                    position='topLeft'\n                    content='semi design tooltip'>\n                    <Button type='secondary' style={{ marginRight: 8 }}>Arrow Point at Center</Button>\n                </Tooltip>\n            </div>\n\n            <div style={{ marginTop: 20 }}>\n                <Tooltip\n                    content='semi design tooltip'\n                    arrowPointAtCenter={false}\n                    position='topLeft'\n                >\n                    <Button type='secondary' style={{ marginRight: 8, width: 120 }}>Edge align</Button>\n                </Tooltip>\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Inset Input in DatePicker Panel\nDESCRIPTION: Demonstrates how to use the insetInput prop to embed input boxes within the date panel, which is useful for direct time input or independent modification of start/end dates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <DatePicker type=\"date\" insetInput />\n            <br />\n            <br />\n            <DatePicker type=\"dateTime\" insetInput />\n            <br />\n            <br />\n            <DatePicker type=\"dateRange\" insetInput style={{ width: 260 }} />\n            <br />\n            <br />\n            <DatePicker type=\"dateTimeRange\" insetInput style={{ width: 400 }} />\n            <br />\n            <br />\n            <DatePicker type=\"month\" placeholder=\"please input month\" insetInput style={{ width: 140 }} />\n            <br />\n            <br />\n            <DatePicker type=\"monthRange\" placeholder=\"please input month Range\" insetInput style={{ width: 200 }} />\n            <br />\n            <br />\n            <DatePicker type=\"dateTime\" format=\"yyyy-MM-dd HH:mm\" insetInput />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 使用OptGroup实现Select选项分组\nDESCRIPTION: 展示了如何使用Select.OptGroup组件实现选项分组功能。注意OptGroup必须为Select的直接子元素，且在动态更新children时需要更新OptGroup的key。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <Select placeholder=\"\" style={{ width: 180 }} filter>\n        <Select.OptGroup label=\"Asia\">\n            <Select.Option value=\"a-1\">China</Select.Option>\n            <Select.Option value=\"a-2\">Korea</Select.Option>\n        </Select.OptGroup>\n        <Select.OptGroup label=\"Europe\">\n            <Select.Option value=\"b-1\">Germany</Select.Option>\n            <Select.Option value=\"b-2\">France</Select.Option>\n        </Select.OptGroup>\n        <Select.OptGroup label=\"South America\">\n            <Select.Option value=\"c-1\">Peru</Select.Option>\n        </Select.OptGroup>\n    </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Logic in Semi Design Select\nDESCRIPTION: This example demonstrates how to customize the search logic in a Select component by providing a custom filter function. It shows case-insensitive searching for uppercase labels.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    function searchLabel(sugInput, option) {\n        let label = option.label.toUpperCase();\n        let sug = sugInput.toUpperCase();\n        return label.includes(sug);\n    }\n    return (\n        <Select filter={searchLabel} style={{ width: '180px' }} placeholder=\"try douyin\">\n            <Select.Option value=\"douyin\">douyin</Select.Option>\n            <Select.Option value=\"ulikecam\">HOTSOON</Select.Option>\n            <Select.Option value=\"jianying\">PIPIXIA</Select.Option>\n            <Select.Option value=\"xigua\">XIGUA</Select.Option>\n        </Select>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Virtualizing Search Results in Cascader for Performance Optimization\nDESCRIPTION: This example shows how to use virtualizeInSearch to improve performance when handling a large number of search results in a Cascader component. It configures virtualization with height, width, and item size settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Checkbox, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = useMemo(() => (\n        ['Generic', 'Scene'].map((label, m) => ({\n            label: label,\n            value: m,\n            children: new Array(100).fill(0).map((item, n)=> ({\n                value: `${m}-${n}`,\n                label: `${m}-${n} level one`,\n                children: new Array(20).fill(0).map((item, o)=> ({\n                    value: `${m}-${n}-${o}`,\n                    label: `${m}-${n}-${o} level two detail info`,\n                })),\n            }))\n        }))\n    ), []);\n    \n    let virtualize = {\n        // The height is the panel's default height of 180px minus the upper and lower padding 2 * 8px\n        height: 172,\n        width: 320,\n        itemSize: 36, \n    };\n\n    const filterRender = useCallback((props) => {\n        const { data, onCheck, checkStatus, className } = props;\n        return (\n            <div \n                key={data.value}\n                className={className}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Wall with Image Preview Integration\nDESCRIPTION: Demonstrates how to use the renderThumbnail API along with the Image component to enable click-to-enlarge preview functionality in a photo wall upload component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Image } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'music.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        }\n    ];\n    return (\n        <>\n            <Upload\n                action={action}\n                listType=\"picture\"\n                accept=\"image/*\"\n                multiple\n                defaultFileList={defaultFileList}\n                renderThumbnail={(file) => (<Image src={file.url} />)}\n            >\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Progressive Image Loading with Placeholder\nDESCRIPTION: Demonstrates how to implement progressive loading for large images using the 'placeholder' prop, which displays a low-resolution image while the high-resolution one is loading.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [timestamp, setTimestamp] = React.useState('');\n    return (  \n        <>\n            <Image \n                width={300}\n                height={200}\n                src={`https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-big.png?${timestamp}`}\n                placeholder={<Image \n                    src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-small.jpeg'\n                    width={300}\n                    height={200}\n                    preview={false}\n                />}\n            />\n            <br />\n            <Button \n                theme={'solid'}\n                onClick={() => {\n                    setTimestamp(Date.now());\n                }}\n                style={{ marginTop: 10 }}\n            >Reload</Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Auto-Expanding Parent Nodes in Semi Design Tree Component\nDESCRIPTION: This example demonstrates the autoExpandParent property of Tree component, which requires all child nodes to be collapsed before allowing the parent node to collapse. This behavior differs from the default where parent nodes can be collapsed independently.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            expandedKeys: ['0', '0-0']\n        };\n    }\n    onExpand(value) {\n        this.setState({ expandedKeys: value });\n    }\n    render() {\n        const treeData = [\n            {\n                label: '亚洲',\n                value: 'Asia',\n                key: '0',\n                children: [\n                    {\n                        label: '中国',\n                        value: 'China',\n                        key: '0-0',\n                        children: [\n                            {\n                                label: '北京',\n                                value: 'Beijing',\n                                key: '0-0-0',\n                            },\n                            {\n                                label: '上海',\n                                value: 'Shanghai',\n                                key: '0-0-1',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: '北美洲',\n                value: 'North America',\n                key: '1',\n            }\n        ];\n        const style = {\n            width: 260,\n            height: 420,\n            border: '1px solid var(--semi-color-border)'\n        };\n        return (\n            <>\n                <div>\n                    需要先将\"中国\"节点收起后，才能够收起\"亚洲\"节点\n                </div>\n                <br />\n                <Tree\n                    autoExpandParent\n                    treeData={treeData}\n                    onExpand={v=>this.onExpand(v)}\n                    expandedKeys={this.state.expandedKeys}\n                    style={style}\n                />\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Modals with Semi Design\nDESCRIPTION: Shows various types of confirmation modals including success, info, error, warning, and custom icons using static methods.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\nimport { IconSend } from '@douyinfe/semi-icons';\n\nModalComponent = function(props) {\n    function success() {\n        Modal.success({ 'title': 'This is a success message', 'content': 'bla bla bla...' });\n    }\n\n    function info() {\n        Modal.info({ 'title': 'Here is some info', 'content': 'bla bla bla...' });\n    }\n\n    function error() {\n        Modal.error({ 'title': 'Unfortunately, there is an error', 'content': 'bla bla bla...' });\n    }\n\n    function warning() {\n        Modal.warning({ 'title': 'Warning: be cautious ahead', 'content': 'bla bla bla...' });\n    }\n\n    function confirm() {\n        Modal.confirm({ 'title': 'Are you sure ?', 'content': 'bla bla bla...' });\n    }\n\n    function custom() {\n        Modal.info({ 'title': 'This is a custom modal', 'content': 'bla bla bla...', icon: <IconSend />, cancelButtonProps: { theme: 'borderless' }, okButtonProps: { theme: 'solid' }, });\n    }\n\n    return (\n        <div>\n            <Button onClick={info}>Info</Button>\n            <br/>\n            <br/>\n            <Button onClick={success}>Success</Button>\n            <br/>\n            <br/>\n            <Button onClick={error} type=\"danger\">Error</Button>\n            <br/>\n            <br/>\n            <Button onClick={warning} type=\"warning\">Warning</Button>\n            <br/>\n            <br/>\n            <Button onClick={confirm} type=\"primary\">Confirm</Button>\n            <br/>\n            <br/>\n            <Button onClick={custom}>Custom</Button>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Draggable Transfer Component with Sorting\nDESCRIPTION: 展示了如何创建支持拖拽排序的穿梭框。通过设置draggable属性为true，启用拖拽排序功能，该功能在v1.11.0版本后支持。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n() => {\n    const data = Array.from({ length: 30 }, (v, i) => {\n        return {\n            label: `选项名称 ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            dataSource={data}\n            defaultValue={[2, 4]}\n            draggable\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Variable Button Groups with Semi Design\nDESCRIPTION: Shows how to create button groups with different type variations including primary, secondary, tertiary, warning, and danger types.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ButtonGroup } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const types = ['primary', 'secondary', 'tertiary', 'warning', 'danger'];\n\n    return (\n        <div style={{ display: 'flex' }}>\n            {types.map(type => (\n                <div style={{ marginRight: 10 }} key={type}>\n                    <ButtonGroup type={type} aria-label=\"Operate button group\">\n                        <Button>Copy</Button>\n                        <Button>Search</Button>\n                        <Button>Cut</Button>\n                    </ButtonGroup>\n                </div>\n            ))}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable TreeSelect with Semi Design\nDESCRIPTION: Demonstrates a searchable TreeSelect component with single/multiple selection modes and filtered results display. Includes search callback functionality and switch control for showing filtered results only.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect, Switch } from '@douyinfe/semi-ui';\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            showFilteredOnly: false,\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSearch = this.onSearch.bind(this);\n    }\n    onChange(showFilteredOnly) {\n        this.setState({ showFilteredOnly });\n    }\n    onSearch(inputValue, filteredExpandedKeys, filteredNodes) {\n        console.log('onSearch', inputValue, filteredExpandedKeys, filteredNodes);\n    }\n    render() {\n        const treeData = [\n            {\n                label: 'Asia',\n                value: 'Asia',\n                key: '0',\n                children: [\n                    {\n                        label: 'China',\n                        value: 'China',\n                        key: '0-0',\n                        children: [\n                            {\n                                label: 'Beijing',\n                                value: 'Beijing',\n                                key: '0-0-0',\n                            },\n                            {\n                                label: 'Shanghai',\n                                value: 'Shanghai',\n                                key: '0-0-1',\n                            },\n                        ],\n                    },\n                    {\n                        label: 'Japan',\n                        value: 'Japan',\n                        key: '0-1',\n                        children: [\n                            {\n                                label: 'Osaka',\n                                value: 'Osaka',\n                                key: '0-1-0'\n                            }\n                        ]\n                    },\n                ],\n            },\n            {\n                label: 'North America',\n                value: 'North America',\n                key: '1',\n                children: [\n                    {\n                        label: 'United States',\n                        value: 'United States',\n                        key: '1-0'\n                    },\n                    {\n                        label: 'Canada',\n                        value: 'Canada',\n                        key: '1-1'\n                    }\n                ]\n            }\n        ];\n        const { showFilteredOnly } = this.state;\n        return (\n            <>\n                <span>showFilteredOnly</span>\n                <Switch\n                    checked={showFilteredOnly}\n                    onChange={this.onChange}\n                    size=\"small\"\n                />\n                <br/>\n                <br/>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={treeData}\n                    filterTreeNode\n                    showFilteredOnly={showFilteredOnly}\n                    placeholder=\"单选可搜索的\"\n                    onSearch={this.onSearch}\n                />\n                <br/>\n                <br/>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={treeData}\n                    multiple\n                    filterTreeNode\n                    maxTagCount={2}\n                    showFilteredOnly={showFilteredOnly}\n                    placeholder=\"多选可搜索的\"\n                    searchPlaceholder=\"请输入关键字开始搜索\"\n                    onSearch={this.onSearch}\n                />\n                <br/>\n                <br/>\n                <TreeSelect\n                    style={{ width: 300 }}\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                    treeData={treeData}\n                    multiple\n                    filterTreeNode\n                    maxTagCount={2}\n                    showFilteredOnly={showFilteredOnly}\n                    placeholder=\"搜索框autofocus\"\n                    searchPlaceholder=\"autofocus\"\n                    searchAutoFocus\n                    onSearch={this.onSearch}\n                />\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation with Custom Header and Footer\nDESCRIPTION: Demonstrates how to define custom header and footer areas for the navigation component. The header includes a logo and text, while the footer includes a collapse button for vertical navigation.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconSetting } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                defaultOpenKeys={['task']}\n                bodyStyle={{ height: 320 }}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                    {\n                        text: 'Task Platform',\n                        icon: <IconSetting />,\n                        itemKey: 'task',\n                        items: ['Task Management', 'User Task Query'],\n                    },\n                ]}\n                onSelect={key => console.log(key)}\n                header={{\n                    logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                    text: 'Live Platform'\n                }}\n                footer={{\n                    collapseButton: true,\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tabbed Card Implementation\nDESCRIPTION: Shows how to integrate Tabs component within a Card to create tabbed content sections.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Tabs, TabPane } from '@douyinfe/semi-ui';\n\nfunction demo() {\n    return (\n        <Card title='Card title'>\n            <Tabs \n                type=\"line\" \n                style={{\n                    marginTop: -20,\n                    marginBottom: -20\n                }}\n            >\n                <TabPane tab=\"Tab 1\" itemKey=\"1\">\n                    <p>content1</p>\n                    <p>content1</p>\n                    <p>content1</p>\n                </TabPane>\n                <TabPane tab=\"Tab 2\" itemKey=\"2\">\n                    <p>content2</p>\n                    <p>content2</p>\n                    <p>content2</p>\n                </TabPane>\n            </Tabs>\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: PinCode with Format Restrictions\nDESCRIPTION: Shows different format restrictions for PinCode including numbers only, mixed alphanumeric, uppercase only, and lowercase only using various format options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode, Button, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <>\n            <Typography.Text>纯数字</Typography.Text>\n            <PinCode format={'number'} onComplete={value => console.log('pincode: ', value)} />\n            <br />\n            <Typography.Text>字母和数字</Typography.Text>\n            <PinCode format={'mixed'} onComplete={value => console.log('pincode: ', value)} />\n            <br />\n            <Typography.Text>只大写字母</Typography.Text>\n            <PinCode format={/[A-Z]/} onComplete={value => console.log('pincode: ', value)} />\n            <br />\n            <Typography.Text>只小写字母(函数判断)</Typography.Text>\n            <PinCode\n                format={char => {\n                    return /[a-z]/.test(char);\n                }}\n                onComplete={value => console.log('pincode: ', value)}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 显示不同类型的Toast提示 (React)\nDESCRIPTION: 展示如何使用Toast的success、warning和error方法来显示不同类型的提示信息。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n    };\n\n    return (\n        <>\n            <Button style={{ color: `var(--semi-color-success)` }} onClick={() => Toast.success('Hi,Bytedance dance dance')}>Success</Button>\n            <br />\n            <br />\n            <Button type=\"warning\" onClick={() => Toast.warning(opts)}>\n                Warning\n            </Button>\n            <br />\n            <br />\n            <Button type=\"danger\" onClick={() => Toast.error(opts)}>\n                Error\n            </Button>\n        </>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Custom Ellipsis Rendering for Breadcrumb in React\nDESCRIPTION: Demonstrates how to customize the ellipsis rendering for collapsed Breadcrumb items using the moreType property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb moreType='popover'>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>Many levels</Breadcrumb.Item>\n        <Breadcrumb.Item>Another level</Breadcrumb.Item>\n        <Breadcrumb.Item>Another level again</Breadcrumb.Item>\n        <Breadcrumb.Item>Here is another one</Breadcrumb.Item>\n        <Breadcrumb.Item>Penultimate</Breadcrumb.Item>\n        <Breadcrumb.Item>Detail</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Button Groups with Semi Design\nDESCRIPTION: Demonstrates implementation of split button groups combining Button and Dropdown components with various themes and states.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SplitButtonGroup, Dropdown, Button } from '@douyinfe/semi-ui';\nimport { IconTreeTriangleDown } from '@douyinfe/semi-icons';\n\nfunction SplitButtonDemo(){\n\n    const menu = [\n        { node: 'title', name: 'Title' },\n        { node: 'item', name: 'Edit', onClick: () => console.log('Edit clicked') },\n        { node: 'item', name: 'Reset', type: 'secondary' },\n        { node: 'divider' },\n        { node: 'item', name: 'Create', type: 'tertiary' },\n        { node: 'item', name: 'Copy', type: 'warning' },\n        { node: 'divider' },\n        { node: 'item', name: 'Delete', type: 'danger' },\n    ];\n\n    const [btnVisible, setBtnVisible] = useState({\n        1: false,\n        2: false,\n        3: false\n    });\n\n    const handleVisibleChange = (key, visible)=>{\n        newBtnVisible = { ...btnVisible };\n        newBtnVisible[key] = visible;\n        setBtnVisible(newBtnVisible);\n    };\n\n    return (\n        <div>\n            <SplitButtonGroup style={{ marginRight: 10 }} aria-label=\"Project operate button group\">\n                <Button theme=\"solid\" type=\"primary\">SplitButton</Button>\n                <Dropdown onVisibleChange={(v)=>handleVisibleChange(1, v)} menu={menu} trigger=\"click\" position=\"bottomRight\">\n                    <Button style={btnVisible[1]?{ background: 'var(--semi-color-primary-hover)', padding: '8px 4px' }:{ padding: '8px 4px' }} theme=\"solid\" type=\"primary\" icon={<IconTreeTriangleDown size=\"small\" />}></Button>\n                </Dropdown>\n            </SplitButtonGroup>\n            <SplitButtonGroup style={{ marginRight: 10 }} aria-label=\"Project operate button group\">\n                <Button theme=\"light\" type=\"primary\">SplitButton</Button>\n                <Dropdown onVisibleChange={(v)=>handleVisibleChange(2, v)} menu={menu} trigger=\"click\" position=\"bottomRight\">\n                    <Button style={btnVisible[2]?{ background: 'var(--semi-color-fill-1)', padding: '8px 4px' }:{ padding: '8px 4px' }} theme=\"light\" type=\"primary\" icon={<IconTreeTriangleDown size=\"small\" />}></Button>\n                </Dropdown>\n            </SplitButtonGroup>\n            <SplitButtonGroup aria-label=\"Project operate button group\">\n                <Button style={btnVisible[3]?{ background: 'var(--semi-color-fill-0)' }:null} theme=\"borderless\" type=\"primary\">SplitButton</Button>\n                <Dropdown onVisibleChange={(v)=>handleVisibleChange(3, v)} menu={menu} trigger=\"click\" position=\"bottomRight\">\n                    <Button style={btnVisible[3]?{ background: 'var(--semi-color-fill-1)', padding: '8px 4px' }:{ padding: '8px 4px' }} theme=\"borderless\" type=\"primary\" icon={<IconTreeTriangleDown size=\"small\" />}></Button>\n                </Dropdown>\n            </SplitButtonGroup>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Trigger Modes\nDESCRIPTION: Shows different trigger modes for the Dropdown component including hover, focus, and click events.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Tag, Input, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <Dropdown\n                trigger={'hover'}\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>Hover me</Tag>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                trigger={'focus'}\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu tabindex={-1}>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <div style={{\n                    border: '1px solid var(--semi-color-border)',\n                    borderRadius: 4,\n                    height: 36,\n                    width: 220\n                }}>\n                    Please use Tab to focus this div\n                </div>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                trigger={'click'}\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Button>Click me</Button>\n            </Dropdown>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs with Slash Style and State Management in React\nDESCRIPTION: Demonstrates the use of Tabs with slash style and state management for tab switching using a class component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs } from '@douyinfe/semi-ui';\n\nclass TabDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { key: '1' };\n        this.onTabClick = this.onTabClick.bind(this);\n    }\n\n    onTabClick(key, type) {\n        this.setState({ [type]: key });\n    }\n\n    render() {\n        // eslint-disable-next-line react/jsx-key\n        const contentList = [<div>文档</div>, <div>快速起步</div>, <div>帮助</div>];\n        const tabList = [\n            { tab: '文档', itemKey: '1' },\n            { tab: '快速起步', itemKey: '2' },\n            { tab: '帮助', itemKey: '3' },\n        ];\n        return (\n            <Tabs\n                type=\"slash\"\n                tabList={tabList}\n                onChange={key => {\n                    this.onTabClick(key, 'key');\n                }}\n            >\n                {contentList[this.state.key - 1]}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different Styles for Different Highlighted Text\nDESCRIPTION: Demonstrates using different highlight styles for different text by passing an array of objects to searchWords prop. Each object can specify the text to highlight along with its own style and className.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <h2>\n            <Highlight\n                component='span'\n                sourceString='从 Semi Design 到 Any Design  快速定义你的设计系统，并应用在设计稿和代码中'\n                searchWords={[\n                    { text: 'Semi', style: { backgroundColor: 'rgba(var(--semi-teal-5), 1)', color: 'rgba(var(--semi-white), 1)', padding: 4 }, className: 'keyword1' },\n                    { text: '设计系统', style: { backgroundColor: 'var(--semi-color-primary)', color: 'rgba(var(--semi-white), 1)', padding: 4 }, className: 'keyword2' },\n                    { text: '设计稿和代码', style: { backgroundColor: 'rgba(var(--semi-violet-5), 1)', color: 'rgba(var(--semi-white), 1)', padding: 4 }, className: 'keyword3' },\n                ]}\n                highlightStyle={{ borderRadius: 4 }}\n            />\n        </h2>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Grouped Radar Chart Specification with VChart\nDESCRIPTION: This code defines the configuration for a grouped radar chart using VChart. It includes data for multiple series ('A', 'B', 'C') across different months. The configuration specifies how the data is structured for the chart, including the category field ('month'), value field ('value'), and series field ('type'). It also enables stacking, area visibility, and configures the legend.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst groupSpec = {\n  type: 'radar',\n  data: [{\n    values: [[45, 61, 92, 57, 46, 36, 33, 63, 57, 53, 69, 40], \n            [31, 39, 81, 39, 64, 21, 58, 72, 47, 37, 80, 74],\n            [90, 95, 62, 52, 74, 87, 80, 69, 74, 84, 94, 23]]\n            .reduce((acc, cur, index) => {\n              const type = ['A', 'B', 'C'];\n              const month = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May.', 'Jun.', \n              'Jul.', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec.']\n              const result = cur.map((item, innerIndex) => ({\n                month: month[innerIndex],\n                value: item,\n                type: type[index]\n              }))\n              return acc.concat(result);\n            }, []),\n  }],\n  categoryField: 'month',\n  valueField: 'value',\n  seriesField: 'type',\n  stack: true,\n  area: { visible: true },\n  legends: { visible: true, orient: 'right'}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Loading with Skeleton Components in React\nDESCRIPTION: This example demonstrates how to create an animated loading effect using the Skeleton component from Semi-Design. The code shows a placeholder with avatar, title, and paragraph elements that display while content is loading, with the 'active' property enabling animation effects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        display: 'flex',\n        alignItems: 'flex-start',\n    };\n\n    const placeholder = (\n        <div style={style}>\n            <Skeleton.Avatar style={{ marginRight: 12 }} />\n            <div>\n                <Skeleton.Title style={{ width: 120, marginBottom: 12, marginTop: 12 }} />\n                <Skeleton.Paragraph style={{ width: 240 }} rows={3} />\n            </div>\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true} active>\n            <div style={style}>\n                <Avatar color=\"blue\" style={{ marginRight: 12 }}>\n                    UI\n                </Avatar>\n                <div>\n                    <h3>Semi UI</h3>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                </div>\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Restricting Upload File Types with Accept Property\nDESCRIPTION: Demonstrates how to restrict the types of files that can be uploaded using the accept property. Examples show accepting only images, videos, or specific file extensions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    let imageOnly = 'image/*';\n    let videoOnly = 'video/*';\n    let fileLimit = '.pdf,.png,.jpeg';\n    return (\n        <>\n            <Upload action={action} accept={imageOnly} style={{ marginBottom: 12 }}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Upload image\n                </Button>\n            </Upload>\n            <Upload action={action} accept={videoOnly} style={{ marginBottom: 12 }}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Upload video\n                </Button>\n            </Upload>\n            <Upload action={action} accept={fileLimit}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Upload PDF, PNG, JPEG\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Colors with Semi Tokens - JavaScript\nDESCRIPTION: This code snippet configures the Tailwind CSS theme settings to include Semi Tokens for better integration with atomic styles. It maps various semi-color variables to Tailwind's color palette, allowing seamless usage of tokens for consistent theming across light and dark modes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/tailwind/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.export = {\n    theme:{\n        colors:{\n            \"semi-color-white\": \"var(--semi-color-white)\",\n            \"semi-color-black\": \"var(--semi-color-black)\",\n            \"semi-color-primary\": \"var(--semi-color-primary)\",\n            \"semi-color-primary-hover\": \"var(--semi-color-primary-hover)\",\n            \"semi-color-primary-active\": \"var(--semi-color-primary-active)\",\n            \"semi-color-primary-disabled\": \"var(--semi-color-primary-disabled)\",\n            \"semi-color-primary-light-default\": \"var(--semi-color-primary-light-default)\",\n            \"semi-color-primary-light-hover\": \"var(--semi-color-primary-light-hover)\",\n            \"semi-color-primary-light-active\": \"var(--semi-color-primary-light-active)\",\n            \"semi-color-secondary\": \"var(--semi-color-secondary)\",\n            \"semi-color-secondary-hover\": \"var(--semi-color-secondary-hover)\",\n            \"semi-color-secondary-active\": \"var(--semi-color-secondary-active)\",\n            \"semi-color-secondary-disabled\": \"var(--semi-color-secondary-disabled)\",\n            \"semi-color-secondary-light-default\": \"var(--semi-color-secondary-light-default)\",\n            \"semi-color-secondary-light-hover\": \"var(--semi-color-secondary-light-hover)\",\n            \"semi-color-secondary-light-active\": \"var(--semi-color-secondary-light-active)\",\n            \"semi-color-tertiary\": \"var(--semi-color-tertiary)\",\n            \"semi-color-tertiary-hover\": \"var(--semi-color-tertiary-hover)\",\n            \"semi-color-tertiary-active\": \"var(--semi-color-tertiary-active)\",\n            \"semi-color-tertiary-light-default\": \"var(--semi-color-tertiary-light-default)\",\n            \"semi-color-tertiary-light-hover\": \"var(--semi-color-tertiary-light-hover)\",\n            \"semi-color-tertiary-light-active\": \"var(--semi-color-tertiary-light-active)\",\n            \"semi-color-default\": \"var(--semi-color-default)\",\n            \"semi-color-default-hover\": \"var(--semi-color-default-hover)\",\n            \"semi-color-default-active\": \"var(--semi-color-default-active)\",\n            \"semi-color-info\": \"var(--semi-color-info)\",\n            \"semi-color-info-hover\": \"var(--semi-color-info-hover)\",\n            \"semi-color-info-active\": \"var(--semi-color-info-active)\",\n            \"semi-color-info-disabled\": \"var(--semi-color-info-disabled)\",\n            \"semi-color-info-light-default\": \"var(--semi-color-info-light-default)\",\n            \"semi-color-info-light-hover\": \"var(--semi-color-info-light-hover)\",\n            \"semi-color-info-light-active\": \"var(--semi-color-info-light-active)\",\n            \"semi-color-success\": \"var(--semi-color-success)\",\n            \"semi-color-success-hover\": \"var(--semi-color-success-hover)\",\n            \"semi-color-success-active\": \"var(--semi-color-success-active)\",\n            \"semi-color-success-disabled\": \"var(--semi-color-success-disabled)\",\n            \"semi-color-success-light-default\": \"var(--semi-color-success-light-default)\",\n            \"semi-color-success-light-hover\": \"var(--semi-color-success-light-hover)\",\n            \"semi-color-success-light-active\": \"var(--semi-color-success-light-active)\",\n            \"semi-color-danger\": \"var(--semi-color-danger)\",\n            \"semi-color-danger-hover\": \"var(--semi-color-danger-hover)\",\n            \"semi-color-danger-active\": \"var(--semi-color-danger-active)\",\n            \"semi-color-danger-light-default\": \"var(--semi-color-danger-light-default)\",\n            \"semi-color-danger-light-hover\": \"var(--semi-color-danger-light-hover)\",\n            \"semi-color-danger-light-active\": \"var(--semi-color-danger-light-active)\",\n            \"semi-color-warning\": \"var(--semi-color-warning)\",\n            \"semi-color-warning-hover\": \"var(--semi-color-warning-hover)\",\n            \"semi-color-warning-active\": \"var(--semi-color-warning-active)\",\n            \"semi-color-warning-light-default\": \"var(--semi-color-warning-light-default)\",\n            \"semi-color-warning-light-hover\": \"var(--semi-color-warning-light-hover)\",\n            \"semi-color-warning-light-active\": \"var(--semi-color-warning-light-active)\",\n            \"semi-color-focus-border\": \"var(--semi-color-focus-border)\",\n            \"semi-color-disabled-text\": \"var(--semi-color-disabled-text)\",\n            \"semi-color-disabled-border\": \"var(--semi-color-disabled-border)\",\n            \"semi-color-disabled-bg\": \"var(--semi-color-disabled-bg)\",\n            \"semi-color-disabled-fill\": \"var(--semi-color-disabled-fill)\",\n            \"semi-color-shadow\": \"var(--semi-color-shadow)\",\n            \"semi-color-link\": \"var(--semi-color-link)\",\n            \"semi-color-link-hover\": \"var(--semi-color-link-hover)\",\n            \"semi-color-link-active\": \"var(--semi-color-link-active)\",\n            \"semi-color-link-visited\": \"var(--semi-color-link-visited)\",\n            \"semi-color-border\": \"var(--semi-color-border)\",\n            \"semi-color-nav-bg\": \"var(--semi-color-nav-bg)\",\n            \"semi-color-overlay-bg\": \"var(--semi-color-overlay-bg)\",\n            \"semi-color-fill-0\": \"var(--semi-color-fill-0)\",\n            \"semi-color-fill-1\": \"var(--semi-color-fill-1)\",\n            \"semi-color-fill-2\": \"var(--semi-color-fill-2)\",\n            \"semi-color-bg-0\": \"var(--semi-color-bg-0)\",\n            \"semi-color-bg-1\": \"var(--semi-color-bg-1)\",\n            \"semi-color-bg-2\": \"var(--semi-color-bg-2)\",\n            \"semi-color-bg-3\": \"var(--semi-color-bg-3)\",\n            \"semi-color-bg-4\": \"var(--semi-color-bg-4)\",\n            \"semi-color-text-0\": \"var(--semi-color-text-0)\",\n            \"semi-color-text-1\": \"var(--semi-color-text-1)\",\n            \"semi-color-text-2\": \"var(--semi-color-text-2)\",\n            \"semi-color-text-3\": \"var(--semi-color-text-3)\",\n            \"semi-color-highlight-bg\": \"var(--semi-color-highlight-bg)\",\n            \"semi-color-highlight\": \"var(--semi-color-highlight)\",\n            \"semi-color-data-0\": \"var(--semi-color-data-0)\",\n            \"semi-color-data-1\": \"var(--semi-color-data-1)\",\n            \"semi-color-data-2\": \"var(--semi-color-data-2)\",\n            \"semi-color-data-3\": \"var(--semi-color-data-3)\",\n            \"semi-color-data-4\": \"var(--semi-color-data-4)\",\n            \"semi-color-data-5\": \"var(--semi-color-data-5)\",\n            \"semi-color-data-6\": \"var(--semi-color-data-6)\",\n            \"semi-color-data-7\": \"var(--semi-color-data-7)\",\n            \"semi-color-data-8\": \"var(--semi-color-data-8)\",\n            \"semi-color-data-9\": \"var(--semi-color-data-9)\",\n            \"semi-color-data-10\": \"var(--semi-color-data-10)\",\n            \"semi-color-data-11\": \"var(--semi-color-data-11)\",\n            \"semi-color-data-12\": \"var(--semi-color-data-12)\",\n            \"semi-color-data-13\": \"var(--semi-color-data-13)\",\n            \"semi-color-data-14\": \"var(--semi-color-data-14)\",\n            \"semi-color-data-15\": \"var(--semi-color-data-15)\",\n            \"semi-color-data-16\": \"var(--semi-color-data-16)\",\n            \"semi-color-data-17\": \"var(--semi-color-data-17)\",\n            \"semi-color-data-18\": \"var(--semi-color-data-18)\",\n            \"semi-color-data-19\": \"var(--semi-color-data-19)\"\n        },\n        extend:{\n            borderRadius:{\n                \"semi-border-radius-extra-small\": \"var(--semi-border-radius-extra-small)\",\n                \"semi-border-radius-small\": \"var(--semi-border-radius-small)\",\n                \"semi-border-radius-medium\": \"var(--semi-border-radius-medium)\",\n                \"semi-border-radius-large\": \"var(--semi-border-radius-large)\",\n                \"semi-border-radius-circle\": \"var(--semi-border-radius-circle)\",\n                \"semi-border-radius-full\": \"var(--semi-border-radius-full)\",\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Semi Design CSS in Next.js\nDESCRIPTION: Example of importing Semi Design CSS in a Next.js project's global stylesheet.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles/globals.css */\n@import '~@douyinfe/semi-ui/dist/css/semi.min.css';\n```\n\n----------------------------------------\n\nTITLE: Multi-choice TreeSelect with Leaf-only Option in React\nDESCRIPTION: Illustrates how to use TreeSelect in multi-choice mode with the 'multiple' prop. It also demonstrates the 'leafOnly' prop for rendering only leaf nodes. The example includes a larger tree structure with nested children.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                        {\n                            label: 'Chengdu',\n                            value: 'Chengdu',\n                            key: '0-0-2',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n    return (\n        <div>\n            <TreeSelect\n                style={{ width: 300 }}\n                multiple\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"Please select\"\n            />\n            <br/>\n            <br/>\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                leafOnly\n                placeholder=\"Display leaf nodes only\"\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation\nDESCRIPTION: Comprehensive API documentation for a Breadcrumb component system, including property tables for Breadcrumb, Breadcrumb.Item, and Route interfaces. Includes accessibility requirements and text guidelines.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Breadcrumb\n\n| 属性       | 说明                                                                                                      | 类型                                       | 默认值 | 版本   |\n| ---------- |---------------------------------------------------------------------------------------------------------| ------------------------------------------ | ------ | ------ |\n| activeIndex| 受控使用，当前选择的导航序号                                                                                          | - | 2.61.0 |\n| autoCollapse      | 是否超出maxItemCount后自动折叠                                                                                   | boolean                                     | true     |    1.9.0   |\n| className  | 类名                                                                                                      | string                                     | -      |        |\n| compact    | 显示尺寸，是否紧凑                                                                                               | boolean                                    | true   |        |\n| maxItemCount      | 超出多少个进行自动折叠                                                                                             | number                                     | 4    | 1.9.0       |\n|moreType| 内置的...区域的渲染类型，可选值为 'default'、'popover'                                                                  |string|'default'|1.27.0|\n| renderItem | 自定义链接函数，配合 routes 使用                                                                                    | (Route: [Route](#Route)) => ReactNode             | -      | 0.27.0 |\n| renderMore| 自定义...区域的渲染                                                                                             |(restItem: ReactNode[]) => ReactNode|-|1.27.0|\n| routes     | router 的路由信息，由路由对象或字符串组成的数组，路由对象格式参考: [Route](#Route)                                                   | Array<[Route](#Route) \\| string\\>                            | -      |        |\n| separator  | 自定义的分隔符                                                                                                 | ReactNode                          | '/'    |        |\n| showTooltip | 是否展示 Tooltip 及相关配置: width，溢出宽度；   ellipsisPos，截断方式，从中间/末尾截断；                         opts，透传给Tooltip的属性 | boolean \\| showToolTipProps             | {width: 150, ellipsisPos: 'end', opts: { autoAdjustOverflow: true, position: \"bottomLeft\" }}      | 0.34.0 |\n| style      | 内联样式                                                                                                    | CSSProperties                                     | -      |        |\n| onClick    | 单击事件                                                                                                    | (item: [Route](#Route) , e: Event) => void | -      | 0.27.0 |\n```\n\n----------------------------------------\n\nTITLE: Implementing Left Sidebar Layout in React\nDESCRIPTION: Shows how to create a layout with a left sidebar using the Sider component along with Header, Content, and Footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Layout>\n                <Sider style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}>Sider</Sider>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n            </Layout>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Children with Link in Toast\nDESCRIPTION: Demonstrates how to create toasts with custom content including links and multi-line text.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Typography, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    let opts = {\n        content: (\n            <span>\n                <Text>Hi, Bytedance dance dance</Text>\n                <Text link style={{ marginLeft: 12 }}>\n                    More Info\n                </Text>\n            </span>\n        ),\n        duration: 3,\n    };\n\n    let multiLineOpts = {\n        content: (\n            <>\n                <div>Hi, Bytedance dance dance</div>\n                <div style={{ marginTop: 8 }}>\n                    <Text link>More Info</Text>\n                    <Text link style={{ marginLeft: 20 }}>\n                        Later\n                    </Text>\n                </div>\n            </>\n        ),\n        duration: 3,\n    };\n\n    return (\n        <>\n            <Button onClick={() => Toast.info(opts)}>Display Toast</Button>\n            <br />\n            <br />\n            <Button onClick={() => Toast.info(multiLineOpts)}>Display Multi-line Toast</Button>\n        </>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Image Preview\nDESCRIPTION: Demonstrates how to use ImagePreview to wrap multiple Image components to achieve a gallery with multi-image preview functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/colorful.jpg\",\n    ]), []);\n\n    return ( \n        <ImagePreview>\n            {srcList.map((src, index) => {\n                return (\n                    <Image \n                        key={index} \n                        src={src} \n                        width={200} \n                        alt={`lamp${index + 1}`}\n                        style={{ marginRight: 5 }} \n                    />\n                );\n            })}\n        </ImagePreview>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Styles\nDESCRIPTION: Shows how to customize the styling of highlighted text using highlightStyle prop. This example demonstrates applying custom background colors, text colors, and border radius to highlighted terms.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const sourceString = '从 Semi Design 到 Any Design 快速定义你的设计系统，并应用在设计稿和代码中';\n    const searchWords = ['设计系统', 'Semi Design'];\n    \n    return (\n        <>\n            <h2>\n                <Highlight\n                    sourceString={sourceString}\n                    searchWords={searchWords}\n                    highlightStyle={{\n                        borderRadius: 6,\n                        marginLeft: 4,\n                        marginRight: 4,\n                        paddingLeft: 4,\n                        paddingRight: 4,\n                        backgroundColor: 'rgba(var(--semi-teal-5), 1)',\n                        color: 'rgba(var(--semi-white), 1)'\n                    }}\n                />\n            </h2>\n            <h2>\n                <Highlight\n                    sourceString={sourceString}\n                    searchWords={searchWords}\n                    highlightStyle={{\n                        borderRadius: 6,\n                        marginLeft: 4,\n                        marginRight: 4,\n                        paddingLeft: 4,\n                        paddingRight: 4,\n                        backgroundColor: 'var(--semi-color-primary)',\n                        color: 'rgba(var(--semi-white), 1)'\n                    }}\n                />\n            </h2>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Transfer Component Implementation\nDESCRIPTION: React component implementing a custom Transfer with source and selected panels, including item rendering and event handling\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer, Input, Spin, Button } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\nclass CustomRenderDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: Array.from({ length: 100 }, (v, i) => ({\n                label: `Hdl Store ${i}`,\n                value: i,\n                disabled: false,\n                key: `key-${i}`,\n            })),\n        };\n        this.renderSourcePanel = this.renderSourcePanel.bind(this);\n        this.renderSelectedPanel = this.renderSelectedPanel.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n    }\n\n    renderItem(type, item, onItemAction, selectedItems) {\n        let buttonText = 'delete';\n        if (type === 'source') {\n            let checked = selectedItems.has(item.key);\n            buttonText = checked ? 'delete' : 'add';\n        }\n        return (\n            <div className=\"semi-transfer-item panel-item\" key={item.label}>\n                <p>{item.label}</p>\n                <Button\n                    theme=\"borderless\"\n                    type=\"primary\"\n                    onClick={() => onItemAction(item)}\n                    className=\"panel-item-remove\"\n                    size=\"small\"\n                >\n                    {buttonText}\n                </Button>\n            </div>\n        );\n    }\n\n    renderSourcePanel(props) {\n        const {\n            loading,\n            noMatch,\n            filterData,\n            selectedItems,\n            allChecked,\n            onAllClick,\n            inputValue,\n            onSearch,\n            onSelectOrRemove,\n        } = props;\n        let content;\n        switch (true) {\n            case loading:\n                content = <Spin loading />;\n                break;\n            case noMatch:\n                content = <div className=\"empty sp-font\">{inputValue ? 'No search results' : 'No content yet'}</div>;\n                break;\n            case !noMatch:\n                content = filterData.map(item => this.renderItem('source', item, onSelectOrRemove, selectedItems));\n                break;\n            default:\n                content = null;\n                break;\n        }\n        return (\n            <section className=\"source-panel\">\n                <div className=\"panel-header sp-font\">Store list</div>\n                <div className=\"panel-main\">\n                    <Input\n                        style={{ width: 454, margin: '12px 14px' }}\n                        prefix={<IconSearch />}\n                        onChange={onSearch}\n                        showClear\n                    />\n                    <div className=\"panel-controls sp-font\">\n                        <span>Store to be selected: {filterData.length}</span>\n                        <Button onClick={onAllClick} theme=\"borderless\" size=\"small\">\n                            {allChecked ? 'Unselect all' : 'Select all'}\n                        </Button>\n                    </div>\n                    <div className=\"panel-list\">{content}</div>\n                </div>\n            </section>\n        );\n    }\n\n    renderSelectedPanel(props) {\n        const { selectedData, onClear, clearText, onRemove } = props;\n\n        let mainContent = selectedData.map(item => this.renderItem('selected', item, onRemove));\n\n        if (!selectedData.length) {\n            mainContent = <div className=\"empty sp-font\">No data, please filter from the left</div>;\n        }\n\n        return (\n            <section className=\"selected-panel\">\n                <div className=\"panel-header sp-font\">\n                    <div>Selected: {selectedData.length}</div>\n                    <Button theme=\"borderless\" type=\"primary\" onClick={onClear} size=\"small\">\n                        {clearText || 'Clear '}\n                    </Button>\n                </div>\n                <div className=\"panel-main\">{mainContent}</div>\n            </section>\n        );\n    }\n\n    render() {\n        const { dataSource } = this.state;\n        return (\n            <Transfer\n                onChange={values => console.log(values)}\n                className=\"component-transfer-demo-custom-panel\"\n                renderSourcePanel={this.renderSourcePanel}\n                renderSelectedPanel={this.renderSelectedPanel}\n                dataSource={dataSource}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Layout with Breakpoints in React\nDESCRIPTION: Demonstrates how to implement a responsive layout using the breakpoint property on the Sider component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const onbreakpoint = (screen, bool) => {\n        console.log(screen, bool);\n    };\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    const { Header, Footer, Sider, Content } = Layout;\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Layout>\n                <Sider\n                    style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}\n                    breakpoint={['md']}\n                    onBreakpoint={onbreakpoint}\n                >\n                    Sider\n                </Sider>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n            </Layout>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Implementation in React\nDESCRIPTION: Demonstrates a basic implementation of the Carousel component with custom content, including images and text. It uses Typography and Space components for layout and styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, Typography, Space } from '@douyinfe/semi-ui';\n\n() => {\n    const { Title, Paragraph } = Typography;\n\n    const style = {\n        width: '100%',\n        height: '400px',\n    };\n\n    const titleStyle = { \n        position: 'absolute', \n        top: '100px', \n        left: '100px',\n        color: '#1C1F23'\n    };\n\n    const colorStyle = {\n        color: '#1C1F23'\n    };\n\n    const renderLogo = () => {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }} />   \n        );\n    };\n\n    const imgList = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n    ];\n\n    const textList = [\n        ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n        ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n        ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n    ];\n\n    return (\n        <Carousel style={style} theme='dark'>\n            {\n                imgList.map((src, index) => {\n                    return (\n                        <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                            <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                {renderLogo()}\n                                <Title heading={2} style={colorStyle}>{textList[index][0]}</Title>\n                                <Space vertical align='start'>\n                                    <Paragraph style={colorStyle}>{textList[index][1]}</Paragraph>\n                                    <Paragraph style={colorStyle}>{textList[index][2]}</Paragraph>\n                                </Space>\n                            </Space>\n                        </div>\n                    );\n                })\n            }\n        </Carousel>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Grid Card Layout Implementation in React\nDESCRIPTION: Shows how to create a grid layout of cards using Row and Col components from Semi UI. Implements a responsive grid with different column spans.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Row, Col } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div \n            style={{\n                backgroundColor: 'var(--semi-color-fill-0)', \n                padding: 20\n            }}\n        >\n            <Row gutter={[16, 16]}>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n            </Row>\n            <Row gutter={[16, 16]}>\n                <Col span={16}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Rotation and Zoom Cropper\nDESCRIPTION: Demonstrates controlled rotation and zoom functionality with slider controls and real-time updates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, Slider } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nconst actionStyle = {\n  marginTop: 20,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 'fit-content'\n}\n\nfunction Demo() {\n  const [rotate, setRotate] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const ref = useRef();\n  const [cropperUrl, setCropperUrl] = useState('');\n\n  const onZoomChange = useCallback((value) => {\n    setZoom(value);\n  })\n\n  const onSliderChange = useCallback((value) => {\n    setRotate(value);\n  }, []);\n\n  const onButtonClick = useCallback(() => {\n    const canvas = ref.current.getCropperCanvas();\n    setCropperUrl(canvas.toDataURL());\n  }, []);\n\n  return (\n      <div id='cropper-container'>\n           <Cropper \n              ref={ref} \n              src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n              style={containerStyle}\n              rotate={rotate}\n              zoom={zoom}\n              onZoomChange={onZoomChange}\n           />\n           <div style={actionStyle} >\n            <span>Rotate</span>\n            <Slider\n              style={{ width: 500}}\n              value={rotate}\n              step={1}\n              min={-360}\n              max={360}\n              onChange={onSliderChange}\n            />\n           </div>\n           <div style={actionStyle} >\n            <span>Zoom</span>\n            <Slider\n              style={{ width: 500}}\n              value={zoom}\n              step={0.1}\n              min={0.1}\n              max={3}\n              onChange={onZoomChange}\n            />\n           </div>\n           <br />\n           <Button onClick={onButtonClick}>Get Cropped Image</Button>\n           <br /><br />\n          {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n      </div>\n  );\n};\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Expansion with Search in TreeSelect\nDESCRIPTION: Demonstrates controlled expansion functionality with search in TreeSelect using expandedKeys and onExpand. Utilizes the filteredExpandedKeys parameter from onSearch (available in v2.6.0 and above) to achieve search expansion effects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const [expandedKeys, setExpandedKeys] = useState([]);\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return (\n        <TreeSelect\n            style={{ width: 300 }}\n            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n            treeData={treeData}\n            filterTreeNode\n            expandedKeys={expandedKeys}\n            onExpand={expandedKeys => setExpandedKeys(expandedKeys)}\n            onSearch={(inputValue, filteredExpandedKeys, filteredNodes) => {\n                setExpandedKeys([...filteredExpandedKeys, ...expandedKeys]);\n            }}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Mutually Exclusive Radio Group in Semi Design\nDESCRIPTION: Demonstrates how to create a mutually exclusive set of Radio components using RadioGroup.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: 1,\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n    onChange(e) {\n        console.log('radio checked', e.target.value);\n        this.setState({\n            value: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <RadioGroup onChange={this.onChange} value={this.state.value} aria-label=\"RadioGroup demo\" name=\"demo-radio-group\">\n                <Radio value={1}>A</Radio>\n                <Radio value={2}>B</Radio>\n                <Radio value={3}>C</Radio>\n                <Radio value={4}>D</Radio>\n            </RadioGroup>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Disabling with Cascader Component in React\nDESCRIPTION: Demonstrates how to use the disableStrictly prop to enable strict disabling in the Cascader component. When enabled, a disabled node's selected state cannot be changed through parent-child relationships.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    disabled: true,\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={treeData}\n            multiple\n            placeholder=\"Please select...\"\n            disableStrictly\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Upload Component in React\nDESCRIPTION: Shows how to implement a controlled component by passing fileList and handling onChange to update the state. This example demonstrates proper state management with uploading and uploaded files.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const initList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n        {\n            uid: '2',\n            name: 'dy.jpeg',\n            status: 'uploading',\n            size: '222KB',\n            percent: 50,\n            preview: true,\n            fileInstance: new File([new ArrayBuffer(2048)], 'dy2.jpeg', { type: 'image/jpeg' }),\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n\n    const [list, updateList] = useState(initList);\n\n    const onChange = ({ fileList, currentFile, event }) => {\n        console.log('onChange');\n        console.log(fileList);\n        console.log(currentFile);\n        let newFileList = [...fileList]; // spread to get new array\n        updateList(newFileList);\n    };\n\n    return (\n        <Upload\n            action=\"//semi.design/api/upload\"\n            onChange={onChange}\n            fileList={list}\n            showRetry={false}\n        >\n            <Button icon={<IconUpload />} theme=\"light\">\n                Click upload\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizable Position SideSheet\nDESCRIPTION: Shows how to implement a SideSheet with customizable placement options (top, bottom, left, right) using radio buttons for selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, RadioGroup, Radio, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const change = () => {\n        setVisible(!visible);\n    };\n    const [placement, setPlacement] = useState('right');\n    const changePlacement = e => {\n        setPlacement(e.target.value);\n    };\n    return (\n        <>\n            <RadioGroup onChange={changePlacement} value={placement}>\n                <Radio value={'right'}>right</Radio>\n                <Radio value={'left'}>left</Radio>\n                <Radio value={'top'}>top</Radio>\n                <Radio value={'bottom'}>bottom</Radio>\n            </RadioGroup>\n            <br />\n            <br />\n            <Button onClick={change}>Open SideSheet</Button>\n            <SideSheet title=\"滑动侧边栏\" visible={visible} onCancel={change} placement={placement}>\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: TreeSelect with Limited Tag Display and Popover in React\nDESCRIPTION: Shows how to use TreeSelect with 'maxTagCount' to limit the number of displayed tags, and 'showRestTagsPopover' to show a popover for additional tags. It also demonstrates how to set default values and customize popover properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                        {\n                            label: 'Chengdu',\n                            value: 'Chengdu',\n                            key: '0-0-2',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n\n    const textStyle = { margin: '20px 0 10px' };\n\n    return ( \n        <div>\n            <h4 style={textStyle}>maxTagCount=2:</h4>\n            <TreeSelect\n                multiple\n                maxTagCount={2}\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"When more than two tabs are selected it will collapse\"\n                defaultValue={['Beijing', 'Chengdu', 'Canada']}\n            />\n            <h4 style={textStyle}>maxTagCount=2, showRestTagsPopover:</h4>\n            <TreeSelect\n                showRestTagsPopover={true}\n                restTagsPopoverProps={{ position: 'top' }}\n                multiple\n                maxTagCount={2}\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"hover +N to view\"\n                defaultValue={['Beijing', 'Chengdu', 'Canada']}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Hide in Popconfirm with Promises\nDESCRIPTION: Demonstrates how to use Promises with onConfirm and onCancel callbacks to implement delayed closing of the Popconfirm component. The confirm button will automatically show a loading state during the Promise execution.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/popconfirm/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popconfirm, Button, Toast } from '@douyinfe/semi-ui';\n\n() => {\n    const onConfirm = () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                console.log('resolve, close popconfirm');\n                resolve();\n            }, 2000);\n        });\n    };\n\n    const onCancel = () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                console.log('reject, popconfirm still exist');\n                reject();\n            }, 2000);\n        });\n    };\n\n    return (\n        <Popconfirm\n            title=\"Are you sure to save this modification?\"\n            content=\"This modification will be irreversible\"\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n        >\n            <Button>Save</Button>\n        </Popconfirm>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Tag Sorting with TagInput in React\nDESCRIPTION: Example of how to enable drag-and-drop sorting in the TagInput component. The draggable prop enables sorting functionality, and allowDuplicates is set to false as required for draggable tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput\n        draggable\n        allowDuplicates={false}\n        defaultValue={['抖音', '火山', '西瓜视频']}\n        placeholder='请输入...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Icons and Functionality in Upload Component\nDESCRIPTION: This example demonstrates how to customize the preview icon and behavior using renderPicPreviewIcon and onPreviewClick props. It implements a custom preview that opens the image in a new window when clicked.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus, IconEyeOpened } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'resso.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n    ];\n    const handlePreview = (file) => {\n        const feature = \"width=300,height=300\";\n        window.open(file.url, 'imagePreview', feature);\n    };\n    return (\n        <>\n            <Upload\n                action={action}\n                listType=\"picture\"\n                showPicInfo\n                accept=\"image/*\"\n                multiple\n                defaultFileList={defaultFileList}\n                onPreviewClick={handlePreview}\n                renderPicPreviewIcon={()=><IconEyeOpened style={{ color: 'var(--semi-color-white)', fontSize: 24 }} />}\n            >\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Closing Notification in React\nDESCRIPTION: Shows how to create notifications that don't automatically close (by setting duration to 0) and how to manually close them using the Notification.close() method with the notification ID.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        content: 'Not auto close',\n        title: 'Hi',\n        duration: 0,\n    };\n    const [ids, setIds] = useState([]);\n    function show() {\n        let id = Notification.info(opts);\n        setIds([...ids, id]);\n    }\n    function hide() {\n        let idsTmp = [...ids];\n        Notification.close(idsTmp.shift());\n        setIds(idsTmp);\n    }\n    return (\n        <>\n            <Button type=\"primary\" onClick={show}>\n                Show Notification\n            </Button>\n            <br />\n            <br />\n            <Button type=\"primary\" onClick={hide}>\n                Hide Notification\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Panel Change Callback in DatePicker\nDESCRIPTION: Demonstrates how to use the onPanelChange callback which is triggered when the month or year of the panel changes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <DatePicker\n                syncSwitchMonth={true}\n                type=\"dateTimeRange\"\n                style={{ width: 400 }}\n                onPanelChange={(date, dateString) => console.log(date, dateString)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Link Text Implementation\nDESCRIPTION: Examples of link text with various styling options including icons and underline effects\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\nimport { IconLink } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Text } = Typography;\n    return (\n        <div>\n            <Text link={{ href: 'https://semi.design/' }}>链接文本</Text>\n            <br />\n            <br />\n            <Text link={{ href: 'https://semi.design/' }}>打开网站</Text>\n            <br />\n            <br />\n            <Text link icon={<IconLink />} underline>带下划线的网页链接</Text>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Implementation\nDESCRIPTION: Shows the recommended basic style implementation of Steps component using type='basic'\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps } from '@douyinfe/semi-ui';\n\n() => (\n    <Steps type=\"basic\" current={1} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Toast in React\nDESCRIPTION: Demonstrates basic usage of the Toast component, including displaying a simple toast and a throttled toast.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\nimport { throttle } from 'lodash-es';\n\nfunction Demo() {\n    const opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n        stack: true,\n    };\n\n    const handleClose = () => {\n        throttled.cancel();\n    };\n    const throttleOpts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n        onClose: handleClose,\n        stack: true,\n    };\n    const throttled = throttle(() => Toast.info(throttleOpts), 10000, { trailing: false });\n\n    return (\n        <div>\n            <Button onClick={() => Toast.info(opts)}>Display Toast</Button>\n            <br />\n            <br />\n            <Button onClick={throttled}>Throttled Toast</Button>\n        </div>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Custom Preview Logic in React Upload Component\nDESCRIPTION: Illustrates how to implement custom preview logic using the 'previewFile' prop when 'listType' is set to 'list'. It shows different preview elements based on the file's UID.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button, Image } from '@douyinfe/semi-ui';\nimport { IconUpload, IconFile } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.png',\n            status: 'success',\n            size: '130KB',\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n        {\n            uid: '2',\n            name: 'dyBag2.png',\n            status: 'success',\n            size: '130KB',\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n    ];\n    return (\n        <Upload\n            defaultFileList={defaultFileList}\n            action={action}\n            previewFile={file => file.uid === '1' ? <IconFile size=\"large\" /> : <Image src={file.url} />}\n        >\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entries with Semi Design Select\nDESCRIPTION: Demonstrates how to create and select entries that don't exist in the options using allowCreate property. Shows implementation with multiple selection and filtering capabilities.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const optionList = [\n        { value: 'douyin', label: 'Douyin' },\n        { value: 'capcut', label: 'Capcut' },\n        { value: 'xigua', label: 'BuzzVideo' },\n    ];\n    return (\n        <>\n            <Select\n                style={{ width: 400 }}\n                optionList={optionList}\n                allowCreate={true}\n                multiple={true}\n                filter={true}\n                onChange={v => console.log(v)}\n                defaultActiveFirstOption\n            ></Select>\n            <br />\n            <br />\n            <Select\n                style={{ width: 400 }}\n                optionList={optionList}\n                allowCreate={true}\n                multiple={true}\n                filter={true}\n                renderCreateItem={input => <div style={{ padding: 10 }}>Create Item：{input}</div>}\n                onChange={v => console.log(v)}\n                defaultActiveFirstOption\n            ></Select>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalized Currency Display with Language Switching in React\nDESCRIPTION: This example demonstrates how to use the InputNumber component with currency display in an internationalization context. The component automatically displays the appropriate currency format based on the selected locale. Note that the component key needs to be updated when switching languages.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport zh_CN from '@douyinfe/semi-ui/lib/es/locale/source/zh_CN';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\nimport en_US from '@douyinfe/semi-ui/lib/es/locale/source/en_US';\nimport ko_KR from '@douyinfe/semi-ui/lib/es/locale/source/ko_KR';\nimport ja_JP from '@douyinfe/semi-ui/lib/es/locale/source/ja_JP';\nimport ar from '@douyinfe/semi-ui/lib/es/locale/source/ar';\nimport vi_VN from '@douyinfe/semi-ui/lib/es/locale/source/vi_VN';\nimport ru_RU from '@douyinfe/semi-ui/lib/es/locale/source/ru_RU';\nimport id_ID from '@douyinfe/semi-ui/lib/es/locale/source/id_ID';\nimport ms_MY from '@douyinfe/semi-ui/lib/es/locale/source/ms_MY';\nimport th_TH from '@douyinfe/semi-ui/lib/es/locale/source/th_TH';\nimport tr_TR from '@douyinfe/semi-ui/lib/es/locale/source/tr_TR';\nimport pt_BR from '@douyinfe/semi-ui/lib/es/locale/source/pt_BR';\nimport zh_TW from '@douyinfe/semi-ui/lib/es/locale/source/zh_TW';\nimport sv_SE from '@douyinfe/semi-ui/lib/es/locale/source/sv_SE';\nimport pl_PL from '@douyinfe/semi-ui/lib/es/locale/source/pl_PL';\nimport nl_NL from '@douyinfe/semi-ui/lib/es/locale/source/nl_NL';\nimport es from '@douyinfe/semi-ui/lib/es/locale/source/es';\nimport it from '@douyinfe/semi-ui/lib/es/locale/source/it';\nimport de from '@douyinfe/semi-ui/lib/es/locale/source/de';\nimport fr from '@douyinfe/semi-ui/lib/es/locale/source/fr';\nimport ro from '@douyinfe/semi-ui/lib/es/locale/source/ro';\nimport { LocaleProvider, InputNumber, Select } from '@douyinfe/semi-ui';\n\nclass I18nDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            locale: zh_CN,\n            localeCode: 'zh_CN',\n        };\n        this.onLanguageChange = this.onLanguageChange.bind(this);\n    }\n\n    onLanguageChange(code) {\n        let language = {\n            'zh_CN': zh_CN,\n            'en_GB': en_GB,\n            'en_US': en_US,\n            'ko_KR': ko_KR,\n            'ja_JP': ja_JP,\n            'ar': ar,\n            'vi_VN': vi_VN,\n            'ru_RU': ru_RU,\n            'id_ID': id_ID,\n            'ms_MY': ms_MY,\n            'th_TH': th_TH,\n            'tr_TR': tr_TR,\n            'pt_BR': pt_BR,\n            'zh_TW': zh_TW,\n            'es': es,\n            'sv_SE': sv_SE,\n            'pl_PL': pl_PL,\n            'nl_NL': nl_NL,\n            de,\n            it,\n            fr,\n            ro\n        };\n        this.setState({ locale: language[code], localeCode: code });\n    }\n\n    render() {\n        const { locale, localeCode } = this.state;\n        return (\n            <>\n                <div style={{ paddingBottom: 20 }}>\n                    <Select onChange={this.onLanguageChange} insetLabel='切换语言' style={{ width: 250 }} defaultValue='zh_CN'>\n                        <Select.Option value='zh_CN'>Chinese</Select.Option>\n                        <Select.Option value='en_GB'>English</Select.Option>\n                        <Select.Option value='ja_JP'>Japanese</Select.Option>\n                        <Select.Option value='ko_KR'>Korean</Select.Option>\n                        <Select.Option value='ar'>Arabic</Select.Option>\n                        <Select.Option value='vi_VN'>Vietnamese</Select.Option>\n                        <Select.Option value='ru_RU'>Russian</Select.Option>\n                        <Select.Option value='id_ID'>Indonesian</Select.Option>\n                        <Select.Option value='ms_MY'>Malay</Select.Option>\n                        <Select.Option value='th_TH'>Thai</Select.Option>\n                        <Select.Option value='tr_TR'>Turkish</Select.Option>\n                        <Select.Option value='es'>Spanish</Select.Option>\n                        <Select.Option value='de'>German</Select.Option>\n                        <Select.Option value='it'>Italian</Select.Option>\n                        <Select.Option value='fr'>French</Select.Option>\n                        <Select.Option value='ro'>Romanian</Select.Option>\n                        <Select.Option value='sv_SE'>Swedish</Select.Option>\n                        <Select.Option value='pl_PL'>Polish</Select.Option>\n                        <Select.Option value='nl_NL'>Dutch</Select.Option>\n                    </Select>\n                </div>\n                <LocaleProvider locale={locale}>\n                    <InputNumber key={localeCode} currency={true} defaultValue={123456.78} />\n                </LocaleProvider>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Popconfirm Types and Styles in React\nDESCRIPTION: Shows how to create different types of Popconfirm styles by customizing the icon, okType, and colors. Uses a Radio group to switch between different predefined types including default, warning, danger, and tertiary.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/popconfirm/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Popconfirm, Radio, RadioGroup, Button } from '@douyinfe/semi-ui/';\nimport { IconAlertTriangle } from '@douyinfe/semi-icons';\n\nfunction TypesConfirmDemo(props = {}) {\n    const typeMap = {\n        default: {\n            icon: <IconAlertTriangle size=\"extra-large\" />,\n        },\n        warning: {\n            icon: <IconAlertTriangle style={{ color: 'var(--semi-color-warning)' }} size=\"extra-large\" />,\n        },\n        danger: {\n            okType: 'danger',\n            icon: <IconAlertTriangle style={{ color: 'var(--semi-color-danger)' }} size=\"extra-large\" />,\n        },\n        tertiary: {\n            icon: <IconAlertTriangle style={{ color: 'var(--semi-color-tertiary)' }} size=\"extra-large\" />,\n        },\n    };\n\n    const keys = Object.keys(typeMap);\n    const [type, setType] = useState('default');\n    const [visible, _setVisible] = useState(true);\n\n    const changeType = e => {\n        const type = e && e.target && e.target.value;\n        if (type && keys.includes(type)) {\n            setType(type);\n        }\n    };\n\n    const setVisible = visible => _setVisible(visible);\n    const toggleVisible = () => setVisible(!visible);\n\n    return (\n        <div>\n            <RadioGroup onChange={changeType} value={type} style={{ marginTop: 14, marginBottom: 14 }}>\n                {keys.map(key => (\n                    <Radio key={key} value={key}>\n                        <strong style={{ color: `var(--semi-color-${key === 'default' ? 'primary' : key})` }}>{key}</strong>\n                    </Radio>\n                ))}\n            </RadioGroup>\n            <div>\n                <Popconfirm\n                    {...typeMap[type]}\n                    visible={visible}\n                    onVisibleChange={setVisible}\n                    trigger=\"custom\"\n                    title=\"Are you sure to save this modification?\"\n                    content=\"This modification will be irreversible\"\n                >\n                    <Button onClick={toggleVisible}>Click here</Button>\n                </Popconfirm>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Searchable Cascader Implementation\nDESCRIPTION: Implements a searchable Cascader with customizable search behavior through filterTreeNode and treeNodeFilterProp properties. Includes examples of different search configurations and ReactNode labels.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [/* data structure omitted for brevity */];\n    const labelNodeTreeData = [/* data structure omitted for brevity */];\n    return (\n        <div>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Search in label by default\"\n                filterTreeNode\n            />\n            <br/>\n            <br/>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Search in value\"\n                filterTreeNode\n                treeNodeFilterProp='value'\n            />\n             <br/>\n            <br/>\n            <Typography.Title heading={6}>filterLeafOnly=false:</Typography.Title>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"filterLeafOnly=false\"\n                filterTreeNode\n                filterLeafOnly={false}\n            />\n            <br/>\n            <br/>\n            <Typography.Title heading={6}>Label is ReactNode, specify other attributes to search</Typography.Title>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={labelNodeTreeData}\n                placeholder=\"Search for labelText\"\n                filterTreeNode\n                treeNodeFilterProp='labelText'\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Properties with onChangeWithObject in Semi UI Select\nDESCRIPTION: This example demonstrates how to retrieve additional properties from selected options using the onChangeWithObject property. When enabled, the onChange function receives an object containing all properties of the selected option(s) rather than just the value.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select, TextArea } from '@douyinfe/semi-ui';\n\n() => {\n    const list = [\n        { value: 'douyin', label: '抖音', type: 1 },\n        { value: 'ulikecam', label: '轻颜相机', type: 2 },\n        { value: 'jianying', label: '剪映', type: 3 },\n        { value: 'toutiao', label: '今日头条', type: 4 },\n    ];\n    const [cbValue, setCbValue] = useState();\n    const [multipleCbValue, setMultipleCbValue] = useState();\n\n    const onChange = value => {\n        setCbValue(value);\n        console.log(value);\n    };\n\n    const onMultipleChange = value => {\n        setMultipleCbValue(value);\n        console.log(value);\n    };\n\n    return (\n        <div>\n            <div>\n                <Select\n                    style={{ width: 150 }}\n                    onChangeWithObject\n                    optionList={list}\n                    placeholder=\"单选\"\n                    defaultValue={list[0]}\n                    onChange={onChange}\n                ></Select>\n                <h4>onChange回调:</h4>\n                <TextArea style={{ width: 320, marginBottom: 48 }} autosize value={JSON.stringify(cbValue)} rows={2} />\n            </div>\n            <div>\n                <Select\n                    style={{ width: 320 }}\n                    onChangeWithObject\n                    multiple\n                    optionList={list}\n                    onChange={onMultipleChange}\n                    placeholder=\"多选\"\n                ></Select>\n                <h4>onChange回调:</h4>\n                <TextArea style={{ width: 320 }} autosize value={JSON.stringify(multipleCbValue)} />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Customized SideSheet with Form Elements in React\nDESCRIPTION: Demonstrates creating a customized SideSheet component with a form interface including DatePicker, RadioGroup, Banner, and Select components. Features a custom header, footer with action buttons, and responsive form layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SideSheet, Button, Typography, Banner, Form } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n    }\n    show() {\n        this.setState({\n            visible: true,\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false,\n        });\n    }\n    render() {\n        const {\n            DatePicker,\n            Select,\n            Radio,\n            RadioGroup,\n        } = Form;\n        const footer = (\n            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                <Button style={{ marginRight: 8 }}>Reset</Button>\n                <Button theme=\"solid\">Submit</Button>\n            </div>\n        );\n        return (\n            <>\n                <Button onClick={() => this.show()}>More Information</Button>\n                <SideSheet\n                    title={<Typography.Title heading={4}>Create New Package</Typography.Title>}\n                    headerStyle={{ borderBottom: '1px solid var(--semi-color-border)' }}\n                    bodyStyle={{ borderBottom: '1px solid var(--semi-color-border)' }}\n                    visible={this.state.visible}\n                    footer={footer}\n                    onCancel={() => this.handleCancel()}\n                >\n                    <Form>\n                        <DatePicker\n                            field=\"date\"\n                            type=\"dateTime\"\n                            initValue={new Date()}\n                            style={{ width: 272 }}\n                            label={{ text: 'Created Time', required: true }}\n                        />\n                        <RadioGroup\n                            field=\"type\"\n                            label=\"Target Operating System\"\n                            direction=\"horizontal\"\n                            initValue={'all'}\n                        >\n                            <Radio value=\"all\">All</Radio>\n                            <Radio value=\"ios\">iOS</Radio>\n                            <Radio value=\"android\">Android</Radio>\n                            <Radio value=\"web\">Web</Radio>\n                        </RadioGroup>\n                        <RadioGroup field=\"origin\" label=\"Package Origin\" direction=\"horizontal\" initValue={'scm'}>\n                            <Radio value=\"scm\">Uploaded From SCM</Radio>\n                            <Radio value=\"manual\">Uploaded Manually</Radio>\n                        </RadioGroup>\n                        <Banner\n                            fullMode={false}\n                            icon={null}\n                            closeIcon={null}\n                            bordered\n                            description={\n                                <Typography.Text>\n                                    Software Config Management (SCM) is a platform for publish and manage code versions.\n                                    You can compile and manage code versions in this platform.\n                                </Typography.Text>\n                            }\n                        />\n                        <br />\n                        <Select\n                            field=\"users\"\n                            label={{ text: 'Created User', required: true }}\n                            style={{ width: 560 }}\n                            multiple\n                            initValue={['1', '2', '3', '4']}\n                        >\n                            <Select.Option value=\"1\">Tianyi Lee</Select.Option>\n                            <Select.Option value=\"2\">Chen Qu</Select.Option>\n                            <Select.Option value=\"3\">Yan Cai</Select.Option>\n                            <Select.Option value=\"4\">Wenzhuo Cui</Select.Option>\n                        </Select>\n                    </Form>\n                </SideSheet>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Notification Usage in React\nDESCRIPTION: Simple implementation of a notification that displays when a button is clicked and closes automatically after 3 seconds. The notification has a title and content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Button\n        onClick={()=> Notification.open({\n            title: 'Hi, Bytedance',\n            content: 'ies dance dance dance',\n            with: 3\n        })}\n    >\n        Display Notification\n    </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Focus in Popover Content in React using Semi Design\nDESCRIPTION: This example demonstrates how to set the initial focus within a Popover's content. It uses a function as the content prop, which receives an object with initialFocusRef. This ref is then attached to the element that should receive focus when the Popover opens.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, Input, Popover, Space } from '@douyinfe/semi-ui';\n\n() => {\n    const renderContent = ({ initialFocusRef }) => {\n        return (\n            <div style={{ padding: 12 }}>\n                <Space>\n                    <Button>first focusable element</Button>\n                    <Input ref={initialFocusRef} placeholder=\"focus here\" />\n                </Space>\n            </div>\n        );\n    };\n\n    return (\n        <Popover content={renderContent} trigger=\"click\">\n            <Button>click me</Button>\n        </Popover>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Loading Effects with Skeleton\nDESCRIPTION: Shows how to implement advanced loading states using Skeleton components within a Card for more granular control over loading states.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Card, Switch, Skeleton, Avatar, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [loading, setLoading] = useState(true);\n    const { Meta } = Card;\n    const { Title, Paragraph, Image } = Skeleton;\n\n    return (\n        <>\n            <Switch onChange={ v => setLoading(!v) } />\n            <br />\n            <br />\n            <Card\n                style={{ maxWidth: 300 }}\n                title={\n                    <Meta \n                        title={\n                            <Skeleton\n                                style={{ width: 80 }}\n                                placeholder={<Title />}\n                                loading={loading}\n                            >\n                                <Typography.Title heading={5}>\n                                    Semi Doc\n                                </Typography.Title>\n                            </Skeleton>\n                        } \n                        description={\n                            <Skeleton \n                                style={{ width: 150, marginTop: 12 }} \n                                placeholder={<Paragraph rows={1} />} \n                                loading={loading}\n                            >\n                                <Typography.Text>\n                                    全面、易用、优质\n                                </Typography.Text>\n                            </Skeleton>\n                        }\n                        avatar={\n                            <Skeleton placeholder={<Skeleton.Avatar />} loading={loading}>\n                                <Avatar \n                                    alt='Card meta img'\n                                    size=\"default\"\n                                    src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                                />\n                            </Skeleton>\n                        }\n                    />\n                }\n                headerExtraContent={\n                    <Skeleton style={{ width: 50 }} placeholder={<Paragraph rows={1} />} loading={loading}>\n                        <Typography.Text link>\n                            More\n                        </Typography.Text>\n                    </Skeleton>\n                }\n                cover={ \n                    <Skeleton style={{ maxWidth: '100%', height: 220 }} placeholder={<Image />} loading={loading}>\n                        <img \n                            alt=\"example\" \n                            src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo.jpeg\" \n                        />\n                    </Skeleton> \n                }\n            >\n            </Card>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different Styles for Different Highlighted Texts\nDESCRIPTION: Demonstrates how to apply different highlight styles to different keywords after v2.71.0. Each searchWord can have its own style and className.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <h2>\n            <Highlight\n                component='span'\n                sourceString='From Semi Design，To Any Design. Quickly define your design system and apply it to design drafts and code'\n                searchWords={[\n                    { text: 'Semi', style: { backgroundColor: 'rgba(var(--semi-teal-5), 1)', color: 'rgba(var(--semi-white), 1)', padding: 4 }, className: 'keyword1' },\n                    { text: 'Quickly', style: { backgroundColor: 'var(--semi-color-primary)', color: 'rgba(var(--semi-white), 1)', padding: 4 }, className: 'keyword2' },\n                    { text: 'code', style: { backgroundColor: 'rgba(var(--semi-violet-5), 1)', color: 'rgba(var(--semi-white), 1)', padding: 4 }, className: 'keyword3' },\n                ]}\n                highlightStyle={{ borderRadius: 4 }}\n            />\n        </h2>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Transfer Component in React\nDESCRIPTION: This code demonstrates how to use the Tree Transfer component from the Semi UI library. It sets up a tree data structure representing geographical locations and implements the transfer functionality with selectable tree nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                        {\n                            label: 'Chengdu',\n                            value: 'Chengdu',\n                            key: '0-0-2',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0',\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1',\n                },\n                {\n                    label: 'Mexico',\n                    value: 'Mexico',\n                    disabled: true,\n                    key: '1-2',\n                },\n                {\n                    label: 'Cuba',\n                    value: 'Cuba',\n                    key: '1-3',\n                },\n            ],\n        },\n    ];\n\n    const [v, $v] = useState(['Shanghai']);\n\n    return (\n        <div style={{ margin: 10, padding: 10, width: 600 }}>\n            <Transfer dataSource={treeData} type=\"treeList\" value={v} onChange={$v}></Transfer>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Semantic Icon in React\nDESCRIPTION: This snippet demonstrates how to import and render the IconSend component from the Semantic Icons library within a React application. It requires React and ReactDOM to be set up in the project. The 'root' variable should refer to a valid DOM element for rendering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-icons/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IconSend } from '@douyinfe/semi-icons';\n\nReactDOM.render(<IconSend />, root);\n```\n\n----------------------------------------\n\nTITLE: Integrated Usage with Container and Positioning\nDESCRIPTION: Shows advanced Anchor implementation with custom container, offset settings, and fixed positioning. Includes properties like getContainer, targetOffset, offsetTop, and custom style.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <span>See the fixed Anchor on the right </span>\n            <Anchor\n                getContainer={getContainer}\n                offsetTop={100}\n                targetOffset={100} // v>=1.9\n                style={{ position: 'fixed', right: '20px', top: '100px', width: '200px', zIndex: 3 }} >\n                <Anchor.Link href=\"#Basic_Usage\" title=\"Fixed Anchor\" />\n                <Anchor.Link href=\"#Integrated_Usage\" title=\"Integrated Usage\" />\n                <Anchor.Link href=\"#Size\" title=\"Size\" />\n                <Anchor.Link href=\"#Rail_Theme\" title=\"Rail Theme\" />\n                <Anchor.Link href=\"#Auto_Collapse\" title=\"Auto Collapse\" />\n                <Anchor.Link href=\"#Show_Tooltip\" title=\"Show Tooltip\" />\n                <Anchor.Link href=\"#Tooltip_Position\" title=\"Tooltip Position\" />\n                <Anchor.Link href=\"#API_Reference\" title=\"API Reference\">\n                    <Anchor.Link href=\"#Anchor\" title=\"Anchor\" />\n                    <Anchor.Link href=\"#Anchor.Link\" title=\"Anchor.Link\" />\n                </Anchor.Link>\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Draggable Transfer Component\nDESCRIPTION: Implementation of Transfer component with drag and drop sorting functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n() => {\n    const data = Array.from({ length: 30 }, (v, i) => {\n        return {\n            label: `Item ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            dataSource={data}\n            defaultValue={[2, 4]}\n            draggable\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Card Style Radio Group\nDESCRIPTION: Example of Radio group with a card-style background, implemented using the 'type=\"card\"' property on RadioGroup. Includes extra text and vertical layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <RadioGroup type='card' defaultValue={2} direction='vertical' aria-label=\"单选组合示例\" name=\"demo-radio-group-card\">\n        <Radio value={1} disabled extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Radio>\n        <Radio value={2} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Radio>\n        <Radio value={3} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Radio>\n    </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Slots in Select Component\nDESCRIPTION: Shows how to use innerTopSlot, outerTopSlot, innerBottomSlot, and outerBottomSlot to add custom content to the Select dropdown. Includes examples with both inner and outer slot implementations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\nimport { IconClock } from '@douyinfe/semi-icons';\n\n() => {\n    let selectStyle = { width: 180, margin: 20 };\n    let innerSlotStyle = {\n        backgroundColor: '#FFF',\n        height: '40px',\n        color: '#0077FA',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        cursor: 'pointer',\n    };\n    let innerSlotNode = <div style={innerSlotStyle}>No suitable product?</div>;\n    let outSlotStyle = {\n        backgroundColor: 'whitesmoke',\n        height: '29px',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        cursor: 'pointer',\n    };\n    let outSlotNode = (\n        <div style={outSlotStyle}>\n            <IconClock></IconClock>\n            <span style={{ color: 'rgba(28, 31, 35, 0.55)' }}>More recently viewed pages</span>\n        </div>\n    );\n\n    return (\n        <div>\n            <p>outerBottomSlot:</p>\n            <Select\n                style={selectStyle}\n                dropdownStyle={{ width: 180 }}\n                maxHeight={213}\n                defaultOpen\n                autoAdjustOverflow={false}\n                position=\"bottom\"\n                outerBottomSlot={outSlotNode}\n            >\n                <Select.Option value=\"douyin\">Douyin</Select.Option>\n                <Select.Option value=\"capcut\">Capcut</Select.Option>\n                <Select.Option value=\"coze\">Coze</Select.Option>\n                <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n            </Select>\n            <p>innerBottomSlot:</p>\n            <Select style={selectStyle} dropdownStyle={{ width: 180 }} innerBottomSlot={innerSlotNode} >\n                <Select.Option value=\"douyin\">Douyin</Select.Option>\n                <Select.Option value=\"capcut\">Capcut</Select.Option>\n                <Select.Option value=\"coze\">Coze</Select.Option>\n                <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n            </Select>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Toast Configuration in React\nDESCRIPTION: Shows how to use ToastFactory.create to create a new Toast with custom configuration, such as a custom container.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ToastFactory } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const ToastInCustomContainer = ToastFactory.create({\n        getPopupContainer: () => document.getElementById('custom-toast-container'),\n    });\n    return (\n        <div>\n            <Button onClick={() => Toast.info('Toast')}>Default Toast</Button>\n            <br />\n            <br />\n            <Button onClick={() => ToastInCustomContainer.info('Toast in some container')}>\n                Toast in custom container\n            </Button>\n            <div id=\"custom-toast-container\">custom container</div>\n        </div>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Basic Cropper Usage with Shape Control\nDESCRIPTION: Demonstrates basic usage of the Cropper component with shape selection (rect, round, roundRect) and cropping functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nfunction Demo() {\n    const ref = useRef(null);\n    const [shape, setShape] = useState('rect');\n    const [cropperUrl, setCropperUrl] = useState('');\n\n    const onButtonClick = useCallback(() => {\n        const canvas = ref.current.getCropperCanvas();\n        setCropperUrl(canvas.toDataURL());\n    }, []);\n\n    const onShapeChange = useCallback((e) => {\n        setShape(e.target.value);\n    }, []);\n\n    return <>\n        <RadioGroup onChange={onShapeChange} value={shape}>\n            <Radio value={'rect'}>rect</Radio>\n            <Radio value={'round'}>round</Radio>\n            <Radio value={'roundRect'}>roundRect</Radio>\n        </RadioGroup>\n        <Cropper\n            ref={ref} \n            src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n            style={containerStyle}\n            shape={shape}\n        />\n        <Button onClick={onButtonClick}>裁切</Button>\n        <br/><br/>\n        {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n    </>;\n}\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transfer with react-sortable-hoc\nDESCRIPTION: A complete implementation of a custom transfer component using react-sortable-hoc library. Features include custom panel rendering, drag handle implementation, and item sorting functionality. Uses IconHandle for drag controls and supports both source and selected panels.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SortableContainer, SortableElement, sortableHandle } from 'react-sortable-hoc';\nimport { Transfer, Button, Spin, Input } from '@douyinfe/semi-ui';\nimport { IconHandle, IconSearch } from '@douyinfe/semi-icons';\n\nclass CustomRenderDragDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: Array.from({ length: 100 }, (v, i) => ({\n                label: `Hdl Store ${i}`,\n                value: i,\n                disabled: false,\n                key: `key-${i}`,\n            })),\n        };\n        this.renderSourcePanel = this.renderSourcePanel.bind(this);\n        this.renderSelectedPanel = this.renderSelectedPanel.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n    }\n\n    renderItem(type, item, onItemAction, selectedItems) {\n        let buttonText = 'delete';\n        let newItem = item;\n\n        if (type === 'source') {\n            let checked = selectedItems.has(item.key);\n            buttonText = checked ? 'delete' : 'add';\n        } else {\n            newItem = { ...item, key: item._optionKey };\n            delete newItem._optionKey;\n        }\n\n        const DragHandle = sortableHandle(() => <IconHandle className=\"pane-item-drag-handler\" />);\n\n        return (\n            <div className=\"semi-transfer-item panel-item\" key={item.label}>\n                {type === 'source' ? null : <DragHandle />}\n                <div className=\"panel-item-main\" style={{ flexGrow: 1 }}>\n                    <p>{item.label}</p>\n                    <Button\n                        theme=\"borderless\"\n                        type=\"primary\"\n                        onClick={() => onItemAction(newItem)}\n                        className=\"panel-item-remove\"\n                        size=\"small\"\n                    >\n                        {buttonText}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Size-Variable Button Groups with Semi Design\nDESCRIPTION: Demonstrates how to create button groups with different size variations using ButtonGroup component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ButtonGroup } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const sizes = ['large', 'default', 'small'];\n\n    return (\n        <div style={{ display: 'flex' }}>\n            {sizes.map(size => (\n                <div style={{ marginRight: 10 }} key={size}>\n                    <ButtonGroup size={size} aria-label=\"Operate button group\">\n                        <Button>Copy</Button>\n                        <Button>Search</Button>\n                        <Button>Cut</Button>\n                    </ButtonGroup>\n                </div>\n            ))}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Popover with Arrows in React using Semi Design\nDESCRIPTION: This snippet demonstrates how to use the Popover component with arrows in various positions. It uses the 'showArrow' prop to display arrows and positions the Popover in different directions around Tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div style={{ paddingLeft: 40 }} className=\"tag-margin-right\">\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, float: 'left' }}>\n                {lefts.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, marginLeft: 180 }}>\n                {rights.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\n                {bottoms.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Pagination in React\nDESCRIPTION: Demonstrates how to create a controlled Pagination component using 'currentPage' and 'onPageChange' props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => {\n    const [page, setPage] = useState(3);\n    function onPageChange(currentPage) {\n        setPage(currentPage);\n    }\n    return (\n        <Pagination\n            total={200}\n            currentPage={page}\n            onPageChange={onPageChange}>\n        </Pagination>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Description Component Usage\nDESCRIPTION: Demonstrates basic usage of the Description component with an array of key-value pairs, including text and custom React components as values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        { key: 'Actual Users', value: '1,480,000' },\n        { key: '7-day Rentention', value: '98%' },\n        { key: 'Security Level', value: 'III' },\n        { key: 'Category Tag', value: <Tag style={{ margin: 0 }}>E-commerce</Tag> },\n        { key: 'Authorized State', value: 'Unauthorized' },\n    ];\n    return <Descriptions data={data} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Content SideSheet with Form\nDESCRIPTION: Showcases a complex SideSheet implementation with custom header, footer, and form elements for creating a resource package interface.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SideSheet, Form, Button, Typography, Banner } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n    }\n    show() {\n        this.setState({\n            visible: true,\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false,\n        });\n    }\n    render() {\n        const {\n            DatePicker,\n            Select,\n            Radio,\n            RadioGroup,\n        } = Form;\n        const footer = (\n            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                <Button style={{ marginRight: 8 }}>重置</Button>\n                <Button theme=\"solid\">提交</Button>\n            </div>\n        );\n        return (\n            <>\n                <Button onClick={() => this.show()}>More Information</Button>\n                <SideSheet\n                    title={<Typography.Title heading={4}>创建资源包</Typography.Title>}\n                    headerStyle={{ borderBottom: '1px solid var(--semi-color-border)' }}\n                    bodyStyle={{ borderBottom: '1px solid var(--semi-color-border)' }}\n                    visible={this.state.visible}\n                    footer={footer}\n                    closeIcon={null}\n                    onCancel={() => this.handleCancel()}\n                >\n                    <Form>\n                        <DatePicker\n                            field=\"date\"\n                            type=\"dateTime\"\n                            initValue={new Date()}\n                            style={{ width: 272 }}\n                            label={{ text: '创建时间', required: true }}\n                        />\n                        <RadioGroup field=\"type\" label=\"目标操作系统\" direction=\"horizontal\" initValue={'all'}>\n                            <Radio value=\"all\">全平台</Radio>\n                            <Radio value=\"ios\">iOS</Radio>\n                            <Radio value=\"android\">Android</Radio>\n                            <Radio value=\"web\">Web</Radio>\n                        </RadioGroup>\n                        <RadioGroup field=\"origin\" label=\"资源包来源\" direction=\"horizontal\" initValue={'scm'}>\n                            <Radio value=\"scm\">从SCM上传</Radio>\n                            <Radio value=\"manual\">手动上传</Radio>\n                        </RadioGroup>\n                        <Banner\n                            fullMode={false}\n                            icon={null}\n                            type=\"warning\"\n                            bordered\n                            description={\n                                <>\n                                    <Typography.Text strong>当前部署环境：线上部署</Typography.Text>\n                                    <br />\n                                    <Typography.Text>\n                                        请选择正确的SCM构建产物，防止出现不符合预期的发布操作。\n                                    </Typography.Text>\n                                </>\n                            }\n                        />\n                        <br />\n                        <Select\n                            field=\"users\"\n                            label={{ text: '创建用户', required: true }}\n                            style={{ width: 560 }}\n                            multiple\n                            initValue={['1', '2', '3', '4']}\n                        >\n                            <Select.Option value=\"1\">曲晨一</Select.Option>\n                            <Select.Option value=\"2\">夏可曼</Select.Option>\n                            <Select.Option value=\"3\">曲晨三</Select.Option>\n                            <Select.Option value=\"4\">蔡妍</Select.Option>\n                        </Select>\n                    </Form>\n                </SideSheet>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Popconfirm Component in React\nDESCRIPTION: Demonstrates the basic usage of the Popconfirm component with confirmation and cancellation callbacks that trigger Toast notifications when the user interacts with the confirmation dialog.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/popconfirm/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popconfirm, Button, Toast } from '@douyinfe/semi-ui';\n\n() => {\n    const onConfirm = () => {\n        Toast.success('Confirm save!');\n    };\n\n    const onCancel = () => {\n        Toast.warning('Cancel save!');\n    };\n    return (\n        <Popconfirm\n            title=\"Are you sure you want to save this modification?\"\n            content=\"This modification will be irreversible\"\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n        >\n            <Button>Save</Button>\n        </Popconfirm>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Switch Component\nDESCRIPTION: Example of Switch as a controlled component with state management\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [checked, setChecked] = useState(true);\n\n    const onChange = (checked) => {\n        setChecked(checked);\n    };\n\n    return (\n        <Switch\n            checked={checked}\n            aria-label='a switch for demo'\n            onChange={onChange}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group in JSX with React\nDESCRIPTION: Demonstrates how to create a group of Checkboxes using the CheckboxGroup component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <CheckboxGroup style={{ width: '100%' }} defaultValue={['A', 'B']} aria-label=\"CheckboxGroup demo\">\n        <Checkbox value=\"A\">A</Checkbox>\n        <Checkbox value=\"B\">B</Checkbox>\n        <Checkbox value=\"C\">C</Checkbox>\n        <Checkbox value=\"D\">D</Checkbox>\n        <Checkbox value=\"E\">E</Checkbox>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeSelect Search Box Position\nDESCRIPTION: Shows how to configure the search box position in TreeSelect using searchPosition prop. Demonstrates both single and multiple selection modes with the search box positioned in the trigger area.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n    return (\n        <>\n            <TreeSelect\n                searchPosition=\"trigger\"\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                filterTreeNode\n                placeholder=\"Single selection\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                searchPosition=\"trigger\"\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                filterTreeNode\n                maxTagCount={2}\n                placeholder=\"Multiple selection\"\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Avatar Text Size Adaptation\nDESCRIPTION: Demonstrates how text size automatically adjusts based on avatar width with gap adjustment\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Avatar style={{ margin: 4 }}>AS</Avatar>\n        <Avatar style={{ margin: 4 }} gap={4}>Semi</Avatar>\n        <Avatar style={{ margin: 4 }} gap={10}>Semi</Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Upload Button on Limit Reach in React\nDESCRIPTION: Shows how to disable the upload button when the file limit is reached. It uses the 'onExceed' callback to display a warning toast and the 'onChange' prop to manage the button's disabled state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    let [disabled, setDisabled] = useState(false);\n    let limit = 2;\n    let onChange = props => {\n        let length = props.fileList.length;\n        if (length === limit) {\n            setDisabled(true);\n        } else {\n            setDisabled(false);\n        }\n    };\n    return (\n        <Upload\n            action={action}\n            limit={limit}\n            onExceed={() => Toast.warning(`最多只允许上传${limit}个文件`)}\n            onChange={onChange}\n        >\n            <Button icon={<IconUpload />} theme=\"light\" disabled={disabled}>\n                点击上传（最多{limit}项）\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Deep and Long Lists in Cascader (React/JSX)\nDESCRIPTION: Shows how to handle deep and long lists in a Cascader component by setting a custom dropdown class. This example demonstrates a deep nested structure and includes CSS to manage horizontal scrolling in the dropdown.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'A',\n            value: 'A',\n            children: [\n                {\n                    label: 'B',\n                    value: 'B',\n                    children: [\n                        {\n                            label: 'C',\n                            value: 'C',\n                            children: [\n                                {\n                                    label: 'D',\n                                    value: 'D',\n                                    children: [\n                                        {\n                                            label: 'E',\n                                            value: 'E',\n                                            children: [\n                                                {\n                                                    label: 'F',\n                                                    value: 'F',\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                }\n            ]\n        }\n    ];\n    return (\n        <Cascader\n            dropdownClassName='components-cascader-demo'\n            style={{ width: 300 }}\n            treeData={treeData}\n        />\n    );\n};\n```\n\nLANGUAGE: css\nCODE:\n```\n.components-cascader-demo {\n    .semi-cascader-option-lists {\n        max-width: 510px;\n        overflow-x: auto;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Cell Styles in Calendar Component (React/JSX)\nDESCRIPTION: Demonstrates how to customize date cell styling using dateGridRender prop. Shows implementation of custom background colors for specific dates, with proper z-index handling for month view.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => {\n    const importantDate = {\n        position: 'absolute',\n        left: '0',\n        right: '0',\n        top: '0',\n        bottom: '0',\n        backgroundColor: 'var(--semi-color-danger-light-default)',\n    };\n    const displayValue = new Date(2019, 6, 23, 8, 32, 0);\n    const importDates = [\n        new Date(2019, 6, 2),\n        new Date(2019, 6, 8),\n        new Date(2019, 6, 19),\n        new Date(2019, 6, 23)\n    ];\n    const dateRender = (dateString) => {\n        if (importDates.filter(date => date.toString() === dateString).length) {\n            return (\n                <div style={importantDate} />\n            );\n        } \n        return null;\n    };\n    return (\n        <Calendar \n            height={700}\n            mode='month'\n            displayValue={displayValue} \n            dateGridRender={dateRender}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast Card Error Example - React JSX\nDESCRIPTION: Example of rendering an error toast message card with a retry action using the ToastCard component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastCard type='error' content={<div>Ticket transfer failed <span style={{ color: 'var(--semi-color-primary)', marginLeft: 4, cursor: 'pointer' }}>Retry</span> </div>} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Text Wrapping with Typography in React\nDESCRIPTION: Demonstrates how to customize tooltip text wrapping behavior when displaying truncated text, including applying word-break styles for better readability.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    return (\n        <div>\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: 'Insfrastructure|Data-inf|bytegraph.cheetah.user_relation' }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                Customized configuration can be made on demand when long text is truncated\n            </Text>\n            <br />\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: 'Insfrastructure|Data-inf|bytegraph.cheetah.user_relation', className: 'components-typography-demo' }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                Customized configuration can be made on demand when long text is truncated\n            </Text>\n            <br />\n            <Text \n                ellipsis={{\n                    showTooltip: {\n                        opts: { content: 'Insfrastructure|Data-inf|bytegraph.cheetah.user_relation', style: { wordBreak: 'break-all' } }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                Customized configuration can be made on demand when long text is truncated\n            </Text>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Group with Grid Layout in React\nDESCRIPTION: This snippet demonstrates how to use Checkbox.Group with Grid components to create a flexible layout. It imports necessary components from @douyinfe/semi-ui and renders a CheckboxGroup containing Checkboxes arranged in a grid.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox, CheckboxGroup, Row, Col } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup style={{ width: '100%' }} aria-label=\"CheckboxGroup 示例\">\n        <Row>\n            <Col span={8}>\n                <Checkbox value=\"A\">A</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"B\">B</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"C\">C</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"D\">D</Checkbox>\n            </Col>\n            <Col span={8}>\n                <Checkbox value=\"E\">E</Checkbox>\n            </Col>\n        </Row>\n    </CheckboxGroup>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom More Button Rendering in Avatar Group\nDESCRIPTION: Demonstrates how to customize the more button display using renderMore prop with a Popover component to show additional avatar details.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AvatarGroup, Avatar, Popover } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const renderMore = (restNumber, restAvatars) => {\n        const content = restAvatars.map((avatar, index) => {\n            return (\n                <div style={{ paddingBottom: '12px' }} key={index}>\n                    {React.cloneElement(avatar, { size: 'extra-small' })}\n                    <span style={{ marginLeft: 8, fontSize: 14 }}>这是段文字描述</span>\n                </div>\n            );\n        });\n        return (\n            <Popover\n                content={content}\n                autoAdjustOverflow={false}\n                position={'bottomRight'}\n                style={{ padding: '12px 8px', paddingBottom: 0 }}\n            >\n                <Avatar>{`+${restNumber}`}</Avatar>\n            </Popover>\n        );\n    };\n\n    return (\n        <AvatarGroup maxCount={3} renderMore={renderMore}>\n            <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n            <Avatar alt='Caroline Xiao'>CX</Avatar>\n            <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n            <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n            <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n        </AvatarGroup>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Date and Time Selection in React with Semi-Design DatePicker\nDESCRIPTION: This example demonstrates how to use the DatePicker component with confirmation for datetime selection. It includes callbacks for onChange, onConfirm, and onCancel events.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <DatePicker\n                type=\"dateTime\"\n                needConfirm={true}\n                onConfirm={(...args) => {\n                    console.log('Confirmed: ', ...args);\n                }}\n                onCancel={(...args) => {\n                    console.log('Canceled: ', ...args);\n                }}\n                onChange={(...args) => {\n                    console.log('Changed: ', ...args);\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 内嵌输入框 DatePicker - React\nDESCRIPTION: 展示如何使用 insetInput 属性来控制日期面板是否显示内嵌输入框，适用于各种日期选择类型。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <DatePicker type=\"date\" insetInput />\n            <br />\n            <br />\n            <DatePicker type=\"dateTime\" insetInput />\n            <br />\n            <br />\n            <DatePicker type=\"dateRange\" insetInput style={{ width: 260 }} />\n            <br />\n            <br />\n            <DatePicker type=\"dateTimeRange\" insetInput style={{ width: 400 }} />\n            <br />\n            <br />\n            <DatePicker type=\"month\" placeholder=\"请选择年月\" insetInput style={{ width: 140 }} />\n            <br />\n            <br />\n            <DatePicker type=\"monthRange\" placeholder=\"请选择年月范围\" insetInput style={{ width: 200 }} />\n            <br />\n            <br />\n            <DatePicker type=\"date\" position=\"bottomLeft\" insetInput />\n            <br />\n            <br />\n            <DatePicker type=\"dateTime\" format=\"yyyy-MM-dd HH:mm\" insetInput />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting File Count in React Upload Component\nDESCRIPTION: Demonstrates how to limit the maximum number of files that can be uploaded using the 'limit' prop. When the limit is 1, the newest upload replaces the current one without triggering the onExceed callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    let limit = 1;\n    let onChange = props => {\n        console.log(props.fileList);\n    };\n    return (\n        <Upload\n            action={action}\n            limit={limit}\n            onChange={onChange}\n        >\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传（最多{limit}项）\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Direction Resizable Layout in React with Semi Design\nDESCRIPTION: This snippet demonstrates how to create a resizable layout with dynamically changeable direction using Semi Design components. It includes a button to toggle between horizontal and vertical layouts, and nested ResizeGroups for complex arrangements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [text, setText] = useState('drag to resize')\n  const [direction, setDirection] = useState('horizontal')\n\n  const changeDirection = () => {\n    if (direction === 'horizontal') {\n      setDirection('vertical')\n    } else {\n      setDirection('horizontal')\n    }\n  }\n  return (\n    <div style={{ width: '400px', height: '300px' }}>\n      <Button onClick={changeDirection}>{direction}</Button>\n      <ResizeGroup direction={direction} >\n        <ResizeItem\n          onChange={() => { setText('resizing') }}\n          onResizeEnd={() => { setText('drag to resize') }}\n          defaultSize={5}\n        >\n            <ResizeGroup direction='horizontal'>\n              <ResizeItem\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', }}\n                onChange={() => { setText('resizing') }}\n                onResizeEnd={() => { setText('drag to resize') }}\n              >\n                <div style={{ marginLeft: '20%',  padding:'5px' }}>\n                  {text}\n                </div>\n              </ResizeItem>\n              <ResizeHandler></ResizeHandler>\n              <ResizeItem\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', }}\n                onChange={() => { setText('resizing') }}\n              >\n                <div style={{ marginLeft: '20%',  padding:'5px' }}>\n                  {text}\n                </div>\n              </ResizeItem>\n            </ResizeGroup>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)',  }}\n          defaultSize={1.3}\n          onChange={() => { setText('resizing') }}\n        >\n          <div style={{ marginLeft: '20%',  padding:'5px' }}>\n            {text}\n          </div>\n        </ResizeItem>\n      </ResizeGroup>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AutoComplete in React\nDESCRIPTION: Demonstrates the basic usage of AutoComplete component with search functionality and onChange event handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\n() => {\n    const [stringData, setStringData] = useState([]);\n    const [value, setValue] = useState('');\n    const handleStringSearch = (value) => {\n        let result;\n        if (value) {\n            result = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\n        } else {\n            result = [];\n        }\n        setStringData(result);\n    };\n\n    const handleChange = (value) => {\n        console.log('onChange', value);\n        setValue(value);\n    };\n    return (\n        <AutoComplete\n            data={stringData}\n            value={value}\n            showClear\n            prefix={<IconSearch />}\n            placeholder=\"Search... \"\n            onSearch={handleStringSearch}\n            onChange={handleChange}\n            style={{ width: 200 }}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Menu with JSON in React\nDESCRIPTION: Example demonstrating how to use the menu attribute to configure a Dropdown component with various menu items including groups, different types of items, and dividers. Uses Semi Design UI components and icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Button } from '@douyinfe/semi-ui';\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\nfunction DropdownEvents() {\n    const menu = [\n        { node: 'title', name: 'Group1' },\n        { node: 'item', name: 'primary1', type: 'primary', onClick: () => console.log('click primary') },\n        { node: 'item', name: 'secondary', type: 'secondary' },\n        { node: 'divider' },\n        { node: 'title', name: 'Group2' },\n        { node: 'item', name: 'tertiary', type: 'tertiary' },\n        { node: 'item', name: 'warning', type: 'warning', active: true },\n        { node: 'item', name: 'danger', type: 'danger' },\n    ];\n    return (\n        <Dropdown trigger={'click'} showTick position={'bottomLeft'} menu={menu}>\n            <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                Click Me\n            </Button>\n        </Dropdown>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TagInput Usage in React\nDESCRIPTION: Demonstrates the basic usage of TagInput with default values and a placeholder. After pressing Enter, the input value will be added as a tag.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput\n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']}\n        placeholder='Please enter...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing VChart with Semi Theme in React\nDESCRIPTION: Example of initializing VChart with Semi theme in a React application's entry point.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//index.jsx\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './app.jsx';\nimport { initVChartSemiTheme } from '@visactor/vchart-semi-theme';\n\n// initialization\ninitVChartSemiTheme();\n\nconst dom = document.querySelector('#root');\nconst root = createRoot(dom);\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: TreeSelect with Limited Tag Display\nDESCRIPTION: Demonstrates how to limit the number of displayed tags in a multiple selection TreeSelect using the 'maxTagCount' prop. Also shows how to implement a popover for viewing remaining tags with 'showRestTagsPopover' and 'restTagsPopoverProps'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                        {\n                            label: 'Chengdu',\n                            value: 'Chengdu',\n                            key: '0-0-2',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n\n    const textStyle = { margin: '20px 0 10px' };\n\n    return ( \n        <div>\n            <h4 style={textStyle}>maxTagCount=2:</h4>\n            <TreeSelect\n                multiple\n                maxTagCount={2}\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"当选中标签超过两个将折叠\"\n                defaultValue={['Beijing', 'Chengdu', 'Canada']}\n            />\n            <h4 style={textStyle}>maxTagCount=2, showRestTagsPopover:</h4>\n            <TreeSelect\n                showRestTagsPopover={true}\n                restTagsPopoverProps={{ position: 'top' }}\n                multiple\n                maxTagCount={2}\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"hover +N 查看\"\n                defaultValue={['Beijing', 'Chengdu', 'Canada']}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: DragMove with Custom Handler in React\nDESCRIPTION: Demonstrates how to use a custom handler to trigger dragging. Only the specified handler element will initiate the drag operation.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from'react';\nimport { IconTransparentStroked } from '@douyinfe/semi-icons';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction Demo(){\n  const handlerRef = React.useRef();\n  const containerRef = React.useRef();\n\n  return (\n    <div \n      style={{ backgroundColor: 'rgba(var(--semi-grey-2), 1)', \n        width: 300, height: 300, padding: 5, position: 'relative', \n        color: 'rgba(var(--semi-white), 1)', fontWeight: 500,\n      }} \n      ref={containerRef}\n    >\n      <span>Constrainer</span>\n      <DragMove\n        handler={() => handlerRef.current}\n        constrainer={() => containerRef.current}\n      >\n        <div \n          style={{ \n            backgroundColor: 'var(--semi-color-primary)', \n            width: 80, height: 80, borderRadius: 10,\n            position: 'absolute', top: 50, left: 50,\n            display: 'flex', alignItems: 'center', justifyContent: 'center',\n          }}\n        >\n          <div \n              style={{ width: 'fit-content', height: 'fit-content' }} \n              ref={handlerRef}\n          ><IconTransparentStroked size={'large'}/></div>\n        </div>\n      </DragMove>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Progress Bar Implementation\nDESCRIPTION: Demonstrates various configurations of the standard progress bar including different colors, sizes, and percentages\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Progress } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ width: 200 }}>\n        <Progress percent={10} stroke=\"var(--semi-color-warning)\" aria-label=\"disk usage\" />\n        <br />\n        <Progress percent={25} stroke=\"var(--semi-color-danger)\" aria-label=\"disk usage\" />\n        <br />\n        <Progress percent={50} aria-label=\"disk usage\"/>\n        <br />\n        <Progress percent={80} aria-label=\"disk usage\"/>\n        <br />\n        <Progress percent={80} size=\"large\" aria-label=\"disk usage\"/>\n        <br />\n        <Progress percent={80} style={{ height: '8px' }} aria-label=\"disk usage\"/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Modal Hooks with Context in Semi Design\nDESCRIPTION: Demonstrates how to use Modal.useModal hook to create modals with access to React context, including configuration provider integration.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider, Modal, Button } from '@douyinfe/semi-ui';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\n\nfunction Demo(props = {}) {\n    const [modal, contextHolder] = Modal.useModal();\n    const config = { 'title': 'This is a success message', 'content': 'Context consumer' };\n\n    return (\n        <ConfigProvider locale={en_GB}>\n            <div>\n                <Button\n                    onClick={() => {\n                        modal.confirm(config);\n                    }}\n                >\n                    Confirm Modal\n                </Button>\n            </div>\n            {contextHolder}\n        </ConfigProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Centering Popover Arrows in React using Semi Design\nDESCRIPTION: This example shows how to center the Popover's arrow to the element using the 'arrowPointAtCenter' prop. It demonstrates this feature with Popovers in various positions around Tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div style={{ paddingLeft: 40 }} className=\"tag-margin-right\">\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, float: 'left' }}>\n                {lefts.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, marginLeft: 180 }}>\n                {rights.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\n                {bottoms.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Focus in Popconfirm Components\nDESCRIPTION: Shows how to manage focus when a Popconfirm opens by using okButtonProps, cancelButtonProps with autoFocus, and the initialFocusRef parameter in content render function. This ensures accessibility and better user experience.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/popconfirm/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, Popconfirm, Space } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Space>\n            <Popconfirm\n                title=\"Are you sure you want to save this edit?\"\n                content=\"This modification will be irreversible\"\n                okButtonProps={{\n                    autoFocus: true,\n                    type: 'danger',\n                }}\n            >\n                <Button>Confirm focus</Button>\n            </Popconfirm>\n            <Popconfirm\n                title=\"Are you sure you want to save this edit?\"\n                content=\"This modification will be irreversible\"\n                cancelButtonProps={{\n                    autoFocus: true,\n                }}\n            >\n                <Button>Cancel focus</Button>\n            </Popconfirm>\n            <Popconfirm\n                title=\"Are you sure you want to save this edit?\"\n                content={({ initialFocusRef }) => {\n                    return <input ref={initialFocusRef} placeholder=\"focus here\" />;\n                }}\n            >\n                <Button>Content focus</Button>\n            </Popconfirm>\n        </Space>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @douyinfe/semi-next\nDESCRIPTION: This command installs the `@douyinfe/semi-next` package as a development dependency using npm or yarn. This package provides the necessary functionality to integrate Semi Design with Next.js, specifically addressing CSS import issues.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-next/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @douyinfe/semi-next\n# or\nyarn add --dev @douyinfe/semi-next\n```\n\n----------------------------------------\n\nTITLE: Implementing Ellipsis with Typography in React\nDESCRIPTION: Shows various configurations for text truncation with ellipsis, including single-line and multi-line truncation, custom tooltips, expandable/collapsible text, and positioning options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography, Tooltip } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Paragraph, Text, Title } = Typography;\n    const customRenderTooltip = useCallback((content, children) => {\n        return <Tooltip content={content} style={{ backgroundColor: 'var(--semi-color-primary)' }}>{children}</Tooltip>;\n    }, []);\n\n    return (\n        <div>\n            <Title heading={5} ellipsis={{ showTooltip: true }} style={{ width: 250 }}>\n                This is a supercalifragilisticexpialidocious title\n            </Title>\n            <br />\n            <Text \n                ellipsis={{ \n                    showTooltip: {\n                        opts: { content: 'This is a supercalifragilisticexpialidocious tooltip' }\n                    }\n                }}\n                style={{ width: 150 }}\n            >\n                Custom tooltip text if you need\n            </Text>\n            <br />\n            <Text link ellipsis={{ showTooltip: true, pos: 'middle' }} style={{ width: 150 }}>\n                This is a supercalifragilisticexpialidocious link\n            </Text>\n            <br/>\n            <Paragraph ellipsis={{ suffix: '-Macbeth' }} style={{ width: 300 }}>\n                {`With suffix: Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage, and then is heard no more; it is a tale told by an idiot, full of sound and fury, signifying nothing.`}\n            </Paragraph>\n            <br/>\n            <Paragraph ellipsis={{ rows: 3 }} style={{ width: 300 }}>\n                {`Multi-line ellipsis: Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage, and then is heard no more; it is a tale told by an idiot, full of sound and fury, signifying nothing.`}\n            </Paragraph>\n            <br/>\n            <Paragraph ellipsis={{ rows: 3, showTooltip: { type: 'popover', opts: { style: { width: 300 } } } }} style={{ width: 300 }}>\n                {`With Popover: Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage, and then is heard no more; it is a tale told by an idiot, full of sound and fury, signifying nothing.`}\n            </Paragraph>\n            <br/>\n            <Paragraph ellipsis={{ rows: 3, expandable: true, collapsible: true, collapseText: 'Show Less', onExpand: (bool, e) => console.log(bool, e) }} style={{ width: 300 }}>\n                {`Expandable and collapsible: Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage, and then is heard no more; it is a tale told by an idiot, full of sound and fury, signifying nothing.`}\n            </Paragraph>\n            <br />\n            <Title \n                heading={6} \n                ellipsis={{ \n                    showTooltip: {\n                        renderTooltip: customRenderTooltip\n                    }\n                }} \n                style={{ width: 250 }}\n                \n            >\n                Custom tooltip with a blue background color\n            </Title>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Three-section Layout in React\nDESCRIPTION: Demonstrates a basic three-section layout using Header, Content, and Footer components from Semi UI Layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Content } = Layout;\n\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Chat Box Rendering in Semi Design\nDESCRIPTION: This snippet demonstrates how to use the customRenderChatBox callback to completely customize the appearance of chat messages in the Chat component. It creates a custom layout for messages with different alignment based on the role.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n                <Avatar size=\"extra-small\" shape=\"square\" src={role.avatar} />\n                {defaultNodes.title}\n            </span>)\n        }\n        return <div className={className}>\n            <div style={{ display: 'flex', flexDirection: 'column', rowGap: 4, alignItems: message.role === 'user' ? 'end' : ''}}>\n                {titleNode}\n                <div style={{ width: 'fit-content'}}>\n                    {defaultNodes.content}\n                </div>\n                {defaultNodes.action}\n            </div>\n        </div>\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats)\n    } ,[]);\n\n     const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            content: `This is a mock response`\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n    \n    return ( <Chat\n        chatBoxRenderConfig={{ renderFullChatBox: customRenderChatBox }}\n        style={commonOuterStyle} \n        chats={message}\n        onChatsChange={onChatsChange}\n        onMessageSend={onMessageSend}\n        roleConfig={roleInfo}\n        uploadProps={uploadProps}\n    />);\n}\n\nrender(CustomFullRender)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Semi Design Tokens\nDESCRIPTION: This code snippet shows how to configure the Tailwind CSS theme to use Semi Design tokens. It maps Semi Design color and border radius variables to Tailwind's theme configuration, enabling the use of Semi Design tokens in Tailwind atomic classes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/tailwind/index.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.export = {\n    theme:{\n        colors:{\n            \"semi-color-white\": \"var(--semi-color-white)\",\n            \"semi-color-black\": \"var(--semi-color-black)\",\n            \"semi-color-primary\": \"var(--semi-color-primary)\",\n            \"semi-color-primary-hover\": \"var(--semi-color-primary-hover)\",\n            \"semi-color-primary-active\": \"var(--semi-color-primary-active)\",\n            \"semi-color-primary-disabled\": \"var(--semi-color-primary-disabled)\",\n            \"semi-color-primary-light-default\": \"var(--semi-color-primary-light-default)\",\n            \"semi-color-primary-light-hover\": \"var(--semi-color-primary-light-hover)\",\n            \"semi-color-primary-light-active\": \"var(--semi-color-primary-light-active)\",\n            \"semi-color-secondary\": \"var(--semi-color-secondary)\",\n            \"semi-color-secondary-hover\": \"var(--semi-color-secondary-hover)\",\n            \"semi-color-secondary-active\": \"var(--semi-color-secondary-active)\",\n            \"semi-color-secondary-disabled\": \"var(--semi-color-secondary-disabled)\",\n            \"semi-color-secondary-light-default\": \"var(--semi-color-secondary-light-default)\",\n            \"semi-color-secondary-light-hover\": \"var(--semi-color-secondary-light-hover)\",\n            \"semi-color-secondary-light-active\": \"var(--semi-color-secondary-light-active)\",\n            \"semi-color-tertiary\": \"var(--semi-color-tertiary)\",\n            \"semi-color-tertiary-hover\": \"var(--semi-color-tertiary-hover)\",\n            \"semi-color-tertiary-active\": \"var(--semi-color-tertiary-active)\",\n            \"semi-color-tertiary-light-default\": \"var(--semi-color-tertiary-light-default)\",\n            \"semi-color-tertiary-light-hover\": \"var(--semi-color-tertiary-light-hover)\",\n            \"semi-color-tertiary-light-active\": \"var(--semi-color-tertiary-light-active)\",\n            \"semi-color-default\": \"var(--semi-color-default)\",\n            \"semi-color-default-hover\": \"var(--semi-color-default-hover)\",\n            \"semi-color-default-active\": \"var(--semi-color-default-active)\",\n            \"semi-color-info\": \"var(--semi-color-info)\",\n            \"semi-color-info-hover\": \"var(--semi-color-info-hover)\",\n            \"semi-color-info-active\": \"var(--semi-color-info-active)\",\n            \"semi-color-info-disabled\": \"var(--semi-color-info-disabled)\",\n            \"semi-color-info-light-default\": \"var(--semi-color-info-light-default)\",\n            \"semi-color-info-light-hover\": \"var(--semi-color-info-light-hover)\",\n            \"semi-color-info-light-active\": \"var(--semi-color-info-light-active)\",\n            \"semi-color-success\": \"var(--semi-color-success)\",\n            \"semi-color-success-hover\": \"var(--semi-color-success-hover)\",\n            \"semi-color-success-active\": \"var(--semi-color-success-active)\",\n            \"semi-color-success-disabled\": \"var(--semi-color-success-disabled)\",\n            \"semi-color-success-light-default\": \"var(--semi-color-success-light-default)\",\n            \"semi-color-success-light-hover\": \"var(--semi-color-success-light-hover)\",\n            \"semi-color-success-light-active\": \"var(--semi-color-success-light-active)\",\n            \"semi-color-danger\": \"var(--semi-color-danger)\",\n            \"semi-color-danger-hover\": \"var(--semi-color-danger-hover)\",\n            \"semi-color-danger-active\": \"var(--semi-color-danger-active)\",\n            \"semi-color-danger-light-default\": \"var(--semi-color-danger-light-default)\",\n            \"semi-color-danger-light-hover\": \"var(--semi-color-danger-light-hover)\",\n            \"semi-color-danger-light-active\": \"var(--semi-color-danger-light-active)\",\n            \"semi-color-warning\": \"var(--semi-color-warning)\",\n            \"semi-color-warning-hover\": \"var(--semi-color-warning-hover)\",\n            \"semi-color-warning-active\": \"var(--semi-color-warning-active)\",\n            \"semi-color-warning-light-default\": \"var(--semi-color-warning-light-default)\",\n            \"semi-color-warning-light-hover\": \"var(--semi-color-warning-light-hover)\",\n            \"semi-color-warning-light-active\": \"var(--semi-color-warning-light-active)\",\n            \"semi-color-focus-border\": \"var(--semi-color-focus-border)\",\n            \"semi-color-disabled-text\": \"var(--semi-color-disabled-text)\",\n            \"semi-color-disabled-border\": \"var(--semi-color-disabled-border)\",\n            \"semi-color-disabled-bg\": \"var(--semi-color-disabled-bg)\",\n            \"semi-color-disabled-fill\": \"var(--semi-color-disabled-fill)\",\n            \"semi-color-shadow\": \"var(--semi-color-shadow)\",\n            \"semi-color-link\": \"var(--semi-color-link)\",\n            \"semi-color-link-hover\": \"var(--semi-color-link-hover)\",\n            \"semi-color-link-active\": \"var(--semi-color-link-active)\",\n            \"semi-color-link-visited\": \"var(--semi-color-link-visited)\",\n            \"semi-color-border\": \"var(--semi-color-border)\",\n            \"semi-color-nav-bg\": \"var(--semi-color-nav-bg)\",\n            \"semi-color-overlay-bg\": \"var(--semi-color-overlay-bg)\",\n            \"semi-color-fill-0\": \"var(--semi-color-fill-0)\",\n            \"semi-color-fill-1\": \"var(--semi-color-fill-1)\",\n            \"semi-color-fill-2\": \"var(--semi-color-fill-2)\",\n            \"semi-color-bg-0\": \"var(--semi-color-bg-0)\",\n            \"semi-color-bg-1\": \"var(--semi-color-bg-1)\",\n            \"semi-color-bg-2\": \"var(--semi-color-bg-2)\",\n            \"semi-color-bg-3\": \"var(--semi-color-bg-3)\",\n            \"semi-color-bg-4\": \"var(--semi-color-bg-4)\",\n            \"semi-color-text-0\": \"var(--semi-color-text-0)\",\n            \"semi-color-text-1\": \"var(--semi-color-text-1)\",\n            \"semi-color-text-2\": \"var(--semi-color-text-2)\",\n            \"semi-color-text-3\": \"var(--semi-color-text-3)\",\n            \"semi-color-highlight-bg\": \"var(--semi-color-highlight-bg)\",\n            \"semi-color-highlight\": \"var(--semi-color-highlight)\",\n            \"semi-color-data-0\": \"var(--semi-color-data-0)\",\n            \"semi-color-data-1\": \"var(--semi-color-data-1)\",\n            \"semi-color-data-2\": \"var(--semi-color-data-2)\",\n            \"semi-color-data-3\": \"var(--semi-color-data-3)\",\n            \"semi-color-data-4\": \"var(--semi-color-data-4)\",\n            \"semi-color-data-5\": \"var(--semi-color-data-5)\",\n            \"semi-color-data-6\": \"var(--semi-color-data-6)\",\n            \"semi-color-data-7\": \"var(--semi-color-data-7)\",\n            \"semi-color-data-8\": \"var(--semi-color-data-8)\",\n            \"semi-color-data-9\": \"var(--semi-color-data-9)\",\n            \"semi-color-data-10\": \"var(--semi-color-data-10)\",\n            \"semi-color-data-11\": \"var(--semi-color-data-11)\",\n            \"semi-color-data-12\": \"var(--semi-color-data-12)\",\n            \"semi-color-data-13\": \"var(--semi-color-data-13)\",\n            \"semi-color-data-14\": \"var(--semi-color-data-14)\",\n            \"semi-color-data-15\": \"var(--semi-color-data-15)\",\n            \"semi-color-data-16\": \"var(--semi-color-data-16)\",\n            \"semi-color-data-17\": \"var(--semi-color-data-17)\",\n            \"semi-color-data-18\": \"var(--semi-color-data-18)\",\n            \"semi-color-data-19\": \"var(--semi-color-data-19)\"\n        },\n        extend:{\n            borderRadius:{\n                \"semi-border-radius-extra-small\": \"var(--semi-border-radius-extra-small)\",\n                \"semi-border-radius-small\": \"var(--semi-border-radius-small)\",\n                \"semi-border-radius-medium\": \"var(--semi-border-radius-medium)\",\n                \"semi-border-radius-large\": \"var(--semi-border-radius-large)\",\n                \"semi-border-radius-circle\": \"var(--semi-border-radius-circle)\",\n                \"semi-border-radius-full\": \"var(--semi-border-radius-full)\",\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Percentage Stacked Bar Chart Implementation with VChart\nDESCRIPTION: Implements a percentage-based stacked bar chart with custom axis formatting to display values as percentages. Includes both vertical and horizontal orientations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst commonSpec = {\n  type: 'bar',\n  percent: true,\n  stack: true,\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { State: 'WY', Age: 'Under 5 Years', Population: 25635 },\n        { State: 'WY', Age: '5 to 13 Years', Population: 1890 },\n        { State: 'WY', Age: '14 to 17 Years', Population: 9314 }\n      ]\n    }\n  ],\n  title: {\n    visible: true,\n    text: 'Percentage stacked bar chart',\n    subtext: 'This is a percentage stacked bar chart',\n  },\n  seriesField: 'Age',\n  legends: { visible: true },\n  axes: [\n    {\n      orient: 'left',\n      label: {\n        formatMethod: val => {\n          return `${(val * 100).toFixed(2)}%`;\n        }\n      }\n    }\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Different Button Types in React\nDESCRIPTION: Demonstrates how to create primary, secondary, tertiary, warning, and danger button types in a React component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    return (\n        <div className=\"btn-margin-right\">\n            <Button>Primary Button</Button>\n            <Button type=\"secondary\">Secondary Button</Button>\n            <Button type=\"tertiary\">Tertiary Button</Button>\n            <Button type=\"warning\">Warning Button</Button>\n            <Button type=\"danger\">Danger Button</Button>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Upload with Upload Component\nDESCRIPTION: Shows how to enable folder upload functionality by setting the directory prop to true, allowing users to upload entire directories at once.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    return (\n        <>\n            <Upload action={action} directory>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Upload folder\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Toast Configuration in JavaScript\nDESCRIPTION: Demonstrates how to configure global Toast settings that will take effect once. This should be called before any Toast methods are used.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nToast.config(config)\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Option Rendering with SCSS\nDESCRIPTION: SCSS styles for the custom option rendering in the Select component. Defines the appearance of options including layout, spacing, colors, and states like focused, selected, and disabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\n.components-select-demo-renderOptionItem {\n    .custom-option-render {\n        display: flex;\n        font-size: 14px;\n        line-height: 20px;\n        word-break: break-all;\n        padding-left: 12px;\n        padding-right: 12px;\n        padding-top: 8px;\n        padding-bottom: 8px;\n        color: var(--semi-color-text-0);\n        position: relative;\n        display: flex;\n        align-items: center;\n        cursor: pointer;\n        box-sizing: border-box;\n        .option-right {\n            margin-left: 8px;\n            display: inline-flex;\n            align-items: center;\n        }\n        &:active {\n            background-color: var(--semi-color-fill-1);\n        }\n        &-focused {\n            background-color: var(--semi-color-fill-0);\n        }\n        &-selected {\n            //font-weight: 700;\n        }\n        &-disabled {\n            color: var(--semi-color-disabled-text);\n            cursor: not-allowed;\n        }\n        &:first-of-type {\n            margin-top: 4px;\n        }\n        &:last-of-type {\n            margin-bottom: 4px;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resizable Component with Callbacks\nDESCRIPTION: Demonstrates basic usage of the Resizable component with default size and resize callbacks. The component shows different text while being resized and displays toast notifications on resize start and end.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [text, setText] = useState('Drag edge to resize')\n  const opts_1 = {\n    content: 'resize start',\n    duration: 1,\n    stack: true,\n  };\n  const opts_2 = {\n    content: 'resize end',\n    duration: 1,\n    stack: true,\n  };\n  return (\n    <div style={{ width: '500px' }}>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n        defaultSize={{\n          width: '60%',\n          height: 300,\n        }}\n        onChange={() => { setText('resizing') }}\n        onResizeStart={() => Toast.info(opts_1)}\n        onResizeEnd={() => { Toast.info(opts_2); setText('Drag edge to resize') }}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          {text}\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation with Scrollable Content\nDESCRIPTION: Shows how to implement a navigation with fixed header/footer and scrollable content area using style and bodyStyle props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconSemiLogo } from '@douyinfe/semi-icons';\nimport { IconTreeSelect, IconForm, IconTree, IconBanner, IconBadge, IconNotification,IconSteps, IconTree, IconTabs, IconNavigation } from '@douyinfe/semi-icons-lab';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                style={{ height: 520 }}\n                bodyStyle={{ height: 300 }}\n                items={[\n                    { itemKey: 'user', text: '用户管理', icon: <IconBadge /> },\n                    { itemKey: '2', text: '订单管理', icon: <IconBanner /> },\n                    { itemKey: '3', text: '资源管理', icon: <IconTreeSelect /> },\n                    {\n                        text: '任务平台',\n                        icon: <IconForm />,\n                        itemKey: '4',\n                        items: ['任务管理', '用户任务查询'],\n                    },\n                    { itemKey: '5', text: '推送通知', icon: <IconNotification /> },\n                    { itemKey: '6', text: '任务', icon: <IconSteps /> },\n                    { itemKey: '7', text: '活动管理', icon: <IconTree /> },\n                    { itemKey: '8', text: '内容工具', icon: <IconTabs /> },\n                    { itemKey: '9', text: '快捷导航', icon: <IconNavigation /> },\n                ]}\n                onSelect={key => console.log(key)}\n                header={{\n                    logo: <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />,\n                    text: 'Semi 运营后台'\n                }}\n                footer={{\n                    collapseButton: true,\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 确认日期时间选择 DatePicker - React\nDESCRIPTION: 使用 needConfirm 属性实现确认后才写入输入框的功能，并展示如何使用 onConfirm 和 onCancel 回调。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => (\n    <DatePicker\n        type=\"dateTime\"\n        needConfirm={true}\n        onConfirm={(...args) => {\n            console.log('Confirmed: ', ...args);\n        }}\n        onCancel={(...args) => {\n            console.log('Canceled: ', ...args);\n        }}\n        onChange={(...args) => {\n            console.log('Changed: ', ...args);\n        }}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Radio Group Implementation\nDESCRIPTION: Example of a Radio group where only one Radio can be selected at a time, with an onChange handler to track the selected value.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => {\n    const [value, setValue] = useState(1);\n    const onChange = (e) => {\n        console.log('radio checked', e.target.value);\n        setValue(e.target.value);\n    }; \n    return (\n        <RadioGroup onChange={onChange} value={value} aria-label=\"单选组合示例\" name=\"demo-radio-group\">\n            <Radio value={1}>A</Radio>\n            <Radio value={2}>B</Radio>\n            <Radio value={3}>C</Radio>\n            <Radio value={4}>D</Radio>\n        </RadioGroup>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Upload with Picture List Type and Custom Prompt\nDESCRIPTION: Shows how to use the Upload component with picture list type and custom prompts. The example includes pre-loaded images and demonstrates right and bottom prompt positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    const action = '//semi.design/api/upload';\n    const getPrompt = (pos, isListType) => {\n        let basicStyle = { display: 'flex', alignItems: 'center', color: 'grey', height: isListType ? '100%' : 32 };\n        let marginStyle = {\n            left: { marginRight: 10 },\n            right: { marginLeft: 10 },\n        };\n        let style = { ...basicStyle, ...marginStyle[pos] };\n\n        return <div style={style}>Please upload certification materials</div>;\n    };\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: '1.jpeg',\n            status: 'success',\n            size: '130kb',\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n        {\n            uid: '2',\n            name: '2.jpeg',\n            size: '222kb',\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        }\n    ];\n    const positions = ['right', 'bottom'];\n    return (\n        <>\n            {positions.map((pos, index) => (\n                <>\n                    {index ? (\n                        <div\n                            style={{ marginBottom: 12, marginTop: 12, borderBottom: '1px solid var(--semi-color-border)' }}\n                        ></div>\n                    ) : null}\n                    <Upload\n                        action={action}\n                        prompt={getPrompt(pos, true)}\n                        promptPosition={pos}\n                        listType=\"picture\"\n                        defaultFileList={defaultFileList}\n                    >\n                        <IconPlus size=\"extra-large\" />\n                    </Upload>\n                </>\n            ))}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Timezone Configuration with ConfigProvider\nDESCRIPTION: Demonstrates how to use ConfigProvider to set timezone configurations for date/time components, including Select, DatePicker, and TimePicker components with dynamic timezone selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useState } from 'react';\nimport { ConfigProvider, Select, DatePicker, TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo(props = {}) {\n    const [timeZone, setTimeZone] = useState('GMT+08:00');\n    const defaultTimestamp = 1581599305265;\n    const gmtList = useMemo(() => {\n        const list = [];\n        for (let hourOffset = -11; hourOffset <= 14 ; hourOffset++) {\n            const prefix = hourOffset >= 0 ? '+' : '-';\n            const hOffset = Math.abs(parseInt(hourOffset, 10));\n            list.push(`GMT${prefix}${String(hOffset).padStart(2, '0')}:00`);\n        }\n        return list;\n    }, []);\n\n    return (\n        <ConfigProvider timeZone={timeZone}>\n            <div style={{ width: 300 }}>\n                <h5 style={{ margin: 10 }}>Select Time Zone:</h5>\n                <Select\n                    placeholder={'请选择时区'}\n                    style={{ width: 300 }}\n                    value={timeZone}\n                    showClear={true}\n                    onSelect={value => setTimeZone(value)}\n                >\n                    {gmtList.map(gmt => (\n                        <Select.Option key={gmt} value={gmt}>\n                            {gmt}\n                        </Select.Option>\n                    ))}\n                </Select>\n                <br/>\n                <br/>\n                <DatePicker type={'dateTime'} defaultValue={defaultTimestamp} onChange={(date, dateString) => console.log('DatePicker changed: ', date, dateString)} />\n                <br/>\n                <br/>\n                <TimePicker defaultValue={defaultTimestamp} onChange={(date, dateString) => console.log('DatePicker changed: ', date, dateString)} />\n            </div>\n        </ConfigProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Navigation Layout Example\nDESCRIPTION: Demonstrates vertical navigation layout with collapsible sidebar and nested menu items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconSemiLogo } from '@douyinfe/semi-icons';\nimport { IconTreeSelect, IconForm, IconTree, IconBanner, IconBadge, IconNotification,IconSteps, IconTree, IconTabs, IconNavigation } from '@douyinfe/semi-icons-lab';\n\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <div style={{ width: '100%' }}>\n                <Nav\n                    bodyStyle={{ height: 300 }}\n                    items={[\n                        { itemKey: 'user', text: '用户管理', icon: <IconBadge /> },\n                        { itemKey: 'union', text: '活动管理', icon: <IconTreeSelect/> },\n                        {\n                            itemKey: 'union-management',\n                            text: '任务管理',\n                            icon: <IconForm />,\n                            items: ['任务设置', '任务查询', '信息录入']\n                        },\n                        {\n                            text: '公告管理',\n                            icon: <IconBanner />,\n                            itemKey: 'job',\n                            items: ['推送管理', '已推送查询'],\n                        },\n                    ]}\n                    onSelect={key => console.log(key)}\n                    header={{\n                        logo: <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />,\n                        text: 'Semi 运营后台'\n                    }}\n                    footer={{\n                        collapseButton: true,\n                    }}\n                />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Components to MarkdownRender in React\nDESCRIPTION: Shows how to add custom components to the MarkdownRender, allowing the use of JSX directly in Markdown content with event handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/markdownrender/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, MarkdownRender, Typography } from '@douyinfe/semi-ui';\nimport * as SemiMarkdownComponents from \"@douyinfe/semi-ui/markdownRender/components\"\n\nfunction Demo() {\n    const components = { ...SemiMarkdownComponents };\n\n    components['MyButton'] = ({ children,onClick }) => {\n        return <Button type={\"primary\"} onClick={onClick} style={{marginBottom:\"12px\"}}> {children} </Button>\n    }\n\n    return <MarkdownRender \n        raw={`\n#### Below is a button rendered in Markdown\n<MyButton onClick={()=>alert(\"MyButton is clicked\")}>MyButton click me</MyButton>\n\nJust write JSX directly in Markdown\n        `}\n        components={{...MarkdownRender.defaultComponents,...components}} />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Error Toast with Action in JSX\nDESCRIPTION: Example of rendering an error Toast component with an action button. This shows the recommended approach for including a single action in a Toast notification.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastCard type='error' content={<div>Ticket transfer failed <span style={{ color: 'var(--semi-color-primary)', marginLeft: 4, cursor: 'pointer' }}>Retry</span> </div>} />\n```\n\n----------------------------------------\n\nTITLE: Advanced Input Group with TreeSelect and Cascader in React\nDESCRIPTION: Shows how to use InputGroup with more complex components like TreeSelect and Cascader for hierarchical data selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputGroup, Select, Cascader, TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const Option = Select.Option;\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        { label: 'Beijing', value: 'Beijing', key: '0-0-0' },\n                        { label: 'Shanghai', value: 'Shanghai', key: '0-0-1' },\n                    ],\n                },\n            ],\n        },\n        { label: 'North America', value: 'North America', key: '1' }\n    ];\n    return (\n        <>\n            <InputGroup>\n                <Select style={{ width: 100 }} defaultValue='from'>\n                    <Select.Option value='from'>From: </Select.Option>\n                    <Select.Option value='to'>To: </Select.Option>\n                </Select>\n                <TreeSelect\n                    style={{ width: 220 }}\n                    treeData={treeData}\n                    placeholder=\"Please select\"\n                />\n            </InputGroup>\n            <br/><br/>\n            <InputGroup>\n                <Select style={{ width: 100 }} defaultValue='from'>\n                    <Select.Option value='from'>From: </Select.Option>\n                    <Select.Option value='to'>To: </Select.Option>\n                </Select>\n                <Cascader\n                    style={{ width: 220 }}\n                    treeData={treeData}\n                    placeholder=\"Please select\"\n                />\n            </InputGroup>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Adaptive Character Size in React\nDESCRIPTION: Demonstrates how to use the 'gap' prop to adjust the spacing around text in character avatars for adaptive sizing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Avatar style={{ margin: 4 }}>AS</Avatar>\n        <Avatar style={{ margin: 4 }} gap={4}>Semi</Avatar>\n        <Avatar style={{ margin: 4 }} gap={10}>Semi</Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Component with Custom Headers in React\nDESCRIPTION: Shows how to implement a Transfer component with custom header rendering for both source and selected panels. Includes custom buttons for select all/clear functionality and item count display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const data = Array.from({ length: 30 }, (v, i) => {\n        return {\n            label: `Item ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n\n    const renderSourceHeader = (props) => {\n        const { num, showButton, allChecked, onAllClick } = props;\n        return <div style={{ margin: '10px 0 0 10px', height: 24, display: 'flex', alignItems: 'center' }}>\n            <span>Total {num} items</span>\n            {showButton && <Button\n                theme=\"borderless\"\n                type=\"tertiary\"\n                size=\"small\" \n                onClick={onAllClick}>{ allChecked ? 'Unselect all' : 'Select all' }</Button>}\n        </div>;\n    };\n\n    const renderSelectedHeader = (props) => {\n        const { num, showButton, onClear } = props;\n        return <div style={{ margin: '10px 0 0 10px', height: 24, display: 'flex', alignItems: 'center' }}>\n            <span>{num} items selected</span>\n            {showButton && <Button\n                theme=\"borderless\"\n                type=\"tertiary\"\n                size=\"small\"\n                onClick={onClear}>Clear</Button>}\n        </div>;\n    };\n\n    return (\n        <Transfer \n            style={{ width: 568, height: 416 }}\n            dataSource={data}\n            renderSourceHeader={renderSourceHeader}\n            renderSelectedHeader={renderSelectedHeader}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Description Component with Alignment Options\nDESCRIPTION: Shows different alignment options (center, justify, left, plain) for the Description component with styled containers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        { key: 'Actual Users', value: '1,480,000' },\n        { key: '7-day Rentention', value: '98%' },\n        { key: 'Security Level', value: 'III' },\n        { key: 'Category Tag', value: <Tag style={{ margin: 0 }}>E-commerce</Tag> },\n        { key: 'Authorized State', value: 'Unauthorized' },\n    ];\n    const style = {\n        boxShadow: 'var(--semi-shadow-elevated)',\n        backgroundColor: 'var(--semi-color-bg-2)',\n        borderRadius: '4px',\n        padding: '10px',\n        margin: '10px',\n        width: '240px',\n    };\n    return (\n        <>\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                <Descriptions align=\"center\" data={data} style={style} />\n                <Descriptions align=\"justify\" data={data} style={style} />\n                <Descriptions align=\"left\" data={data} style={style} />\n                <Descriptions align=\"plain\" data={data} style={style} />\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Preview Menu with Default Elements\nDESCRIPTION: Shows how to customize the preview menu while maintaining default menu items and adding custom elements using the menuItems prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useCallback } from 'react';\nimport { Image, ImagePreview, Divider, Tooltip } from '@douyinfe/semi-ui';\nimport { IconInfoCircle } from '@douyinfe/semi-icons';\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n    ]), []);\n\n    const renderPreviewMenu = useCallback((props) => {\n        const { menuItems } = props;\n        const customNode = <Tooltip content='I is a custom action'><IconInfoCircle size=\"large\" /></Tooltip>;\n        return (\n            <div style={{ display: 'flex', backgroundColor: 'rgba(0, 0, 0, 0.75)', alignItems: 'center', padding: '5px 16px', borderRadius: 4 }}>\n                {menuItems.slice(0, 3)}\n                <Divider layout=\"vertical\" />\n                {menuItems.slice(3, 7)}\n                <Divider layout=\"vertical\" />\n                {menuItems.slice(7)}\n                <Divider layout=\"vertical\" />\n                {customNode}\n            </div>\n        );\n    }, []);\n\n    return (\n        <>  \n            <ImagePreview\n                renderPreviewMenu={renderPreviewMenu}\n            >\n                {srcList.map((src, index) => (<Image key={index} src={src} width={200} alt={`lamp${index + 1}`} />))}\n            </ImagePreview>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment in Flex Layout for Semi-Design Grid\nDESCRIPTION: Demonstrates vertical alignment options in the flex layout of the grid system. The 'align' prop on Row components is used to control the vertical alignment of columns with different heights.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid grid-flex\">\n        <p>Align Top</p>\n        <Row type=\"flex\" justify=\"center\" align=\"top\">\n            <Col span={4}><div className=\"col-content\" value={100}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={50}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={120}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={80}>col-4</div></Col>\n        </Row>\n\n        <p>Align Center</p>\n        <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n            <Col span={4}><div className=\"col-content\" value={100}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={50}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={120}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={80}>col-4</div></Col>\n        </Row>\n\n        <p>Align Bottom</p>\n        <Row type=\"flex\" justify=\"space-between\" align=\"bottom\">\n            <Col span={4}><div className=\"col-content\" value={100}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={50}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={120}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={80}>col-4</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Button Properties Modal Implementation\nDESCRIPTION: Demonstrates how to customize Modal button properties using okButtonProps and cancelButtonProps.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>Custom Button Properties</Button>\n                <Modal\n                    title=\"Custom Button Properties\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    okButtonProps={{ size: 'small', type: 'warning' }}\n                    cancelButtonProps={{ size: 'small', disabled: true }}\n                >\n                    <p>This is a modal with customized button props.</p>\n                    <p>More content...</p>\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Request Parameters Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the parameters available in the customRequest function for a custom upload implementation. It includes file information, callback functions for progress/error/success, and configuration options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    // 当前文件名称\n    fileName: string,\n    // 用户设置的props.data\n    data: object,\n    // FileItem，具体结构参考下面的文档\n    file: FileItem,\n    // original File Object which extends Blob, 浏览器实际获取到的文件对象(https://developer.mozilla.org/zh-CN/docs/Web/API/File)\n    fileInstance: File,\n    // 上传过程中应调用的函数，event需要包含 total、loaded属性\n    onProgress: (event: { total: number, loaded: number }) => any,\n    // 上传出错时应调用的函数\n    onError: (userXhr: { status: number }, e: event) => any,\n     // 上传成功后应调用的函数, response为上传成功后的请求结果\n    onSuccess: (response: any, e?: event) => any,\n    // 用户设置的props.withCredentials\n    withCredentials: boolean,\n    // 用户设置的props.action\n    action: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Slider Component\nDESCRIPTION: Example of implementing a controlled slider component with value and onChange props\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider, Button } from '@douyinfe/semi-ui';\n\nclass ControllSlider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: 10 };\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    changeValue() {\n        this.setState({ value: this.state.value + 10 });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.changeValue} style={{ marginRight: 20 }}>Click to change value</Button>\n                <br/>\n                <br/>\n                <Slider value={this.state.value}></Slider>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Basic Usage with Timezone Configuration\nDESCRIPTION: Demonstrates how to use ConfigProvider to set timezone configuration for time-related components including DatePicker and TimePicker. The example shows a dynamic timezone selector with automatic updates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useState } from 'react';\nimport { ConfigProvider, Select, DatePicker, TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo(props = {}) {\n    const [timeZone, setTimeZone] = useState('GMT+08:00');\n    const defaultTimestamp = 1581599305265;\n    const gmtList = useMemo(() => {\n        const list = [];\n        for (let hourOffset = -11; hourOffset <= 14 ; hourOffset++) {\n            const prefix = hourOffset >= 0 ? '+' : '-';\n            const hOffset = Math.abs(parseInt(hourOffset, 10));\n            list.push(`GMT${prefix}${String(hOffset).padStart(2, '0')}:00`);\n        }\n        return list;\n    }, []);\n\n    return (\n        <ConfigProvider timeZone={timeZone}>\n            <div style={{ width: 300 }}>\n                <h5 style={{ margin: 10 }}>Select Time Zone:</h5>\n                <Select\n                    placeholder={'Select time zone'}\n                    style={{ width: 300 }}\n                    value={timeZone}\n                    showClear={true}\n                    onSelect={value => setTimeZone(value)}\n                >\n                    {gmtList.map(gmt => (\n                        <Select.Option key={gmt} value={gmt}>\n                            {gmt}\n                        </Select.Option>\n                    ))}\n                </Select>\n                <br/>\n                <br/>\n                <DatePicker type={'dateTime'} defaultValue={defaultTimestamp} onChange={(date, dateString) => console.log('DatePicker changed: ', date, dateString)} />\n                <br/>\n                <br/>\n                <TimePicker defaultValue={defaultTimestamp} onChange={(date, dateString) => console.log('DatePicker changed: ', date, dateString)} />\n            </div>\n        </ConfigProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ColorPicker with Top and Bottom Slots in React\nDESCRIPTION: 展示了如何使用 topSlot 和 bottomSlot 属性在 ColorPicker 的顶部和底部添加自定义内容。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return <ColorPicker\n        topSlot={<div> TopSlot</div>}\n        bottomSlot={<div>Bottom Slot</div>}\n        alpha={true}\n        onChange={value=>{console.log(value);}}\n    />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Upload Attributes in React Upload Component\nDESCRIPTION: Demonstrates how to add custom data and headers to the Upload component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    let data = {\n        role: 'ies',\n        time: new Date().getTime(),\n    };\n    let headers = {\n        'x-tt-semi': 'semi-upload',\n    };\n    return (\n        <Upload action={action} data={data} headers={headers}>\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Options in React\nDESCRIPTION: Shows how to create a CheckboxGroup using an array of options, including plain options, options with extra information, and disabled options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nclass App extends React.Component {\n\n    render() {\n        function onChange(checkedValues) {\n            console.log('checked = ', checkedValues);\n        }\n\n        const plainOptions = ['semi', 'vigo', 'helo'];\n        const options = [\n            { label: 'Aim for the highest', value: '1', extra: \"Raise the bar. Wait for bigger gains. Find the best solutions by widening your perspective. Be attentive. Distill ideas down to their fundamental truths. Keep learning and growing\" },\n            { label: 'Be grounded & courageous', value: '2', extra: \"Make your own discoveries. Dive deep into facts. Stay level-headed. Focus on impact. Assume ownership, take risks, break the mold. Rapid iterations, multiple possibilities.\" },\n            { label: 'Be open & humble', value: '3', extra: \"Trust yourself, trust each other. Be willing to offer and ask for help. Collaboration creates value. Approach problems with the big picture in mind. Be mindful and check your ego; stay open to different ideas.\" },\n            { label: 'Be candid & clear', value: '4', extra: \"Dare to share your honest opinions. It's okay to make mistakes. Own it when you do. Stick to the facts, identify issues, and avoid \\'leader-pleasing.\\' Be accurate and forthright; be methodical and focused.\" }\n        ];\n        const optionsWithDisabled = [\n            { label: 'Photography', value: 'Photography' },\n            { label: 'Movies', value: 'Movies' },\n            { label: 'Running', value: 'Running', disabled: false },\n        ];\n        return (\n            <div>\n                <CheckboxGroup options={plainOptions} defaultValue={['semi']} onChange={onChange} aria-label=\"CheckboxGroup demo\" />\n                <br/><br/>\n                <CheckboxGroup options={options} defaultValue={[]} onChange={onChange} aria-label=\"CheckboxGroup demo\" />\n                <br/><br/>\n                <CheckboxGroup\n                    options={optionsWithDisabled}\n                    disabled\n                    defaultValue={['Photography']}\n                    onChange={onChange}\n                    aria-label=\"Checkbox demo\"\n                />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Position Configuration\nDESCRIPTION: This code snippet showcases how to configure the position of the Tooltip's popup using the `position` prop. It demonstrates various position options like `topLeft`, `top`, `topRight`, `leftTop`, etc., and how they affect the popup's alignment relative to the child element.  The `arrowPointAtCenter` prop is set to `false` to align the tooltip with the edges instead of centering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div>\n            <div style={{ marginLeft: 80, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Tooltip\n                        content={\n                            <article>\n                                <p>hi bytedance</p>\n                                <p>hi bytedance</p>\n                            </article>\n                        }\n                        arrowPointAtCenter={false}\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag style={{ margin: 8, padding: 20 }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Tooltip>\n                ))}\n            </div>\n            <div style={{ width: 80, float: 'left' }}>\n                {lefts.map((pos, index) => (\n                    <Tooltip\n                        content={\n                            <article>\n                                <p>hi bytedance</p>\n                                <p>hi bytedance</p>\n                            </article>\n                        }\n                        arrowPointAtCenter={false}\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag style={{ margin: 8, padding: 20, width: 60 }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Tooltip>\n                ))}\n            </div>\n            <div style={{ width: 40, marginLeft: 300 }}>\n                {rights.map((pos, index) => (\n                    <Tooltip\n                        content={\n                            <article>\n                                <p>hi bytedance</p>\n                                <p>hi bytedance</p>\n                            </article>\n                        }\n                        arrowPointAtCenter={false}\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag style={{ margin: 8, padding: 20, width: 60 }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Tooltip>\n                ))}\n            </div>\n            <div style={{ marginLeft: 80, clear: 'both', whiteSpace: 'nowrap' }}>\n                {bottoms.map((pos, index) => (\n                    <Tooltip\n                        content={\n                            <article>\n                                <p>hi bytedance</p>\n                                <p>hi bytedance</p>\n                            </article>\n                        }\n                        arrowPointAtCenter={false}\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag style={{ margin: 8, padding: 20, width: 60 }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Tooltip>\n                ))}\n            </div>\n        </div>\n    );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Display in Calendar Component (React/JSX)\nDESCRIPTION: Shows how to customize date display using renderDateDisplay prop. Implements custom date rendering with Avatar components and dynamic colors based on the day of the week.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar, Calendar } from '@douyinfe/semi-ui';\n\n() => {\n    const displayValue = new Date(2023, 4, 14);\n\n    const renderDateDisplay = date => {\n        const colors = [\"amber\", \"blue\", \"cyan\", \"green\", \"grey\", \"indigo\", \"lime\"];\n        return <div><Avatar color={colors[date.getDay()]} size=\"small\">{date.getDate()}</Avatar></div>;\n    };\n\n    return <Calendar height={400} mode=\"week\" displayValue={displayValue} renderDateDisplay={renderDateDisplay} />;\n};\n```\n\n----------------------------------------\n\nTITLE: 全选功能实现\nDESCRIPTION: 使用indeterminate属性实现全选功能，当部分选中时显示半选状态，演示了如何处理复杂的选择逻辑。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Checkbox, CheckboxGroup } from '@douyinfe/semi-ui';\n\n() => {\n    const plainOptions = ['Photography', 'Movies', 'Running'];\n    const [checkedList, setCheckedList] = useState(['Photography', 'Running']);\n    const [indeterminate, setIndeterminate] = useState(true);\n    const [checkAll, setCheckall] = useState(false);\n    const onChange = (checkedList) => {\n        setCheckedList(checkedList);\n        setIndeterminate(!!checkedList.length && checkedList.length < plainOptions.length);\n        setCheckall(checkedList.length === plainOptions.length);\n    };\n    const onCheckAllChange = (e) => {\n        console.log(e);\n        setCheckedList(e.target.checked ? plainOptions : []);\n        setIndeterminate(false);\n        setCheckall(e.target.checked);\n    };\n\n    return (\n        <div>\n            <div style={{ paddingBottom: 8, borderBottom: '1px solid var(--semi-color-border)' }}>\n                <Checkbox\n                    indeterminate={indeterminate}\n                    onChange={onCheckAllChange}\n                    checked={checkAll}\n                    aria-label=\"Checkbox 示例\"\n                >\n                    Check all\n                </Checkbox>\n            </div>\n            <CheckboxGroup\n                style={{ marginTop: 6 }}\n                options={plainOptions}\n                value={checkedList}\n                onChange={onChange}\n                aria-label=\"CheckboxGroup 示例\"\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Rotation and Zoom Cropper\nDESCRIPTION: Demonstrates controlled rotation and zoom functionality with slider controls and live preview.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, Slider } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nconst actionStyle = {\n  marginTop: 20,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: 'fit-content'\n}\n\nfunction Demo() {\n  const [rotate, setRotate] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const ref = useRef();\n  const [cropperUrl, setCropperUrl] = useState('');\n\n  const onZoomChange = useCallback((value) => {\n    setZoom(value);\n  })\n\n  const onSliderChange = useCallback((value) => {\n    setRotate(value);\n  }, []);\n\n  const onButtonClick = useCallback(() => {\n    const canvas = ref.current.getCropperCanvas();\n    setCropperUrl(canvas.toDataURL());\n  }, []);\n\n  return (\n      <div id='cropper-container'>\n           <Cropper \n              ref={ref} \n              src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n              style={containerStyle}\n              rotate={rotate}\n              zoom={zoom}\n              onZoomChange={onZoomChange}\n           />\n           <div style={actionStyle} >\n            <span>旋转</span>\n            <Slider\n              style={{ width: 500}}\n              value={rotate}\n              step={1}\n              min={-360}\n              max={360}\n              onChange={onSliderChange}\n            />\n           </div>\n           <div style={actionStyle} >\n            <span>缩放</span>\n            <Slider\n              style={{ width: 500}}\n              value={zoom}\n              step={0.1}\n              min={0.1}\n              max={3}\n              onChange={onZoomChange}\n            />\n           </div>\n           <br />\n           <Button onClick={onButtonClick}>裁切</Button>\n          <br /><br />\n          {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n      </div>\n  );\n};\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Default Checked State in React\nDESCRIPTION: Shows how to create a Checkbox that is checked by default using the defaultChecked prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Checkbox\n        defaultChecked\n        onChange={e => console.log(e)}\n        aria-label=\"Checkbox demo\"\n    >\n        Semi Design\n    </Checkbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Animation in JavaScript\nDESCRIPTION: Example of creating and using an Animation instance in vanilla JavaScript. It demonstrates creating a div element, initializing an animation, and updating the element's style on each frame.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animation } from '@douyinfe/semi-animation';\n\nconst div = document.createElement('span');\ndiv.style.display = 'inline-block';\ndocument.body.appendChild(div);\n\nconst animation = new Animation({\n    from: { value: 0 },\n    to: { value: 1 },\n});\n\nanimation.on('frame', props => {\n    const num = props.value.toFixed(2);\n    div.style.transform = `scale(${num})`;\n    div.innerText = num;\n});\n```\n\n----------------------------------------\n\nTITLE: 基本用法示例 - React\nDESCRIPTION: 展示了Chat组件的基本用法,包括设置对话内容、角色配置、布局方式等。通过chats、onChatsChange和onMessageSend属性实现基础对话显示和交互。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat, Radio } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"给一个 Semi Design 的 Button 组件的使用示例\",\n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: \"以下是一个 Semi 代码的使用示例：\\n\\`\\`\\`jsx \\nimport React from 'react';\\nimport { Button } from '@douyinfe/semi-ui';\\n\\nconst MyComponent = () => {\\n  return (\\n    <Button>Click me</Button>\\n );\\n};\\nexport default MyComponent;\\n\\`\\`\\`\\n\",\n    }\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    margin: '8px 16px',\n    height: 550,\n}\n\nlet id = 0;\nfunction getId() {\n    return `id-${id++}`\n}\n\nconst uploadProps = { action: 'https://api.semi.design/upload' }\nconst uploadTipProps = { content: '自定义上传按钮提示信息' }\n\nfunction DefaultChat() {\n    const [message, setMessage] = useState(defaultMessage);\n    const [mode, setMode] = useState('bubble');\n    const [align, setAlign] = useState('leftRight');\n\n    const onAlignChange = useCallback((e) => {\n        setAlign(e.target.value);\n    }, []);\n\n    const onModeChange = useCallback((e) => {\n        setMode(e.target.value);\n    }, []); \n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"这是一条 mock 回复信息\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const onMessageReset = useCallback((e) => {\n        setTimeout(() => {\n            setMessage((message) => {\n                const lastMessage = message[message.length - 1];\n                const newLastMessage = {\n                    ...lastMessage,\n                    status: 'complete',\n                    content: 'This is a mock reset message.',\n                }\n                return [...message.slice(0, -1), newLastMessage]\n            })\n        }, 200);\n    })\n\n    return (\n        <>\n            <span style={{ display: 'flex', flexDirection: 'column', rowGap: '8px'}}>\n                <span style={{ display: 'flex', alignItems: 'center', columnGap: '10px'}}>\n                    模式\n                    <RadioGroup onChange={onModeChange} value={mode} type={\"button\"}>\n                        <Radio value={'bubble'}>气泡</Radio>\n                        <Radio value={'noBubble'}>非气泡</Radio>\n                        <Radio value={'userBubble'}>用户会话气泡</Radio>\n                    </RadioGroup>\n                </span>\n                <span style={{ display: 'flex', alignItems: 'center', columnGap: '10px'}}>\n                    会话布局方式\n                    <RadioGroup onChange={onAlignChange} value={align} type={\"button\"}>\n                        <Radio value={'leftRight'}>左右分布</Radio>\n                        <Radio value={'leftAlign'}>左对齐</Radio>\n                    </RadioGroup>\n                </span>\n            </span>\n            <Chat \n                key={align + mode}\n                align={align}\n                mode={mode}\n                uploadProps={uploadProps}\n                style={commonOuterStyle}\n                chats={message}\n                roleConfig={roleInfo}\n                onChatsChange={onChatsChange}\n                onMessageSend={onMessageSend}\n                onMessageReset={onMessageReset}\n                uploadTipProps={uploadTipProps}\n            />\n        </>\n    )\n}\n\nrender(DefaultChat);\n```\n\n----------------------------------------\n\nTITLE: Custom Selection Rendering in Semi Design Select Component\nDESCRIPTION: This example demonstrates how to customize the rendering of selected items in both single and multiple selection modes using renderSelectedItem. It shows custom item rendering with avatars and custom tag implementations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select, Avatar, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const list = [\n        {\n            name: 'Keman Xia',\n            email: 'xiakeman@example.com',\n            avatar:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/bag.jpeg',\n        },\n        {\n            name: 'Yue Shen',\n            email: 'shenyue@example.com',\n            avatar:\n                'https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/bf8647bffab13c38772c9ff94bf91a9d.jpg',\n        },\n        {\n            name: 'Chenyi Qu',\n            email: 'quchenyi@example.com',\n            avatar:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Viamaker.png',\n        },\n        {\n            name: 'Jiamao Wen',\n            email: 'wenjiamao@example.com',\n            avatar:\n                'https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/6fbafc2d-e3e6-4cff-a1e2-17709c680624.png',\n        },\n    ];\n\n    const renderSelectedItem = optionNode => (\n        <div key={optionNode.email} style={{ display: 'flex', alignItems: 'center' }}>\n            <Avatar src={optionNode.avatar} size=\"small\">\n                {optionNode.abbr}\n            </Avatar>\n            <span style={{ marginLeft: 8 }}>{optionNode.email}</span>\n        </div>\n    );\n\n    // avatarSrc & avatarShape are supported after 1.6.0-beta\n    const renderMultipleWithCustomTag = (optionNode, { onClose }) => {\n        const content = (\n            <Tag\n                avatarSrc={optionNode.avatar}\n                avatarShape=\"circle\"\n                closable={true}\n                onClose={onClose}\n                size=\"large\"\n                key={optionNode.name}\n            >\n                {optionNode.name}\n            </Tag>\n        );\n        return {\n            isRenderInTag: false,\n            content,\n        };\n    };\n\n    const renderMultipleWithCustomTag2 = (optionNode, { onClose }) => {\n        const content = (\n            <Tag\n                avatarSrc={optionNode.avatar}\n                avatarShape=\"square\"\n                closable={true}\n                onClose={onClose}\n                size=\"large\"\n                key={optionNode.name}\n            >\n                {optionNode.name}\n            </Tag>\n        );\n        return {\n            isRenderInTag: false,\n            content,\n        };\n    };\n\n    const renderCustomOption = (item, index) => {\n        const optionStyle = {\n            display: 'flex',\n            paddingLeft: 24,\n            paddingTop: 10,\n            paddingBottom: 10,\n        };\n        return (\n            <Select.Option value={item.name} style={optionStyle} showTick={true} {...item} key={item.email}>\n                <Avatar size=\"small\" src={item.avatar} />\n                <div style={{ marginLeft: 8 }}>\n                    <div style={{ fontSize: 14 }}>{item.name}</div>\n                    <div\n                        style={{ color: 'var(--color-text-2)', fontSize: 12, lineHeight: '16px', fontWeight: 'normal' }}\n                    >\n                        {item.email}\n                    </div>\n                </div>\n            </Select.Option>\n        );\n    };\n\n    return (\n        <>\n            <Select\n                placeholder=\"Please select...\"\n                style={{ width: 280, height: 40 }}\n                onChange={v => console.log(v)}\n                defaultValue={'Keman Xia'}\n                renderSelectedItem={renderSelectedItem}\n            >\n                {list.map((item, index) => renderCustomOption(item, index))}\n            </Select>\n            <Select\n                placeholder=\"Please select...\"\n                maxTagCount={2}\n                style={{ width: 280, marginTop: 20 }}\n                onChange={v => console.log(v)}\n                defaultValue={['Keman Xia', 'Yue Shen']}\n                multiple\n                renderSelectedItem={renderMultipleWithCustomTag}\n            >\n                {list.map((item, index) => renderCustomOption(item, index))}\n            </Select>\n            <Select\n                placeholder=\"Please select...\"\n                maxTagCount={2}\n                style={{ width: 280, marginTop: 20 }}\n                onChange={v => console.log(v)}\n                defaultValue={['Keman Xia', 'Yue Shen']}\n                multiple\n                renderSelectedItem={renderMultipleWithCustomTag2}\n            >\n                {list.map((item, index) => renderCustomOption(item, index))}\n            </Select>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-selection Select Component with Various Options\nDESCRIPTION: Demonstrates multiple selection with options for maxTagCount, showRestTagsPopover, ellipsisTrigger, expandRestTagsOnClick, and max settings. The component has a default maxHeight of 270px with vertical scroll.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select multiple style={{ width: '320px' }} defaultValue={['douyin', 'coze']}>\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n            <Select.Option value=\"coze\">Coze</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n            <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            multiple\n            maxTagCount={2}\n            showRestTagsPopover={true}\n            restTagsPopoverProps={{ position: 'top' }}\n            style={{ width: '320px' }}\n            defaultValue={['douyin', 'coze', 'capcut']}\n        >\n            <Select.Option value=\"douyin\">Semi</Select.Option>\n            <Select.Option value=\"coze\">Coze</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n            <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n        </Select>\n\n        <br />\n        <br />\n        <Select\n            multiple\n            style={{ width: '320px' }}\n            defaultValue={['douyin']}\n            max={2}\n            onExceed={() => Toast.warning('Only two options are allowed')}\n        >\n            <Select.Option value=\"douyin\">Semi</Select.Option>\n            <Select.Option value=\"coze\">Coze</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n            <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            multiple\n            maxTagCount={2}\n            showRestTagsPopover={true}\n            restTagsPopoverProps={{ position: 'top' }}\n            style={{ width: '220px' }}\n            defaultValue={['xigua', 'coze', 'capcut', 'douyin']}\n            ellipsisTrigger\n            expandRestTagsOnClick\n        >\n            <Select.Option value=\"douyin\">Semi</Select.Option>\n            <Select.Option value=\"coze\">Coze</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n            <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Clearing in Semi Design Chat Component\nDESCRIPTION: This snippet shows how to implement a clear context feature in the Semi Design Chat component. It includes options for displaying a clear context button and using a ref to clear the context programmatically.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat, Radio } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"Introduce semi design\", \n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: 'Semi Design is a design system designed, developed and maintained by the Douyin front-end team and MED product design team.',\n    }\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    margin: '8px 16px',\n    height: 550,\n}\n\nlet id = 0;\nfunction getId() {\n    return `id-${id++}`\n}\n\nconst uploadProps = { action: 'https://api.semi.design/upload' }\nconst uploadTipProps = { content: 'Customize upload button prompt information' }\n\nfunction DefaultChat() {\n    const [message, setMessage] = useState(defaultMessage);\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"This is a mock response message.\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    const onMessageReset = useCallback((e) => {\n        setTimeout(() => {\n            setMessage((message) => {\n                const lastMessage = message[message.length - 1];\n                const newLastMessage = {\n                    ...lastMessage,\n                    status: 'complete',\n                    content: 'This is a mock reset message.',\n                }\n                return [...message.slice(0, -1), newLastMessage]\n            })\n        }, 200);\n    })\n\n    return (\n        <>\n            <Chat\n                uploadProps={uploadProps}\n                style={commonOuterStyle}\n                chats={message}\n                roleConfig={roleInfo}\n                onChatsChange={onChatsChange}\n                onMessageSend={onMessageSend}\n                onMessageReset={onMessageReset}\n                uploadTipProps={uploadTipProps}\n                showClearContext\n            />\n        </>\n    )\n}\n\nrender(DefaultChat);\n```\n\n----------------------------------------\n\nTITLE: Customizing File List Operations in React Upload\nDESCRIPTION: Demonstrates how to customize the file list operations area using the 'renderFileOperation' prop when 'listType' is set to 'list'. It adds custom buttons for viewing, downloading, and deleting files.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload, IconDownload, IconEyeOpened, IconDelete } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        }\n    ];\n    const renderFileOperation = (fileItem) => (\n        <div style={{ display: 'flex', columnGap: 8, padding: '0 8px' }}>\n            <Button icon={<IconEyeOpened></IconEyeOpened>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n            <Button icon={<IconDownload></IconDownload>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n            <Button onClick={e=>fileItem.onRemove()} icon={<IconDelete></IconDelete>} type=\"tertiary\" theme=\"borderless\" size=\"small\"></Button>\n        </div>\n    );\n    return <Upload action={action} defaultFileList={defaultFileList} itemStyle={{ width: 300 }} renderFileOperation={renderFileOperation}>\n        <Button icon={<IconUpload />} theme=\"light\">点击上传</Button>\n    </Upload>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Ellipsis in Tree Component Nodes for React\nDESCRIPTION: This snippet shows how to implement text ellipsis for long node labels in the Tree component using the renderLabel prop and Typography component from Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree, Button, Typography } from '@douyinfe/semi-ui';\nimport { IconMore } from '@douyinfe/semi-icons';\n\n() => {\n    const renderBtn = (content) => (\n        <Button\n            onClick={e => {\n                Toast.info({ content });\n                e.stopPropagation();\n            }}\n            icon={<IconMore />}\n            size=\"small\"\n        />\n    );\n    const renderLabel = (label, item) => (\n        <div style={{ display: 'flex' }}>\n            <Typography.Text\n                ellipsis={{ showTooltip: true }}\n                style={{ width: 'calc(100% - 48px)' }}\n            >\n                {label}\n            </Typography.Text>\n            {renderBtn(item.key)}\n        </div>\n    );\n    const treeDataWithNode = [\n        {\n            label: '亚洲亚洲亚洲亚洲亚洲亚洲亚洲亚洲',\n            value: 'yazhou',\n            key: 'yazhou',\n            children: [\n                {\n                    label: '中国中国中国中国中国中国中国中国',\n                    value: 'zhongguo',\n                    key: 'zhongguo'\n                },\n                {\n                    label: '日本日本日本日本日本日本日本日本',\n                    value: 'riben',\n                    key: 'riben',\n                },\n            ],\n        }\n    ];\n    const treeStyle = {\n        width: 260,\n        height: 420,\n        border: '1px solid var(--semi-color-border)'\n    };\n    return (\n        <Tree\n            treeData={treeDataWithNode}\n            renderLabel={renderLabel}\n            style={treeStyle}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Input Area Implementation with Form in Semi Design Chat\nDESCRIPTION: This example demonstrates creating a completely custom input area using the Form component, with custom fields for text input and file upload. It handles form submission and sends the data to the Chat component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomInputRender(props) {\n    const { defaultNode, onClear, onSend } = props;\n    const api = useRef();\n    const onSubmit = useCallback(() => {\n        if (api.current) {\n            const values = api.current.getValues();\n            if ((values.name && values.name.length !== 0) || (values.file && values.file.length !== 0)) {\n                onSend(values.name, values.file);\n                api.current.reset();\n            } \n        }\n    }, []);\n\n    return (<div style={inputStyle}>\n        <Form\n            getFormApi={formApi => api.current = formApi}\n        >\n            <strong>输入信息</strong>\n            <Form.Input\n                field=\"name\"\n                label=\"名称（Input）\"\n                style={{ width: 250 }}\n                trigger='blur'\n            />\n            <Form.Upload\n                field='file'\n                label='文档'\n                action='https://api.semi.design/upload'\n            >\n                <Button icon={<IconUpload />} theme=\"light\">\n                    点击上传\n                </Button>\n            </Form.Upload>\n        </Form>\n        <Button style={{ width: 'fit-content' }} onClick={onSubmit}>提交</Button>\n    </div>);\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable SideSheet Placement in React\nDESCRIPTION: Shows how to implement SideSheet with configurable placement options (top, bottom, left, right).\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, RadioGroup, Radio, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const change = () => {\n        setVisible(!visible);\n    };\n    const [placement, setPlacement] = useState('right');\n    const changePlacement = e => {\n        setPlacement(e.target.value);\n    };\n    return (\n        <>\n            <RadioGroup onChange={changePlacement} value={placement}>\n                <Radio value={'right'}>right</Radio>\n                <Radio value={'left'}>left</Radio>\n                <Radio value={'top'}>top</Radio>\n                <Radio value={'bottom'}>bottom</Radio>\n            </RadioGroup>\n            <br />\n            <br />\n            <Button onClick={change}>Open SideSheet</Button>\n            <SideSheet title=\"Sidesheet\" visible={visible} onCancel={change} placement={placement}>\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Positioning Notifications in React\nDESCRIPTION: Demonstrates how to position notifications in different locations on the screen using the position property, which supports top, bottom, topLeft, topRight, bottomLeft, and bottomRight.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button, ButtonGroup } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        with: 3,\n        Position: 'topRight',\n        content: 'semi-ui-notification',\n        title: 'Hi bytedance',\n    };\n\n    return (\n        <>\n            <ButtonGroup>\n                <Button onClick={() => Notification.info({ ...opts, Position: 'top' })}>top</Button>\n                <Button onClick={() => Notification.info({ ...opts, position: 'topLeft' })}>topLeft</Button>\n                <Button onClick={() => Notification.info(opts)}>topRight</Button>\n            </ButtonGroup>\n            <br/><br/>\n            <ButtonGroup>\n                <Button onClick={() => Notification.info({ ...opts, position: 'bottom' })}>bottom</Button>\n                <Button onClick={() => Notification.info({ ...opts, position: 'bottomRight' })}>bottomRight</Button>\n                <Button onClick={() => Notification.info({ ...opts, position: 'bottomLeft' })}>bottomLeft</Button>\n            </ButtonGroup>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Components with Semi-Design\nDESCRIPTION: Showcases interactive UI components including Popover, Tooltip, and Rating from the Semi-Design library. The components are arranged in a flex container for alignment and include hover interactions that display tooltip content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ display: 'flex', alignItems: 'center' }}>\n    <Popover content={'hi semi-design'} style={{ padding: 8 }}><Tag style={{ marginRight: 8 }}>I am Popover</Tag></Popover>\n    <Tooltip content={'hi semi-design'}>\n        <Tag style={{ marginRight: 8 }}>I am Tooltip</Tag>\n    </Tooltip>\n    <Rating defaultValue={3} size='small' style={{ marginRight: 8 }} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Ellipsis for Breadcrumb in React\nDESCRIPTION: Shows how to implement a fully custom ellipsis rendering using the renderMore method and Popover component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Demo() {\n    const separator = '-'; // Separator for splicing restItem array items\n    const renderMore = restItem => {\n        const content = (\n            <>\n                {\n                    restItem.map((item, idx) => (\n                        <React.Fragment key={`restItem-${idx}`}>\n                            {item}\n                            {idx !== restItem.length - 1 &&\n                                <span style={{ color: 'var(--semi-color-text-2)', marginRight: '6px' }}>\n                                    {separator}\n                                </span>\n                            }\n                        </React.Fragment>\n                    ))\n                }\n            </>\n        );\n        return (\n            <Popover\n                content={content}\n                style={{ padding: 12 }}\n                showArrow\n            >\n                <IconMore />\n            </Popover>\n        );\n    };\n    return (\n        <>\n            <Breadcrumb\n                renderMore={restItem => renderMore(restItem)}\n                onClick={(item, e) => console.log(item, e)}\n            >\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>Many levels</Breadcrumb.Item>\n                <Breadcrumb.Item>Another level</Breadcrumb.Item>\n                <Breadcrumb.Item>Another level again</Breadcrumb.Item>\n                <Breadcrumb.Item>Here is another one</Breadcrumb.Item>\n                <Breadcrumb.Item>Penultimate</Breadcrumb.Item>\n                <Breadcrumb.Item>Detail</Breadcrumb.Item>\n            </Breadcrumb>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 禁用状态的Checkbox\nDESCRIPTION: 通过设置disabled属性创建禁用状态的Checkbox，可以与defaultChecked结合使用设置不同的初始状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Checkbox defaultChecked={false} disabled aria-label=\"Checkbox 示例\">Unchecked Disabled</Checkbox>\n        <br />\n        <Checkbox defaultChecked disabled aria-label=\"Checkbox 示例\">Checked Disabled</Checkbox>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 配置Select多选模式及相关特性\nDESCRIPTION: 展示了Select多选模式的配置，包括maxTagCount限制显示数量、ellipsisTrigger自适应处理、expandRestTagsOnClick展示全部标签、showRestTagsPopover悬浮显示和max限制最大选择数量等功能。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select multiple style={{ width: '320px' }} defaultValue={['douyin', 'ulikecam']}>\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            multiple\n            maxTagCount={2}\n            showRestTagsPopover={true}\n            restTagsPopoverProps={{ position: 'top' }}\n            style={{ width: '320px' }}\n            defaultValue={['douyin', 'ulikecam', 'jianying']}\n        >\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n        \n        <br />\n        <br />\n        <Select\n            multiple\n            style={{ width: '320px' }}\n            defaultValue={['douyin']}\n            max={2}\n            onExceed={() => Toast.warning('最多只允许选择两项')}\n        >\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            multiple\n            maxTagCount={2}\n            showRestTagsPopover={true}\n            restTagsPopoverProps={{ position: 'top' }}\n            style={{ width: '220px' }}\n            defaultValue={['xigua', 'ulikecam', 'jianying', 'douyin']}\n            ellipsisTrigger\n            expandRestTagsOnClick\n        >\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Button States with Semi Design\nDESCRIPTION: Demonstrates various disabled button states including regular, borderless, light, primary and warning themes. Shows how to implement disabled state across different button variations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    return (\n        <div>\n            <Button disabled>Disabled</Button>\n            <Button disabled theme=\"borderless\">No background and disabled</Button>\n            <Button disabled theme=\"light\">Light and disbaled</Button>\n            <Button disabled theme=\"borderless\" type=\"primary\">No background, primary and disabled</Button>\n            <Button disabled theme=\"solid\" type=\"warning\">Solid, warning and disabled</Button>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: InputNumber with Custom Formatting\nDESCRIPTION: Shows how to implement custom formatting and parsing for display values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    log(v) {\n        console.log(`Changed to: [${typeof v}] ${v}`);\n    }\n\n    render() {\n        return (\n            <div style={{ width: 180 }}>\n                <label>RMB</label>\n                <InputNumber\n                    onChange={this.log}\n                    defaultValue={1000}\n                    min={0}\n                    formatter={value => `￥ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                    parser={value => value.replace(/\\￥\\s?|(,*)/g, '')}\n                />\n                <br/><br/>\n\n                <label>Custom string</label>\n                <InputNumber\n                    onChange={this.log}\n                    defaultValue={1111}\n                    formatter={value => String(value).split('').join('-')}\n                    parser={value => value.replace(/\\-/g, '')}\n                />\n                <br/>\n\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grid with Gutter Intervals in Semi-Design\nDESCRIPTION: Shows how to use gutter intervals in the grid system. It demonstrates both horizontal and vertical gutters, including responsive gutter sizes. This example uses the 'gutter' prop on the Row component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid grid-gutter\">\n        <p>horizontal</p>\n        <hr />\n        <Row gutter={16}>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n        </Row>\n        <p>vertical</p>\n        <hr />\n        <Row gutter={[16, 24]}>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 动态生成分组Select选项\nDESCRIPTION: 展示如何通过数据数组动态生成带有分组的Select选项。示例中使用map函数遍历数据，为每个组和选项生成对应的OptGroup和Option组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        {\n            label: 'Asia',\n            children: [\n                { value: 'a-1', label: 'China' },\n                { value: 'a-2', label: 'Korea' },\n            ],\n        },\n        {\n            label: 'Europe',\n            children: [\n                { value: 'b-1', label: 'Germany' },\n                { value: 'b-2', label: 'France' },\n            ],\n        },\n        {\n            label: 'South America',\n            children: [{ value: 'c-1', label: 'Peru' }],\n        },\n    ];\n    return (\n        <Select placeholder=\"\" style={{ width: 180 }} filter>\n            {data.map((group, index) => (\n                <Select.OptGroup label={group.label} key={`${index}-${group.label}`}>\n                    {group.children.map((option, index2) => (\n                        <Select.Option value={option.value} key={`${index2}-${group.label}`}>\n                            {option.label}\n                        </Select.Option>\n                    ))}\n                </Select.OptGroup>\n            ))}\n        </Select>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Usage with Line Style in React\nDESCRIPTION: Shows the basic usage of Tabs component with line style, including multiple TabPanes with different content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Tabs type=\"line\">\n            <TabPane tab=\"文档\" itemKey=\"1\">\n                <h3>文档</h3>\n                <p style={{ lineHeight: 1.8 }}>\n                    Semi Design 是由抖音前端团队与 UED\n                    团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的\n                    Web 应用。\n                </p>\n                <p style={{ lineHeight: 1.8 }}>\n                    区别于其他的设计系统而言，Semi Design 以用户中心、内容优先、设计人性化为设计理念，具有以下优势：\n                </p>\n                <ul>\n                    <li>\n                        <p>Semi Design 以内容优先进行设计。</p>\n                    </li>\n                    <li>\n                        <p>更容易地自定义主题。</p>\n                    </li>\n                    <li>\n                        <p>适用国际化场景。</p>\n                    </li>\n                    <li>\n                        <p>效率场景加入人性化关怀。</p>\n                    </li>\n                </ul>\n            </TabPane>\n            <TabPane tab=\"快速起步\" itemKey=\"2\">\n                <h3>快速起步</h3>\n                <pre\n                    style={{\n                        margin: '24px 0',\n                        padding: '20px',\n                        border: 'none',\n                        whiteSpace: 'normal',\n                        borderRadius: 'var(--semi-border-radius-medium)',\n                        color: 'var(--semi-color-text-1)',\n                        backgroundColor: 'var(--semi-color-fill-0)',\n                    }}\n                >\n                    <code>yarn add @douyinfe/semi-ui</code>\n                </pre>\n            </TabPane>\n            <TabPane tab=\"帮助\" itemKey=\"3\">\n                <h3>帮助</h3>\n                <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\n                    Q：有新组件需求、或者现有组件feature不能满足业务需求？\n                </p>\n                <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\n                    右上角问题反馈，提交issue，label选择Feature Request / New Component Request 我们会高优处理这些需求。\n                </p>\n                <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\n                    Q：对组件的使用有疑惑？\n                </p>\n                <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\n                    欢迎进我们的客服lark群进行咨询提问。\n                </p>\n            </TabPane>\n        </Tabs>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Menu with JSON Data in React\nDESCRIPTION: Example of creating a Dropdown menu using the JSON configuration approach. The menu property accepts an array of objects that define the structure and behavior of dropdown items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Button } from '@douyinfe/semi-ui';\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\nfunction DropdownEvents() {\n    const menu = [\n        { node: 'title', name: '分组1' },\n        { node: 'item', name: 'primary1', type: 'primary', onClick: () => console.log('click primary') },\n        { node: 'item', name: 'secondary', type: 'secondary' },\n        { node: 'divider' },\n        { node: 'title', name: '分组2' },\n        { node: 'item', name: 'tertiary', type: 'tertiary' },\n        { node: 'item', name: 'warning', type: 'warning', active: true },\n        { node: 'item', name: 'danger', type: 'danger' },\n    ];\n    return (\n        <Dropdown trigger={'click'} showTick position={'bottomLeft'} menu={menu}>\n            <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                Click Me\n            </Button>\n        </Dropdown>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Content to Tabs Bar in React with Semi-Design\nDESCRIPTION: This example demonstrates how to add extra content on the right side of a tab bar using the tabBarExtraContent prop in the Tabs component. The example adds a button that triggers an alert message when clicked.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, Button } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs\n                defaultActiveKey=\"1\"\n                tabBarExtraContent={\n                    <Button\n                        onClick={() => {\n                            alert('you have clicked me!');\n                        }}\n                    >\n                        Extra Action\n                    </Button>\n                }\n            >\n                <TabPane tab=\"Document\" itemKey=\"1\">\n                    Document\n                </TabPane>\n                <TabPane tab=\"Quick Start\" itemKey=\"2\">\n                    Quick Start\n                </TabPane>\n                <TabPane tab=\"Help\" itemKey=\"3\">\n                    Help\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Tabs in React Component\nDESCRIPTION: Shows how to create scrollable tabs using the 'collapsible' prop. This feature is available for horizontal mode only and is supported in versions 1.1.0 and above.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible>\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((item, index) => (\n                    <TabPane tab={`Tab-${item}`} itemKey={`Tab-${item}`} key={item}>\n                        Content of card tab {index}\n                    </TabPane>\n                ))}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates and Times in DatePicker with React and Semi Design\nDESCRIPTION: This example demonstrates how to disable specific dates and times using the 'disabledDate' and 'disabledTime' props. It also shows how to use 'defaultPickerValue' to set the initial panel view.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport * as dateFns from 'date-fns';\nimport { range } from 'lodash-es';\n\nclass App extends React.Component {\n    constructor(props = {}) {\n        super(props);\n\n        this.today = () => new Date();\n\n        this.nextValidMonth = () => {\n            const nextValidDate = this.today();\n            nextValidDate.setMonth((nextValidDate.getMonth() + 1) % 12);\n            return nextValidDate;\n        };\n\n        this.disabledTime = date =>\n            dateFns.isToday(date)\n                ? {\n                    disabledHours: () => [17, 18],\n                    disabledMinutes: hour => (19 === hour ? range(0, 10, 1) : []),\n                    disabledSeconds: (hour, minute) => (hour === 20 && minute === 20 ? range(0, 20, 1) : []),\n                }\n                : null;\n\n        this.disabledTime2 = (date, panelType) => {\n            if (panelType === 'left') {\n                return { disabledHours: () => [17, 18] };\n            } else {\n                return { disabledHours: () => [12, 13, 14, 15, 16, 17, 18] };\n            }\n        };\n\n        this.disabledDate = date => {\n            const deadDate = this.today();\n            const month = deadDate.getMonth();\n            deadDate.setDate(28);\n            deadDate.setMonth((month + 1) % 12);\n            return date.getTime() < deadDate.getTime();\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h4>禁用时间：禁用今天下午5-6点</h4>\n                    <DatePicker type=\"dateTime\" hideDisabledOptions={false} disabledTime={this.disabledTime} />\n                </div>\n                <div>\n                    <h4>禁用时间：两个面板禁用不同时间</h4>\n                    <DatePicker\n                        type=\"dateTimeRange\"\n                        hideDisabledOptions={false}\n                        disabledTime={this.disabledTime2}\n                        style={{ width: 400 }}\n                    />\n                </div>\n                <div>\n                    <h4>禁用日期：禁用下个月28号之前的所有日期</h4>\n                    <DatePicker\n                        type=\"dateTimeRange\"\n                        disabledDate={this.disabledDate}\n                        defaultPickerValue={this.nextValidMonth()}\n                        style={{ width: 400 }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TreeSelect Usage Example\nDESCRIPTION: Demonstrates the basic usage of TreeSelect component in single selection mode. It shows how to structure tree data with nested nodes representing geographical locations and configure the basic appearance.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n() => {\n    const treeData = [\n        {\n            label: '亚洲',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: '中国',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: '北京',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: '上海',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: '北美洲',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return ( \n        <TreeSelect\n            style={{ width: 300 }}\n            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n            treeData={treeData}\n            placeholder=\"请选择\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Layer Styles in Semi Design Select\nDESCRIPTION: This example shows how to customize the style of the dropdown layer in a Select component using dropdownClassName and dropdownStyle properties to control appearance and width.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <Select style={{ width: 180 }} dropdownStyle={{ width: 250 }} dropdownClassName=\"test\">\n        <Select.Option value=\"douyin\">Douyin</Select.Option>\n        <Select.Option value=\"coze\">Coze</Select.Option>\n        <Select.Option value=\"capcut\">Capcut</Select.Option>\n        <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n    </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Tooltip with forwardRef and Class Component Children\nDESCRIPTION: This example demonstrates using the Tooltip component with different types of children: a functional component wrapped with `forwardRef`, a class component, and a regular DOM element (span). It highlights the importance of prop forwarding and ref handling for custom components used as Tooltip children. It's important to ensure that Semi UI can access the underlying DOM node of the children.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { forwardRef } from 'react';\nimport { Tooltip, Space } from '@douyinfe/semi-ui';\n\nconst style={ border: '2px solid var(--semi-color-border)', paddingLeft: 4, paddingRight: 4, borderRadius: 4 };\n\n// 将props属性传递，绑定ref\nconst FCChildren = forwardRef((props, ref) => {\n    return (<span {...props} ref={ref} style={style}>Functional Component</span>);\n});\n\n// 将props属性传递\nclass MyComponent extends React.Component {\n    render() {\n        return (<span {...this.props} style={style}>ClassComponent</span>);\n    }\n};\n\nfunction Demo() {\n    return (\n        <Space>\n            <Tooltip content={'semi design'}>\n                <FCChildren />\n            </Tooltip>\n            <Tooltip content={'semi design'}>\n                <MyComponent />\n            </Tooltip>\n            <Tooltip content={'semi design'}>\n                <span style={style}>DOM</span>\n            </Tooltip>\n        </Space>\n    );\n}\nrender(Demo);\n\n```\n\n----------------------------------------\n\nTITLE: OverflowList Scroll Mode Implementation\nDESCRIPTION: Shows how to implement OverflowList in scroll mode with scrollable content and item selection functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.map(item => <Tag style={{ marginRight: 8, marginLeft: 8, flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }} key={item.key}>+{item.length}</Tag>);\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <span key={item.key} className=\"item-cls\">\n                <Tag color=\"blue\" style={{ marginRight: 8, flex: '0 0 auto' }}>\n                    {item.icon}\n                    {item.key}\n                </Tag>\n            </span>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList\n                    items={items}\n                    renderMode=\"scroll\"\n                    overflowRenderer={renderOverflow}\n                    visibleItemRenderer={renderItem}\n                />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Popover Display\nDESCRIPTION: Example of a controlled Popover component using custom trigger and visible state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Popover, Button, RadioGroup, Radio, Empty } from '@douyinfe/semi-ui';\nimport { IllustrationSuccess, IllustrationSuccessDark } from '@douyinfe/semi-illustrations';\n\n() => {\n    const content = (\n        <Empty\n            title={'先进的设计 / 研发协作方式'}\n            image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n            darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n            description=\"使用 Semi D2C 快速还原 Figma 设计稿，一键转代码\"\n            style={{ width: 400, margin: '0 auto', display: 'flex', padding: 20 }}\n        />\n    );\n    const [visible, setVisible] = useState(false);\n    return (\n        <Popover visible={visible} content={content} trigger=\"custom\">\n            <RadioGroup type='button' onChange={(e) => setVisible(e.target.value)} value={visible}>\n                <Radio value={true}>受控显示</Radio>\n                <Radio value={false}>受控隐藏</Radio>\n            </RadioGroup>\n        </Popover>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 受控Checkbox组件\nDESCRIPTION: 实现完全受控的Checkbox组件，通过状态管理选中和禁用状态，演示了如何实现复杂的交互控制。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox, Button } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            checked: true,\n            disabled: false,\n        };\n        this.toggleChecked = this.toggleChecked.bind(this);\n        this.toggleDisable = this.toggleDisable.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    toggleChecked () {\n        this.setState({ checked: !this.state.checked });\n    };\n\n    toggleDisable () {\n        this.setState({ disabled: !this.state.disabled });\n    };\n\n    onChange (e) {\n        console.log('checked = ', e.target.checked);\n        this.setState({\n            checked: e.target.checked,\n        });\n    };\n\n    render() {\n        const label = `${this.state.checked ? 'Checked' : 'Unchecked'} ${\n            this.state.disabled ? 'Disabled' : 'Enabled'\n        }`;\n        return (\n            <div>\n                <p style={{ marginBottom: '20px' }}>\n                    <Checkbox\n                        checked={this.state.checked}\n                        disabled={this.state.disabled}\n                        onChange={this.onChange}\n                        aria-label=\"Checkbox 示例\"\n                    >\n                        {label}\n                    </Checkbox>\n                </p>\n                <p>\n                    <Button type=\"primary\" size=\"small\" onClick={this.toggleChecked}>\n                        {!this.state.checked ? 'Check' : 'Uncheck'}\n                    </Button>\n                    <Button\n                        style={{ marginLeft: '10px' }}\n                        type=\"primary\"\n                        size=\"small\"\n                        onClick={this.toggleDisable}\n                    >\n                        {!this.state.disabled ? 'Disable' : 'Enable'}\n                    </Button>\n                </p>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Implementation with Items Array\nDESCRIPTION: Demonstrates how to create a basic navigation menu by passing an items array to the Nav component. Each item includes itemKey, text, and icon properties to define the navigation structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconSetting } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                bodyStyle={{ height: 320 }}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                    {\n                        text: 'Task Platform',\n                        icon: <IconSetting />,\n                        itemKey: 'job',\n                        items: ['Task Management', 'User Task Query'],\n                    },\n                ]}\n                onSelect={data => console.log('trigger onSelect: ', data)}\n                onClick={data => console.log('trigger onClick: ', data)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Time Range Selection with DatePicker\nDESCRIPTION: Shows how to implement date and time range selection by setting type to 'dateTimeRange', allowing users to select both start/end dates and times.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker type=\"dateTimeRange\" style={{ width: 400 }} onChange={console.log} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Mode Radio Component in Semi Design\nDESCRIPTION: Shows how to use the advanced mode of the Radio component, allowing unchecking when clicked again.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            checked: true,\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        console.log('radio checked', e.target.checked);\n        this.setState({\n            checked: e.target.checked,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Radio checked={this.state.checked} mode=\"advanced\" onChange={this.onChange} aria-label=\"Radio demo\" name=\"demo-radio-advanced\">\n                    Click Again to Uncheck\n                </Radio>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Navigation with Semi Design\nDESCRIPTION: Demonstrates vertical navigation implementation with collapsible sidebar, header logo, and nested menu items. Includes user management, union center, and task management sections with icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconStar, IconUser, IconUserGroup, IconSetting } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <div style={{ width: '100%' }}>\n                <Nav\n                    bodyStyle={{ height: 320 }}\n                    items={[\n                        { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                        { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                        {\n                            itemKey: 'union-management',\n                            text: 'Union Management',\n                            icon: <IconUserGroup />,\n                            items: ['Announcement Settings', 'Union Query', 'Entry Information']\n                        },\n                        {\n                            text: 'Task Platform',\n                            icon: <IconSetting />,\n                            itemKey: 'job',\n                            items: ['Task Management', 'User Task Query'],\n                        },\n                    ]}\n                    onSelect={key => console.log(key)}\n                    header={{\n                        logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                        text: 'Live Platform'\n                    }}\n                    footer={{\n                        collapseButton: true,\n                    }}\n                />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DragMove Implementation\nDESCRIPTION: Demonstrates basic usage of DragMove component with a draggable div element. Sets absolute positioning and requires proper DOM event listener support.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from 'react';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <DragMove>\n      <div \n        style={{ backgroundColor: 'var(--semi-color-primary)',width: 80, height: 80, \n          display: 'flex', alignItems: 'center',justifyContent: 'center', \n          borderRadius: 10, fontWeight: 500,\n          position: 'absolute',  color: 'rgba(var(--semi-white), 1)'\n        }} \n      >Drag me</div>\n    </DragMove>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating File Information After Upload in React\nDESCRIPTION: This snippet shows how to update file information after upload using the afterUpload hook in a React-based upload component. It demonstrates how to modify file status, validation messages, and names based on server response.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const afterUpload = ({ response, file }) => {\n        // 可以根据业务接口返回，决定当次上传是否成功\n        if (response.status_code === 200) {\n            return {\n                autoRemove: false,\n                status: 'uploadFail',\n                validateMessage: '内容不合法',\n                name: 'RenameByServer.jpg',\n                url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg'\n            };\n        } else {\n            return {};\n        }\n    };\n\n    return (\n        <Upload action=\"https://api.semi.design/upload\" afterUpload={afterUpload}>\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Component Default Props with semiGlobal\nDESCRIPTION: Shows how to configure default properties for global Semi Design components using semiGlobal.config.overrideDefaultProps. This allows setting default types, zIndex, and other properties for components like Button, Select, and Tooltip.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { semiGlobal } from \"@douiyinfe/semi-ui\"\n\nsemiGlobal.config.overrideDefaultProps = {\n   Button: {\n     type: 'warning',\n   },\n   Select: {\n     zIndex: 2000,\n   },\n   Tooltip: {\n     zIndex: 2001,\n     trigger:\"click\"\n   },\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled PinCode Component\nDESCRIPTION: Shows how to implement a controlled PinCode component using value and onChange props, with a random value generator button.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [value, setValue] = useState('69af41');\n    return (\n        <>\n            <Button onClick={() => setValue(String(parseInt(Math.random() * 100000000)).slice(0, 6))}>\n                Set Random Value\n            </Button>\n            <br />\n            <br />\n            <PinCode\n                format={'mixed'}\n                onComplete={value => console.log('pincode: ', value)}\n                value={value}\n                onChange={v => {\n                    console.log(v);\n                    setValue(v);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Button Style Radio\nDESCRIPTION: Example of Radio groups styled as buttons with three different sizes (small, middle, large). Note that button-style radios don't support extra text or vertical direction.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio, Space } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Space vertical spacing='loose' align='start'>\n            <RadioGroup type='button' buttonSize='small' defaultValue={1} aria-label=\"单选组合示例\" name=\"demo-radio-small\">\n                <Radio value={1}>即时推送</Radio>\n                <Radio value={2}>定时推送</Radio>\n                <Radio value={3}>动态推送</Radio>\n            </RadioGroup>\n            <RadioGroup type='button' buttonSize='middle' defaultValue={1} aria-label=\"单选组合示例\" name=\"demo-radio-middle\">\n                <Radio value={1}>即时推送</Radio>\n                <Radio value={2}>定时推送</Radio>\n                <Radio value={3}>动态推送</Radio>\n            </RadioGroup>\n            <RadioGroup type='button' buttonSize='large' defaultValue={1} aria-label=\"单选组合示例\" name=\"demo-radio-large\">\n                <Radio value={1}>即时推送</Radio>\n                <Radio value={2}>定时推送</Radio>\n                <Radio value={3}>动态推送</Radio>\n            </RadioGroup>\n        </Space>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Size Customization in TreeSelect Component\nDESCRIPTION: Example demonstrating how to set different sizes (small, default, large) for TreeSelect component using the size prop. Includes hierarchical data structure with multiple selection enabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n    return ( \n        <div>\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                size=\"small\"\n                placeholder=\"small\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                size=\"default\"\n                placeholder=\"default\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                size=\"large\"\n                placeholder=\"large\"\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Pagination with Custom Page Size Options in React\nDESCRIPTION: Shows how to set custom page size options using the 'pageSizeOpts' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination\n            total={300}\n            showSizeChanger\n            style={{ marginBottom: 12 }}\n            pageSizeOpts={[50, 80, 90, 200]}>\n        </Pagination>\n        <Pagination\n            total={300}\n            showSizeChanger\n            pageSizeOpts={[10, 20, 50, 200]}>\n        </Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Badge and Avatar Components in Semi-Design with Various Themes\nDESCRIPTION: Implementation of Badge components with different themes (solid, light, inverted) applied to Avatar components. The code demonstrates how to use Badge with count or dot indicators wrapped around square-shaped Avatar components with different color schemes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ display: 'flex' }}>\n    <div style={{ padding: 8 }}>\n        <Badge count={5} theme='solid' >\n            <Avatar color='blue' shape='square' style={badgeStyle}>XZ</Avatar>\n        </Badge>\n    </div>\n    <div style={{ padding: 8 }}>\n        <Badge count={5} theme='light' >\n            <Avatar color='cyan' shape='square' style={badgeStyle}>YB</Avatar>\n        </Badge>\n    </div>\n    <div style={{ padding: 8 }}>\n        <Badge count={5} theme='inverted'>\n            <Avatar color='indigo' shape='square' style={badgeStyle}>LX</Avatar>\n        </Badge>\n    </div>\n    <div style={{ padding: 8 }}>\n        <Badge dot theme='solid' >\n            <Avatar color='light-blue' shape='square' style={badgeStyle}>YZ</Avatar>\n        </Badge>\n    </div>\n    <div style={{ padding: 8 }}>\n        <Badge dot theme='light' >\n            <Avatar color='teal' shape='square' style={badgeStyle}>HW</Avatar>\n        </Badge>\n    </div>\n    <div style={{ padding: '8px', borderRadius: '4px', backgroundColor: 'var(--semi-color-fill-0)' }}>\n        <Badge dot theme='inverted'>\n            <Avatar color='green' shape='square' style={badgeStyle}>XM</Avatar>\n        </Badge>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HotKeys Component in React\nDESCRIPTION: Demonstrates the basic usage of the HotKeys component to open a modal using a keyboard shortcut (Ctrl + Shift + A).\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/hotkeys/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { HotKeys, Modal } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [visible, setVisible] = useState(false);\n  const showDialog = () => {\n      setVisible(true);\n  };\n  const handleOk = () => {\n      setVisible(false);\n  };\n  const handleCancel = () => {\n      setVisible(false);\n  };\n  const hotKeys = [HotKeys.Keys.Control, 'Shift', HotKeys.Keys.A]\n  \n  return (\n    <div>\n      <HotKeys hotKeys={hotKeys} onHotKey={showDialog} ></HotKeys>\n      <Modal\n          title=\"Dialog\"\n          visible={visible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n      >\n          This is the Modal opened by hotkey: {hotKeys.join('+')}.\n      </Modal>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Notifications in React\nDESCRIPTION: Shows how to display notifications in different positions using the Semi-Design Notification component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button, ButtonGroup } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        duration: 3,\n        position: 'topRight',\n        content: 'semi-ui-notification',\n        title: 'Hi bytedance',\n    };\n\n    return (\n        <>\n            <ButtonGroup>\n                <Button onClick={() => Notification.info({ ...opts, position: 'top' })}>top</Button>\n                <Button onClick={() => Notification.info({ ...opts, position: 'topLeft' })}>topLeft</Button>\n                <Button onClick={() => Notification.info(opts)}>topRight</Button>\n            </ButtonGroup>\n            <br />\n            <br />\n            <ButtonGroup>\n                <Button onClick={() => Notification.info({ ...opts, position: 'bottom' })}>bottom</Button>\n                <Button onClick={() => Notification.info({ ...opts, position: 'bottomRight' })}>bottomRight</Button>\n                <Button onClick={() => Notification.info({ ...opts, position: 'bottomLeft' })}>bottomLeft</Button>\n            </ButtonGroup>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Wall Upload with listType='picture'\nDESCRIPTION: This example shows how to create a photo wall upload component with thumbnail display. It uses listType='picture' to display uploaded images as thumbnails in a grid layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dy.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n    return (\n        <>\n            <Upload action={action} listType=\"picture\" accept=\"image/*\" multiple defaultFileList={defaultFileList}>\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload with Semi-UI\nDESCRIPTION: Demonstrates how to enable multiple file selection in the Upload component by setting the multiple prop to true, allowing users to select and upload multiple files simultaneously.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    return (\n        <Upload action={action} multiple>\n            <Button icon={<IconUpload />} theme=\"light\">\n                Click upload\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL/LTR Support in React with Semi Design Components\nDESCRIPTION: This code snippet demonstrates how to implement RTL/LTR support using Semi Design components in a React application. It includes a toggle for switching between LTR and RTL directions and showcases various components with their RTL/LTR behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ConfigProvider, ButtonGroup, Button, Row, Col, Notification, DatePicker, TimePicker, Timeline, Popover, Tag, Tooltip, Badge, Avatar, Steps, Pagination, Modal, Breadcrumb, Rating, Nav, Spin, Cascader, Radio, Select, Input, Typography, TextArea, Checkbox, Switch } from '@douyinfe/semi-ui';\nimport { IconVigoLogo, IconEdit, IconCamera, IconList, IconSidebar, IconChevronDown } from '@douyinfe/semi-icons';\nimport en_GB from '@douyinfe/semi-ui/locale/source/en_GB';\n\nfunction Demo(props = {}) {\n    const { Option } = Select;\n    const [direction, setDirection] = useState();\n    const flexStyle = { display: 'flex', marginBottom: 32, flexWrap: 'wrap' };\n    const titleStyle = { margin: '50px 0 16px 0' };\n    const rowStyle = { margin: '16px 10px' };\n    const badgeStyle = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n        display: 'inline-block',\n    };\n    const tagStyle = { marginRight: 8, marginBottom: 8 };\n    const buttonStyle = { ...tagStyle };\n    const opts = {\n        title: 'Hi,Bytedance',\n        content: 'ies dance dance dance',\n        duration: 3,\n        direction,\n    };\n    const treeData = [\n        {\n            label: 'Zhejiang',\n            value: 'zhejiang',\n            children: [\n                {\n                    label: 'Hangzhou',\n                    value: 'hangzhou',\n                    children: [\n                        {\n                            label: 'Xihu',\n                            value: 'xihu',\n                        },\n                        {\n                            label: 'Xianhan',\n                            value: 'xiaoshan',\n                        },\n                        {\n                            label: 'Lin'an',\n                            value: 'linan',\n                        },\n                    ],\n                },\n                {\n                    label: 'Ningbo',\n                    value: 'ningbo',\n                    children: [\n                        {\n                            label: 'Haishu',\n                            value: 'haishu',\n                        },\n                        {\n                            label: 'Jiangbei',\n                            value: 'jiangbei',\n                        }\n                    ]\n                },\n            ],\n        }\n    ];\n\n    return (\n        <div>\n            <div style={{ marginBottom: 20 }}>\n                <ButtonGroup>\n                    <Button onClick={() => setDirection('ltr')}>LTR</Button>\n                    <Button onClick={() => setDirection('rtl')}>RTL</Button>\n                </ButtonGroup>\n            </div>\n            <ConfigProvider direction={direction} locale={en_GB}>\n                <Row>\n                    <h3 style={titleStyle}>Buttons</h3>\n                </Row>\n                <Row style={rowStyle}>\n                    <Button loading={true} theme=\"solid\" style={{ marginRight: 8 }}>Loading</Button>\n                    <Button icon={<IconSidebar />} theme=\"solid\" style={{ marginRight: 8 }}>Collapsing</Button>\n                    <Button icon={<IconChevronDown />} theme=\"solid\" iconPosition={\"right\"} style={{ marginRight: 8 }}>Expand options</Button >\n                    <br/><br/>\n                    <ButtonGroup>\n                        <Button>Copy</Button>\n                        <Button>Query</Button>\n                        <Button>Cut</Button>\n                    </ButtonGroup>\n                </Row>\n                <Row>\n                    <h3 style={titleStyle}>Input</h3>\n                </Row>\n                <Row style={rowStyle} gutter={16}>\n                    <Col span={12}>\n                        <Input placeholder='Input something'></Input>\n                        <br/><br/>\n                        <Input disabled placeholder='Input something'></Input>\n                        <br/><br/>\n                        <Input prefix=\"Prefix\" showClear></Input>\n                        <br/><br/>\n                        <Input suffix={<Typography.Text strong type='secondary' style={{ margin: '0 8px' }}>Suffix</Typography.Text>} showClear></Input>\n                        <br/><br/>\n                        <TextArea placeholder=\"Input something\" maxCount={100} />\n                        <br/><br/>\n                        <div style={flexStyle}>\n                            <Switch style={{ marginRight: 8 }} defaultChecked={true}></Switch>\n                            <Switch style={{ marginRight: 8 }}></Switch>\n                            <Switch disabled defaultChecked={true} style={{ marginRight: 8 }}></Switch>\n                        </div>\n                        <div style={flexStyle}>\n                            <Checkbox style={{ marginRight: 8 }} defaultChecked>Checkbox</Checkbox>\n                            <Checkbox style={{ marginRight: 8 }} disabled defaultChecked>Disabled Checkbox</Checkbox>\n                            <Checkbox style={{ marginRight: 8 }} disabled>Disabled Checkbox</Checkbox>\n                        </div>\n                        <div style={{ ...flexStyle, marginBottom: 0 }}>\n                            <Radio style={{ marginRight: 8 }} defaultChecked>Radio</Radio>\n                            <Radio style={{ marginRight: 8 }} disabled defaultChecked>Disabled Radio</Radio>\n                            <Radio style={{ marginRight: 8 }} disabled>Disabled Radio</Radio>\n                        </div>\n                    </Col>\n                    <Col span={12}>\n                        <DatePicker onChange={(date, dateString) => console.log(dateString)} style={{ width: '100%' }}/>\n                        <br/><br/>\n                        <TimePicker style={{ width: '100%' }} />\n                        <br/><br/>\n                        <Select style={{ width: '100%' }} placeholder=\"Select-single\">\n                            <Option value='abc'>Semi</Option>\n                            <Option value='hotsoon'>Hotsoon</Option>\n                            <Option value='pipixia' disabled>Pipixia</Option>\n                            <Option value='xigua'>Xigua</Option>\n                        </Select>\n                        <br/><br/>\n                        <Select disabled style={{ width: '100%' }} placeholder=\"Select-disabled\">\n                            <Option value='abc'>Semi</Option>\n                            <Option value='hotsoon'>Hotsoon</Option>\n                            <Option value='pipixia' disabled>Pipixia</Option>\n                            <Option value='xigua'>Xigua</Option>\n                        </Select>\n                        <br/><br/>\n                        <Select multiple style={{ width: '100%' }} placeholder=\"Select-mutiple\">\n                            <Option value='abc'>Semi</Option>\n                            <Option value='hotsoon'>Hotsoon</Option>\n                            <Option value='pipixia' disabled>Pipixia</Option>\n                            <Option value='xigua'>Xigua</Option>\n                        </Select>\n                        <br/><br/>\n                        <Cascader style={{ width: '100%' }} treeData={treeData} placeholder=\"Cascader\"/>\n                    </Col>\n                </Row>\n                <Row>\n                    <h3 style={titleStyle}>Navigation</h3>\n                </Row>\n                <Row style={rowStyle}>\n                    <Breadcrumb>\n                        <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n                        <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n                        <Breadcrumb.Item>Default</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Nav\n                        mode={'horizontal'}\n                        items={[\n                            { itemKey: 'user', text: 'Option1', icon: <IconEdit /> },\n                            { itemKey: 'union', text: 'Option2', icon: <IconCamera /> },\n                            {\n                                itemKey: 'approve-management',\n                                text: 'Group3',\n                                icon: <IconList />,\n                                items: [\n                                    '3-1',\n                                    '3-2'\n                                ]\n                            },\n                        ]}\n                    />\n                    <br/><br/>\n                    <Pagination total={80} showSizeChanger></Pagination>\n                    <br/>\n                    <Steps current={1}>\n                        <Steps.Step title=\"Finished\" description=\"This is a description.\" />\n                        <Steps.Step title=\"In Progress\" description=\"This is a description.\" />\n                        <Steps.Step title=\"Waiting\" description=\"This is a description.\" />\n                    </Steps>\n                    <br/>\n                    <Steps current={1} status=\"error\">\n                        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n                        <Steps.Step title=\"In Process\" description=\"This is a description\" />\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Display Property in Cascader Component\nDESCRIPTION: Demonstrates how to use displayProp to customize which property is shown in the Cascader selection. Shows both single and multiple selection examples using art movement data structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }\n    ];\n    return (\n        <>\n            <Typography.Title heading={6}>single selection</Typography.Title>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Please Select\"\n                displayProp='value'\n                defaultValue={['impressionism', 'visualArts', 'Monet']}\n            />\n            <br />\n            <br />\n            <Typography.Title heading={6}>multiple selection</Typography.Title>\n            <Cascader\n                multiple\n                style={{ width: 300 }}\n                treeData={treeData}                \n                defaultValue={['impressionism', 'visualArts', 'Monet']}\n                placeholder=\"Please Select\"\n                displayProp='value'\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Duration Notifications in React\nDESCRIPTION: Shows how to set a custom duration for notifications using the Semi-Design Notification component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n    };\n\n    return <Button onClick={() => Notification.info(opts)}>Close After 10s</Button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Events in Calendar\nDESCRIPTION: Demonstrates how to render events in the Calendar component with various modes and customizations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar, DatePicker, RadioGroup, Radio } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            mode: 'week',\n            displayValue: new Date(2019, 6, 23, 8, 32, 0),\n        };\n    }\n\n    onSelect(e) {\n        this.setState({\n            mode: e.target.value,\n        });\n    }\n\n    onChangeDate(e) {\n        this.setState({\n            displayValue: e,\n        });\n    }\n\n    render() {\n        const { mode, displayValue } = this.state;\n        const isMonthView = mode === 'month';\n        const dailyEventStyle = {\n            borderRadius: '3px',\n            boxSizing: 'border-box',\n            border: 'var(--semi-color-primary) 1px solid',\n            padding: '10px',\n            backgroundColor: 'var(--semi-color-primary-light-default)',\n            height: '100%',\n            overflow: 'hidden',\n        };\n        const allDayStyle = {\n            borderRadius: '3px',\n            boxSizing: 'border-box',\n            border: 'var(--semi-color-bg-1) 1px solid',\n            padding: '2px 4px',\n            backgroundColor: 'var(--semi-color-primary-light-active)',\n            height: '100%',\n            overflow: 'hidden',\n        };\n        const dailyStyle = isMonthView ? allDayStyle : dailyEventStyle;\n        const events = [\n            {\n                key: '0',\n                start: new Date(2019, 5, 25, 14, 45, 0),\n                end: new Date(2019, 6, 26, 6, 18, 0),\n                children: <div style={dailyStyle}>June 25th 14:45 ~ July 26th 6:18</div>,\n            },\n            {\n                key: '1',\n                start: new Date(2019, 6, 18, 10, 0, 0),\n                end: new Date(2019, 6, 30, 8, 0, 0),\n                children: <div style={allDayStyle}>July 18th 10:00 ~ July 30th 8:00</div>,\n            },\n            {\n                key: '2',\n                start: new Date(2019, 6, 19, 20, 0, 0),\n                end: new Date(2019, 6, 23, 14, 0, 0),\n                children: <div style={allDayStyle}>July 19th 20:00 ~ July 23rd 14:00</div>,\n            },\n            {\n                key: '3',\n                start: new Date(2019, 6, 21, 6, 0, 0),\n                end: new Date(2019, 6, 25, 6, 0, 0),\n                children: <div style={allDayStyle}>July 21st 6:00 ~ July 25th 6:00</div>,\n            },\n            {\n                key: '4',\n                allDay: true,\n                start: new Date(2019, 6, 22, 8, 0, 0),\n                children: <div style={allDayStyle}>July 22 full day</div>,\n            },\n            {\n                key: '5',\n                start: new Date(2019, 6, 22, 9, 0, 0),\n                end: new Date(2019, 6, 23, 23, 0, 0),\n                children: <div style={allDayStyle}>July 22nd 9:00 ~ July 23rd 23:00</div>,\n            },\n            {\n                key: '6',\n                start: new Date(2019, 6, 23, 8, 32, 0),\n                end: new Date(2019, 6, 23, 8,42, 0),\n                children: <div style={dailyStyle}>July 23 8:32</div>,\n            },\n            {\n                key: '7',\n                start: new Date(2019, 6, 23, 14, 30, 0),\n                end: new Date(2019, 6, 23, 20, 0, 0),\n                children: <div style={dailyStyle}>July 23 14:30-20:00</div>,\n            },\n            {\n                key: '8',\n                start: new Date(2019, 6, 25, 8, 0, 0),\n                end: new Date(2019, 6, 27, 6, 0, 0),\n                children: <div style={allDayStyle}>July 25th 8:00 ~ July 27th 6:00</div>,\n            },\n            {\n                key: '9',\n                start: new Date(2019, 6, 26, 10, 0, 0),\n                end: new Date(2019, 6, 27, 16, 0, 0),\n                children: <div style={allDayStyle}>July 26th 10:00 ~ July 27th 16:00</div>,\n            },\n        ];\n        return (\n            <>\n                <RadioGroup onChange={e => this.onSelect(e)} value={mode} type=\"button\">\n                    <Radio value={'day'}>Day view</Radio>\n                    <Radio value={'week'}>Week view</Radio>\n                    <Radio value={'month'}>Month view</Radio>\n                    <Radio value={'range'}>Multi-day view</Radio>\n                </RadioGroup>\n                <br />\n                <br />\n                <DatePicker value={displayValue} onChange={e => this.onChangeDate(e)} />\n                <br />\n                <br />\n                <Calendar\n                    height={400}\n                    mode={mode}\n                    displayValue={displayValue}\n                    events={events}\n                    minEventHeight={40}\n                    range={mode === 'range' ? [new Date(2019, 6, 23), new Date(2019, 6, 26)] : []}\n                ></Calendar>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Node Display in Tree Component for React\nDESCRIPTION: This snippet shows how to configure the blockNode property of the Tree component to control whether nodes are displayed as full-width blocks or just highlighted labels.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n    return (\n        <div>\n            <Tree\n                treeData={treeData}\n                defaultValue='Shanghai'\n                blockNode={false}\n            />\n            <br />\n            <Tree\n                treeData={treeData}\n                defaultValue='Shanghai'\n                multiple\n                blockNode={false}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Separator for Breadcrumb in React\nDESCRIPTION: Shows how to customize the separator between Breadcrumb items using text or icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Breadcrumb separator={'>'}\n            <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Default</Breadcrumb.Item>\n        </Breadcrumb>\n        <br/>\n        <Breadcrumb separator={<IconArrowRight size={'small'} />}>\n            <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Default</Breadcrumb.Item>\n        </Breadcrumb>\n        <Tag>{`v>=1.16.0`}</Tag>\n        <br/>\n        <Breadcrumb size={'small'} >\n            <Breadcrumb.Item separator=\":\">Semi-ui</Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Default</Breadcrumb.Item>\n        </Breadcrumb>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Slider with Marks and Steps\nDESCRIPTION: Implementation showing different mark configurations and step sizes with range functionality\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div>step=10</div>\n        <Slider step={10} marks={{ 0: '0', 10: '10', 20: '20', 30: '30', 40: '40', 50: '50', 100: '100' }} defaultValue={[10, 100]} range={true}></Slider>\n        <br/>\n        <br/>\n        <div>step=0.1</div>\n        <Slider step={0.1} marks={{ 0.1: '0.1', 0.2: '0.2', 0.3: '0.3', 0.4: '0.4', 0.5: '0.5' }} min={0} max={1} defaultValue={[0.1, 0.5]} range={true}></Slider>\n        <br/>\n        <br/>\n        <div>Marks</div>\n        <Slider marks={{ 20: '20°C', 40: '40°C' }} defaultValue={[0, 100]} range={true} tipFormatter={v => (`${v}°C`)} getAriaValueText={(value) => `${value}°C`}></Slider>\n        <br/>\n        <br/>\n        <div>Included</div>\n        <Slider marks={{ 20: '20°C', 40: '40°C' }} included={false} defaultValue={[0, 100]} range={true} tipFormatter={v => (`${v}°C`)} getAriaValueText={(value) => `${value}°C`}></Slider>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Slider with Input Integration\nDESCRIPTION: Implementation of a slider synchronized with an input number field for precise value selection\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider, InputNumber } from '@douyinfe/semi-ui';\n\nclass InputSlider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: 10 };\n        this.getSliderValue = this.getSliderValue.bind(this);\n    }\n\n    getSliderValue(value) {\n        if (isNaN(Number(value))){\n            return;\n        }\n        this.setState({ value: value / 1 });\n    }\n\n    render() {\n        const { value } = this.state;\n        return (\n            <div>\n                <div style={{ width: 320, marginRight: 15 }}>\n                    <Slider step={1} value={value} onChange={(value) => (this.getSliderValue(value))} ></Slider>\n                </div>\n                <InputNumber onChange={(v) => this.getSliderValue(v)} style={{ width: 100 }} value={value} min={0} max={100} />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Date Range Disabling in DatePicker\nDESCRIPTION: Shows how to dynamically disable date ranges based on the selected start date using the rangeStart option.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport * as dateFns from 'date-fns';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <h4>Prohibit selection of previous dates</h4>\n                <DatePicker\n                    type={'dateRange'}\n                    disabledDate={(date, options) => {\n                        const { rangeStart } = options;\n                        const startDate = dateFns.parseISO(rangeStart);\n                        return dateFns.isBefore(date, startDate);\n                    }}\n                    style={{ width: 260 }}\n                />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting UTC to Local Time in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to change a UTC date-time value into the corresponding local time for a specified time zone using the date-fns-tz library. It fetches the initial UTC date and time zone, performs the conversion, and prepares the output for rendering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/datePicker/contributing.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"import { utcToZonedTime } from 'date-fns-tz'\\n\\nconst { isoDate, timeZone } = fetchInitialValues() // 2014-06-25T10:00:00.000Z, America/New_York\\n\\nconst date = utcToZonedTime(isoDate, timeZone) // In June 10am UTC is 6am in New York (-04:00)\\n\\nrenderDatePicker(date) // 2014-06-25 06:00:00 (in the system time zone)\\nrenderTimeZoneSelect(timeZone) // America/New_York\"\n```\n\n----------------------------------------\n\nTITLE: Showcasing All Available Illustrations for Empty Component\nDESCRIPTION: Demonstrates all available illustrations from @douyinfe/semi-illustrations package that can be used with the Empty component, including their dark mode counterparts.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty } from '@douyinfe/semi-ui';\nimport { IllustrationConstruction, IllustrationSuccess, IllustrationFailure, IllustrationNoAccess, IllustrationNoContent, IllustrationNotFound, IllustrationNoResult } from '@douyinfe/semi-illustrations';\n\n/* 以下为 1.13.0 版本后提供 */\nimport { IllustrationIdle, IllustrationIdleDark, IllustrationConstructionDark, IllustrationSuccessDark, IllustrationFailureDark, IllustrationNoAccessDark, IllustrationNoContentDark, IllustrationNotFoundDark, IllustrationNoResultDark } from '@douyinfe/semi-illustrations';\n\n() => {\n    const emptyStyle = {\n        padding: 30,\n    };\n    return (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <Empty\n                image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n                description={'创建成功'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationFailure style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationFailureDark style={{ width: 150, height: 150 }} />}\n                description={'加载失败'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNoAccess style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNoAccessDark style={{ width: 150, height: 150 }} />}\n                description={'没有权限'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNoContent style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNoContentDark style={{ width: 150, height: 150 }} />}\n                description={'暂无内容，请添加'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNotFound style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNotFoundDark style={{ width: 150, height: 150 }} />}\n                description={'页面404'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNoResult style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNoResultDark style={{ width: 150, height: 150 }} />}\n                description={'搜索无结果'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationConstruction style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationConstructionDark style={{ width: 150, height: 150 }} />}\n                description={'建设中'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationIdle style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationIdleDark style={{ width: 150, height: 150 }} />}\n                description={'神游四方'}\n                style={emptyStyle}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualized Select List\nDESCRIPTION: Shows how to implement virtualization for large option lists to optimize performance. Includes configuration for height, width, and item size settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\nclass VirtualizeDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        let newOptions = Array.from({ length: 3000 }, (v, i) => ({ label: `option-${i}`, value: i }));\n        this.state = {\n            optionList: newOptions,\n        };\n    }\n\n    render() {\n        let { groups, optionList } = this.state;\n        let virtualize = {\n            height: 270,\n            width: '100%',\n            itemSize: 36, // px\n        };\n        return (\n            <>\n                <Select\n                    placeholder=\"3000 options\"\n                    style={{ width: 260 }}\n                    filter\n                    onSearch={this.handleSearch}\n                    virtualize={virtualize}\n                    optionList={optionList}\n                ></Select>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 将预览组件渲染到指定容器 - React\nDESCRIPTION: 通过 getPopupContainer 属性将预览组件渲染到指定的 DOM 容器中。需要容器设置 position: relative，这会改变浮层的 DOM 树位置但不影响视图渲染效果。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n    ]), []);\n\n    return ( \n        <>\n            <div \n                id=\"container\" \n                style={{ \n                    height: 400, \n                    position: \"relative\" \n                }} \n            >\n                <ImagePreview\n                    getPopupContainer={() => {\n                        const node = document.getElementById(\"container\");\n                        return node;\n                    }}\n                    style={{\n                        height: '100%',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n        \n                    }}\n                >\n                    {srcList.map((src, index) => {\n                        return (\n                            <Image \n                                key={index} \n                                src={src} \n                                width={200} \n                                alt={`lamp${index + 1}`}\n                                style={{ marginRight: 5 }} \n                            />\n                        );\n                    })}\n                </ImagePreview>\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Circular Progress Bar Implementation\nDESCRIPTION: Shows how to create and customize circular progress bars with different sizes and styles\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Progress } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Progress percent={10} type=\"circle\" style={{ margin: 5 }} aria-label=\"disk usage\"/>\n        <Progress percent={25} type=\"circle\" style={{ margin: 5 }} aria-label=\"disk usage\"/>\n        <Progress percent={50} type=\"circle\" style={{ margin: 5 }} aria-label=\"disk usage\"/>\n        <Progress percent={80} type=\"circle\" style={{ margin: 5 }} aria-label=\"disk usage\"/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorPicker Component in React\nDESCRIPTION: 演示了如何使用受控模式的 ColorPicker。通过 useState 钩子管理颜色值，并通过 value 和 onChange 属性实现双向绑定。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '@douyinfe/semi-ui';\nimport React from 'react';\nfunction Demo() {\n    const [value, setValue] = useState(ColorPicker.colorStringToValue(\"#39c5bb\"));\n    return <div>\n        <ColorPicker\n            value={value}\n            onChange={(value)=>{\n                setValue(value);\n            }}\n            alpha={true}\n        />\n    </div>;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single File Upload Limit in React\nDESCRIPTION: Demonstrates how to limit file uploads to a single file with automatic replacement functionality using the Upload component. Uses the limit prop to restrict uploads.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://semi.design/api/upload';\n    let limit = 1;\n    let onChange = props => {\n        console.log(props.fileList);\n    };\n    return (\n        <Upload\n            action={action}\n            limit={limit}\n            onChange={onChange}\n        >\n            <Button icon={<IconUpload />} theme=\"light\">\n                Click to upload (up to {limit} items)\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Messages with Options in JavaScript\nDESCRIPTION: Shows how to use the Toast.info method with options and store the returned toastId for later reference. This pattern applies to all Toast methods (info, error, warning, success).\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst toastId = Toast.info({ /*...options*/ })\n```\n\n----------------------------------------\n\nTITLE: 多图预览实现 - React\nDESCRIPTION: 使用 ImagePreview 组件包裹多个 Image 组件，实现图片集合的预览功能。点击任意图片可在同一预览器中浏览所有图片。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/colorful.jpg\",\n    ]), []);\n\n    return ( \n        <ImagePreview>\n            {srcList.map((src, index) => {\n                return (\n                    <Image \n                        key={index} \n                        src={src} \n                        width={200} \n                        alt={`lamp${index + 1}`} \n                        style={{ marginRight: 5 }}\n                    />\n                );\n            })}\n        </ImagePreview>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Empty Component with Horizontal Layout\nDESCRIPTION: Shows how to use the horizontal layout option for the Empty component, which is useful for longer descriptions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty, Button } from '@douyinfe/semi-ui';\nimport { IllustrationSuccess, IllustrationSuccessDark } from '@douyinfe/semi-illustrations';\n\n() => (\n    <Empty\n        title={'创建成功'}\n        image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n        layout=\"horizontal\"\n        description=\"这是一段很长的描述文本，当文本过长的时候推荐使用这种布局形式。这是一段很长的描述文本，当文本过长的时候推荐使用这种布局形式。这是一段很长的描述文本，当文本过长的时候推荐使用这种布局形式。\"\n        style={{ width: 800, margin: '0 auto' }}\n    >\n        <Button type=\"primary\" theme=\"solid\" style={{ padding: '6px 24px' }}>\n            开始操作\n        </Button>\n    </Empty>\n);\n```\n\n----------------------------------------\n\nTITLE: Pagination with Page Size Changer in React\nDESCRIPTION: Demonstrates how to enable page size changing functionality using the 'showSizeChanger' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showSizeChanger style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={300} showSizeChanger></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Semi UI with npm or yarn\nDESCRIPTION: This snippet provides commands for installing the Semi UI library using npm or yarn. It is essential for integrating Semi UI components into your project.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# with npm\nnpm install @douyinfe/semi-ui\n\n# with yarn\nyarn add @douyinfe/semi-ui\n\n```\n\n----------------------------------------\n\nTITLE: Alignment Options for Space Component in React\nDESCRIPTION: Shows how to use the 'align' prop to set different alignment options for the Space component, including start, center, end, and baseline.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Space, Button, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const divStyle = {\n        width: 80,\n        height: 100,\n        lineHight: 100,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px solid var(--semi-color-border)',\n        borderRadius: 3\n    };\n    return (\n        <Space vertical>\n            <Space align='start'>\n                <div style={divStyle}> text </div>\n                <Button theme='solid' type='primary'>button</Button>\n                <Tag color='green' size='large'> tag </Tag>\n            </Space>\n            <Space align='center'>\n                <div style={divStyle}> text </div>\n                <Button theme='solid' type='primary'>button</Button>\n                <Tag color='green' size='large'> tag </Tag>\n            </Space>\n            <Space align='end'>\n                <div style={divStyle}> text </div>\n                <Button theme='solid' type='primary'>button</Button>\n                <Tag color='green' size='large'> tag </Tag>\n            </Space>\n            <Space align='baseline'>\n                <div style={divStyle}> text </div>\n                <Button theme='solid' type='primary'>button</Button>\n                <Tag color='green' size='large'> tag </Tag>\n            </Space>\n        </Space>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Carousel Component with React and Semi Design\nDESCRIPTION: This example demonstrates how to create a controlled carousel with custom navigation. The component displays a series of images with text overlays, featuring control over the active slide index. It uses the Semi Design UI components including Carousel, Space, and Typography.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, Space, Typography } from '@douyinfe/semi-ui';\n\nclass CarouselDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.imgList = [\n            'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n            'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n            'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n        ];\n        this.textList = [\n            ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n            ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n            ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n        ];\n        this.state = {\n            activeIndex: 0,\n        };\n    }\n\n    renderLogo() {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }} />\n        );\n    };\n\n    onChange(activeIndex){\n        this.setState({ activeIndex });\n    }\n\n    render() {\n        const style = {\n            width: '100%',\n            height: '400px',\n        };\n\n        const titleStyle = { \n            position: 'absolute', \n            top: '100px', \n            left: '100px'\n        };\n\n        const colorStyle = {\n            color: '#1C1F23'\n        };\n\n        const { activeIndex } = this.state;\n        \n        return (\n            <div>\n                <Carousel style={style} activeIndex={activeIndex} autoPlay={false} theme='dark' onChange={this.onChange.bind(this)}>\n                    {\n                        this.imgList.map((src, index) => {\n                            return (\n                                <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                    <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                        {this.renderLogo()}\n                                        <Typography.Title heading={2} style={colorStyle}>{this.textList[index][0]}</Typography.Title>\n                                        <Space vertical align='start'>\n                                            <Typography.Paragraph style={colorStyle}>{this.textList[index][1]}</Typography.Paragraph>\n                                            <Typography.Paragraph style={colorStyle}>{this.textList[index][2]}</Typography.Paragraph>\n                                        </Space>\n                                    </Space>\n                                </div>\n                            );\n                        })\n                    }\n                </Carousel>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled PinCode Component with Random Value Setting\nDESCRIPTION: Shows how to use PinCode as a controlled component by using the value and onChange props. Includes a button to set a random 6-digit value to demonstrate value updates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [value, setValue] = useState('69af41');\n    return (\n        <>\n            <Button onClick={() => setValue(String(parseInt(Math.random() * 100000000)).slice(0, 6))}>\n                Set Random Value\n            </Button>\n            <br />\n            <br />\n            <PinCode\n                format={'mixed'}\n                onComplete={value => console.log('pincode: ', value)}\n                value={value}\n                onChange={v => {\n                    console.log(v);\n                    setValue(v);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SortableList Component with DndKit in React\nDESCRIPTION: A sortable list component that uses DndKit to handle drag and drop functionality. It renders items in a vertical list and manages drag states with a drag overlay for smooth visual feedback during drag operations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: JSX\nCODE:\n```\n// Set the scrolling when dragging to start from the ancestor element closest to the dragged element\nautoScroll={{ order: TraversalOrder.ReversedTreeOrder }}\n>\n    <SortableContext items={items} strategy={verticalListSortingStrategy}>\n        <div style={{ overflow: 'auto', display: 'flex', flexDirection: 'column', rowGap: '8px' }}>\n            {items.map((value, index) => (\n                <SortableItem\n                    key={value}\n                    id={value}\n                    index={index}\n                    renderItem={renderItem}\n                />\n            ))}\n        </div>\n        {ReactDOM.createPortal(\n            <DragOverlay>\n                {activeId ? (\n                    renderItem({\n                        id: activeId,\n                        sortableHandle: (WrapperComponent) => WrapperComponent\n                    })\n                ) : null}\n            </DragOverlay>,\n            document.body\n        )}\n    </SortableContext>\n</DndContext>\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Content in React\nDESCRIPTION: Demonstrates how to update the content of an existing notification using its ID. This feature is available in version 2.45.0 and later of the Semi-Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Button\n        onClick={() => {\n            const id = Notification.open({\n                title: 'Hi, Bytedance',\n                content: 'ies dance dance dance',\n                duration: 3,\n            })\n            setTimeout(() => {\n                Notification.open({\n                    title: 'Hi, Bytedance',\n                    content: 'updated',\n                    duration: 10,\n                    id\n                })\n            }, 1000)\n        }\n        }\n    >\n        Display Notification\n    </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Input with Addons\nDESCRIPTION: Demonstrates how to add content before and after the Input component using addons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n() => (\n    <Input addonBefore=\"http://\" addonAfter=\".com\" />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Right-sidebar Layout in React\nDESCRIPTION: Demonstrates how to create a layout with a right sidebar using Semi UI Layout components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Layout>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n                <Sider style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}>Sider</Sider>\n            </Layout>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 日期时间范围选择 DatePicker - React\nDESCRIPTION: 使用 type=\"dateTimeRange\" 实现日期时间范围的选择，并展示如何设置默认的选择器值。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <DatePicker type=\"dateTimeRange\" style={{ width: 400, marginBottom: 8 }} onChange={console.log} />\n        <DatePicker\n            type=\"dateTimeRange\"\n            style={{ width: 400 }}\n            defaultPickerValue={[new Date('2022-08-08 00:00'), new Date('2022-08-09 12:00')]}\n            onChange={console.log}\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Usage with Closable Options\nDESCRIPTION: Demonstrates the basic usage of Tags, including default tags, closable tags, and preventing default close behavior by handling the onClose event.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Space>\n            <Tag> default tag </Tag>\n            <Tag closable> Closable Tag </Tag>\n            <Tag closable onClose={(value, e) => e.preventDefault()}>\n                Closable Tag, Prevent Default\n            </Tag>\n        </Space>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable Multiple Selection with Cascader Component in React\nDESCRIPTION: This example demonstrates a Cascader component with both multiple selection and search functionality. When multiple selection and search are enabled, users can delete selected items using the BackSpace key.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: ['impressionism', 'visualArts', 'Monet']\n        };\n    }\n    onChange(value) {\n        this.setState({ value });\n    }\n    render() {\n        const treeData = [\n            {\n                label: 'Impressionism',\n                value: 'impressionism',\n                children: [\n                    {\n                        label: 'Visual Arts',\n                        value: 'visualArts',\n                        children: [\n                            {\n                                label: 'Claude Monet',\n                                value: 'Monet',\n                            },\n                            {\n                                label: 'Pierre-Auguste Renoir',\n                                value: 'Renoir',\n                            },\n                            {\n                                label: 'Édouard Manet',\n                                value: 'Manet',\n                            },\n                        ],\n                    },\n                    {\n                        label: 'Music',\n                        value: 'music',\n                        children: [\n                            {\n                                label: 'Claude Debussy',\n                                value: 'Debussy',\n                            },\n                            {\n                                label: 'Maurice Ravel',\n                                value: 'Ravel',\n                            }\n                        ]\n                    }\n                ],\n            }];\n        return (\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Please select\"\n                value={this.state.value}\n                multiple\n                filterTreeNode\n                onChange={e => this.onChange(e)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transfer Component Implementation\nDESCRIPTION: 展示了Transfer穿梭框的基本使用方法。需要为每个数据项提供value、label和key属性，并通过dataSource属性传入数据源。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n\n() => {\n    const data = Array.from({ length: 100 }, (v, i) => {\n        return {\n            label: `选项名称 ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            dataSource={data}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Currency Display Modes in InputNumber Component\nDESCRIPTION: This example demonstrates the three currency display modes available in the InputNumber component: symbol, code, and name. It also shows how to hide the currency display using the showCurrencySymbol property set to false.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';    \n\n() => {\n    const defaultValue = 123456.78;\n    return (\n        <div>\n            <div>🇨🇳 CNY ➕ code</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"code\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ symbol</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"symbol\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ name</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"name\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>Hide display of currency symbols/codes/names</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"name\" defaultValue={defaultValue} showCurrencySymbol={false}/>\n            <br />\n            <br />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow DOM Component with Semi UI Style Insertion\nDESCRIPTION: Example of a custom web component that uses Semi UI components. It demonstrates how to use the importSemiComponentStyle function to insert Semi component styles into the shadow DOM.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/web-components/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/components/index.js\nclass TestShadowDom extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n  }\n  connectedCallback() {\n    const root = this.shadowRoot;\n       \n    /* You need to use @ts-ignore in ts projects to ignore importSemiComponentStyle errors.\n    The Semi plugin will parse the following statement during the compilation phase and \n    insert the specific implementation of the importSemiComponentStyle function into the file.\n    */\n    importSemiComponentStyle(\n          'SEMI_INSERT_STYLE_BEGIN[\"Button\", \"Select\"]SEMI_INSERT_STYLE_END',\n          this.shadowRoot，\n          () => {}\n    );\n    const container = document.createElement('div');\n    this.shadowRoot?.appendChild(container);\n\n    ReactDOM.render(<SemiComponent />, container);\n  }\n}\n\ncustomElements.define(\"test-shadow-dom\", TestShadowDom);\n```\n\n----------------------------------------\n\nTITLE: Controlling Tag Visibility with State\nDESCRIPTION: Demonstrates how to control tag visibility using the visible property and React state, toggled by radio buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tag, Button, RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const toggleVisible = () => {\n        setVisible(!visible);\n    };\n    return (\n        <div>\n            <RadioGroup type='button' defaultValue={0} onChange={e => toggleVisible(e.target.value)}>\n                <Radio value={1}>Show</Radio>\n                <Radio value={0}>Hide</Radio>\n            </RadioGroup>\n            <div style={{ marginTop: 10 }}>\n                <Tag visible={visible} size='large' color='light-blue'>Invisible tag </Tag>\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Slider Component Props\nDESCRIPTION: Type definitions for the Slider component properties including ARIA attributes, styling options, and behavioral configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SliderProps {\n    'aria-label'?: string;\n    'aria-labelledby'?: string;\n    'aria-valuetext'?: string;\n    defaultValue?: number | number[];\n    disabled?: boolean;\n    handleDot?: { color: string, size: string} | { color: string, size: string}[];\n    included?: boolean;\n    marks?: Record<number, string>;\n    max?: number;\n    min?: number;\n    railStyle?: CSSProperties;\n    range?: boolean;\n    showArrow?: boolean;\n    showBoundary?: boolean;\n    showMarkLabel?: boolean;\n    step?: number;\n    tipFormatter?: (value: string | number | boolean | (string | number | boolean)[]) => any;\n    tooltipOnMark?: boolean;\n    tooltipVisible?: boolean;\n    value?: number | number[];\n    vertical?: boolean;\n    verticalReverse?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Button Groups with Dropdown\nDESCRIPTION: Demonstrates the implementation of split button groups with dropdown menus using SplitButtonGroup, Button, and Dropdown components from Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SplitButtonGroup, Dropdown, Button } from '@douyinfe/semi-ui';\nimport { IconTreeTriangleDown } from '@douyinfe/semi-icons';\n\nfunction SplitButtonDemo(){\n    const menu = [\n        { node: 'item', name: '编辑项目', onClick: () => console.log('编辑项目点击') },\n        { node: 'item', name: '重置项目' },\n        { node: 'divider' },\n        { node: 'item', name: '复制项目' },\n        { node: 'item', name: '从项目创建模版' },\n        { node: 'divider' },\n        { node: 'item', name: '删除项目', type: 'danger' },\n    ];\n\n    const [btnVisible, setBtnVisible] = useState({\n        1: false,\n        2: false,\n        3: false\n    });\n\n    const handleVisibleChange = (key, visible)=>{\n        newBtnVisible = { ...btnVisible };\n        newBtnVisible[key] = visible;\n        setBtnVisible(newBtnVisible);\n    };\n\n    return (\n        <div>\n            <SplitButtonGroup style={{ marginRight: 10 }} aria-label=\"项目操作按钮组\">\n                <Button theme=\"solid\" type=\"primary\">分裂按钮</Button>\n                <Dropdown onVisibleChange={(v)=>handleVisibleChange(1, v)} menu={menu} trigger=\"click\" position=\"bottomRight\">\n                    <Button style={btnVisible[1] ? { background: 'var(--semi-color-primary-hover)', padding: '8px 4px' } : { padding: '8px 4px' }} theme=\"solid\" type=\"primary\" icon={<IconTreeTriangleDown />}></Button>\n                </Dropdown>\n            </SplitButtonGroup>\n            <SplitButtonGroup style={{ marginRight: 10 }} aria-label=\"项目操作按钮组\">\n                <Button theme=\"light\" type=\"primary\">分裂按钮</Button>\n                <Dropdown onVisibleChange={(v)=>handleVisibleChange(2, v)} menu={menu} trigger=\"click\" position=\"bottomRight\">\n                    <Button style={btnVisible[2]?{ background: 'var(--semi-color-fill-1)', padding: '8px 4px' }:{ padding: '8px 4px' }} theme=\"light\" type=\"primary\" icon={<IconTreeTriangleDown />}></Button>\n                </Dropdown>\n            </SplitButtonGroup>\n            <SplitButtonGroup aria-label=\"项目操作按钮组\">\n                <Button style={btnVisible[3]?{ background: 'var(--semi-color-fill-0)' }:{}} theme=\"borderless\" type=\"primary\">分裂按钮</Button>\n                <Dropdown onVisibleChange={(v)=>handleVisibleChange(3, v)} menu={menu} trigger=\"click\" position=\"bottomRight\">\n                    <Button style={btnVisible[3]?{ background: 'var(--semi-color-fill-1)', padding: '8px 4px' }:{ padding: '8px 4px' }} theme=\"borderless\" type=\"primary\" icon={<IconTreeTriangleDown />}></Button>\n                </Dropdown>\n            </SplitButtonGroup>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Timeline with Different Types\nDESCRIPTION: Shows how to use different types (ongoing, success, error) with corresponding color indicators.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\n\n() => (\n    <Timeline>\n        <Timeline.Item time='2019-07-14 10:35' type='ongoing'>Processing</Timeline.Item>\n        <Timeline.Item time='2019-06-13 16:17' type='success'>Succeed</Timeline.Item>\n        <Timeline.Item time='2019-05-14 18:34' type='error'>Failed</Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover with Arrow Display in React\nDESCRIPTION: Demonstrates how to display Popovers with small triangular arrows in different positions. Uses the showArrow prop to enable the arrow display and supports 12 different positioning options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div style={{ paddingLeft: 40 }} className=\"tag-margin-right\">\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, float: 'left' }}>\n                {lefts.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, marginLeft: 180 }}>\n                {rights.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\n                {bottoms.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of Selected Items in Semi Design Select\nDESCRIPTION: This snippet showcases how to customize the rendering of selected items in both single and multiple selection modes using the 'renderSelectedItem' prop. It includes examples with avatars and custom tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select, Avatar, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const list = [\n        {\n            name: '夏可漫',\n            email: 'xiakeman@example.com',\n            avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n        {\n            name: '申悦',\n            email: 'shenyue@example.com',\n            avatar:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/bag.jpeg',\n        },\n        {\n            name: '曲晨一',\n            email: 'quchenyi@example.com',\n            avatar:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Viamaker.png',\n        },\n        {\n            name: '文嘉茂',\n            email: 'wenjiamao@example.com',\n            avatar:\n                'https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/6fbafc2d-e3e6-4cff-a1e2-17709c680624.png',\n        },\n    ];\n\n    const renderSelectedItem = optionNode => (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Avatar src={optionNode.avatar} size=\"small\">\n                {optionNode.abbr}\n            </Avatar>\n            <span style={{ marginLeft: 8 }}>{optionNode.email}</span>\n        </div>\n    );\n\n    // avatarSrc & avatarShape are supported after 1.6.0-beta\n    const renderMultipleWithCustomTag = (optionNode, { onClose }) => {\n        const content = (\n            <Tag avatarSrc={optionNode.avatar} avatarShape=\"circle\" closable={true} onClose={onClose} size=\"large\">\n                {optionNode.name}\n            </Tag>\n        );\n        return {\n            isRenderInTag: false,\n            content,\n        };\n    };\n\n    const renderMultipleWithCustomTag2 = (optionNode, { onClose }) => {\n        const content = (\n            <Tag avatarSrc={optionNode.avatar} avatarShape=\"square\" closable={true} onClose={onClose} size=\"large\">\n                {optionNode.name}\n            </Tag>\n        );\n        return {\n            isRenderInTag: false,\n            content,\n        };\n    };\n\n    const renderCustomOption = (item, index) => {\n        const optionStyle = {\n            display: 'flex',\n            paddingLeft: 24,\n            paddingTop: 10,\n            paddingBottom: 10,\n        };\n        return (\n            <Select.Option value={item.name} style={optionStyle} showTick={true} {...item} key={item.email}>\n                <Avatar size=\"small\" src={item.avatar} />\n                <div style={{ marginLeft: 8 }}>\n                    <div style={{ fontSize: 14 }}>{item.name}</div>\n                    <div\n                        style={{ color: 'var(--color-text-2)', fontSize: 12, lineHeight: '16px', fontWeight: 'normal' }}\n                    >\n                        {item.email}\n                    </div>\n                </div>\n            </Select.Option>\n        );\n    };\n\n    return (\n        <>\n            <Select\n                placeholder=\"请选择\"\n                style={{ width: 280, height: 40 }}\n                onChange={v => console.log(v)}\n                defaultValue={'申悦'}\n                renderSelectedItem={renderSelectedItem}\n            >\n                {list.map((item, index) => renderCustomOption(item, index))}\n            </Select>\n            <Select\n                placeholder=\"请选择\"\n                maxTagCount={2}\n                style={{ width: 280, marginTop: 20 }}\n                onChange={v => console.log(v)}\n                defaultValue={['申悦', '曲晨一']}\n                multiple\n                renderSelectedItem={renderMultipleWithCustomTag}\n            >\n                {list.map((item, index) => renderCustomOption(item, index))}\n            </Select>\n            <Select\n                placeholder=\"请选择\"\n                maxTagCount={2}\n                style={{ width: 280, marginTop: 20 }}\n                onChange={v => console.log(v)}\n                defaultValue={['申悦', '曲晨一']}\n                multiple\n                renderSelectedItem={renderMultipleWithCustomTag2}\n            >\n                {list.map((item, index) => renderCustomOption(item, index))}\n            </Select>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Centered Arrow Popover in React\nDESCRIPTION: Shows how to implement Popovers with arrows that always point to the center of the target element using the arrowPointAtCenter prop along with showArrow.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div style={{ paddingLeft: 40 }} className=\"tag-margin-right\">\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, float: 'left' }}>\n                {lefts.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, marginLeft: 180 }}>\n                {rights.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\n                {bottoms.map((pos, index) => (\n                    <Popover\n                        showArrow\n                        arrowPointAtCenter\n                        content={\n                            <article>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient Color Progress Bar with Semi Design UI\nDESCRIPTION: This code demonstrates how to use the Progress component with auto-gradation color intervals. It shows circular and linear progress bars with color gradients that automatically fill in the color ranges between defined points.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { Space, Progress, Button } from '@douyinfe/semi-ui';\nimport { IconChevronLeft, IconChevronRight } from '@douyinfe/semi-icons';\n\n() => {\n    const [percent, setPercent] = useState(65);\n    const [percentInterval, setPercentInterval] = useState(0);\n    useEffect(() => {\n        setTimeout(\n            () => {\n                setPercentInterval(percentInterval > 100 ? 0 : percentInterval + 3);\n            },\n            percentInterval === 0 || percentInterval > 100 ? 1200 : 290 - (percentInterval % 50) * 3\n        );\n    }, [percentInterval]);\n    const strokeArr = [\n        { percent: 0, color: 'rgb(249, 57, 32)' },\n        { percent: 50, color: '#46259E' },\n        { percent: 100, color: 'hsla(125, 50%, 46% / 1)' },\n    ];\n    const strokeArrReverse = [\n        { percent: 0, color: 'hsla(125, 50%, 46% / 1)' },\n        { percent: 50, color: '#46259E' },\n        { percent: 100, color: 'rgb(249, 57, 32)' },\n    ];\n    return (\n        <>\n            <Space spacing={20}>\n                <div>\n                    <Progress\n                        percent={percentInterval}\n                        stroke={strokeArr}\n                        strokeGradient={true}\n                        showInfo\n                        type=\"circle\"\n                        width={100}\n                        aria-label=\"file download speed\"\n                    />\n                </div>\n                <div>\n                    <Progress\n                        percent={percentInterval}\n                        stroke={strokeArrReverse}\n                        strokeGradient={true}\n                        showInfo\n                        type=\"circle\"\n                        width={100}\n                        aria-label=\"file download speed\"\n                    />\n                </div>\n            </Space>\n            <div style={{ width: '100%', margin: '20px 0 10px' }}>\n                <Progress\n                    percent={percent}\n                    stroke={strokeArr}\n                    strokeGradient={true}\n                    showInfo\n                    size=\"large\"\n                    aria-label=\"file download speed\"\n                />\n            </div>\n            <Button\n                icon={<IconChevronLeft />}\n                theme=\"light\"\n                onClick={() => {\n                    setPercent(percent - 5);\n                }}\n                disabled={percent === 0}\n            />\n            <Button\n                icon={<IconChevronRight />}\n                theme=\"light\"\n                onClick={() => {\n                    setPercent(percent + 5);\n                }}\n                disabled={percent === 100}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Cards with Action Elements\nDESCRIPTION: Shows how to add action elements to Cards using the actions prop with Rating component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Rating } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <Card\n            style={{ maxWidth: 360 }}\n            actions={[    \n                // eslint-disable-next-line react/jsx-key\n                <Rating size='small' defaultValue={4}/>\n            ]}\n            headerLine={ false }\n            cover={ \n                <img \n                    alt=\"example\" \n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo.jpeg\" \n                />\n            }\n        >\n            <Meta \n                title=\"Semi Doc\" \n                description=\"Easily manage your project icons and easily upload, update and share a series of project icons.\" \n            />\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Component with Action Buttons\nDESCRIPTION: Shows how to create an Empty component with custom content including action buttons and no-content illustration\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty, Button } from '@douyinfe/semi-ui';\nimport { IllustrationNoContent, IllustrationNoContentDark } from '@douyinfe/semi-illustrations';\n\n() => (\n    <Empty\n        image={<IllustrationNoContent style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationNoContentDark style={{ width: 150, height: 150 }} />}\n        title=\"Empty status header\"\n        description=\"Start creating your first dashboard!\"\n    >\n        <div>\n            <Button style={{ padding: '6px 24px', marginRight: 12 }} type=\"primary\">\n                Secondary button\n            </Button>\n            <Button style={{ padding: '6px 24px' }} theme=\"solid\" type=\"primary\">\n                Level 1 button\n            </Button>\n        </div>\n    </Empty>\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Cascader Data (React/JSX)\nDESCRIPTION: Illustrates how to dynamically update the data in a Cascader component. This example includes a button that generates random tree data and updates the Cascader's options accordingly.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Button } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            treeData: [],\n        };\n        this.add = this.add.bind(this);\n    }\n    add() {\n        let itemLength = Math.floor(Math.random() * 3) + 1;\n        let treeData = new Array(itemLength).fill(0).map((v, i) => {\n            let length = Math.floor(Math.random() * 3);\n            let children = new Array(length).fill(0).map((cv, ci) => {\n                let child = {\n                    key: `${i}-${ci}`,\n                    label: `Item-${i}-${ci}`,\n                    value: `${i}-${ci}`\n                };\n                return child;\n            });\n            let item = {\n                key: `${i}`,\n                label: `Item-${i}`,\n                value: `${i}`,\n                children\n            };\n            return item;\n        });\n        this.setState({ treeData });\n    }\n    render() {\n        return (\n            <>\n                <Cascader\n                    style={{ width: 400 }}\n                    treeData={this.state.treeData}\n                    placeholder=\"Please select\"\n                />\n                <br/>\n                <br/>\n                <Button onClick={this.add}>\n                    Update Data\n                </Button>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义SVG图标组件示例\nDESCRIPTION: 演示如何创建自定义SVG图标并将其传递给Icon组件使用。可以使用Icon组件的size、rotate和spin等属性来控制自定义图标。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Icon } from '@douyinfe/semi-ui';\n\n() => {\n    function CustomIcon() {\n        return <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"11\" fill=\"#FBCD2C\"/>\n            <mask id=\"mask0\" maskType=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"1\" y=\"1\" width=\"22\" height=\"22\">\n                <circle cx=\"12\" cy=\"12\" r=\"11\" fill=\"#A2845E\"/>\n            </mask>\n            <g mask=\"url(#mask0)\">\n                <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M11.9996 17.7963C13.7184 17.7963 15.2479 16.3561 16.0881 14.2048C16.6103 13.9909 17.1072 13.3424 17.334 12.4957C17.629 11.3948 17.5705 10.4118 16.7665 10.1059C16.6885 6.27115 15.1754 4.78714 11.9996 4.78714C8.82412 4.78714 7.31097 6.27097 7.2328 10.1052C6.42711 10.4103 6.36828 11.394 6.66349 12.4957C6.89064 13.3435 7.38849 13.9926 7.91145 14.2056C8.7518 16.3565 10.2811 17.7963 11.9996 17.7963ZM20.0126 23C20.34 23 20.5906 22.7037 20.4686 22.3999C19.6099 20.2625 16.1444 18.6636 12 18.6636C7.85555 18.6636 4.39008 20.2625 3.53142 22.3999C3.40937 22.7037 3.65999 23 3.9874 23H20.0126Z\" fill=\"white\"/>\n            </g>\n        </svg>;\n    }\n    return (\n        <div>\n            <Icon svg={<CustomIcon />} />\n            <Icon svg={<CustomIcon />} rotate={180} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Different Colors in React\nDESCRIPTION: Shows how to use the 'color' prop and custom styles to create avatars with various colors and backgrounds.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Avatar style={{ margin: 4 }} alt='Alice Swift'>AS</Avatar>\n        <Avatar color=\"red\" style={{ margin: 4 }} alt='Bob Matteo'>\n            BM\n        </Avatar>\n        <Avatar color=\"light-blue\" style={{ margin: 4 }} alt='Taylor Joy'>\n            TJ\n        </Avatar>\n        <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf', margin: 4 }} alt='Zank Lance'>ZL</Avatar>\n        <Avatar style={{ backgroundColor: '#87d068', margin: 4 }} alt='Youself Zhang'>YZ</Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Tabs with Card Style and State Management in React\nDESCRIPTION: Shows how to use Tabs with card style and implement state management for tab switching using a class component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs } from '@douyinfe/semi-ui';\n\nclass TabDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { key: '1' };\n        this.onTabClick = this.onTabClick.bind(this);\n    }\n\n    onTabClick(key, type) {\n        this.setState({ [type]: key });\n    }\n\n    render() {\n        // eslint-disable-next-line react/jsx-key\n        const contentList = [<div>文档</div>, <div>快速起步</div>, <div>帮助</div>];\n        const tabList = [\n            { tab: '文档', itemKey: '1' },\n            { tab: '快速起步', itemKey: '2' },\n            { tab: '帮助', itemKey: '3' },\n        ];\n        return (\n            <Tabs\n                type=\"card\"\n                tabList={tabList}\n                onChange={key => {\n                    this.onTabClick(key, 'key');\n                }}\n            >\n                {contentList[this.state.key - 1]}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义日期文案 - React\nDESCRIPTION: 通过 renderDateDisplay 属性自定义日期文案。此示例展示了如何使用 Avatar 组件来自定义日期显示。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar, Calendar } from '@douyinfe/semi-ui';\n\n() => {\n    const displayValue = new Date(2023, 4, 14);\n\n    const renderDateDisplay = date => {\n        const colors = [\"amber\", \"blue\", \"cyan\", \"green\", \"grey\", \"indigo\", \"lime\"];\n        return <div><Avatar color={colors[date.getDay()]} size=\"small\">{date.getDate()}</Avatar></div>;\n    };\n\n    return <Calendar height={400} mode=\"week\" displayValue={displayValue} renderDateDisplay={renderDateDisplay} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Semi Design CSS in Next.js\nDESCRIPTION: Example of importing Semi Design CSS in a Next.js project's global.css file. It shows how to import the default theme and a custom theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* styles/globals.css */\n@import '~@douyinfe/semi-ui/dist/css/semi.min.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles/globals.css */\n@import '~@semi-bot/semi-theme-doucreator/semi.min.css';\n```\n\n----------------------------------------\n\nTITLE: Custom Separator in Cascader\nDESCRIPTION: Demonstrates how to customize the separator used in the Cascader dropdown and trigger display. Available in version 2.2.0 and above.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }\n    ];\n    return (\n        <Cascader\n            style={{ width: 400 }}\n            treeData={treeData}\n            defaultValue={['impressionism', 'visualArts', 'Monet']}\n            filterTreeNode\n            separator=' > '\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Pagination with Size Changer - React/JSX\nDESCRIPTION: Demonstrates pagination with page size switching capability\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showSizeChanger></Pagination>\n        <br/>\n        <br/>\n        <Pagination total={300} showSizeChanger></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: JsonViewer with Custom Rendering Rules\nDESCRIPTION: Demonstrates how to implement custom rendering rules for JSON content using customRenderRule option.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { JsonViewer, Button, Rating, Popover, Tag, Image } from '@douyinfe/semi-ui';\nconst data = `{\n  \"name\": \"Semi\",\n  \"version\": \"2.7.4\",\n  \"rating\": 5,\n  \"tags\": [\"design\", \"react\", \"ui\"],\n  \"image\": \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\"\n}`;\nfunction CustomRenderJsonComponent() {\n    const jsonviewerRef = useRef();\n    const customRenderRule = [\n        {\n            match: 'Semi',\n            render: (content) => {\n                return <Popover showArrow content={'我是用户自定义的渲染'} trigger='hover'><span>{content}</span></Popover>;\n            }\n        },\n        {\n            match: (value)=> value == 5,\n            render: (content) => {\n                return <Rating defaultValue={content} size={10} disabled/>;\n            }\n        },\n        {\n            match: (value, path)=> path === 'root.tags[0]' || path === 'root.tags[1]' || path === 'root.tags[2]',\n            render: (content) => {\n                return <Tag size='small' shape='circle'>{content}</Tag>;\n            }\n        },\n        {\n            match: new RegExp('^http'),\n            render: (content) => {\n                return <Popover showArrow content={<Image width={100} height={100} src={content.replace(/^\"|\"$/g, '')} />} trigger='hover'><span>{content}</span></Popover>;\n            }\n        }\n    ];\n    return (\n        <div>\n            <div style={{ marginBottom: 16, marginTop: 16 }}>\n                <JsonViewer\n                    ref={jsonviewerRef}\n                    height={200}\n                    width={600}\n                    value={data}\n                    showSearch={false}\n                    options={{ formatOptions: { tabSize: 4, insertSpaces: true, eol: '\\n' }, customRenderRule, readOnly: true, autoWrap: true }}\n                />\n            </div>\n        </div>\n    );\n}\n\nrender(CustomRenderJsonComponent);\n```\n\n----------------------------------------\n\nTITLE: Custom Label Rendering with Selection Handling in Semi Tree Component\nDESCRIPTION: This code snippet demonstrates how to create a custom label renderer for a Tree component. It includes style customization based on selection state, handling expandable icons, and applying custom styling to the tree structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst { label, icon, key } = data;\nconst isLeaf = !(data.children && data.children.length);\nconst style = {\n    backgroundColor: selected.has(key)\n        ? 'rgba(var(--semi-blue-0), 1)'\n        : selectedThroughParent.has(key)\n            ? 'rgba(var(--semi-blue-0), .5)' : 'transparent'\n};\nreturn (\n    <li\n        className={className}\n        role=\"treeitem\"\n        onClick={onClick}\n        style={style}\n    >\n        {isLeaf ? <span style={{ width: 24 }}></span> : expandIcon}\n        {icon}\n        <span>{label}</span>\n    </li>\n);\n};\n\nconst treeStyle = {\n    width: 260,\n    height: 420,\n    border: '1px solid var(--semi-color-border)'\n};\n\nreturn (\n    <Tree\n        treeData={treeData}\n        renderFullLabel={renderLabel}\n        onSelect={handleSelect}\n        style={treeStyle}\n        defaultExpandAll\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Wall Upload with Custom Dimensions in React\nDESCRIPTION: Demonstrates how to create a photo wall upload component with customizable picture dimensions using picHeight and picWidth properties. Supports multiple image uploads with preview functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'image-1.jpg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        }\n    ];\n    return (\n        <>\n            <Upload\n                action={action}\n                listType=\"picture\"\n                accept=\"image/*\"\n                multiple\n                defaultFileList={defaultFileList}\n                picHeight={110}\n                picWidth={200}\n            >\n                <IconPlus size=\"extra-large\" style={{ margin: 4 }} />\n                Click to add picture\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Year and Month Range Selection with DatePicker\nDESCRIPTION: Demonstrates how to implement year and month range selection by setting type to 'monthRange', allowing users to select a range of months across different years.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker type=\"monthRange\" style={{ width: 200 }} />;\n```\n\n----------------------------------------\n\nTITLE: Default Collapse Mode Implementation\nDESCRIPTION: Demonstrates the default collapse mode of OverflowList with a slider to control width and custom overflow rendering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.length ? <Tag style={{ flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }}>+{items.length}</Tag> : null;\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <Tag color=\"blue\" key={item.key} style={{ marginRight: 8, flex: '0 0 auto' }}>\n                {item.icon}\n                {item.key}\n            </Tag>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList items={items} overflowRenderer={renderOverflow} visibleItemRenderer={renderItem} />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Anchor Configuration in React\nDESCRIPTION: Shows a comprehensive example of Anchor configuration including container, offset, and custom positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <span>请看右侧固定的 Anchor </span>\n            <Anchor\n                getContainer={getContainer}\n                offsetTop={100}\n                targetOffset={100} // v>=1.9\n                style={{ position: 'fixed', right: '20px', top: '100px', width: '200px', zIndex: 3 }} >\n                <Anchor.Link href=\"#基本示例\" title=\"我是固定的 Anchor\" />\n                <Anchor.Link href=\"#综合使用\" title=\"综合使用\" />\n                <Anchor.Link href=\"#尺寸\" title=\"尺寸\" />\n                <Anchor.Link href=\"#滑轨主题\" title=\"滑轨主题\" />\n                <Anchor.Link href=\"#动态展示\" title=\"动态展示\" />\n                <Anchor.Link href=\"#显示工具提示\" title=\"显示工具提示\" />\n                <Anchor.Link href=\"#工具提示位置\" title=\"工具提示位置\" />\n                <Anchor.Link href=\"#API参考\" title=\"API参考\">\n                    <Anchor.Link href=\"#Anchor\" title=\"Anchor\" />\n                    <Anchor.Link href=\"#Anchor.Link\" title=\"Anchor.Link\" />\n                </Anchor.Link>\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Timeline with DataSource\nDESCRIPTION: Demonstrates using dataSource prop to populate Timeline items with configuration objects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\nimport { IconAlertTriangle } from '@douyinfe/semi-icons';\n\n() => (\n    <Timeline \n        mode='alternate' \n        dataSource={[\n            {\n                time: '2019-07-14 10:35',\n                extra: 'Extra Information',\n                content: 'First Node Content',\n                type: 'ongoing',\n            },\n            {\n                time: '2019-06-13 16:17',\n                extra: 'Extra Information',\n                content: <span style={{ fontSize: '18px' }}>Second Node Content</span>,\n                color: 'pink',\n            },\n            {\n                time: '2019-05-14 18:34',\n                extra: 'Extra Information',\n                dot: <IconAlertTriangle />,\n                content: 'Third Node Content',\n                type: 'warning',\n            },\n            {\n                time: '2019-05-09 09:12',\n                extra: 'Extra Information',\n                content: 'Forth Node Content',\n                type: 'success',\n            }    \n        ]} \n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Text-Only Empty Component\nDESCRIPTION: Demonstrates an Empty component without illustrations, using only text and links\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty, Typography } from '@douyinfe/semi-ui';\n\n() => (\n    <Empty\n        title=\"No matching filter results found yet\"\n        description={\n            <span>\n                <Typography.Text>Try</Typography.Text>\n                <Typography.Text link>Reset filter</Typography.Text>\n            </span>\n        }\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AutoComplete onSelect Callback in TypeScript\nDESCRIPTION: Specifies the type definition for the onSelect callback function of the AutoComplete component. This function is called when a dropdown menu candidate is selected.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nFunction(item: string|number|Item)\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection with DatePicker\nDESCRIPTION: Demonstrates how to implement date range selection by setting type to 'dateRange', allowing users to select a start and end date.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker type=\"dateRange\" style={{ width: 260 }} onChange={console.log} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Tags in TagInput Component\nDESCRIPTION: Shows how to create a controlled TagInput component using value and onChange to manage tag state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\nclass TagInputDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: ['abc']\n        };\n    }\n    onChange(value) {\n        this.setState({ value });\n    }\n    render() {\n        return (\n            <TagInput\n                value={this.state.value}\n                onChange={value => {this.onChange(value);}}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Select Component with OptGroup for Grouped Options\nDESCRIPTION: Demonstrates grouping options with Select.OptGroup. This approach only supports declaring children through JSX and doesn't support passing through optionList.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <Select placeholder=\"\" style={{ width: 180 }} filter>\n        <Select.OptGroup label=\"Asia\">\n            <Select.Option value=\"a-1\">China</Select.Option>\n            <Select.Option value=\"a-2\">Korea</Select.Option>\n        </Select.OptGroup>\n        <Select.OptGroup label=\"Europe\">\n            <Select.Option value=\"b-1\">Germany</Select.Option>\n            <Select.Option value=\"b-2\">France</Select.Option>\n        </Select.OptGroup>\n        <Select.OptGroup label=\"South America\">\n            <Select.Option value=\"c-1\">Peru</Select.Option>\n        </Select.OptGroup>\n    </Select>\n);\n```\n\n----------------------------------------\n\nTITLE: Grid-Type Card Group Implementation\nDESCRIPTION: Demonstrates how to create a grid-style card group using the CardGroup component with type='grid' property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, CardGroup, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    return (\n        <CardGroup type='grid'>\n            {\n                new Array(7).fill(null).map((v, idx)=>(\n                    <Card \n                        key={idx}\n                        shadows='hover'\n                        title='Card title'\n                        headerLine={false}\n                        style={{ width: 260 }}\n                        headerExtraContent={\n                            <Text link>\n                                More\n                            </Text>\n                        }\n                    >\n                        <Text>Card content</Text>\n                    </Card>\n                ))\n            }     \n        </CardGroup>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Resize Area with Boundary Element\nDESCRIPTION: Demonstrates how to restrict the resize area using the boundElement prop. This example constrains the resizable component to its parent container.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <div style={{ width: '300px', height: '300px', border: 'var(--semi-color-border) 1px solid' }}>\n      <Resizable\n        style={{ marginLeft: '20%', backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n        defaultSize={{\n          width: '60%',\n          height: 200,\n        }}\n        boundElement={'parent'}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          bound：parent\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Photo Wall Upload with Limit in React\nDESCRIPTION: Demonstrates a photo wall upload component that automatically hides the upload entry when the file limit is reached. It uses the 'listType' prop set to 'picture' for image preview.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n        {\n            uid: '2',\n            name: 'dyBag2.jpeg',\n            status: 'success',\n            size: '222KB',\n            preview: true,\n            fileInstance: new File([new ArrayBuffer(2048)], 'dyBag2.jpeg', { type: 'image/png' }),\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n    ];\n    return (\n        <Upload\n            action={action}\n            limit={2}\n            listType=\"picture\"\n            accept=\"image/*\"\n            defaultFileList={defaultFileList}\n            onExceed={() => Toast.warning('最多只允许上传2个文件')}\n        >\n            <IconPlus size=\"extra-large\" />\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Closable Toast in React\nDESCRIPTION: Demonstrates how to create a toast that can only be closed manually by setting duration to 0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [toastId, setToastId] = useState();\n    function show() {\n        if (toastId) {\n            return;\n        }\n        let id = Toast.info(opts);\n        setToastId(id);\n    }\n    function hide() {\n        Toast.close(toastId);\n        destroy();\n    }\n    function destroy() {\n        setToastId(null);\n    }\n    let opts = {\n        content: 'Not auto close',\n        duration: 0,\n        onClose: destroy,\n    };\n    return (\n        <>\n            <Button type=\"primary\" onClick={show}>\n                Show Toast\n            </Button>\n            <br />\n            <br />\n            <Button type=\"primary\" onClick={hide}>\n                Hide Toast\n            </Button>\n        </>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: 基本使用Select组件\nDESCRIPTION: 展示了Select组件的基本用法，包括默认值设置、禁用状态和占位符的使用。每个Option必须声明value属性，Option的children或label将被渲染到下拉列表中。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select defaultValue=\"douyin\" style={{ width: 120 }}>\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\" disabled>\n                剪映\n            </Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select defaultValue=\"douyin\" disabled style={{ width: 120 }}>\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select placeholder=\"请选择业务线\" style={{ width: 120 }}>\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\" disabled>\n                剪映\n            </Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Aligning Elements with Space Component in React\nDESCRIPTION: Shows how to use the 'align' prop of the Space component to set different alignment options for child elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const divStyle = {\n        width: 80,\n        height: 100,\n        lineHight: 100,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px solid var(--semi-color-border)',\n        borderRadius: 3\n    };\n    return (\n        <Space vertical>\n            <Space align='start'>\n                <div style={divStyle}>文本</div>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Tag color='green' size='large'>标签</Tag>\n            </Space>\n            <Space align='center'>\n                <div style={divStyle}>文本</div>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Tag color='green' size='large'>标签</Tag>\n            </Space>\n            <Space align='end'>\n                <div style={divStyle}>文本</div>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Tag color='green' size='large'>标签</Tag>\n            </Space>\n            <Space align='baseline'>\n                <div style={divStyle}>文本</div>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Tag color='green' size='large'>标签</Tag>\n            </Space>\n        </Space>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RenderInputAreaProps Interface in TypeScript\nDESCRIPTION: Specifies the interface for props used in rendering a custom input area. Includes callbacks for sending messages and clearing context, as well as detailed props for various input components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderInputAreaProps {\n    /* Default node */\n    defaultNode?: ReactNode;\n    /* If you customize the input box, you need to call it when sending a message. */\n    onSend?: (content?: string, attachment?: FileItem[]) => void;\n    /* If you customize the clear context button, it needs to be called when you click to clear the context */\n    onClear?: (e?: any) => void;\n    /* DetailProps supported since 2.69.0 */\n    detailProps: {\n        /* clear context button */\n        clearContextNode?: ReactNode;\n        /* upload button */\n        uploadNOde?: ReactNode;\n        /* text input area */\n        inputNode?: ReactNode;\n        /* send button */\n        sendNode?: ReactNode;\n        /* The processing function that triggers the focus of the text input box after clicking */\n        onClick?: (e?: MouseEvent) => void;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Group Implementation in React\nDESCRIPTION: Demonstrates the basic usage of AvatarGroup component to display multiple avatars together with different colors and initials.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AvatarGroup, Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AvatarGroup>\n            <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n            <Avatar alt='Caroline Xiao'>CX</Avatar>\n            <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n            <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n            <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n        </AvatarGroup>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Notifications with Custom Content and Links in React\nDESCRIPTION: Shows how to create a notification with custom content including links using the Typography component. This example creates action links for complex notification scenarios.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const { Text } = Typography;\n\n    let opts = {\n        title: 'This is a title',\n        content: (\n            <>\n                <div>Hi, Bytedance dance dance</div>\n                <div style={{ marginTop: 8 }}>\n                    <Text link>More Info</Text>\n                    <Text link style={{ marginLeft: 20 }}>Show Later</Text>\n                </div>\n            </>),\n        duration: 3,\n    };\n\n    return (\n        <Button\n            onClick={() => Notification.info(opts)}\n        >\n            Display Notification\n        </Button>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Tabs with Button Style in React\nDESCRIPTION: Shows how to use Tabs component with 'button' style, using TabPane children to define simple content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs type=\"button\">\n                <TabPane tab=\"Document\" itemKey=\"1\">\n                    Document\n                </TabPane>\n                <TabPane tab=\"Quick Start\" itemKey=\"2\">\n                    Quick Start\n                </TabPane>\n                <TabPane tab=\"Help\" itemKey=\"3\">\n                    Help\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Layout Skeleton\nDESCRIPTION: Complex layout combining Avatar, Title, and Paragraph skeletons in a structured layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        display: 'flex',\n        alignItems: 'flex-start',\n    };\n\n    const placeholder = (\n        <div style={style}>\n            <Skeleton.Avatar style={{ marginRight: 12 }} />\n            <div>\n                <Skeleton.Title style={{ width: 120, marginBottom: 12, marginTop: 12 }} />\n                <Skeleton.Paragraph style={{ width: 240 }} rows={3} />\n            </div>\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <div style={style}>\n                <Avatar color=\"blue\" style={{ marginRight: 12 }}>\n                    UI\n                </Avatar>\n                <div>\n                    <h3>Semi UI</h3>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                </div>\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Pure Card Style Radio Group in Semi Design\nDESCRIPTION: Demonstrates how to create a pure card-style Radio group without visible radio buttons using the 'type' prop set to 'pureCard'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <RadioGroup type='pureCard' defaultValue={1} direction='vertical' aria-label=\"RadioGroup demo\" name=\"demo-radio-group-pureCard\">\n        <Radio value={1} extra='Radio description' style={{ width: 280 }}>\n            Radio Title\n        </Radio>\n        <Radio value={2} disabled extra='Radio description' style={{ width: 280 }}>\n            Radio Title\n        </Radio>\n        <Radio value={3} extra='Radio description' style={{ width: 280 }}>\n            Radio Title\n        </Radio>\n    </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Tags with Icons\nDESCRIPTION: Shows how to add prefix and suffix icons to tags\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\nimport { IconGithubLogo, IconSemiLogo } from '@douyinfe/semi-icons';\n\n() => (\n    <Space>\n        <Tag\n            color='light-blue'\n            prefixIcon={<IconGithubLogo />}\n            size='large'\n            shape='circle'\n        >\n            Semi Design\n        </Tag>\n        <Tag\n            color='cyan'\n            size='large'\n            shape='circle'\n            suffixIcon={<IconSemiLogo />}\n        >\n            D2C: figma to code in one click</Tag>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Nested Dropdown Implementation\nDESCRIPTION: Shows how to implement nested dropdowns with multiple levels of menu items using the Dropdown component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Dropdown, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const subDropdown = useMemo(\n        () => (\n            <Dropdown.Menu>\n                <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                <Dropdown.Item>Menu Item 3</Dropdown.Item>\n            </Dropdown.Menu>\n        ),\n        []\n    );\n\n    return (\n        <div style={{ margin: 100 }}>\n            <Dropdown\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown position={'rightTop'} render={subDropdown}>\n                            <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        </Dropdown>\n                        <Dropdown position={'leftTop'} render={subDropdown}>\n                            <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        </Dropdown>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>Hover Me</Tag>\n            </Dropdown>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Three-Row Layout in React\nDESCRIPTION: Demonstrates how to create a basic three-row layout using Header, Content, and Footer components from Semi UI's Layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Content } = Layout;\n\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Elements with Space Component in React\nDESCRIPTION: Shows how to use the 'wrap' prop to enable automatic wrapping of elements when they exceed the container width.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Space wrap>\n        {new Array(10).fill(null).map((item, idex) => (\n            <Button theme='solid' type='secondary' key={idex}>按钮</Button>\n        ))}\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Default Size Anchor Implementation\nDESCRIPTION: Demonstrates the default size configuration of the Anchor component with multiple links.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => (\n    <Anchor size={'default'}>\n        <Anchor.Link href=\"#Components\" title=\"Components\" />\n        <Anchor.Link href=\"#Design\" title=\"Design\" />\n        <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n        <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n    </Anchor>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic SideSheet Implementation in React\nDESCRIPTION: Demonstrates basic usage of SideSheet with visibility toggle and content rendering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const change = () => {\n        setVisible(!visible);\n    };\n    return (\n        <>\n            <Button onClick={change}>Open SideSheet</Button>\n            <SideSheet title=\"Sidesheet\" visible={visible} onCancel={change}>\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Switch with External Text Label in React\nDESCRIPTION: 展示在Switch外部放置文本说明的推荐用法，使用Typography组件结合Switch状态动态显示开关状态文本。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const [open, setOpen] = useState();\n    const { Title } = Typography;\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Title heading={6} style={{ margin: 8 }}>\n                {open ? '已开启' : '已关闭'}\n            </Title>\n            <Switch checked={open} onChange={setOpen} aria-label=\"a switch for demo\" />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: TagInput with Event Callbacks\nDESCRIPTION: Shows how to use various callback functions to handle events like focus, blur, change, add, remove, and input change.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput \n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']} \n        showClear \n        onFocus={e =>{console.log(`onFocus`);}} \n        onBlur={e=>{console.log(`onBlur`);}} \n        onChange={tag=>{console.log(`onChange ：${tag}`);}} \n        onAdd={tag=>{console.log(`onAdd ：${tag}`);}} \n        onRemove={(v, i)=>{console.log(`onRemove ：${v}, index：${i}`);}} \n        onInputChange={(input, e)=>{console.log(`onInputChange ：${input}`);}} \n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorPicker Component\nDESCRIPTION: Demonstrates how to use the ColorPicker as a controlled component by providing a value prop and handling onChange events.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    const [value, setValue] = useState(ColorPicker.colorStringToValue('#39c5bb'));\n    console.log(value);\n    return (\n        <div>\n            <ColorPicker\n                value={value}\n                onChange={value => {\n                    setValue(value);\n                }}\n                alpha={true}\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Input with Separators\nDESCRIPTION: Shows how to use separators for batch input functionality. Supports multiple separators as of version 1.29.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <TagInput \n            separator='-' \n            placeholder='使用 - 进行批量输入'\n            onChange={v => console.log(v)}\n        />\n        <br/><br/>\n        <TagInput \n            separator={['-', '/', '|', '++']}\n            placeholder='支持多个分隔符进行批量输入'\n            onChange={v => console.log(v)}\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting of Filtered Results in Cascader Component\nDESCRIPTION: This example shows how to use filterSorter to customize the sorting of search results in a Cascader component. The filterSorter function allows precise control over the order of filtered items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Product',\n            value: 'Product',\n            children: [\n                {\n                    label: 'Semi-Material',\n                    value: 'Semi-Material',\n                    \n                },\n                {\n                    label: 'Semi-DSM',\n                    value: 'Semi-DSM',\n                    \n                },\n                {\n                    label: 'Semi',\n                    value: 'Semi',\n                    \n                },\n                {\n                    label: 'Semi-C2D',\n                    value: 'Semi-C2D',\n                },\n                {\n                    label: 'Semi-D2C',\n                    value: 'Semi-D2C',\n                },\n            ],\n        }\n    ];\n    return (\n        <div>\n            <Cascader\n                style={{ width: 300 }}\n                treeData={treeData}\n                placeholder=\"Enter s to view the sorting effect\"\n                filterTreeNode\n                filterSorter={(first, second, inputValue) => {\n                    const firstData = first[first.length - 1];\n                    const lastData = second[second.length - 1];\n                    if (firstData.label === inputValue) {\n                        return -1;\n                    } else if (lastData.label === inputValue) {\n                        return 1;\n                    } else {\n                        return firstData.label < lastData.label ? -1 : 1;\n                    }\n                }}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Clearable Input\nDESCRIPTION: Shows how to implement a clearable input with a clear icon.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input showClear defaultValue='click to clear'></Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation from Local JSON in React\nDESCRIPTION: Shows how to use the Lottie component with a JSON object directly. This is useful when the animation data needs to be bundled with the website code.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n    const [data, setData] = useState('');\n\n    useEffect(() => {\n        fetch(jsonURL)\n            .then(resp => resp.json())\n            .then(setData);\n    }, []);\n\n    return (\n        <div>\n            <Lottie params={{ animationData: data }} width={'300px'} height={'300px'} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker in Popover in React\nDESCRIPTION: 演示了如何在弹层中使用 ColorPicker，包括默认触发器和自定义触发器的用法。使用 usePopover 属性来控制是否在弹层中显示。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker, Button } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return <div>\n        <ColorPicker alpha={true} onChange={value=>{console.log(value);}} usePopover={true}/>\n        <br/>\n        <div>自定义 trigger</div>\n        <ColorPicker alpha={true} onChange={value=>{console.log(value);}} usePopover={true}>\n            <Button> Trigger </Button>\n        </ColorPicker>\n    </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel Arrow Controls in React\nDESCRIPTION: Shows how to implement and control carousel navigation arrows with options for visibility (show/hide) and display behavior (always visible or on hover). Uses Semi Design UI components for a responsive image carousel.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, RadioGroup, Radio, Space, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const { Title, Paragraph } = Typography;\n    const [arrowType, setArrowType] = useState('always');\n    const [show, setShow] = useState(true);\n  \n    const style = {\n        width: '100%',\n        height: '400px',\n    };\n\n    const titleStyle = { \n        position: 'absolute', \n        top: '100px', \n        left: '100px'\n    };\n\n    const colorStyle = {\n        color: '#1C1F23'\n    };\n\n    const renderLogo = () => {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }}/>\n        );\n    };\n\n    const imgList = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n    ];\n\n    const textList = [\n        ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n        ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n        ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n    ];\n\n    return (\n        <div>\n            <Carousel style={style} showArrow={show} arrowType={arrowType} theme='dark' autoPlay={false}>\n                {\n                    imgList.map((src, index) => {\n                        return (\n                            <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                    {renderLogo()}\n                                    <Title heading={2} style={colorStyle}>{textList[index][0]}</Title>\n                                    <Space vertical align='start'>\n                                        <Paragraph style={colorStyle}>{textList[index][1]}</Paragraph>\n                                        <Paragraph style={colorStyle}>{textList[index][2]}</Paragraph>\n                                    </Space>\n                                </Space>\n                            </div>\n                        );\n                    })\n                }\n            </Carousel>\n            <br/>\n            <Space vertical align='start'>\n                <Space> \n                    <div>arrow</div>\n                    <RadioGroup onChange={e => setShow(e.target.value)} value={show} type=\"button\">\n                        <Radio value={true}>show</Radio>\n                        <Radio value={false}>hide</Radio>\n                    </RadioGroup>\n                </Space>\n                <Space> \n                    <div>show time</div>\n                    <RadioGroup onChange={e => setArrowType(e.target.value)} value={arrowType} type=\"button\">\n                        <Radio value='always'>always</Radio>\n                        <Radio value='hover'>hover</Radio>\n                    </RadioGroup>\n                </Space>\n            </Space>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: ColorPicker with Eyedropper Functionality\nDESCRIPTION: Demonstrates how to enable the eyedropper tool in the ColorPicker, which allows picking colors from the screen. Requires a secure context and Chromium browser > 95.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return (\n        <ColorPicker\n            alpha={true}\n            eyeDropper={true}\n            onChange={value => {\n                console.log(value);\n            }}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Slider with Input Box in React\nDESCRIPTION: 展示带输入框的滑动条，滑块和输入框组件保持同步。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider, InputNumber } from '@douyinfe/semi-ui';\n\nclass InputSlider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: 10 };\n        this.getSliderValue = this.getSliderValue.bind(this);\n    }\n\n    getSliderValue(value) {\n        if (isNaN(Number(value))){\n            return;\n        }\n        this.setState({ value: value / 1 }); \n    }\n\n    render() {\n        const { value } = this.state;\n        return (\n            <div>\n                <div style={{ width: 320, marginRight: 15 }}>\n                    <Slider step={1} value={value} onChange={(value) => (this.getSliderValue(value))} ></Slider>\n                </div>\n                <InputNumber onChange={(v) => this.getSliderValue(v)} style={{ width: 100 }} value={value} min={0} max={100} />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customizable Pie and Donut Charts with VChart in React\nDESCRIPTION: This code demonstrates how to create pie charts with customizable options using @visactor/react-vchart. It provides two variants: a basic pie chart and a donut chart with an indicator that shows detailed information when segments are selected.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'pie',\n  data: [\n    {\n      id: 'id0',\n      values: [{ type: 'oxygen', value: '46.60' }, { type: 'silicon', value: '27.72' },\n        { type: 'aluminum', value: '8.13' }, { type: 'iron', value: '5' },\n        { type: 'calcium', value: '3.63' }, { type: 'sodium', value: '2.83' },\n        { type: 'potassium', value: '2.59' }, { type: 'others', value: '3.5' }]\n    }\n  ],\n  valueField: 'value',\n  categoryField: 'type',\n  label: {\n    visible: true\n  },\n  tooltip: {\n    mark: {\n      content: [\n        {\n          key: datum => datum['type'],\n          value: datum => datum['value'] + '%'\n        }\n      ]\n    }\n  }\n};\n\nconst donutChart = {\n  title: {\n    visible: true,\n    text: 'Pie chart',\n    subtext: 'This is a pie chart',\n  },\n  legends: {\n    visible: true,\n    orient: 'right'\n  },\n}\n\nconst donutWithIndicator = {\n  title: {\n    visible: true,\n    text: 'Donut chart with indicator',\n    subtext: 'This is a donut chart with indicator',\n  },\n  legends: {\n    visible: true,\n    orient: 'right'\n  },\n  indicator: {\n    visible: true,\n    trigger: 'select',\n    title: {\n      visible: true,\n      style: {\n        fontSize: 12,\n        fontWeight: 'normal',\n        text: data => {\n          if (data) {\n            const value = data['type'];\n            return value ? value : null;\n          }\n          return 'Sum';\n        }\n      }\n    },\n    content: [\n      {\n        visible: true,\n        fontWeight: 'bold',\n        style: {\n          fontSize: 20,\n          text: data => {\n            if (data) {\n              const value = data['value'];\n              return value ? `${value}%` : null;\n            }\n            return 1234;\n          }\n        }\n      }\n    ]\n  }\n}\n\nfunction App() {\n  const [type, setType] = useState('donut');\n  const onChange = useCallback((e) => setType(e.target.value), []);\n  return (\n     <>\n      <RadioGroup onChange={onChange} value={type} >\n        <Radio value={'donut'}>饼图</Radio>\n        <Radio value={'donutWithIndicator'}>带指标卡饼图</Radio>\n      </RadioGroup>\n      <div style={{ display: 'flex', alignItem: 'center', justifyContent: 'center'}}>\n        <VChart\n            spec={{\n                ...commonSpec,\n                ...(type === 'donut' ? donutChart : donutWithIndicator),\n            }}\n            option={{ mode: \"desktop-browser\" }}\n            style={{ height: 440, width:680 }}\n        />\n      </div>\n    </>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Usage with Tag\nDESCRIPTION: Example showing basic Popover implementation with a Tag component as trigger.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag, Empty } from '@douyinfe/semi-ui';\nimport { IllustrationSuccess, IllustrationSuccessDark } from '@douyinfe/semi-illustrations';\n\nfunction Demo() {\n    return (\n        <Popover\n            content={\n                <Empty\n                    title={'先进的设计 / 研发协作方式'}\n                    image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n                    darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n                    description=\"使用 Semi D2C 快速还原 Figma 设计稿，一键转代码\"\n                    style={{ width: 400, margin: '0 auto', display: 'flex', padding: 20 }}\n                />\n            }\n        >\n            <Tag>悬停此处</Tag>\n        </Popover>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Options Configuration\nDESCRIPTION: Example of Radio groups created using the 'options' property instead of individual Radio components. Shows three different ways to configure options: as simple strings, as objects with additional properties, and as objects with custom styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Space } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value1: 'Guest',\n            value2: 'Developer',\n            value3: 'Maintainer',\n        };\n        this.plainOptions = ['Guest', 'Developer', 'Maintainer'];\n        this.options = [\n            { label: 'Guest', value: 'Guest', extra: 'Semi Design', style: { width: 120 } },\n            { label: 'Developer', value: 'Developer', extra: 'Semi Design', style: { width: 120 } },\n            { label: 'Maintainer', value: 'Maintainer', extra: 'Semi Design', style: { width: 120 } },\n        ];\n        this.optionsWithDisabled = [\n            { label: 'Guest', value: 'Guest' },\n            { label: 'Developer', value: 'Developer' },\n            { label: 'Maintainer', value: 'Maintainer', disabled: true },\n        ];\n        this.onChange1 = this.onChange1.bind(this);\n        this.onChange2 = this.onChange2.bind(this);\n        this.onChange3 = this.onChange3.bind(this);\n    }\n    onChange1(e) {\n        console.log('radio1 checked', e.target.value);\n        this.setState({\n            value1: e.target.value,\n        });\n    }\n\n    onChange2(e) {\n        console.log('radio2 checked', e.target.value);\n        this.setState({\n            value2: e.target.value,\n        });\n    }\n\n    onChange3(e) {\n        console.log('radio3 checked', e.target.value);\n        this.setState({\n            value3: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <Space vertical align='start' spacing='loose'>\n                <RadioGroup\n                    options={this.plainOptions}\n                    onChange={this.onChange1}\n                    value={this.state.value1}\n                    aria-label=\"单选组合示例\"\n                    name=\"demo-radio-group-1\"\n                />\n                <RadioGroup\n                    options={this.optionsWithDisabled}\n                    onChange={this.onChange2}\n                    value={this.state.value2}\n                    aria-label=\"单选组合示例\"\n                    name=\"demo-radio-group-2\"\n                />\n                <RadioGroup\n                    options={this.options}\n                    onChange={this.onChange3}\n                    value={this.state.value3}\n                    aria-label=\"单选组合示例\"\n                    name=\"demo-radio-group-3\"\n                />\n            </Space>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Banner with Custom Content and Actions\nDESCRIPTION: Shows how to create a banner with custom action buttons using the children prop. This example includes a bordered warning banner with additional action buttons in the footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Banner } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ width: 500, padding: 20, border: '1px solid var(--semi-color-border)' }}>\n        <Banner\n            fullMode={false}\n            title=\"Title\"\n            type=\"warning\"\n            bordered\n            description=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat\"\n        >\n            <div className=\"semi-modal-footer\">\n                <button className=\"semi-button semi-button-tertiary semi-button-light\" type=\"button\">No, thanks.</button>\n                <button className=\"semi-button semi-button-warning\" type=\"button\">Sounds great!</button>\n            </div>\n        </Banner>\n        <br/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Collapse Implementation\nDESCRIPTION: Demonstrates basic usage of Collapse component with multiple expandable panels that can be open simultaneously.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse } from '@douyinfe/semi-ui';\n\n() => (\n    <Collapse>\n        <Collapse.Panel header=\"This is panel header 1\" ItemKey=\"1\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 2\" itemKey=\"2\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 3\" itemKey=\"3\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Bar Rendering in React with Semi-Design\nDESCRIPTION: This example shows how to use the renderTabBar prop to customize the rendering behavior of the tab bar. It adds a wrapper with custom text that displays the current active key value along with the default tab bar component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs\n                defaultActiveKey=\"1\"\n                renderTabBar={(tabBarProps, DefaultTabBar) => {\n                    return (\n                        <div className=\"tab-bar-box\">\n                            This is a custom rendered tabBar. Current activeKey is: {tabBarProps.activeKey}\n                            <DefaultTabBar {...tabBarProps} />\n                        </div>\n                    );\n                }}\n            >\n                <TabPane tab=\"Document\" itemKey=\"1\">\n                    Document\n                </TabPane>\n                <TabPane tab=\"Quick Start\" itemKey=\"2\">\n                    Quick Start\n                </TabPane>\n                <TabPane tab=\"Help\" itemKey=\"3\">\n                    Help\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Menu in Tabs Component (React)\nDESCRIPTION: Demonstrates how to use the 'more' prop to merge redundant tabs into a dropdown menu. The example shows both basic and advanced configurations for the dropdown feature.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <Tabs more={4} style={{ width: '60%', margin: '20px' }} type=\"card\">\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                    Content of card tab {i}\n                </TabPane>\n            ))}\n        </Tabs>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义渲染事件 - React\nDESCRIPTION: 通过 dateGridRender 属性自定义渲染日期单元格/列。需要使用绝对定位。此示例展示了如何在特定日期添加自定义事件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => {\n    const dailyEventStyle = {\n        position: 'absolute',\n        left: '0',\n        right: '0',\n        borderRadius: '3px',\n        boxSizing: 'border-box',\n        border: 'var(--semi-color-primary) 1px solid',\n        padding: '10px',\n        backgroundColor: 'var(--semi-color-primary-light-default)',\n        overflow: 'hidden',\n    };\n    const displayValue = new Date(2019, 6, 23, 8, 32, 0);\n    const dateRender = dateString => {\n        if (dateString === new Date(2019, 6, 23).toString()) {\n            return (\n                <>\n                    <div style={{ ...dailyEventStyle, top: '500px', height: 50 }}>吃饭 🍰</div>\n                    <div style={{ ...dailyEventStyle, top: '0', height: 400 }}>睡觉 😪</div>\n                    <div style={{ ...dailyEventStyle, top: '700px', height: 100 }}>打豆豆 🎮</div>\n                </>\n            );\n        } else {\n            return null;\n        }\n    };\n    return <Calendar height={700} mode=\"week\" displayValue={displayValue} dateGridRender={dateRender} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled TreeSelect Component in React\nDESCRIPTION: Creates a controlled TreeSelect component using value and onChange props. The example demonstrates selecting cities from a hierarchical tree structure with Asia and North America as root nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: 'Shanghai'\n        };\n    }\n    onChange(value) {\n        this.setState({ value });\n    }\n    render() {\n        const treeData = [\n            {\n                label: 'Asia',\n                value: 'Asia',\n                key: '0',\n                children: [\n                    {\n                        label: 'China',\n                        value: 'China',\n                        key: '0-0',\n                        children: [\n                            {\n                                label: 'Beijing',\n                                value: 'Beijing',\n                                key: '0-0-0',\n                            },\n                            {\n                                label: 'Shanghai',\n                                value: 'Shanghai',\n                                key: '0-0-1',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: 'North America',\n                value: 'North America',\n                key: '1',\n            }\n        ];\n        return (\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                value={this.state.value}\n                placeholder=\"Please select\"\n                onChange={e => this.onChange(e)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 栅格间隔设置 (React)\nDESCRIPTION: 使用Row的gutter属性设置栅格间隔。展示了水平间隔和垂直间隔的使用方法。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid grid-gutter\">\n        <p>horizontal</p>\n        <hr />\n        <Row gutter={16}>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n        </Row>\n        <p>vertical</p>\n        <hr />\n        <Row gutter={[16, 24]}>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Auto-collapsing Breadcrumb in React\nDESCRIPTION: Shows how Breadcrumb automatically collapses when there are more than 4 levels, with the ability to expand on click.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>Many levels</Breadcrumb.Item>\n        <Breadcrumb.Item>Another level</Breadcrumb.Item>\n        <Breadcrumb.Item>Another level again</Breadcrumb.Item>\n        <Breadcrumb.Item>Here is another one</Breadcrumb.Item>\n        <Breadcrumb.Item>Penultimate</Breadcrumb.Item>\n        <Breadcrumb.Item>Detail</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: File Size Limit Implementation\nDESCRIPTION: Shows how to implement file size restrictions using maxSize and minSize props with custom error handling via onSizeError callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n\n    return (\n        <>\n            <Upload\n                action={action}\n                maxSize={1024}\n                minSize={200}\n                onSizeError={(file, fileList) => Toast.error(`${file.name} size invalid`)}\n            >\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Click to upload (minimum 200KB, maximum 1MB)\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Empty Component with Dark Mode Support\nDESCRIPTION: Demonstrates basic usage of Empty component with construction illustration and dark mode support. Includes custom title and description.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty } from '@douyinfe/semi-ui';\nimport { IllustrationConstruction, IllustrationConstructionDark } from '@douyinfe/semi-illustrations';\n\n() => (\n    <Empty\n        image={<IllustrationConstruction style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationConstructionDark style={{ width: 150, height: 150 }} />}\n        title={'Function under construction'}\n        description=\"The current function is not yet open, so stay tuned.\"\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Dropdown Position Examples\nDESCRIPTION: Demonstrates different positioning options for the Dropdown component including bottom, bottomLeft, and bottomRight positions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <Dropdown\n                position={'bottom'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>Bottom</Tag>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>bottomLeft</Tag>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                position={'bottomRight'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>bottomRight</Tag>\n            </Dropdown>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Option Rendering in AutoComplete\nDESCRIPTION: Shows how to customize the rendering of options in AutoComplete using renderItem and renderSelectedItem props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete, Avatar } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\nclass CustomOptionDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            color: ['amber', 'indigo', 'cyan'],\n            list: [\n                { name: 'Xia', email: 'xiakeman@example.com', abbr: 'XK', color: 'amber' },\n                { name: 'Shen', email: 'shenyue@example.com', abbr: 'SY', color: 'indigo' },\n                { name: 'Qu', email: 'quchenyi@example.com', abbr: 'CY', color: 'blue' },\n                { name: 'Wen', email: 'wenjiamao@example.com', abbr: 'JM', color: 'cyan' },\n            ],\n        };\n    }\n\n    search(value) {\n        let result;\n        if (value) {\n            result = this.state.list.map(item => {\n                return { ...item, value: item.name, label: item.email };\n            });\n        } else {\n            result = [];\n        }\n        this.setState({ data: result });\n    }\n\n    renderOption(item) {\n        let optionStyle = {\n            display: 'flex',\n        };\n        return (\n            <>\n                <Avatar color={item.color} size=\"small\">\n                    {item.abbr}\n                </Avatar>\n                <div style={{ marginLeft: 4 }}>\n                    <div style={{ fontSize: 14, marginLeft: 4 }}>{item.name}</div>\n                    <div style={{ marginLeft: 4 }}>{item.email}</div>\n                </div>\n            </>\n        );\n    }\n\n    render() {\n        return (\n            <AutoComplete\n                data={this.state.data}\n                prefix={<IconSearch />}\n                style={{ width: '250px' }}\n                renderSelectedItem={option => option.email}\n                renderItem={this.renderOption}\n                onSearch={this.search.bind(this)}\n                onSelect={v => console.log(v)}\n            ></AutoComplete>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Preview Header\nDESCRIPTION: Demonstrates how to customize the preview's top display area using the renderHeader prop to show custom titles and styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n    ]), []);\n\n    return (\n        <>  \n            <ImagePreview\n                renderHeader={(title) => (\n                    <div \n                        style={{ width: \"100%\", height: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n                        <span style={{ background: \"black\", padding: '0 10px' }}>Custom title:{title}</span>\n                    </div>\n                )}\n            >\n                <div >\n                    {srcList.map((src, index) => {\n                        return (\n                            <Image \n                                key={index} \n                                src={src} \n                                width={200} \n                                alt={`lamp${index + 1}`} \n                                preview={{\n                                    previewTitle: `lamp${index + 1}`,\n                                }} \n                                style={{ marginRight: 5 }}\n                            />\n                        );\n                    })}\n                </div>\n            </ImagePreview>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Implementation in TreeSelect\nDESCRIPTION: Example of implementing a custom trigger using TagInput component with the triggerRender prop. Demonstrates custom rendering of selected items with tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { TreeSelect, Button, Tag, TagInput } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [value, setValue] = useState([]);\n    const treeData = useMemo(() => [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ], []);\n    \n    const onValueChange = useCallback((value) => {\n        console.log('onChange', value);\n    });\n\n    const renderTrigger = useCallback((props) => {\n        const { value, onSearch, onRemove, inputValue } = props;\n        const tagInputValue = value.map(item => item.key);\n        const renderTagInMultiple = (key) => {\n            const label = value.find(item => item.key === key).label;\n            const onCloseTag = (value, e, tagKey) => {\n                onRemove(tagKey);\n            };\n            return <Tag style={{ marginLeft: 2 }} tagKey={key} key={key} onClose={onCloseTag} closable>{label}</Tag>;\n        };\n        return (\n            <TagInput\n                inputValue={inputValue}\n                value={tagInputValue}\n                onInputChange={onSearch}\n                renderTagItem={renderTagInMultiple}\n            />\n        );\n    }, []);\n\n    return (\n        <TreeSelect\n            triggerRender={renderTrigger}\n            filterTreeNode\n            searchPosition=\"trigger\"\n            multiple\n            treeData={treeData}\n            placeholder='Custom Trigger'\n            onChange={onValueChange}\n            style={{ width: 300 }}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Collapsible Components\nDESCRIPTION: Demonstrates nested Collapsible components with independent toggle controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState(false);\n    const [isChildOpen, setChildOpen] = useState(false);\n\n    const collapsed = (\n        <ul>\n            <li>\n                <p>Semi Design 以内容优先进行设计。</p>\n            </li>\n            <li>\n                <p>更容易地自定义主题。</p>\n            </li>\n            <li>\n                <p>适用国际化场景。</p>\n            </li>\n            <li>\n                <p>效率场景加入人性化关怀。</p>\n            </li>\n        </ul>\n    );\n    return (\n        <div>\n            <Button onClick={() => setOpen(!isOpen)}>Toggle</Button>\n            <br />\n            <Collapsible isOpen={isOpen}>\n                <div>\n                    <span>Semi Design的设计原则包括：</span>\n                    <Button onClick={() => setChildOpen(!isChildOpen)}>Toggle List</Button>\n                </div>\n                <Collapsible isOpen={isChildOpen}>{collapsed}</Collapsible>\n            </Collapsible>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Truncation Logic in React\nDESCRIPTION: Demonstrates various truncation options for Breadcrumb items, including tooltips and ellipsis positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const routes = ['首页', '当这个页面标题很长很长很长时需要省略', '详情页'];\n    const { Text } = Typography;\n    return (\n        <>\n            <Text size=\"small\">默认行为</Text>\n            <Breadcrumb\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">省略但不显示Tooltip</Text>\n            <Breadcrumb\n                showTooltip={false}\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">不截断</Text>\n            <Breadcrumb\n                showTooltip={{ width: 'auto' }}\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">从标题中间开始省略</Text>\n            <Breadcrumb\n                showTooltip={{ ellipsisPos: 'middle' }}\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">自定义 Tooltip 参数</Text>\n            <Breadcrumb\n                showTooltip={{ opts: { position: 'topLeft' } }}\n                routes={routes}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Implementation\nDESCRIPTION: Demonstrates basic usage of Collapsible component with toggle functionality using isOpen state\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState();\n    const toggle = () => {\n        setOpen(!isOpen);\n    };\n    const collapsed = (\n        <ul>\n            <li>Nothing can ever happen twice.</li>\n            <li>In consequence, the sorry fact is</li>\n            <li>that we arrive here improvised</li>\n            <li>and leave without the chance to practice. </li>\n        </ul>\n    );\n    return (\n        <div>\n            <Button onClick={toggle}>Toggle</Button>\n            <Collapsible isOpen={isOpen}>{collapsed}</Collapsible>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 同步切换双面板月份 DatePicker - React\nDESCRIPTION: 使用 syncSwitchMonth 属性来允许范围选择时双面板同步切换月份。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => (\n    <DatePicker\n        // 双面板同步切换\n        syncSwitchMonth={true}\n        type=\"dateTimeRange\"\n        style={{ width: 400 }}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Cascader Component in React\nDESCRIPTION: Shows how to use the Cascader as a controlled component by providing value prop and onChange handler. The component's state is managed by the parent component, allowing for more fine-grained control.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: []\n        };\n    }\n    onChange(value) {\n        this.setState({ value });\n    }\n    render() {\n        const treeData = [\n            {\n                label: 'Impressionism',\n                value: 'impressionism',\n                children: [\n                    {\n                        label: 'Visual Arts',\n                        value: 'visualArts',\n                        children: [\n                            {\n                                label: 'Claude Monet',\n                                value: 'Monet',\n                            },\n                            {\n                                label: 'Pierre-Auguste Renoir',\n                                value: 'Renoir',\n                            },\n                            {\n                                label: 'Édouard Manet',\n                                value: 'Manet',\n                            },\n                        ],\n                    },\n                    {\n                        label: 'Music',\n                        value: 'music',\n                        children: [\n                            {\n                                label: 'Claude Debussy',\n                                value: 'Debussy',\n                            },\n                            {\n                                label: 'Maurice Ravel',\n                                value: 'Ravel',\n                            }\n                        ]\n                    }\n                ],\n            }];\n        return (\n            <Cascader\n                style={{ width: 400 }}\n                treeData={treeData}\n                placeholder=\"Please select\"\n                value={this.state.value}\n                onChange={e => this.onChange(e)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UserGuide with Custom Positioning\nDESCRIPTION: Demonstrates various positioning options for the UserGuide popup, including top, right, and bottom positions, with optional arrow display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button id={'position-demo'} onClick={showDialog}>Start Guide</Button>\n            <UserGuide\n                mode=\"popup\"\n                mask={true}\n                visible={visible}\n                steps={[\n                    {\n                        target: document.querySelector('#position-demo'),\n                        title: \"Beginner's Guide\",\n                        description: 'Hello ByteDancer!',\n                        position: 'top',\n                    },\n                    {\n                        target: document.querySelector('#position-demo'),\n                        title: 'New Position',\n                        description: 'This is Right Position',\n                        position: 'right',\n                    },\n                    {\n                        target: document.querySelector('#position-demo'),\n                        title: 'Hide Arrow',\n                        description: 'We hide the arrow',\n                        position: 'bottom',\n                        showArrow: false,\n                    },\n                ]}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Global Notification Configuration\nDESCRIPTION: Setting global configuration options for notifications that apply to all subsequent notifications\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nNotification.config(config)\n```\n\n----------------------------------------\n\nTITLE: Controlled Spin Component\nDESCRIPTION: Shows how to control the Spin component's visibility using the spinning property and state management.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Spin, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [loading, toggleLoading] = useState(false);\n\n    const toggle = () => {\n        toggleLoading(!loading);\n    };\n    return (\n        <div>\n            <Button onClick={toggle} style={{ marginRight: 20 }}>\n                Controlled Spin\n            </Button>\n            <Spin spinning={loading}></Spin>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Implementation\nDESCRIPTION: New version of Steps component using type=\"basic\" for a cleaner look\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Steps type=\"basic\" current={1} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Empty Component Without Images\nDESCRIPTION: Demonstrates using the Empty component without illustrations, only displaying text content and using Typography components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty, Typography } from '@douyinfe/semi-ui';\n\n() => (\n    <Empty\n        title=\"暂未找到匹配的筛选结果\"\n        description={\n            <span>\n                <Typography.Text>试试 </Typography.Text>\n                <Typography.Text link>重置筛选条件</Typography.Text>\n            </span>\n        }\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: TextArea Component in React\nDESCRIPTION: Demonstrates the TextArea component for multi-line input, with optional character count limit and clear functionality (supported since version 1.30.0).\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TextArea } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <TextArea />\n        <br/><br/>\n        <TextArea maxCount={100} showClear/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Card Group Implementation\nDESCRIPTION: Demonstrates how to create groups of Cards with adjustable spacing using CardGroup component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Card, CardGroup, Typography, Slider } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n    const [ spacing, setSpacing ] = useState(12);\n\n    return (\n        <>\n            <Text>Slide to adjust the card spacing</Text>\n            <Slider \n                defaultValue={12}\n                max={40}\n                min={10}\n                style={{ width: 360 }}\n                onChange={v=> setSpacing(v)}\n            />\n            <br />\n            <CardGroup spacing={spacing}>\n                {\n                    new Array(8).fill(null).map((v, idx)=>(\n                        <Card \n                            key={idx}\n                            shadows='hover'\n                            title='Card title'\n                            headerLine={false}\n                            style={{ width: 260 }}\n                            headerExtraContent={\n                                <Text link>\n                                    More\n                                </Text>\n                            }\n                        >\n                            <Text>Card content</Text>\n                        </Card>\n                    ))\n                }\n            </CardGroup>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Position in Select Component (React/JSX)\nDESCRIPTION: This snippet shows how to customize the search input position in a Select component. It demonstrates setting the search input in the dropdown and how to handle clear functionality for different search positions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select\n            filter\n            searchPosition='dropdown'\n            style={{ width: 200 }}\n            defaultValue={'ulikecam'}\n        >\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n            <Select.Option value=\"ulikecam\">UlikeCam</Select.Option>\n            <Select.Option value=\"jianying\">Capcut</Select.Option>\n            <Select.Option value=\"xigua\">XiguaVideo</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            filter\n            searchPosition='dropdown'\n            multiple\n            style={{ width: 300 }}\n            defaultValue={['semi-1']}\n            autoClearSearchValue={false}\n        >\n            <Select.Option value=\"semi-0\">Semi-0</Select.Option>\n            <Select.Option value=\"semi-1\">Semi-1</Select.Option>\n            <Select.Option value=\"semi-2\">Semi-2</Select.Option>\n            <Select.Option value=\"semi-3\">Semi-3</Select.Option>\n            <Select.Option value=\"semi-4\">Semi-4</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: TagInput with Tag Count and Length Limits\nDESCRIPTION: Shows how to limit the number of tags with max property and the length of a single tag with maxLength property, with corresponding callback functions when limits are exceeded.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <TagInput \n            max={3} \n            placeholder='max = 3' \n            onChange={v => console.log(v)}\n            onExceed={v => {\n                Toast.warning('Exceeds max');\n                console.log(v);\n            }}\n        />\n        <TagInput \n            maxLength={5} \n            placeholder='maxLength = 5'  \n            style={{ marginTop: 12 }}\n            onChange={v => console.log(v)}\n            onInputExceed={v => {\n                Toast.warning('Exceeds maxLength');\n                console.log(v);\n            }} \n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Text Component Variations\nDESCRIPTION: Shows different text styles including secondary, warning, danger, disabled, mark, code, underline, and strong variations\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n    return (\n        <div>\n            <Text>Text</Text>\n            <br />\n            <br />\n            <Text type=\"secondary\">Secondary</Text>\n            <br />\n            <br />\n            <Text type=\"tertiary\">{`Tertiary v>=1.2.0`}</Text>\n            <br />\n            <br />\n            <Text type=\"quaternary\">{`Quaternary v>=1.2.0`}</Text>\n            <br />\n            <br />\n            <Text type=\"warning\">Warning</Text>\n            <br />\n            <br />\n            <Text type=\"danger\">Danger</Text>\n            <br />\n            <br />\n            <Text type=\"success\">{`Success v>=1.7.0`}</Text>\n            <br />\n            <br />\n            <Text disabled>Disabled</Text>\n            <br />\n            <br />\n            <Text mark>Default Mark</Text>\n            <br />\n            <br />\n            <Text code>Example Code</Text>\n            <br />\n            <br />\n            <Text underline>Underline</Text>\n            <br />\n            <br />\n            <Text delete>Deleted</Text>\n            <br />\n            <br />\n            <Text strong>Strong</Text>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Tabs with Horizontal Scrolling\nDESCRIPTION: Shows how to create horizontally scrollable tabs with collapsible functionality. Demonstrates rendering of multiple tab panes with basic content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible>\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                    <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                        Content of card tab {i}\n                    </TabPane>\n                ))}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic InputNumber Implementation\nDESCRIPTION: Demonstrates basic usage of InputNumber with various configurations including step size, shift step, and min/max values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div style={{ width: 280 }}>\n                <label>Simple</label>\n                <InputNumber />\n                <br/><br/>\n\n                <label>Set step to 2 </label>\n                <InputNumber step={2} />\n                <br/><br/>\n\n                <label>Press shift key and click the button to increase/decrease the step size </label>\n                <InputNumber shiftStep={100} />\n                <br/><br/>\n\n                <label>Set min to 1, max to 10</label>\n                <InputNumber min={1} max={10} Default Value={1} />\n                <br/><br/>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Quick Jumper in React\nDESCRIPTION: Shows how to add a quick jumper input for fast page navigation using the 'showQuickJumper' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showQuickJumper style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={300} showQuickJumper></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Filtered Cascader with Custom Checkbox in React\nDESCRIPTION: This snippet shows a custom filter render function for a Cascader component. It uses Checkbox and Typography components to create a custom display for filtered items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nstyle={{ justifyContent: 'start', padding: '8px 16px 8px 12px', boxSizing: 'border-box' }}\n            >\n                <Checkbox\n                    onChange={onCheck}\n                    indeterminate={checkStatus.halfChecked}\n                    checked={checkStatus.checked}\n                    style={{ marginRight: 8 }}\n                />\n                <Typography.Text\n                    ellipsis={{ showTooltip: { opts: { style: { wordBreak: 'break-all' } } } }}\n                    style={{ maxWidth: 260 }}\n                >\n                    {data.map(item => item.label).join(' | ')}\n                </Typography.Text>\n            </div>\n        );\n    }, []);\n     \n    return (\n        <Cascader\n            multiple\n            filterTreeNode\n            style={{ width: 320 }}\n            treeData={treeData}\n            placeholder=\"Enter generic or scene to search\"\n            virtualizeInSearch={virtualize}\n            filterRender={filterRender}\n        />\n    );\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Colors in React\nDESCRIPTION: Demonstrates how to customize icon colors using CSS styles and inline styles in a React component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconLikeHeart, IconFlag, IconLock, IconUnlock } from '@douyinfe/semi-icons';\n\n() => (\n    <div>\n        <div style={{ color: '#E91E63' }} >\n            <IconLikeHeart size=\"extra-large\"/>\n            <IconFlag size=\"extra-large\"/>\n        </div>\n        <br/>\n        <div>\n            <IconLock style={{ color: '#6A3AC7' }} size=\"extra-large\" />\n            <IconUnlock style={{ color: '#9C27B0' }} size=\"extra-large\"/>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Focus in Popover Content in React\nDESCRIPTION: Demonstrates how to set initial focus on a specific element within Popover content using initialFocusRef. The content is rendered as a function that receives the focus reference.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, Input, Popover, Space } from '@douyinfe/semi-ui';\n() => {\n    const renderContent = ({ initialFocusRef }) => {\n        return (\n            <div style={{ padding: 12 }}>\n                <Space>\n                    <Button>first focusable element</Button>\n                    <Input ref={initialFocusRef} placeholder=\"focus here\" />\n                </Space>\n            </div>\n        );\n    };\n    return (\n        <Popover content={renderContent} trigger=\"click\">\n            <Button>click me</Button>\n        </Popover>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Component with Grid Snapping\nDESCRIPTION: Example demonstrating the Resizable component with grid snapping functionality. Shows usage of grid and snapGap properties for controlled resizing behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Resizable\n        style={{ marginLeft: '20%', backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n        defaultSize={{\n          width: '60%',\n          height: 300,\n        }}\n        grid={100}\n        snapGap={20}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          snap\n        </div>\n      </Resizable>\n    </div >\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Cards with Semi Design\nDESCRIPTION: Demonstrates how to nest Card components within other Cards, including header extras and title configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n  \n    return (\n        <Card title='Card title' >\n            <Card \n                title='Inner Card title'\n                style={{ marginBottom: 20 }}\n                headerExtraContent={\n                    <Text link>\n                        More\n                    </Text>\n                }\n            >\n                Inner Card content\n            </Card>\n            <Card \n                title='Inner Card title'\n                headerExtraContent={\n                    <Text link>\n                        More\n                    </Text>\n                }\n            >\n                Inner Card content\n            </Card>\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Leaf-Only Selection in Cascader (React/JSX)\nDESCRIPTION: Shows how to use the leafOnly prop in a Cascader component to include only leaf nodes in the selection value. This is useful when you want to restrict selection to the most specific items in a hierarchical structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const [value, setValue] = useState(['impressionism', 'visualArts']);\n    const onChange = value => {\n        setValue(value);\n    };\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }\n    ];\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n            value={value}\n            multiple\n            leafOnly\n            onChange={e => onChange(e)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled State in Cascader\nDESCRIPTION: Shows how to implement disabled state in Cascader component, including examples with and without default values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <div>\n            <Cascader\n                style={{ width: 400 }}\n                treeData={treeData}\n                placeholder=\"Please select\"\n                disabled\n            />\n            <br />\n            <br />\n            <Cascader\n                style={{ width: 400 }}\n                treeData={treeData}\n                placeholder=\"Please select\"\n                defaultValue={['impressionism', 'music', 'Debussy']}\n                filterTreeNode\n                disabled\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Layout Mode in Descriptions\nDESCRIPTION: Shows vertical layout mode with multiple columns and custom styling using Space and Tags.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Space, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        { key: '抖音号', value: 'SemiDesign' },\n        { key: '主播类型', value: '自由主播' },\n        { key: '安全等级', value: '3级' },\n        { key: '垂类标签', value: <Space>\n            <Tag size=\"small\" shape='circle' color='amber'>互联网资讯</Tag>\n            <Tag size=\"small\" shape='circle' color='violet'>编程</Tag>\n        </Space>\n        },\n        { key: '作品数量', value: '88888888' },\n        { key: '认证状态', value: '这是一个很长很长很长很长很长很长很长很长很长的值', span: 3 },\n    ];\n    return (\n        <> \n            <Descriptions layout='vertical' align='plain' data={data} column={4} />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Popover with Custom Components\nDESCRIPTION: Demonstration of using Popover with different types of children components including functional components, class components, and DOM elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { forwardRef } from 'react';\nimport { Popover, Space, Empty } from '@douyinfe/semi-ui';\nimport { IllustrationSuccess, IllustrationSuccessDark } from '@douyinfe/semi-illustrations';\n\nconst style = { border: '2px solid var(--semi-color-border)', paddingLeft: 4, paddingRight: 4, borderRadius: 4 };\n\nconst FCChildren = forwardRef((props, ref) => {\n    return (<span {...props} ref={ref} style={style}>Functional Component</span>);\n});\n\nclass MyComponent extends React.Component {\n    render() {\n        return (<span {...this.props} style={style}>ClassComponent</span>);\n    }\n};\n\nconst content = (\n    <Empty\n        title={'先进的设计 / 研发协作方式'}\n        image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n        description=\"使用 Semi D2C 快速还原 Figma 设计稿，一键转代码\"\n        style={{ width: 400, margin: '0 auto', display: 'flex', padding: 20 }}\n    />\n);\n\nfunction Demo() {\n    return (\n        <Space>\n            <Popover content={content}>\n                <FCChildren />\n            </Popover>\n            <Popover content={content}>\n                <MyComponent />\n            </Popover>\n            <Popover content={content}>\n                <span style={style}>DOM</span>\n            </Popover>\n        </Space>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Switch with Text Labels in React\nDESCRIPTION: 展示带有文本标签的Switch组件，可以通过checkedText和uncheckedText属性设置开关状态的文本显示。注意在size='small'时文本标签功能无效。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch checkedText=\"开\" uncheckedText=\"关\" />\n        <Switch checkedText=\"｜\" uncheckedText=\"〇\" style={{ marginLeft: 5 }} />\n        <br />\n        <br />\n        <Switch defaultChecked checkedText=\"开\" uncheckedText=\"关\" />\n        <Switch defaultChecked checkedText=\"｜\" uncheckedText=\"〇\" style={{ marginLeft: 5 }} />\n        <br />\n        <br />\n        <Switch checkedText=\"开\" uncheckedText=\"关\" size=\"large\" />\n        <Switch checkedText=\"｜\" uncheckedText=\"〇\" size=\"large\" style={{ marginLeft: 5 }} />\n        <br />\n        <br />\n        <Switch defaultChecked checkedText=\"开\" uncheckedText=\"关\" size=\"large\" />\n        <Switch defaultChecked checkedText=\"｜\" uncheckedText=\"〇\" size=\"large\" style={{ marginLeft: 5 }} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Popover Background Color in React using Semi Design\nDESCRIPTION: This snippet shows how to customize the background color and border color of a Popover. It emphasizes the importance of separately declaring backgroundColor and borderColor in the style prop to ensure the arrow matches the customized colors.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div id='popup-parent' style={{ position: 'relative' }}>\n            <Popover\n                content={\n                    <article style={{ padding: 4 }}>\n                        Hi, Semi UI Popover.\n                    </article>\n                }\n                getPopupContainer={() => document.querySelector('#popup-parent')}\n                trigger='custom'\n                visible\n                position='right'\n                showArrow\n                style={{\n                    backgroundColor: 'rgba(var(--semi-blue-4),1)',\n                    borderColor: 'rgba(var(--semi-blue-4),1)',\n                    color: 'var(--semi-color-white)',\n                    borderWidth: 1,\n                    borderStyle: 'solid',\n                }}\n            >\n                <Tag\n                    style={{\n                        backgroundColor: 'rgba(var(--semi-blue-4),1)',\n                        color: 'var(--semi-color-white)'\n                    }}\n                >\n                    Colorful Popover\n                </Tag>\n            </Popover>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Upload Component with File List\nDESCRIPTION: This example demonstrates how to create a disabled Upload component that shows existing files but prevents new uploads. It includes files with different statuses to show how they appear in the disabled state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'first.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n        {\n            uid: '2',\n            name: 'second.png',\n            status: 'validateFail',\n            size: '222KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n    let action = 'https://api.semi.design/upload';\n    return (\n        <>\n            <Upload action={action} disabled defaultFileList={defaultFileList}>\n                <Button icon={<IconUpload />} theme=\"light\" disabled>\n                    点击上传\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Switch with External Labels\nDESCRIPTION: Implementation of Switch with external text labels using Typography component\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Switch, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const [open, setOpen] = useState();\n    const { Title } = Typography;\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Title heading={6} style={{ margin: 8 }}>\n                {open ? 'Open' : 'Closed'}\n            </Title>\n            <Switch checked={open} onChange={setOpen} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Avatar Tags in Semi Design\nDESCRIPTION: Shows how to create tags with avatars, controlling avatar shape (square or circle) and combining with other tag properties like size and closable.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const src =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png';\n    return (\n        <Space vertical align='start'>\n            <Tag avatarSrc={src}>Peter Behrens</Tag>\n            <Tag avatarSrc={src} size=\"large\">\n                Peter Behrens\n            </Tag>\n            <Tag avatarSrc={src} size=\"large\" closable={true}>\n                Peter Behrens\n            </Tag>\n            <Tag avatarSrc={src} avatarShape=\"circle\">\n                Peter Behrens\n            </Tag>\n            <Tag avatarSrc={src} avatarShape=\"circle\" size=\"large\">\n                Peter Behrens\n            </Tag>\n            <Tag avatarSrc={src} avatarShape=\"circle\" size=\"large\" closable={true}>\n                Peter Behrens\n            </Tag>\n        </Space>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Navigation Components in Semi Design\nDESCRIPTION: This snippet enumerates navigation-related components in the Semi Design library, including anchors, back-to-top buttons, breadcrumbs, navigation menus, pagination, steps, tabs, and tree controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nAnchor 锚点,\nBackTop 回到顶部,\nBreadcrumb 面包屑,\nNavigation 导航,\nPagination 翻页器,\nSteps 步骤,\nTabs 标签栏,\nTree 树形控件\n```\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkboxes in React\nDESCRIPTION: Shows how to create disabled Checkboxes in both checked and unchecked states.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Checkbox defaultChecked={false} disabled aria-label=\"Checkbox demo\">UnChecked Disabled</Checkbox>\n        <br />\n        <Checkbox defaultChecked disabled aria-label=\"Checkbox demo\">Checked Disabled</Checkbox>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled Properties in Semi-UI Navigation Component (JSX)\nDESCRIPTION: Example of using uncontrolled properties in a Semi-UI Nav component, including defaultSelectedKeys, defaultOpenKeys, and defaultIsCollapsed. This demonstrates setting initial state without needing to manage state updates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconUserGroup, IconSetting } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                defaultOpenKeys={['job']}\n                defaultSelectedKeys={['Entry Information']}\n                defaultIsCollapsed={true}\n                bodyStyle={{ height: 320 }}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                    {\n                        itemKey: 'union-management',\n                        text: 'Union Management',\n                        icon: <IconUserGroup />,\n                        items: ['Announcement Settings', 'Union Query', 'Entry Information']\n                    },\n                    {\n                        text: 'Task Platform',\n                        icon: <IconSetting />,\n                        itemKey: 'job',\n                        items: ['Task Management', 'User Task Query'],\n                    },\n                ]}\n                header={{\n                    logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                    text: 'Live Platform'\n                }}\n                footer={{\n                    collapseButton: true\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 配置Select组件的前缀、后缀和清除按钮\nDESCRIPTION: 展示如何通过prefix和suffix属性为Select组件添加前缀和后缀，以及通过showClear和showArrow控制清除按钮和下拉箭头的显示。前缀后缀可以是文本或ReactNode。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\nimport { IconVigoLogo, IconGift } from '@douyinfe/semi-icons';\n\n() => (\n    <>\n        <Select style={{ width: '320px' }} defaultValue={'ulikecam'} prefix={<IconVigoLogo />} showClear={true}>\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            style={{ width: '320px' }}\n            defaultValue={'ulikecam'}\n            prefix={<IconVigoLogo />}\n            suffix={<IconGift />}\n            showArrow={false}\n        >\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Date and Time Selection in DatePicker\nDESCRIPTION: Shows how to implement date and time selection by setting type to 'dateTime', with options for default mode or cycled mode for time selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <h4>Default date and time selection</h4>\n                <DatePicker type=\"dateTime\" />\n                <br />\n                <br />\n                <h4>Turn on cycled mode</h4>\n                <DatePicker type=\"dateTime\" timePickerOpts={{ scrollItemProps: { mode: \"wheel\", cycled: true } }} />\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Route Objects in React\nDESCRIPTION: Demonstrates how to use route objects to define Breadcrumb items, including support for icons and custom links.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Breadcrumb\n            routes={['Semi-ui', 'Breadcrumb', 'Default']}\n        />\n        <br/>\n        <Breadcrumb\n            routes={\n                [\n                    {\n                        path: '/', \n                        Href: '/', \n                        icon: <IconHome />\n                    },\n                    { \n                        path: '/breadcrumb', \n                        href: '/en-US/navigation/breadcrumb', \n                        name: 'breadcrumb', \n                        icon: <IconArticle />\n                    },\n                    'with icon'\n                ]\n            }\n        />\n        <br/>\n        <Breadcrumb\n            routes={['Index', 'This is a very long level', 'Detail']}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Handle Customization Type Definitions\nDESCRIPTION: Defines TypeScript interfaces for customizing resize handles, including handle nodes, styles, and class names for each direction and corner.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\ntype HandleNode = {\n  left: ReactNode;\n  right: ReactNode;\n  top: ReactNode;\n  bottom: ReactNode;\n  topLeft: ReactNode;\n  topRight: ReactNode;\n  bottomLeft: ReactNode;\n  bottomRight: ReactNode;\n}\n\ntype HandleStyle = {\n  left: React.CSSProperties;\n  right: React.CSSProperties;\n  top: React.CSSProperties;\n  bottom: React.CSSProperties;\n  topLeft: React.CSSProperties;\n  topRight: React.CSSProperties;\n  bottomLeft: React.CSSProperties;\n  bottomRight: React.CSSProperties;\n}\n\ntype HandleClass = {\n  left: string;\n  right: string;\n  top: string;\n  bottom: string;\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Input Mode\nDESCRIPTION: Demonstrates password input mode which masks the input content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input mode=\"password\" defaultValue=\"123456\"></Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Expand Icon in Semi Design Tree Component\nDESCRIPTION: This example shows how to customize the expand/collapse icon in Tree component using the expandIcon prop. The custom icon can be either a ReactNode or a function that returns a ReactNode based on expansion state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const treeData = [\n        {\n            label: '亚洲',\n            key: 'yazhou',\n            children: [\n                {\n                    label: '中国',\n                    key: 'zhongguo',\n                    children: [\n                        {\n                            label: '北京',\n                            key: 'beijing',\n                        },\n                        {\n                            label: '上海',\n                            key: 'shanghai',\n                        },\n                    ],\n                },\n                {\n                    label: '日本',\n                    key: 'riben',\n                },\n            ],\n        },\n        {\n            label: '北美洲',\n            key: 'beimeizhou',\n        },\n    ];\n    const expandIconFunc = useCallback((props) => {\n        const { expanded, onClick, className } = props;\n        if (expanded) {\n        return <IconMinus size=\"small\" className={className} onClick={onClick}/>\n        } else {\n        return <IconPlus size=\"small\" className={className} onClick={onClick}/>\n        }\n    });\n    const style = {\n        width: 260,\n        height: 200,\n        border: '1px solid var(--semi-color-border)'\n    };\n\n  return (\n    <>\n      <p>expandIcon 是  ReactNode</p>\n      <Tree\n        style={{ width: 300}}\n        expandIcon={<IconChevronDown size=\"small\" className='testCls'/>}\n        multiple\n        defaultExpandedKeys={['yazhou']}\n        treeData={treeData}\n        style={style}\n      />\n      <br />\n      <p>expandIcon 是函数 </p>\n      <Tree\n        style={{ width: 300}}\n        multiple\n        expandIcon={expandIconFunc}\n        defaultExpandedKeys={['yazhou']}\n        treeData={treeData}\n        style={style}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Resizable Component\nDESCRIPTION: Demonstrates how to create a controlled Resizable component using the size prop and onChange callback. Includes a button that programmatically increases the component's size.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [size, setSize] = useState({ width: 200, height: 100 });\n  const onButtonClick = (() => {\n    let realSize = { width: size.width + 10, height: size.height + 10 };\n    setSize(realSize);\n  })\n  const onChange = (s) => { setSize(s); }\n\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Button onClick={onButtonClick}>set += 10</Button>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', marginTop: '10px' }}\n        size={size}\n        onChange={onChange}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          Control Width/Height\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Resizable Component in React\nDESCRIPTION: Demonstrates basic usage of the Resizable component with default size and resize event callbacks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [text, setText] = useState('Drag edge to resize');\n    const opts_1 = {\n        content: 'resize start',\n        duration: 1,\n        stack: true,\n    };\n    const opts_2 = {\n        content: 'resize end',\n        duration: 1,\n        stack: true,\n    };\n    return (\n        <div style={{ width: '500px' }}>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                defaultSize={{\n                    width: '60%',\n                    height: 300,\n                }}\n                onChange={() => {\n                    setText('resizing');\n                }}\n                onResizeStart={() => Toast.info(opts_1)}\n                onResizeEnd={() => {\n                    Toast.info(opts_2);\n                    setText('Drag edge to resize');\n                }}\n            >\n                <div style={{ marginLeft: '20%' }}>{text}</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AvatarGroup Implementation in React\nDESCRIPTION: Demonstrates how to use the AvatarGroup component to display multiple avatars as a group. This example shows avatars with different colors and initial letters.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar, AvatarGroup } from '@douyinfe/semi-ui';\n\nimport React from 'react';\nimport { AvatarGroup, Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AvatarGroup>\n            <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n            <Avatar alt='Caroline Xiao'>CX</Avatar>\n            <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n            <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n            <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n        </AvatarGroup>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Semi Design Theme in Remix\nDESCRIPTION: Example of applying a custom Semi Design theme in a Remix project by importing the theme's CSS file directly in root.tsx.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// root.tsx\n+ import ThemeStyle from \"@semi-bot/semi-theme-doucreator/semi.min.css\";\n\n export const links = () => {\n   return [\n-    ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),     \n+    { rel: \"stylesheet\", href: ThemeStyle },\n   ];\n };\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Avatar Count with maxCount\nDESCRIPTION: Shows how to limit the number of displayed avatars using the maxCount property. When there are more avatars than the specified count, the remaining avatars are collapsed into a +N indicator.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar, AvatarGroup } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AvatarGroup maxCount={3}>\n            <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n            <Avatar alt='Caroline Xiao'>CX</Avatar>\n            <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n            <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n            <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n        </AvatarGroup>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Resize Ratio in Resizable Component\nDESCRIPTION: Demonstrates how to set a resize ratio using the 'ratio' prop to control the relationship between drag distance and actual size change.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div style={{ width: '500px', height: '60%' }}>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                ratio={2}\n                defaultSize={{\n                    width: 200,\n                    height: 200,\n                }}\n            >\n                <div style={{ marginLeft: '20%' }}>ratio=2</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Slider Component in React\nDESCRIPTION: 展示如何创建一个受控的 Slider 组件，滑块位置由 value 控制。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider, Button } from '@douyinfe/semi-ui';\n\nclass ControllSlider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: 10 };\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    changeValue() {\n        this.setState({ value: this.state.value + 10 });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.changeValue} style={{ marginRight: 20 }}>点击改变value值</Button>\n                <br/>\n                <br/>\n                <Slider value={this.state.value}></Slider>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Arrow Alignment Configuration\nDESCRIPTION: This snippet demonstrates how to control the alignment of the Tooltip's arrow using the `arrowPointAtCenter` prop. By default, the arrow points to the center of the child element. Setting `arrowPointAtCenter` to `false` aligns the arrow with the edge of the child element. It shows two tooltips, one with default alignment and one with edge alignment.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <>\n            <div>\n                <Tooltip\n                    position='topLeft'\n                    content='semi design tooltip'>\n                    <Button type='secondary' style={{ marginRight: 8 }}>指向元素中心</Button>\n                </Tooltip>\n            </div>\n\n            <div style={{ marginTop: 20 }}>\n                <Tooltip\n                    content='semi design tooltip'\n                    arrowPointAtCenter={false}\n                    position='topLeft'\n                >\n                    <Button type='secondary' style={{ marginRight: 8, width: 120 }}>边缘对齐</Button>\n                </Tooltip>\n            </div>\n        </>\n    );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Highlight Component\nDESCRIPTION: Demonstrates the basic usage of the Highlight component. It highlights specified keywords in a source string by setting the searchWords array and sourceString props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const sourceString = '从 Semi Design 到 Any Design  快速定义你的设计系统，并应用在设计稿和代码中';\n    const searchWords = ['设计系统', 'Semi Design'];\n    \n    return (<h2>\n        <Highlight sourceString={sourceString} searchWords={searchWords} />\n    </h2>);\n};\n```\n\n----------------------------------------\n\nTITLE: Card with Customized Content using Card.Meta in Semi Design\nDESCRIPTION: Shows how to create a card with highly customized content using Card.Meta. It includes a cover image, custom title with avatar, description, and footer with buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Avatar, Space, Button, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Meta } = Card;\n    const { Text } = Typography;\n\n    return (\n        <Card\n            style={{ maxWidth: 360 }}\n            title={\n                <Meta \n                    title=\"Semi Doc\" \n                    description=\"Easily manage your project icons and easily upload, update and share a series of project icons.\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n            }\n            headerExtraContent={\n                <Text link>\n                    More\n                </Text>\n            }\n            cover={ \n                <img \n                    alt=\"example\" \n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo.jpeg\" \n                />\n            }\n            footerLine={ true }\n            footerStyle={{ display: 'flex', justifyContent: 'flex-end' }}\n            footer={\n                <Space>\n                    <Button theme='borderless' type='primary'>Featured Case</Button>\n                    <Button theme='solid' type='primary'>Start</Button>\n                </Space>\n            }\n        >\n            Semi Design is a design system developed and maintained by IES-FE & IES-UED. \n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 延迟显示的Spin组件 - React\nDESCRIPTION: 展示了如何设置Spin组件的延迟显示。通过delay属性设置延迟时间，spinning属性控制加载状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Spin, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [loading, toggleLoading] = useState(false);\n\n    const toggle = () => {\n        toggleLoading(!loading);\n    };\n    return (\n        <div>\n            <Button onClick={toggle} style={{ marginRight: 20 }}>\n                延迟显示的spin\n            </Button>\n            <Spin delay={1000} spinning={loading}></Spin>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Size-Configurable SideSheet Implementation\nDESCRIPTION: Demonstrates SideSheet with configurable sizes (small, medium, large) for left/right placements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, RadioGroup, Radio, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const change = () => {\n        setVisible(!visible);\n    };\n    const [size, setSize] = useState('small');\n    const changeSize = e => {\n        setSize(e.target.value);\n    };\n    return (\n        <>\n            <RadioGroup onChange={changeSize} value={size}>\n                <Radio value={'small'}>small</Radio>\n                <Radio value={'medium'}>medium</Radio>\n                <Radio value={'large'}>large</Radio>\n            </RadioGroup>\n            <br />\n            <br />\n            <Button onClick={change}>Open SideSheet</Button>\n            <SideSheet title=\"SideSheet\" visible={visible} onCancel={change} size={size}>\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 水平排列的CheckboxGroup\nDESCRIPTION: 通过设置direction属性为horizontal实现CheckboxGroup内的选项水平排列，使布局更加灵活。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup } from '@douyinfe/semi-ui';\n\n() => {\n    const options = [\n        { label: '抖音', value: 'abc' },\n        { label: '火山', value: 'hotsoon' },\n        { label: '皮皮虾', value: 'pipixia' },\n        { label: '今日头条', value: 'toutiao' }\n    ];\n    return (\n        <CheckboxGroup options={options} direction='horizontal' aria-label=\"CheckboxGroup 示例\" />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Collapse with Extra Content\nDESCRIPTION: Shows how to add extra content in the right-upper corner of collapse panels using the extra prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse, Tag } from '@douyinfe/semi-ui';\nimport { IconCopy } from '@douyinfe/semi-icons';\n\n() => (\n    <Collapse>\n        <Collapse.Panel header=\"This is panel header 1\" itemKey=\"1\" extra=\"1234\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 2\" itemKey=\"2\" extra={<IconCopy />}>\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel\n            header=\"This is panel header 3\"\n            itemKey=\"3\"\n            extra={\n                <Tag color=\"violet\" style={{ margin: 0 }}>\n                    {' '}\n                    Recommended{' '}\n                </Tag>\n            }\n        >\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Closeable Tabs in Card Style with Semi-Design\nDESCRIPTION: This example shows how to implement closeable tabs using the card style and closable property. It manages a list of tab items in state and provides a close function that removes the selected tab from the list when the close icon is clicked.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabList: [\n                { tab: 'Doc', itemKey: '1', text: 'Doc', closable: true },\n                { tab: 'Quick Start', itemKey: '2', text: 'Quick Start', closable: true },\n                { tab: 'Help', itemKey: '3', text: 'Help' },\n            ],\n        };\n    }\n    close(key) {\n        const newTabList = [...this.state.tabList];\n        const closeIndex = newTabList.findIndex(t => t.itemKey === key);\n        newTabList.splice(closeIndex, 1);\n        this.setState({ tabList: newTabList });\n    }\n    render() {\n        return (\n            <Tabs type=\"card\" defaultActiveKey=\"1\" onTabClose={this.close.bind(this)}>\n                {this.state.tabList.map(t => (\n                    <TabPane closable={t.closable} tab={t.tab} itemKey={t.itemKey} key={t.itemKey}>\n                        {t.text}\n                    </TabPane>\n                ))}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Themed UserGuide Implementation\nDESCRIPTION: Shows how to implement UserGuide with different themes (default/primary) using the theme property in popup mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button onClick={showDialog}>Start Guide</Button>\n            <br />\n            <br />\n            <Space>\n                <Switch id={'theme-demo-1'} defaultChecked={true}></Switch>\n                <Tag id={'theme-demo-2'}> Default Tag </Tag>\n                <Button id={'theme-demo-3'}>Confirm</Button>\n            </Space>\n            <UserGuide\n                mode=\"popup\"\n                mask={true}\n                visible={visible}\n                theme=\"primary\"\n                steps={[\n                    {\n                        target: document.querySelector('#theme-demo-1'),\n                        title: \"Beginner's Guide\",\n                        description: 'Hello ByteDancer!',\n                        position: 'bottom',\n                    },\n                    {\n                        target: document.querySelector('#theme-demo-2'),\n                        title: 'Switch',\n                        description: 'This is a Semi Switch',\n                        position: 'bottom',\n                    },\n                    {\n                        target: document.querySelector('#theme-demo-3'),\n                        title: 'Button',\n                        description: 'This is a Semi Button',\n                        position: 'bottom',\n                    },\n                ]}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('引导完成');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('跳过引导');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Table Skeleton\nDESCRIPTION: Implementation of a table skeleton using Title and Paragraph components to create placeholder content for table cells.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Table } from '@douyinfe/semi-ui';\n\n() => {\n    const data = {\n        columns: [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n            },\n            {\n                title: 'Age',\n                dataIndex: 'age',\n            },\n            {\n                title: 'Address',\n                dataIndex: 'address',\n            },\n        ],\n        content: [\n            {\n                key: '1',\n                name: 'John Brown',\n                age: 32,\n                address: 'New York No. 1 Lake Park, New York No. 1 Lake Park',\n            },\n            {\n                key: '2',\n                name: 'Jim Green',\n                age: 42,\n                address: 'London No. 1 Lake Park',\n            },\n            {\n                key: '3',\n                name: 'Joe Black',\n                age: 32,\n                address: 'Sidney No. 1 Lake Park',\n            },\n            {\n                key: '4',\n                name: 'Disabled User',\n                age: 99,\n                address: 'Sidney No. 1 Lake Park',\n            },\n        ],\n    };\n\n    const skData = {\n        columns: [1, 2, 3].map(key => {\n            const item = {};\n            item.title = <Skeleton.Title style={{ width: '0' }} />;\n            item.dataIndex = key;\n            return item;\n        }),\n        dataSource: [1, 2, 3, 4].map(key => {\n            const item = {};\n            item.key = key;\n            [1, 2, 3].forEach(i => {\n                const width = 50 * i;\n                item[i] = <Skeleton.Paragraph style={{ width: width }} rows={1} />;\n            });\n            return item;\n        }),\n    };\n\n    const placeholder = (\n        <div style={{ position: 'relative' }}>\n            <Table\n                style={{ backgroundColor: 'var(--semi-color-bg-1)' }}\n                columns={skData.columns}\n                dataSource={skData.dataSource}\n                pagination={false}\n            />\n            <div style={{ position: 'absolute', left: 0, right: 0, top: 0, bottom: 0 }}></div>\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <div>\n                <Table columns={data.columns} dataSource={data.content} pagination={false} />\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Animation in React\nDESCRIPTION: Example of integrating the Animation class into a React component. It shows how to initialize the animation in the constructor, start it in componentDidMount, and clean up in componentWillUnmount.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation/README.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Animation } from '@douyinfe/semi-animation';\nimport { Component } from 'react';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: 0 };\n\n        this.animation = new Animation({\n            from: { value: 0 },\n            to: { value: 1 },\n        });\n\n        this.animation.on('frame', props => {\n            this.setState({ value: props.value.toFixed(2) });\n        });\n    }\n\n    componentDidMount() {\n        this.animation.start();\n    }\n\n    componentWillUnmount() {\n        this.animation.destroy();\n    }\n\n    render() {\n        const { value } = this.state;\n\n        return <div style={{ display: 'inline-block', transform: `scale(${value})` }}>{value}</div>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TagInput with Prefix and Suffix Content\nDESCRIPTION: Demonstrates how to add prefix and suffix content to TagInput, which can be text or React Node elements like icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\nimport { IconVigoLogo, IconGift } from '@douyinfe/semi-icons';\n\n() => (\n    <>\n        <TagInput prefix={<IconVigoLogo />} showClear/>\n        <br/><br/>\n        <TagInput prefix=\"Prefix\" showClear/>\n        <br/><br/>\n        <TagInput suffix={<IconGift />}/>\n        <br/><br/>\n        <TagInput suffix=\"Suffix\" showClear/>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Table Placeholder with Skeleton Components\nDESCRIPTION: Demonstrates how to create a placeholder for a table using Skeleton components, with customized columns and rows to mimic table structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Table } from '@douyinfe/semi-ui';\n\n() => {\n    const data = {\n        columns: [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n            },\n            {\n                title: 'Age',\n                dataIndex: 'age',\n            },\n            {\n                title: 'Address',\n                dataIndex: 'address',\n            },\n        ],\n        content: [\n            {\n                key: '1',\n                name: 'John Brown',\n                age: 32,\n                address: 'New York No. 1 Lake Park, New York No. 1 Lake Park',\n            },\n            {\n                key: '2',\n                name: 'Jim Green',\n                age: 42,\n                address: 'London No. 1 Lake Park',\n            },\n            {\n                key: '3',\n                name: 'Joe Black',\n                age: 32,\n                address: 'Sidney No. 1 Lake Park',\n            },\n            {\n                key: '4',\n                name: 'Disabled User',\n                age: 99,\n                address: 'Sidney No. 1 Lake Park',\n            },\n        ],\n    };\n\n    const skData = {\n        columns: [1, 2, 3].map(key => {\n            const item = {};\n            item.title = <Skeleton.Title style={{ width: '0' }} />;\n            item.dataIndex = `${key}`;\n            return item;\n        }),\n        dataSource: [1, 2, 3, 4].map(key => {\n            const item = {};\n            item.key = key;\n            [1, 2, 3].forEach(i => {\n                const width = 50 * i;\n                item[i] = <Skeleton.Paragraph style={{ width: width }} rows={1} />;\n            });\n            return item;\n        }),\n    };\n\n    const placeholder = (\n        <div style={{ position: 'relative' }}>\n            <Table\n                style={{ backgroundColor: 'var(--semi-color-bg-1)' }}\n                columns={skData.columns}\n                dataSource={skData.dataSource}\n                pagination={false}\n            />\n            <div style={{ position: 'absolute', left: 0, right: 0, top: 0, bottom: 0 }}></div>\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <div>\n                <Table columns={data.columns} dataSource={data.content} pagination={false} />\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using ARIA Labels with Icons in React\nDESCRIPTION: Demonstrates how to add ARIA labels to icons for improved accessibility in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconHome } from '@douyinfe/semi-icons';\n\n() => <IconHome aria-label=\"back to homepage\" />;\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Closable Tags and State Management\nDESCRIPTION: Demonstrates how to implement closable tags within a TagGroup component, handling tag removal through state management and the onTagClose callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { TagGroup } from '@douyinfe/semi-ui';\n\n() => {\n    const defaultList = [\n        { tagKey: '1', color: 'light-blue', children: 'Douyin', closable: true, },\n        { tagKey: '3', color: 'amber', children: 'Jianying', closable: true, },\n        { tagKey: '3', color: 'violet', children: 'Faceu', closable: true, },\n        { tagKey: '4', color: 'white', children: 'Lark', closable: true, },\n    ];\n\n    const [tagList, setTagList] = useState(defaultList);\n\n    const tagListClick = (value, e, tagKey) => {\n        const newTagList = [...tagList];\n        const closeTagIndex = newTagList.findIndex(t => t.tagKey === tagKey);\n        newTagList.splice(closeTagIndex, 1);\n        setTagList(newTagList);\n    };\n\n    return (\n        <div style={ {\n            backgroundColor: 'var(--semi-color-fill-0)',\n            height: 35,\n            width: 300,\n            display: 'flex',\n            alignItems: 'center',\n            padding: '0 10px',\n            marginBottom: 30,\n        }}>\n            <TagGroup\n                maxTagCount={3}\n                style={ {\n                    display: 'flex',\n                    alignItems: 'center',\n                    width: 350,\n                }}\n                tagList={tagList}\n                size='large'\n                onTagClose={tagListClick}\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Empty Component\nDESCRIPTION: Shows how to import the Empty component from the Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Empty } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Scroll Mode Implementation\nDESCRIPTION: Shows how to implement OverflowList in scroll mode with custom item rendering and overflow handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.map(item => <Tag style={{ marginRight: 8, marginLeft: 8, flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }} key={item.key}>+{item.length}</Tag>);\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <span key={item.key} className=\"item-cls\">\n                <Tag color=\"blue\" style={{ marginRight: 8, flex: '0 0 auto' }}>\n                    {item.icon}\n                    {item.key}\n                </Tag>\n            </span>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList\n                    items={items}\n                    renderMode=\"scroll\"\n                    overflowRenderer={renderOverflow}\n                    visibleItemRenderer={renderItem}\n                />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default File List in React Upload Component\nDESCRIPTION: Shows how to set a default file list using the 'defaultFileList' prop. It includes examples of successful and failed uploads, and demonstrates how to enable preview for default files.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n        {\n            uid: '2',\n            name: 'dyBag2.jpeg',\n            status: 'uploadFail',\n            size: '222KB',\n            preview: true,\n            fileInstance: new File([new ArrayBuffer(2048)], 'dyBag2.jpeg', { type: 'image/png' }),\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg',\n        },\n    ];\n\n    return (\n        <>\n            <Upload action={action} defaultFileList={defaultFileList}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    点击上传\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload in React Upload Component\nDESCRIPTION: Shows how to enable multiple file selection for upload using the 'multiple' prop in the Upload component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    return (\n        <Upload action={action} multiple>\n            <Button icon={<IconUpload />} theme=\"light\">\n                点击上传\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Screen Modal in Semi Design\nDESCRIPTION: This example demonstrates how to create a full-screen modal using the fullScreen prop. It uses React Hooks (useState) to manage the modal's visibility state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const onClose = () => {\n        setVisible(false);\n    };\n    return (\n        <>\n            <Button onClick={() => setVisible(true)}>打开全屏弹窗</Button>\n            <Modal title=\"全屏对话框标题\" fullScreen visible={visible} onOk={onClose} onCancel={onClose}>\n                <p>This is a full screen modal</p>\n                <p>More content...</p>\n            </Modal>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Banner Usage with Toggle Functionality\nDESCRIPTION: Demonstrates a basic implementation of the Banner component with a toggle button to show/hide it. The example uses a Layout component to demonstrate banner positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Banner, Layout, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const changeVisible = () => {\n        setVisible(!visible);\n    };\n    const { Header, Footer, Content } = Layout;\n    const banner = (\n        <Banner \n            onClose={changeVisible}\n            description=\"A pre-released version is available\"\n        />\n    );\n    return (\n        <>\n            <Layout className='components-layout-demo banner-basic'>\n                <Header>Header</Header>\n                {visible? banner : null}\n                <Content>Content</Content>\n                <Footer>Footer</Footer>\n            </Layout>\n            <Button\n                onClick={changeVisible}\n                style={{\n                    display: 'block',\n                    width: '120px',\n                    margin: '0 auto'\n                }}\n            >\n                { visible ? 'Hide Banner' : 'Show Banner' }\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Size Variants of TagInput Component\nDESCRIPTION: Demonstrates different size variants of the TagInput component: small, default, and large.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <TagInput size='small' placeholder='small'/>\n        <br/><br/>\n        <TagInput placeholder='default'/>\n        <br/><br/>\n        <TagInput size='large' placeholder='large'/>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Row Display Description Component\nDESCRIPTION: Demonstrates row display mode with different sizes (small, medium, large) and custom icon integration.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions } from '@douyinfe/semi-ui';\nimport { IconArrowUp } from '@douyinfe/semi-icons';\n\n() => {\n    const data = [\n        { key: 'Actual Users', value: '1,480,000' },\n        {\n            key: '7-day Rentention',\n            value: (\n                <span>\n                    98%\n                    <IconArrowUp size=\"small\" style={{ color: 'red', marginLeft: '4px' }} />\n                </span>\n            ),\n        },\n        { key: 'Security Level', value: 'III' },\n    ];\n    const style = {\n        boxShadow: 'var(--semi-shadow-elevated)',\n        backgroundColor: 'var(--semi-color-bg-2)',\n        borderRadius: '4px',\n        padding: '10px',\n        marginRight: '20px',\n        width: '600px',\n    };\n    return (\n        <div>\n            <Descriptions data={data} row size=\"small\" style={style} />\n            <br />\n            <Descriptions data={data} row style={style} />\n            <br />\n            <Descriptions data={data} row size=\"large\" style={style} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customized Timeline Nodes\nDESCRIPTION: Example of customizing timeline nodes with custom icons, colors, and styles\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\nimport { IconAlertTriangle } from '@douyinfe/semi-icons';\n\n() => (\n    <Timeline>\n        <Timeline.Item time=\"2019-07-14 10:35\">默认样式的节点</Timeline.Item>\n        <Timeline.Item time=\"2019-06-13 16:17\" dot={<IconAlertTriangle />} type=\"warning\">自定义图标</Timeline.Item>\n        <Timeline.Item time=\"2019-05-14 18:34\" color=\"pink\">自定义节点颜色</Timeline.Item>\n        <Timeline.Item time=\"2019-04-10 12:20\">\n            <span style={{ fontSize: '18px' }}>自定义节点样式</span>\n        </Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Tag Type Variations with Icons\nDESCRIPTION: Demonstrates the three tag types (light, ghost, solid) with prefix and suffix icons, showing different styling combinations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\nimport { IconGithubLogo, IconSemiLogo } from '@douyinfe/semi-icons';\n\n() => (\n    <Space wrap>\n        <Tag\n            color='light-blue'\n            prefixIcon={<IconGithubLogo />}\n            size='large'\n            shape='circle'\n            type='light'\n        >\n            Semi Design Light Tag\n        </Tag>\n        <Tag\n            color='cyan'\n            size='large'\n            shape='circle'\n            suffixIcon={<IconSemiLogo />}\n            type='light'\n        >\n            D2C: figma to code in one click</Tag>\n        <Tag\n            color='light-blue'\n            prefixIcon={<IconGithubLogo />}\n            size='large'\n            shape='circle'\n            type='ghost'\n        >\n            Semi Design Ghost Tag\n        </Tag>\n        <Tag\n            color='cyan'\n            size='large'\n            shape='circle'\n            type='ghost'\n            suffixIcon={<IconSemiLogo />}\n        >\n            D2C: figma to code in one click</Tag>\n        <Tag\n            color='light-blue'\n            prefixIcon={<IconGithubLogo />}\n            size='large'\n            shape='circle'\n            type='solid'\n        >\n            Semi Design Solid Tag\n        </Tag>\n        <Tag\n            color='cyan'\n            size='large'\n            shape='circle'\n            type='solid'\n            suffixIcon={<IconSemiLogo />}\n        >\n            D2C: figma to code in one click</Tag>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Input Component with Add-on Text in React\nDESCRIPTION: Shows how to add text before or after the Input component using addonBefore and addonAfter properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input addonBefore=\"http://\" addonAfter=\".com\" />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining TriggerRenderProps Interface for Select Component in TypeScript\nDESCRIPTION: TypeScript interface definition for the triggerRender props in the Select component. It describes the parameters passed to the custom trigger renderer function including current values, input value, and handler functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TriggerRenderProps {\n  value: array<object> // 当前所有已选中的options\n  inputValue: string; // 当前input框的输入值\n  onSearch: (inputValue: string) => void; // 用于更新 input框值的函数，当你在triggerRender自定义的Input组件值更新时你应该调用该函数，用于向Select内部同步状态。注意 filter 需同时设为true, v2.32 提供\n  onRemove: (option: object) => void; // 用于移除单个已选项，option至少需带有 label、value 两项，v2.32提供\n  onClear: () => void; // 用于清空值的函数\n  disabled: boolean; // 是否禁用Select\n  placeholder: string; // Select的placeholder\n  componentProps: object // 所有用户传给Select的props\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Pagination - React/JSX\nDESCRIPTION: Shows how to create a disabled pagination component\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <Pagination total={30} disabled style={{ marginBottom: 12 }}></Pagination>\n);\n```\n\n----------------------------------------\n\nTITLE: 周选择 DatePicker - React\nDESCRIPTION: 使用 dateRange 类型结合 startDateOffset 和 endDateOffset 实现周选择、双周选择等功能。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const handleChange = date => {\n        console.log('date changed', date);\n    };\n\n    return (\n        <div>\n            <h4>选择自然周</h4>\n            <DatePicker\n                style={{ width: 260 }}\n                type=\"dateRange\"\n                weekStartsOn={1}\n                startDateOffset={date => dateFns.startOfWeek(date, { weekStartsOn: 1 })}\n                endDateOffset={date => dateFns.endOfWeek(date, { weekStartsOn: 1 })}\n                onChange={handleChange}\n            />\n            <br />\n            <br />\n            <h4>选择双周</h4>\n            <DatePicker\n                style={{ width: 260 }}\n                type=\"dateRange\"\n                weekStartsOn={1}\n                startDateOffset={date => dateFns.startOfWeek(date, { weekStartsOn: 1 })}\n                endDateOffset={date => dateFns.add(dateFns.endOfWeek(date, { weekStartsOn: 1 }), { days: 7 })}\n                onChange={handleChange}\n            />\n            <br />\n            <br />\n            <h4>选择当前日和后6日</h4>\n            <DatePicker\n                style={{ width: 260 }}\n                type=\"dateRange\"\n                weekStartsOn={1}\n                endDateOffset={date => dateFns.add(date, { days: 6 })}\n                onChange={handleChange}\n            />\n            <br />\n            <br />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Additional Animations in React\nDESCRIPTION: Demonstrates how to add animation effects to avatar borders and content using 'borderMotion' and 'contentMotion' props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n()=>{\n    return <div>\n\n        <Avatar color=\"amber\" border={true} style={{marginRight:'8px'}} borderMotion={true} contentMotion={true}>T</Avatar>\n\n        <Avatar color=\"amber\" border={true}  size={\"large\"} style={{marginRight:'8px'}} borderMotion={true} contentMotion={true}>T</Avatar>\n\n        <Avatar color=\"amber\" border={true} size={\"extra-large\"} style={{marginRight:'8px'}} borderMotion={true} contentMotion={true}>T</Avatar>\n    \n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Component with Extra Information in Semi Design\nDESCRIPTION: Shows how to add extra information to a Radio component using the 'extra' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio } from '@douyinfe/semi-ui';\n\n\n() => (\n    <Radio extra=\"Semi Design is a design system developed and maintained by IES Front-end Team and UED Team\" aria-label=\"Radio demo\" name=\"demo-radio-extra\">\n        Semi Design\n    </Radio>\n);\n```\n\n----------------------------------------\n\nTITLE: Customized BackTop Styling in React\nDESCRIPTION: Shows how to customize the BackTop component with custom styles and an icon. Includes custom positioning, colors, and shape modifications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/backtop/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { BackTop } from '@douyinfe/semi-ui';\nimport { IconArrowUp } from '@douyinfe/semi-icons';\n\nclass Custom extends React.Component {\n    target() {\n        return document.querySelector('.scroll-wrapper');\n    }\n\n    render() {\n        const style = {\n            height: 30,\n            width: 30,\n            borderRadius: '100%',\n            backgroundColor: '#0077fa',\n            color: '#fff',\n            paddingTop: 5,\n            bottom: 100,\n        };\n\n        return (\n            <div>\n                <span>\n                    Scroll down to see the bottom-right <span style={{ color: '#0077fa' }}>blue circular</span> button.\n                </span>\n                <BackTop style={style}>\n                    <IconArrowUp />\n                </BackTop>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 基本用法示例 - React\nDESCRIPTION: 展示了Spin组件的基本用法。创建一个简单的加载器，并添加一些说明文字。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ marginLeft: 30 }}>\n        <div style={{ marginBottom: 10 }}>A basic spin.</div>\n        <Spin />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Format DatePicker\nDESCRIPTION: Example of customizing the display format of the DatePicker using the format prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker format=\"yyyy-MM-dd HH:mm\" type=\"dateTime\" defaultValue={new Date()} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cards with Tabs Integration\nDESCRIPTION: Demonstrates how to integrate Tabs component within Cards for tabbed content display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Tabs, TabPane } from '@douyinfe/semi-ui';\n\nfunction demo() {\n    return (\n        <Card title='Card title'>\n            <Tabs \n                type=\"line\" \n                style={{\n                    marginTop: -20,\n                    marginBottom: -20\n                }}\n            >\n                <TabPane tab=\"Tab 1\" itemKey=\"1\">\n                    <p>content1</p>\n                    <p>content1</p>\n                    <p>content1</p>\n                </TabPane>\n                <TabPane tab=\"Tab 2\" itemKey=\"2\">\n                    <p>content2</p>\n                    <p>content2</p>\n                    <p>content2</p>\n                </TabPane>\n            </Tabs>\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Style CheckboxGroup in React\nDESCRIPTION: Example of using the CheckboxGroup with type='card' to create checkboxes with background styling. This enables a card-like appearance while maintaining checkbox functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup, Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup type='card' defaultValue={['1', '3']} direction='vertical' aria-label=\"Checkbox demo\">\n        <Checkbox value={'1'} disabled extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n        <Checkbox value={'2'} disabled extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n        <Checkbox value={'3'} extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n        <Checkbox value={'4'} extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Limiting File Size in React Upload Component\nDESCRIPTION: Shows how to set minimum and maximum file size limits using 'minSize' and 'maxSize' props. It also demonstrates the use of 'onSizeError' callback to handle size limit violations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n\n    return (\n        <>\n            <Upload\n                action={action}\n                maxSize={1024}\n                minSize={200}\n                onSizeError={(file, fileList) => Toast.error(`${file.name} size invalid`)}\n            >\n                <Button icon={<IconUpload />} theme=\"light\">\n                    点击上传（最小 200KB，最大 1MB）\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TagInput Implementation\nDESCRIPTION: Demonstrates basic usage of TagInput with default values and placeholder. Creates tags when Enter key is pressed.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput\n        defaultValue={['抖音', '火山', '西瓜视频']}\n        placeholder='请输入...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Markdown with MarkdownRender in React\nDESCRIPTION: Demonstrates how to use MarkdownRender for pure Markdown content without JSX, using the 'md' format to avoid escaping special characters.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/markdownrender/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MarkdownRender, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const components ={};\n    \n    components['h1'] = ({children}) => <Typography.Title heading={1} style={{color:\"var(--semi-color-primary)\"}}>{children}</Typography.Title>\n    \n    return <MarkdownRender raw={`Symbols that do not need to be escaped{}<> ...`} format=\"md\" components={components} />\n}\n```\n\n----------------------------------------\n\nTITLE: Select Component with Different Validation States\nDESCRIPTION: Shows the Select component with different validation states: default, warning, and error using the validateStatus prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select style={{ width: '180px' }} defaultValue='Capcut'>\n            <Select.Option value=\"Capcut\">Capcut</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select style={{ width: '180px' }} validateStatus=\"warning\" defaultValue='Capcut'>\n            <Select.Option value=\"Capcut\">Capcut</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select style={{ width: '180px' }} validateStatus=\"error\" defaultValue='Capcut'>\n            <Select.Option value=\"Capcut\">Capcut</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Element Ordering in Semi-Design Grid\nDESCRIPTION: Shows how to change the order of elements in the grid using the 'order' prop on Col components. This allows for flexible rearrangement of columns without changing the HTML structure.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid\">\n        <Row type=\"flex\">\n            <Col span={6} order={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={6} order={3}><div className=\"col-content\">col-3</div></Col>\n            <Col span={6} order={2}><div className=\"col-content\">col-2</div></Col>\n            <Col span={6} order={1}><div className=\"col-content\">col-1</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Different Toast Types in React\nDESCRIPTION: Shows how to use different types of toasts including success, warning, and error.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n    };\n\n    return (\n        <>\n            <Button style={{ color: `var(--semi-color-success)` }} onClick={() => Toast.success('Hi,Bytedance dance dance')}>Success</Button>\n            <br />\n            <br />\n            <Button type=\"warning\" onClick={() => Toast.warning(opts)}>\n                Warning\n            </Button>\n            <br />\n            <br />\n            <Button type=\"danger\" onClick={() => Toast.error(opts)}>\n                Error\n            </Button>\n        </>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Cascader\nDESCRIPTION: Shows how to implement multiple selection in the Cascader component using the multiple prop. Includes a default selected value example.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            defaultValue= {['impressionism', 'visualArts', 'Monet']}\n            style={{ width: 400 }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n            multiple\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast Card Success Example - React JSX\nDESCRIPTION: Example of rendering a success toast message card using the ToastCard component with specified styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ border: '1px solid var(--semi-color-border)', padding: 10, marginBottom: 24, justifyContent: 'center', display: 'flex' }}>\n    <ToastCard type='success' content='Ticket transferred' />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Implementation with HotKeys\nDESCRIPTION: Demonstrates basic dropdown usage with icons, hotkeys, and different item types. Shows menu grouping with titles and dividers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Button, HotKeys } from '@douyinfe/semi-ui';\nimport { IconBox, IconSetting, IconForward, IconRefresh, IconSearch, IconAlertCircle } from \"@douyinfe/semi-icons\";\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\nfunction Demo() {\n    return (\n        <Dropdown\n            position=\"bottomLeft\"\n            render={\n                <Dropdown.Menu>\n                    <Dropdown.Title>分组1</Dropdown.Title>\n                    <Dropdown.Item icon={<IconBox />}>\n                        Menu Item 1\n                        <HotKeys\n                            style={{ marginLeft: 20 }}\n                            hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.B]}\n                            content={['Ctrl', 'B']}\n                        ></HotKeys>\n                    </Dropdown.Item>\n                    <Dropdown.Item icon={<IconSetting />}>\n                        Menu Item 2\n                        <HotKeys\n                            style={{ marginLeft: 20 }}\n                            hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.V]}\n                            content={['Ctrl', 'V']}\n                        ></HotKeys>\n                    </Dropdown.Item>\n                    <Dropdown.Item disabled icon={<IconForward />}>\n                        Menu Item 3\n                        <HotKeys\n                            style={{ marginLeft: 20 }}\n                            hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.F3]}\n                            content={['Ctrl', 'F3']}\n                        ></HotKeys>\n                    </Dropdown.Item>\n                    <Dropdown.Divider />\n                    <Dropdown.Title>分组2</Dropdown.Title>\n                    <Dropdown.Item type=\"tertiary\" icon={<IconRefresh />}>tertiary</Dropdown.Item>\n                    <Dropdown.Item type=\"warning\" icon={<IconSearch />}>\n                        warning\n                    </Dropdown.Item>\n                    <Dropdown.Item type=\"danger\" icon={<IconAlertCircle />}>danger</Dropdown.Item>\n                </Dropdown.Menu>\n            }\n        >\n            <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                Hover Me\n            </Button>\n        </Dropdown>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme with Local Scss File\nDESCRIPTION: This snippet includes steps to implement a custom theme using a local Scss file. The Scss variables need to be defined in the local file, and the rspack config must include a path to this file.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-rspack/README.md#2025-04-12_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// local.scss\n$font-size-small: 16px;\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\nconst path = require('path');\nconst {SemiRspackPlugin} = require('@douyinfe/semi-rspack-plugin');\n\nmodule.exports = {\n    // ...\n    plugins: [\n        new SemiRspackPlugin({\n            include: path.join(__dirname, 'local.scss')\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Standalone Usage of Badge Component in React\nDESCRIPTION: Demonstrates how to use the Badge component as a standalone element without wrapping other components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Badge count={5} />\n        <br/>\n        <br/>\n        <Badge count='NEW' theme='light' />\n        <br/>\n        <br/>\n        <Badge count={99} overflowCount={10} type='danger' />\n        <br/>\n        <br/>\n        <span><Badge dot type='primary' /> processing</span>\n        <br/>\n        <span><Badge dot type='tertiary' /> info</span>\n        <br/>\n        <span><Badge dot type='success' /> success</span>\n        <br/>\n        <span><Badge dot type='warning' /> warning</span>\n        <br/>\n        <span><Badge dot type='danger' /> error</span>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: PinCode with Manual Focus Control Using Ref\nDESCRIPTION: Demonstrates how to programmatically control focus on specific digits of the PinCode component using the ref object. Includes a button to focus on the third input field.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [value, setValue] = useState('69af41');\n    const ref = useRef();\n    return (\n        <>\n            <Button onClick={() => ref.current.focus(2)}>Focus Third Input</Button>\n            <br />\n            <br />\n            <PinCode\n                format={'mixed'}\n                ref={ref}\n                onComplete={value => console.log('pincode: ', value)}\n                value={value}\n                onChange={v => {\n                    console.log(v);\n                    setValue(v);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 设置不同校验状态的Select组件\nDESCRIPTION: 通过validateStatus属性设置Select组件的校验状态，支持default、warning和error三种状态，仅影响背景颜色等样式表现。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select style={{ width: '180px' }}>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select style={{ width: '180px' }} validateStatus=\"warning\">\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select style={{ width: '180px' }} validateStatus=\"error\">\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip to Specific DOM Element in React\nDESCRIPTION: Shows how to use the getPopupContainer prop to render the Tooltip to a specific DOM element. It's important to note that the container's position will be set to 'relative' by default if it's not document.body.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div id=\"tooltip-wrapper\" style={{ position: 'relative' }}>\n            <Tooltip\n                position=\"right\"\n                content=\"Popup will be rendered in element#tooltip-wrapper\"\n                trigger=\"click\"\n                getPopupContainer={() => document.querySelector('#tooltip-wrapper')}\n            >\n                <Tag>Click here</Tag>\n            </Tooltip>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Upload with Custom Prompt Text and Position\nDESCRIPTION: Demonstrates how to add custom prompt text to the Upload component and position it using the promptPosition prop. The example shows prompts in right, left, and bottom positions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const action = '//semi.design/api/upload';\n    const getPrompt = (pos, isListType) => {\n        let basicStyle = { display: 'flex', alignItems: 'center', color: 'grey', height: isListType ? '100%' : 32 };\n        let marginStyle = {\n            left: { marginRight: 10 },\n            right: { marginLeft: 10 },\n        };\n        let style = { ...basicStyle, ...marginStyle[pos] };\n\n        return <div style={style}>Please upload qualification certification materials</div>;\n    };\n    const button = (\n        <Button icon={<IconUpload />} theme=\"light\">\n            Click upload\n        </Button>\n    );\n    const positions = ['right', 'left', 'bottom'];\n    return (\n        <>\n            {positions.map((pos, index) => (\n                <>\n                    {index ? (\n                        <div\n                            style={{ marginBottom: 12, marginTop: 12, borderBottom: '1px solid var(--semi-color-border)' }}\n                        ></div>\n                    ) : null}\n                    <Upload action={action} prompt={getPrompt(pos)} promptPosition={pos}>\n                        {button}\n                    </Upload>\n                </>\n            ))}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Mini Pagination in React\nDESCRIPTION: Demonstrates how to create a mini version of the Pagination component using the 'size' prop set to 'small'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <Pagination total={90} size=\"small\"></Pagination>\n);\n```\n\n----------------------------------------\n\nTITLE: Dropdown Position Examples\nDESCRIPTION: Demonstrates different positioning options for dropdowns including bottom, bottomLeft, and bottomRight positions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <Dropdown\n                position={'bottom'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>Bottom</Tag>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>bottomLeft</Tag>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                position={'bottomRight'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>bottomRight</Tag>\n            </Dropdown>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Timeline with Node Types\nDESCRIPTION: Shows how to implement different node types (ongoing, success, error) with corresponding colors\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\n\n() => (\n    <Timeline>\n        <Timeline.Item time=\"2019-07-14 10:35\" type=\"ongoing\">审核中</Timeline.Item>\n        <Timeline.Item time=\"2019-06-13 16:17\" type=\"success\">发布成功</Timeline.Item>\n        <Timeline.Item time=\"2019-05-14 18:34\" type=\"error\">审核失败</Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Navigation Style Steps\nDESCRIPTION: Implementation of navigation-style steps with type=\"nav\" attribute\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <Steps type=\"nav\" current={1} style={{ margin: 'auto' }} onChange={(i)=>console.log(i)}>\n            <Steps.Step title=\"注册账号\" />\n            <Steps.Step title=\"这个项目的文字比较多多多多\" />\n            <Steps.Step title=\"产品用途\" />\n            <Steps.Step title=\"期待尝试功能\" />\n        </Steps>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Password Mode Input Component in React\nDESCRIPTION: Shows how to create a password input field that hides the actual content entered by the user.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input mode=\"password\" defaultValue=\"123456\"></Input>\n);\n```\n\n----------------------------------------\n\nTITLE: TreeSelect TriggerRender Interface Definition\nDESCRIPTION: TypeScript interface definition for the triggerRender prop of TreeSelect component, describing available properties and functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface triggerRenderProps {\n    componentProps: TreeSelectProps;// TreeSelect props\n    disabled: boolean;              // disabled status\n    value: TreeNodeData[];              // data of the selected node\n    inputValue: string;             // value of the input box\n    onClear: e => void;             // onClear function\n    placeholder: string;            // placeholder\n    /* The function called when deleting a single item, \n     *   with the key of the item as an input parameter, \n     *  supported from version v2.32.0\n     */\n    onRemove: key => void;\n    /* It is used to start the search when the value of the Input box is updated. \n     * When you update the value of the Input component customized by triggerRender, \n     * you should call this function to synchronize the state with the TreeSelect \n     * internally. you need to set the filterTreeNode parameter to non-false when use it,\n     * and set searchPosition to 'trigger'. It is supported from v2.32.0\n     */\n    onSearch: inputValue => void;   \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme via Local SCSS File Set-up JavaScript\nDESCRIPTION: Set up a local SCSS file to define custom design tokens for Semi Design and configure Webpack to include this file using '@douyinfe/semi-webpack-plugin'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-webpack/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst SemiPlugin = require('@douyinfe/semi-webpack-plugin').default;\n\nmodule.exports = {\n    plugins: [\n        new SemiPlugin({\n            include: path.join(__dirname, 'local.scss')\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Character Length Calculation in React with Semi Design\nDESCRIPTION: This code snippet demonstrates how to use the getValueLength prop with Input, Form.Input, and TextArea components to handle custom character length calculation, including support for emojis and whitespace filtering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport GraphemeSplitter from 'grapheme-splitter';\nimport { Input, Typography, Form, TextArea, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [value, setValue] = useState();\n    function getValueLength(str) {\n        if (typeof str === 'string') {\n            const splitter = new GraphemeSplitter();\n            return splitter.countGraphemes(str);\n        } else {\n            return 0;\n        }\n    }\n\n    function getTextAreaStrLength(str) {\n        const filteredStr = str.replace(/\\s/g, '');\n        return filteredStr.length;\n    }\n\n    return (\n        <div>\n            <h4>maxLength=10</h4>\n            <div>\n                <Typography.Text>尝试输入以下字符</Typography.Text>\n                <div><Typography.Text copyable>💖</Typography.Text></div>\n                <div><Typography.Text copyable>👨‍👩‍👧‍👦</Typography.Text></div>\n            </div>\n            <Input maxLength={10} getValueLength={getValueLength} onChange={setValue} style={{ width: 200, marginTop: 12, marginBottom: 12 }} />\n            {\n                value && (\n                    <div>\n                        <div><Typography.Text type=\"tertiary\">{`getValueLength=${getValueLength(value)}`}</Typography.Text></div>\n                        <div><Typography.Text type=\"tertiary\">{`length=${value.length}`}</Typography.Text></div>\n                    </div>\n                )\n            }\n            <br/><br/>\n            <h4>Form.Input + minLength=4</h4>\n            <Form layout=\"horizontal\">\n                <Form.Input noLabel field=\"username\" minLength={4} getValueLength={getValueLength} style={{ width: 200 }} />\n                <Button type=\"primary\" htmlType=\"submit\">提交</Button>\n            </Form>\n            <h4>maxCount=10</h4>\n            <TextArea defaultValue=\"semi design\" rows={2} maxCount={10} getValueLength={getTextAreaStrLength} style={{ width: 200 }} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Banner in Container with Custom Styling\nDESCRIPTION: Demonstrates non-fullscreen banners with bordered styling. This example includes setting fullMode to false and using the bordered prop with each banner type. Also shows how to customize titles and descriptions with Typography components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Banner, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n  \n    return (\n        <div style={{ width: 640 }} className=\"components-banner-demo\">\n            <Banner fullMode={false} type=\"info\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>{`Don't know AppKey?`}</div>}\n                description={<div>You can contact the corresponding R & D students to confirm whether you have applied for an application on <Text link={{ href: 'https://semi.design/' }}>the application cloud platform</Text> , and fill in the corresponding information.</div>}\n            /><br/>\n            <Banner fullMode={false} type=\"warning\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>{`Don't know AppKey?`}</div>}\n                description={<div>You can contact the corresponding R & D students to confirm whether you have applied for an application on <Text link={{ href: 'https://semi.design/' }}>the application cloud platform</Text> , and fill in the corresponding information.</div>}\n            /><br/>\n            <Banner fullMode={false} type=\"danger\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>{`Don't know AppKey?`}</div>}\n                description={<div>You can contact the corresponding R & D students to confirm whether you have applied for an application on <Text link={{ href: 'https://semi.design/' }}>the application cloud platform</Text> , and fill in the corresponding information.</div>}\n            /><br/>\n            <Banner fullMode={false} type=\"success\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>{`Don't know AppKey?`}</div>}\n                description={<div>You can contact the corresponding R & D students to confirm whether you have applied for an application on <Text link={{ href: 'https://semi.design/' }}>the application cloud platform</Text> , and fill in the corresponding information.</div>}\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Grouped Transfer Component Configuration\nDESCRIPTION: 展示了如何配置分组穿梭框。需要将type设置为'groupList'，并且dataSource中的每个一级元素必须包含title和children属性。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n\n() => {\n    const dataWithGroup = [\n        {\n            title: '类别A',\n            children: [\n                { label: 'A-1', value: 1, disabled: false, key: 1 },\n                { label: 'A-2', value: 2, disabled: false, key: 2 },\n                { label: 'A-3', value: 3, disabled: false, key: 3 },\n            ],\n        },\n        {\n            title: '类别B',\n            children: [\n                { label: 'B-1', value: 4, disabled: false, key: 4 },\n                { label: 'B-2', value: 5, disabled: false, key: 5 },\n                { label: 'B-3（disabled）', value: 6, disabled: true, key: 6 },\n            ],\n        },\n        {\n            title: '类别C',\n            children: [\n                { label: 'C-1', value: 7, disabled: false, key: 7 },\n                { label: 'C-2', value: 8, disabled: false, key: 8 },\n                { label: 'C-3', value: 9, disabled: false, key: 9 },\n                { label: 'C-4', value: 10, disabled: false, key: 10 },\n                { label: 'C-5', value: 11, disabled: false, key: 11 },\n                { label: 'C-6', value: 12, disabled: false, key: 12 },\n                { label: 'C-7', value: 13, disabled: false, key: 13 },\n            ],\n        },\n    ];\n    return (\n        <Transfer\n            type=\"groupList\"\n            defaultValue={[6]}\n            style={{ width: 568 }}\n            dataSource={dataWithGroup}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Switch Component in React\nDESCRIPTION: 展示Switch作为受控组件的用法，组件状态完全由传入的checked值控制，配合onChange回调函数使用。通过React的useState钩子管理状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [checked, setChecked] = useState(true);\n\n    const onChange = checked => {\n        setChecked(checked);\n    };\n\n    return <Switch checked={checked} aria-label=\"a switch for demo\" onChange={onChange} />;\n};\n```\n\n----------------------------------------\n\nTITLE: DatePicker Interface Definitions in TypeScript\nDESCRIPTION: TypeScript type definitions for DatePicker component including value types, date types, string types, and trigger render props interface.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype BaseValueType = string | number | Date;\ntype ValueType = BaseValueType | BaseValueType[];\ntype DateType = Date | Date[];\ntype StringType = string | string[];\ntype TriggerRenderProps = {\n    value?: ValueType;\n    inputValue?: string;\n    placeholder?: string | string[];\n    autoFocus?: boolean;\n    size?: InputSize;\n    disabled?: boolean;\n    inputReadOnly?: boolean;\n    componentProps?: DatePickerProps;\n    [x: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Route Objects in React\nDESCRIPTION: Demonstrates how to use route objects to configure the Breadcrumb component, including paths, icons, and custom rendering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Breadcrumb\n            routes={['Semi-ui', 'Breadcrumb', 'Default']}\n        />\n        <br />\n        <Breadcrumb\n            routes={\n                [\n                    {\n                        path: '/',\n                        href: '/',\n                        icon: <IconHome size=\"small\" />\n                    },\n                    {\n                        path: '/breadcrumb',\n                        href: '/zh-CN/navigation/breadcrumb',\n                        name: 'breadcrumb',\n                        icon: <IconArticle size=\"small\" />\n                    },\n                    'with icon'\n                ]\n            }\n        />\n        <br />\n        <Breadcrumb\n            routes={['首页', '当这个页面标题很长时需要省略', '详情页']}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 自定义加载失败占位图 - React\nDESCRIPTION: 通过 fallback 属性自定义图片加载失败时的占位图，支持字符串或 React 节点类型。示例展示了默认占位图和自定义图标占位图的对比。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@douyinfe/semi-ui';\nimport { IconUploadError } from '@douyinfe/semi-icons';\n\n() => (\n    <div style={{ display: 'flex', alignItem: 'center', flexDirection: 'column' }}>\n        <span>加载失败默认样式</span>\n        <Image \n            width={200}\n            height={200}\n            src=\"https://load-error.jpeg\"\n        />\n        <br />\n        <span>自定义加载失败占位图</span>\n        <Image \n            width={200}\n            height={200}\n            src=\"https://load-error.jpeg\"\n            fallback={<IconUploadError style={{ fontSize: 50 }} />}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Colored Tags in Semi Design with JSX\nDESCRIPTION: Demonstrates various tag components with different colors and types. Shows standard tags in colors like grey, blue, red, green, and others, as well as ghost and solid type variations. Each tag has a consistent style applied through the tagStyle variable.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Tag color='grey' style={tagStyle}> grey tag </Tag>\n<Tag color='blue' style={tagStyle}> blue tag </Tag>\n<Tag color='blue' type='ghost' style={tagStyle}> ghost tag </Tag>\n<Tag color='blue' type='solid' style={tagStyle}> solid tag </Tag>\n<Tag color='red' style={tagStyle}> red tag </Tag>\n<Tag color='green' style={tagStyle}> green tag </Tag>\n<Tag color='orange' style={tagStyle}> orange tag </Tag>\n<Tag color='teal' style={tagStyle}> teal tag </Tag>\n<Tag color='violet' style={tagStyle}> violet tag </Tag>\n<Tag color='white' style={tagStyle}> white tag </Tag>\n```\n\n----------------------------------------\n\nTITLE: Initializing VChart with Semi Theme\nDESCRIPTION: Example of initializing VChart with Semi theme in a React application entry point\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//index.jsx\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './app.jsx';\nimport { initVChartSemiTheme } from '@visactor/vchart-semi-theme';\n\n// initialization\ninitVChartSemiTheme();\n\nconst dom = document.querySelector('#root');\nconst root = createRoot(dom);\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Collapsible with Custom Collapse Height\nDESCRIPTION: Demonstrates using collapseHeight prop to set custom collapsed state height with gradient mask effect\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState(false);\n    const maskStyle = isOpen\n        ? {}\n        : {\n            WebkitMaskImage:\n                    'linear-gradient(to bottom, black 0%, rgba(0, 0, 0, 1) 60%, rgba(0, 0, 0, 0.2) 80%, transparent 100%)'\n        };\n    const collapsed = (\n        <ul>\n            <li>Nothing can ever happen twice.</li>\n            <li>In consequence, the sorry fact is</li>\n            <li>that we arrive here improvised</li>\n            <li>and leave without the chance to practice. </li>\n        </ul>\n    );\n    const toggle = () => {\n        setOpen(!isOpen);\n    };\n    const linkStyle = {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        textAlign: 'center',\n        bottom: -10,\n        fontWeight: 700,\n        cursor: 'pointer'\n    };\n    return (\n        <>\n            <Button onClick={toggle}>Toggle</Button>\n            <div style={{ position: 'relative' }}>\n                <Collapsible isOpen={isOpen} collapseHeight={60} style={{ ...maskStyle }}>\n                    {collapsed}\n                </Collapsible>\n                {isOpen ? null : (\n                    <a onClick={toggle} style={{ ...linkStyle }}>\n                        + Show More\n                    </a>\n                )}\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Aspect Ratio Cropper\nDESCRIPTION: Shows how to implement a Cropper with custom aspect ratio settings using aspectRatio prop for fixed ratio cropping.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nfunction Demo() {\n    const ref = useRef(null);\n    const [cropperUrl, setCropperUrl] = useState('');\n\n    const onButtonClick = useCallback(() => {\n      const canvas = ref.current.getCropperCanvas();\n      const url = canvas.toDataURL();\n      setCropperUrl(url);\n    }, []);\n\n    return <>\n        <Cropper\n            aspectRatio={3/4}\n            ref={ref} \n            src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n            style={containerStyle}\n        />\n        <Button onClick={onButtonClick}>Get Cropped Image</Button>\n         <br /><br />\n        {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n    </>;\n}\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Icons in React\nDESCRIPTION: Shows how to add icons to Breadcrumb items using the IconHome and IconArticle components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb>\n        <Breadcrumb.Item icon={<IconHome size=\"small\" />}></Breadcrumb.Item>\n        <Breadcrumb.Item icon={<IconArticle size=\"small\" />}>Breadcrumb</Breadcrumb.Item>\n        <Breadcrumb.Item>With Icon</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Pagination with Custom Page Size Options - React/JSX\nDESCRIPTION: Shows pagination with custom page size options\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination\n            total={300}\n            showSizeChanger\n            pageSizeOpts={[50, 80, 90, 200]}>\n        </Pagination>\n        <br/>\n        <br/>\n        <Pagination\n            total={300}\n            showSizeChanger\n            pageSizeOpts={[10, 20, 50, 200]}>\n        </Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger DatePicker\nDESCRIPTION: Demonstrates how to implement a custom trigger for the DatePicker using triggerRender prop with a Button component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback, useMemo } from 'react';\nimport * as dateFns from 'date-fns';\nimport { DatePicker, Button } from '@douyinfe/semi-ui';\nimport { IconClose, IconChevronDown } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const [date, setDate] = useState(new Date());\n    const formatToken = 'yyyy-MM-dd';\n    const onChange = useCallback(date => {\n        setDate(date);\n    }, []);\n    const onClear = useCallback(e => {\n        e && e.stopPropagation();\n        setDate(null);\n    }, []);\n\n    const closeIcon = useMemo(() => {\n        return date ? <IconClose onClick={onClear} /> : <IconChevronDown />;\n    }, [date]);\n\n    return (\n        <DatePicker\n            onChange={onChange}\n            value={date}\n            format={formatToken}\n            triggerRender={({ placeholder }) => (\n                <Button theme={'light'} icon={closeIcon} iconPosition={'right'}>\n                    {(date && dateFns.format(date, formatToken)) || placeholder}\n                </Button>\n            )}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 卡片样式的CheckboxGroup\nDESCRIPTION: 通过设置type='card'创建带有背景的卡片样式复选框组，支持垂直排列和额外说明文字，适用于更丰富的选择界面设计。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup, Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup type='card' defaultValue={['1', '3']} direction='vertical' aria-label=\"CheckboxGroup 示例\">\n        <Checkbox value={'1'} disabled extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n        <Checkbox value={'2'} disabled extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n        <Checkbox value={'3'} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n        <Checkbox value={'4'} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Grid with Column Offsets in Semi-Design\nDESCRIPTION: Demonstrates how to use column offsets in the grid system. The 'offset' prop on Col components is used to create space between columns, allowing for more complex layouts.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid\">\n        <Row>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n            <Col span={8} offset={8}>\n                <div className=\"col-content\">col-8</div>\n            </Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={6} offset={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6} offset={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={12} offset={6}>\n                <div className=\"col-content\">col-12</div>\n            </Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Locking Aspect Ratio in Resizable Component\nDESCRIPTION: Shows how to lock the aspect ratio of the resizable component using the 'lockAspectRatio' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div style={{ width: '500px', height: '60%' }}>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', marginBottom: '10px' }}\n                defaultSize={{\n                    width: 400,\n                    height: 300,\n                }}\n                lockAspectRatio\n            >\n                <div style={{ marginLeft: '20%' }}>lock</div>\n            </Resizable>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                defaultSize={{\n                    width: 200,\n                    height: (200 * 9) / 16,\n                }}\n                lockAspectRatio={16 / 9}\n            >\n                <div style={{ marginLeft: '20%' }}>16 / 9</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Badge Component in React\nDESCRIPTION: Demonstrates the basic usage of the Badge component with different types of content and styles.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\nimport { IconLock } from '@douyinfe/semi-icons';\n\n() => {\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div>\n            <Badge count={5}>\n                <Avatar color='blue' shape='square' style={style}>BM</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge dot>\n                <Avatar color='blue' shape='square' style={style}>YL</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={<IconLock style={{ color: 'var(--semi-color-primary)' }}/>}>\n                <Avatar color='light-blue' shape='square' style={style}>XZ</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='NEW' >\n                <Avatar color='light-blue' shape='square' style={style}>WF</Avatar>\n            </Badge>\n        </div>\n    );  \n};\n```\n\n----------------------------------------\n\nTITLE: Closing Notifications Manually\nDESCRIPTION: Method to manually close a notification using its ID\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nNotification.close(id)\n```\n\n----------------------------------------\n\nTITLE: InputNumber with Hidden Buttons\nDESCRIPTION: Shows how to completely hide the increment/decrement buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\n() => (\n    <InputNumber hideButtons style={{ width: 190 }} />\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Cropper Usage\nDESCRIPTION: Demonstrates basic usage of the Cropper component with different shape options (rect, round, roundRect) and image cropping functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nfunction Demo() {\n    const ref = useRef(null);\n    const [shape, setShape] = useState('rect');\n    const [cropperUrl, setCropperUrl] = useState('');\n\n    const onButtonClick = useCallback(() => {\n        const canvas = ref.current.getCropperCanvas();\n        setCropperUrl(canvas.toDataURL());\n    }, []);\n\n    const onShapeChange = useCallback((e) => {\n        setShape(e.target.value);\n    }, []);\n\n    return <>\n        <RadioGroup onChange={onShapeChange} value={shape}>\n            <Radio value={'rect'}>rect</Radio>\n            <Radio value={'round'}>round</Radio>\n            <Radio value={'roundRect'}>roundRect</Radio>\n        </RadioGroup>\n        <Cropper\n            ref={ref} \n            src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n            style={containerStyle}\n            shape={shape}\n        />\n        <Button onClick={onButtonClick}>Get Cropped Image</Button>\n         <br/><br/>\n        {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n    </>;\n}\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Checkbox State in React\nDESCRIPTION: Demonstrates how to use the indeterminate property to create a Checkbox with an indeterminate state, commonly used for \"select all\" functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const plainOptions = ['Photography', 'Movies', 'Running'];\n    const [checkedList, setCheckedList] = useState(['Photography', 'Running']);\n    const [indeterminate, setIndeterminate] = useState(true);\n    const [checkAll, setCheckall] = useState(false);\n    const onChange = (checkedList) => {\n        setCheckedList(checkedList);\n        setIndeterminate(!!checkedList.length && checkedList.length < plainOptions.length);\n        setCheckall(checkedList.length === plainOptions.length);\n    };\n    const onCheckAllChange = (e) => {\n        console.log(e);\n        setCheckedList(e.target.checked ? plainOptions : []);\n        setIndeterminate(false);\n        setCheckall(e.target.checked);\n    };\n\n    return (\n        <div>\n            <div style={{ paddingBottom: 8, borderBottom: '1px solid var(--semi-color-border)' }}>\n                <Checkbox\n                    indeterminate={indeterminate}\n                    onChange={onCheckAllChange}\n                    checked={checkAll}\n                    aria-label=\"Checkbox demo\"\n                >\n                    Check all\n                </Checkbox>\n            </div>\n            <CheckboxGroup\n                style={{ marginTop: 6 }}\n                options={plainOptions}\n                value={checkedList}\n                onChange={onChange}\n                aria-label=\"CheckboxGroup demo\"\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Menu in Tabs Component (React)\nDESCRIPTION: Shows how to use advanced configuration for the 'more' prop, including custom rendering of the dropdown trigger and passing props to the dropdown component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <Tabs\n            more={{\n                count: 4,\n                render: () => {\n                    return <Button type='tertiary'>Click to show More</Button>;\n                },\n                dropdownProps: { trigger: 'click', position: 'bottomRight' },\n            }}\n            style={{ width: '60%', margin: '20px' }}\n            type=\"card\"\n        >\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                    Content of card tab {i}\n                </TabPane>\n            ))}\n        </Tabs>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Mask in UserGuide with React\nDESCRIPTION: This snippet demonstrates disabling the mask overlay in the UserGuide component using the `mask` property set to `false`. This allows the user to interact with the underlying page elements while the guide is active.  It is suitable for scenarios where the mask might be intrusive or unnecessary.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch, Image } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button id={'mask-demo'} onClick={showDialog}>Start Guide</Button>\n            <UserGuide\n                mode=\"popup\"\n                mask={false}\n                visible={visible}\n                steps={[\n                    {\n                        target: document.querySelector('#mask-demo'),\n                        title: 'No Mask',\n                        description: 'Hello ByteDancer!',\n                    },\n                ]}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Colored Background Toast in React\nDESCRIPTION: Demonstrates how to use the 'theme' property to create toasts with colored backgrounds.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n        theme: 'light',\n    };\n\n    return (\n        <>\n            <Button onClick={() => Toast.info(opts)}>Info</Button>\n            <br />\n            <br />\n            <Button style={{ color: `var(--semi-color-success)` }} onClick={() => Toast.success(opts)}>Success</Button>\n            <br />\n            <br />\n            <Button type=\"warning\" onClick={() => Toast.warning(opts)}>\n                Warning\n            </Button>\n            <br />\n            <br />\n            <Button type=\"danger\" onClick={() => Toast.error(opts)}>\n                Error\n            </Button>\n        </>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Small Size Anchor Implementation\nDESCRIPTION: Shows how to configure the Anchor component with a small size using the size property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => (\n    <Anchor size={'small'}>\n        <Anchor.Link href=\"#Components\" title=\"Components\" />\n        <Anchor.Link href=\"#Design\" title=\"Design\" />\n        <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n        <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n    </Anchor>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Area Render in React\nDESCRIPTION: Creates a custom input area component with a form for name input and file upload. Uses Semi UI components and handles form submission and message sending.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomInputRender(props) {\n    const { defaultNode, onClear, onSend } = props;\n    const api = useRef();\n    const onSubmit = useCallback(() => {\n        if (api.current) {\n            const values = api.current.getValues();\n            if ((values.name && values.name.length !== 0) || (values.file && values.file.length !== 0)) {\n                onSend(values.name, values.file);\n                api.current.reset();\n            } \n        }\n    }, []);\n\n    return (<div style={inputStyle}>\n        <Form\n            getFormApi={formApi => api.current = formApi}\n        >\n            <strong>Information Chart</strong>\n            <Form.Input\n                field=\"name\"\n                label=\"Name\"\n                style={{ width: 250 }}\n                trigger='blur'\n            />\n            <Form.Upload\n                field='file'\n                label='File'\n                action='https://api.semi.design/upload'\n            >\n                <Button icon={<IconUpload />} theme=\"light\">\n                    Upload\n                </Button>\n            </Form.Upload>\n        </Form>\n        <Button style={{ width: 'fit-content' }} onClick={onSubmit}>Submit</Button>\n    </div>);\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs with Icons in React\nDESCRIPTION: Demonstrates how to use Tabs component with icons in tab labels, using IconFile, IconGlobe, and IconHelpCircle from Semi Icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\nimport { IconFile, IconGlobe, IconHelpCircle } from '@douyinfe/semi-icons';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs>\n                <TabPane\n                    tab={\n                        <span>\n                            <IconFile />\n                            Document\n                        </span>\n                    }\n                    itemKey=\"1\"\n                >\n                    Document\n                </TabPane>\n                <TabPane\n                    tab={\n                        <span>\n                            <IconGlobe />\n                            Quick Start\n                        </span>\n                    }\n                    itemKey=\"2\"\n                >\n                    Quick Start\n                </TabPane>\n                <TabPane\n                    tab={\n                        <span>\n                            <IconHelpCircle />\n                            Help\n                        </span>\n                    }\n                    itemKey=\"3\"\n                >\n                    Help\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TimePicker Trigger in React\nDESCRIPTION: Shows how to create a custom trigger for the TimePicker using the triggerRender prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useMemo } from 'react';\nimport * as dateFns from 'date-fns';\nimport { TimePicker, Button } from '@douyinfe/semi-ui';\nimport { IconChevronDown, IconClose } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const formatToken = 'HH:mm:ss';\n    const [time, setTime] = useState(new Date());\n\n    return (\n        <TimePicker\n            value={time}\n            format={formatToken}\n            onChange={time => setTime(time)}\n            triggerRender={({ placeholder }) => (\n                <Tag\n                    color='cyan'\n                    size='large'\n                    shape='circle'\n                    style={{ padding: 12, paddingRight: 16, fontSize: 14 }}\n                    theme={'light'}\n                    prefixIcon={<IconTimePicker />}\n                >\n                    {time ? dateFns.format(time, formatToken) : placeholder}\n                </Tag>\n            )}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Button Text Modal Implementation\nDESCRIPTION: Shows how to customize Modal button text using okText and cancelText properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>Custom Button Text</Button>\n                <Modal\n                    title=\"Custom Button Text\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    okText={'Sounds great!'}\n                    cancelText={'No, thanks.'}\n                >\n                    <p>This is a modal with customized button texts.</p>\n                    <p>More content...</p>\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semi Icons as React Component\nDESCRIPTION: This code snippet demonstrates how to import and render an icon from the `@douyinfe/semi-icons-lab` package within a React application. It imports the `IconAnchor` component and renders it to the DOM.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-icons-lab/README.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IconAnchor } from '@douyinfe/semi-icons-lab';\n\nReactDOM.render(<IconAnchor />, root);\n```\n\n----------------------------------------\n\nTITLE: Tag Color Options in Semi Design\nDESCRIPTION: Shows all available color options for tags from Semi Design's color palette, including amber, blue, cyan, green, and others.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Space wrap>\n            {\n                ['amber', 'blue', 'cyan', 'green', 'grey', 'indigo',  \n                    'light-blue', 'light-green', 'lime', 'orange', 'pink',  \n                    'purple', 'red', 'teal', 'violet', 'yellow', 'white'\n                ].map(item => (<Tag color={item} key={item}> {item} </Tag>))\n            }\n        </Space>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Tooltip in React\nDESCRIPTION: 展示如何自定义 Slider 的提示信息，包括格式化和隐藏 Tooltip。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Slider tipFormatter={v => (`${v}%`)} getAriaValueText={v => (`${v}%`)}/>\n        <br/>\n        <br/>\n        <Slider tipFormatter={null} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Check Relationships in TreeSelect Component\nDESCRIPTION: Shows how to use the checkRelation property (available in v2.5.0 and above) to set node selection relationship types. Uses 'unRelated' to make selections between nodes not affect each other in multiple selection mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return (\n        <TreeSelect\n            defaultValue='Asia'\n            multiple\n            checkRelation='unRelated'\n            style={{ width: 300 }}\n            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n            treeData={treeData}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: DragMove with Constrained Movement in React\nDESCRIPTION: Shows how to use the constrainer prop to limit the draggable area. The constraining element must have relative positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from 'react';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const containerRef = React.useRef();\n\n  return (\n    <div \n      style={{ \n        backgroundColor: 'rgba(var(--semi-grey-2), 1)', \n        width: 300, height: 300, padding: 5, position: 'relative', \n        color: 'rgba(var(--semi-white), 1)', fontWeight: 500,\n      }} \n      ref={containerRef}\n    >\n      <span>Constrainer</span>\n      <DragMove\n        constrainer={() => containerRef.current}\n      >\n      <div \n          style={{ backgroundColor: 'var(--semi-color-primary)', \n            width: 80, height: 80, borderRadius: 10,\n            display: 'flex', alignItems: 'center', justifyContent: 'center',\n            position: 'absolute', top: 80, left: 80,\n          }}\n        >Drag me</div>\n      </DragMove>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Badge Component in React\nDESCRIPTION: Demonstrates the basic usage of Badge component with count, dot, and custom content. It shows how to wrap Avatar components with badges.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\nimport { IconLock } from '@douyinfe/semi-icons';\n\n() => {\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div>\n            <Badge count={5}>\n                <Avatar color='blue' shape='square' style={style}>BM</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge dot>\n                <Avatar color='blue' shape='square' style={style}>YL</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={<IconLock style={{ color: 'var(--semi-color-primary)' }}/>}>\n                <Avatar color='light-blue' shape='square' style={style}>XZ</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='NEW' >\n                <Avatar color='light-blue' shape='square' style={style}>WF</Avatar>\n            </Badge>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Spin Component with Description Text\nDESCRIPTION: Demonstrates how to add descriptive text to a Spin component when it's used as a wrapper around content using the tip property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Spin tip=\"I am loading...\">\n            <div\n                style={{\n                    border: '1px solid var(--semi-color-primary)',\n                    borderRadius: '4px',\n                    paddingLeft: '8px',\n                }}\n            >\n                <p>Here are some texts.</p>\n                <p>And more texts on the way.</p>\n            </div>\n        </Spin>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Tooltip Trigger Timing Demo\nDESCRIPTION: Demonstrates different trigger methods for tooltips including hover, click, focus, and custom controlled visibility.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tooltip, Button, ButtonGroup, Input } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [visible, setVisible] = useState(false);\n    const getPopupContainer = () => document.querySelector('#tooltip-container');\n\n    return (\n        <div style={{ width: '100%', height: '100%', overflow: 'hidden', position: 'relative' }} id=\"tooltip-container\">\n            <div style={{ width: '150%', height: '150%', paddingLeft: 50, paddingTop: 50 }}>\n                <Tooltip content={'hi bytedance'} getPopupContainer={getPopupContainer}>\n                    <Button style={{ marginBottom: 20 }}>Hover to show</Button>\n                </Tooltip>\n                <br />\n                <Tooltip content={'hi bytedance'} trigger=\"click\" getPopupContainer={getPopupContainer}>\n                    <Button style={{ marginBottom: 20 }}>Click to show</Button>\n                </Tooltip>\n                <br />\n                <Tooltip content={'hi bytedance'} trigger=\"focus\" getPopupContainer={getPopupContainer}>\n                    <Input style={{ width: 150, marginBottom: 20 }} placeholder=\"Focus to show\" />\n                </Tooltip>\n                <br />\n                <Tooltip\n                    content={'hi bytedance'}\n                    trigger=\"custom\"\n                    visible={visible}\n                    getPopupContainer={getPopupContainer}\n                >\n                    <span style={{ display: 'inline-block' }}>\n                        <ButtonGroup>\n                            <Button onClick={() => setVisible(true)}>Controlled show</Button>\n                            <Button onClick={() => setVisible(false)}>Controlled hide</Button>\n                        </ButtonGroup>\n                    </span>\n                </Tooltip>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Notification Card Example in JSX\nDESCRIPTION: A JSX example of rendering a NotificationCard component with an info type, title, and formatted content showing task completion status.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ border: '1px solid var(--semi-color-border)', padding: 10, marginBottom: 24, justifyContent: 'center', display: 'flex' }}>\n    <NotificationCard\n        type='info'\n        title='Task completed'\n        content={\n            <div>\n                400 tasks succeed and 600 failed\n                <div style={{ color: 'var(--semi-color-primary)', marginTop: 4, fontWeight: 600 }}>Check failed tasks</div>\n            </div>\n        }\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Style\nDESCRIPTION: Shows how to customize the highlight style using highlightStyle prop. This example applies a teal background with white text and custom border radius and padding.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const sourceString = 'From Semi Design，To Any Design. Quickly define your design system and apply it to design drafts and code';\n    const searchWords = ['Any Design', 'Semi Design'];\n    \n    return (<h2>\n        <Highlight\n            sourceString={sourceString}\n            searchWords={searchWords}\n            highlightStyle={{\n                borderRadius: 6,\n                marginLeft: 4,\n                marginRight: 4,\n                paddingLeft: 4,\n                paddingRight: 4,\n                backgroundColor: 'rgba(var(--semi-teal-5), 1)',\n                color: 'rgba(var(--semi-white), 1)'\n            }}\n        />\n    </h2>);\n};\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Percentage Display\nDESCRIPTION: Shows how to display and format percentage text in progress bars using showInfo and format props\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Progress } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ width: 200 }}>\n        <Progress percent={10} stroke=\"var(--semi-color-warning)\" showInfo={true} aria-label=\"disk usage\"/>\n        <br />\n        <Progress percent={25} stroke=\"var(--semi-color-danger)\" showInfo={true} aria-label=\"disk usage\"/>\n        <br />\n        <Progress percent={50} showInfo={true} aria-label=\"disk usage\"/>\n        <br />\n        <Progress percent={50} showInfo={true} format={percent => percent * 10 + '‰'} aria-label=\"disk usage\"/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 消息状态示例 - React\nDESCRIPTION: 展示了不同消息状态下Chat组件的展示效果。包括成功、加载中和错误状态的消息样式。通过设置message对象的status属性来控制不同的状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'assistant',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"请求成功\",   \n    },\n    {\n        id: 'loading',\n        role: 'assistant',\n        status: 'loading'\n    },\n    {\n        role: 'assistant',\n        id: 'error',\n        content: '请求错误',\n        status: 'error'\n    }\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n\nconst commonOuterStyle = {\n    border: '1px solid var(--semi-color-border)',\n    borderRadius: '16px',\n    height: 400,\n}\n\nlet id = 0;\nfunction getId() { return `id-${id++}` }\nconst uploadProps = { action: 'https://api.semi.design/upload' }\n\nfunction MessageStatus() {\n    const [message, setMessage] = useState(defaultMessage);\n\n    const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            createAt: Date.now(),\n            content: \"这是一条 mock 回复信息\",\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats);\n    }, []);\n\n    return (\n        <Chat \n            style={commonOuterStyle}\n            chats={message}\n            roleConfig={roleInfo}\n            onChatsChange={onChatsChange}\n            onMessageSend={onMessageSend}\n            uploadProps={uploadProps}\n        />\n    )\n}\n\nrender(MessageStatus);\n```\n\n----------------------------------------\n\nTITLE: Custom Content Banner in React\nDESCRIPTION: Shows how to create a banner with custom content through the children prop. This example includes action buttons directly in the banner for user interaction.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Banner } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ width: 500, padding: 20, border: '1px solid var(--semi-color-border)' }}>\n        <Banner\n            fullMode={false}\n            title=\"Title\"\n            type=\"warning\"\n            bordered\n            description=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat\"\n        >\n            <div className=\"semi-modal-footer\">\n                <button className=\"semi-button semi-button-tertiary semi-button-light\" type=\"button\">No, thanks.</button>\n                <button className=\"semi-button semi-button-warning\" type=\"button\">Sounds great!</button>\n            </div>\n        </Banner>\n        <br/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 通过optionList数组传入Select选项\nDESCRIPTION: 展示如何通过optionList属性传入选项数组，每个对象必须包含value和label属性，也可以包含其他自定义属性如disabled和otherKey。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const list = [\n        { value: 'douyin', label: '抖音', otherKey: 0 },\n        { value: 'ulikecam', label: '轻颜相机', disabled: true, otherKey: 1 },\n        { value: 'jianying', label: '剪映', otherKey: 2 },\n        { value: 'toutiao', label: '今日头条', otherKey: 3 },\n    ];\n    return <Select placeholder=\"请选择业务线\" style={{ width: 180 }} optionList={list}></Select>;\n};\n```\n\n----------------------------------------\n\nTITLE: Dropdown Event Handlers\nDESCRIPTION: Demonstrates various event handlers for Dropdown items including onClick, onMouseEnter, onMouseLeave, and onContextMenu events.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Button, Toast } from '@douyinfe/semi-ui';\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\n() => {\n    return (\n        <Dropdown\n            trigger={'click'}\n            position={'bottomLeft'}\n            render={\n                <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => Toast.info({ content: 'You clicked me!' })}>\n                        1: click me!\n                    </Dropdown.Item>\n                    <Dropdown.Item onMouseEnter={() => Toast.info({ content: 'Nice to meet you!' })}>\n                        2: mouse enter\n                    </Dropdown.Item>\n                    <Dropdown.Item onMouseLeave={() => Toast.info({ content: 'See ya!' })}>\n                        3: mouse leave\n                    </Dropdown.Item>\n                    <Dropdown.Item onContextMenu={() => Toast.info({ content: 'Right clicked!' })}>\n                        4: right click\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            }\n        >\n            <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                Click Me\n            </Button>\n        </Dropdown>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling UserGuide Current Step with React\nDESCRIPTION: This snippet illustrates how to control the current step of the UserGuide component using the `current` property and the `onChange` event handler. It uses `useState` to manage the current step and updates it whenever the user navigates to a new step. This allows for external control over the UserGuide's progress.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const [current, setCurrent] = useState(0);\n\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button onClick={showDialog}>Start Guide</Button>\n            <br />\n            <br />\n            <Space>\n                <Switch id={'controlled-demo-1'} defaultChecked={true}></Switch>\n                <Tag id={'controlled-demo-2'}> Default Tag </Tag>\n                <Button id={'controlled-demo-3'}>Confirm</Button>\n            </Space>\n            <UserGuide\n                mode=\"popup\"\n                mask={true}\n                visible={visible}\n                current={current}\n                steps={[\n                    {\n                        target: document.querySelector('#controlled-demo-1'),\n                        title: \"Beginner's Guide\",\n                        description: 'Hello ByteDancer!',\n                        position: 'bottom',\n                    },\n                    {\n                        target: document.querySelector('#controlled-demo-2'),\n                        title: 'Switch',\n                        description: 'This is a Semi Switch',\n                        position: 'bottom',\n                    },\n                    {\n                        target: document.querySelector('#controlled-demo-3'),\n                        title: 'Button',\n                        description: 'This is a Semi Button',\n                        position: 'bottom',\n                    },\n                ]}\n                onChange={(current) => {\n                    setCurrent(current);\n                }}\n                onFinish={() => {\n                    setVisible(false);\n                    setCurrent(0);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    setCurrent(0);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Strict Disabling in TreeSelect\nDESCRIPTION: Demonstrates the disableStrictly feature which prevents disabled nodes from being affected by parent/child selection states. Shows how China remains unaffected when Asia's selection state changes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    disable: true,\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return ( \n        <div>\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                disableStrictly\n                multiple\n                defaultValue={['Shanghai']}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Limited Tag Display in React\nDESCRIPTION: This example demonstrates how to use the Cascader component with a limit on the number of tags displayed. It uses maxTagCount and showRestTagsPopover props to control the tag display behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={treeData}\n            placeholder=\"Please selection\"\n            multiple\n            maxTagCount={1}\n            showRestTagsPopover={true}\n            restTagsPopoverProps={{ position: 'top' }}\n            defaultValue={[\n                ['impressionism', 'visualArts', 'Monet'],\n                ['impressionism', 'visualArts', 'Renoir']\n            ]}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Input Component with Validation States in React\nDESCRIPTION: Demonstrates different validation states for the Input component including warning and error states.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Input defaultValue='ies' validateStatus='warning'></Input>\n        <br/><br/>\n        <Input defaultValue='ies' validateStatus='error'></Input>\n        <br/><br/>\n        <Input defaultValue='ies'></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Typescript Interface for afterUploadResult\nDESCRIPTION: This TypeScript code defines the structure for `afterUploadResult` which controls post-upload behaviors. It enables updating the file status, validation message, removal status, name, and URL of the file after it has been uploaded.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// afterUploadResult:\n{\n    status?:'success' |'uploadFail' |'validateFail' |'validating' |'uploading' |'wait',\n    validateMessage?: React.ReactNode | string, // file validation information\n    autoRemove?: boolean, // Whether to remove the file from the fileList, the default is false\n    name?: string;\n    // The URL for previewing image file, usually the storage address returned by the Server after receiving response, supported since v2.63.\n    // Previous versions can also manually update the controlled properties in the fileList through onChange callback.\n    url?: string; // support after v2.63\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomRenderDragDemo Class Component\nDESCRIPTION: A class component that demonstrates a custom transfer component with sortable panels. It maintains a data source of items and provides customized rendering for both source and selected panels with drag and drop functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: JSX\nCODE:\n```\nclass CustomRenderDragDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: Array.from({ length: 100 }, (v, i) => ({\n                label: `Hdl Store ${i}`,\n                value: i,\n                disabled: false,\n                key: `key-${i}`,\n            })),\n        };\n        this.renderSourcePanel = this.renderSourcePanel.bind(this);\n        this.renderSelectedPanel = this.renderSelectedPanel.bind(this);\n        this.renderItem = this.renderItem.bind(this);\n    }\n\n    renderItem(type, item, onItemAction, selectedItems, sortableHandle) {\n        let buttonText = 'delete';\n\n        if (type === 'source') {\n            let checked = selectedItems.has(item.key);\n            buttonText = checked ? 'delete' : 'add';\n        }\n\n        const DragHandle = (sortableHandle && sortableHandle(() => <IconHandle className=\"pane-item-drag-handler\" />));\n\n        return (\n            <div className=\"semi-transfer-item panel-item\" key={item.label}>\n                {type === 'source' ? null : ( DragHandle ? <DragHandle /> : null) }\n                <div className=\"panel-item-main\" style={{ flexGrow: 1 }}>\n                    <p style={{ margin: '0 12px' }}>{item.label}</p>\n                    <Button\n                        theme=\"borderless\"\n                        type=\"primary\"\n                        onClick={() => onItemAction(item)}\n                        className=\"panel-item-remove\"\n                        size=\"small\"\n                    >\n                        {buttonText}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    renderSourcePanel(props) {\n        const {\n            loading,\n            noMatch,\n            filterData,\n            selectedItems,\n            allChecked,\n            onAllClick,\n            inputValue,\n            onSearch,\n            onSelectOrRemove,\n        } = props;\n        let content;\n        switch (true) {\n            case loading:\n                content = <Spin loading />;\n                break;\n            case noMatch:\n                content = <div className=\"empty sp-font\">{inputValue ? 'No search results' : 'No content yet'}</div>;\n                break;\n            case !noMatch:\n                content = filterData.map(item => this.renderItem('source', item, onSelectOrRemove, selectedItems));\n                break;\n            default:\n                content = null;\n                break;\n        }\n        return (\n            <section className=\"source-panel\">\n                <div className=\"panel-header sp-font\">Store list</div>\n                <div className=\"panel-main\">\n                    <Input\n                        style={{ width: 454, margin: '12px 14px' }}\n                        prefix={<IconSearch />}\n                        onChange={onSearch}\n                        showClear\n                    />\n                    <div className=\"panel-controls sp-font\">\n                        <span>Store to be selected: {filterData.length}</span>\n                        <Button onClick={onAllClick} theme=\"borderless\" size=\"small\">\n                            {allChecked ? 'Unselect all' : 'Select all'}\n                        </Button>\n                    </div>\n                    <div className=\"panel-list\">{content}</div>\n                </div>\n            </section>\n        );\n    }\n\n    renderSelectedPanel(props) {\n        const { selectedData, onClear, clearText, onRemove, onSortEnd } = props;\n        let mainContent = null;\n\n        if (!selectedData.length) {\n            mainContent = <div className=\"empty sp-font\">No data, please filter from the left</div>;\n        }\n\n        const renderSelectItem = ({ id, sortableHandle }) => {\n            const item = selectedData.find(item => id === item.key);\n            return this.renderItem('selected', item, onRemove, null, sortableHandle);\n        };\n\n        const sortData = selectedData.map(item => item.key);\n\n        mainContent = <div className=\"panel-main\" style={{ display: 'block' }}>\n            <SortableList onSortEnd={onSortEnd} items={sortData} renderItem={renderSelectItem}></SortableList>\n        </div>;\n\n        return (\n            <section className=\"selected-panel\">\n                <div className=\"panel-header sp-font\">\n                    <div>Selected: {selectedData.length}</div>\n                    <Button theme=\"borderless\" type=\"primary\" onClick={onClear} size=\"small\">\n                        {clearText || 'Clear '}\n                    </Button>\n                </div>\n                {mainContent}\n            </section>\n        );\n    }\n\n    render() {\n        const { dataSource } = this.state;\n        return (\n            <Transfer\n                defaultValue={[2, 4]}\n                onChange={values => console.log(values)}\n                className=\"component-transfer-demo-custom-panel\"\n                renderSourcePanel={this.renderSourcePanel}\n                renderSelectedPanel={this.renderSelectedPanel}\n                dataSource={dataSource}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Pagination - React/JSX\nDESCRIPTION: Demonstrates controlled pagination component with state management\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => {\n    const [page, setPage] = useState(3);\n    function onPageChange(currentPage) {\n        setPage(currentPage);\n    }\n    return (\n        <Pagination\n            total={200}\n            currentPage={page}\n            onPageChange={onPageChange}>\n        </Pagination>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Avatars in React\nDESCRIPTION: Shows how to create image avatars using the 'src' prop and how to adjust their size.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Avatar\n            alt=\"beautiful cat\"\n            src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n            style={{ margin: 4 }}\n        />\n        <Avatar\n            alt=\"cute cat\"\n            size=\"small\"\n            src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n            style={{ margin: 4 }}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Truncated Breadcrumb with Customization in React\nDESCRIPTION: Demonstrates various truncation options for Breadcrumb items, including tooltip customization and ellipsis positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const routes = ['Home', 'The is a very very very very long title', 'Detail'];\n    const { Text } = Typography;\n    return (\n        <>\n            <Text size=\"small\">Default</Text>\n            <Breadcrumb\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">No tooltip</Text>\n            <Breadcrumb\n                showTooltip={false}\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">No truncation</Text>\n            <Breadcrumb\n                showTooltip={{ width: 'auto' }}\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">Ellipsis from middle of text</Text>\n            <Breadcrumb\n                showTooltip={{ ellipsisPos: 'middle' }}\n                routes={routes}\n            />\n            <br/>\n            <Text size=\"small\">Customize tooltip</Text>\n            <Breadcrumb\n                showTooltip={{ opts: { position: 'topLeft' } }}\n                routes={routes}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Animation Instance\nDESCRIPTION: Example showing how to access the current animation instance using getAnimationInstance callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n\n    return (\n        <div>\n            <Lottie\n                getAnimationInstance={animation => {\n                    console.log(animation);\n                }}\n                params={{ path: jsonURL }}\n                width={'300px'}\n                height={'300px'}\n            />\n            ;\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar in Range Mode\nDESCRIPTION: Shows how to use the Calendar component in range mode, specifying a date range.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => (\n    <Calendar mode=\"range\" range={[new Date(2020, 8, 26), new Date(2020, 8, 31)]} />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Right Sidebar Layout in React\nDESCRIPTION: Demonstrates a layout with a right sidebar using the Sider component positioned after the Content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Header style={commonStyle}>Header</Header>\n            <Layout>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n                <Sider style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}>Sider</Sider>\n            </Layout>\n            <Footer style={commonStyle}>Footer</Footer>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Break for Typography Component Tooltips in SCSS\nDESCRIPTION: This SCSS snippet demonstrates how to configure word-break properties for the Typography component's tooltips to handle long text without line breaks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n// 按需配置 word-break\n\n.components-typography-demo {\n    word-break: break-word;\n    // 或\n    word-break: break-all;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Scroll Arrows in Tabs Component (React)\nDESCRIPTION: Demonstrates how to customize the scroll arrows in the Tabs component using the 'renderArrow' prop. This example includes a dropdown menu for the overflowed items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, Dropdown } from '@douyinfe/semi-ui';\n\n() => {\n    const [activeKey, setActiveKey] = useState('Tab-0');\n    const renderArrow = (items, pos, handleArrowClick) => {\n        const style = {\n            width: 32,\n            height: 32,\n            margin: '0 12px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderRadius: '100%',\n            background: 'rgba(var(--semi-grey-1), 1)',\n            color: 'var(--semi-color-text)',\n            cursor: 'pointer',\n        };\n        return (\n            <Dropdown\n                render={\n                    <Dropdown.Menu>\n                        {items.map(item => {\n                            return (\n                                <Dropdown.Item onClick={() => setActiveKey(item.itemKey)}>{item.itemKey}</Dropdown.Item>\n                            );\n                        })}\n                    </Dropdown.Menu>\n                }\n            >\n                {pos === 'start' ? (\n                    <div style={style} onClick={handleArrowClick}>\n                        ←\n                    </div>\n                ) : (\n                    <div style={style} onClick={handleArrowClick}>\n                        →\n                    </div>\n                )}\n            </Dropdown>\n        );\n    };\n\n    return (\n        <Tabs\n            renderArrow={renderArrow}\n            style={{ width: '50%', margin: '20px' }}\n            activeKey={activeKey}\n            type=\"card\"\n            collapsible\n            onChange={k => setActiveKey(k)}\n        >\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                    Content of card tab {i}\n                </TabPane>\n            ))}\n        </Tabs>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CodeHighlight for JavaScript\nDESCRIPTION: Demonstrates how to use the CodeHighlight component to highlight JavaScript code. It shows a React component with a click handler.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n\n    return <CodeHighlight\n        language={\"javascript\"} \n        code={\n        `\nimport * as React from 'react\"\nconst Test = ()=>{\n    const handleClick = ()=>{\n        alert(\"Click\")\n    }\n    return <div onClick={handleClick}>test</div>\n}`\n    }/>\n}\n```\n\n----------------------------------------\n\nTITLE: File Type Restrictions in React Upload Component\nDESCRIPTION: Shows how to restrict file types for upload using the 'accept' prop in the Upload component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    let imageOnly = 'image/*';\n    let videoOnly = 'video/*';\n    let fileLimit = '.pdf,.png,.jpeg';\n    return (\n        <>\n            <Upload action={action} accept={imageOnly} style={{ marginBottom: 12 }}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    上传图片\n                </Button>\n            </Upload>\n            <Upload action={action} accept={videoOnly} style={{ marginBottom: 12 }}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    上传视频\n                </Button>\n            </Upload>\n            <Upload action={action} accept={fileLimit}>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    上传 PDF, PNG, JPEG\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Carousel with Theme Switching in React\nDESCRIPTION: Showcases a Carousel component with the ability to switch between different themes (primary, light, dark). It uses RadioGroup for theme selection and demonstrates state management for theme changes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, RadioGroup, Radio, Space, Typography } from '@douyinfe/semi-ui';\n\n() => {\n    const { Title, Paragraph } = Typography;\n    const [theme, setTheme] = useState('primary');\n\n    const style = {\n        width: '100%',\n        height: '400px',\n    };\n\n    const titleStyle = { \n        position: 'absolute', \n        top: '100px', \n        left: '100px'\n    };\n\n    const colorStyle = {\n        color: '#1C1F23'\n    };\n\n    const renderLogo = () => {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }}/>\n        );\n    };\n\n    const imgList = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n    ];\n\n    const textList = [\n        ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n        ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n        ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n    ];\n    \n    return (\n        <div>\n            <Carousel style={style} theme={theme} autoPlay={false}>\n                {\n                    imgList.map((src, index) => {\n                        return (\n                            <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                    {renderLogo()}\n                                    <Title heading={2} style={colorStyle}>{textList[index][0]}</Title>\n                                    <Space vertical align='start'>\n                                        <Paragraph style={colorStyle}>{textList[index][1]}</Paragraph>\n                                        <Paragraph style={colorStyle}>{textList[index][2]}</Paragraph>\n                                    </Space>\n                                </Space>\n                            </div>\n                        );\n                    })\n                }\n            </Carousel>\n            <br/>\n            <Space> \n                <div>theme</div>\n                <RadioGroup onChange={e => setTheme(e.target.value)} value={theme} type=\"button\">\n                    <Radio value='primary'>primary</Radio>\n                    <Radio value='light'>light</Radio>\n                    <Radio value='dark'>dark</Radio>\n                </RadioGroup>\n            </Space>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing 12-hour System in TimePicker for React\nDESCRIPTION: Shows how to use the 12-hour time system in TimePicker, with optional format customization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <TimePicker use12Hours />\n            <br />\n            <br />\n            <TimePicker use12Hours format=\"a h:mm\" />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Layout Breakpoint Configuration\nDESCRIPTION: Defines the responsive breakpoint configuration map used by the Layout component for different screen sizes\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n{\n    xs: '(max-width: 575px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n    xxl: '(min-width: 1600px)',\n};\n```\n\n----------------------------------------\n\nTITLE: Tabs with Custom More Dropdown in React\nDESCRIPTION: Shows advanced configuration of the 'more' dropdown, including custom rendering of the trigger and dropdown properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <Tabs\n            more={{\n                count: 4,\n                render: () => {\n                    return <Button type='tertiary'>Click to show More</Button>;\n                },\n                dropdownProps: { trigger: 'click', position: 'bottomRight' },\n            }}\n            style={{ width: '60%', margin: '20px' }}\n            type=\"card\"\n        >\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                    Content of card tab {i}\n                </TabPane>\n            ))}\n        </Tabs>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Range Selection in TimePicker for React\nDESCRIPTION: Demonstrates how to use the TimePicker for selecting a time range, including 12-hour format.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <TimePicker type=\"timeRange\" defaultValue={['10:23:15', '12:38:32']} />\n            <br />\n            <br />\n            <TimePicker type=\"timeRange\" use12Hours format=\"a h:mm\" defaultValue={['AM 08:11', 'PM 11:21']} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Alignment Settings in Descriptions\nDESCRIPTION: Shows different alignment options (center, justify, left, plain) for the Descriptions component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Tag, Card } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        { key: '实际用户数量', value: '1,480,000' },\n        { key: '7天留存', value: '98%' },\n        { key: '安全等级', value: '3级' },\n        { key: '垂类标签', value: <Tag style={{ margin: 0 }}>电商</Tag> },\n        { key: '认证状态', value: '未认证' },\n    ];\n    const style = {\n        margin: '10px',\n    };\n    return (\n        <>\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                <Card shadows='always' style={style}>\n                    <Descriptions align=\"center\" data={data} />\n                </Card>\n                <Card shadows='always' style={style}>\n                    <Descriptions align=\"justify\" data={data} />\n                </Card>\n                <Card shadows='always' style={style}>\n                    <Descriptions align=\"left\" data={data} />\n                </Card>\n                <Card shadows='always' style={style}>\n                    <Descriptions align=\"plain\" data={data} />\n                </Card>\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Input Component with Clear Button in React\nDESCRIPTION: Demonstrates an Input component with a clear button that allows users to delete all content with one click.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input showClear defaultValue='click to clear'></Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled Expansion with Search in Semi Design Tree Component\nDESCRIPTION: This example demonstrates how to implement a Tree component with controlled expansion and search functionality. It uses expandedKeys for controlled expansion and handles the search results to update the expanded nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\n() => {\n    const [expandedKeys, setExpandedKeys] = useState([]);\n    const treeData = [\n        {\n            label: '亚洲',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: '中国',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: '北京',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: '上海',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: '日本',\n                    value: 'Japan',\n                    key: '0-1',\n                },\n            ],\n        },\n        {\n            label: '北美洲',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return (\n        <Tree\n            style={{ width: 300 }}\n            treeData={treeData}\n            filterTreeNode\n            expandedKeys={expandedKeys}\n            onExpand={expandedKeys => {\n                setExpandedKeys(expandedKeys);\n            }}\n            onSearch={(inputValue, filteredExpandedKeys) => {\n                setExpandedKeys([...filteredExpandedKeys]);\n            }}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Spin Component with Delay\nDESCRIPTION: Demonstrates how to add a delay before the Spin component appears, which is useful for preventing flicker during quick operations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Spin, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [loading, toggleLoading] = useState(false);\n\n    const toggle = () => {\n        toggleLoading(!loading);\n    };\n    return (\n        <div>\n            <Button onClick={toggle} style={{ marginRight: 20 }}>\n                Delayed spin\n            </Button>\n            <Spin delay={1000} spinning={loading}></Spin>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 显示普通Toast提示 (React)\nDESCRIPTION: 展示如何使用Toast.info()方法显示一个基本的提示信息，并应用堆叠样式。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { throttle } from 'lodash-es';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n        stack: true,\n    };\n\n    const handleClose = () => {\n        throttled.cancel();\n    };\n    const throttleOpts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n        onClose: handleClose,\n        stack: true,\n    };\n    const throttled = throttle(() => Toast.info(throttleOpts), 10000, { trailing: false });\n\n    return (\n        <div>\n            <Button onClick={() => Toast.info(opts)}>Display Toast</Button>\n            <br />\n            <br />\n            <Button onClick={throttled}>Throttled Toast</Button>\n        </div>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Customized Rating Component in React\nDESCRIPTION: Shows how to customize the Rating component with different characters, sizes, and counts.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Rating } from '@douyinfe/semi-ui';\nimport { IconLikeHeart } from '@douyinfe/semi-icons';\n\n() => (\n    <div>\n        <Rating style={{ color: 'red' }} character={<IconLikeHeart size=\"extra-large\" />} defaultValue={3} />\n        <br />\n        <br />\n        <Rating\n            style={{ color: 'red' }}\n            size={48}\n            allowHalf\n            character={<IconLikeHeart style={{ fontSize: 48 }} />}\n            defaultValue={3}\n        />\n        <br />\n        <br />\n        <Rating size={18} character={'S'} defaultValue={3} />\n        <br />\n        <br />\n        <Rating Count={10} defaultValue={6} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Navigation Style Steps\nDESCRIPTION: Implements navigation-style steps using type='nav', suitable for non-interactive step displays\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <Steps type=\"nav\" current={1} style={{ margin: 'auto' }} onChange={(i)=>console.log(i)}>\n            <Steps.Step title=\"Register an account\" />\n            <Steps.Step title=\"There is a lot of text in this project\" />\n            <Steps.Step title=\"Product Usage\" />\n            <Steps.Step title=\"Looking forward to trying out features\" />\n        </Steps>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart Implementation with VChart\nDESCRIPTION: Creates a stacked bar chart showing population distribution by age groups across states. Includes stacking functionality and orientation controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst commonSpec = {\n  type: 'bar',\n  stack: true,\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { State: 'WY', Age: 'Under 5 Years', Population: 25635 },\n        { State: 'WY', Age: '5 to 13 Years', Population: 1890 },\n        { State: 'WY', Age: '14 to 17 Years', Population: 9314 }\n      ]\n    }\n  ],\n  title: {\n    visible: true,\n    text: 'Stacked bar chart',\n    subtext: 'This is a stacked bar chart',\n  },\n  seriesField: 'Age',\n  legends: {\n    visible: true\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Themed AudioPlayer Implementation\nDESCRIPTION: Demonstrates how to implement AudioPlayer with different themes (light/dark) using the theme prop\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const audioUrlArrObj = [\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n            title: 'Audio Title 1',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3',\n            title: 'Audio Title 2',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n    ];\n  \n    return (\n        <div style={{ width: '100%' }}>\n            <AudioPlayer\n                audioUrl={audioUrlArrObj}\n                theme=\"light\"\n            />\n        </div>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Avatar Color Variations\nDESCRIPTION: Shows different color options for Avatar including default colors and custom styling\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Avatar style={{ margin: 4 }} alt='Alice Swift'>AS</Avatar>\n        <Avatar color=\"red\" style={{ margin: 4 }} alt='Bob Matteo'>\n            BM\n        </Avatar>\n        <Avatar color=\"light-blue\" style={{ margin: 4 }} alt='Taylor Joy'>\n            TJ\n        </Avatar>\n        <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf', margin: 4 }} alt='Zank Lance'>ZL</Avatar>\n        <Avatar style={{ backgroundColor: '#87d068', margin: 4 }} alt='Youself Zhang'>YZ</Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AutoComplete Component Properties in Markdown\nDESCRIPTION: This snippet presents a markdown table that defines the properties, instructions, types, default values, and version information for the AutoComplete component in Semi-Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions                                                                                                                                                                                                                            | Type | Default | Version|\n| --- |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| --- | --- | -- |\n| autoFocus | Whether to auto focus                                                                                                                                                                                                                   | bool | false | 1.16.0|\n| autoAdjustOverflow | Whether to automatically adjust the direction when the floating layer is blocked<br/>                                                                                                                                                   | bool | true | 0.27.0|\n| className | Style class name                                                                                                                                                                                                                        | string | |\n| clearIcon | Can be used to customize the clear button, valid when showClear is true                                                                                                                                                                 | ReactNode | |  2.25.0|\n| data | The data source of the candidates, which can be a string array or an object array                                                                                                                                                       | array | [] |\n| defaultActiveFirstOption | Whether to highlight the first option by default (press enter to select directly)                                                                                                                                                       | bool | false |\n| defaultOpen | Whether to expand the drop-down menu by default                                                                                                                                                                                         | boolean | false |\n| defaultValue | Defaults                                                                                                                                                                                                                                | string | |\n| disabled | Whether to disable                                                                                                                                                                                                                      | boolean | false |\n| dropdownClassName | Css class name of the drop-down list                                                                                                                                                                                                    | string |  |\n| dropdownStyle | Inline style of the drop-down list                                                                                                                                                                                                      | object |  |\n| emptyContent | Customize the drop-down content when data is empty                                                                                                                                                                                      | ReactNode | null | 1.16.0|\n| getPopupContainer | Specify the parent DOM, the floating layer of the drop-down list will be rendered into the DOM, and the customization needs to set `position: relative`  This will change the DOM tree position, but not the view's rendering position.                                                                                 | () => HTMLElement | () => document.body |\n| loading | Whether the drop-down list shows loading animation                                                                                                                                                                                      | boolean | false |\n| maxHeight | The maximum height of the drop-down list                                                                                                                                                                                                | number\\|string | 300 |\n| motion | Is there an animation when the drop-down list appears/hidden                                                                                                                                                                            | boolean | true |\n| onSelectWithObject | When clicking on the candidate, whether to add other attributes of the selected item option as callback parameters. When set to true, the input parameter type of onSelect will change from `string` to object: {value, label, ...rest} | boolean | false | 1.23.0|\n| placeholder | Input box prompt                                                                                                                                                                                                                        | string | |\n| position | The display position of the drop-down menu, the optional values are the same as the tooltip component                                                                                                                                   | string | 'bottomLeft' |\n| prefix | The prefix tag of the select box                                                                                                                                                                                                        | ReactNode |  | 0.23.0|\n| renderItem | Control the rendering of drop-down list candidates                                                                                                                                                                                      | (option: string\\|Item)=> React.Node |  |\n| renderSelectedItem | Customize the drop-down list through renderSelectedItem after the candidate is clicked and selected, the content rendered in the select box<br/>** only supports the return value of String type **                                     | (option: string\\|Item) => string |  | 0.23.0|\n| showClear | Whether to show the clear button                                                                                                                                                                                                        | boolean | false |\n| size | Size, optional `small`, `default`, `large`                                                                                                                                                                                              | string | `default` |\n| style | style                                                                                                                                                                                                                                   | object |  |\n| suffix | The prefix tag of the select box                                                                                                                                                                                                        | ReactNode |  | 0.23.0|\n| value | The current value                                                                                                                                                                                                                       | string\\|number |  |\n| validateStatus | Validation status, optional values are `default`, `error`, `warning`, and the default is default. Only affect the display style                                                                                                         | string | 'default' | 1.14.0|\n| zIndex | ZIndex of the drop-down menu                                                                                                                                                                                                            | number |  |\n| onBlur | Callback when the focus is lost                                                                                                                                                                                                         | Function(event) | |\n| onChange | Input box change / change when the candidate is selected                                                                                                                                                                                | Function(value:string\\|number) | | 1.23.0|\n| onFocus | The callback when the focus is obtained                                                                                                                                                                                                 | Function(event) | |\n| onKeyDown | keydown callback                                                                                                                                                                                                                        | (e: React.KeyboardEvent) => void | | 2.21.0 |\n| onSearch | Callback when input changes                                                                                                                                                                                                             | Function(value: string) | |\n```\n\n----------------------------------------\n\nTITLE: Anchor with Tertiary Rail Theme in React\nDESCRIPTION: Shows the Anchor component with tertiary rail theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                railTheme={'tertiary'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#尺寸\" title=\"尺寸\" />\n                <Anchor.Link href=\"#滑轨主题\" title=\"滑轨主题\" />\n                <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n                <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n                <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Styled Modal in React with Semi Design\nDESCRIPTION: Demonstrates how to create a Modal with custom styling using style props like bodyStyle and centered. Shows implementation of a basic modal with custom content height and centered positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>Custom Style</Button>\n                <Modal\n                    title=\"Custom Style\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    centered\n                    bodyStyle={{ overflow: 'auto', height: 200 }}\n                >\n                    <p style={{ lineHeight: 1.8 }}>Semi Design is a design system developed and maintained by IES Front-end Team and UED Team</p>\n                    <p style={{ lineHeight: 1.8 }}>Semi Design create a consistent, good-looking, easy-to-use, and efficient user experience with a user-centric, content-first, and human-friendly design system.\n                    </p>\n                    <ul>\n                        <li><p>Content-first</p></li>\n                        <li><p>Customized theming</p></li>\n                        <li><p>Internationalized</p></li>\n                        <li><p>Humanism</p></li>\n                    </ul>\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Buttons in Different Styles\nDESCRIPTION: Demonstrates how to create buttons with icons, including different states, types, themes, and icon positions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\nimport { IconCamera, IconSidebar, IconChevronDown } from '@douyinfe/semi-icons';\n\nfunction ButtonDemo() {\n    return (\n        <div>\n            <strong>Default Status: </strong>\n            <Button icon={<IconCamera />} aria-label=\"Screenshot\" />\n            <br/><br/>\n            <strong>Disabled Status：</strong>\n            <Button icon={<IconCamera />} aria-label=\"Screenshot\"/>\n            <br/><br/>\n            <strong>With Type: </strong>\n            <span className=\"btn-margin-right\">\n                <Button type=\"primary\" icon={<IconCamera />} aria-label=\"Screenshot\"/>\n                <Button type=\"secondary\" icon={<IconCamera />} aria-label=\"Screenshot\"/>\n                <Button type=\"warning\" icon={<IconCamera />} aria-label=\"Screenshot\"/>\n                <Button type=\"danger\" icon={<IconCamera />} aria-label=\"Screenshot\"/>\n            </span>\n            <br/><br/>\n            <strong>Change Theme: </strong>\n            <Button icon={<IconCamera />} theme=\"solid\" style={{ marginRight: 10 }} aria-label=\"Screenshot\"/>\n            <Button icon={<IconCamera />} theme=\"light\" aria-label=\"Screenshot\"/>\n            <br/><br/>\n            <strong>Change Icon Position: </strong>\n            <Button icon={<IconSidebar />} theme=\"solid\" style={{ marginRight: 10 }}>Collapse</Button>\n            <Button icon={<IconChevronDown />} theme=\"solid\" iconPosition=\"right\">Expand Options</Button>\n            <br/><br/>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Sizes in Resizable Component\nDESCRIPTION: Demonstrates how to set minimum and maximum sizes for the resizable component using 'minWidth', 'minHeight', 'maxWidth', and 'maxHeight' props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div style={{ width: '500px', height: '60%' }}>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                maxWidth={200}\n                maxHeight={300}\n                minWidth={50}\n                minHeight={50}\n                defaultSize={{\n                    width: 100,\n                    height: 100,\n                }}\n            >\n                <div style={{ marginLeft: '20%' }}>width在50到200之间，height在50到300之间</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ColorPicker in Portal Mode\nDESCRIPTION: Demonstrates the basic usage of the ColorPicker component in portal mode with alpha channel support. Also shows how to use a custom trigger element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker, Button } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return (\n        <div>\n            <ColorPicker\n                alpha={true}\n                onChange={value => {\n                    console.log(value);\n                }}\n                usePopover={true}\n            />\n\n            <br />\n            <div>自定义 trigger</div>\n\n            <ColorPicker\n                alpha={true}\n                onChange={value => {\n                    console.log(value);\n                }}\n                usePopover={true}\n            >\n                <Button> Trigger </Button>\n            </ColorPicker>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Card in Semi Design\nDESCRIPTION: Demonstrates how to create a basic card with a title, content, and extra header content using the Card component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n  \n    return (\n        <Card \n            title='Semi Design' \n            style={{ maxWidth: 360 }}\n            headerExtraContent={\n                <Text link>\n                    更多\n                </Text>\n            }\n        >\n            Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Generated importSemiComponentStyle Function for Shadow DOM\nDESCRIPTION: Example of the importSemiComponentStyle function generated by the Semi plugin. It imports and inserts necessary styles for Semi UI components into the shadow DOM.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/web-components/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function importSemiComponentStyle(componentsStr, root, cb){\n  const modules = await Promise.all([\n    // Basic style\n    import(\"@douyinfe/semi-ui/lib/es/_base/base.scss\"),\n    // Dependent component styles\n    import(\"@douyinfe/semi-icons/lib/es/styles/icons.scss\"),\n    // Component style\n    import(\"@douyinfe/semi-foundation/lib/es/button/button.scss\")\n  ]);\n  const styleStr = modules.map(module => {\n    const cssContent = module.default;\n    return cssContent;\n  });\n  styleStr.forEach(css => {\n    const style = document.createElement('style');\n    style.innerHTML = css;\n    root.prepend(style);\n  });\n  if(typeof cb === 'function') {\n    cb();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline Component with Semi-Design\nDESCRIPTION: Implements a Timeline component showing a sequence of events with different states (ongoing, success, error). Each item includes a timestamp and status message to represent different stages in a workflow.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Timeline>\n    <Timeline.Item time='2019-07-14 10:35' type='ongoing'>审核中</Timeline.Item>\n    <Timeline.Item time='2019-06-13 16:17' type='success'>发布成功</Timeline.Item>\n    <Timeline.Item time='2019-05-14 18:34' type='error'>审核失败</Timeline.Item>\n</Timeline>\n```\n\n----------------------------------------\n\nTITLE: Input with Prefix/Suffix\nDESCRIPTION: Shows how to add prefix and suffix elements to the Input component including icons and text.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input, Typography } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\n() => (\n    <>\n        <Input prefix={<IconSearch />} showClear></Input>\n        <br/><br/>\n        <Input prefix=\"Prefix\" showClear></Input>\n        <br/><br/>\n        <Input suffix={<IconSearch />} showClear></Input>\n        <br/><br/>\n        <Input suffix={<Typography.Text strong type='secondary' style={{ marginRight: 8 }}>Suffix</Typography.Text>} showClear></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Default Steps Implementation\nDESCRIPTION: Demonstrates the default implementation of Steps component with three steps showing different states\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps } from '@douyinfe/semi-ui';\n\n() => (\n    <Steps current={1} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description.\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description.\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description.\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Photo Wall Preview Icons and Actions\nDESCRIPTION: Shows how to customize the preview icon using renderPicPreviewIcon and handle preview clicks with onPreviewClick. This example opens a new window when a user clicks on the preview icon.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus, IconEyeOpened } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dy.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n    const handlePreview = (file) => {\n        const feature = \"width=300,height=300\";\n        window.open(file.url, 'imagePreview', feature);\n    };\n    return (\n        <>\n            <Upload\n                action={action}\n                listType=\"picture\"\n                showPicInfo\n                accept=\"image/*\"\n                multiple\n                defaultFileList={defaultFileList}\n                onPreviewClick={handlePreview}\n                renderPicPreviewIcon={()=><IconEyeOpened style={{ color: 'var(--semi-color-white)', fontSize: 24 }} />}\n            >\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Theme Registration for Legacy Semi Versions\nDESCRIPTION: Example of manually registering and switching between light and dark themes for Semi versions below 2.47.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport semiDesignLight from '@visactor/vchart-semi-theme/public/semiDesignLight.json';\nimport semiDesignDark from '@visactor/vchart-semi-theme/public/semiDesignDark.json';\nimport VChart from '@visactor/vchart';\n// register the theme\nVChart.ThemeManager.registerTheme('semiDesignLight', semiDesignLight);\nVChart.ThemeManager.registerTheme('semiDesignDark', semiDesignDark);\n// apply the light theme\nVChart.ThemeManager.setCurrentTheme('semiDesignLight');\n// apply the dark theme\nVChart.ThemeManager.setCurrentTheme('semiDesignDark');\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Validation States in React\nDESCRIPTION: Demonstrates how to set different validation states (warning, error) for the AutoComplete component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <AutoComplete defaultValue=\"ies\" validateStatus=\"warning\"></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete defaultValue=\"ies\" validateStatus=\"error\"></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete defaultValue=\"ies\"></AutoComplete>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Controlling Specific Resize Directions\nDESCRIPTION: Demonstrates how to enable or disable specific resize directions using the enable prop. This example toggles the left resize handle using a switch component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable, Switch, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [b, setB] = useState(false)\n  const { Title } = Typography;\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n        <div style={{ display: 'flex', alignItems: 'center', margin: 8 }}>\n          <Switch checked={b} onChange={setB}></Switch>\n            <Title heading={6} style={{ margin: 8 }}>\n                {b ? 'able' : 'disable'}\n            </Title>\n        </div>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n        enable={{\n          left: b\n        }}\n        defaultSize={{\n          width: 200,\n          height: 200,\n        }}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          {'enable.left:' + b}\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Banner Implementation in React\nDESCRIPTION: Demonstrates the basic usage of the Banner component with a toggle button to show/hide the banner. The example shows integration with Layout components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Banner, Layout, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const changeVisible = () => {\n        setVisible(!visible);\n    };\n    const { Header, Footer, Content } = Layout;\n\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n\n    const banner = (\n        <Banner \n            onClose={changeVisible}\n            description=\"Semi D2C 现已支持 Figma DevMode, 安装插件，随时查阅图层对应的前端代码\"\n        />\n    );\n    return (\n        <>\n            <Layout className='components-layout-demo banner-basic'>\n                <Header style={commonStyle}>Header</Header>\n                {visible? banner : null}\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n                <Footer style={commonStyle}>Footer</Footer>\n            </Layout>\n            <Button\n                onClick={changeVisible}\n                style={{\n                    display: 'block',\n                    width: '120px',\n                    margin: '0 auto'\n                }}\n            >\n                { visible ? 'Hide Banner' : 'Show Banner' }\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Triggering with Dropdown Component in React\nDESCRIPTION: Example of a Dropdown component with various mouse event handlers (onClick, onMouseEnter, onMouseLeave, onContextMenu) that trigger Toast notifications when interacting with menu items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Button, Toast } from '@douyinfe/semi-ui';\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\n() => {\n    return (\n        <Dropdown\n            trigger={'click'}\n            position={'bottomLeft'}\n            render={\n                <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => Toast.info({ content: 'You clicked me!' })}>\n                        1: click me!\n                    </Dropdown.Item>\n                    <Dropdown.Item onMouseEnter={() => Toast.info({ content: 'Nice to meet you!' })}>\n                        2: mouse enter\n                    </Dropdown.Item>\n                    <Dropdown.Item onMouseLeave={() => Toast.info({ content: 'See ya!' })}>\n                        3: mouse leave\n                    </Dropdown.Item>\n                    <Dropdown.Item onContextMenu={() => Toast.info({ content: 'Right clicked!' })}>\n                        4: right click\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            }\n        >\n            <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                Click Me\n            </Button>\n        </Dropdown>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Custom Rendering for Ellipsis Area in React\nDESCRIPTION: Shows how to use the renderMore method to customize the rendering of the ellipsis area in the Breadcrumb component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Demo() {\n    const separator = '-'; // 用于拼接 restItem 数组项的分隔符\n    const renderMore = restItem => {\n        const content = (\n            <>\n                {\n                    restItem.map((item, idx) => (\n                        <React.Fragment key={`restItem-${idx}`}>\n                            {item}\n                            {idx !== restItem.length - 1 &&\n                                <span style={{ color: 'var(--semi-color-text-2)', marginRight: '6px' }}>\n                                    {separator}\n                                </span>\n                            }\n                        </React.Fragment>\n                    ))\n                }\n            </>\n        );\n        return (\n            <Popover\n                content={content}\n                style={{ padding: 12 }}\n                showArrow\n            >\n                <IconMore />\n            </Popover>\n        );\n    };\n    return (\n        <>\n            <Breadcrumb\n                renderMore={restItem => renderMore(restItem)}\n                onClick={(item, e) => console.log(item, e)}\n            >\n                <Breadcrumb.Item>首页</Breadcrumb.Item>\n                <Breadcrumb.Item>当层级很多的时候</Breadcrumb.Item>\n                <Breadcrumb.Item>又一层</Breadcrumb.Item>\n                <Breadcrumb.Item>再一层</Breadcrumb.Item>\n                <Breadcrumb.Item>上上一层</Breadcrumb.Item>\n                <Breadcrumb.Item>上一层</Breadcrumb.Item>\n                <Breadcrumb.Item>详情页</Breadcrumb.Item>\n            </Breadcrumb>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Numbers-Only InputNumber\nDESCRIPTION: Implementation of InputNumber that only accepts numeric input using formatter and onNumberChange.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\nfunction Demo () {\n    return (\n        <InputNumber\n            formatter={value => `${value}`.replace(/\\D/g, '')}\n            onNumberChange={number => console.log(number)}\n            min={0}\n            max={Number.MAX_SAFE_INTEGER}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Theming Badge Component in React\nDESCRIPTION: Shows how to use the theme and type props to customize the styling of the Badge component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const bgStyle = {\n        padding: '8px',\n    };\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={bgStyle}>\n                <Badge count={5} theme='solid' >\n                    <Avatar color='indigo' shape='square' style={style}>XZ</Avatar>\n                </Badge>\n            </div>\n            <div style={bgStyle}>\n                <Badge count={5} theme='light' >\n                    <Avatar color='indigo' shape='square' style={style}>YB</Avatar>\n                </Badge>\n            </div>\n            <div style={bgStyle}>\n                <Badge count={5} theme='inverted' >\n                    <Avatar color='light-green' shape='square' style={style}>LX</Avatar>\n                </Badge>\n            </div>\n            <br/>\n            <div style={bgStyle}>\n                <Badge dot theme='solid' >\n                    <Avatar color='light-green' shape='square' style={style}>YZ</Avatar>\n                </Badge>\n            </div>\n            <div style={bgStyle}>\n                <Badge dot theme='light' >\n                    <Avatar color='lime' shape='square' style={style}>HW</Avatar>\n                </Badge>\n            </div>\n            <div style={{ padding: '8px', borderRadius: '4px', backgroundColor: 'var(--semi-color-fill-0)' }}>\n                <Badge dot theme='inverted' >\n                    <Avatar color='lime' shape='square' style={style}>XM</Avatar>\n                </Badge>\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: JSX-based Description Component\nDESCRIPTION: Shows how to use the Description component with JSX syntax using Descriptions.Item components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Descriptions>\n            <Descriptions.Item itemKey=\"Actual Users\">1,480,000</Descriptions.Item>\n            <Descriptions.Item itemKey=\"7-day Rentention\">98%</Descriptions.Item>\n            <Descriptions.Item itemKey=\"Security Level\">III</Descriptions.Item>\n            <Descriptions.Item itemKey=\"Category Tag\">E-commerce</Descriptions.Item>\n            <Descriptions.Item itemKey=\"Authorized State\">Unauthorized</Descriptions.Item>\n        </Descriptions>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 自定义Toast样式 (React)\nDESCRIPTION: 展示如何使用theme属性来设置Toast的浅色填充样式，以提高与界面的对比度。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n        theme: 'light',\n    };\n\n    return (\n        <>\n            <Button onClick={() => Toast.info(opts)}>Info</Button>\n            <br />\n            <br />\n            <Button style={{ color: `var(--semi-color-success)` }} onClick={() => Toast.success(opts)}>Success</Button>\n            <br />\n            <br />\n            <Button type=\"warning\" onClick={() => Toast.warning(opts)}>\n                Warning\n            </Button>\n            <br />\n            <br />\n            <Button type=\"danger\" onClick={() => Toast.error(opts)}>\n                Error\n            </Button>\n        </>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of MarkdownRender Component in React\nDESCRIPTION: Demonstrates basic usage of the MarkdownRender component with Markdown content and Semi UI components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/markdownrender/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MarkdownRender } from '@douyinfe/semi-ui';\nimport * as SemiMarkdownComponents from \"@douyinfe/semi-ui/markdownRender/components\"\n\nfunction Demo(){\n    return <MarkdownRender components={SemiMarkdownComponents}\n                           raw={`\n#### Semi Design DSM\n[Semi DSM](https://semi.design/dsm) is a design system management tool provided by Semi Design. It supports global and component-level style customization and keeps synchronization between Figma and front-end code.\nSuitable for teams of all sizes. Whether you need to simplify workflow, improve team collaboration, or increase productivity, we have features suitable for you.\n\n##### Medium and large enterprises\n- Up to 3000+ Design Tokens, in-depth customization of every detail, color, shadow, margin, rounded corners, dynamic effects, rendering structure can be customized freely, say goodbye to ~~CSS hard coding~~\n- Powerful, UI lib verified by thousands of projects in Douyin, easy to deal with various complex scenarios\n- A11y barrier-free and friendly, with complete international functions\n- Community-oriented, completely open source, no usage restrictions\n- From designOps to devOps, automated workflow, Figma UI Kit one-click brush into the theme, generate Style Guideline, develop a line of npm code configuration access\n\n##### Startups\n- No need to invest a lot of R&D resources from 0 to 1, quickly reuse excellent solutions from the open source community, and quickly customize a design system with brand characteristics at low cost.\n- One-click support for dark mode generation, support for quickly generating a color system containing 320 full color levels and compatible with dark/light modes based on brand colors, and support dynamic switching\n- Continuously evolving, DSM + Semi Design components are professionally maintained by the <u>TikTok front-end architecture team</u>, and have been stable for more than five years, and are trustworthy\n\n##### Freelance designer/individual developer\n- Quickly create design systems of different styles at low cost, less time, faster delivery\n- Friendly R&D access, no need for repeated communication, deliver npm package products, and complete code access with one click\n\n![DSM](https://semi.design/dsm_manual/content/introduction/start/start-intro.png)\n\n| Support | Markdown tables | c | d |\n| - | :- | -: | :-: |\n| 1 | 2 | 3 | 4 |\n| 21 | 22 | 23 | 24 |\n| 31 | 32 | 33 | 34 |\n| 41 | 42 | 43 | 44 |\n    `}/>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transfer Component Implementation\nDESCRIPTION: Demonstrates basic usage of Transfer component with a simple data array containing 100 items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n() => {\n    const data = Array.from({ length: 100 }, (v, i) => {\n        return {\n            label: `Item ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            dataSource={data}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Cascader TriggerRender Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the triggerRender property used in the Cascader component. This defines the parameters available when customizing the trigger display of the select box, including component props, state values, and callback functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TriggerRenderProps {\n    /* All props passed to Cascader by users */\n    componentProps: CascaderProps;\n    /* Whether to disable Cascader */\n    disabled: boolean;\n    /**\n     * The hierarchical position of the selected node in treeData,\n     *  as in the following example, when \"Asia-China-Beijing\" is \n     *  selected, the value here is 0-0-1\n     */\n    value?: string | Set<string>;\n    /* The input value of the current Input box */\n    inputValue: string;\n    /**\n     * The function used to update the value of the input box. You\n     *  should call this function when the value of the Input component\n     *  customized by triggerRender is updated to synchronize the\n     *  state with Cascader, you need to set the filterTreeNode parameter\n     *  to non-false when use it， support since v2.32.0\n     */\n    onSearch: (inputValue: string) => void;\n    /* Function to clear the value */\n    onClear: () => void;\n    /* Placeholder of Cascader */\n    placeholder?: string;\n    /* Used to delete a single item, the input parameter is value , \n     * support since v2.32.0\n     */\n    onRemove: (value) => void\n}\n```\n\n----------------------------------------\n\nTITLE: 独立使用预览组件 - React\nDESCRIPTION: ImagePreview 组件可独立使用，通过 visible 和 onVisibleChange 控制预览状态，支持单图和多图预览模式。示例展示了通过按钮触发预览的实现方式。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useCallback } from 'react';\nimport { ImagePreview, Button } from '@douyinfe/semi-ui';\n\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/colorful.jpg\",\n    ]), []);\n\n    const [visible1, setVisible1] = useState(false);\n    const [visible2, setVisible2] = useState(false);\n\n    const visibleChange1 = useCallback((v) => {\n        setVisible1(v);\n    }, []);\n\n    const visibleChange2 = useCallback((v) => {\n        setVisible2(v);\n    }, []);\n\n    const onButton1Click = useCallback((v) => {\n        setVisible1(true);\n    }, []);\n\n    const onButton2Click = useCallback((v) => {\n        setVisible2(true);\n    }, []);\n\n    return ( \n        <>\n            <Button onClick={onButton1Click}>Preview single Image</Button>\n            <ImagePreview\n                src={\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\"}\n                visible={visible1}\n                onVisibleChange={visibleChange1}\n            />\n            <br /> \n            <Button onClick={onButton2Click} style={{ marginTop: 20 }}>Preview multiple Images</Button>\n            <ImagePreview\n                src={srcList}\n                visible={visible2}\n                onVisibleChange={visibleChange2}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 日期时间选择 DatePicker - React\nDESCRIPTION: 使用 type=\"dateTime\" 实现日期和时间的选择，并展示如何配置时间选择器的滚动模式。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <h4>默认日期与时间选择</h4>\n        <DatePicker type=\"dateTime\" />\n        <br />\n        <br />\n        <h4>开启时间列表无限循环</h4>\n        <DatePicker\n            type=\"dateTime\"\n            timePickerOpts={{\n                scrollItemProps: { mode: \"wheel\", cycled: true }\n            }}\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Mode Toggle Button in React with Semi Design\nDESCRIPTION: Implements a button component in React that toggles between light and dark modes using Semi Design's Button component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const switchMode = () => {\n        const body = document.body;\n        if (body.hasAttribute('theme-mode')) {\n            body.removeAttribute('theme-mode');\n            // 以下这行代码，window.setMode仅用于当通过本Demo切换时，通知Semi官网Header记录更新当前模式（只用于演示）。在您的代码里无需存在。\n            window.setMode('light');\n        } else {\n            body.setAttribute('theme-mode', 'dark');\n            window.setMode('dark');\n        }\n    };\n\n    return (\n        <Button\n            onClick={switchMode}\n        >\n            Switch Mode\n        </Button>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Strategy in Select Component (React/JSX)\nDESCRIPTION: This snippet shows how to implement a custom search strategy in a Select component. It demonstrates searching both label and value fields of options, case-insensitively.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    function search(sugInput, option) {\n        // Search for both label and value\n        let label = option.label.toUpperCase();\n        let value = option.value.toUpperCase();\n        let sug = sugInput.toUpperCase();\n        return label.includes(sug) || value.includes(sug);\n    }\n    return (\n        <Select filter={search} style={{ width: '180px' }} placeholder=\"try hello or douyin\">\n            <Select.Option value=\"hello\">Douyin</Select.Option>\n            <Select.Option value=\"bytedance\">UlikeCam</Select.Option>\n            <Select.Option value=\"semi\">BuzzVideo</Select.Option>\n        </Select>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Box Position in Semi Design Select\nDESCRIPTION: This example demonstrates how to customize the search box position in a Select component using the 'searchPosition' prop. It shows both single and multiple selection with the search box in the dropdown.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select\n            filter\n            searchPosition='dropdown'\n            style={{ width: 200 }}\n            defaultValue={'ulikecam'}\n            placeholder='我的搜索框在下拉菜单中'\n            searchPlaceholder=\"带搜索功能的单选\"\n        >\n            <Select.Option value=\"douyin\">抖音</Select.Option>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n            <Select.Option value=\"jianying\">剪映</Select.Option>\n            <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            filter\n            searchPosition='dropdown'\n            multiple\n            style={{ width: 300 }}\n            defaultValue={['semi-1']}\n            placeholder='我的搜索框在下拉菜单中'\n            searchPlaceholder=\"带搜索功能的多选\"\n            autoClearSearchValue={false}\n        >\n            <Select.Option value=\"semi-0\">Semi-0</Select.Option>\n            <Select.Option value=\"semi-1\">Semi-1</Select.Option>\n            <Select.Option value=\"semi-2\">Semi-2</Select.Option>\n            <Select.Option value=\"semi-3\">Semi-3</Select.Option>\n            <Select.Option value=\"semi-4\">Semi-4</Select.Option>\n        </Select>\n    </>\n)\n```\n\n----------------------------------------\n\nTITLE: Popover Positioning Demo\nDESCRIPTION: Example demonstrating different positioning options for Popover component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag, Empty } from '@douyinfe/semi-ui';\nimport { IllustrationSuccess, IllustrationSuccessDark } from '@douyinfe/semi-illustrations';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    const article = (\n        <Empty\n            title={'先进的设计 / 研发协作方式'}\n            image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n            darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n            description=\"使用 Semi D2C 快速还原 Figma 设计稿，一键转代码\"\n            style={{ width: 400, margin: '0 auto', display: 'flex', padding: 20 }}\n        />\n    );\n\n    return (\n        <div>\n            <div style={{ marginLeft: 80, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Popover\n                        content={article}\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag style={{ margin: 8, padding: 20 }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            {/* Additional positioning code... */}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: PinCode with Custom Digit Count\nDESCRIPTION: Demonstrates how to configure the number of digits in the PinCode component using the count prop. This example sets a 4-digit code instead of the default 6 digits.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <>\n            <PinCode\n                size={'large'}\n                defaultValue={'6688'}\n                count={4}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义指示符的Spin组件 - React\nDESCRIPTION: 展示了如何自定义Spin组件的指示符。通过indicator属性设置自定义的加载图标。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\nimport { IconLoading } from '@douyinfe/semi-icons';\n\n() => (\n    <div style={{ marginLeft: 30 }}>\n        <div>A spin with customized indicator.</div>\n        <Spin indicator={<IconLoading />} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Digit Count PinCode\nDESCRIPTION: Demonstrates how to customize the number of digits in the PinCode component using the count prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { PinCode } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <>\n            <PinCode\n                size={'large'}\n                defaultValue={'6688'}\n                count={4}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Rating Component with Text Description in React\nDESCRIPTION: Demonstrates how to add text descriptions to Rating component using tooltips.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Rating } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: 0 };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value) {\n        this.setState({ value });\n    }\n\n    render() {\n        const { value } = this.state;\n        const desc = ['terrible', 'bad', 'normal', 'good', 'wonderful'];\n        return (\n            <div>\n                <span>\n                    How was the help you received:\n                    {value ? <span>{desc[value - 1]}</span> : ''}\n                </span>\n                <br />\n                <Rating tooltips={desc} onChange={this.handleChange} value={value} />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Title Component Implementation\nDESCRIPTION: Demonstrates different heading levels (h1-h6) using the Title component with custom styling\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Title } = Typography;\n    return (\n        <div>\n            <Title style={{ margin: '8px 0' }} >h1. Semi Design</Title>\n            <Title heading={2} style={{ margin: '8px 0' }} >h2. Semi Design</Title>\n            <Title heading={3} style={{ margin: '8px 0' }} >h3. Semi Design</Title>\n            <Title heading={4} style={{ margin: '8px 0' }} >h4. Semi Design</Title>\n            <Title heading={5} style={{ margin: '8px 0' }} >h5. Semi Design</Title>\n            <Title heading={6} style={{ margin: '8px 0' }} >h6. Semi Design</Title>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Usage with Closable Options\nDESCRIPTION: Demonstrates basic tag implementation including default and closable tags with event prevention\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Space>\n            <Tag> default tag </Tag>\n            <Tag closable> Closable Tag </Tag>\n            <Tag closable onClose={(value, e) => e.preventDefault()}>\n                Closable Tag, Prevent Default\n            </Tag>\n        </Space>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Implementation\nDESCRIPTION: Demonstrates basic usage of the Collapsible component with toggle functionality using useState hook.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState();\n    const toggle = () => {\n        setOpen(!isOpen);\n    };\n    const collapsed = (\n        <ul>\n            <li>\n                <p>Semi Design 以内容优先进行设计。</p>\n            </li>\n            <li>\n                <p>更容易地自定义主题。</p>\n            </li>\n            <li>\n                <p>适用国际化场景。</p>\n            </li>\n            <li>\n                <p>效率场景加入人性化关怀。</p>\n            </li>\n        </ul>\n    );\n    return (\n        <div>\n            <Button onClick={toggle}>Toggle</Button>\n            <Collapsible isOpen={isOpen}>{collapsed}</Collapsible>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Button Types in ButtonGroup\nDESCRIPTION: Shows how to create button groups with different types (primary, secondary, tertiary, warning, danger) using Semi Design's ButtonGroup component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ButtonGroup, Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const types = ['primary', 'secondary', 'tertiary', 'warning', 'danger'];\n\n    return (\n        <div style={{ display: 'flex' }}>\n            {types.map(type => (\n                <div style={{ marginRight: 10 }} key={type}>\n                    <ButtonGroup type={type} aria-label=\"操作按钮组\">\n                        <Button>拷贝</Button>\n                        <Button>查询</Button>\n                        <Button>剪切</Button>\n                    </ButtonGroup>\n                </div>\n            ))};\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider Implementation\nDESCRIPTION: Examples of vertical slider variants including reverse direction and marks\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical verticalReverse></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical range defaultValue={[20, 60]}></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical verticalReverse range defaultValue={[20, 60]}></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical range marks={{ 20: '20°C', 40: '40°C' }} step={10} defaultValue={[20, 60]}></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical verticalReverse range marks={{ 20: '20°C', 40: '40°C' }} step={10} defaultValue={[20, 60]}></Slider>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 无checkbox的纯卡片样式\nDESCRIPTION: 通过设置type='pureCard'创建无checkbox显示的纯卡片样式复选框组，提供更简洁的选择界面，适用于强调内容的场景。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup, Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup type='pureCard' defaultValue={['1', '3']} direction='vertical' aria-label=\"CheckboxGroup 示例\">\n        <Checkbox value={'1'} disabled extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n        <Checkbox value={'2'} disabled extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n        <Checkbox value={'3'} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n        <Checkbox value={'4'} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Checkbox>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Failed Placeholder\nDESCRIPTION: Shows how to customize the placeholder for failed image loading using the 'fallback' prop, which supports both string and ReactNode values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@douyinfe/semi-ui';\nimport { IconUploadError } from '@douyinfe/semi-icons';\n\n() => (\n    <div style={{ display: 'flex', alignItem: 'center', flexDirection: 'column' }}>\n        <span>Failed to load default style</span>\n        <Image \n            width={200}\n            height={200}\n            src=\"https://load-error.jpeg\"\n        />\n        <br />\n        <span>Custom loading failed placeholder map</span>\n        <Image \n            width={200}\n            height={200}\n            src=\"https://load-error.jpeg\"\n            fallback={<IconUploadError style={{ fontSize: 50 }} />}\n        />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ImagePreview Component Standalone\nDESCRIPTION: Shows how to use the ImagePreview component independently without Image components, controlling visibility with 'visible' and 'onVisibleChange' props and providing images through the 'src' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useCallback } from 'react';\nimport { ImagePreview, Button } from '@douyinfe/semi-ui';\n\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/colorful.jpg\",\n    ]), []);\n\n    const [visible1, setVisible1] = useState(false);\n    const [visible2, setVisible2] = useState(false);\n\n    const visibleChange1 = useCallback((v) => {\n        setVisible1(v);\n    }, []);\n\n    const visibleChange2 = useCallback((v) => {\n        setVisible2(v);\n    }, []);\n\n    const onButton1Click = useCallback((v) => {\n        setVisible1(true);\n    }, []);\n\n    const onButton2Click = useCallback((v) => {\n        setVisible2(true);\n    }, []);\n\n    return ( \n        <>\n            <Button onClick={onButton1Click}>Preview single Image</Button>\n            <ImagePreview\n                src={\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\"}\n                visible={visible1}\n                onVisibleChange={visibleChange1}\n            />\n            <br /> \n            <Button onClick={onButton2Click} style={{ marginTop: 20 }}>Preview multiple Images</Button>\n            <ImagePreview\n                src={srcList}\n                visible={visible2}\n                onVisibleChange={visibleChange2}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Mode in Tabs Component (React)\nDESCRIPTION: Demonstrates how to use vertical mode for Tabs component with different types (line, card, button). It also includes a radio group for switching between tab types.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, Radio, RadioGroup } from '@douyinfe/semi-ui';\nimport { IconFile, IconGlobe, IconHelpCircle } from '@douyinfe/semi-icons';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            type: 'line',\n        };\n    }\n\n    onSelect(e) {\n        this.setState({\n            type: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <RadioGroup\n                    onChange={e => this.onSelect(e)}\n                    value={this.state.type}\n                    type=\"button\"\n                    style={{\n                        display: 'flex',\n                        width: 200,\n                        justifyContent: 'center',\n                    }}\n                >\n                    <Radio value={'line'}>Line</Radio>\n                    <Radio value={'card'}>Card</Radio>\n                    <Radio value={'button'}>Button</Radio>\n                </RadioGroup>\n                <br />\n                <br />\n                <Tabs tabPosition=\"left\" type={this.state.type}>\n                    <TabPane\n                        tab={\n                            <span>\n                                <IconFile />\n                                Document\n                            </span>\n                        }\n                        itemKey=\"1\"\n                    >\n                        <div style={{ padding: '0 24px' }}> Document </div>\n                    </TabPane>\n                    <TabPane\n                        tab={\n                            <span>\n                                <IconGlobe />\n                                Quick Start\n                            </span>\n                        }\n                        itemKey=\"2\"\n                    >\n                        <div style={{ padding: '0 24px' }}>Quick Start</div>\n                    </TabPane>\n                    <TabPane\n                        tab={\n                            <span>\n                                <IconHelpCircle />\n                                Help\n                            </span>\n                        }\n                        itemKey=\"3\"\n                    >\n                        <div style={{ padding: '0 24px' }}>Help</div>\n                    </TabPane>\n                </Tabs>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Date Range Trigger\nDESCRIPTION: Shows implementation of a custom trigger for DatePicker with date range selection and clear functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { DatePicker, Button, Icon } from '@douyinfe/semi-ui';\nimport { IconClose, IconChevronDown } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const [date, setDate] = useState();\n    const formatToken = 'yyyy-MM-dd HH:mm:ss';\n    const onChange = useCallback(date => {\n        setDate(date);\n        console.log(date);\n    }, []);\n    const onClear = useCallback(e => {\n        e && e.stopPropagation();\n        setDate();\n    }, []);\n\n    const closeIcon = useMemo(() => {\n        return date ? <IconClose onClick={onClear} /> : <IconChevronDown />;\n    }, [date]);\n\n    const triggerContent = (placeholder) => {\n        if (Array.isArray(date) && date.length) {\n            return `${dateFns.format(date[0], formatToken)} ~ ${dateFns.format(date[1], formatToken)}`;\n        } else {\n            return 'Please select a date range';\n        }\n    };\n\n    return (\n        <DatePicker\n            type='dateTimeRange'\n            onChange={onChange}\n            value={date}\n            triggerRender={({ placeholder }) => (\n                <Button theme={'light'} icon={closeIcon} iconPosition={'right'}>\n                    {triggerContent(placeholder)}\n                </Button>\n            )}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Highlight Component\nDESCRIPTION: Demonstrates the basic usage of the Highlight component where searchWords specifies the keywords to be highlighted and sourceString provides the source text.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const sourceString = 'From Semi Design，To Any Design. Quickly define your design system and apply it to design drafts and code';\n    const searchWords = ['Any Design', 'Semi Design'];\n    \n    return (<h2>\n        <Highlight sourceString={sourceString} searchWords={searchWords} />\n    </h2>);\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Progress Bar Implementation\nDESCRIPTION: Demonstrates the vertical orientation of progress bars with different configurations\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Progress } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ height: 100, display: 'flex' }}>\n        <Progress percent={10} direction=\"vertical\" aria-label=\"disk usage\"/>\n        <Progress percent={25} direction=\"vertical\" aria-label=\"disk usage\"/>\n        <Progress percent={50} direction=\"vertical\" aria-label=\"disk usage\"/>\n        <Progress percent={80} direction=\"vertical\" size=\"large\" aria-label=\"disk usage\"/>\n        <Progress percent={80} direction=\"vertical\" style={{ width: '8px' }} aria-label=\"disk usage\"/>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Notifications with Icons in React\nDESCRIPTION: Demonstrates how to display notifications with different icons and types using the Semi-Design Notification component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\nimport { IconToutiaoLogo, IconVigoLogo } from '@douyinfe/semi-icons';\n\n() => {\n    let opts = {\n        title: 'Hi, Bytedance',\n        content: 'ies dance dance dance',\n        duration: 3,\n    };\n\n    return (\n        <>\n            <h5>默认的图标</h5>\n            <Button type=\"primary\" onClick={() => Notification.success(opts)} style={{ margin: 4 }}>\n                Success\n            </Button>\n            <Button onClick={() => Notification.info(opts)} style={{ margin: 4 }}>\n                Info\n            </Button>\n            <Button type=\"warning\" onClick={() => Notification.warning(opts)} style={{ margin: 4 }}>\n                Warning\n            </Button>\n            <Button type=\"danger\" onClick={() => Notification.error(opts)} style={{ margin: 4 }}>\n                Error\n            </Button>\n            <h5>自定义图标</h5>\n            <Button\n                icon={<IconToutiaoLogo />}\n                style={{ marginRight: 5 }}\n                onClick={() =>\n                    Notification.info({\n                        ...opts,\n                        icon: <IconToutiaoLogo style={{ color: 'red' }} />,\n                    })\n                }\n            ></Button>\n            <Button\n                icon={<IconVigoLogo />}\n                style={{ marginRight: 5 }}\n                onClick={() => Notification.info({ ...opts, icon: <IconVigoLogo /> })}\n            ></Button>\n            <Button\n                icon={<IconVigoLogo />}\n                onClick={() => Notification.info({ ...opts, icon: <IconVigoLogo style={{ color: 'pink' }} /> })}\n            ></Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Stacked Area Chart with VChart in React\nDESCRIPTION: Creates a stacked area chart component showing product distribution across countries. Implements custom tooltip with total calculation and uses VChart with React for visualization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\n\nconst commonSpec = {\n  type: 'area',\n  stack: true,\n  title: {\n    visible: true,\n    text: 'Stacked area chart',\n    subtext: 'This is a stacked area chart',\n  },\n  xField: 'type',\n  yField: 'value',\n  seriesField: 'country',\n  legends: { visible: true },\n  tooltip: {\n    dimension: {\n      updateContent: data => {\n        let sum = 0;\n        data.forEach(datum => {\n          sum += +datum.value;\n        });\n        data.push({\n          hasShape: 'false',\n          key: 'Total',\n          value: sum\n        });\n        return data;\n      }\n    }\n  }\n};\n\nconst values = [[4229, 4376, 3054, 12814], [3932, 3987, 5067, 13012], \n [5221, 3574, 7004, 11624], [9256, 4376, 9054, 8814],[3308, 4572, 12043, 12998], \n [5432, 3417, 15067, 12321],[13701, 5231, 10119, 10342],[4008, 4572, 12043, 22998], \n [18712, 6134, 10419, 11261]].reduce((acc, arr, index) => {\n  const type = ['Nail polish', 'Eyebrow pencil', 'Rouge', 'Lipstick', 'Eyeshadows', \n 'Eyeliner', 'Foundation', 'Lip gloss', 'Mascara'][index];\n  const result = ['Africa', 'EU', 'China', 'USA'].map((item, innerIndex) => ({\n      country: item,\n      type: type,\n      value: arr[innerIndex],\n    }));\n    return acc.concat(result);\n }, []);\n\nconst data = {\n  fields: {\n    country: {\n      domain: ['Africa', 'EU', 'China', 'USA'].reverse(),\n      lockStatisticsByDomain: true\n    }\n  },\n  values: values,\n}\n\nfunction App() {\n  return (\n    <div style={{ height: 460 }}>\n      <VChart\n          spec={{ ...commonSpec,  data: data }}\n          option={{ mode: \"desktop-browser\"}}\n      />\n    </div>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ButtonGroup in React\nDESCRIPTION: Demonstrates how to create a disabled button group with multiple buttons using Semi Design's ButtonGroup component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ButtonGroup, Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ marginRight: 10 }}>\n                <ButtonGroup disabled>\n                    <Button>拷贝</Button>\n                    <Button>查询</Button>\n                    <Button>剪切</Button>\n                </ButtonGroup>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Properties in React\nDESCRIPTION: Demonstrates how to customize icon properties such as size, rotation, and animation in a React component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconHome, IconEmoji, IconSpin } from '@douyinfe/semi-icons';\n\n() => (\n    <div>\n        <IconHome size=\"small\" />\n        <IconEmoji rotate={180} />\n        <IconSpin spin />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Usage in React\nDESCRIPTION: Demonstrates the basic usage of the Breadcrumb component with multiple items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb>\n        <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n        <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n        <Breadcrumb.Item>Default</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: ColorPicker in Normal Display Mode\nDESCRIPTION: Shows how to use the ColorPicker component in normal display mode without a popover, with alpha channel support.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '@douyinfe/semi-ui';\nimport React from 'react';\n\nfunction Demo() {\n    return (\n        <ColorPicker\n            alpha={true}\n            onChange={value => {\n                console.log(value);\n            }}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: TextArea with Shift+Enter Line Break Control in React\nDESCRIPTION: Customizes a TextArea to only allow line breaks when Shift+Enter is pressed, preventing regular Enter key from creating new lines.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TextArea, HotKeys } from '@douyinfe/semi-ui';\n\n() => {\n    const [text, setText] = useState('');\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault(); // 阻止默认的换行行为\n        }\n    };\n\n    const handleChange = (value, event) => {\n        setText(event.target.value);\n    };\n\n    return (\n        <>  \n            <p style={{ display: 'flex' }}>\n                使用\n                <HotKeys\n                    hotKeys={['shift', 'enter']}\n                    style={{ marginBottom: 12, marginLeft: 4, marginRight: 4 }}\n                />\n                换行的 TextArea\n            </p>\n            <TextArea\n                value={text}\n                onChange={handleChange}\n                onKeyDown={handleKeyDown}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Scroll Mode Interface Properties Definition - TypeScript\nDESCRIPTION: Type definitions for scroll mode configuration properties including items rendering, intersection callbacks, visibility state management, and styling options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollModeProps {\n    items: Record<string, any>[];\n    onIntersect: ({ [key: string]: IntersectionObserverEntry }) => void;\n    onVisibleStateChange: (visibleState: Map<string, boolean>) => void;\n    overflowRenderer: (overflowItems: Record<string, any>[]) => React.ReactNode[];\n    threshold: number;\n    visibleItemRenderer: (item: Record<string, any>, index: number) => React.ReactElement;\n    wrapperClassName: string;\n    wrapperStyle: React.CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Usage with Preview Function\nDESCRIPTION: Demonstrates how to implement a basic image with preview functionality by specifying the image path through 'src' and setting dimensions with 'width' and 'height' properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@douyinfe/semi-ui';\n\n() => (  \n    <Image \n        width={360}\n        height={200}\n        src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\"\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker with Eyedropper in React\nDESCRIPTION: 演示了如何启用滴管取色功能。使用 eyeDropper 属性来开启此功能。注意，此功能需要在 HTTPS 或 localhost 等安全环境下使用，且需要 Chromium > 95 版本。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return <ColorPicker alpha={true} eyeDropper={true} onChange={value=>{console.log(value);}}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover, Tooltip, and Rating Components in Semi-Design\nDESCRIPTION: Example of interactive components including Popover and Tooltip with Tag elements as triggers, and a Rating component with a default value of 3. Components are arranged in a flex container for alignment.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ display: 'flex', alignItems: 'center' }}>\n    <Popover content={'hi semi-design'} style={{ padding: 8 }}><Tag style={{ marginRight: 8 }}>I am Popover</Tag></Popover>\n    <Tooltip content={'hi semi-design'}>\n        <Tag style={{ marginRight: 8 }}>I am Tooltip</Tag>\n    </Tooltip>\n    <Rating defaultValue={3} size='small' style={{ marginRight: 8 }} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlled Popover Component\nDESCRIPTION: Example of a controlled Popover component where visibility is managed through state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Button } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor(props = {}) {\n        super(props);\n\n        this.state = {\n            visible: false,\n        };\n\n        this.content = (\n            <article style={{ padding: 12 }}>\n                Hi ByteDancer, this is a popover.\n                <br /> We have 2 lines.\n            </article>\n        );\n\n        this.toggleShow = this.toggleShow.bind(this);\n    }\n\n    toggleShow() {\n        this.setState({\n            visible: !this.state.visible,\n        });\n    }\n\n    render() {\n        const content = this.content;\n\n        const { visible } = this.state;\n\n        return (\n            <div>\n                <div>\n                    <Popover visible={visible} content={content} trigger=\"custom\">\n                        <Button onClick={this.toggleShow}>Click me</Button>\n                    </Popover>\n                </div>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Radio with Additional Text\nDESCRIPTION: Example of a Radio component with supplementary text provided through the 'extra' property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <Radio extra=\"Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统\" aria-label=\"单选示例\" name=\"demo-radio-extra\">\n        Semi Design\n    </Radio>\n);\n```\n\n----------------------------------------\n\nTITLE: Switch Loading State\nDESCRIPTION: Demonstration of Switch component in loading state\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch loading />\n        <br />\n        <Switch loading defaultChecked={true} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic TreeSelect Usage in React\nDESCRIPTION: Demonstrates the basic usage of TreeSelect component with single select mode and default selectable items. It shows how to structure tree data and apply basic styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return (\n        <TreeSelect\n            style={{ width: 300 }}\n            dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Lottie Object in React\nDESCRIPTION: Shows how to use the 'getLottie' prop or the static method 'Lottie.getLottie()' to access the global Lottie object, which provides additional functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n\n    console.log('lottie', Lottie.getLottie());\n\n    return (\n        <div>\n            <Lottie\n                getLottie={lottie => console.log('lottie', lottie)}\n                params={{ path: jsonURL }}\n                width={'300px'}\n                height={'300px'}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Design Token Component Integration in JSX\nDESCRIPTION: Implementation of the DesignToken component for displaying design variables and styles.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<DesignToken/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Upload Trigger in React\nDESCRIPTION: Demonstrates how to implement a manual upload trigger using uploadTrigger='custom'. The upload process is initiated through a separate button click rather than automatically on file selection.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload, IconPlus } from '@douyinfe/semi-icons';\n\nclass ManulUploadDemo extends React.Component {\n    constructor() {\n        super();\n        this.manulUpload = this.manulUpload.bind(this);\n        this.uploadRef = React.createRef();\n    }\n\n    manulUpload() {\n        this.uploadRef.current.upload();\n    }\n\n    render() {\n        let action = '//semi.design/api/upload';\n        return (\n            <div>\n                <Upload\n                    accept=\"image/gif, image/png, image/jpeg, image/bmp, image/webp\"\n                    action={action}\n                    uploadTrigger=\"custom\"\n                    ref={this.uploadRef}\n                    onSuccess={(...v) => console.log(...v)}\n                    onError={(...v) => console.log(...v)}\n                >\n                    <Button icon={<IconPlus />} theme=\"light\" style={{ marginRight: 8 }}>\n                        Select a document\n                    </Button>\n                </Upload>\n                <Button icon={<IconUpload />} theme=\"light\" onClick={this.manulUpload}>\n                    Start upload\n                </Button>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Preview in a Specified Container\nDESCRIPTION: Demonstrates how to render the image preview component in a specific DOM container using the 'getPopupContainer' prop, which requires setting 'position: relative' on the container element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n\n() => {\n    const srcList = useMemo(() => ([\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/sky.jpg\",\n        \"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/greenleaf.jpg\",\n    ]), []);\n\n    return ( \n        <>\n            <div \n                id=\"container\" \n                style={{ \n                    height: 400, \n                    position: \"relative\" \n                }} \n            >\n                <ImagePreview\n                    getPopupContainer={() => {\n                        const node = document.getElementById(\"container\");\n                        return node;\n                    }}\n                    style={{\n                        height: '100%',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n        \n                    }}\n                >\n                    {srcList.map((src, index) => {\n                        return (\n                            <Image \n                                key={index} \n                                src={src} \n                                width={200} \n                                alt={`lamp${index + 1}`}\n                                style={{ marginRight: 5 }} \n                            />\n                        );\n                    })}\n                </ImagePreview>\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Non-Full Screen Banner with Borders in React\nDESCRIPTION: Demonstrates non-full screen banners with borders using the fullMode and bordered props. This example also shows how to customize the appearance with null icons and custom titles.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Banner, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n  \n    return (\n        <div style={{ width: 640 }} className=\"components-banner-demo\">\n            <Banner fullMode={false} type=\"info\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>不知道 AppKey？</div>}\n                description={<div>你可先联系对应的研发同学，确认是否已在 <Text link={{ href: 'https://semi.design/' }}>应用云平台</Text> 申请了应用，并填写对应的信息。</div>}\n            /><br/>\n            <Banner fullMode={false} type=\"warning\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>不知道 AppKey？</div>}\n                description={<div>你可先联系对应的研发同学，确认是否已在 <Text link={{ href: 'https://semi.design/' }}>应用云平台</Text> 申请了应用，并填写对应的信息。</div>}\n            /><br/>\n            <Banner fullMode={false} type=\"danger\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>不知道 AppKey？</div>}\n                description={<div>你可先联系对应的研发同学，确认是否已在 <Text link={{ href: 'https://semi.design/' }}>应用云平台</Text> 申请了应用，并填写对应的信息。</div>}\n            /><br/>\n            <Banner fullMode={false} type=\"success\" bordered icon={null} closeIcon={null}\n                title={<div style={{ fontWeight: 600, fontSize: '14px', lineHeight: '20px' }}>不知道 AppKey？</div>}\n                description={<div>你可先联系对应的研发同学，确认是否已在 <Text link={{ href: 'https://semi.design/' }}>应用云平台</Text> 申请了应用，并填写对应的信息。</div>}\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Size Options in React\nDESCRIPTION: Shows how to use different size options (small, default, large) for the AutoComplete component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            size=\"small\"\n            placeholder={'small'}\n            style={{ width: 200 }}\n        ></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            size=\"default\"\n            placeholder={'default'}\n            style={{ width: 200 }}\n        ></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            size=\"large\"\n            placeholder={'large'}\n            style={{ width: 200 }}\n        ></AutoComplete>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Removing Tags with Clear Button in TagInput\nDESCRIPTION: Demonstrates how to use the showClear property to enable one-click deletion of all tags and input content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput \n        showClear \n        defaultValue={['Semi', 'Hotsoon']} \n        placeholder='Please enter...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Full Chat Box Render in React\nDESCRIPTION: Creates a custom render function for the entire chat box. It handles different roles, avatars, and message layouts. Uses React hooks for state management and callbacks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomFullRender() {\n    const [message, setMessage] = useState(defaultMessage);\n\n    const customRenderChatBox = useCallback((props) => {\n        const { role, message, defaultNodes, className } = props;\n        let titleNode = null;\n        if (message.role !== 'user') {\n            titleNode = (<span style={titleStyle}>\n                <Avatar size=\"extra-small\" shape=\"square\" src={role.avatar} />\n                {defaultNodes.title}\n            </span>)\n        }\n        return <div className={className}>\n            <div style={{ display: 'flex', flexDirection: 'column', rowGap: 4, alignItems: message.role === 'user' ? 'end' : ''}}>\n                {titleNode}\n                <div style={{ width: 'fit-content'}}>\n                    {defaultNodes.content}\n                </div>\n                {defaultNodes.action}\n            </div>\n        </div>\n    }, []);\n\n    const onChatsChange = useCallback((chats) => {\n        setMessage(chats)\n    } ,[]);\n\n     const onMessageSend = useCallback((content, attachment) => {\n        const newAssistantMessage = {\n            role: 'assistant',\n            id: getId(),\n            content: `This is a mock response`\n        }\n        setTimeout(() => { \n            setMessage((message) => ([ ...message, newAssistantMessage])); \n        }, 200);\n    }, []);\n    \n    return ( <Chat\n        chatBoxRenderConfig={{ renderFullChatBox: customRenderChatBox }}\n        style={commonOuterStyle} \n        chats={message}\n        onChatsChange={onChatsChange}\n        onMessageSend={onMessageSend}\n        roleConfig={roleInfo}\n        uploadProps={uploadProps}\n    />);\n}\n```\n\n----------------------------------------\n\nTITLE: Expansion Control in TreeSelect\nDESCRIPTION: Shows the difference between defaultExpandAll and expandAll props. expandAll maintains expanded state even after data updates, while defaultExpandAll only affects initial render.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        setTimeout(() => setData(treeData), 500);\n    }, []);\n\n    return (\n        <>\n            <TreeSelect\n                style={{ width: 300, marginBottom: 20 }}\n                expandAll\n                treeData={data}\n                placeholder=\"expandAll\"\n            />\n            <TreeSelect\n                style={{ width: 300 }}\n                defaultExpandAll\n                treeData={data}\n                placeholder=\"defaultExpandAll\"\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Double Row Display in Descriptions\nDESCRIPTION: Shows double row display with different size options (small, medium, large) and custom styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions } from '@douyinfe/semi-ui';\nimport { IconArrowUp } from '@douyinfe/semi-icons';\n\n() => {\n    const data = [\n        { key: '实际用户数量', value: '1,480,000' },\n        {\n            key: '7天留存',\n            value: (\n                <span>\n                    98%\n                    <IconArrowUp size=\"small\" style={{ color: 'red', marginLeft: '4px' }} />\n                </span>\n            ),\n        },\n        { key: '安全等级', value: '3级' },\n    ];\n    const style = {\n        boxShadow: 'var(--semi-shadow-elevated)',\n        backgroundColor: 'var(--semi-color-bg-2)',\n        borderRadius: '4px',\n        padding: '10px',\n        marginRight: '20px',\n        width: '600px',\n    };\n    return (\n        <div>\n            <Descriptions data={data} row size=\"small\" style={style} />\n            <br />\n            <Descriptions data={data} row style={style} />\n            <br />\n            <Descriptions data={data} row size=\"large\" style={style} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Synchronous Month Switching in DatePicker\nDESCRIPTION: Shows how to enable synchronous switching of both panels in range selection by setting syncSwitchMonth to true.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <DatePicker\n                syncSwitchMonth={true}\n                type=\"dateTimeRange\"\n                style={{ width: 400 }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Radio Group in Semi Design\nDESCRIPTION: Shows how to create a vertically arranged Radio group using the 'direction' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <RadioGroup direction=\"vertical\" aria-label=\"RadioGroup demo\" name=\"demo-radio-group-vertical\">\n        <Radio value={1}>A</Radio>\n        <Radio value={2}>B</Radio>\n        <Radio value={3}>C</Radio>\n        <Radio value={4}>D</Radio>\n    </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Controlling Resize Directions in Resizable Component\nDESCRIPTION: Shows how to enable or disable specific resize directions using the 'enable' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable, Switch, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [b, setB] = useState(false);\n    const { Title } = Typography;\n    return (\n        <div style={{ width: '500px', height: '60%' }}>\n            <div style={{ display: 'flex', alignItems: 'center', margin: 8 }}>\n                <Switch checked={b} onChange={setB}></Switch>\n                <Title heading={6} style={{ margin: 8 }}>\n                    {b ? 'able' : 'disable'}\n                </Title>\n            </div>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                enable={{\n                    left: b,\n                }}\n                defaultSize={{\n                    width: 200,\n                    height: 200,\n                }}\n            >\n                <div style={{ marginLeft: '20%' }}>{'enable.left:' + b}</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 渲染月视图日历 - React\nDESCRIPTION: 使用 Calendar 组件渲染月视图的日历。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => <Calendar mode=\"month\"></Calendar>;\n```\n\n----------------------------------------\n\nTITLE: Loading State Implementation in Cards\nDESCRIPTION: Demonstrates how to implement loading states in Cards using the loading property with Meta component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Card, Switch } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [loading, setLoading] = useState(true);\n    const { Meta } = Card;\n\n    return (\n        <>\n            <Switch onChange={ v => setLoading(!v) } />\n            <br />\n            <br />\n            <Card \n                style={{ maxWidth: 360 }}\n                loading={ loading }\n            >\n                <Meta \n                    title=\"Semi Design\" \n                    description=\"Semi Design is a design system developed and maintained by IES-FE & IES-UED.\"\n                />\n            </Card>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Card Loading with Skeleton\nDESCRIPTION: Shows how to implement custom loading states using Skeleton components within Cards for enhanced preloading effects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Card, Switch, Skeleton, Typography, Avatar } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [loading, setLoading] = useState(true);\n    const { Meta } = Card;\n    const { Title, Paragraph, Image } = Skeleton;\n\n    return (\n        <>\n            <Switch onChange={ v => setLoading(!v) } />\n            <br />\n            <br />\n            <Card\n                style={{ maxWidth: 360 }}\n                title={\n                    <Meta \n                        title={\n                            <Skeleton\n                                style={{ width: 80 }}\n                                placeholder={<Title />}\n                                loading={loading}\n                            >\n                                <Typography.Title heading={5}>\n                                    Semi Design\n                                </Typography.Title>\n                            </Skeleton>\n                        } \n                        description={\n                            <Skeleton \n                                style={{ width: 150, marginTop: 12 }} \n                                placeholder={<Paragraph rows={1} />} \n                                loading={loading}\n                            >\n                                <Typography.Text>\n                                    Semi Design is a design system developed and maintained by IES-FE & IES-UED.\n                                </Typography.Text>\n                            </Skeleton>\n                        }\n                        avatar={\n                            <Skeleton placeholder={<Skeleton.Avatar />} loading={loading}>\n                                <Avatar \n                                    alt='Card meta img'\n                                    size=\"default\"\n                                    src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                                />\n                            </Skeleton>\n                        }\n                    />\n                }\n                headerExtraContent={\n                    <Skeleton style={{ width: 50 }} placeholder={<Paragraph rows={1} />} loading={loading}>\n                        <Typography.Text link>\n                            More\n                        </Typography.Text>\n                    </Skeleton>\n                }\n                cover={ \n                    <Skeleton style={{ maxWidth: '100%', height: 260 }} placeholder={<Image />} loading={loading}>\n                        <img \n                            alt=\"example\" \n                            src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo.jpeg\" \n                        />\n                    </Skeleton> \n                }\n            >\n            </Card>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CodeHighlight for JavaScript\nDESCRIPTION: Demonstrates the basic usage of CodeHighlight component with JavaScript code. It shows how to pass code as a string and specify the language.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n\n    return <CodeHighlight\n        language={\"javascript\"} \n        code={\n            `\nimport * as React from 'react\"\nconst Test = ()=>{\n    const handleClick = ()=>{\n        alert(\"Click\")\n    }\n    return <div onClick={handleClick}>test</div>\n}`\n    }/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Display Format Options\nDESCRIPTION: Demonstrates different currency display formats (symbol, code, name) using the currencyDisplay prop for CNY currency.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';    \n\n() => {\n    const defaultValue = 123456.78;\n    return (\n        <div>\n            <div>🇨🇳 CNY ➕ code</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"code\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ symbol</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"symbol\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ name</div>\n            <InputNumber currency=\"CNY\" currencyDisplay=\"name\" defaultValue={defaultValue} />\n            <br />\n            <br />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Skeleton Components\nDESCRIPTION: Demonstrates the basic usage of various Skeleton components including Avatar, Image, Title, Paragraph, and Button with a toggle to show/hide the actual content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Skeleton, Switch, Avatar, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [loading, setLoading] = useState(true);\n    const showContent = () => {\n        setLoading(!loading);\n    };\n    return (\n        <>\n            <span style={{ display: 'flex', alignItems: 'center' }}>\n                <Switch onChange={() => showContent()} />\n                <span style={{ marginLeft: '10px' }}>显示加载内容</span>\n            </span>\n            <br />\n            <Skeleton placeholder={<Skeleton.Avatar />} loading={loading}>\n                <Avatar color=\"blue\" style={{ marginBottom: 10 }}>\n                    U\n                </Avatar>\n            </Skeleton>\n            <br />\n            <Skeleton style={{ width: 200, height: 150 }} placeholder={<Skeleton.Image />} loading={loading}>\n                <img\n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n                    height=\"150\"\n                    alt=\"avatar\"\n                />\n            </Skeleton>\n            <br />\n            <Skeleton\n                style={{ width: 80 }}\n                placeholder={<Skeleton.Title style={{ marginBottom: 10 }} />}\n                loading={loading}\n            >\n                <h4 style={{ marginBottom: 0 }}>Semi UI</h4>\n            </Skeleton>\n            <Skeleton style={{ width: 240 }} placeholder={<Skeleton.Paragraph rows={2} />} loading={loading}>\n                <p style={{ width: 240 }}>精心打磨每一个组件的用户体验，从用户的角度考虑每个组件的使用场景。</p>\n            </Skeleton>\n            <br />\n            <Skeleton placeholder={<Skeleton.Button />} loading={loading}>\n                <Button>Button</Button>\n            </Skeleton>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Accessibility in React\nDESCRIPTION: This React code snippet demonstrates how to use the 'Avatar' component from the '@douyinfe/semi-ui' library with accessibility considerations. It highlights the correct and incorrect use of the 'alt' attribute to provide meaningful descriptions for screen readers. The snippet requires React and '@douyinfe/semi-ui' as dependencies. It showcases various avatar examples with comments on appropriate 'alt' text usage, ensuring compliance with accessibility standards.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <>\n            {/* Good case */ }\n            <Avatar\n                alt=\"A cut cat\"\n                src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n                style={{ margin: 4 }}\n            />\n            <Avatar\n                alt=\"Jiang Pengzhi\"\n                src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n                style={{ margin: 4 }}\n            />\n            {/* Bad case: empty content */ }\n            <Avatar\n                alt=\"\"\n                src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n                style={{ margin: 4 }}\n            />\n            {/* Bad case: no need to include picture or image in alt */ }\n            <Avatar\n                alt=\"Picture of Jiang Pengzhi\"\n                src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n                style={{ margin: 4 }}\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Hotspot Location in Photo Wall\nDESCRIPTION: Shows how to customize the order of click hotspots using the hotSpotLocation prop. This example allows toggling between placing the upload button at the start or end of the photo wall.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Select, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport { IconPlus, IconEyeOpened } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dy.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n    ];\n    const handlePreview = (file) => {\n        const feature = \"width=300,height=300\";\n        window.open(file.url, 'imagePreview', feature);\n    };\n    const [hotSpotLocation, setLocation] = useState('end');\n    return (\n        <>\n            <RadioGroup\n                value={hotSpotLocation}\n                type='button'\n                onChange={e => setLocation(e.target.value)}>\n                <Radio value='start'>start</Radio>\n                <Radio value='end'>end</Radio>\n            </RadioGroup>\n            <hr />\n            <Upload\n                action={action}\n                listType=\"picture\"\n                showPicInfo\n                accept=\"image/*\"\n                multiple\n                hotSpotLocation={hotSpotLocation}\n                defaultFileList={defaultFileList}\n                onPreviewClick={handlePreview}\n            >\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Flex布局 (React)\nDESCRIPTION: 使用Row的type=\"flex\"和justify属性创建Flex布局。展示了不同对齐方式的使用。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid\">\n        <p>sub-element align left</p>\n        <Row type=\"flex\" justify=\"start\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element align center</p>\n        <Row type=\"flex\" justify=\"center\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element align right</p>\n        <Row type=\"flex\" justify=\"end\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element monospaced arrangement</p>\n        <Row type=\"flex\" justify=\"space-between\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element align full</p>\n        <Row type=\"flex\" justify=\"space-around\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Adding Tags with Separators in TagInput\nDESCRIPTION: Shows how to use separators for batch input of tags. You can define a single separator or multiple separators as an array, which is supported from version 1.29.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <TagInput \n            separator='-' \n            placeholder='Use `-` for batch input'\n            onChange={v => console.log(v)}\n        />\n        <br/><br/>\n        <TagInput \n            separator={['-', '/', '|', '++']}\n            placeholder='Support multiple separators for batch input'\n            onChange={v => console.log(v)}\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Using CodeHighlight for CSS Syntax Highlighting\nDESCRIPTION: Shows how to use the CodeHighlight component to highlight CSS code. The example includes CSS for a grid layout with Semi Design classes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n\n    return <CodeHighlight\n        language={\"css\"} \n        code={\n        `.grid {\n    .semi-row,\n    .semi-row-flex {\n        text-align: center;\n        .semi-col {\n            min-height: 30px;\n            line-height: 30px;\n            background: var(--semi-color-primary-light-default);\n            outline: 1px solid var(--semi-color-primary-light-active);\n        }\n    }\n}\n`\n    }/>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar with Top and Bottom Slots in React\nDESCRIPTION: Demonstrates how to use 'topSlot' and 'bottomSlot' props to add additional content to the avatar.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar\n            alt=\"beautiful cat\"\n            src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n            style={{ margin: 4 }}\n            size=\"large\"\n            border={{color:\"#FE2C55\",motion:true}}\n            contentMotion={true}\n            topSlot={{\n                text: \"LIVE\", \n                gradientStart:\"rgb(255,23,100)\",\n                gradientEnd:\"rgb(237,52,148)\"\n            }}\n            bottomSlot={{\n                shape: \"circle\",\n                bgColor:\"#FE2C55\",\n                text: <IconPlus/>\n            }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Collapsible with Custom Animation Duration\nDESCRIPTION: Shows how to customize animation duration and control motion settings in Collapsible component\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Collapsible, InputNumber, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState(false);\n    const [duration, setDuration] = useState(250);\n    const toggle = () => {\n        setOpen(!isOpen);\n    };\n    const collapsed = (\n        <ul>\n            <li>Nothing can ever happen twice.</li>\n            <li>In consequence, the sorry fact is</li>\n            <li>that we arrive here improvised</li>\n            <li>and leave without the chance to practice. </li>\n        </ul>\n    );\n    return (\n        <div>\n            <label>Set animation duration：</label>\n            <InputNumber min={0} defaultValue={250} style={{ width: 120 }} onChange={(val) => setDuration(val)} step={10} />\n            <br />\n            <Button onClick={toggle}>Toggle</Button>\n            <Collapsible isOpen={isOpen} duration={duration}>\n                {collapsed}\n            </Collapsible>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Semi Design\nDESCRIPTION: Configuration for using Semi Design in a Next.js project, including transpilation settings and CSS imports.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// next.config.js\nconst nextConfig = {\n  transpilePackages: ['@douyinfe/semi-ui', '@douyinfe/semi-icons', '@douyinfe/semi-illustrations'],\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Icon Position in Semi-UI Navigation Component (JSX)\nDESCRIPTION: Example of setting the toggle icon position to 'left' in a Semi-UI Nav component. The component includes user, guild, and task management options with a custom header and collapsible footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconSetting } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                toggleIconPosition={'left'}\n                defaultOpenKeys={['job']}\n                bodyStyle={{ height: 320 }}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    { itemKey: 'union', text: 'guild center', icon: <IconStar /> },\n                    {\n                        text: 'Task platform',\n                        icon: <IconSetting />,\n                        itemKey: 'job',\n                        items: ['task management', 'user task query'],\n                    },\n                ]}\n                onSelect={key => console.log(key)}\n                header={{\n                    logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                    text: 'Live broadcast operation background'\n                }}\n                footer={{\n                    collapseButton: true,\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline Component with Different Status Types in Semi Design\nDESCRIPTION: Demonstrates the Timeline component from Semi Design with three Timeline.Item entries showing different statuses. Each item has a timestamp and status type (ongoing, success, error) to represent different stages in a workflow.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Timeline>\n    <Timeline.Item time='2019-07-14 10:35' type='ongoing'>审核中</Timeline.Item>\n    <Timeline.Item time='2019-06-13 16:17' type='success'>发布成功</Timeline.Item>\n    <Timeline.Item time='2019-05-14 18:34' type='error'>审核失败</Timeline.Item>\n</Timeline>\n```\n\n----------------------------------------\n\nTITLE: Positioning Badge Component in React\nDESCRIPTION: Demonstrates how to use the position property to set the position of the badge relative to its children.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div>\n            <Badge count='VIP' position='rightTop' type='danger'>\n                <Avatar color='amber' shape='square' style={style}>ZH</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='VIP' position='rightBottom' type='danger'>\n                <Avatar color='amber' shape='square' style={style}>HS</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='VIP' position='leftTop' type='danger'>\n                <Avatar color='orange' shape='square' style={style}>DY</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='VIP' position='leftBottom' type='danger'>\n                <Avatar color='orange' shape='square' style={style}>TT</Avatar>\n            </Badge>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Collapsible with Custom Animation Duration\nDESCRIPTION: Shows how to customize animation duration and toggle animation using the duration prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Collapsible, InputNumber, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState(false);\n    const [duration, setDuration] = useState(250);\n    const toggle = () => {\n        setOpen(!isOpen);\n    };\n    const collapsed = (\n        <ul>\n            <li>\n                <p>Semi Design 以内容优先进行设计。</p>\n            </li>\n            <li>\n                <p>更容易地自定义主题。</p>\n            </li>\n            <li>\n                <p>适用国际化场景。</p>\n            </li>\n            <li>\n                <p>效率场景加入人性化关怀。</p>\n            </li>\n        </ul>\n    );\n    return (\n        <div>\n            <label>设置动画时间：</label>\n            <InputNumber min={0} defaultValue={250} style={{ width: 120 }} onChange={(val) => setDuration(val)} step={10} />\n            <br />\n            <Button onClick={toggle}>Toggle</Button>\n            <Collapsible isOpen={isOpen} duration={duration}>\n                {collapsed}\n            </Collapsible>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Scale to a Resizable Component\nDESCRIPTION: Shows how to apply scaling to a Resizable component using the scale prop. This example uses scale 0.5 and requires correct transform origin setting on the parent container.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <div style={{ width: '500px', height: '60%', transform: 'scale(0.5)', transformOrigin: '0 0' }}>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n        defaultSize={{\n          width: '60%',\n          height: '60%',\n        }}\n        scale={0.5}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          scale 0.5\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection and Leaf-Only TreeSelect Example\nDESCRIPTION: Shows how to implement multiple selection in TreeSelect using the 'multiple' prop. Also demonstrates the 'leafOnly' prop which restricts display and selection to leaf nodes only.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                        {\n                            label: 'Chengdu',\n                            value: 'Chengdu',\n                            key: '0-0-2',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n    return ( \n        <div>\n            <TreeSelect\n                style={{ width: 300 }}\n                multiple\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"请选择\"\n            />\n            <br/>\n            <br/>\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                leafOnly\n                placeholder=\"只渲染叶子节点\"\n            />\n            <br/>\n            <br/>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Button Style Radio Group in Semi Design\nDESCRIPTION: Demonstrates how to create button-style Radio components with different sizes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio, RadioGroup, Space } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value1: 1,\n            value2: 1,\n            value3: 1,\n        };\n        this.onChange1 = this.onChange1.bind(this);\n        this.onChange2 = this.onChange2.bind(this);\n        this.onChange3 = this.onChange3.bind(this);\n    }\n\n    onChange1(e) {\n        this.setState({\n            value1: e.target.value,\n        });\n    }\n\n    onChange2(e) {\n        this.setState({\n            value2: e.target.value,\n        });\n    }\n\n    onChange3(e) {\n        this.setState({\n            value3: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <Space vertical spacing=\"loose\" align=\"start\">\n                <RadioGroup type=\"button\" buttonSize=\"small\" onChange={this.onChange1} value={this.state.value1} aria-label=\"RadioGroup demo\" name=\"demo-radio-small\">\n                    <Radio value={1}>Instant push</Radio>\n                    <Radio value={2}>Timed push</Radio>\n                    <Radio value={3}>Dynamic push</Radio>\n                </RadioGroup>\n                <RadioGroup type=\"button\" buttonSize=\"middle\" onChange={this.onChange2} value={this.state.value2} aria-label=\"RadioGroup demo\" name=\"demo-radio-middle\">\n                    <Radio value={1}>Instant push</Radio>\n                    <Radio value={2}>Timed push</Radio>\n                    <Radio value={3}>Dynamic push</Radio>\n                </RadioGroup>\n                <RadioGroup type=\"button\" buttonSize=\"large\" onChange={this.onChange3} value={this.state.value3} aria-label=\"RadioGroup demo\" name=\"demo-radio-large\">\n                    <Radio value={1}>Instant push</Radio>\n                    <Radio value={2}>Timed push</Radio>\n                    <Radio value={3}>Dynamic push</Radio>\n                </RadioGroup>\n            </Space>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Button Groups with Semi Design\nDESCRIPTION: Shows implementation of disabled state for button groups using ButtonGroup component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ButtonGroup } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ marginRight: 10 }}>\n                <ButtonGroup disabled>\n                    <Button>Copy</Button>\n                    <Button>Search</Button>\n                    <Button>Cut</Button>\n                </ButtonGroup>\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Timeline with DataSource\nDESCRIPTION: Implementation of Timeline using dataSource prop with various node configurations\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\nimport { IconAlertTriangle } from '@douyinfe/semi-icons';\n\n() => (\n    <Timeline\n        mode=\"alternate\"\n        dataSource={[\n            {\n                time: '2019-07-14 10:35',\n                extra: '节点辅助说明信息',\n                content: '第一个节点内容',\n                type: 'ongoing',\n            },\n            {\n                time: '2019-06-13 16:17',\n                extra: '节点辅助说明信息',\n                content: <span style={{ fontSize: '18px' }}>第二个节点内容</span>,\n                color: 'pink',\n            },\n            {\n                time: '2019-05-14 18:34',\n                extra: '节点辅助说明信息',\n                dot: <IconAlertTriangle />,\n                content: '第三个节点内容',\n                type: 'warning',\n            },\n            {\n                time: '2019-05-09 09:12',\n                extra: '节点辅助说明信息',\n                content: '第四个节点内容',\n                type: 'success',\n            },\n        ]}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Bottom Slots in React\nDESCRIPTION: Demonstrates how to add bottom slots to avatars with different shapes, sizes, and content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n()=>{\n    return <div>\n\n        <Avatar color=\"amber\" bottomSlot={{\n            shape: \"square\", \n            bgColor:'#FE2C55',\n            content: \"LIVE\"\n        }}>T</Avatar>\n\n        <Avatar color=\"amber\" size=\"large\" bottomSlot={{\n            shape: \"square\", \n            bgColor:'#FE2C55',\n            content: \"LIVE\"\n        }}>T</Avatar>\n        \n        <Avatar color=\"amber\" size=\"extra-large\" bottomSlot={{\n            shape: \"square\", \n            bgColor:'#FE2C55',\n            content: \"LIVE\"\n        }}>T</Avatar>\n        \n        <br/>\n        <br/>\n        <br/>\n        <Avatar color=\"amber\" bottomSlot={{\n            shape: \"circle\", \n            bgColor:'#FE2C55',\n            content: <IconPlus/>\n        }}>T</Avatar>\n\n        <Avatar color=\"amber\" size=\"large\" bottomSlot={{\n            shape: \"circle\", \n            bgColor:'#FE2C55',\n            content: <IconPlus/>\n        }}>T</Avatar>\n\n        <Avatar color=\"amber\" size=\"extra-large\" bottomSlot={{\n            shape: \"circle\", \n            bgColor:'#FE2C55',\n            content: <IconPlus/>\n        }}>T</Avatar>\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs with Card Style and Dynamic Content in React\nDESCRIPTION: Demonstrates using Tabs with 'card' style, tabList prop for defining tabs, and dynamic content rendering based on selected tab.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs } from '@douyinfe/semi-ui';\n\nclass TabDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { key: '1' };\n        this.onTabClick = this.onTabClick.bind(this);\n    }\n\n    onTabClick(key, type) {\n        this.setState({ [type]: key });\n    }\n\n    render() {\n        // eslint-disable-next-line react/jsx-key\n        const contentList = [<div>Document</div>, <div>Quick Start</div>, <div>Help</div>];\n        const tabList = [\n            { tab: 'Document', itemKey: '1' },\n            { tab: 'Quick Start', itemKey: '2' },\n            { tab: 'Help', itemKey: '3' },\n        ];\n        return (\n            <Tabs\n                type=\"card\"\n                tabList={tabList}\n                onChange={key => {\n                    this.onTabClick(key, 'key');\n                }}\n            >\n                {contentList[this.state.key - 1]}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modal with Footer Fill Implementation\nDESCRIPTION: Shows how to implement a Modal with footer buttons that fill the entire width using footerFill property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    const handleOk = () => {\n        setVisible(false);\n        console.log('Ok button clicked');\n    };\n    const handleCancel = () => {\n        setVisible(false);\n        console.log('Cancel button clicked');\n    };\n    const handleAfterClose = () => {\n        console.log('After Close callback executed');\n    };\n\n    return (\n        <>\n            <Button onClick={showDialog}>Open Modal</Button>\n            <Modal\n                title=\"Basic Modal\"\n                visible={visible}\n                onOk={handleOk}\n                afterClose={handleAfterClose}\n                onCancel={handleCancel}\n                closeOnEsc={true}\n                footerFill={true}\n            >\n                This is the content of a basic modal.\n                <br />\n                More content...\n            </Modal>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Statistics Placeholder with Skeleton Components\nDESCRIPTION: Demonstrates how to use Paragraph and Title skeleton components to create a placeholder for statistical data display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Descriptions } from '@douyinfe/semi-ui';\n\n() => {\n    const placeholder = (\n        <div>\n            <Skeleton.Paragraph rows={1} style={{ width: 80, marginBottom: 10 }} />\n            <Skeleton.Title style={{ width: 120 }} />\n        </div>\n    );\n\n    const data = [{ key: '实际用户数量', value: '1,480,000' }];\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <Descriptions data={data} row />\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic PinCode Usage with Different Sizes\nDESCRIPTION: Demonstrates the basic usage of PinCode component with small, default, and large sizes. Each PinCode has a default value and includes onChange and onComplete event handlers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinCode } from '@douyinfe/semi-ui';\nimport React from 'react';\n\nfunction Demo() {\n    return (\n        <>\n            <PinCode\n                size={'small'}\n                defaultValue={'123456'}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n            <br />\n            <PinCode\n                size={'default'}\n                defaultValue={'123456'}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n            <br />\n            <PinCode\n                size={'large'}\n                defaultValue={'123456'}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Total Page Display in React\nDESCRIPTION: Demonstrates how to show the total number of pages using the 'showTotal' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showTotal style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={200} showTotal style={{ marginBottom: 12 }}></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Chart Implementation in React with VChart\nDESCRIPTION: Creates a stacked bar chart showing population distribution by age groups across different states. Includes stack visualization and orientation controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'bar',\n  stack: true,\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { State: 'WY', Age: 'Under 5 Years', Population: 25635 },\n        { State: 'WY', Age: '5 to 13 Years', Population: 1890 },\n        { State: 'WY', Age: '14 to 17 Years', Population: 9314 },\n        { State: 'DC', Age: 'Under 5 Years', Population: 30352 },\n        { State: 'DC', Age: '5 to 13 Years', Population: 20439 },\n        { State: 'DC', Age: '14 to 17 Years', Population: 10225 },\n        { State: 'VT', Age: 'Under 5 Years', Population: 38253 },\n        { State: 'VT', Age: '5 to 13 Years', Population: 42538 },\n        { State: 'VT', Age: '14 to 17 Years', Population: 15757 },\n        { State: 'ND', Age: 'Under 5 Years', Population: 51896 },\n        { State: 'ND', Age: '5 to 13 Years', Population: 67358 },\n        { State: 'ND', Age: '14 to 17 Years', Population: 18794 },\n        { State: 'AK', Age: 'Under 5 Years', Population: 72083 },\n        { State: 'AK', Age: '5 to 13 Years', Population: 85640},\n        { State: 'AK', Age: '14 to 17 Years', Population: 22153 }\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: 图片渐进加载实现 - React\nDESCRIPTION: 通过 placeholder 属性为大图实现渐进加载效果。示例中使用低分辨率小图作为占位图，加载完成后显示高分辨率大图，提供了重新加载按钮刷新图片。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [timestamp, setTimestamp] = React.useState('');\n    return (  \n        <>\n            <Image \n                width={300}\n                height={200}\n                src={`https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-big.png?${timestamp}`}\n                placeholder={<Image \n                    src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-small.jpeg'\n                    width={300}\n                    height={200}\n                    preview={false}\n                />}\n            />\n            <br />\n            <Button \n                theme={'solid'}\n                onClick={() => {\n                    setTimestamp(Date.now());\n                }}\n                style={{ marginTop: 10 }}\n            >Reload</Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic BackTop Implementation in React\nDESCRIPTION: Demonstrates basic usage of the BackTop component with default styling. Shows a button that appears when scrolling down and returns to top when clicked.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/backtop/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { BackTop } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    render() {\n        return (\n            <div>\n                <span>Scroll down to see the bottom-right gray button.</span>\n                <BackTop />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Size Variations\nDESCRIPTION: Shows different size variations (small, default, large) of the Switch component with loading states\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch size=\"small\" aria-label=\"a switch for demo\"></Switch>\n        <Switch defaultChecked={true} size=\"small\" aria-label=\"a switch for demo\"></Switch>\n        <Switch size=\"small\" loading aria-label=\"a switch for demo\" />\n        <Switch size=\"small\" loading defaultChecked={true} aria-label=\"a switch for demo\" />\n        <br />\n        <br />\n        <Switch></Switch>\n        <Switch defaultChecked={true}></Switch>\n        <Switch loading />\n        <Switch loading defaultChecked={true} />\n        <br />\n        <br />\n        <Switch size=\"large\"></Switch>\n        <Switch defaultChecked={true} size=\"large\"></Switch>\n        <Switch size=\"large\" loading />\n        <Switch size=\"large\" loading defaultChecked={true} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum and Minimum Size Constraints\nDESCRIPTION: Shows how to set maximum and minimum width and height constraints for the Resizable component using maxWidth, maxHeight, minWidth, and minHeight props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n        maxWidth={200}\n        maxHeight={300}\n        minWidth={50}\n        minHeight={50}\n        defaultSize={{\n          width: 100,\n          height: 100,\n        }}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          width is between 50 and 200, height is between 50 and 300\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cascader Component Type Definitions\nDESCRIPTION: TypeScript type definitions for various props and callbacks in the Cascader component interface.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CascaderProps {\n    prefix?: ReactNode;\n    preventScroll?: boolean;\n    restTagsPopoverProps?: PopoverProps;\n    searchPlaceholder?: string;\n    searchPosition?: 'trigger' | 'custom';\n    separator?: string;\n    showClear?: boolean;\n    showNext?: 'click' | 'hover';\n    showRestTagsPopover?: boolean;\n    size?: 'large' | 'small' | 'default';\n    stopPropagation?: boolean;\n    disableStrictly?: boolean;\n    style?: CSSProperties;\n    suffix?: ReactNode;\n    topSlot?: ReactNode;\n    treeData?: CascaderData[];\n    treeNodeFilterProp?: string;\n    triggerRender?: (props: TriggerRenderProps) => ReactNode;\n    value?: string | number | CascaderData | (string | number | CascaderData)[][];\n    validateStatus?: 'default' | 'error' | 'warning';\n    virtualizeInSearch?: { height: number; width: number; itemSize: number };\n    zIndex?: number;\n    enableLeafClick?: boolean;\n    onBlur?: (e: MouseEvent) => void;\n    onChange?: (value: string | number | CascaderData | (string | number | CascaderData)[]) => void;\n    onClear?: () => void;\n    onChangeWithObject?: boolean;\n    onDropdownVisibleChange?: (visible: boolean) => void;\n    onExceed?: (checkedItem: Entity[]) => void;\n    onFocus?: (e: MouseEvent) => void;\n    onListScroll?: (e: React.Event, panel: { panelIndex: number; activeNode: CascaderData; }) => void;\n    onLoad?: (newLoadedKeys: Set<string>, data: CascaderData) => void;\n    onSearch?: (value: string) => void;\n    onSelect?: (value: string | number | (string | number)[]) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Animation to Skeleton Components\nDESCRIPTION: Shows how to enable animation effects for skeleton placeholders using the 'active' property, creating a more dynamic loading state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        display: 'flex',\n        alignItems: 'flex-start',\n    };\n\n    const placeholder = (\n        <div style={style}>\n            <Skeleton.Avatar style={{ marginRight: 12 }} />\n            <div>\n                <Skeleton.Title style={{ width: 120, marginBottom: 12, marginTop: 12 }} />\n                <Skeleton.Paragraph style={{ width: 240 }} rows={3} />\n            </div>\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true} active>\n            <div style={style}>\n                <Avatar color=\"blue\" style={{ marginRight: 12 }}>\n                    UI\n                </Avatar>\n                <div>\n                    <h3>Semi UI</h3>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                    <p>Hi, Bytedance dance dance.</p>\n                </div>\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Notifications with Colored Backgrounds in React\nDESCRIPTION: Demonstrates how to use the theme property to create notifications with light-colored backgrounds. Different notification types (info, success, warning, error) are shown with a light theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        title: 'Hi, Bytedance',\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n        theme: 'light'\n    };\n\n    return (\n        <>\n            <Button onClick={() => Notification.info(opts)}>\n                Info\n            </Button>\n            <br/>\n            <br/>\n            <Button onClick={() => Notification.success(opts)}>\n                Success\n            </Button>\n            <br/>\n            <br/>\n            <Button type=\"warning\" onClick={() => Notification.warning(opts)}>\n                Warning\n            </Button>\n            <br/>\n            <br/>\n            <Button type=\"danger\" onClick={() => Notification.error(opts)}>\n                Error\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Select with Prefix and Suffix in React\nDESCRIPTION: Demonstrates how to configure Select component with prefix icons, suffix icons, clear button, and dropdown arrow customization. Uses IconVigoLogo and IconGift components for visual elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\nimport { IconVigoLogo, IconGift } from '@douyinfe/semi-icons';\n\n() => (\n    <>\n        <Select style={{ width: '320px' }} defaultValue={'douyin'} prefix={<IconVigoLogo />} showClear={true}>\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n            <Select.Option value=\"coze\">Coze</Select.Option>\n            <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select\n            style={{ width: '320px' }}\n            defaultValue={'capcut'}\n            prefix={<IconVigoLogo />}\n            suffix={<IconGift />}\n            showArrow={false}\n        >\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n            <Select.Option value=\"capcut\">Capcut</Select.Option>\n            <Select.Option value=\"coze\">Coze</Select.Option>\n            <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n        </Select>\n    </>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AudioPlayer in React\nDESCRIPTION: 演示AudioPlayer组件的基本用法，包括不同类型的audioUrl参数传入。支持单个音频URL、音频URL数组、音频对象和音频对象数组。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const audioUrl = 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3';\n    const audioUrlArr = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3',\n    ];\n    const audioUrlObj = {\n        src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n        title: '音频标题',\n        cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n    };\n    const audioUrlArrObj = [\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n            title: '音频标题1',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3',\n            title: '音频标题2',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n    ];\n  \n    return (\n        <div style={{ width: '100%' }}>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrl}\n                />\n            </div>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrlObj}\n                />\n            </div>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrlArr}\n                />\n            </div>\n            <div style={{ marginTop: 10 }}>\n                <AudioPlayer\n                    autoPlay={false}\n                    audioUrl={audioUrlArrObj}\n                />\n            </div>\n        </div>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Avatar with Title Skeleton\nDESCRIPTION: Shows how to combine Avatar and Title skeletons in a horizontal layout.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const placeholder = (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Skeleton.Avatar style={{ marginRight: 12 }} />\n            <Skeleton.Title style={{ width: 120 }} />\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <Avatar color=\"blue\" style={{ marginRight: 12 }}>\n                UI\n            </Avatar>\n            <span>Semi UI</span>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Text with PureA Component\nDESCRIPTION: Examples showing recommended and deprecated usage patterns for link text implementation using the PureA component. Demonstrates proper formatting for clarity, internationalization, and punctuation rules.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<PureA> Create space </PureA>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PureA>notifications</PureA>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PureA> Forgot password ？</PureA>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<PureA> user documentation </PureA>\n```\n\n----------------------------------------\n\nTITLE: TimePicker Type Definitions\nDESCRIPTION: Type definitions for the TimePicker component props including time formats and callback functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimePickerProps {\n    type: \"time\" | \"timeRange\";\n    value?: Date | number | string | Array<Date | number | string>;\n    onChange?: (time: Date | Date[], timeString: string | string[]) => void;\n    onBlur?: (e: Event) => void;\n    onFocus?: (e: Event) => void;\n    onOpenChange?: (isOpen: boolean) => void;\n    size?: \"default\" | \"small\" | \"large\";\n    use12Hours?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: InputGroup Properties Table in Markdown\nDESCRIPTION: Markdown table defining InputGroup component properties including styling, label options, and event handlers\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Property      | Instructions                                | Type                                                          | Default |\n|---------------|--------------------------------------------|---------------------------------------------------------------|---------------|\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropdown Layer Style in Semi Design Select\nDESCRIPTION: This example shows how to customize the dropdown layer style of a Select component using dropdownClassName and dropdownStyle props. It demonstrates setting a custom width for the dropdown.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <Select\n        placeholder=\"自定义弹出层样式的\"\n        style={{ width: 180 }}\n        dropdownStyle={{ width: 250 }}\n        dropdownClassName=\"test\"\n    >\n        <Select.Option value=\"douyin\">抖音</Select.Option>\n        <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        <Select.Option value=\"jianying\">剪映</Select.Option>\n        <Select.Option value=\"xigua\">西瓜视频</Select.Option>\n    </Select>\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Steps\nDESCRIPTION: Demonstrates how to use custom icons in steps using the icon property\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps } from '@douyinfe/semi-ui';\nimport { IconHome, IconLock, IconClear, IconTickCircle } from '@douyinfe/semi-icons';\n\n() => (\n    <Steps type=\"basic\" onChange={(i)=>console.log(i)}>\n        <Steps.Step status=\"finish\" title=\"Login\" icon={<IconHome />} />\n        <Steps.Step status=\"finish\" title=\"Verification\" icon={<IconLock />} />\n        <Steps.Step status=\"process\" title=\"Pay\" icon={<IconClear />} />\n        <Steps.Step status=\"wait\" title=\"Done\" icon={<IconTickCircle />} />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Currency with Custom Prefix/Suffix in InputNumber Component\nDESCRIPTION: This example shows how to hide the default currency display with showCurrencySymbol={false} and instead display currency information using the prefix and suffix properties of the InputNumber component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';    \n\n() => {\n    const defaultValue = 123456.78;\n    return (\n        <div>\n            <div>🇨🇳 CNY ➕ code</div>\n            <InputNumber style={{ width: 200 }} currency=\"CNY\" prefix=\"CNY\" showCurrencySymbol={false} defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ symbol</div>\n            <InputNumber style={{ width: 200 }} currency=\"CNY\" prefix=\"￥\" showCurrencySymbol={false} defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ name</div>\n            <InputNumber style={{ width: 200 }} currency=\"CNY\" suffix=\"人民币\" showCurrencySymbol={false} defaultValue={defaultValue} />\n            <br />\n            <br />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Collapsible Components\nDESCRIPTION: Example of implementing nested Collapsible components with independent toggle controls\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState(false);\n    const [isChildOpen, setChildOpen] = useState(false);\n\n    const collapsed = (\n        <ul>\n            <li>Nothing can ever happen twice.</li>\n            <li>In consequence, the sorry fact is</li>\n            <li>that we arrive here improvised</li>\n            <li>and leave without the chance to practice. </li>\n        </ul>\n    );\n    return (\n        <div>\n            <Button onClick={() => setOpen(!isOpen)}>Toggle</Button>\n            <br />\n            <Collapsible isOpen={isOpen}>\n                <div>\n                    <span>Conntent of first level</span>\n                    <Button onClick={() => setChildOpen(!isChildOpen)}>Toggle List</Button>\n                </div>\n                <Collapsible isOpen={isChildOpen}>{collapsed}</Collapsible>\n            </Collapsible>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Bounding Resizable Component to Parent Element\nDESCRIPTION: Shows how to bound the Resizable component to its parent element using the 'boundElement' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div style={{ width: '300px', height: '300px', border: 'var(--semi-color-border) 1px solid' }}>\n            <Resizable\n                style={{ marginLeft: '20%', backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                defaultSize={{\n                    width: '60%',\n                    height: 200,\n                }}\n                boundElement={'parent'}\n            >\n                <div style={{ marginLeft: '20%' }}>bound：parent</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Value Selection in Semi Design Tree Component\nDESCRIPTION: This example shows how to create a controlled Tree component using value and onChange props. The selected node value is maintained in the component's state and updated when a node is selected.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: 'Shanghai'\n        };\n    }\n    onChange(value) {\n        this.setState({ value });\n    }\n    render() {\n        const treeData = [\n            {\n                label: '亚洲',\n                value: 'Asia',\n                key: '0',\n                children: [\n                    {\n                        label: '中国',\n                        value: 'China',\n                        key: '0-0',\n                        children: [\n                            {\n                                label: '北京',\n                                value: 'Beijing',\n                                key: '0-0-0',\n                            },\n                            {\n                                label: '上海',\n                                value: 'Shanghai',\n                                key: '0-0-1',\n                            },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: '北美洲',\n                value: 'North America',\n                key: '1',\n            }\n        ];\n        const style = {\n            width: 260,\n            height: 420,\n            border: '1px solid var(--semi-color-border)'\n        };\n        return (\n            <Tree\n                treeData={treeData}\n                value={this.state.value}\n                onChange={value => this.onChange(value)}\n                style={style}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ColorPicker with Default Value\nDESCRIPTION: Shows how to set a default color using the colorStringToValue helper function to convert color strings to the required format object.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return (\n        <div>\n            <ColorPicker\n                defaultValue={ColorPicker.colorStringToValue('rgb(57,197,187)')}\n                onChange={value => {\n                    console.log(value);\n                }}\n                alpha={true}\n            />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Upload with Custom Data and Headers\nDESCRIPTION: Shows how to add custom data and headers to Upload requests. This example adds role and timestamp data as well as a custom header.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    let data = {\n        role: 'ies',\n        time: new Date().getTime(),\n    };\n    let headers = {\n        'x-tt-semi': 'semi-upload',\n    };\n    return (\n        <Upload action={action} data={data} headers={headers}>\n            <Button icon={<IconUpload />} theme=\"light\">\n                Click upload\n            </Button>\n        </Upload>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 渲染多日视图日历 - React\nDESCRIPTION: 使用 Calendar 组件渲染多日视图的日历。range 属性必传，左闭右开。此功能在 1.5.0 及以上版本可用。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => <Calendar mode=\"range\" range={[new Date(2020, 8, 26), new Date(2020, 8, 31)]} />;\n```\n\n----------------------------------------\n\nTITLE: OverflowList Direction Control Implementation\nDESCRIPTION: Shows how to implement OverflowList with different collapse directions (start/end) and width control using a slider.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.length ? <Tag style={{ marginRight: 8, flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }}>+{items.length}</Tag> : null;\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <Tag color=\"blue\" key={item.key} style={{ marginRight: 8, flex: '0 0 auto' }}>\n                {item.icon}\n                {item.key}\n            </Tag>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList\n                    items={items}\n                    collapseFrom=\"start\"\n                    overflowRenderer={renderOverflow}\n                    visibleItemRenderer={renderItem}\n                />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: DragMove with Custom Position Processing\nDESCRIPTION: Implements DragMove with custom position processing using the customMove prop, allowing for custom position handling after dragging.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from'react';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction CustomMove() {\n  const containerRef = React.useRef();\n  const elementRef = React.useRef();\n  const startPoint = React.useRef();\n\n  const customMove = useCallback((element, top, left) => {\n    if (left + 100 > containerRef.current.offsetWidth) {\n      element.style.right = `${containerRef.current.offsetWidth - left - element.offsetWidth}px`\n      element.style.left = 'auto';\n    } else {\n      element.style.left = left + 'px';\n    } \n    element.style.top = top + 'px';\n  }, [])\n\n  const onMouseDown = useCallback((e) => {\n    startPoint.current = {\n      x: e.clientX,\n      y: e.clientY,\n    }\n  }, []);\n\n  const onMouseUp = useCallback((e) => {\n    if (startPoint.current) {\n      const { x, y } = startPoint.current;\n      if (Math.abs(e.clientX - x) < 5 && Math.abs(e.clientY - y) < 5) {\n        if (elementRef.current.style.width === '50px') {\n          elementRef.current.style.width = '100px';\n        } else {\n          elementRef.current.style.width = '50px';\n        }\n      }\n    }\n    startPoint.current = null;\n  }, []);\n\n  return (\n    <>\n      <span>Click on the blue color block to change the width. The blue color block will not exceed the range limit before and after the change.</span>\n      <br /><br />\n      <div \n        style={{ \n          backgroundColor: 'rgba(var(--semi-grey-2), 1)', width: 300, height: 300, \n          position: 'relative', padding: 10,\n          color: 'rgba(var(--semi-white), 1)', fontWeight: 500,\n        }} \n        ref={containerRef}\n      >\n        <span>Constrainer</span>\n        <DragMove\n          constrainer={() => containerRef.current}\n          customMove={customMove}\n        >\n          <div\n            style={{ backgroundColor: 'var(--semi-color-primary)',width: 50, height: 50,\n              display: 'flex', alignItems: 'center',justifyContent: 'center',\n              position: 'absolute', top: 50, left: 50, borderRadius: 10, padding: 5\n            }}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            ref={elementRef}\n          >Drag me</div>\n        </DragMove>\n      </div> \n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Avatar Size Examples\nDESCRIPTION: Demonstrates different size options for Avatar component from extra-extra-small to extra-large\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Avatar size=\"extra-extra-small\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"extra-small\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"small\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"default\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar style={{ margin: 4 }} alt='User'>U</Avatar>\n        <Avatar size=\"large\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"extra-large\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Additional Borders in React\nDESCRIPTION: Shows how to add borders to avatars using the 'border' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n()=>{\n    return <div>\n\n        <Avatar color=\"amber\" border={true} style={{marginRight:'8px'}}>T</Avatar>\n\n        <Avatar color=\"amber\" border={true} style={{marginRight:'8px'}}>T</Avatar>\n\n        <Avatar color=\"amber\" border={true} style={{marginRight:'8px'}}>T</Avatar>\n    \n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Copyable Text with Typography in React\nDESCRIPTION: Demonstrates various implementations of copyable text using Typography components. Shows basic copying, custom copy content, custom icons, custom render functions, and success callbacks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography, TextArea, Button } from '@douyinfe/semi-ui';\nimport { IconSetting } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Paragraph, Text, Numeral } = Typography;\n\n    return (\n        <div>\n            <Paragraph copyable>Click the right icon to copy text.</Paragraph>\n            <Paragraph copyable={{ content: 'Hello, Semi Design!' }}>Click to copy text.</Paragraph>\n            <Paragraph copyable={{ onCopy: () => Toast.success({ content: 'Successfully copied.' }) }}>Click the right icon to copy.</Paragraph>\n            Timestamp: <Numeral truncate=\"ceil\" copyable underline>{new Date().getTime()/1000}s</Numeral>\n            <Paragraph copyable={{ icon: <IconSetting style={{ color: 'var(--semi-color-link)' }}/> }}>Custom Copy Node</Paragraph>\n            <Paragraph copyable={{\n                content: 'Custom render!',\n                render: (copied, doCopy, config) => {\n                    return (\n                        <Button size=\"small\" onClick={doCopy}>\n                            <span>{copied ? 'Copy success' : `Click to copy: ${config.content}`}</span>\n                        </Button>\n                    );\n                }\n            }}>\n                Custom Copy Render\n            </Paragraph>\n            <br/>\n            <br/>\n            <Text type=\"secondary\">Paste here: </Text>\n            <br/>\n            <TextArea autosize style={{ width: 320, marginTop: 4 }} rows={3} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Accordion Style Collapse\nDESCRIPTION: Shows implementation of accordion mode where only one panel can be expanded at a time.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse } from '@douyinfe/semi-ui';\n\n() => (\n    <Collapse accordion>\n        <Collapse.Panel header=\"This is panel header 1\" itemKey=\"1\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 2\" itemKey=\"2\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 3\" itemKey=\"3\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up CSS Variables for Dark Mode in Semi Design\nDESCRIPTION: Configures the body element with CSS variables for text color and background color, allowing automatic inheritance for light/dark mode switching.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    color: var(--semi-color-text-0);\n    background-color: var( --semi-color-bg-0);\n}\n```\n\n----------------------------------------\n\nTITLE: Steps Component Parameters Table\nDESCRIPTION: Markdown table defining all available parameters for the Steps component, including their types, defaults, and version information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameters | Instructions | type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | Class name | string |  |  |\n| current | Specifies the current step, counting from 0. In the subStep element, the state can be overridden by the `status` attribute | number | 0 |  |\n| direction | Specify step bar directions. Currently support level (`vertical`) and vertical (`vertical`) in both directions | string | with |  |\n| hasLine | When the step bar type is basic, you can control whether to display the connecting line | boolean | true | 1.18.0 |\n| initial | Start serial number, count from 0. | number | 0 |  |\n| size | For simple step bar and navigation step bar, the size is optional, the value is `small`, `default` | string | `default` | 1.18.0 |\n| status | Specify the status of the current step, optional `wait`,`process`,`finish`,`error`,`warning` | string | process |  |\n| style | Style | CSSProperties |  |  |\n| type | Steps type, optional `fill` `basic`、`nav` | string | fill | 1.18.0 |\n| onChange  | onChange callback    | (index: number)=>void | -       | 1.29.0    |\n```\n\n----------------------------------------\n\nTITLE: Dynamic ResizeGroup Demo with Direction Toggle\nDESCRIPTION: Demonstrates a resizable group component with dynamically changeable direction (horizontal/vertical) and nested resize items. The demo includes resize handlers and event callbacks for resize actions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [text, setText] = useState('drag to resize')\n  const [direction, setDirection] = useState('horizontal')\n\n  const changeDirection = () => {\n    if (direction === 'horizontal') {\n      setDirection('vertical')\n    } else {\n      setDirection('horizontal')\n    }\n  }\n  return (\n    <div style={{ width: '400px', height: '300px' }}>\n      <Button onClick={changeDirection}>{direction}</Button>\n      <ResizeGroup direction={direction} >\n        <ResizeItem\n          onChange={() => { setText('resizing') }}\n          onResizeEnd={() => { setText('drag to resize') }}\n          defaultSize={5}\n        >\n            <ResizeGroup direction='horizontal'>\n              <ResizeItem\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', }}\n                onChange={() => { setText('resizing') }}\n                onResizeEnd={() => { setText('drag to resize') }}\n              >\n                <div style={{ marginLeft: '20%',  padding:'5px' }}>\n                  {text}\n                </div>\n              </ResizeItem>\n              <ResizeHandler></ResizeHandler>\n              <ResizeItem\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', }}\n                onChange={() => { setText('resizing') }}\n              >\n                <div style={{ marginLeft: '20%',  padding:'5px' }}>\n                  {text}\n                </div>\n              </ResizeItem>\n            </ResizeGroup>\n        </ResizeItem>\n        <ResizeHandler></ResizeHandler>\n        <ResizeItem\n          style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)',  }}\n          defaultSize={1.3}\n          onChange={() => { setText('resizing') }}\n        >\n          <div style={{ marginLeft: '20%',  padding:'5px' }}>\n            {text}\n          </div>\n        </ResizeItem>\n      </ResizeGroup>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Avatar Group with Overlap Direction Control\nDESCRIPTION: Shows how to control the avatar overlap direction using the overlapFrom prop, demonstrating both 'start' and 'end' configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AvatarGroup, Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div>\n            <AvatarGroup overlapFrom={'start'}>\n                <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n                <Avatar alt='Caroline Xiao'>CX</Avatar>\n                <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n                <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n                <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n            </AvatarGroup>\n        </div>\n        <div>\n            <AvatarGroup overlapFrom={'end'}>\n                <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n                <Avatar alt='Caroline Xiao'>CX</Avatar>\n                <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n                <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n                <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n            </AvatarGroup>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 创建不同配置的Toast (React)\nDESCRIPTION: 展示如何使用ToastFactory.create方法创建具有不同配置的Toast实例。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button, ToastFactory } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const ToastInCustomContainer = ToastFactory.create({\n        getPopupContainer: () => document.getElementById('custom-toast-container'),\n    });\n    return (\n        <div>\n            <Button onClick={() => Toast.info('Toast')}>Default Toast</Button>\n            <br />\n            <br />\n            <Button onClick={() => ToastInCustomContainer.info('Toast in some container')}>\n                Toast in custom container\n            </Button>\n            <div id=\"custom-toast-container\">custom container</div>\n        </div>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Chart Implementation with VChart\nDESCRIPTION: Creates a basic bar chart with switchable vertical/horizontal orientation. Uses sales data across weekdays and includes title, legends, and direction controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\nimport { initVChartSemiTheme } from '@visactor/vchart-semi-theme';\n\ninitVChartSemiTheme();\n\nconst commonSpec = {\n  type: 'bar',\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { type:'Date', month: 'Monday', sales: 22 },\n        { type:'Date', month: 'Tuesday', sales: 13 },\n        { type:'Date', month: 'Wednesday', sales: 25 },\n        { type:'Date', month: 'Thursday', sales: 29 },\n        { type:'Date', month: 'Friday', sales: 38 }\n      ]\n    }\n  ],\n  title: {\n    visible: true,\n    text: 'Bar chart',\n    subtext: 'This is a bar chart',\n  },\n  legends: {\n    visible: true,\n  },\n  xField: 'month',\n  yField: 'sales',\n  seriesField: 'type',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeHighlight for Additional Languages (Vala)\nDESCRIPTION: Demonstrates how to configure CodeHighlight for additional languages beyond the default set. This example shows highlighting for the Vala language, used in GTK programming.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"prismjs/components/prism-vala.js\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\nimport \"prismjs/components/prism-vala.js\"\n\nfunction Demo() {\n    return <CodeHighlight\n        language={\"vala\"} \n        code={\n        `public class ExampleApp : Gtk.Application {\n    public ExampleApp () {\n        Object (application_id: \"com.example.App\");\n    }\n\n    public override void activate () {\n        var win = new Gtk.ApplicationWindow (this);\n\n        var btn = new Gtk.Button.with_label (\"Hello World\");\n        btn.clicked.connect (win.close);\n\n        win.child = btn;\n        win.present ();\n    }\n\n    public static int main (string[] args) {\n        var app = new ExampleApp ();\n        return app.run (args);\n    }\n}\n`\n    }/>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar in Week Mode\nDESCRIPTION: Shows how to render a Calendar component in week mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => (\n    <Calendar mode=\"week\"></Calendar>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Banner Types in React\nDESCRIPTION: Shows all available banner types - info, warning, danger, and success. Each type has distinct visual styling to represent different notification contexts.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Banner } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Banner \n            type=\"info\"\n            description=\"A pre-released version is available.\"\n        />\n        <br/>\n        <Banner \n            type=\"warning\"\n            description=\"This version of the document is going to expire after 4 days.\"\n        />\n        <br/>\n        <Banner \n            type=\"danger\"\n            description=\"This document was deprecated since Jan 1, 2019.\"\n        />\n        <br/>\n        <Banner \n            type=\"success\"\n            description=\"You are viewing the latest version of this document.\"\n        />\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Usage in React\nDESCRIPTION: Demonstrates the basic usage of the Input component with a default value.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input defaultValue='hi'></Input>\n);\n```\n\n----------------------------------------\n\nTITLE: ColorPicker with Additional Elements at Top and Bottom\nDESCRIPTION: Shows how to add custom elements at the top and bottom of the ColorPicker using the topSlot and bottomSlot props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return (\n        <ColorPicker\n            topSlot={<div>TopSlot</div>}\n            bottomSlot={<div>Bottom Slot</div>}\n            alpha={true}\n            onChange={value => {\n                console.log(value);\n            }}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Screen Modal in Semi Design\nDESCRIPTION: Example of creating a full screen Modal using the fullScreen prop. Shows basic implementation with hooks for state management.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const onClose = () => {\n        setVisible(false);\n    };\n    return (\n        <>\n            <Button onClick={() => setVisible(true)}>Open Full Screen Modal</Button>\n            <Modal\n                title=\"Title of Modal\"\n                fullScreen\n                visible={visible}\n                onOk={onClose}\n                onCancel={onClose}\n            >\n                <p>This is a full screen modal</p>\n                <p>More content...</p>\n            </Modal>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Value Retrieval with ConfigConsumer\nDESCRIPTION: Shows how to manually retrieve configuration values using ConfigConsumer component, useful for special scenarios where automatic consumption isn't sufficient.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useState } from 'react';\nimport { ConfigProvider, ConfigConsumer, Select, DatePicker, TimePicker, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo(props = {}) {\n  const [timeZone, setTimeZone] = useState('GMT+08:00');\n  const defaultTimestamp = 1581599305265;\n  const gmtList = useMemo(() => {\n    const list = [];\n    for (let hourOffset = -11; hourOffset <= 14; hourOffset++) {\n      const prefix = hourOffset >= 0 ? '+' : '-';\n      const hOffset = Math.abs(parseInt(hourOffset, 10));\n      list.push(`GMT${prefix}${String(hOffset).padStart(2, '0')}:00`);\n    }\n    return list;\n  }, []);\n\n  return (\n          <ConfigProvider timeZone={timeZone}>\n            {/*...*/}\n            <ConfigConsumer>\n              {(value) => {\n                return <Typography.Text ellipsis={{ showTooltip: {opts:{style:{minWidth:\"1200px\"}} }}}  style={{ width: 600 }}>\n                  {JSON.stringify(value)}\n                </Typography.Text>\n             }}\n            </ConfigConsumer>\n            {/*...*/}\n          </ConfigProvider>\n          );\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Size Variations in React\nDESCRIPTION: 展示Switch组件的不同尺寸变体(small、default、large)以及各尺寸下的加载状态。每种尺寸都展示了普通状态和选中状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Space style={{ marginBottom: 10, display: 'block' }}>\n            <Switch size=\"small\" aria-label=\"a switch for demo\"></Switch>\n            <Switch defaultChecked={true} size=\"small\" aria-label=\"a switch for demo\"></Switch>\n            <Switch size=\"small\" loading aria-label=\"a switch for demo\" />\n            <Switch size=\"small\" loading defaultChecked={true} aria-label=\"a switch for demo\" />\n        </Space>\n        <Space style={{ marginBottom: 10, display: 'block' }}>\n            <Switch></Switch>\n            <Switch defaultChecked={true} aria-label=\"a switch for demo\"></Switch>\n            <Switch loading aria-label=\"a switch for demo\" />\n            <Switch loading defaultChecked={true} aria-label=\"a switch for demo\" />\n        </Space>\n        <Space>\n            <Switch size=\"large\"></Switch>\n            <Switch defaultChecked={true} size=\"large\"></Switch>\n            <Switch size=\"large\" loading />\n            <Switch size=\"large\" loading defaultChecked={true} />\n        </Space>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Animation in Vue\nDESCRIPTION: Example of using the Animation class in a Vue component. It demonstrates initializing the animation in the created hook, starting it in mounted, and cleaning up in beforeDestroy.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation/README.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div :style=\"{ transform: `scale(${value})`, display: 'inline-block' }\">{{value}}</div>\n</template>\n\n<script>\n    import { Animation } from '@douyinfe/semi-animation';\n\n    export default {\n        data() {\n            return { value: 0 };\n        },\n        created() {\n            this.animation = new Animation({\n                from: { value: 0 },\n                to: { value: 1 },\n            });\n\n            this.animation.on('frame', props => {\n                this.value = props.value;\n            });\n        },\n        mounted() {\n            this.animation.start();\n        },\n        beforeDestroy() {\n            this.animation.destroy();\n        },\n    };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Different Validation States of TagInput\nDESCRIPTION: Shows how to set different validation states for the TagInput component: default, warning, and error.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <TagInput placeholder='default'/>\n        <br/><br/>\n        <TagInput placeholder='warning' validateStatus='warning'/>\n        <br/><br/>\n        <TagInput placeholder='error' validateStatus='error'/>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Vertical Radio Group\nDESCRIPTION: Example of a Radio group with vertical orientation, controlled by the 'direction' property set to 'vertical'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <RadioGroup direction=\"vertical\" aria-label=\"单选组合示例\" name=\"demo-radio-group-vertical\">\n        <Radio value={1}>A</Radio>\n        <Radio value={2}>B</Radio>\n        <Radio value={3}>C</Radio>\n        <Radio value={4}>D</Radio>\n    </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection with DatePicker\nDESCRIPTION: Demonstrates how to enable multiple date selection by setting the multiple prop to true.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker multiple={true} style={{ width: 240 }} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Container-Specific SideSheet Rendering\nDESCRIPTION: Demonstrates how to render SideSheet within a specific container using getPopupContainer prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const [value, setValue] = useState('');\n    const getContainer = () => {\n        return document.querySelector('.sidesheet-container');\n    };\n    return (\n        <div\n            style={{\n                height: 320,\n                overflow: 'hidden',\n                position: 'relative',\n                border: '1px solid var(--semi-color-border)',\n                borderRadius: 2,\n                padding: 24,\n                textAlign: 'center',\n                background: 'var(--semi-color-fill-0)',\n            }}\n            className=\"sidesheet-container\"\n        >\n            <span>Render in this</span>\n            <br />\n            <br />\n            <Button onClick={() => setVisible(true)}>Open SideSheet</Button>\n            <SideSheet\n                title=\"渲染在指定容器内部\"\n                visible={visible}\n                onCancel={() => setVisible(false)}\n                width={220}\n                getPopupContainer={getContainer}\n            >\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Pure Card Style Radio Group\nDESCRIPTION: Example of a Radio group with a card-style background but without the actual radio element, using the 'type=\"pureCard\"' property on RadioGroup.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <RadioGroup type='pureCard' defaultValue={2} direction='vertical' aria-label=\"单选组合示例\" name=\"demo-radio-group-pureCard\">\n        <Radio value={1} disabled extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Radio>\n        <Radio value={2} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Radio>\n        <Radio value={3} extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 280 }}>\n            单选框标题\n        </Radio>\n    </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Information for Chat in JavaScript\nDESCRIPTION: Defines role information for user, assistant, and system in the chat interface. Includes names and avatar URLs for each role.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shadows to Cards in Semi Design\nDESCRIPTION: Demonstrates how to add shadows to cards using the 'shadows' prop, with options for 'hover' and 'always' shadow effects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Avatar, Popover } from '@douyinfe/semi-ui';\nimport { IconInfoCircle } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <div>\n            <Card \n                shadows='hover'\n                style={{ maxWidth: 360 }} \n                bodyStyle={{ \n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n                <Popover\n                    position='top'\n                    showArrow\n                    content={\n                        <article style={{ padding: 6 }}>\n                            这是一个 Card\n                        </article>\n                    }\n                >\n                    <IconInfoCircle style={{ color: 'var(--semi-color-primary)' }}/>\n                </Popover>\n            </Card>\n            <br/>\n            <Card \n                shadows='always'\n                style={{ maxWidth: 360 }} \n                bodyStyle={{ \n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n                <Popover\n                    position='top'\n                    showArrow\n                    content={\n                        <article style={{ padding: 6 }}>\n                            这是一个 Card\n                        </article>\n                    }\n                >\n                    <IconInfoCircle style={{ color: 'var(--semi-color-primary)' }}/>\n                </Popover>\n            </Card>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Rating Component in React\nDESCRIPTION: Demonstrates the basic usage of the Rating component with default and small sizes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Rating } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Rating Default Value={5} />\n        <br />\n        <br />\n        <Rating size=\"small\" defaultValue={5} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Picker Density in DatePicker\nDESCRIPTION: Shows how to control the size of the picker panel using the density prop, with 'compact' for smaller size and 'default' for the standard size.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <DatePicker type=\"dateTime\" density='compact' /><br /><br />\n            <DatePicker type=\"dateRange\" density='compact' style={{ width: 260 }} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: TagInput with Limited Display Count and Popover\nDESCRIPTION: Demonstrates using maxTagCount to limit the number of displayed tags with excess shown as +N, and showRestTagsPopover to display remaining tags in a popover when hovering over +N.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput \n        maxTagCount={2}\n        showRestTagsPopover={true}\n        restTagsPopoverProps={{ position: 'top' }}\n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']} \n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Anchor with Tooltip Position in React\nDESCRIPTION: Demonstrates the Anchor component with tooltip position set to right.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                showTooltip={true}\n                position={'right'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#工具提示位置\" title=\"工具提示是一个有用的工具，它可以在文字缩略时展示全部内容。\" />\n                <Anchor.Link href=\"#组件\" title=\"组件\" />\n                <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n                <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n                <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Custom Ellipsis Area in React\nDESCRIPTION: Demonstrates how to customize the ellipsis area of the Breadcrumb component using the moreType prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb moreType='popover'>\n        <Breadcrumb.Item>首页</Breadcrumb.Item>\n        <Breadcrumb.Item>当层级很多的时候</Breadcrumb.Item>\n        <Breadcrumb.Item>又一层</Breadcrumb.Item>\n        <Breadcrumb.Item>再一层</Breadcrumb.Item>\n        <Breadcrumb.Item>上上一层</Breadcrumb.Item>\n        <Breadcrumb.Item>上一层</Breadcrumb.Item>\n        <Breadcrumb.Item>详情页</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Custom Separators in React\nDESCRIPTION: Shows how to use custom separators in the Breadcrumb component, including text and icon separators.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Breadcrumb separator={'>'}>\n            <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Default</Breadcrumb.Item>\n        </Breadcrumb>\n        <br/>\n        <Breadcrumb separator={<IconArrowRight size={'small'} />}>\n            <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Default</Breadcrumb.Item>\n        </Breadcrumb>\n        <br/>\n        <Tag>{`v>=1.16.0`}</Tag>\n        <br/>\n        <Breadcrumb size={'small'} >\n            <Breadcrumb.Item separator=\":\">Semi-ui</Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Default</Breadcrumb.Item>\n        </Breadcrumb>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Carousel Autoplay in React with Semi Design\nDESCRIPTION: This example demonstrates how to configure autoplay behavior for a Carousel component. It uses the autoPlay prop to set the interval between slides and enables pausing on hover.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, Typography, Space } from '@douyinfe/semi-ui';\n\n() => {\n    const { Title, Paragraph } = Typography;\n\n    const style = {\n        width: '100%',\n        height: '400px',\n    };\n\n    const titleStyle = { \n        position: 'absolute', \n        top: '100px', \n        left: '100px'\n    };\n\n    const colorStyle = {\n        color: '#1C1F23'\n    };\n\n    const renderLogo = () => {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }}/>\n        );\n    };\n\n    const imgList = [\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n    ];\n\n    const textList = [\n        ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n        ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n        ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n    ];\n\n    return (\n        <div>\n            <Carousel style={style} autoPlay={{ interval: 1500, hoverToPause: true }} theme='dark'>\n                {\n                    imgList.map((src, index) => {\n                        return (\n                            <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                    {renderLogo()}\n                                    <Title heading={2} style={colorStyle}>{textList[index][0]}</Title>\n                                    <Space vertical align='start'>\n                                        <Paragraph style={colorStyle}>{textList[index][1]}</Paragraph>\n                                        <Paragraph style={colorStyle}>{textList[index][2]}</Paragraph>\n                                    </Space>\n                                </Space>\n                            </div>\n                        );\n                    })\n                }\n            </Carousel>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Styling DatePicker Dropdown in CSS for Semi-Design\nDESCRIPTION: This CSS snippet provides custom styling for the DatePicker dropdown, specifically for the tabs and content areas used in the custom slots example.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.components-datepicker-demo-slot {\n    \n    .semi-tabs-content {\n        padding: 0;\n    }\n    \n    .semi-tabs-bar-line.semi-tabs-bar-top {\n        border-bottom: none;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Resizable Component in React\nDESCRIPTION: Shows how to import the Resizable component and its subcomponents from the Semi Design library. The component is available from version 2.69.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Resizable } from '@douyinfe/semi-ui';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui'\n```\n\n----------------------------------------\n\nTITLE: Non-Closable Mask Modal Implementation\nDESCRIPTION: Demonstrates how to create a Modal that cannot be closed by clicking the mask overlay.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>Mask Not Closable</Button>\n                <Modal\n                    title=\"Modal Title\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    maskClosable={false}\n                >\n                    <p>This is a modal that cannot be closed by clicking on the mask.</p>\n                    <p>More content...</p>\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JsonViewer with Auto Wrap\nDESCRIPTION: Demonstrates auto-wrapping functionality in JsonViewer using the options.autoWrap parameter.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { JsonViewer } from '@douyinfe/semi-ui';\nconst data = `{\n    \"name\": \"Semi\",\n    \"version\": \"0.0.0\",\n    \"description\": \"Semi Design is a design system that defines a set of mid_back design and front_end basic components.\"\n}`;\nclass SimpleJsonViewerWithAutoWrap extends React.Component {\n    render() {\n        return (\n            <div style={{ marginBottom: 16 }}>\n                <JsonViewer height={120} width={700} value={data} options={{ autoWrap: true }} />\n            </div>\n        );\n    }\n}\n\nrender(SimpleJsonViewerWithAutoWrap);\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor Component with Custom Scroll Container in React\nDESCRIPTION: This snippet demonstrates how to use the Anchor component with a custom scroll container. It shows how to properly set the getContainer prop to ensure correct highlighting and scrolling behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\nfunction() {\n    // 此容器不是 Anchor 组件的容器，是文档内容的容器，因为要根据文档容器去计算当前是哪个 id 在容器上方\n    const getContainer = () => {\n        return document.querySelector('.my-container');\n    }\n    return (\n        <Anchor\n            /* 其他属性 */\n            getContainer={getContainer}\n            >\n            /* Links */\n        </Anchor>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled State of AutoComplete Component\nDESCRIPTION: 展示如何通过disabled属性禁用AutoComplete组件，使其不可编辑且无法展开下拉菜单。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <AutoComplete data={[1, 2, 3, 4]} placeholder={'禁用下拉菜单'} disabled style={{ width: 200 }}></AutoComplete>\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Avatar and Title Skeleton Components\nDESCRIPTION: Shows how to combine Avatar and Title skeleton components to create a placeholder for user profile information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const placeholder = (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Skeleton.Avatar style={{ marginRight: 12 }} />\n            <Skeleton.Title style={{ width: 120 }} />\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <Avatar color=\"blue\" style={{ marginRight: 12 }}>\n                UI\n            </Avatar>\n            <span>Semi UI</span>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Photo Wall Upload with Image Information Display\nDESCRIPTION: Demonstrates how to show basic image information in a photo wall using the showPicInfo prop. This configuration displays file names and sizes along with the image thumbnails.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = '//semi.design/api/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: '1.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n        {\n            uid: '2',\n            name: '2.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n    ];\n    return (\n        <>\n            <Upload action={action} listType=\"picture\" showPicInfo accept=\"image/*\" multiple defaultFileList={defaultFileList}>\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SemiWebpackPlugin with theme option\nDESCRIPTION: This snippet demonstrates how to configure SemiWebpackPlugin in a Webpack configuration to use a custom theme. The `theme` parameter specifies the npm package name of the custom theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/customize-theme/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nnew SemiWebpackPlugin({\n    theme: `Your theme npm package name`,\n    /* ...options */\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Other Components in Semi Design\nDESCRIPTION: This snippet lists additional utility components in the Semi Design library, including global configuration provider and locale provider for internationalization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nConfigProvider 全局配置,\nLocaleProvider 多语言\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for ColorPicker in React\nDESCRIPTION: 展示了如何为 ColorPicker 设置默认值。使用 colorStringToValue 静态方法将颜色字符串转换为组件所需的对象格式。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '@douyinfe/semi-ui';\nimport React from 'react';\n\nfunction Demo() {\n    return <div>\n        <ColorPicker \n            defaultValue={ColorPicker.colorStringToValue(\"rgb(57,197,187)\")}\n            onChange={(value)=>{\n                console.log(value);\n            }} className={\"\"} alpha={true}/>\n    </div>;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Effects to Avatars in React\nDESCRIPTION: Shows how to use the 'hoverMask' prop to add custom overlay content when hovering over an avatar.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const style = {\n        backgroundColor: 'var(--semi-color-overlay-bg)',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    };\n    const hover = (\n        <div style={style}>\n            <IconCamera />\n        </div>\n    );\n\n    return (\n        <Avatar hoverMask={hover} color=\"red\" alt='Bob Downton'>\n            BD\n        </Avatar>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Props in UserGuide with React\nDESCRIPTION: This snippet demonstrates customizing the next and previous buttons of the UserGuide component using the `nextButtonProps` and `prevButtonProps` properties.  It sets the text for the next button to 'Next' and the text and theme for the previous button to 'Prev' and 'borderless' respectively. This allows for easy modification of the button's appearance and behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { UserGuide, Button, Space, Tag, Switch } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const showDialog = () => {\n        setVisible(true);\n    };\n    return (\n        <div>\n            <Button onClick={showDialog}>Start Guide</Button>\n            <br />\n            <br />\n            <Space>\n                <Switch id={'button-demo-1'} defaultChecked={true}></Switch>\n                <Tag id={'button-demo-2'}> Default Tag </Tag>\n                <Button id={'button-demo-3'}>Confirm</Button>\n            </Space>\n            <UserGuide\n                mode=\"popup\"\n                mask={true}\n                visible={visible}\n                nextButtonProps={{\n                    children: 'Next',\n                }}\n                prevButtonProps={{\n                    children: 'Prev',\n                    theme: 'borderless',\n                }}\n                finishText=\"I know!\"\n                steps={[\n                    {\n                        target: document.querySelector('#button-demo-1'),\n                        title: \"Beginner's Guide\",\n                        description: 'Hello ByteDancer!',\n                    },\n                    {\n                        target: document.querySelector('#button-demo-2'),\n                        title: 'New Button Style',\n                        description: 'Button text is Next',\n                    },\n                    {\n                        target: document.querySelector('#button-demo-3'),\n                        title: 'New finish button text',\n                        description: 'Button text is I know',\n                    },\n                ]}\n                onFinish={() => {\n                    setVisible(false);\n                    console.log('Guide completed');\n                }}\n                onSkip={() => {\n                    setVisible(false);\n                    console.log('Skip guide');\n                }}\n            />  \n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Descriptions Component\nDESCRIPTION: Demonstrates basic usage of Descriptions component with key-value pairs and custom rendering using ReactNode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Tag } from '@douyinfe/semi-ui';\nimport { IconArrowUp } from '@douyinfe/semi-icons';\n\n() => {\n    const data = [\n        { key: '实际用户数量', value: '1,480,000' },\n        { key: '7天留存', value: <div>98%<IconArrowUp size=\"small\" style={{ color: 'var(--semi-color-success)', marginLeft: '2px' }} /></div> },\n        { key: '安全等级', value: '3级' },\n        { key: '垂类标签', value: <Tag style={{ margin: 0 }}>电商</Tag> },\n        { key: '认证状态', value: '未认证' },\n    ];\n    return <Descriptions data={data} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Inter Font Face Declarations in CSS\nDESCRIPTION: CSS font-face declarations for loading the Inter and Inter-Bold font families from CDN sources. Required for using the default English font in Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/tokens/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: \"Inter\";\n  src: url(\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/slepweh7nupqpognuhbo/Inter-Regular.ttf\") format(\"ttf\");\n}\n\n@font-face {\n  font-family: \"Inter-Bold\";\n  src: url(\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/slepweh7nupqpognuhbo/Inter-Bold.ttf\") format(\"ttf\");\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Currency and Locale Code in InputNumber Component\nDESCRIPTION: This example shows how to manually specify the currency type and locale code for the InputNumber component. It demonstrates different currency displays for CNY, EUR, JPY, and VND with their appropriate locale codes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\n() => {\n    const defaultValue = 123456.78;\n    return (\n        <div>\n            <div>🇨🇳 CNY</div>\n            <InputNumber localeCode=\"zh-CN\" currency=\"CNY\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇪🇺 EUR</div>\n            <InputNumber localeCode=\"de-DE\" currency=\"EUR\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇯🇵 JPY</div>\n            <InputNumber localeCode=\"ja-JP\" currency=\"JPY\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇻🇳 VND</div>\n            <InputNumber localeCode=\"vi-VN\" currency=\"VND\" defaultValue={defaultValue} />\n            <br />\n            <br />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Different Button Sizes\nDESCRIPTION: Shows how to create large, default, and small sized buttons in Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    return (\n        <div>\n            <Button size='large' style={{ marginRight: 8 }}>large</Button>\n            <Button size='default' style={{ marginRight: 8 }}>default</Button>\n            <Button size='small'>small</Button>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义预览图片 - React\nDESCRIPTION: 通过设置 Image 组件的 src 属性和 preview 参数中的 src 不同，实现缩略图和预览图使用不同图片源的效果。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@douyinfe/semi-ui';\n\n() => {\n     return ( \n         <Image\n             width={300}\n             height={200}\n             src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-small.jpeg'}\n             preview={{\n                 src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-big.png'\n             }}\n         />\n     );\n};\n```\n\n----------------------------------------\n\nTITLE: 数组方式声明Checkbox组\nDESCRIPTION: 通过options属性将选项数组直接传入CheckboxGroup，快速生成复选框组，同时支持设置禁用状态和附加信息。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup } from '@douyinfe/semi-ui';\n\n() => {\n    function onChange(checkedValues) {\n        console.log('checked = ', checkedValues);\n    }\n\n    const plainOptions = ['抖音', '火山', '皮皮虾'];\n    const options = [\n        { label: '追求极致', value: '1', extra: '不断提高要求，延迟满足感，在更大范围里找最优解' },\n        { label: '务实敢为', value: '2', extra: '直接体验，深入事实；不自嗨，注重效果；能突破有担当，打破定式；尝试多种可能，快速迭代' },\n        { label: '开放谦逊', value: '3', extra: '内心阳光，信任伙伴；乐于助人和求助，合作成大事;格局大，上个台阶想问题；对外敏锐谦虚，ego小，听得进意见' },\n        { label: '坦诚清晰', value: '4', extra: '敢当面表达真实想法；能承认错误，不装不爱面子；实事求是，暴露问题，反对\"向上管理\"；准确、简洁、直接，有条理有重点' }\n    ];\n    const optionsWithDisabled = [\n        { label: 'Photography', value: 'Photography' },\n        { label: 'Movies', value: 'Movies' },\n        { label: 'Running', value: 'Running', disabled: false },\n    ];\n    return (\n        <div>\n            <CheckboxGroup options={plainOptions} defaultValue={['抖音']} onChange={onChange} aria-label=\"CheckboxGroup 示例\" />\n            <br/><br/>\n            <CheckboxGroup options={options} defaultValue={[]} onChange={onChange} aria-label=\"CheckboxGroup 示例\" />\n            <br/><br/>\n            <CheckboxGroup\n                options={optionsWithDisabled}\n                disabled\n                defaultValue={['Photography']}\n                onChange={onChange}\n                aria-label=\"Checkbox 示例\"\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading State Switch in React\nDESCRIPTION: 展示Switch组件的加载中状态，通过设置loading=true启用加载状态。展示了未选中和选中状态下的加载效果。此功能在1.29.0及以上版本可用。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch loading />\n        <br />\n        <Switch loading defaultChecked={true} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Cascader Implementation\nDESCRIPTION: Demonstrates basic usage of the Cascader component with a nested data structure. The component allows selection of leaf nodes in a hierarchical tree of art and music categories.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            style={{ width: 400 }}\n            treeData={treeData}\n            placeholder=\"Please select\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Statistics Skeleton\nDESCRIPTION: Demonstrates using Skeleton for statistics display with Paragraph and Title components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Descriptions } from '@douyinfe/semi-ui';\n\n() => {\n    const placeholder = (\n        <div>\n            <Skeleton.Paragraph rows={1} style={{ width: 80, marginBottom: 10 }} />\n            <Skeleton.Title style={{ width: 120 }} />\n        </div>\n    );\n\n    const data = [{ key: 'Actual User', value: '1,480,000' }];\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <Descriptions data={data} row />\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: ScrollList基本使用示例\nDESCRIPTION: 展示了ScrollList组件的完整实现示例，包括上午/下午选择、小时和分钟选择。该示例演示了如何创建一个时间选择器，支持wheel模式滚动、循环选择和禁用特定选项。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/scrolllist/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ScrollList, ScrollItem, Button } from '@douyinfe/semi-ui';\n\nclass ScrollListDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectIndex1: 1,\n            selectIndex2: 1,\n            selectIndex3: 1,\n        };\n\n        this.ampms = [\n            {\n                value: '上午',\n            },\n            {\n                value: '下午',\n            },\n        ];\n\n        this.hours = new Array(12).fill(0).map((itm, index) => {\n            return {\n                value: index + 1,\n            };\n        });\n\n        this.minutes = new Array(60).fill(0).map((itm, index) => {\n            return {\n                value: index,\n                disabled: Math.random() > 0.5 ? true : false,\n            };\n        });\n\n        this.onSelectAP = this.onSelectAP.bind(this);\n        this.onSelectHour = this.onSelectHour.bind(this);\n        this.onSelectMinute = this.onSelectMinute.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.renderFooter = this.renderFooter.bind(this);\n    }\n\n    onSelectAP(data) {\n        this.setState({\n            ['selectIndex' + data.type]: data.index,\n        });\n    }\n\n    onSelectHour(data) {\n        console.log('You have choose the hour for: ', data.value);\n        this.setState({\n            ['selectIndex' + data.type]: data.index,\n        });\n    }\n\n    onSelectMinute(data) {\n        console.log('You have choose the minute for: ', data.value);\n        this.setState({\n            ['selectIndex' + data.type]: data.index,\n        });\n    }\n\n    handleClose() {\n        console.log('close');\n    }\n\n    renderFooter() {\n        return (\n            <Button size=\"small\" type=\"primary\" onClick={this.handleClose}>\n                Ok\n            </Button>\n        );\n    }\n\n    render() {\n        let list = this.list;\n        const scrollStyle = {\n            border: 'unset',\n            boxShadow: 'unset',\n        };\n        return (\n            <ScrollList style={scrollStyle} header={'无限滚动列表'} footer={this.renderFooter()}>\n                <ScrollItem\n                    mode=\"wheel\"\n                    cycled={false}\n                    list={this.ampms}\n                    type={1}\n                    selectedIndex={this.state.selectIndex1}\n                    onSelect={this.onSelectAP}\n                />\n                <ScrollItem\n                    mode=\"wheel\"\n                    cycled={true}\n                    list={this.hours}\n                    type={2}\n                    selectedIndex={this.state.selectIndex2}\n                    onSelect={this.onSelectHour}\n                />\n                <ScrollItem\n                    mode=\"wheel\"\n                    cycled={true}\n                    list={this.minutes}\n                    type={3}\n                    selectedIndex={this.state.selectIndex3}\n                    onSelect={this.onSelectMinute}\n                />\n            </ScrollList>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme with Parameters\nDESCRIPTION: Use this snippet to pass key-value pairs directly to the rspack plugin for theme customization. This allows for a more dynamic approach to theme settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-rspack/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\nconst {SemiRspackPlugin} = require('@douyinfe/semi-rspack-plugin');\n\nmodule.exports = {\n    // ...\n    plugins: [\n        new SemiRspackPlugin({\n            variables: {\n                \"$font-size-small\": '16px'\n            }\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Prompt Text for Upload Component in React\nDESCRIPTION: Shows how to add custom prompt text to the Upload component using the 'prompt' slot and 'promptPosition' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const action = 'https://api.semi.design/upload';\n    const getPrompt = (pos, isListType) => {\n        let basicStyle = { display: 'flex', alignItems: 'center', color: 'grey', height: isListType ? '100%' : 32 };\n        let marginStyle = {\n            left: { marginRight: 10 },\n            right: { marginLeft: 10 },\n        };\n        let style = { ...basicStyle, ...marginStyle[pos] };\n\n        return <div style={style}>请上传资格认证材料</div>;\n    };\n    const button = (\n        <Button icon={<IconUpload />} theme=\"light\">\n            点击上传\n        </Button>\n    );\n    const positions = ['right', 'left', 'bottom'];\n    return (\n        <>\n            {positions.map((pos, index) => (\n                <>\n                    {index ? (\n                        <div\n                            style={{ marginBottom: 12, marginTop: 12, borderBottom: '1px solid var(--semi-color-border)' }}\n                        ></div>\n                    ) : null}\n                    <Upload action={action} prompt={getPrompt(pos)} promptPosition={pos}>\n                        {button}\n                    </Upload>\n                </>\n            ))}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Different Shapes in React\nDESCRIPTION: Demonstrates how to use the 'shape' prop to create circular and square avatars.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Avatar style={{ margin: 4 }} alt=\"User\">U</Avatar>\n        <Avatar shape=\"square\" style={{ margin: 4 }} alt=\"User\">\n            U\n        </Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled Input in TagInput Component\nDESCRIPTION: Demonstrates how to control the input box content using inputValue and onInputChange properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\nclass TagInputDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 'abc'\n        };\n    }\n    handleInputChange(value, event) {\n        this.setState({ value });\n    }\n    render() {\n        return (\n            <TagInput\n                inputValue={this.state.value}\n                onInputChange={(v, e) => this.handleInputChange(v, e)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SideSheet Properties in Markdown\nDESCRIPTION: A markdown table listing the properties of the SideSheet component, including their descriptions, types, default values, and version information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性 | 说明                                                                            | 类型 | 默认值 | 版本 |\n| --- |-------------------------------------------------------------------------------| --- | --- | --- |\n| afterVisibleChange | 面板展示/隐藏时动画结束触发的回调                                                             | (isVisible: boolean) => void | - | 1.0.0 |\n| bodyStyle | 面板内容的样式                                                                       | CSSProperties | - | - |\n| className | 类名                                                                            | string | - | - |\n| closable | 是否允许通过右上角的关闭按钮关闭                                                              | boolean | true | - |\n| closeIcon | 关闭按钮的 icon                                                                 | ReactNode | <IconClose /> | - |\n| closeOnEsc | 允许通过键盘事件 Esc 触发关闭                                                             | boolean | false | 1.0.0 |\n| disableScroll | 默认渲染在 document.body 层时是否禁止 body 的滚动，即给 body 添加 `overflow: hidden`             | boolean | true | - |\n| footer | 侧边栏底部                                                                         | ReactNode | null | 1.3.0 |\n| getPopupContainer | 指定父级 DOM，弹层将会渲染至该 DOM 中，自定义需要设置 `position: relative` 这会改变浮层 DOM 树位置，但不会改变视图渲染位置。                          | () => HTMLElement | - | 0.29.0 |\n| headerStyle | 面板头部的样式                                                                       | CSSProperties | - | 1.0.0 |\n| height | 高度，位置为 `top` 或 `bottom` 时生效                                                   | number \\| string | 400 | - |\n| keepDOM | 关闭 SideSheet 时是否保留内部组件不销毁                                                     | boolean | false | 1.18.0|\n| mask | 是否显示遮罩，在 `0.29.0` 版本之后，当 `mask={false}` 时允许对外部区域进行操作                          | boolean | true | - |\n| maskClosable | 是否允许通过点击遮罩来关闭面板                                                               | boolean | true | - |\n| maskStyle | 遮罩的样式                                                                         | CSSProperties | - | - |\n| motion | 是否允许动画                                                                        | boolean | true | - |\n| placement | 侧边栏滑出位置，支持`top`, `bottom`, `left`, `right`                                    | string | `right` | - |\n| size | 尺寸，支持 `small`(448px)， `medium`(684px), `large`(920px)，仅在 `left` 或 `right` 时生效 | string | `small` | 0.29.0 |\n| style | 可用于设置样式                                                                       | CSSProperties | - | - |\n| title | 面板的标题                                                                         | ReactNode | - | - |\n| visible | 面板是否可见                                                                        | boolean | false | - |\n| width | 宽度，位置为 `left` 或 `right` 时生效                                                   | number \\| string | 448 | - |\n| zIndex | 弹层 z-index 值                                                                  | number | 1000 | 0.29.0 |\n| onCancel | 取消面板时的回调函数                                                                    | (e: MouseEvent) => void | - | - |\n```\n\n----------------------------------------\n\nTITLE: Divider Component with Children in Semi Design\nDESCRIPTION: Shows how to use the Divider component with child elements, including text alignment and icon insertion.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/divider/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Divider, Typography } from '@douyinfe/semi-ui';\nimport { IconSemiLogo } from '@douyinfe/semi-icons';\n\n() => {\n\n    return (\n        <div>\n            <Divider margin='12px' align='left'>\n                Left Text\n            </Divider>\n\n            <Divider margin='12px' align='center'>\n                Center Text\n            </Divider>\n\n            <Divider margin='12px' align='right'>\n                Right Text\n            </Divider>\n\n            <Divider margin='12px'>\n                <IconSemiLogo />\n            </Divider>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Grid Layout with Cards in Semi Design\nDESCRIPTION: Shows how to arrange Cards in a responsive grid layout using Row and Col components for system overview pages.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Row, Col } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div \n            style={{\n                backgroundColor: 'var(--semi-color-fill-0)', \n                padding: 20\n            }}\n        >\n            <Row gutter={[16, 16]}>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n            </Row>\n            <Row gutter={[16, 16]}>\n                <Col span={16}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title='Card Title' bordered={false} >\n                        Card Content\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actions in React Chat Component\nDESCRIPTION: Example showing how to customize action buttons and dropdowns in the chat interface using Semi Design components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat, Dropdown } from '@douyinfe/semi-ui';\nimport { IconForward } from '@douyinfe/semi-icons';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"Introduce Semi design\", \n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: 'Semi Design is a design system designed, developed, and maintained by the front-end team at Douyin and the MED product design team.',\n    }\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Description Component with Layout Modes\nDESCRIPTION: Demonstrates horizontal layout mode with column configuration and tag integration.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Space, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        { key: 'UID', value: 'SemiDesign' },\n        { key: 'Anchor Type', value: 'Freelance anchor' },\n        { key: 'Security Level', value: 'Level 3' },\n        { key: 'Classification', value: <Tag size=\"small\" shape='circle' color='amber'>Tech News</Tag>\n           \n        },\n        { key: 'Videos Count', value: '88888888' },\n        { key: 'Certification status', value: 'This is a long, long, long value that needs to be automatically wrapped and displayed.', span: 3 },\n    ];\n    return (\n        <> \n            <Descriptions layout='horizontal' align='plain' data={data} column={4} />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled States in TreeSelect\nDESCRIPTION: Shows different ways to implement disabled states in TreeSelect, including fully disabled components and disabled with default values for both single and multiple selection modes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return (\n        <div>\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                disabled\n                placeholder=\"Disabled TreeSelect\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                style={{ width: 300 }}\n                defaultValue={'Shanghai'}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                disabled\n            />\n            <br />\n            <br />\n            <TreeSelect\n                style={{ width: 300 }}\n                defaultValue={['Shanghai', 'North America']}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                disabled\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Steps Implementation\nDESCRIPTION: Shows how to implement steps in a vertical direction\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps } from '@douyinfe/semi-ui';\n\n() => (\n    <Steps direction=\"vertical\" current={1} style={{ width: 300 }} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Typography Copyable Configuration Table\nDESCRIPTION: Configuration table showing all available properties for the copyable feature of Typography component, including copy events, tooltips and custom rendering options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性       | 说明                        | 类型                                           | 默认值 | 版本   |\n| ---------- | --------------------------- | ---------------------------------------------- | ------ | ------ |\n| content    | 复制出的文本                | string                                         | -      |  |\n| copyTip    | 复制图标的 tooltip 展示内容 | React.node                                     | -      |   |\n```\n\n----------------------------------------\n\nTITLE: Typography.Numeral Properties Table\nDESCRIPTION: Markdown table defining all available properties for the Typography.Numeral component, including their types, defaults, and version information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions | type | Default | version |\n| ---------- |-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------|--------------------------------------------|---------|\n```\n\n----------------------------------------\n\nTITLE: Rendering Internationalized Form and Navigation Components in Semi Design\nDESCRIPTION: This code displays a horizontal form with a username input field and a navigation component with user and activity items. The form logs value changes to the console, and the navigation includes header with logo and collapsible footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/locale/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Form layout='horizontal' onValueChange={values=>console.log(values)}>\n                        <Form.Input field='UserName' label={{ text: 'Role', optional: true }} style={{ width: 200 }} />\n                    </Form>\n                    <h5>Navigation</h5>\n                    <Nav\n                        bodyStyle={{ height: 320 }}\n                        items={[\n                            { itemKey: 'user', text: 'Users', icon: <IconUser /> },\n                            { itemKey: 'union', text: 'Activity', icon: <IconStar /> },\n                        ]}\n                        header={{\n                            logo: <IconSemiLogo style={{ height: '36px', fontSize: 36 }} />,\n                            text: 'Semi Platform'\n                        }}\n                        footer={{\n                            collapseButton: true,\n                        }}\n                    />\n```\n\n----------------------------------------\n\nTITLE: Using optionList Array with Select Component\nDESCRIPTION: Shows how to pass an array of objects directly to the Select component using the optionList prop. Each object must contain value and label attributes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const list = [\n        { value: 'douyin', label: 'Douyin' },\n        { value: 'capcut', label: 'Capcut' },\n        { value: 'coze', label: 'Coze' },\n        { value: 'toutiao', label: 'TooBuzz' },\n    ];\n    return <Select placeholder=\"Business line\" style={{ width: 180 }} optionList={list}></Select>;\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Direction for Space Component in React\nDESCRIPTION: Demonstrates how to use the 'vertical' prop to create vertical spacing between elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Space, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Space vertical>\n        <Button theme='solid' type='primary'>button</Button>\n        <Button theme='solid' type='primary'>button</Button>\n        <Button theme='solid' type='primary'>button</Button>\n        <Button theme='solid' type='primary'>button</Button>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Many Levels in React\nDESCRIPTION: Shows how the Breadcrumb component handles many levels by collapsing intermediate items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb>\n        <Breadcrumb.Item>首页</Breadcrumb.Item>\n        <Breadcrumb.Item>当层级很多的时候</Breadcrumb.Item>\n        <Breadcrumb.Item>又一层</Breadcrumb.Item>\n        <Breadcrumb.Item>再一层</Breadcrumb.Item>\n        <Breadcrumb.Item>上上一层</Breadcrumb.Item>\n        <Breadcrumb.Item>上一层</Breadcrumb.Item>\n        <Breadcrumb.Item>详情页</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Information in Picture Wall Upload Component\nDESCRIPTION: This example demonstrates how to show basic image information in a picture wall by setting the showPicInfo property. This enhances the user experience by displaying details like file name and size.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload } from '@douyinfe/semi-ui';\nimport { IconPlus } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'music.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n        {\n            uid: '2',\n            name: 'brand.png',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url:\n                'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n    ];\n    return (\n        <>\n            <Upload action={action} listType=\"picture\" showPicInfo accept=\"image/*\" multiple defaultFileList={defaultFileList}>\n                <IconPlus size=\"extra-large\" />\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 不同尺寸的Spin组件 - React\nDESCRIPTION: 展示了Spin组件的三种不同尺寸：小、中（默认）、大。通过size属性来控制尺寸。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ marginLeft: 30 }}>\n        <div style={{ marginBottom: 5 }}>size: small</div>\n        <Spin size=\"small\" />\n        <br />\n        <br />\n        <div style={{ marginBottom: 10 }}>size: middle</div>\n        <Spin size=\"middle\" />\n        <br />\n        <br />\n        <div style={{ marginBottom: 15 }}>size: large</div>\n        <Spin size=\"large\" />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Slider in React\nDESCRIPTION: 展示 Slider 组件的基本用法，包括默认滑块、范围滑块和禁用状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div>\n            <div>Default</div>\n            <Slider showBoundary={true}></Slider>\n        </div>\n        <br/>\n        <br/>\n        <div>\n            <div>Range</div>\n            <Slider defaultValue={[20, 60]} range></Slider>\n        </div>\n        <br/>\n        <br/>\n        <div>\n            <div>Disabled</div>\n            <Slider defaultValue={40} disabled></Slider>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: 带辅助文本的Checkbox\nDESCRIPTION: 使用extra属性为Checkbox添加辅助文本说明，可以通过style控制宽度来控制文本换行。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Checkbox aria-label=\"Checkbox 示例\" extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统'>\n            Semi Design\n        </Checkbox>\n        <br/>\n        <Checkbox aria-label=\"Checkbox 示例\" extra='Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统' style={{ width: 400 }}>\n            Semi Design\n        </Checkbox>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading State Card Implementation\nDESCRIPTION: Demonstrates built-in loading functionality for Cards using the loading prop and Switch component for toggling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Card, Switch } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [loading, setLoading] = useState(true);\n    const { Meta } = Card;\n\n    return (\n        <>\n            <Switch onChange={ v => setLoading(!v) } />\n            <br />\n            <br />\n            <Card \n                style={{ maxWidth: 360 }}\n                loading={ loading }\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    description=\"全面、易用、优质\"\n                />\n            </Card>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Card and Card with Meta in Semi Design\nDESCRIPTION: Shows two examples: a simple card with only content and a card using Card.Meta for more structured content. It also demonstrates the use of Avatar and Popover components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Popover, Avatar } from '@douyinfe/semi-ui';\nimport { IconInfoCircle } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <>\n            <Card style={{ maxWidth: 360 }} >\n                Semi Design is a design system developed and maintained by IES-FE & IES-UED.\n            </Card>\n            <br />\n            <Card \n                style={{ maxWidth: 360 }} \n                bodyStyle={{ \n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n                <Popover\n                    position='top'\n                    showArrow\n                    content={\n                        <article style={{ padding: 6 }}>\n                            This is a card.\n                        </article>\n                    }\n                >\n                    <IconInfoCircle style={{ color: 'var(--semi-color-primary)' }}/>\n                </Popover>\n            </Card>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Cards with Shadow Effects in Semi Design\nDESCRIPTION: Demonstrates how to add shadow effects to cards using the 'shadows' property. It shows examples of 'hover' and 'always' shadow effects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Avatar, Popover } from '@douyinfe/semi-ui';\nimport { IconInfoCircle } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <div>\n            <Card \n                shadows='hover'\n                style={{ maxWidth: 360 }} \n                bodyStyle={{ \n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n                <Popover\n                    position='top'\n                    showArrow\n                    content={\n                        <article style={{ padding: 6 }}>\n                            This is a card.\n                        </article>\n                    }\n                >\n                    <IconInfoCircle style={{ color: 'var(--semi-color-primary)' }}/>\n                </Popover>\n            </Card>\n            <br/>\n            <Card \n                shadows='always'\n                style={{ maxWidth: 360 }} \n                bodyStyle={{ \n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n                <Popover\n                    position='top'\n                    showArrow\n                    content={\n                        <article style={{ padding: 6 }}>\n                            This is a card.\n                        </article>\n                    }\n                >\n                    <IconInfoCircle style={{ color: 'var(--semi-color-primary)' }}/>\n                </Popover>\n            </Card>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Mini Size Steps Implementation\nDESCRIPTION: Shows how to implement smaller sized steps using size='small' property\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps } from '@douyinfe/semi-ui';\n\n() => (\n    <Steps type=\"basic\" size=\"small\" current={1} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Header and Footer Modal Implementation\nDESCRIPTION: Shows how to create a Modal with custom header and footer content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@douyinfe/semi-ui';\n\nclass modalDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { visible: false };\n        this.showDialog = this.showDialog.bind(this);\n        this.handleOk = this.handleOk.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n    }\n    showDialog() {\n        this.setState({\n            visible: true\n        });\n    }\n    handleOk(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    handleCancel(e) {\n        this.setState({\n            visible: false\n        });\n    }\n    render() {\n        return (\n            <>\n                <Button onClick={this.showDialog}>Customized Footer</Button>\n                <Modal\n                    title=\"Customized Footer\"\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                    footer={\n                        <Button type=\"primary\" onClick={this.handleOk}>\n                            Yes, I Understand\n                        </Button>\n                    }\n                >\n                    <p>This is a modal with a customized footer.</p>\n                    <p>More content...</p>\n                </Modal>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transfer Component Styling\nDESCRIPTION: CSS styles for custom Transfer component rendering with avatar and item information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.components-transfer-demo-selected-item {\n    .semi-icon-close {\n        visibility: hidden;\n        color: var(--semi-color-tertiary);\n    }\n    &:hover {\n        .semi-icon-close {\n            visibility: visible;\n        }\n    }\n}\n\n.components-transfer-demo-selected-item,\n.components-transfer-demo-source-item {\n    height: 52px;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px 12px;\n    &:hover {\n        background-color: var(--semi-color-fill-0);\n    }\n    .info {\n        margin-left: 8px;\n        flex-grow: 1;\n    }\n    .name {\n        font-size: 14px;\n        line-height: 20px;\n    }\n    .email {\n        font-size: 12px;\n        line-height: 16px;\n        color: var(--semi-color-text-2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Anchor Usage in React\nDESCRIPTION: Demonstrates basic usage of the Anchor component with multiple links.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Anchor>\n        <Anchor.Link href=\"#基本示例\" title=\"基本示例\" />\n        <Anchor.Link href=\"#组件\" title=\"组件\" />\n        <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n        <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n        <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n    </Anchor>  \n);\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of Events in Calendar\nDESCRIPTION: Shows how to use dateGridRender prop to customize the rendering of events in the Calendar component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => {\n    const dailyEventStyle = {\n        position: 'absolute',\n        left: '0',\n        right: '0',\n        borderRadius: '3px',\n        boxSizing: 'border-box',\n        border: 'var(--semi-color-primary) 1px solid',\n        padding: '10px',\n        backgroundColor: 'var(--semi-color-primary-light-default)',\n        overflow: 'hidden'\n    };\n    const displayValue = new Date(2019, 6, 23, 8, 32, 0);\n    const dateRender = (dateString) => {\n        if (dateString === new Date(2019, 6, 23).toString()) {\n            return (\n                <>\n                    <div style={{ ...dailyEventStyle, top: '500px', height: 50 }}>Eating 🍰</div>\n                    <div style={{ ...dailyEventStyle, top: '0', height: 400 }}>Sleeping 😪</div>\n                    <div style={{ ...dailyEventStyle, top: '700px', height: 100 }}>Playstation 🎮</div>\n                </>\n            );\n        } else {\n            return null;\n        }\n    };\n    return (\n        <Calendar \n            height={700}\n            mode='week'\n            displayValue={displayValue} \n            dateGridRender={dateRender}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Theme via Parameters JavaScript\nDESCRIPTION: Configure the '@douyinfe/semi-webpack-plugin' to customize themes by directly passing key-value pairs of SCSS tokens.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-webpack/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst SemiPlugin = require('@douyinfe/semi-webpack-plugin').default;\n\nmodule.exports = {\n    plugins: [\n        new SemiPlugin({\n            variables: {\n                \"$font-size-small\": '16px'\n            }\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Toggling Dark Mode in Semi Design using JavaScript\nDESCRIPTION: Demonstrates how to switch between light and dark modes by adding or removing the 'theme-mode' attribute on the body element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst body = document.body;\nif (body.hasAttribute('theme-mode')) {\n    body.removeAttribute('theme-mode');\n} else {\n    body.setAttribute('theme-mode', 'dark');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar in Month Mode\nDESCRIPTION: Illustrates how to render a Calendar component in month mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => (\n    <Calendar mode=\"month\"></Calendar>\n);\n```\n\n----------------------------------------\n\nTITLE: TagInput with Focus Management\nDESCRIPTION: Demonstrates how to use the blur() and focus() methods to programmatically manage focus in the TagInput component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput, Button } from '@douyinfe/semi-ui';\n\nclass TagInputDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.handleTagInputFocus=this.handleTagInputFocus.bind(this);\n    }\n\n    handleTagInputFocus(){\n        this.ref.current.focus();\n    }\n\n    render() {\n        return (\n            <>\n                <TagInput defaultValue={['Semi', 'Hotsoon']} ref={this.ref} />\n                <Button style={{ marginTop: 10 }} onClick={this.handleTagInputFocus}>\n                    focus\n                </Button>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Scroll Container for Semi Design Anchor\nDESCRIPTION: Shows how to set up a custom scroll container for the Anchor component by implementing a getContainer function that returns a specific DOM element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\nfunction App() {\n    const getContainer = () => {\n        return document.querySelector('.my-container');\n    };\n    return (\n        <Anchor\n            /* Other props */\n            getContainer={getContainer}\n        >\n            /* Links */\n        </Anchor>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Component Styling\nDESCRIPTION: SCSS styling for the custom Transfer component, including panel layouts, item appearances, and responsive design\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n.component-transfer-demo-custom-panel {\n\n    .sp-font {\n        color: rgba(var(--semi-grey-9), 1);\n        font-size: 12px;\n        font-weight: 500;\n        line-height: 20px;\n    }\n\n    .empty {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .panel-item {\n        flex-shrink: 0;\n        height: 56px;\n        border-radius: 4px;\n        padding: 8px 12px;\n        flex-wrap: wrap;\n        background-color: rgba(22, 24, 35, .03);\n\n        &-main {\n            flex-grow: 1;\n        }\n\n        p {\n            margin: 0 12px;\n            flex-basis: 100%;\n        }\n\n        .panel-item-remove {\n            cursor: pointer;\n            color: var(--semi-color-primary);\n        }\n    }\n\n    .panel-header {\n        padding: 10px 12px;\n        border: 1px solid rgba(22, 24, 35, .16);\n        border-radius: 4px 4px 0 0;\n        height: 38px;\n        box-sizing: border-box;\n        background-color: var(--semi-color-tertiary-light-default);\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n\n        .clear {\n            cursor: pointer;\n            color: var(--semi-color-primary);\n        }\n    }\n\n    .source-panel {\n        display: flex;\n        flex-direction: column;\n        width: 482px;\n        height: 353px;\n\n        .panel-main {\n            border: 1px solid var(--semi-color-border);\n            border-top: none;\n\n            .panel-list {\n                display: flex;\n                flex-wrap: wrap;\n                row-gap: 8px;\n                column-gap: 8px;\n                overflow-y: auto;\n                height: 214px;\n                margin-left: 12px;\n                margin-right: 12px;\n                padding-bottom: 8px;\n            }\n        }\n\n        .panel-controls {\n            margin: 10px 12px;\n            font-size: 12px;\n            line-height: 20px;\n\n            .semi-button {\n                margin-left: 8px;\n                font-size: 12px;\n            }\n        }\n\n        .panel-item {\n            width: 176px;\n        }\n\n        margin-right: 16px;\n    }\n\n    .selected-panel {\n        width: 200px;\n        height: 353px;\n\n        .panel-main {\n            display: flex;\n            flex-direction: column;\n            overflow-y: auto;\n            padding: 12px;\n            border: 1px solid var(--semi-color-border);\n            border-top: none;\n            height: 323px;\n            box-sizing: border-box;\n            row-gap: 8px;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Behavior for Space Component in React\nDESCRIPTION: Shows how to use the 'wrap' prop to enable automatic wrapping of elements when they exceed the container width.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Space, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Space wrap>\n        {new Array(10).fill(null).map((item, idex) => (\n            <Button theme='solid' type='secondary' key={idex}>button</Button>\n        ))}\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Selected Item Rendering in TreeSelect\nDESCRIPTION: Shows different ways to customize the rendering of selected items in both single and multiple selection modes using renderSelectedItem prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { TreeSelect, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [value, setValue] = useState([]);\n    const treeData = useMemo(() => [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        },\n        {\n            label: 'South America',\n            value: 'South America',\n            key: '2',\n        },\n        {\n            label: 'Antarctica',\n            value: 'Antarctica',\n            key: '3',\n        },\n    ], []);\n    \n    return (\n        <>\n            <h4>Single TreeSelect</h4>\n            <TreeSelect\n                style={{ width: 300 }}\n                treeData={treeData}\n                renderSelectedItem={item => item.label}\n            />\n            <h4>Multiple + isRenderInTag=true</h4>\n            <TreeSelect\n                style={{ width: 300 }}\n                treeData={treeData}\n                multiple\n                renderSelectedItem={(item, { index, onClose }) => ({ content: item.label, isRenderInTag: true })}\n            />\n            <h4>Multiple + isRenderInTag=false</h4>\n            <TreeSelect\n                style={{ width: 300 }}\n                treeData={treeData}\n                multiple\n                maxTagCount={2}\n                renderSelectedItem={(item, { index, onClose }) => ({ content: <Tag key={index} color=\"white\">{item.value}</Tag>, isRenderInTag: false })}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JsonViewer Implementation\nDESCRIPTION: Demonstrates basic usage of JsonViewer component with height, width, and initial value settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { JsonViewer } from '@douyinfe/semi-ui';\nconst data = `{\n    \"name\": \"Semi\",\n    \"version\": \"0.0.0\"\n}`;\nclass SimpleJsonViewer extends React.Component {\n    render() {\n        return (\n            <div style={{ marginBottom: 16 }}>\n                <JsonViewer height={100} width={700} value={data} />\n            </div>\n        );\n    }\n}\n\nrender(SimpleJsonViewer);\n```\n\n----------------------------------------\n\nTITLE: Interactive External Area SideSheet\nDESCRIPTION: Shows implementation of SideSheet with interactive external area functionality by setting mask to false and managing scroll behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, TextArea, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const [value, setValue] = useState('');\n    return (\n        <>\n            <Button onClick={() => setVisible(true)}>Open SideSheet</Button>\n            <TextArea placeholder=\"Please enter something\" onChange={value => setValue(value)} style={{ marginTop: 12 }}/>\n            <SideSheet\n                title=\"可操作外部的侧边栏\"\n                visible={visible}\n                onCancel={() => setVisible(false)}\n                mask={false}\n                disableScroll={false}\n            >\n                <p>这里是输入的内容：</p>\n                <p>{value}</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation from CDN\nDESCRIPTION: Demonstrates how to render a Lottie animation using a JSON file hosted on CDN, specifying dimensions and path parameters.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n\n    return (\n        <div>\n            <Lottie params={{ path: jsonURL }} width={'300px'} height={'300px'} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 渲染周视图日历 - React\nDESCRIPTION: 使用 Calendar 组件渲染周视图的日历。可通过 showCurrTime 属性控制是否显示当前时间的红线。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => <Calendar mode=\"week\"></Calendar>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Badge Styles in React\nDESCRIPTION: Shows how to customize the appearance of the Badge component using the theme and type props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const bgStyle = {\n        padding: '8px',\n    };\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={bgStyle}>\n                <Badge count={5} theme='solid' >\n                    <Avatar color='indigo' shape='square' style={style}>XZ</Avatar>\n                </Badge>\n            </div>\n            <div style={bgStyle}>\n                <Badge count={5} theme='light' >\n                    <Avatar color='indigo' shape='square' style={style}>YB</Avatar>\n                </Badge>\n            </div>\n            <div style={bgStyle}>\n                <Badge count={5} theme='inverted' >\n                    <Avatar color='light-green' shape='square' style={style}>LX</Avatar>\n                </Badge>\n            </div>\n            <br/>\n            <div style={bgStyle}>\n                <Badge dot theme='solid' >\n                    <Avatar color='light-green' shape='square' style={style}>YZ</Avatar>\n                </Badge>\n            </div>\n            <div style={bgStyle}>\n                <Badge dot theme='light' >\n                    <Avatar color='lime' shape='square' style={style}>HW</Avatar>\n                </Badge>\n            </div>\n            <div style={{ padding: '8px', borderRadius: '4px', backgroundColor: 'var(--semi-color-fill-0)' }}>\n                <Badge dot theme='inverted' >\n                    <Avatar color='lime' shape='square' style={style}>XM</Avatar>\n                </Badge>\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix for Semi Design\nDESCRIPTION: Configuration for using Semi Design in a Remix project, including CSS side effect imports and server dependencies.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// remix.config.js\nmodule.exports = {\n  future: {\n    unstable_cssSideEffectImports: true,\n  },\n  serverDependenciesToBundle: [\n    /^@douyinfe\\/semi-ui/,\n    /^@douyinfe\\/semi-icons/,\n    /^@douyinfe\\/semi-illustrations/,\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPicker in React\nDESCRIPTION: Shows how to import the ColorPicker component from the Semi Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Tooltip Position Demo with Multiple Directions\nDESCRIPTION: Example showing different positioning options for tooltips including top, bottom, left, and right variations with custom content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div>\n            <div style={{ marginLeft: 80, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Tooltip\n                        content={\n                            <article>\n                                <p>hi bytedance</p>\n                                <p>hi bytedance</p>\n                            </article>\n                        }\n                        arrowPointAtCenter={false}\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag style={{ margin: 8, padding: 20 }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Tooltip>\n                ))}\n            </div>\n            {...remaining implementation...}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: DragMove with Constrained Range\nDESCRIPTION: Implements DragMove with a constrained dragging range using the constrainer prop. The container must use relative positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from 'react';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const containerRef = React.useRef();\n\n  return (\n    <div \n      style={{ \n        backgroundColor: 'rgba(var(--semi-grey-2), 1)', \n        width: 300, height: 300, padding: 5, position: 'relative', \n        color: 'rgba(var(--semi-white), 1)', fontWeight: 500,\n      }} \n      ref={containerRef}\n    >\n      <span>Constrainer</span>\n      <DragMove\n        constrainer={() => containerRef.current}\n      >\n      <div \n          style={{ backgroundColor: 'var(--semi-color-primary)', \n            width: 80, height: 80, borderRadius: 10,\n            display: 'flex', alignItems: 'center', justifyContent: 'center',\n            position: 'absolute', top: 80, left: 80,\n          }}\n        >Drag me</div>\n      </DragMove>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Position with Semi Design Anchor Component\nDESCRIPTION: Demonstrates how to configure tooltip position for an Anchor component using the position property. The example shows setting up an anchor with right-positioned tooltips and multiple navigation links.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                showTooltip={true}\n                position={'right'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#Tooltip_Position\" title=\"Tooltip is a useful tool that displays the entire content when text is abbreviated.\" />\n                <Anchor.Link href=\"#Components\" title=\"Components\" />\n                <Anchor.Link href=\"#Design\" title=\"Design\" />\n                <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n                <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Avatar Group with Maximum Count\nDESCRIPTION: Shows how to limit the number of displayed avatars using the maxCount prop, with additional avatars collapsed into a count indicator.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AvatarGroup, Avatar } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AvatarGroup maxCount={3}>\n            <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n            <Avatar alt='Caroline Xiao'>CX</Avatar>\n            <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n            <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n            <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n        </AvatarGroup>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Centered Paragraph and Button Placeholder\nDESCRIPTION: Demonstrates how to create a centered layout with Paragraph and Button skeleton components as placeholders.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: '300px',\n        marginBottom: '10px',\n    };\n\n    const placeholder = (\n        <div style={style}>\n            <Skeleton.Paragraph style={style} rows={3} />\n            <Skeleton.Button />\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true} style={{ textAlign: 'center' }}>\n            <div style={{ textAlign: 'center' }}>\n                <p>Hi, Bytedance dance dance.</p>\n                <p>Hi, Bytedance dance dance.</p>\n                <Button>Button</Button>\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: TagGroup Component Properties - Semi Design React\nDESCRIPTION: API documentation for TagGroup component showing supported properties like maxTagCount, showPopover, size etc. with their types and default values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性  | 说明        | 类型   | 默认值 | 版本 |\n|-------|-------------|--------------|----|--------|\n| avatarShape | 头像 Tag 形状，可选 `square` 和 `circle` | string |  `square` | 1.6.0 |\n```\n\n----------------------------------------\n\nTITLE: 自定义渲染单元格样式 - React\nDESCRIPTION: 通过 dateGridRender 属性自定义单元格的背景。月视图的文字 zIndex 默认为 3，如需完全覆盖单元格可以设置更大的 zIndex 来实现。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => {\n    const importantDate = {\n        position: 'absolute',\n        left: '0',\n        right: '0',\n        top: '0',\n        bottom: '0',\n        backgroundColor: 'var(--semi-color-danger-light-default)',\n    };\n    const displayValue = new Date(2019, 6, 23, 8, 32, 0);\n    const importDates = [new Date(2019, 6, 2), new Date(2019, 6, 8), new Date(2019, 6, 19), new Date(2019, 6, 23)];\n    const dateRender = dateString => {\n        if (importDates.filter(date => date.toString() === dateString).length) {\n            return <div style={importantDate} />;\n        }\n        return null;\n    };\n    return <Calendar height={700} mode=\"month\" displayValue={displayValue} dateGridRender={dateRender} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Anchor Component\nDESCRIPTION: Demonstrates the basic implementation of the Anchor component with multiple Link elements that jump to specific hash tag locations when clicked.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => (\n    <Anchor>\n        <Anchor.Link href=\"#Basic_Usage\" title=\"Basic Usage\" />\n        <Anchor.Link href=\"#Components\" title=\"Components\" />\n        <Anchor.Link href=\"#Design\" title=\"Design\" />\n        <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n        <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n    </Anchor>\n);\n```\n\n----------------------------------------\n\nTITLE: 日期范围选择 DatePicker - React\nDESCRIPTION: 使用 type=\"dateRange\" 实现日期范围的选择，并在控制台输出选择的结果。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker type=\"dateRange\" style={{ width: 260 }} onChange={console.log} />;\n```\n\n----------------------------------------\n\nTITLE: Auto-Collapse Enabled Anchor\nDESCRIPTION: Shows the Anchor component with auto-collapse functionality enabled, which dynamically displays child links based on the current scroll position.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                autoCollapse={true}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#Auto_Collapse\" title=\"1. Auto Collapse\">\n                    <Anchor.Link href=\"#Components\" title=\"1.1 Components\">\n                        <Anchor.Link href=\"#Avatar\" title=\"1.1.1 Avatar\" />\n                        <Anchor.Link href=\"#Button\" title=\"1.1.2 Button\" />\n                        <Anchor.Link href=\"#Icon\" title=\"1.1.3 Icon\" />\n                    </Anchor.Link>\n                    <Anchor.Link href=\"#Blocks\" title=\"1.2 Blocks\" />\n                    <Anchor.Link href=\"#Theme\" title=\"1.3 Theme\" />\n                </Anchor.Link>\n                <Anchor.Link href=\"#Design\" title=\"2. Design\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 切换面板日期回调 DatePicker - React\nDESCRIPTION: 展示如何使用 onPanelChange 回调函数来监听面板的月份或年份切换。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => (\n    <DatePicker\n        syncSwitchMonth={true}\n        type=\"dateTimeRange\"\n        style={{ width: 400 }}\n        onPanelChange={(date, dateString) => console.log(date, dateString)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: 带文字的Spin组件 - React\nDESCRIPTION: 展示了如何给Spin组件添加文字说明。通过tip属性设置加载时显示的文字。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Spin tip=\"I am loading...\">\n            <div\n                style={{\n                    border: '1px solid var(--semi-color-primary)',\n                    borderRadius: '4px',\n                    paddingLeft: '8px',\n                }}\n            >\n                <p>Here are some texts.</p>\n                <p>And more texts on the way.</p>\n            </div>\n        </Spin>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Notification in React\nDESCRIPTION: Demonstrates the basic usage of the Notification component with a button trigger and auto-close after 3 seconds.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Button\n        onClick={() =>\n            Notification.open({\n                title: 'Hi, Bytedance',\n                content: 'ies dance dance dance',\n                duration: 3,\n            })\n        }\n    >\n        Display Notification\n    </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Drag and Drop Upload Area\nDESCRIPTION: Provides SCSS styling for the drag and drop upload area, including hover states and layout customization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_26\n\nLANGUAGE: scss\nCODE:\n```\n.components-upload-demo-drag-area {\n    border-radius: var(--semi-border-radius-small);\n    border: 2px dashed var(--semi-color-border);\n    width: 100%;\n    padding: 12px;\n    background-color: var(--semi-color-tertiary-light-default);\n    display: flex;\n    cursor: pointer;\n    flex-wrap: wrap;\n    justify-content: center;\n    &:hover {\n        background-color: var(--semi-color-primary-light-default);\n        border-color: var(--semi-color-primary);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Anchor with Muted Rail Theme in React\nDESCRIPTION: Demonstrates the Anchor component with muted rail theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                railTheme={'muted'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#尺寸\" title=\"尺寸\" />\n                <Anchor.Link href=\"#滑轨主题\" title=\"滑轨主题\" />\n                <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n                <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n                <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Icons with Various Sizes in React\nDESCRIPTION: Shows how to display multiple icons with different sizes using the size prop in a React component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconSearch, IconHelpCircle, IconAlertCircle, IconMinusCircle, IconPlusCircle, IconPlus, IconRefresh } from '@douyinfe/semi-icons';\n\n() => {\n    // eslint-disable-next-line react/jsx-key\n    const types = [<IconSearch />, <IconHelpCircle />, <IconAlertCircle />, <IconMinusCircle />, <IconPlusCircle />, <IconPlus />, <IconRefresh />];\n    const sizes = ['extra-small', 'small', 'default', 'large', 'extra-large'];\n    let icons = types.map((type, i) => {\n        return <div key={i} style={{ marginBottom: 4 }}>{sizes.map(size => React.cloneElement(type, { size, key: size }))}</div>;\n    });\n    return icons;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Illustration in Empty State Component\nDESCRIPTION: Integrating an illustration component with Semi UI's Empty component to provide visual context for empty states\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-illustrations/README.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Empty } from '@douyinfe/semi-ui';\n\nReactDOM.render(<Empty image={<IllustrationIdle />}></Empty>, root);\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Sidebar Layout in React\nDESCRIPTION: Shows how to create a layout with a full-height sidebar alongside Header, Content, and Footer components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Sider style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}>Sider</Sider>\n            <Layout>\n                <Header style={commonStyle}>Header</Header>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n                <Footer style={commonStyle}>Footer</Footer>\n            </Layout>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Switching Between Light and Dark Modes in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to toggle between light and dark modes by adding or removing the 'theme-mode' attribute on the body element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst body = document.body;\nif (body.hasAttribute('theme-mode')) {\n    body.removeAttribute('theme-mode');\n} else {\n    body.setAttribute('theme-mode', 'dark');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PinCode Usage with Different Sizes\nDESCRIPTION: Demonstrates basic implementation of PinCode component with small, default, and large sizes. Includes event handlers for onChange and onComplete.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinCode } from '@douyinfe/semi-ui';\nimport React from 'react';\n\nfunction Demo() {\n    return (\n        <>\n            <PinCode\n                size={'small'}\n                defaultValue={'123456'}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n            <br />\n            <PinCode\n                size={'default'}\n                defaultValue={'123456'}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n            <br />\n            <PinCode\n                size={'large'}\n                defaultValue={'123456'}\n                onComplete={value => console.log('pincode: ', value)}\n                onChange={value => {\n                    console.log(value);\n                }}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Popover Background Color in React\nDESCRIPTION: Shows how to customize the background and border colors of a Popover using style props. The colors are applied to both the Popover body and its arrow.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div id='popup-parent' style={{ position: 'relative' }}>\n            <Popover\n                content={\n                    <article style={{ padding: 4 }}>\n                        Hi, Semi UI Popover.\n                    </article>\n                }\n                getPopupContainer={() => document.querySelector('#popup-parent')}\n                trigger='custom'\n                visible\n                position='right'\n                showArrow\n                style={{\n                    backgroundColor: 'rgba(var(--semi-blue-4),1)',\n                    borderColor: 'rgba(var(--semi-blue-4),1)',\n                    color: 'var(--semi-color-white)',\n                    borderWidth: 1,\n                    borderStyle: 'solid',\n                }}\n            >\n                <Tag\n                    style={{\n                        backgroundColor: 'rgba(var(--semi-blue-4),1)',\n                        color: 'var(--semi-color-white)'\n                    }}\n                >\n                    Colorful Popover\n                </Tag>\n            </Popover>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Box Position in TreeSelect\nDESCRIPTION: Shows how to configure the search box position in TreeSelect using searchPosition prop. Demonstrates both trigger and dropdown positions with single and multiple selection modes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0'\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1'\n                }\n            ]\n        }\n    ];\n    return (\n        <>\n            <TreeSelect\n                searchPosition=\"trigger\"\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                filterTreeNode\n                placeholder=\"单选\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                searchPosition=\"trigger\"\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                filterTreeNode\n                maxTagCount={2}\n                placeholder=\"多选\"\n            />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transfer with dnd-kit\nDESCRIPTION: Implementation example using dnd-kit library showcasing sortable list functionality. Uses DndContext and SortableContext for drag and drop operations with support for mouse, touch, and keyboard interactions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Transfer, Input, Spin, Button } from '@douyinfe/semi-ui';\nimport { IconSearch, IconHandle } from '@douyinfe/semi-icons';\nimport { useSortable, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { CSS as cssDndKit } from '@dnd-kit/utilities';\nimport { closestCenter, DragOverlay, DndContext, MouseSensor, TouchSensor, useSensor, useSensors, KeyboardSensor, TraversalOrder } from '@dnd-kit/core';\n\nfunction SortableList({\n    items,\n    onSortEnd,\n    renderItem,\n}) {\n    const [activeId, setActiveId] = useState(null);\n    const sensors = useSensors(\n        useSensor(MouseSensor),\n        useSensor(TouchSensor),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        })\n    );\n    const getIndex = useCallback((id) => items.indexOf(id), [items]);\n    const activeIndex = useMemo(() => activeId ? getIndex(activeId) : -1, [getIndex, activeId]);\n\n    const onDragStart = useCallback(({ active }) => {\n        if (!active) { return; }\n        setActiveId(active.id);\n    }, []);\n\n    const onDragEnd = useCallback(({ over }) => {\n        setActiveId(null);\n        if (over) {\n            const overIndex = getIndex(over.id);\n            if (activeIndex !== overIndex) {\n                onSortEnd({ oldIndex: activeIndex, newIndex: overIndex });\n            }\n        }\n    }, [activeIndex, getIndex, onSortEnd]);\n\n    const onDragCancel = useCallback(() => {\n        setActiveId(null);\n    }, []);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Illustration Usage in Semi Design 2.0 with React\nDESCRIPTION: This code snippet illustrates the update from 1.x to 2.x in how illustrations are utilized in Semi Design. The new method improves integration by allowing the use of component imports instead of direct SVG imports, ensuring better compatibility and structure in React applications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// 1.x\nimport { Empty } from '@ies/semi-ui-react';\nimport Construction from '@ies/semi-illustrations/construction.svg';\n<Empty image={Construction} />\n\n// 2.x\nimport { Empty } from '@douyinfe/semi-ui';\nimport { IllustrationConstruction } from '@douyinfe/semi-illustrations';\n<Empty image={<IllustrationConstruction />} />\n```\n\n----------------------------------------\n\nTITLE: Listing Basic Components in Semi Design\nDESCRIPTION: This snippet lists the basic components available in the Semi Design library, including dividers, grids, icons, layouts, spacing, and typography.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nDivider 分割线,\nGrid 栅格,\nIcon 图标,\nLayout 布局,\nSpace 间距,\nTypography 版式\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Upload Component in React\nDESCRIPTION: Shows how to import the Upload component from the Semi UI library in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Upload } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Card with Action Area\nDESCRIPTION: Demonstrates how to add an actions section to a Card component with Rating functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Rating } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <Card\n            style={{ maxWidth: 300 }}\n            actions={[    \n                // eslint-disable-next-line react/jsx-key\n                <Rating size='small' defaultValue={4}/>\n            ]}\n            headerLine={ false }\n            cover={ \n                <img \n                    alt=\"example\" \n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo.jpeg\" \n                />\n            }\n        >\n            <Meta \n                title=\"Semi Doc\" \n                description=\"全面、易用、优质\" \n            />\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Currency Symbol Display with Prefix/Suffix\nDESCRIPTION: Shows how to hide default currency symbols and use custom prefix/suffix to display currency indicators.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';    \n\n() => {\n    const defaultValue = 123456.78;\n    return (\n        <div>\n            <div>🇨🇳 CNY ➕ code</div>\n            <InputNumber style={{ width: 200 }} currency=\"CNY\" prefix=\"CNY\" showCurrencySymbol={false} defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ symbol</div>\n            <InputNumber style={{ width: 200 }} currency=\"CNY\" prefix=\"￥\" showCurrencySymbol={false} defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇨🇳 CNY ➕ name</div>\n            <InputNumber style={{ width: 200 }} currency=\"CNY\" suffix=\"人民币\" showCurrencySymbol={false} defaultValue={defaultValue} />\n            <br />\n            <br />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 年月范围选择 DatePicker - React\nDESCRIPTION: 使用 type=\"monthRange\" 实现年月范围选择功能。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker type=\"monthRange\" style={{ width: 200 }} />;\n```\n\n----------------------------------------\n\nTITLE: 使用Context的Toast (React)\nDESCRIPTION: 展示如何使用Toast.useToast创建支持读取context的contextHolder。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nconst ReachableContext = React.createContext();\n\nfunction Demo(props = {}) {\n    const [toast, contextHolder] = Toast.useToast();\n    const config = {\n        duration: 0,\n        title: 'This is a success message',\n        content: <ReachableContext.Consumer>{name => `ReachableContext: ${name}`}</ReachableContext.Consumer>,\n    };\n\n    return (\n        <ReachableContext.Provider value=\"Light\">\n            <div>\n                <Button\n                    onClick={() => {\n                        toast.success(config);\n                    }}\n                >\n                    Hook Toast\n                </Button>\n            </div>\n            {contextHolder}\n        </ReachableContext.Provider>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Validation States in AutoComplete Component\nDESCRIPTION: 展示AutoComplete组件的不同校验状态(warning、error等)，通过validateStatus属性可以设置不同的校验样式。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <AutoComplete defaultValue=\"ies\" validateStatus=\"warning\"></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete defaultValue=\"ies\" validateStatus=\"error\"></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete defaultValue=\"ies\"></AutoComplete>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Tokens with Stylelint\nDESCRIPTION: Commands to update CSS variables in different file types using Stylelint.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx stylelint \"**/*.scss\" --fix    // Upgrade CSS variables in inline style in SCSS\nnpx stylelint \"**/*.tsx\" --fix     // Upgrade CSS variables in inline style in tsx\nnpx stylelint \"**/*.jsx\" --fix     // Upgrade CSS variables in inline style in jsx\n```\n\n----------------------------------------\n\nTITLE: Slider with Segmented Background\nDESCRIPTION: Custom implementation of a slider with segmented background colors using linear-gradient\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\nclass SegSlider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: [20, 60] };\n        this.changeValue = this.changeValue.bind(this);\n        this.getRailStyle = this.getRailStyle.bind(this);\n    }\n\n    changeValue(value) {\n        this.setState({ value });\n    }\n\n    getRailStyle(range) {\n        const color = ['var(--semi-color-danger)', 'transparent', 'var(--semi-color-success)'];\n        const gradientPos = this.state.value.map(val => \n            ((val - range[0]) / (range[1] - range[0])).toFixed(2) * 100\n        );\n        const style = {\n            background: `linear-gradient(to right, ${color[0]} ${gradientPos[0]}%, ${color[1]} ${gradientPos[0]}%, ${color[1]} ${gradientPos[1]}%, ${color[2]} ${gradientPos[1]}%)`\n        };\n        return style;\n    }\n\n    render() {\n        const range = [10, 100];\n        const railStyle = this.getRailStyle(range);\n        return (\n            <Slider\n                range\n                min={range[0]}\n                max={range[1]}\n                onChange={this.changeValue}\n                railStyle={railStyle}\n                defaultValue={this.state.value}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Empty Component Usage with Custom Illustrations\nDESCRIPTION: Demonstrates basic usage of the Empty component with custom illustrations from @douyinfe/semi-illustrations, including separate illustrations for dark mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty } from '@douyinfe/semi-ui';\nimport { IllustrationConstruction, IllustrationConstructionDark } from '@douyinfe/semi-illustrations';\n\n() => (\n    <Empty\n        image={<IllustrationConstruction style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationConstructionDark style={{ width: 150, height: 150 }} />}\n        title={'功能建设中'}\n        description=\"当前功能暂未开放，敬请期待。\"\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled TimePicker Component\nDESCRIPTION: Example of TimePicker as a controlled component using value and onChange props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nclass Demo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: null,\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(time) {\n        console.log(time);\n        this.setState({ value: time });\n    };\n\n    render() {\n        return <TimePicker value={this.state.value} onChange={this.onChange} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation using JSX Syntax\nDESCRIPTION: Demonstrates how to build navigation using JSX syntax with Nav.Header, Nav.Item, Nav.Sub, and Nav.Footer components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconStar, IconUser, IconUserGroup, IconSemiLogo } from '@douyinfe/semi-icons';\nimport { IconDescriptions, IconForm, IconTree, IconBanner, IconBadge } from '@douyinfe/semi-icons-lab';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                bodyStyle={{ height: 300 }}\n                defaultOpenKeys={['user', 'union']}\n                onSelect={data => console.log('trigger onSelect: ', data)}\n                onClick={data => console.log('trigger onClick: ', data)}\n            >\n                <Nav.Header logo={<IconSemiLogo style={{ height: '36px', fontSize: 36 }} />} text={'Semi 运营后台'} />\n                <Nav.Item itemKey={'union'} text={'活动管理'} icon={<IconForm />} />\n                <Nav.Sub itemKey={'user'} text=\"用户管理\" icon={<IconBadge />}>\n                    <Nav.Item itemKey={'active'} text={'活跃用户'} />\n                    <Nav.Item itemKey={'negative'} text={'非活跃用户'} />\n                </Nav.Sub>\n                <Nav.Sub itemKey={'union-management'} text=\"任务管理\" icon={<IconTree />}>\n                    <Nav.Item itemKey={'notice'} text={'任务设置'} />\n                    <Nav.Item itemKey={'query'} text={'任务查询'} />\n                    <Nav.Item itemKey={'info'} text={'信息录入'} />\n                </Nav.Sub>\n                <Nav.Footer collapseButton={true} />\n            </Nav>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Radio Component in Semi Design\nDESCRIPTION: Demonstrates the basic usage of the Radio component with a simple label.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <Radio aria-label=\"Radio demo\" name=\"demo-radio\">Radio</Radio>\n);\n```\n\n----------------------------------------\n\nTITLE: Pagination with Total Display - React/JSX\nDESCRIPTION: Demonstrates pagination with total page number display enabled\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showTotal style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={200} showTotal style={{ marginBottom: 12 }}></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Icon组件的无障碍使用示例\nDESCRIPTION: 展示如何通过aria-label属性为Icon组件提供更好的语义化描述，以提高可访问性。Icon组件的role默认为img，aria-label默认为组件文件名。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconHome } from '@douyinfe/semi-icons';\n\n() => <IconHome aria-label=\"back to homepage\" />;\n```\n\n----------------------------------------\n\nTITLE: Updating and Destroying Modal in JavaScript\nDESCRIPTION: Demonstrates how to update and destroy a modal created using Modal.info(). The code shows creating a modal, updating its title and content, and then destroying it.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst modal = Modal.info();\n\nmodal.update({\n  title: '更新的标题',\n  content: '更新的内容',\n});\n\nmodal.destroy();\n```\n\n----------------------------------------\n\nTITLE: Centered Content Skeleton\nDESCRIPTION: Demonstrates centered layout with paragraph and button skeletons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: '300px',\n        marginBottom: '10px',\n    };\n\n    const placeholder = (\n        <div style={style}>\n            <Skeleton.Paragraph style={style} rows={3} />\n            <Skeleton.Button />\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true} style={{ textAlign: 'center' }}>\n            <div style={{ textAlign: 'center' }}>\n                <p>Hi, Bytedance dance dance.</p>\n                <p>Hi, Bytedance dance dance.</p>\n                <Button>Button</Button>\n            </div>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Incremental Token State Management\nDESCRIPTION: Background tokenization processor that uses IdleDeadline to avoid blocking the main thread, with support for incremental analysis and token state caching\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-json-viewer-core/src/tokens/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// jsonModelToken.ts\n// Implements stateful token analysis with background processing\n```\n\n----------------------------------------\n\nTITLE: Configuring Indentation in Semi-UI Navigation Component (JSX)\nDESCRIPTION: Example showing how to disable indentation limits in a Semi-UI Nav component by setting limitIndent to false. This creates a multi-level nested navigation structure with proper indentation for each level.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\nimport { IconUser, IconStar, IconSetting } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                limitIndent={false}\n                defaultOpenKeys={['job']}\n                bodyStyle={{ height: 320 }}\n                items={[\n                    { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                    {\n                        text: 'Task platform',\n                        icon: <IconSetting />,\n                        itemKey: 'job',\n                        items: ['Task Management', {\n                            text: 'Task 1',\n                            icon: <IconSetting />,\n                            itemKey: 'mission1',\n                            items: ['Task 2', {\n                                text: 'Task 3 disassembly',\n                                icon: <IconSetting />,\n                                itemKey: 'mission3',\n                                items: ['Subtask 1', 'Subtask 2'],\n                            }, ],\n                        }, ],\n                    },\n                ]}\n                onSelect={key => console.log(key)}\n                header={{\n                    logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                    text: 'Live broadcast operation background'\n                }}\n                footer={{\n                    collapseButton: true,\n                }}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Semi-Design Tags with Different Colors and Styles\nDESCRIPTION: Demonstrates a collection of Tag components from Semi-Design library with various color options (grey, blue, red, green, etc.) and different types (default, ghost, solid). The tags are displayed in a row with consistent styling defined by the tagStyle variable.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<div>\n    <Tag color='grey' style={tagStyle}> grey tag </Tag>\n    <Tag color='blue' style={tagStyle}> blue tag </Tag>\n    <Tag color='blue' type='ghost' style={tagStyle}> ghost tag </Tag>\n    <Tag color='blue' type='solid' style={tagStyle}> solid tag </Tag>\n    <Tag color='red' style={tagStyle}> red tag </Tag>\n    <Tag color='green' style={tagStyle}> green tag </Tag>\n    <Tag color='orange' style={tagStyle}> orange tag </Tag>\n    <Tag color='teal' style={tagStyle}> teal tag </Tag>\n    <Tag color='violet' style={tagStyle}> violet tag </Tag>\n    <Tag color='white' style={tagStyle}> white tag </Tag>\n</div>\n```\n\n----------------------------------------\n\nTITLE: OverflowList Simple Collapse Mode Implementation\nDESCRIPTION: Demonstrates basic usage of OverflowList in collapse mode with tags and icons. Shows how to handle overflow rendering and item rendering with width control.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.length ? <Tag style={{ flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }}>+{items.length}</Tag> : null;\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <Tag color=\"blue\" key={item.key} style={{ marginRight: 8, flex: '0 0 auto' }}>\n                {item.icon}\n                {item.key}\n            </Tag>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList items={items} overflowRenderer={renderOverflow} visibleItemRenderer={renderItem} />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Size SideSheet\nDESCRIPTION: Demonstrates size customization options for SideSheet using predefined sizes (small, medium, large) or custom width settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, RadioGroup, Radio, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const change = () => {\n        setVisible(!visible);\n    };\n    const [size, setSize] = useState('small');\n    const changeSize = e => {\n        setSize(e.target.value);\n    };\n    return (\n        <>\n            <RadioGroup onChange={changeSize} value={size}>\n                <Radio value={'small'}>small</Radio>\n                <Radio value={'medium'}>medium</Radio>\n                <Radio value={'large'}>large</Radio>\n            </RadioGroup>\n            <br />\n            <br />\n            <Button onClick={change}>Open SideSheet</Button>\n            <SideSheet title=\"滑动侧边栏\" visible={visible} onCancel={change} size={size}>\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: InputNumber Component Method Signatures\nDESCRIPTION: Internal methods accessible through ref for managing input focus\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nblur(): void;  // Move the focus\nfocus(): void; // Get the focus\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component in React\nDESCRIPTION: Shows how to import the Layout component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Slider with Segmented Background in React\nDESCRIPTION: 展示如何使用 linear-gradient 和 railStyle 实现动态的分段背景效果。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\nclass SegSlider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = { value: [20, 60] };\n        this.changeValue = this.changeValue.bind(this);\n        this.getRailStyle = this.getRailStyle.bind(this);\n    }\n\n    changeValue(value) {\n        this.setState({ value });\n    }\n\n    getRailStyle(range) {\n    // color of second segment inherits from .semi-slider-track\n        const color = ['var(--semi-color-danger)', 'transparent', 'var(--semi-color-success)'];\n        const gradientPos = this.state.value.map(val => \n            ((val - range[0]) / (range[1] - range[0])).toFixed(2) * 100\n        );\n        const style = {\n            background: `linear-gradient(to right, ${color[0]} ${gradientPos[0]}%, ${color[1]} ${gradientPos[0]}%, ${color[1]} ${gradientPos[1]}%, ${color[2]} ${gradientPos[1]}%)`\n        };\n        return style;\n    }\n\n    render() {\n        const range = [10, 100];\n        const railStyle = this.getRailStyle(range);\n        return (\n            <Slider\n                range\n                min={range[0]}\n                max={range[1]}\n                onChange={this.changeValue}\n                railStyle={railStyle}\n                defaultValue={this.state.value}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Tabs with Line Style in React\nDESCRIPTION: Demonstrates the basic usage of Tabs component with 'line' style, using TabPane children to define content. Includes examples of document, quick start, and help sections.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <Tabs type=\"line\">\n                    <TabPane tab=\"Document\" itemKey=\"1\">\n                        <h3>Document</h3>\n                        <p style={{ lineHeight: 1.8 }}>\n                            Semi Design is a design system developed and maintained by IES Front-end Team and UED Team\n                        </p>\n                        <p style={{ lineHeight: 1.8 }}>\n                            Semi Design create a consistent, good-looking, easy-to-use, and efficient user experience\n                            with a user-centric, content-first, and human-friendly design system.\n                        </p>\n                        <ul>\n                            <li>\n                                <p>Content-first</p>\n                            </li>\n                            <li>\n                                <p>Customized theming</p>\n                            </li>\n                            <li>\n                                <p>Internationalized</p>\n                            </li>\n                            <li>\n                                <p>Humanism</p>\n                            </li>\n                        </ul>\n                    </TabPane>\n                    <TabPane tab=\"Quick Start\" itemKey=\"2\">\n                        <h3>Quick Start</h3>\n                        <p style={{ lineHeight: 1.8 }}>\n                            If it is a new project, it is recommended that you use Eden to initialize the project and\n                            initialize the project type to select the React direction.\n                        </p>\n                        <pre\n                            style={{\n                                margin: '24px 0',\n                                padding: '20px',\n                                border: 'none',\n                                whiteSpace: 'normal',\n                                borderRadius: 'var(--semi-border-radius-medium)',\n                                color: 'var(--semi-color-text-1)',\n                                backgroundColor: 'var(--semi-color-fill-0)',\n                            }}\n                        >\n                            <code>yarn add @douyinfe/semi-ui</code>\n                        </pre>\n                    </TabPane>\n                    <TabPane tab=\"Help\" itemKey=\"3\">\n                        <h3>Help</h3>\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\n                            Q: Who should I look for if there are new component requirements, or existing component does\n                            not meet my needs?\n                        </p>\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\n                            {`Give feedbacks in the upper right corner, submit an Issue, describe your needs as well as\n                            the business scenario. We'll handle these issues with priorities.`}\n                        </p>\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\n                            Q: Have questions when using components?\n                        </p>\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\n                            Welcome to ask anything in our Lark customer service group.\n                        </p>\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Dropdown Implementation\nDESCRIPTION: Shows how to implement nested dropdowns with multiple levels of menu items using useMemo for optimization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react';\nimport { Dropdown, Button, HotKeys } from '@douyinfe/semi-ui';\nimport { IconToken } from \"@douyinfe/semi-icons-lab\";\n\nfunction Demo() {\n    const subDropdown = useMemo(\n        () => (\n            <Dropdown.Menu>\n                <Dropdown.Item>Nested Menu Item 1</Dropdown.Item>\n                <Dropdown.Item>Nested  Menu Item 2</Dropdown.Item>\n                <Dropdown.Item>Nested  Menu Item 3</Dropdown.Item>\n            </Dropdown.Menu>\n        ),\n        []\n    );\n\n    return (\n        <div style={{ margin: 100 }}>\n            <Dropdown\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown position={'rightTop'} render={subDropdown}>\n                            <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        </Dropdown>\n                        <Dropdown position={'leftTop'} render={subDropdown}>\n                            <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        </Dropdown>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Button theme=\"outline\" type=\"tertiary\" icon={<IconToken />}>\n                    Hover Me\n                </Button>\n            </Dropdown>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of AutoComplete Options\nDESCRIPTION: 展示如何使用对象数组作为数据源并自定义候选项的渲染方式，包括使用Avatar组件增强视觉效果。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete, Avatar } from '@douyinfe/semi-ui';\nimport { IconSearch } from '@douyinfe/semi-icons';\n\n() => {\n    const color = ['amber', 'indigo', 'cyan'];\n    const [data, setData] = useState([\n        { name: '夏可漫', email: 'xiakeman@example.com', abbr: 'XK', color: 'amber' },\n        { name: '申悦', email: 'shenyue@example.com', abbr: 'SY', color: 'indigo' },\n        { name: '曲晨一', email: 'quchenyi@example.com', abbr: 'CY', color: 'blue' },\n        { name: '文嘉茂', email: 'wenjiamao@example.com', abbr: 'JM', color: 'cyan' },\n    ]);\n    const [value, setValue] = useState('');\n    \n    const handleStringSearch = (value) => {\n        let result;\n        if (value) {\n            result = data.map(item => {\n                return { ...item, value: item.name, label: item.email };\n            });\n        } else {\n            result = [];\n        }\n        setData(result);\n    };\n\n    const renderOption = (item) => {\n        let optionStyle = {\n            display: 'flex',\n        };\n        return (\n            <>\n                <Avatar color={item.color} size=\"small\">\n                    {item.abbr}\n                </Avatar>\n                <div style={{ marginLeft: 4 }}>\n                    <div style={{ fontSize: 14, marginLeft: 4 }}>{item.name}</div>\n                    <div style={{ marginLeft: 4 }}>{item.email}</div>\n                </div>\n            </>\n        );\n    }\n\n\n    return (\n        <AutoComplete\n            data={data}\n            showClear\n            prefix={<IconSearch />}\n            onSearch={handleStringSearch}\n            renderItem={renderOption}\n            renderSelectedItem={option => option.email}\n            style={{ width: 280 }}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Semi Global Settings\nDESCRIPTION: Demonstrates how to override default props for Semi components globally using semiGlobal configuration.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsemiGlobal.config.overrideDefaultProps = {\n    Button: {\n        type: 'warning',\n    },\n    Select: {\n        zIndex: 2000,\n    },\n    Tooltip: {\n        zIndex: 2001,\n        trigger: 'click'\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Icons in Semi Design\nDESCRIPTION: Demonstrates how to import icons from the @douyinfe/semi-icons package for use in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Icon, { IconHome } from '@douyinfe/semi-icons';\n```\n\n----------------------------------------\n\nTITLE: Rendering Illustration Component in React\nDESCRIPTION: Basic usage of importing and rendering an illustration component directly in a React application\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-illustrations/README.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IllustrationIdle } from '@douyinfe/semi-illustrations';\n\nReactDOM.render(<IllustrationIdle />, root);\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Component in React\nDESCRIPTION: Basic import statement for the Popover component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popover } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Custom Format\nDESCRIPTION: Demonstration of TimePicker with custom time format using HH:mm pattern.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker format={'HH:mm'} defaultValue={'10:24'}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Implementation\nDESCRIPTION: Demonstrates basic usage of Timeline component with three items showing different timestamps and content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\n\n() => (\n    <Timeline>\n        <Timeline.Item time='2019-07-14 10:35'>First Node Content</Timeline.Item>\n        <Timeline.Item time='2019-06-13 16:17'>Second Node Content</Timeline.Item>\n        <Timeline.Item time='2019-05-14 18:34'>Third Node Content</Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Semi Design Components with UMD Import\nDESCRIPTION: Example of using Semi Design components in a browser environment with UMD imports. It demonstrates the usage of Button, Input, Icon, and Illustration components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\">\n    const { Input, Button, Toast, Icon, Form } = SemiUI;\n    const { IconHome } = SemiIcons;\n    const { IllustrationConstruction } = SemiIllustrations;\n    ReactDOM.render(\n        <div>\n            <Button onClick={() => Toast.warning({ duration: 0, content: 'Semi Design' })}>test</Button>\n            <Input defaultValue=\"semi\" onChange={value => Toast.info('hello')}></Input>\n            <IconHome size=\"large\" />\n            <IllustrationConstruction style={{width: 150, height: 150}} />\n        </div>, document.getElementById(\"root\")\n    );\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Transfer's search method through ref in React\nDESCRIPTION: Example of using the search method that can be bound to the Transfer component instance through a ref to programmatically trigger the search functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(value: string)\n```\n\n----------------------------------------\n\nTITLE: Creating Borderless Theme Buttons\nDESCRIPTION: Demonstrates how to create buttons with no background using the borderless theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const themes = [['borderless', 'borderless']];\n    const types = [['primary', 'primary'], ['secondary', 'secondary'], ['tertiary', 'tertiary'], ['warning', 'warning'], ['danger', 'danger']];\n\n    return (\n        <div>{\n            themes.map((theme, idxTheme) => (\n                <div key={idxTheme}>\n                    <ul style={{ listStyle: 'none', display: 'flex', margin: 0, padding: 0 }}>\n                        {types.map((type, idxType) => (\n                            <li key={'' + idxTheme + idxType} style={{ margin: 10 }}>\n                                <Button\n                                    theme={theme[0]}\n                                    type={type[0]}\n                                >\n                                    {theme[1]} {type[1]}\n                                </Button>\n                            </li>)\n                        )}\n                    </ul>\n                </div>))\n        }\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Component in React\nDESCRIPTION: Shows how to import the Notification component from the Semi-Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Notification } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Disabled Rating Component in React\nDESCRIPTION: Demonstrates how to create a disabled Rating component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Rating } from '@douyinfe/semi-ui';\n\n() => (\n    <Rating disabled defaultValue={3} />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Theme Buttons\nDESCRIPTION: Demonstrates how to create buttons with a solid (dark background) theme in various types.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const themes = [['solid', 'solid']];\n    const types = [['primary', 'primary'], ['secondary', 'secondary'], ['tertiary', 'tertiary'], ['warning', 'warning'], ['danger', 'danger']];\n\n    return (\n        <div>{\n            themes.map((theme, idxTheme) => (\n                <div key={idxTheme}>\n                    <ul style={{ listStyle: 'none', display: 'flex', margin: 0, padding: 0 }}>\n                        {types.map((type, idxType) => (\n                            <li key={'' + idxTheme + idxType} style={{ margin: 10 }}>\n                                <Button\n                                    theme={theme[0]}\n                                    type={type[0]}\n                                >\n                                    {theme[1]} {type[1]}\n                                </Button>\n                            </li>)\n                        )}\n                    </ul>\n                </div>))\n        }\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Month Selection with DatePicker\nDESCRIPTION: Shows how to implement year-to-month selection by setting type to 'month', which allows users to select a specific month from a year view.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker defaultValue={new Date()} type=\"month\" style={{ width: 140 }} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collapse Without Arrow Icons\nDESCRIPTION: Shows how to hide the expand/collapse arrow icons using the showArrow prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse } from '@douyinfe/semi-ui';\n\n() => (\n    <Collapse accordion>\n        <Collapse.Panel header=\"This is panel header 1\" itemKey=\"1\" showArrow={false}>\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 2\" itemKey=\"2\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 3\" itemKey=\"3\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch States\nDESCRIPTION: Examples of disabled Switch components in both checked and unchecked states\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch disabled aria-label='a switch for demo'></Switch>\n        <br />\n        <Switch disabled checked={true} aria-label='a switch for demo'></Switch>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tabs in React Component\nDESCRIPTION: Demonstrates how to disable a specific tab in the Tabs component using the 'disabled' prop on a TabPane.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"Document\" itemKey=\"1\">\n                    Document\n                </TabPane>\n                <TabPane tab=\"Quick Start\" itemKey=\"2\" disabled>\n                    Quick Start\n                </TabPane>\n                <TabPane tab=\"Help\" itemKey=\"3\">\n                    Help\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spin Loading Component in Semi-Design\nDESCRIPTION: Example of the Spin component used to indicate loading state with a custom loading message. The component wraps content that will be covered by the loading indicator, styled with background color, border and padding.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n<Spin tip='I am loading...'>\n    <div style={{\n        backgroundColor: 'var(--semi-color-primary-light-default',\n        border: '1px solid var(--semi-color-primary)',\n        borderRadius: '4px',\n        padding: '16px 10px'\n    }}>\n        <p>Here are some texts.</p>\n        <p>And more texts on the way.</p>\n    </div>\n</Spin>\n```\n\n----------------------------------------\n\nTITLE: Typography Ellipsis Configuration Table\nDESCRIPTION: Configuration table showing all available properties for the ellipsis feature of Typography component, including collapse, expand, tooltip and suffix options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性         | 说明                                                                                                              | 类型                                                | 默认值 |\n| ------------ | ----------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | ------ |\n| collapseText | 折叠的展示文本                                                                                                    | string                                              | `收起` |\n| collapsible  | 是否支持折叠                                                                                                      | boolean                                             | false  |\n```\n\n----------------------------------------\n\nTITLE: Design Token Component Implementation\nDESCRIPTION: Component reference for design token implementation within the Semi-Design system.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<DesignToken/>\n```\n\n----------------------------------------\n\nTITLE: Directional Collapse Mode Implementation\nDESCRIPTION: Shows how to implement OverflowList with configurable collapse direction using the collapseFrom prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.length ? <Tag style={{ marginRight: 8, flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }}>+{items.length}</Tag> : null;\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <Tag color=\"blue\" key={item.key} style={{ marginRight: 8, flex: '0 0 auto' }}>\n                {item.icon}\n                {item.key}\n            </Tag>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList\n                    items={items}\n                    collapseFrom=\"start\"\n                    overflowRenderer={renderOverflow}\n                    visibleItemRenderer={renderItem}\n                />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 导入Icon组件的基本语法\nDESCRIPTION: 展示如何从@douyinfe/semi-icons包和@douyinfe/semi-icons-lab包导入图标组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Icon, { IconHome } from '@douyinfe/semi-icons';\nimport { IconAvatar, IconCard } from '@douyinfe/semi-icons-lab';\n```\n\n----------------------------------------\n\nTITLE: Card with Customized Border in Semi Design\nDESCRIPTION: Shows how to customize the card's border and line properties. It demonstrates setting 'bordered' to false and 'headerLine' to true.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div \n            style={{\n                display: 'inline-block',\n                padding: 20,\n                backgroundColor: 'var(--semi-color-fill-0)'\n            }}\n        >\n            <Card \n                style={{ maxWidth: 360 }}\n                bordered={false}\n                headerLine={true}\n                title='Semi Design'\n            >\n                Semi Design is a design system developed and maintained by IES-FE & IES-UED. The design system includes a design language and a set of reusable front-end components, helping designers and developers to more easily create high-quality, consistent user experience, design-compliant Web applications.\n            </Card>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Select Component\nDESCRIPTION: Shows how to create a controlled Select component using React state. The component's value is fully controlled by the parent through the value prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    let [value, setValue] = useState('xigua');\n    return (\n        <>\n            <Select value={value} style={{ width: '300px' }} onChange={setValue} placeholder=\"Controlled Component\">\n                <Select.Option value=\"douyin\">Douyin</Select.Option>\n                <Select.Option value=\"capcut\">Capcut</Select.Option>\n                <Select.Option value=\"xigua\">BuzzVideo</Select.Option>\n            </Select>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Navigation with Semi Design\nDESCRIPTION: Shows horizontal navigation implementation with dropdown menu, avatar, and nested menu items. Features header logo and user profile section in the footer.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav, Avatar, Dropdown } from '@douyinfe/semi-ui';\nimport { IconStar, IconUser, IconUserGroup, IconSetting, IconEdit } from '@douyinfe/semi-icons';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <div style={{ width: '100%' }}>\n                <Nav\n                    mode={'horizontal'}\n                    items={[\n                        { itemKey: 'user', text: 'User Management', icon: <IconUser /> },\n                        { itemKey: 'union', text: 'Union Center', icon: <IconStar /> },\n                        {\n                            itemKey: 'approve-management',\n                            text: 'Approval Management',\n                            icon: <IconEdit />,\n                            items: [\n                                'Check-in Review',\n                                {\n                                    itemKey: 'operation-management',\n                                    text: 'Operations Management',\n                                    items: [\n                                        'Personnel Management',\n                                        'Personnel Change'\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            text: 'Task Platform',\n                            icon: <IconSetting />,\n                            itemKey: 'job',\n                            items: ['Task Management', 'User Task Query'],\n                        },\n                    ]}\n                    onSelect={key => console.log(key)}\n                    header={{\n                        logo: <img src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/webcast_logo.svg\" />,\n                        text: 'Live Platform'\n                    }}\n                    footer={\n                        <Dropdown\n                            position=\"bottomRight\"\n                            render={\n                                <Dropdown.Menu>\n                                    <Dropdown.Item>Detail</Dropdown.Item>\n                                    <Dropdown.Item>Quit</Dropdown.Item>\n                                </Dropdown.Menu>\n                            }\n                        >\n                            <Avatar size=\"small\" color='light-blue' style={{ margin: 4 }}>BD</Avatar>\n                            <span>Bytedancer</span>\n                        </Dropdown>\n                    }\n                />\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Popover with Multiple Positions\nDESCRIPTION: Demonstrates how to implement Popover with twelve different positioning options including top, bottom, left, and right variations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const tops = [\n        ['topLeft', 'TL'],\n        ['top', 'Top'],\n        ['topRight', 'TR'],\n    ];\n    const lefts = [\n        ['leftTop', 'LT'],\n        ['left', 'Left'],\n        ['leftBottom', 'LB'],\n    ];\n    const rights = [\n        ['rightTop', 'RT'],\n        ['right', 'Right'],\n        ['rightBottom', 'RB'],\n    ];\n    const bottoms = [\n        ['bottomLeft', 'BL'],\n        ['bottom', 'Bottom'],\n        ['bottomRight', 'BR'],\n    ];\n\n    return (\n        <div style={{ paddingLeft: 40 }} className=\"tag-margin-right\">\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\n                {tops.map((pos, index) => (\n                    <Popover\n                        content={\n                            <article style={{ padding: 12 }}>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, float: 'left' }}>\n                {lefts.map((pos, index) => (\n                    <Popover\n                        content={\n                            <article style={{ padding: 12 }}>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ width: 40, marginLeft: 180 }}>\n                {rights.map((pos, index) => (\n                    <Popover\n                        content={\n                            <article style={{ padding: 12 }}>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\n                {bottoms.map((pos, index) => (\n                    <Popover\n                        content={\n                            <article style={{ padding: 12 }}>\n                                Hi ByteDancer, this is a popover.\n                                <br /> We have 2 lines.\n                            </article>\n                        }\n                        position={Array.isArray(pos) ? pos[0] : pos}\n                        key={index}\n                    >\n                        <Tag>{Array.isArray(pos) ? pos[1] : pos}</Tag>\n                    </Popover>\n                ))}\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascader with Tag Number Limit in React\nDESCRIPTION: This snippet shows how to use the Cascader component with a limit on the number of selections. It uses the max prop to set the limit and onExceed callback to handle exceeding the limit.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Toast } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: 'Impressionism',\n            value: 'impressionism',\n            children: [\n                {\n                    label: 'Visual Arts',\n                    value: 'visualArts',\n                    children: [\n                        {\n                            label: 'Claude Monet',\n                            value: 'Monet',\n                        },\n                        {\n                            label: 'Pierre-Auguste Renoir',\n                            value: 'Renoir',\n                        },\n                        {\n                            label: 'Édouard Manet',\n                            value: 'Manet',\n                        },\n                    ],\n                },\n                {\n                    label: 'Music',\n                    value: 'music',\n                    children: [\n                        {\n                            label: 'Claude Debussy',\n                            value: 'Debussy',\n                        },\n                        {\n                            label: 'Maurice Ravel',\n                            value: 'Ravel',\n                        }\n                    ]\n                }\n            ],\n        }];\n    return (\n        <Cascader\n            style={{ width: 300 }}\n            treeData={treeData}\n            placeholder=\"Please selection\"\n            multiple\n            max={1}\n            onExceed={v=>{\n                Toast.warning('exceed max');\n                console.log(v);\n            }}\n            defaultValue={[\n                ['impressionism', 'visualArts', 'Monet']\n            ]}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Notification Card Usage Comparison in JSX\nDESCRIPTION: A side-by-side comparison of recommended and not recommended NotificationCard implementation, showing proper title and content formatting practices.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<NotificationCard type='info' style={{ width: 350}} title='Task completed' content={<div> 400 tasks succeed and 600 failed <div style={{ color: 'var(--semi-color-primary)', marginTop: 4, fontWeight: 600 }}>Check failed tasks</div></div>} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<NotificationCard type='info' style={{ width: 350}} title='Status editing tasks completed' content={<div> 400 tasks succeed and 600 failed <div style={{ color: 'var(--semi-color-primary)', marginTop: 4, fontWeight: 600 }}>Check</div></div>} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation from CDN in React\nDESCRIPTION: Demonstrates how to use the Lottie component to render an animation from a JSON file hosted on a CDN. The 'params' prop is used to specify the path to the JSON file.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n\n    return (\n        <div>\n            <Lottie params={{ path: jsonURL }} width={'300px'} height={'300'} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ImagePreview Component Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ImagePreview component in a markdown table format. It includes property names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性               | 说明                                                                                                                                               | 类型              | 默认值 | 版本 |\n|-------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|------------------|-------|-----|\n| adaptiveTip       | 适应页面操作按钮提示                                                                                                                                       | string        | \"适应页面\" | |\n| className         | 自定义样式类名                                                                                                                                          | string           | - | |\n| closable          | 是否显示关闭按钮                                                                                                                                         | boolean        | true | |\n| closeOnEsc        | 点击 esc 关闭预览                                                                                                                                      | boolean        | true | |\n| crossOrigin       | 透传给预览图片的原生 img 标签的 crossorigin                                                                                                                   | 'anonymous'｜'use-credentials'| - | |\n| currentIndex      | 受控属性，当前预览图片下标                                                                                                                                    | number               | - | |\n| defaultCurrentIndex | 首次展示图片下标                                                                                                                                         | number             | - | |\n| defaultVisible    | 首次是否开启预览                                                                                                                                         | boolean         | - | |\n| disableDownload   | 禁用下载                                                                                                                                             | boolean        | false | |\n| downloadTip       | 下载操作按钮提示                                                                                                                                         | string         | \"下载\" | |\n| getPopupContainer | 指定父级 DOM，弹层将会渲染至该 DOM 中，自定义需要设置 container `position: relative` 这会改变浮层 DOM 树位置，但不会改变视图渲染位置。                                                       | () => HTMLElement  | () => document.body | |\n| infinite          | 是否无限循环                                                                                                                                           | boolean       | false | |\n| lazyLoad          | 是否开启懒加载                                                                                                                                          | boolean      | true | |\n| lazyLoadMargin    | 传给 options 中的rootMargin 参数，参考 [Intersection Observer API](https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API#interfaces) | string | \"0px 100px 100px 0px\" | |\n| maskClosable      | 点击遮罩是否可关闭                                                                                                                                        | boolean        | true | |\n| nextTip           | 下一步操作按钮提示                                                                                                                                        | string         | \"下一步\" | |\n| originTip         | 原始尺寸操作按钮提示                                                                                                                                       | string        | \"原始尺寸\" | |\n| onChange          | 切换图片触发的事件                                                                                                                                        | (index: number) => void | - | |\n| onClose           | 点击关闭按钮时的回调函数                                                                                                                                     | () => void | - | |\n| onDownload        | 图片下载回调函数                                                                                                                                         | (src: string, index: number) => void | - | |\n| onDownloadError     | 图片下载错误回调函数                                                                                                                                | (src: string) => void | - | v2.54.0 |\n| onRotateLeft      | 旋转图片的回调                                                                                                                                          | (angle: number) => void | - | |\n| onNext            | 向后切换图片的回调                                                                                                                                        | (index: number) => void | - | |\n| onPrev            | 向前切换图片的回调                                                                                                                                        | (index: number) => void | - | |\n| onZoomIn          | 图片放大时的回调函数                                                                                                                                       | (zoom: number) => void | - | |\n| onZoomOut         | 图片缩小时的回调函数                                                                                                                                       | (zoom: number) => void | - | |\n| onVisibleChange   | 切换可见状态触发的回调                                                                                                                                      | (visible: boolean) => void | - | |\n| preLoad           | 是否开启预加载                                                                                                                                          | boolean        | true | |\n| preLoadGap        | 预加载的步长                                                                                                                                           | number         | 2 | |\n| previewTitle      | 自定义预览 title                                                                                                                                      | ReactNode      | - | |\n| previewCls        | 自定义预览样式类名                                                                                                                                       | string           | - | |\n| previewStyle        | 自定义预览样式                                                                                                                                       | object           | - | |\n| prevTip           | 上一步操作按钮提示                                                                                                                                        | string         | \"上一步\" | |\n| renderHeader      | 自定义渲染预览顶部信息                                                                                                                                      | (info: ReactNode) => ReactNode  | - | |\n| renderPreviewMenu | 自定义渲染预览底部菜单信息                                                                                                                                    | (props: MenuProps) => ReactNode;| - | |\n| rotateTip         | 旋转操作按钮提示                                                                                                                                         | string         | \"旋转\" | |\n| showTooltip       | 是否展示底部操作区提示                                                                                                                                      | boolean        | false | |\n| src               | 图片列表信息                                                                                                                                           | string \\| string[] | - | |\n| style             | 自定义样式                                                                                                                                            | CSSProperties    | - | |\n| viewerVisibleDelay | 隐藏预览操作按钮前的无操作时长                                                                                                                                  | number         | 10000 | |\n| visible           | 受控属性，是否预览                                                                                                                                        | boolean         | - | |\n| zIndex            | 预览层层级                                                                                                                                            | number        | 1070 | |\n| zoomInTip         | 放大操作按钮提示                                                                                                                                         | string         | \"放大\" | |\n| zoomOutTip        | 缩小操作按钮提示                                                                                                                                         | string        | \"缩小\" | |\n| zoomStep          | 图片每次缩小/放大比例                                                                                                                                      | number        | 0.1 | |\n| setDownloadName   | 设置图片下载名称                         | (src: string) => string | - | 2.40.0 |\n```\n\n----------------------------------------\n\nTITLE: Importing Collapse Component in React\nDESCRIPTION: Shows how to import the Collapse component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapse } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Mini-sized Steps Implementation\nDESCRIPTION: Demonstration of mini-sized steps using size=\"small\" attribute\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Steps type=\"basic\" size=\"small\" current={1} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: Tooltip Style and ClassName Customization\nDESCRIPTION: This snippet illustrates how to customize the Tooltip's styling by applying custom styles and class names. The `style` prop allows for inline styles to be applied, while the `className` prop allows for CSS classes to be added, enabling developers to override the default styles of the Tooltip component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <div>\n            <Tooltip\n                style={{\n                    maxWidth: 320\n                }}\n                className='another-classname'\n                content={'hi semi semi semi semi semi semi semi'}\n            >\n                <Tag style={{ marginRight: '8px' }}>Custom Style And ClassName</Tag>\n            </Tooltip>\n        </div>\n    );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Designing a Footer with Semi-Design Icons and Layout\nDESCRIPTION: Creates a Footer component with flexbox layout containing a ByteDance logo, copyright information, and support links. The styling uses Semi-Design color variables for consistent theming and responsive spacing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index.md#2025-04-12_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<Footer\n    style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: '20px',\n        color: 'var(--semi-color-text-2)',\n        backgroundColor: 'rgba(var(--semi-grey-0), 1)',\n    }}\n>\n    <span\n        style={{\n            display: 'flex',\n            alignItems: 'center',\n        }}\n    >\n        <IconBytedanceLogo size=\"large\" style={{ marginRight: '8px' }} />\n        <span>Copyright © 2019 ByteDance. All Rights Reserved. </span>\n    </span>\n    <span>\n        <span style={{ marginRight: '24px' }}>平台客服</span>\n        <span>反馈建议</span>\n    </span>\n</Footer>\n```\n\n----------------------------------------\n\nTITLE: TimePicker Method Declarations\nDESCRIPTION: Core methods available through the TimePicker component ref. Includes focus management functions for accessibility.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimePickerMethods {\n    blur(): void;  // Remove focus\n    focus(): void; // Get the focus\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Component with Action Buttons\nDESCRIPTION: Shows how to customize the Empty component with action buttons as children and using NoContent illustrations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty, Button } from '@douyinfe/semi-ui';\nimport { IllustrationNoContent, IllustrationNoContentDark } from '@douyinfe/semi-illustrations';\n\n() => (\n    <Empty\n        image={<IllustrationNoContent style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationNoContentDark style={{ width: 150, height: 150 }} />}\n        title=\"空状态标题\"\n        description=\"开始创建你的第一个仪表盘吧！\"\n    >\n        <div>\n            <Button style={{ padding: '6px 24px', marginRight: 12 }} type=\"primary\">\n                二级按钮\n            </Button>\n            <Button style={{ padding: '6px 24px' }} theme=\"solid\" type=\"primary\">\n                一级按钮\n            </Button>\n        </div>\n    </Empty>\n);\n```\n\n----------------------------------------\n\nTITLE: Entity Interface Definition for Cascader\nDESCRIPTION: TypeScript interface definition for the Entity type used in displayRender function for multiple selection mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Entity {\n    children?: Entity[];         // children list\n    data: CascaderData;              // treedata\n    ind: number;                 // index\n    key: string;                 // key\n    level: number;               // node level\n    parent?: Entity;             // parent data\n    parentKey?: string;          // parent key\n    path: string[];              // key path\n    valuePath: string[];         // value path\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Spacing Sizes with Space Component in React\nDESCRIPTION: Illustrates how to use the 'spacing' prop to set different spacing sizes between elements, including preset values and custom sizes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Tabs type=\"line\">\n        <TabPane tab=\"tight\" itemKey=\"1\">\n            <Space spacing='tight' style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n            </Space>\n        </TabPane>\n        <TabPane tab=\"medium\" itemKey=\"2\">\n            <Space spacing='medium' style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n            </Space>\n        </TabPane>\n        <TabPane tab=\"loose\" itemKey=\"3\">\n            <Space spacing='loose' style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n            </Space>\n        </TabPane>\n        <TabPane tab=\"array\" itemKey=\"4\">\n            <Space spacing={[8, 16]} wrap style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n                <Button theme='solid' type='primary'>按钮</Button>\n            </Space>\n        </TabPane>\n    </Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Tag Shape Variations\nDESCRIPTION: Demonstrates different tag shapes (square and circle) with size combinations\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => (\n    <Space>\n        <Tag size=\"small\" shape='circle' color='amber'> small circle tag </Tag>\n        <Tag size=\"large\" shape='circle' color='violet'> large circle tag </Tag>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Select with Parent-Child Highlighting in Semi Design Tree\nDESCRIPTION: This example demonstrates how to implement a single-select Tree component where selecting a parent node also highlights its child nodes. It uses custom state management and the renderFullLabel prop to achieve this behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Tree } from '@douyinfe/semi-ui';\nimport { IconFixedStroked, IconSectionStroked, IconAbsoluteStroked, IconInnerSectionStroked, IconComponentStroked } from '@douyinfe/semi-icons';\n\n() => {\n    const [selected, setSelected] = useState(new Set());\n    const [selectedThroughParent, setSelectedThroughParent] = useState(new Set());\n    const treeData = [\n        {\n            label: '黑色固定按钮',\n            icon: <IconFixedStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n            key: 'fix-btn-0'\n        },\n        {\n            label: '模块',\n            key: 'module-0',\n            icon: <IconSectionStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n            children: [\n                {\n                    label: '可自由摆放的组件',\n                    icon: <IconAbsoluteStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                    key: 'free-compo-0',\n                },\n                {\n                    label: '分栏容器',\n                    icon: <IconInnerSectionStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                    key: 'split-col-0',\n                    children: [\n                        {\n                            label: '按钮组件',\n                            icon: <IconComponentStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                            key: 'btn-0'\n                        },\n                        {\n                            label: '按钮组件',\n                            icon: <IconComponentStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                            key: 'btn-1'\n                        }\n                    ]\n                },\n            ],\n        },\n        {\n            label: '模块',\n            icon: <IconSectionStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n            key: 'module-1',\n            children: [\n                {\n                    label: '自定义组件',\n                    icon: <IconComponentStroked style={{ marginRight: 8, color: 'var(--semi-color-text-2)' }} />,\n                    key: 'cus-0'\n                }\n            ]\n        }\n    ];\n    const findDescendantKeys = (node) => {\n        let res = [node.key];\n        const findChild = item => {\n            if (!item) return;\n            const { children } = item;\n\n            if (children && children.length) {\n                children.forEach(child => {\n                    res.push(child.key);\n                    findChild(child);\n                });\n            }\n        };\n        findChild(node);\n        return res;\n    };\n    const handleSelect = (key, bool, node) => {\n        setSelected(new Set([key]));\n        const descendantKeys = findDescendantKeys(node);\n        setSelectedThroughParent(new Set(descendantKeys));\n    };\n    const renderLabel = ({\n        className,\n        data,\n        onClick,\n        expandIcon\n    }) => {\n\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: 设置周起始日 - React\nDESCRIPTION: 通过 weekStartsOn 属性设置每周的第一天。0 代表周日，1 代表周一，以此类推。默认为周日。此功能自 v2.18 起提供，对月视图和周视图生效。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { RadioGroup, Calendar, Radio } from '@douyinfe/semi-ui';\n\n() => {\n    const [v, setV] = useState(0);\n    return (\n        <div>\n            <RadioGroup defaultValue={v} aria-label=\"周起始日\" type=\"button\" name=\"demo-radio-group-vertical\" onChange={e => setV(e.target.value)}>\n                <Radio value={0}>周日</Radio>\n                <Radio value={1}>周一</Radio>\n                <Radio value={2}>周二</Radio>\n                <Radio value={3}>周三</Radio>\n                <Radio value={4}>周四</Radio>\n                <Radio value={5}>周五</Radio>\n                <Radio value={6}>周六</Radio>\n            </RadioGroup>\n            <Calendar\n                style={{ marginTop: 20 }}\n                mode=\"month\"\n                weekStartsOn={v}\n            ></Calendar>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Resize Ratio for the Resizable Component\nDESCRIPTION: Shows how to set a resize ratio using the ratio prop. This defines how much the component resizes relative to mouse movement, with a ratio of 2 meaning the resize amount is twice the mouse movement.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n        ratio={2}\n        defaultSize={{\n          width: 200,\n          height: 200,\n        }}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          ratio=2\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Block Buttons\nDESCRIPTION: Shows how to create a block button which has a predefined width independent of its content.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    return (\n        <div>\n            <Button block>block button</Button>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Timeline with Left Mode\nDESCRIPTION: Timeline implementation with time axis on the left side (default mode)\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\n\n() => (\n    <Timeline mode=\"left\">\n        <Timeline.Item time=\"2019-07-14 10:35\" extra=\"节点辅助说明信息\">第一个节点内容</Timeline.Item>\n        <Timeline.Item time=\"2019-06-13 16:17\" extra=\"节点辅助说明信息\">第二个节点内容</Timeline.Item>\n        <Timeline.Item time=\"2019-05-14 18:34\" extra=\"节点辅助说明信息\">第三个节点内容</Timeline.Item>\n        <Timeline.Item time=\"2019-05-09 09:12\" extra=\"节点辅助说明信息\">第四个节点内容</Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Tag Size Variations\nDESCRIPTION: Shows how to implement different tag sizes (small and large) with colors\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => (\n    <Space>\n        <Tag size=\"small\" color='light-blue'> small tag </Tag>\n        <Tag size=\"large\" color='cyan'> large tag </Tag>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Selection in DatePicker with React and Semi Design\nDESCRIPTION: This snippet shows how to disable date selection in a DatePicker component using the 'disabled' prop. It sets a default value and uses the 'dateTime' type.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker disabled type=\"dateTime\" defaultValue={new Date()} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Space Component in React\nDESCRIPTION: Demonstrates the basic usage of the Space component to create spacing between different UI elements like Switch and Buttons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Space, Button, Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <Space>\n        <Switch defaultChecked={true}/>     \n        <Button type=\"secondary\">secondary</Button>\n        <Button type=\"tertiary\">tertiary</Button>\n        <Button type=\"warning\">warning</Button>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Locking Aspect Ratio During Resize\nDESCRIPTION: Demonstrates how to lock the aspect ratio during resizing using the lockAspectRatio prop. Shows two examples: one maintaining the initial ratio and another with a specific 16:9 ratio.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', marginBottom: '10px' }}\n        defaultSize={{\n          width: 400,\n          height: 300,\n        }}\n        lockAspectRatio\n      >\n        <div style={{ marginLeft: '20%' }}>\n          lock\n        </div>\n      </Resizable>\n      <Resizable\n        style={{backgroundColor: 'rgba(var(--semi-grey-1), 1)'}}\n        defaultSize={{\n          width: 200,\n          height: 200 * 9 / 16,\n        }}\n        lockAspectRatio={16 / 9}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          16 / 9\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Specified Current Page in React\nDESCRIPTION: Shows how to set a default current page using the 'defaultCurrentPage' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showTotal defaultCurrentPage={3}></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Quick Jump Pagination - React/JSX\nDESCRIPTION: Shows pagination with quick jump functionality enabled\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showQuickJumper style={{ marginBottom: 12 }}></Pagination>\n        <Pagination total={300} showQuickJumper></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Tag Styles in Semi-Design\nDESCRIPTION: Demonstration of Tag components with different colors (grey, blue, red, green, etc.) and types (default, ghost, solid). The tags are arranged in a row with consistent styling applied through the tagStyle variable.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<div>\n    <Tag color='grey' style={tagStyle}> grey tag </Tag>\n    <Tag color='blue' style={tagStyle}> blue tag </Tag>\n    <Tag color='blue' type='ghost' style={tagStyle}> ghost tag </Tag>\n    <Tag color='blue' type='solid' style={tagStyle}> solid tag </Tag>\n    <Tag color='red' style={tagStyle}> red tag </Tag>\n    <Tag color='green' style={tagStyle}> green tag </Tag>\n    <Tag color='orange' style={tagStyle}> orange tag </Tag>\n    <Tag color='teal' style={tagStyle}> teal tag </Tag>\n    <Tag color='violet' style={tagStyle}> violet tag </Tag>\n    <Tag color='white' style={tagStyle}> white tag </Tag>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in React\nDESCRIPTION: Shows the basic usage of an imported icon component in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconHome } from '@douyinfe/semi-icons';\n\n() => <IconHome />;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Icon Usage in Semi Design 2.0 with React\nDESCRIPTION: This code snippet shows the adjustment of Icon usage from version 1.x to 2.x in the Semi Design framework. In version 1.x, icons were imported using svg-sprite-loader, while version 2.x utilizes separate component imports for better modularity. The code demonstrates both the legacy and new methods for rendering icons in React.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// 1.x default iconLazyload is false\n<Icon type=\"home\" />;\n\n// 1.x when iconLazyload is true\nimport homeSvg from '@ies/semi-icons/semi-icons-home.svg';\n<Icon type={homeSvg.id} />;\n\n// 2.x use the following methods uniformly\nimport { IconHome } from '@douyinfe/semi-icons';\n<IconHome />;\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Highlight Tag\nDESCRIPTION: Shows how to change the HTML element used to wrap highlighted text by setting the component prop. By default, highlighted text is wrapped in a <mark> tag, but this can be customized.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const sourceString = '从 Semi Design 到 Any Design  快速定义你的设计系统，并应用在设计稿和代码中';\n    const searchWords = ['设计系统', 'Semi Design'];\n    \n    return (<h2>\n        <Highlight\n            sourceString={sourceString}\n            searchWords={searchWords}\n            component='strong'\n        />\n    </h2>);\n};\n```\n\n----------------------------------------\n\nTITLE: Flex布局垂直对齐 (React)\nDESCRIPTION: 使用Row的type=\"flex\"和align属性实现Flex布局的垂直对齐。展示了顶部、居中和底部对齐的使用方法。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid grid-flex\">\n        <p>Align Top</p>\n        <Row type=\"flex\" justify=\"center\" align=\"top\">\n            <Col span={4}><div className=\"col-content\" value={100}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={50}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={120}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={80}>col-4</div></Col>\n        </Row>\n\n        <p>Align Center</p>\n        <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n            <Col span={4}><div className=\"col-content\" value={100}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={50}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={120}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={80}>col-4</div></Col>\n        </Row>\n\n        <p>Align Bottom</p>\n        <Row type=\"flex\" justify=\"space-between\" align=\"bottom\">\n            <Col span={4}><div className=\"col-content\" value={100}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={50}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={120}>col-4</div></Col>\n            <Col span={4}><div className=\"col-content\" value={80}>col-4</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Container-Rendered SideSheet Implementation\nDESCRIPTION: Demonstrates SideSheet rendering within a specific container using getPopupContainer prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const [value, setValue] = useState('');\n    const getContainer = () => {\n        return document.querySelector('.sidesheet-container');\n    };\n    return (\n        <div\n            style={{\n                height: 320,\n                overflow: 'hidden',\n                position: 'relative',\n                border: '1px solid var(--semi-color-border)',\n                borderRadius: 2,\n                padding: 24,\n                textAlign: 'center',\n                background: 'var(--semi-color-fill-0)',\n            }}\n            className=\"sidesheet-container\"\n        >\n            <span>Render in this</span>\n            <br />\n            <br />\n            <Button onClick={() => setVisible(true)}>Open SideSheet</Button>\n            <SideSheet\n                title=\"SideSheet\"\n                visible={visible}\n                onCancel={() => setVisible(false)}\n                width={220}\n                getPopupContainer={getContainer}\n            >\n                <p>This is the content of a basic sidesheet.</p>\n                <p>Here is more content...</p>\n            </SideSheet>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Checked Relationships in Cascader (React/JSX)\nDESCRIPTION: Demonstrates the use of the checkRelation prop in a Cascader component to define the selection relationship between nodes. This example sets it to 'unRelated', allowing independent selection of parent and child nodes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader } from '@douyinfe/semi-ui';\n() => {\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    \n    return (\n        <Cascader\n            multiple\n            defaultValue={[\n                ['Asia'],\n                ['Asia', 'China', 'Beijing']\n            ]}\n            checkRelation='unRelated'\n            style={{ width: 300 }}\n            treeData={treeData}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal Layout Mode in Descriptions\nDESCRIPTION: Demonstrates horizontal layout mode with column specification and spanning capabilities.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions, Space, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    const data = [\n        { key: '抖音号', value: 'SemiDesign' },\n        { key: '主播类型', value: '自由主播' },\n        { key: '安全等级', value: '3级' },\n        { key: '垂类标签', value: <Tag size=\"small\" shape='circle' color='violet'>编程</Tag>},\n        { key: '作品数量', value: '88888888' },\n        { key: '认证状态', value: '这是一个很长很长很长很长很长很长很长很长很长的值', span: 3 },\n        { key: '上次直播时间', value: '2024-05-01 12:00:00', span: 3 },\n    ];\n    return (\n        <> \n            <Descriptions layout='horizontal' align='plain' data={data} column={5} />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component in React\nDESCRIPTION: Shows how to import the Layout component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigProvider in React\nDESCRIPTION: Shows how to import the ConfigProvider component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Using Toast with React Context\nDESCRIPTION: Demonstrates how to use Toast.useToast to create a contextHolder that can access React context.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nconst ReachableContext = React.createContext();\n\nfunction Demo(props = {}) {\n    const [toast, contextHolder] = Toast.useToast();\n    const config = {\n        duration: 0,\n        title: 'This is a success message',\n        content: <ReachableContext.Consumer>{name => `ReachableContext: ${name}`}</ReachableContext.Consumer>,\n    };\n\n    return (\n        <ReachableContext.Provider value=\"Light\">\n            <div>\n                <Button\n                    onClick={() => {\n                        toast.success(config);\n                    }}\n                >\n                    Hook Toast\n                </Button>\n            </div>\n            {contextHolder}\n        </ReachableContext.Provider>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: 基础栅格布局 (React)\nDESCRIPTION: 使用Row和Col组件创建基本的栅格系统。展示了24列、12列、8列和6列的布局示例。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid\">\n        <Row>\n            <Col span={24}><div className=\"col-content\">col-24</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={12}><div className=\"col-content\">col-12</div></Col>\n            <Col span={12}><div className=\"col-content\">col-12</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n            <Col span={6}><div className=\"col-content\">col-6</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Banner Borders\nDESCRIPTION: CSS styles for customizing the border colors of different banner types in non-full screen mode. Each type has a specific border color based on the component's color variables.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index.md#2025-04-12_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.components-banner-demo {\n    .semi-banner-info.semi-banner-bordered {\n        border: 1px solid var(--semi-color-primary-disabled);\n    }\n    .semi-banner-warning.semi-banner-bordered {\n        border: 1px solid var(--semi-color-warning-light-active);\n    }\n    .semi-banner-danger.semi-banner-bordered {\n        border: 1px solid var(--semi-color-danger-light-active);\n    }\n    .semi-banner-success.semi-banner-bordered {\n        border: 1px solid var(--semi-color-success-light-active);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimum Visible Items Implementation\nDESCRIPTION: Demonstrates how to set a minimum number of visible items in collapse mode using the minVisibleItems prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.length ? <Tag style={{ flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }}>+{items.length}</Tag> : null;\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <Tag color=\"blue\" key={item.key} style={{ marginRight: 8, flex: '0 0 auto' }}>\n                {item.icon}\n                {item.key}\n            </Tag>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList\n                    items={items}\n                    minVisibleItems={3}\n                    overflowRenderer={renderOverflow}\n                    visibleItemRenderer={renderItem}\n                />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Semi Design\nDESCRIPTION: Configuration changes required in next.config.js to use Semi Design in a Next.js project. It shows how to add Semi-related packages to transpilePackages.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst nextConfig = {\n+ transpilePackages: ['@douyinfe/semi-ui', '@douyinfe/semi-icons', '@douyinfe/semi-illustrations'],\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Word-Break Styles for Typography Tooltips with SCSS\nDESCRIPTION: CSS styling for Typography component tooltips to control word wrapping behavior using word-break properties for better text display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n// config word-break\n\n.components-typography-demo {\n    word-break: break-word;\n    // or\n    word-break: break-all;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Character Length Calculation with Semi-Design Components\nDESCRIPTION: Example demonstrating custom character length calculation using GraphemeSplitter for emoji support in Input and TextArea components. Shows implementation with maxLength, minLength, and maxCount constraints while handling emoji characters correctly.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input, Typography, Form, Button, TextArea } from '@douyinfe/semi-ui';\nimport GraphemeSplitter from 'grapheme-splitter';\n\n() => {\n    const [value, setValue] = useState();\n    function getValueLength(str) {\n        if (typeof str === 'string') {\n            const splitter = new GraphemeSplitter();\n            return splitter.countGraphemes(str);\n        } else {\n            return 0;\n        }\n    }\n\n    function getTextAreaStrLength(str) {\n        const filteredStr = str.replace(/\\s/g, '');\n        return filteredStr.length;\n    }\n\n    return (\n        <div>\n            <h4>maxLength=10</h4>\n            <div>\n                <Typography.Text>Please input following emoji</Typography.Text>\n                <div><Typography.Text copyable>💖</Typography.Text></div>\n                <div><Typography.Text copyable>👨‍👩‍👧‍👦</Typography.Text></div>\n            </div>\n            <Input maxLength={10} getValueLength={getValueLength} onChange={setValue} style={{ width: 200, marginTop: 12, marginBottom: 12 }} />\n            {\n                value && (\n                    <div>\n                        <div><Typography.Text type=\"tertiary\">{`getValueLength=${getValueLength(value)}`}</Typography.Text></div>\n                        <div><Typography.Text type=\"tertiary\">{`length=${value.length}`}</Typography.Text></div>\n                    </div>\n                )\n            }\n            <br/><br/>\n            <h4>Form.Input + minLength=4</h4>\n            <Form layout=\"horizontal\">\n                <Form.Input noLabel field=\"username\" minLength={4} getValueLength={getValueLength} style={{ width: 200 }} />\n                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n            </Form>\n            <h4>maxCount=10</h4>\n            <TextArea defaultValue=\"semi design\" rows={2} maxCount={10} getValueLength={getTextAreaStrLength} style={{ width: 200 }} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Outline Theme Buttons\nDESCRIPTION: Demonstrates how to create buttons with border mode using the outline theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Button } from '@douyinfe/semi-ui';\n\nfunction ButtonDemo() {\n    const themes = [['outline', 'outline']];\n    const types = [['primary', 'primary'], ['secondary', 'secondary'], ['tertiary', 'tertiary'], ['warning', 'warning'], ['danger', 'danger']];\n\n    return (\n        <div>{\n            themes.map((theme, idxTheme) => (\n                <div key={idxTheme}>\n                    <ul style={{ listStyle: 'none', display: 'flex', margin: 0, padding: 0 }}>\n                        {types.map((type, idxType) => (\n                            <li key={'' + idxTheme + idxType} style={{ margin: 10 }}>\n                                <Button\n                                    theme={theme[0]}\n                                    type={type[0]}\n                                >\n                                    {theme[1]} {type[1]}\n                                </Button>\n                            </li>)\n                        )}\n                    </ul>\n                </div>))\n        }\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Input Component in React\nDESCRIPTION: Shows how to create a disabled Input component using the disabled attribute.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Input defaultValue='enabled input'></Input>\n        <br/>\n        <br/>\n        <Input disabled defaultValue='disabled input'></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: JsonViewer with Format Options\nDESCRIPTION: Shows how to use formatting options in JsonViewer including tab size, spacing, and line ending configuration.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { JsonViewer, Button } from '@douyinfe/semi-ui';\nconst data = `{\n  \"name\": \"Semi\",\n  \"version\": \"0.0.0\"\n}`;\nfunction FormatJsonComponent() {\n    const jsonviewerRef = useRef();\n    return (\n        <div>\n            <Button onClick={() => console.log(jsonviewerRef.current.format())}>格式化</Button>\n            <div style={{ marginBottom: 16, marginTop: 16 }}>\n                <JsonViewer\n                    ref={jsonviewerRef}\n                    height={100}\n                    width={700}\n                    value={data}\n                    options={{ formatOptions: { tabSize: 4, insertSpaces: true, eol: '\\n' } }}\n                />\n            </div>\n        </div>\n    );\n}\n\nrender(FormatJsonComponent);\n```\n\n----------------------------------------\n\nTITLE: Using CodeHighlight for CSS Syntax Highlighting\nDESCRIPTION: Shows how to use the CodeHighlight component to highlight CSS code. It demonstrates passing CSS code as a string to the component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n\n    return <CodeHighlight\n        language={\"css\"} \n        code={\n            `.grid {\n    .semi-row,\n    .semi-row-flex {\n        text-align: center;\n        .semi-col {\n            min-height: 30px;\n            line-height: 30px;\n            background: var(--semi-color-primary-light-default);\n            outline: 1px solid var(--semi-color-primary-light-active);\n        }\n    }\n}\n`\n    }/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Selected Panel Props Interface\nDESCRIPTION: TypeScript interface defining the props for the selected panel, including length, clear functionality, and item management\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectedPanelProps {\n   length: number;\n   onClear: () => void;\n   onRemove: (item: Item) => void;\n   onSortEnd: (( oldIndex, newIndex)) => void;\n   selectedData: Array<Item>;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled AutoComplete in React\nDESCRIPTION: Shows how to create a disabled AutoComplete component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <AutoComplete data={[1, 2, 3, 4]} placeholder={'Disable drop-down menu'} disabled style={{ width: 200 }}></AutoComplete>\n);\n```\n\n----------------------------------------\n\nTITLE: 栅格列偏移 (React)\nDESCRIPTION: 使用Col的offset属性设置列的偏移量。展示了不同偏移值的使用方法。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid\">\n        <Row>\n            <Col span={8}><div className=\"col-content\">col-8</div></Col>\n            <Col span={8} offset={8}>\n                <div className=\"col-content\">col-8</div>\n            </Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={6} offset={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n            <Col span={6} offset={6}>\n                <div className=\"col-content\">col-6</div>\n            </Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col span={12} offset={6}>\n                <div className=\"col-content\">col-12</div>\n            </Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: OverflowList with Minimum Visible Items\nDESCRIPTION: Demonstrates OverflowList configuration with minimum visible items that won't be collapsed, regardless of container width.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { OverflowList, Tag, Slider } from '@douyinfe/semi-ui';\nimport { IconAlarm, IconBookmark, IconCamera, IconDuration, IconEdit, IconFolder } from '@douyinfe/semi-icons';\n\n() => {\n    const [width, setWidth] = useState(100);\n    const renderOverflow = items => {\n        return items.length ? <Tag style={{ flex: '0 0 auto', fontVariantNumeric: 'tabular-nums' }}>+{items.length}</Tag> : null;\n    };\n    const renderItem = (item, ind) => {\n        return (\n            <Tag color=\"blue\" key={item.key} style={{ marginRight: 8, flex: '0 0 auto' }}>\n                {item.icon}\n                {item.key}\n            </Tag>\n        );\n    };\n\n    const items = [\n        { icon: <IconAlarm style={{ marginRight: 4 }} />, key: 'alarm' },\n        { icon: <IconBookmark style={{ marginRight: 4 }} />, key: 'bookmark' },\n        { icon: <IconCamera style={{ marginRight: 4 }} />, key: 'camera' },\n        { icon: <IconDuration style={{ marginRight: 4 }} />, key: 'duration' },\n        { icon: <IconEdit style={{ marginRight: 4 }} />, key: 'edit' },\n        { icon: <IconFolder style={{ marginRight: 4 }} />, key: 'folder' },\n    ];\n\n    return (\n        <div>\n            <Slider step={1} value={width} onChange={value => setWidth(value)} />\n            <br />\n            <br />\n            <div style={{ width: `${width}%` }}>\n                <OverflowList\n                    items={items}\n                    minVisibleItems={3}\n                    overflowRenderer={renderOverflow}\n                    visibleItemRenderer={renderItem}\n                />\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: JSX Syntax Usage in Descriptions\nDESCRIPTION: Demonstrates using JSX syntax with Description.Item components instead of data prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Descriptions } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Descriptions>\n            <Descriptions.Item itemKey=\"实际用户数量\">1,480,000</Descriptions.Item>\n            <Descriptions.Item itemKey=\"7天留存\">98%</Descriptions.Item>\n            <Descriptions.Item itemKey=\"安全等级\">3级</Descriptions.Item>\n            <Descriptions.Item itemKey=\"垂类标签\">电商</Descriptions.Item>\n            <Descriptions.Item itemKey=\"认证状态\">未认证</Descriptions.Item>\n        </Descriptions>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Tree Node Rendering in Semi Design\nDESCRIPTION: This snippet defines the TypeScript type for the renderFullLabel prop, which allows custom rendering of tree nodes. It includes properties for node data, level, styling, expand/collapse functionality, and various interaction callbacks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype RenderFullLabelProps = {\n    /* 节点数据 */\n    data: BasicTreeNodeData;\n    /* 层级 */\n    level: number;\n    /* 虚拟化情况下，该 style 必须给到 DOM 节点上*/\n    style: any;\n     /* 样式类名，包括内置样式，如缩进、展开按钮、过滤器、禁用、选择等。 */\n    className: string;\n    /* 展开按钮 */\n    expandIcon: any;\n    /* 选中状态 */\n    checkStatus: {\n        /* 是否选中 */\n        checked: boolean;\n        /* 是否半选 */\n        halfChecked: boolean\n    };\n    /* 展开状态 */\n    expandStatus: {\n        /* 是否展开 */\n        expanded: boolean;\n        /* 是否加载中 */\n        loading: boolean\n    };\n    /* 该节点是否符合筛选条件 */\n    filtered: boolean | undefined;\n    /* 当前搜索框输入值 */\n    searchWord: string | undefined;\n    /* 点击回调 */\n    onClick: (e: MouseEvent) => void;\n    /* 多选点击回调 */\n    onCheck: (e: MouseEvent) => void;\n    /* 右键点击回调 */\n    onContextMenu: (e: MouseEvent) => void; \n    /* 二次点击回调 */\n    onDoubleClick: (e: MouseEvent) => void;\n    /* 展开回调 */\n    onExpand: (e: MouseEvent) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DatePicker Component in React\nDESCRIPTION: Shows how to import the DatePicker component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DatePicker } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Design 2.0 with npm\nDESCRIPTION: Command to install Semi Design version 2.0 using npm package manager.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @douyinfe/semi-ui@2.0.0\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Loading in TreeSelect\nDESCRIPTION: Shows how to implement asynchronous data loading in TreeSelect using loadData prop. Loads child nodes on parent node expansion with a simulated delay.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const initialData = [\n        {\n            label: 'Expand to load',\n            value: '0',\n            key: '0',\n        },\n        {\n            label: 'Expand to load',\n            value: '1',\n            key: '1',\n        },\n        {\n            label: 'Leaf Node',\n            value: '2',\n            key: '2',\n            isLeaf: true,\n        },\n    ];\n    const [treeData, setTreeData] = useState(initialData);\n\n    function updateTreeData(list, key, children) {\n        return list.map(node => {\n            if (node.key === key) {\n                return { ...node, children };\n            }\n            if (node.children) {\n                return { ...node, children: updateTreeData(node.children, key, children) };\n            }\n            return node;\n        });\n    }\n\n    function onLoadData({ key, children }) {\n        return new Promise(resolve => {\n            if (children) {\n                resolve();\n                return;\n            }\n            setTimeout(() => {\n                setTreeData(origin =>\n                    updateTreeData(origin, key, [\n                        {\n                            label: 'Child Node',\n                            key: `${key}-0`,\n                        },\n                        {\n                            label: 'Child Node',\n                            key: `${key}-1`,\n                        },\n                    ]),\n                );\n                resolve();\n            }, 1000);\n        });\n    }\n    return (\n        <TreeSelect\n            loadData={onLoadData}\n            treeData={treeData}\n            style={{ width: 300 }}\n            placeholder=\"Please select\"\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Dropdown Trigger Methods\nDESCRIPTION: Shows different trigger methods for dropdowns including hover, focus, click, and context menu triggers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Tag, Input, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <Dropdown\n                trigger={'hover'}\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Tag>Hover me</Tag>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                trigger={'focus'}\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu tabIndex={-1}>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <div\n                    style={{\n                        border: '1px solid var(--semi-color-border)',\n                        borderRadius: 4,\n                        height: 36,\n                        width: 220,\n                    }}\n                >\n                    Please use Tab to focus this div\n                </div>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                trigger={'click'}\n                position={'bottomLeft'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Button>Click me</Button>\n            </Dropdown>\n            <br />\n            <br />\n            <Dropdown\n                trigger={'contextMenu'}\n                position={'bottomRight'}\n                render={\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Menu Item 1</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 2</Dropdown.Item>\n                        <Dropdown.Item>Menu Item 3</Dropdown.Item>\n                    </Dropdown.Menu>\n                }\n            >\n                <Button theme=\"solid\" type=\"secondary\" style={{ marginBottom: 20 }}>\n                    Right click (ContextMenu)\n                </Button>\n            </Dropdown>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Themed Notifications in React\nDESCRIPTION: Shows how to use different themes for notifications using the Semi-Design Notification component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        title: 'Hi, Bytedance',\n        content: 'Hi, Bytedance dance dance',\n        duration: 3,\n        theme: 'light',\n    };\n\n    return (\n        <>\n            <Button onClick={() => Notification.info(opts)}>Info</Button>\n            <br />\n            <br />\n            <Button onClick={() => Notification.success(opts)}>Success</Button>\n            <br />\n            <br />\n            <Button type=\"warning\" onClick={() => Notification.warning(opts)}>\n                Warning\n            </Button>\n            <br />\n            <br />\n            <Button type=\"danger\" onClick={() => Notification.error(opts)}>\n                Error\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Avatar and Title Rendering in React Chat Component\nDESCRIPTION: Example implementation showing how to customize avatar and title rendering in a Semi Design Chat component using render props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat, Avatar, Tag } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: [\n            {\n                type: 'text',\n                text: 'What\\'s in this picture?'\n            },\n            {\n                type: 'image_url',\n                image_url: {\n                    url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/edit-bag.jpeg'\n                }\n            }\n        ], \n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: 'The picture shows a yellow backpack decorated with cartoon images'\n    },\n\n];\n\nconst roleInfo = {\n    user:  {\n        name: 'User',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/docs-icon.png'\n    },\n    assistant: {\n        name: 'Assistant',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    },\n    system: {\n        name: 'System',\n        avatar: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/logo.png'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icons in Collapse\nDESCRIPTION: Demonstrates how to customize expand and collapse icons using IconPlus and IconMinus components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse } from '@douyinfe/semi-ui';\nimport { IconPlus, IconMinus } from '@douyinfe/semi-icons';\n\n() => (\n    <Collapse expandIcon={<IconPlus />} collapseIcon={<IconMinus />}>\n        <Collapse.Panel header=\"This is panel header 1\" itemKey=\"1\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 2\" itemKey=\"2\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 3\" itemKey=\"3\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: JsonViewer with Custom Line Height\nDESCRIPTION: Shows how to configure custom line heights in JsonViewer using the options.lineHeight parameter.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { JsonViewer, Space } from '@douyinfe/semi-ui';\nconst data = `{\n    \"name\": \"Semi\",\n    \"version\": \"0.0.0\"\n}`;\nclass SimpleJsonViewerWithLineHeight extends React.Component {\n    render() {\n        return (\n            <div>\n                <div style={{ marginBottom: 12, overflow: 'hidden' }}>\n                    <JsonViewer height={100} width={700} value={data} options={{ lineHeight: 20 }} />\n                </div>\n                <div style={{ marginBottom: 12, overflow: 'hidden' }}>\n                    <JsonViewer height={120} width={700} value={data} options={{ lineHeight: 24 }} />\n                </div>\n                <div style={{ marginBottom: 12, overflow: 'hidden' }}>\n                    <JsonViewer height={120} width={700} value={data} options={{ lineHeight: 26 }} />\n                </div>\n            </div>\n        );\n    }\n}\n\nrender(SimpleJsonViewerWithLineHeight);\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in Semi Design\nDESCRIPTION: Shows how to import the Card component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Component in React\nDESCRIPTION: Shows how to import the Dropdown component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dropdown } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Menu Position in AutoComplete\nDESCRIPTION: 通过position属性控制AutoComplete下拉菜单的显示位置，可以选择上方、右侧等多种位置选项。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => {\n    const [data, setData] = useState([]);\n\n    const change = (input) => {\n        let newData = ['gmail.com', '163.com', 'qq.com'].map(domain => `${input}@${domain}`);\n        if (!input) {\n            newData = [];\n        }\n        setData(newData);\n    };\n    return (\n        <div>\n            <AutoComplete\n                data={data}\n                position=\"top\"\n                onSearch={change}\n                placeholder=\"选项菜单在上方显示\"\n                style={{ width: 200, margin: 10 }}\n            ></AutoComplete>\n            <AutoComplete\n                data={data}\n                position=\"rightTop\"\n                onSearch={change}\n                placeholder=\"选项菜单在右侧显示\"\n                style={{ width: 200, margin: 10 }}\n            ></AutoComplete>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Component\nDESCRIPTION: Example of implementing a controlled Input component using value and onChange props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\nclass InputDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            value: 'controlInput',\n            value2: 'input'\n        };\n        this.onChange = this.onChange.bind(this);\n    }\n    onChange(value, e) {\n        console.log(value);\n        this.setState({ value });\n    }\n    render() {\n        return (\n            <>\n                <Input\n                    value={this.state.value}\n                    onChange={this.onChange}>\n                </Input>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Feedback Components in Semi-Design\nDESCRIPTION: Demonstration of Notification feedback components with different types (success, info, warning, error) triggered by Button clicks. Additional examples show how to customize the Notification with icons.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<Button type='primary' onClick={() => Notification.success(opts)} style={buttonStyle}>Notification of success information</Button>\n<Button onClick={() => Notification.info(opts)} style={buttonStyle}>Notification of prompt information</Button>\n<Button type=\"warning\" onClick={() => Notification.warning(opts)} style={buttonStyle}>Notification of warning information</Button>\n<Button type=\"danger\" onClick={() => Notification.error(opts)} style={buttonStyle}>Notification of failure information</Button>\n<Button\n    style={buttonStyle}\n    ghost={false}\n    icon={<IconVigoLogo />}\n    onClick={() => Notification.info({ ...opts, icon: <IconVigoLogo /> })}\n/>\n<Button\n    style={buttonStyle}\n    ghost={false}\n    icon={<IconVigoLogo />}\n    onClick={() => Notification.info({ ...opts, icon: <IconVigoLogo style={{ color: 'pink' }} /> })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic TimePicker Usage\nDESCRIPTION: Simple implementation of TimePicker component with default settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component in React\nDESCRIPTION: Shows how to import the Tabs and TabPane components from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Replacing CSS Prefix with rspack Plugin\nDESCRIPTION: This JavaScript snippet shows how to configure the rspack plugin to replace the default CSS prefix used by Semi Design. Set the prefixCls option to your desired string.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-rspack/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\nconst {SemiRspackPlugin} = require('@douyinfe/semi-rspack-plugin');\n\nmodule.exports = {\n    // ...\n    plugins: [\n        new SemiRspackPlugin({\n            prefixCls: 'custom'\n        })\n    ]\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables for Button Colors\nDESCRIPTION: Shows how to use CSS variables for button theme colors in text elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\n\nfunction ButtonDemo() {\n    const types = [['primary', 'primary'], ['secondary', 'secondary'], ['tertiary', 'tertiary'], ['warning', 'warning'], ['danger', 'danger']];\n\n    return (\n        <article>\n            {types.map((type, index) => (\n                <strong key={index} style={{ color: `var(--semi-color-${Array.isArray(type) ? type[0] : type})`, marginRight: 10 }}>{Array.isArray(type) ? type[1]: type}</strong>\n            ))}\n        </article>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Size Interface Definition\nDESCRIPTION: Defines the Size interface for the Resizable component, specifying width and height properties that can be either string or number values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Size {\n    width: string | number;\n    height: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CodeHighlight for Vala Language\nDESCRIPTION: Shows how to use CodeHighlight for the Vala programming language after importing its Prismjs component. It includes a sample Vala code snippet.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\nimport \"prismjs/components/prism-vala.js\";\n\nfunction Demo() {\n    return <CodeHighlight\n        language={\"vala\"} \n        code={\n            `public class ExampleApp : Gtk.Application {\n    public ExampleApp () {\n        Object (application_id: \"com.example.App\");\n    }\n\n    public override void activate () {\n        var win = new Gtk.ApplicationWindow (this);\n\n        var btn = new Gtk.Button.with_label (\"Hello World\");\n        btn.clicked.connect (win.close);\n\n        win.child = btn;\n        win.present ();\n    }\n\n    public static int main (string[] args) {\n        var app = new ExampleApp ();\n        return app.run (args);\n    }\n}\n`\n    }/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Box Interface Types in TypeScript\nDESCRIPTION: TypeScript interface definitions for chat box rendering configuration including props for title, avatar, content, and action customization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderTitleProps {\n    message?: Message;\n    role?: Metadata;\n    defaultTitle?: ReactNode\n}\n\nexport interface RenderAvatarProps {\n    message?: Message;\n    role?: Metadata, \n    defaultAvatar?: ReactNode\n}\n\nexport interface RenderContentProps {\n    message?: Message;\n    role?: Metadata;\n    defaultContent?: ReactNode | ReactNode[]; \n    className?: string;\n}\n\nexport interface DefaultActionNodeObj {\n    copyNode: ReactNode;\n    likeNode: ReactNode;\n    dislikeNode: ReactNode;\n    resetNode: ReactNode;\n    deleteNode: ReactNode;\n}\n\nexport interface RenderActionProps {\n    message?: Message;\n    defaultActions?: ReactNode | ReactNode[];\n    className: string;\n    defaultActionsObj?: DefaultActionNodeObj;\n};\n\nexport interface FullChatBoxNodes {\n    avatar?: ReactNode;\n    title?: ReactNode; \n    content?: ReactNode; \n    action?: ReactNode\n}\n\nexport interface RenderFullChatBoxProps {\n    message?: Message;\n    role?: Metadata;\n    defaultNodes?: FullChatBoxNodes;\n    className: string;\n}\n\nexport interface ChatBoxRenderConfig {\n    renderChatBoxTitle?: (props: RenderTitleProps) => ReactNode;\n    renderChatBoxAvatar?: (props: RenderAvatarProps) => ReactNode;\n    renderChatBoxContent?: (props: RenderContentProps) => ReactNode;\n    renderChatBoxAction?: (props: RenderActionProps) => ReactNode;\n    renderFullChatBox?: (props: RenderFullChatBoxProps) => ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Infinite Scroll for TimePicker in React\nDESCRIPTION: Shows how to configure the TimePicker for infinite scrolling by setting scrollItemProps.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker scrollItemProps={{ mode: \"wheel\", cycled: true }}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: 基本使用Checkbox\nDESCRIPTION: 展示了Checkbox的基本用法，不设置选中状态，通过onChange事件可以捕获选择变化。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <Checkbox onChange={e => console.log(e)} aria-label=\"Checkbox 示例\">Semi Design</Checkbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Mini Pagination - React/JSX\nDESCRIPTION: Demonstrates mini-sized pagination component\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <Pagination total={90} size=\"small\"></Pagination>\n);\n```\n\n----------------------------------------\n\nTITLE: Lottie Configuration Parameters\nDESCRIPTION: Common configuration parameters for the Lottie component including container, renderer, loop, and autoplay settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"container\": \"element\",\n  \"renderer\": \"svg\",\n  \"loop\": true,\n  \"autoplay\": true,\n  \"path\": \"data.json\",\n  \"animationData\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Selection in React with Semi-Design DatePicker\nDESCRIPTION: This example shows how to disable the DatePicker component, preventing user interaction while still displaying a default value.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return <DatePicker disabled type=\"dateTime\" defaultValue={new Date()} />;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Route Object Properties\nDESCRIPTION: Specifications for Route objects used in the Breadcrumb component, defining link destinations and display properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions | type | Default | version |\n| ---------- | ----------------- | ------ | --------- | ------- |\n| href | Link destinations | string | - | 0.27.0 |\n| icon | Displayed icon | ReactNode | - | |\n| name | Routing name | string | - | |\n| path | Routing path | string | - | |\n```\n\n----------------------------------------\n\nTITLE: Collapsible with Custom Collapse Height\nDESCRIPTION: Shows implementation of Collapsible with custom collapse height and gradient mask effect.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Collapsible, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [isOpen, setOpen] = useState(false);\n    const maskStyle = isOpen\n        ? {}\n        : {\n            WebkitMaskImage:\n                    'linear-gradient(to bottom, black 0%, rgba(0, 0, 0, 1) 60%, rgba(0, 0, 0, 0.2) 80%, transparent 100%)'\n        };\n    const collapsed = (\n        <ul>\n            <li>\n                <p>Semi Design 以内容优先进行设计。</p>\n            </li>\n            <li>\n                <p>更容易地自定义主题。</p>\n            </li>\n            <li>\n                <p>适用国际化场景。</p>\n            </li>\n            <li>\n                <p>效率场景加入人性化关怀。</p>\n            </li>\n        </ul>\n    );\n    const toggle = () => {\n        setOpen(!isOpen);\n    };\n    const linkStyle = {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        textAlign: 'center',\n        bottom: -10,\n        fontWeight: 700,\n        cursor: 'pointer'\n    };\n    return (\n        <>\n            <Button onClick={toggle}>Toggle</Button>\n            <div style={{ position: 'relative' }}>\n                <Collapsible isOpen={isOpen} collapseHeight={60} style={{ ...maskStyle }}>\n                    {collapsed}\n                </Collapsible>\n                {isOpen ? null : (\n                    <a onClick={toggle} style={{ ...linkStyle }}>\n                        + Show More\n                    </a>\n                )}\n            </div>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Delayed Closing Notification in React\nDESCRIPTION: Demonstrates how to control the duration a notification stays visible by setting the duration property. In this example, the notification will close after 10 seconds instead of the default 3 seconds.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n    };\n\n    return (\n        <Button onClick={() => Notification.info(opts)}>\n            Close After 10s\n        </Button>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Image and Caption Skeleton\nDESCRIPTION: Shows how to combine Image and Title skeletons to create a placeholder for an image with caption.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton } from '@douyinfe/semi-ui';\n\n() => {\n    const placeholder = (\n        <div>\n            <Skeleton.Image style={{ width: 200, height: 150 }} />\n            <Skeleton.Title style={{ width: 120, marginTop: 10 }} />\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <img\n                src=\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/avatarDemo.jpeg\"\n                height=\"150\"\n                alt=\"avatar\"\n            />\n            <h4>Semi UI</h4>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Usage in React\nDESCRIPTION: Demonstrates the basic usage of the Breadcrumb component with multiple items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb>\n        <Breadcrumb.Item>Semi-ui</Breadcrumb.Item>\n        <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n        <Breadcrumb.Item>Default</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Component in React\nDESCRIPTION: Shows how to import the Modal component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/modal/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigProvider in Semi Design\nDESCRIPTION: Shows how to import the ConfigProvider component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConfigProvider } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 基本使用 DatePicker - React\nDESCRIPTION: 展示 DatePicker 的基本用法，包括选择日期并在控制台输出选择的日期字符串。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker onChange={(date, dateString) => console.log(dateString)} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Radar Chart Specification with VChart\nDESCRIPTION: This code defines the configuration for a basic radar chart using VChart. It specifies the chart type as 'radar', provides data with key-value pairs for different categories, and configures the axes, points, and area properties. The configuration includes settings for labels, grid lines, and domain lines to customize the appearance of the radar chart.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst basicSpec = {\n  type: 'radar',\n  data: [\n    {\n      id: 'radarData',\n      values: [\n        { key: 'Strength', value: 5 },\n        { key: 'Speed', value: 5 },\n        { key: 'Shooting', value: 3 },\n        { key: 'Endurance', value: 5 },\n        { key: 'Precision', value: 5 },\n        { key: 'Growth', value: 5 }\n      ]\n    }\n  ],\n  categoryField: 'key',\n  valueField: 'value',\n  point: { visible: true },\n  area: { visible: true },\n  axes: [\n    {\n      orient: 'radius', // radius axis\n      zIndex: 100,\n      min: 0,\n      max: 8,\n      domainLine: { visible: false },\n      label: {\n        visible: true,\n        space: 0,\n        style: { textAlign: 'center', stroke: '#fff', lineWidth: 4 }\n      },\n      grid: { smooth: false },\n    },\n    {\n      orient: 'angle', // angle axis\n      zIndex: 50,\n      tick: { visible: false },\n      domainLine: { visible: false },\n      label: { space: 20 },\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Flex Layout in Semi-Design Grid\nDESCRIPTION: Shows how to use flex layout in the grid system. The 'type' and 'justify' props on Row components are used to control the alignment and distribution of columns within a row.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Col, Row } from '@douyinfe/semi-ui';\n\n() => (\n    <div className=\"grid\">\n        <p>sub-element align left</p>\n        <Row type=\"flex\" justify=\"start\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element align center</p>\n        <Row type=\"flex\" justify=\"center\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element align right</p>\n        <Row type=\"flex\" justify=\"end\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element monospaced arrangement</p>\n        <Row type=\"flex\" justify=\"space-between\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n\n        <p>sub-element align full</p>\n        <Row type=\"flex\" justify=\"space-around\">\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={4}><div className=\"col-content\">col-4</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Banner Borders\nDESCRIPTION: Custom CSS styling for banner borders with different types. Defines border colors for info, warning, danger, and success banner variants when using the bordered prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.components-banner-demo {\n    .semi-banner-info.semi-banner-bordered {\n        border: 1px solid var(--semi-color-primary-disabled);\n    }\n    .semi-banner-warning.semi-banner-bordered {\n        border: 1px solid var(--semi-color-warning-light-active);\n    }\n    .semi-banner-danger.semi-banner-bordered {\n        border: 1px solid var(--semi-color-danger-light-active);\n    }\n    .semi-banner-success.semi-banner-bordered {\n        border: 1px solid var(--semi-color-success-light-active);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Feedback Components in Semi-Design\nDESCRIPTION: Implementation of Modal dialog feedback components with different types (success, info, warning, error) triggered by Button clicks. Each button launches a modal with the corresponding status and message.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n<Button type='primary' onClick={() => Modal.success(opts)} style={buttonStyle}>Modal of success information</Button>\n<Button onClick={() => Modal.info(opts)} style={buttonStyle}>Modal of prompt information</Button>\n<Button type=\"warning\" onClick={() => Modal.warning(opts)} style={buttonStyle}>Modal of warning information</Button>\n<Button type=\"danger\" onClick={() => Modal.error(opts)} style={buttonStyle}>Modal of failure information</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing MarkdownRender Component in React\nDESCRIPTION: Shows how to import the MarkdownRender component and SemiMarkdownComponents from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/markdownrender/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MarkdownRender } from '@douyinfe/semi-ui';\nimport * as SemiMarkdownComponents from \"@douyinfe/semi-ui/markdownRender/components\"\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Component in React\nDESCRIPTION: Shows how to import the Popover component from the Semi-UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popover } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Delayed Toast in React\nDESCRIPTION: Shows how to set a custom duration for the toast to remain visible.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n    };\n\n    return <Button onClick={() => Toast.info(opts)}>Close After 10s</Button>;\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Tabs with Button Style in React\nDESCRIPTION: Demonstrates the use of Tabs component with button style, showing a simple implementation with three TabPanes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\n() => (\n    <Tabs type=\"button\">\n        <TabPane tab=\"文档\" itemKey=\"1\">\n            文档\n        </TabPane>\n        <TabPane tab=\"快速起步\" itemKey=\"2\">\n            快速起步\n        </TabPane>\n        <TabPane tab=\"帮助\" itemKey=\"3\">\n            帮助\n        </TabPane>\n    </Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: JsonViewer Search Method TypeScript Definition\nDESCRIPTION: Method signature for searching text in JsonViewer with optional parameters for case sensitivity, whole word matching, and regex support\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(searchText: string, caseSensitive?: boolean, wholeWord?: boolean, regex?: boolean)\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Search Trigger for Tree Component in React\nDESCRIPTION: This snippet shows how to manually trigger a search in the Tree component using a ref. It also demonstrates how to hide the internal search box and use an external Input for searching.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tree, Input } from '@douyinfe/semi-ui';\n\n() => {\n    const ref = useRef();\n    const treeData = [\n        {\n            label: 'Asia',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: 'China',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: 'Beijing',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: 'Shanghai',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n                {\n                    label: 'Japan',\n                    value: 'Japan',\n                    key: '0-1',\n                    children: [\n                        {\n                            label: 'Osaka',\n                            value: 'Osaka',\n                            key: '0-1-0',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: 'North America',\n            value: 'North America',\n            key: '1',\n            children: [\n                {\n                    label: 'United States',\n                    value: 'United States',\n                    key: '1-0',\n                },\n                {\n                    label: 'Canada',\n                    value: 'Canada',\n                    key: '1-1',\n                },\n            ],\n        },\n    ];\n    return (\n        <div>\n            <Input aria-label='filter tree' prefix=\"Search\" showClear onChange={v => ref.current.search(v)} />\n            <div style={{ marginTop: 20 }}>搜索结果如下：</div>\n            <Tree\n                ref={ref}\n                filterTreeNode\n                searchRender={false}\n                treeData={treeData}\n                blockNode={false}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SideSheet Component in React\nDESCRIPTION: Shows how to import the SideSheet component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SideSheet } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Input Area Rendering API Interface in Semi Design Chat\nDESCRIPTION: TypeScript interface definition for the renderInputArea prop, which allows customizing the input area of the Chat component. It details the available props and their purposes, including callback functions for sending messages and clearing context.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RenderInputAreaProps {\n    /* 默认节点 */\n    defaultNode?: ReactNode;\n    /* 如果自定义输入框，发送消息时需调用 */\n    onSend?: (content?: string, attachment?: FileItem[]) => void;\n    /* 如果自定义清除上下文按钮，点击清除上下文时需调用 */\n    onClear?: (e?: any) => void;\n    /* detailProps 自 2.69.0 版本开始支持 */\n    detailProps: {\n        /* 清除上下文按钮 */\n        clearContextNode?: ReactNode;\n        /* 上传按钮 */\n        uploadNOde?: ReactNode;\n        /* 文本输入框 */\n        inputNode?: ReactNode;\n        /* 发送按钮 */\n        sendNode?: ReactNode;\n        /* 点击触发聚焦文本输入框的处理函数*/\n        onClick?: (e?: MouseEvent) => void;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Size Variants\nDESCRIPTION: 展示AutoComplete组件的三种尺寸变体：small、default和large，通过size属性进行配置。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            size=\"small\"\n            placeholder={'small'}\n            style={{ width: 200 }}\n        ></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            size=\"default\"\n            placeholder={'default'}\n            style={{ width: 200 }}\n        ></AutoComplete>\n        <br />\n        <br />\n        <AutoComplete\n            data={[1, 2, 3, 4]}\n            size=\"large\"\n            placeholder={'large'}\n            style={{ width: 200 }}\n        ></AutoComplete>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format used for changelog entries, with sections for New Components, Features, Fixes, Style updates and Documentation changes\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/changelog/index.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### 🎉 [version] (date)\n- 【New Component】\n  - Component details\n- 【Feature】\n  - Feature details \n- 【Fix】\n  - Fix details\n- 【Style】\n  - Style updates\n- 【Docs】\n  - Documentation changes\n```\n\n----------------------------------------\n\nTITLE: Avatar Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, instructions, types and default values for the Avatar component. Includes detailed type definitions and configurations for features like borders, bottom slots, and hover masks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties   | Instructions                                                                                                                                                                              | type| Default  |\n| ------------ |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|| -------- |\n| alt          | Defines an alternative text description of the image.                                                                                                                                     | string| -        |\n| border | additional border（>=2.52.0）                                                                                                                                               | {color?:string //color, motion?:boolean // has animation} or boolean| - |\n| bottomSlot | bottom Slot config （>= 2.52.0 ）                                                                                                                                                           | {<br/><div style={{width:20,display:'inline-block'}}/>render?: () => React.ReactNode //Full control the rendering,<br/><div style={{width:20,display:'inline-block'}}/>shape?: \"circle\" or \"square\" // slot shape,<br/><div style={{width:20,display:'inline-block'}}/>text: React.ReactNode // slot content,<br/><div style={{width:20,display:'inline-block'}}/>bgColor:string // slot background <br/><div style={{width:20,display:'inline-block'}}/>textColor:string // text color <br/><div style={{width:20,display:'inline-block'}}/>className:string <br/><div style={{width:20,display:'inline-block'}}/>style?:CSSProperties<br/>}                                    | - |\n| className    | Class name                                                                                                                                                                                | string| -        |\n| color        | Color of the avatar, one of `amber`, `blue`, `cyan`, `green`, `grey`, `indigo`, `light-blue`, `light-green`, `lime`, `orange`, `pink`, `rain`, `red`, `teal`, `violet`, `yellow`, `white` | string| `grey`   |\n| contentMotion | avatar content area animation （>=2.xx.0）                                                                                                                                                  | boolean| - |\n| gap          | Pixel size of the distance between the left and right sides of the character avatar                                                                                                       | number| 3        |\n| hoverMask    | Avatar content overlay when hover                                                                                                                                                         | ReactNode| -        |\n| imgAttr | Native html img attributes **>=1.5.0**                                                                                                                                                    | React.ImgHTMLAttributes<HTMLImageElement\\>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | - |\n```\n\n----------------------------------------\n\nTITLE: CascaderData Interface Type Definition\nDESCRIPTION: TypeScript interface defining the structure of CascaderData items used in the Cascader component. Includes properties for children nodes, disabled status, leaf node indicators, labels, loading states, and values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CascaderData {\n    children?: CascaderData[];\n    disabled?: boolean;\n    isLeaf?: boolean;\n    label: ReactNode;\n    loading?: boolean;\n    value: string | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cropper Component in React\nDESCRIPTION: Shows how to import the Cropper component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component in React\nDESCRIPTION: Shows how to import the Input component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Date Box with CSS\nDESCRIPTION: CSS styles for custom date box states including hover, selected, and in-range appearances using Semi Design's CSS variables\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.components-datepicker-demo-day-inrange,\n.components-datepicker-demo-day-hover {\n    background: var(--semi-color-primary-light-hover);\n}\n\n.components-datepicker-demo-day-selected,\n.components-datepicker-demo-day-selected-start,\n.components-datepicker-demo-day-selected-end {\n    color: var(--semi-color-bg-2);\n    background: var(--semi-color-primary);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering CustomRenderDragDemo Component\nDESCRIPTION: Renders the CustomRenderDragDemo component to display the complete transfer interface with drag and drop functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(CustomRenderDragDemo);\n```\n\n----------------------------------------\n\nTITLE: Customizing Handler Styles in Resizable Component\nDESCRIPTION: Demonstrates how to customize the handler styles and nodes for the Resizable component using 'handleNode', 'handleStyle', and 'handleClassName' props.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable, Button } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return (\n        <div style={{ width: '500px', height: '60%' }}>\n            <Resizable\n                style={{\n                    marginLeft: '20%',\n                    backgroundColor: 'rgba(var(--semi-grey-1), 1)',\n                    border: 'var(--semi-color-border) 1px solid',\n                }}\n                defaultSize={{\n                    width: '60%',\n                    height: 300,\n                }}\n                handleNode={{\n                    right: (\n                        <div\n                            style={{\n                                height: '100%',\n                                display: 'flex',\n                                alignItems: 'center',\n                                width: 'fit-content',\n                            }}\n                        >\n                            <IconTransfer />\n                        </div>\n                    ),\n                }}\n            >\n                <div style={{ marginLeft: '20%' }}>right</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Stacking Toast in React\nDESCRIPTION: Shows how to use the 'stack' property to apply stacking styles to multiple toasts on the same screen.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast, Typography, Button } from '@douyinfe/semi-ui';\n\n()=>{\n    \n    const opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n        stack: true,\n    };\n\n    \n    return <Button onClick={() => {\n         Toast.info(opts)\n    }}>Click multiple times</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Badges in Semi Design\nDESCRIPTION: Demonstrates different badge styles with avatars including light, inverted, and solid themes with various colors and shapes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge count={5} theme='light'>\n    <Avatar color='cyan' shape='square' style={badgeStyle}>YB</Avatar>\n</Badge>\n```\n\n----------------------------------------\n\nTITLE: Importing Anchor Component in React\nDESCRIPTION: Shows how to import the Anchor component from the Semi UI library for use in React applications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Anchor } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Search in Semi Design Select\nDESCRIPTION: This snippet shows how to implement remote search functionality in a Select component. It includes debounced requests, loading states, and dynamic option list updates.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { debounce } from 'lodash-es';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => {\n    const [loading, setLoading] = useState(false);\n    const optionList = [\n        { value: 'douyin', label: '抖音', type: 1 },\n        { value: 'xingtu', label: '醒图', type: 2 },\n        { value: 'jianying', label: '剪映', type: 3 },\n        { value: 'toutiao', label: '今日头条', type: 4 },\n    ];\n    const [list, setList] = useState(optionList);\n    const [value, setValue] = useState('');\n\n    const handleMultipleChange = newValue => {\n        setValue(newValue);\n    };\n\n    const handleSearch = inputValue => {\n        setLoading(true);\n        let result = [];\n        if (inputValue) {\n            let length = Math.ceil(Math.random() * 100);\n            result = Array.from({ length }, (v, i) => {\n                return { value: inputValue + i, label: `相近业务 ${inputValue}${i}`, type: i + 1 };\n            });\n            setTimeout(() => {\n                setLoading(false);\n                setList(result);\n            }, 1000);\n        } else {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Select\n            style={{ width: 300 }}\n            filter\n            remote\n            onChangeWithObject\n            multiple\n            value={value}\n            onSearch={debounce(handleSearch, 1000)}\n            optionList={list}\n            loading={loading}\n            onChange={handleMultipleChange}\n            emptyContent={null}\n        ></Select>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Slider with Marks in React\nDESCRIPTION: 展示带标签的滑动条，使用 marks 属性标注滑块的刻度。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div>step=10</div>\n        <Slider step={10} marks={{ 0: '0', 10: '10', 20: '20', 30: '30', 40: '40', 50: '50', 100: '100' }} defaultValue={[10, 100]} range={true}></Slider>\n        <br/>\n        <br/>\n        <div>step=0.1</div>\n        <Slider step={0.1} marks={{ 0.1: '0.1', 0.2: '0.2', 0.3: '0.3', 0.4: '0.4', 0.5: '0.5' }} min={0} max={1} defaultValue={[0.1, 0.5]} range={true}></Slider>\n        <br/>\n        <br/>\n        <div>Marks</div>\n        <Slider marks={{ 20: '20°C', 40: '40°C' }} defaultValue={[0, 100]} tipFormatter={v => (`${v}°C`)} range={true} getAriaValueText={(value) => `${value}°C`}></Slider>\n        <br/>\n        <br/>\n        <div>Included</div>\n        <Slider marks={{ 20: '20°C', 40: '40°C' }} included={false} defaultValue={[0, 100]} range={true} tipFormatter={v => (`${v}°C`)} getAriaValueText={(value) => `${value}°C`}></Slider>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Transfer Component Type Definitions\nDESCRIPTION: TypeScript type definitions for the Transfer component's header props, including source and selected header property types.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype SourceHeaderProps = {\n    num: number; // The total number of data or the number of filtered results\n    showButton: boolean; // Whether to show select all/unselect all buttons\n    allChecked: boolean; // Whether the current data has been selected\n    onAllClick: () => void // Function that should be called after clicking the select/unselect all button\n}\n\ntype SelectedHeaderProps = {\n    num: number; // The total number of selected data\n    showButton: boolean; // Whether to show the clear button\n    onClear: () => void // Function that should be called after clicking the clear button\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Step Length for TimePicker in React\nDESCRIPTION: Demonstrates how to set step lengths for minutes and seconds in the TimePicker.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker minuteStep={15} secondStep={10} />;\n}\n```\n\n----------------------------------------\n\nTITLE: DragMove with Custom Handler\nDESCRIPTION: Shows how to implement DragMove with a custom handler element that triggers the dragging functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from'react';\nimport { IconTransparentStroked } from '@douyinfe/semi-icons';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction Demo(){\n  const handlerRef = React.useRef();\n  const containerRef = React.useRef();\n\n  return (\n    <div \n      style={{ backgroundColor: 'rgba(var(--semi-grey-2), 1)', \n        width: 300, height: 300, padding: 5, position: 'relative', \n        color: 'rgba(var(--semi-white), 1)', fontWeight: 500,\n      }} \n      ref={containerRef}\n    >\n      <span>Constrainer</span>\n      <DragMove\n        handler={() => handlerRef.current}\n        constrainer={() => containerRef.current}\n      >\n        <div \n          style={{ \n            backgroundColor: 'var(--semi-color-primary)', \n            width: 80, height: 80, borderRadius: 10,\n            position: 'absolute', top: 50, left: 50,\n            display: 'flex', alignItems: 'center', justifyContent: 'center',\n          }}\n        >\n          <div \n              style={{ width: 'fit-content', height: 'fit-content' }} \n              ref={handlerRef}\n          ><IconTransparentStroked size={'large'}/></div>\n        </div>\n      </DragMove>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pure Card Style CheckboxGroup in React\nDESCRIPTION: Example of using CheckboxGroup with type='pureCard' to create card-style selections with backgrounds but without visible checkboxes, providing a cleaner UI.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup, Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup type='pureCard' defaultValue={['1', '3']} direction='vertical' aria-label=\"Checkbox demo\">\n        <Checkbox value={'1'} disabled extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n        <Checkbox value={'2'} disabled extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n        <Checkbox value={'3'} extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n        <Checkbox value={'4'} extra='Checkbox Description' style={{ width: 280 }}>\n            Checkbox Title\n        </Checkbox>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Bundling in Remix\nDESCRIPTION: Setup for CSS bundling in a Remix project's root.tsx file. It demonstrates how to import and use cssBundleHref for Semi Design styles.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// root.tsx\n+ import { cssBundleHref } from \"@remix-run/css-bundle\";\n\n export const links = () => {\n   return [\n+     ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n   ];\n };\n```\n\n----------------------------------------\n\nTITLE: Importing Space Component in React\nDESCRIPTION: Shows how to import the Space component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Space } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing ScrollList Components in React\nDESCRIPTION: Shows how to import the necessary components from the Semi UI library to create scrollable lists.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/scrolllist/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ScrollList, ScrollItem } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Multiple Illustration Examples\nDESCRIPTION: Demonstrates various illustration options available in the Semi UI library for Empty components\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty } from '@douyinfe/semi-ui';\nimport { IllustrationConstruction, IllustrationSuccess, IllustrationFailure, IllustrationNoAccess, IllustrationNoContent, IllustrationNotFound, IllustrationNoResult } from '@douyinfe/semi-illustrations';\n\n/* The following is available after version 1.13.0 */\nimport { IllustrationIdle, IllustrationIdleDark, IllustrationConstructionDark, IllustrationSuccessDark, IllustrationFailureDark, IllustrationNoAccessDark, IllustrationNoContentDark, IllustrationNotFoundDark, IllustrationNoResultDark } from '@douyinfe/semi-illustrations';\n\n() => {\n    const emptyStyle = {\n        padding: 30,\n    };\n    return (\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            <Empty\n                image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n                description={'Created successfully'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationFailure style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationFailureDark style={{ width: 150, height: 150 }} />}\n                description={'Failed to load'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNoAccess style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNoAccessDark style={{ width: 150, height: 150 }} />}\n                description={'Permission denied'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNoContent style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNoContentDark style={{ width: 150, height: 150 }} />}\n                description={'No content, please add'}\n                style={emptyStyle}\n            />\n            <Empty\n                image={<IllustrationNotFound style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNotFoundDark style={{ width: 150, height: 150 }} />}\n                description={'Page 404'}\n                style={emptyStyle} />\n            <Empty\n                image={<IllustrationNoResult style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationNoResultDark style={{ width: 150, height: 150 }} />}\n                description={'No search results'}\n                style={emptyStyle} />\n            <Empty\n                image={<IllustrationConstruction style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationConstructionDark style={{ width: 150, height: 150 }} />}\n                description={'under construction'}\n                style={emptyStyle} />\n            <Empty\n                image={<IllustrationIdle style={{ width: 150, height: 150 }} />}\n                darkModeImage={<IllustrationIdleDark style={{ width: 150, height: 150 }} />}\n                description={'Wandering Quartet'}\n                style={emptyStyle} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DragMove in React\nDESCRIPTION: Demonstrates the basic usage of the DragMove component to make an element draggable. The wrapped element is set to absolute positioning.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef, useEffect } from 'react';\nimport { DragMove } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  return (\n    <DragMove>\n      <div \n        style={{ backgroundColor: 'var(--semi-color-primary)',width: 80, height: 80, \n          display: 'flex', alignItems: 'center',justifyContent: 'center', \n          borderRadius: 10, fontWeight: 500,\n          position: 'absolute',  color: 'rgba(var(--semi-white), 1)'\n        }} \n      >Drag me</div>\n    </DragMove>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Upload State in React\nDESCRIPTION: Shows how to create a disabled upload component with existing file list. The component includes a disabled button and prevents new file uploads while maintaining the display of existing files.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    const defaultFileList = [\n        {\n            uid: '1',\n            name: 'dyBag.jpeg',\n            status: 'success',\n            size: '130KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png',\n        },\n        {\n            uid: '2',\n            name: 'abc.jpeg',\n            status: 'validateFail',\n            size: '222KB',\n            preview: true,\n            url: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/Resso.png',\n        },\n    ];\n    let action = '//semi.design/api/upload';\n    return (\n        <>\n            <Upload action={action} disabled defaultFileList={defaultFileList}>\n                <Button icon={<IconUpload />} theme=\"light\" disabled>\n                    Click upload\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Abbreviations Table in Markdown\nDESCRIPTION: A markdown table showing common abbreviations for units of measurement, time, and quantity across various categories.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/content-guidelines/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Unit | Full name | Abbreviation |\n| --- | --- | --- |  --- |   \n| area | metric  | square meters | m² |\n|     | Imperial | square feet |  sq ft | \n| distance | metric   | kilometers |  km | \n|     | Imperial | miles |  mi | \n| length | metric   | centimeters |  cm | \n|     |          | meters |  m | \n|     | Imperial | inches |  in | \n|     |          |  feet |  ft | \n|     |          |  yards |  yd | \n|volume | metric  | milliliters | ml | \n|     |          | litres |  L | \n|     | Imperial | fluid ounces |  fl oz | \n|     |          |  gallons |  gal | \n| weight | metric  | grams |  ml | \n|     |         | kilograms|  kg | \n|     | Imperial | ounces |  oz | \n|     |          | pounds |  lb | \n| storage | -  | kilobytes |  KB | \n|     |    | megabyte |  MB | \n|     |    | gigabytes |  GB | \n|     |    | terabytes|  TB | \n| month | -  | January |  Jan | \n|     |    | February |  Feb | \n|     |    | March |  Mar | \n|     |    | April|  Apr | \n|     |    | June |  Jun | \n|     |    | July |  Jul | \n|     |    | August|  Aug | \n|     |    | September |  Sep| \n|     |    | October |  Oct | \n|     |    | November|  Nov | \n|     |    | December|  Dec | \n| week | -  | Sunday | Sun | \n|     |    | Monday |  Mon | \n|     |    | Tuesday |  Tue | \n|     |    | Wednesday|  Wed | \n|     |    | Thursday |  Thu | \n|     |    | Friday |  Fri | \n|     |    | Saturday |  Sat | \n| time | -  | weeks |  w | \n|     |    | days |  d | \n|     |    | hours |  h | \n|     |    | minutes|  m | \n|     |    | seconds |  s | \n| amount | -  | thousand |  d | \n|     |    | million |  m | \n|     |    | billion |  B | \n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Semantic Icons\nDESCRIPTION: This snippet details the command to install the Semantic Icons library, which is necessary for using the icon components in a project. The command requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-icons/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @douyinfe/semi-icons\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hint Rendering Function in TypeScript\nDESCRIPTION: This snippet defines the type for a custom hint rendering function in TypeScript. It specifies the parameters and return type for the renderHintBox function.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype renderHintBox = (props: {content: string; index: number,onHintClick: () => void}) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Enable Interface for Controlling Resize Directions\nDESCRIPTION: Defines the Enable interface that specifies which resize directions are available. Each direction can be individually enabled or disabled with boolean values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Enable {\n  left: Boolean;\n  right: Boolean;\n  top: Boolean;\n  bottom: Boolean;\n  topLeft: Boolean;\n  topRight: Boolean;\n  bottomLeft: Boolean;\n  bottomRight: Boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Components in Semi Design\nDESCRIPTION: Shows how to import Avatar and AvatarGroup components from Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Image Source\nDESCRIPTION: Shows how to customize the preview image by setting different 'src' values for the Image component and the 'src' in the preview parameter.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@douyinfe/semi-ui';\n\n() => {\n     return ( \n         <Image\n             width={300}\n             height={200}\n             src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-small.jpeg'}\n             preview={{\n                 src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract-big.png'\n             }}\n         />\n     );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Toast Content in React\nDESCRIPTION: Shows how to update the content of an existing toast using a unique ID.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    function show() {\n        const id = 'toastid';\n        Toast.info({ content: 'Update Content By Id', id });\n        setTimeout(() => {\n            Toast.success({ content: 'Id By Content Update', id });\n        }, 1000);\n    }\n\n    return (\n        <Button type=\"primary\" onClick={show}>\n            Update Content By Id\n        </Button>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Hiding Toolbar in AudioPlayer Component\nDESCRIPTION: 通过设置showToolbar属性为false来隐藏AudioPlayer组件的工具栏。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const audioUrlObj = {\n        src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n        title: '音频标题'\n    };\n  \n    return (\n        <div style={{ width: '100%' }}>\n            <AudioPlayer\n                autoPlay={false}\n                audioUrl={audioUrlObj}\n                showToolbar={false}\n            />\n        </div>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: 手动关闭Toast (React)\nDESCRIPTION: 展示如何创建一个不会自动关闭的Toast，并通过按钮手动关闭它。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const [toastId, setToastId] = useState();\n    function show() {\n        if (toastId) {\n            return;\n        }\n        let id = Toast.info(opts);\n        setToastId(id);\n    }\n    function hide() {\n        Toast.close(toastId);\n        destroy();\n    }\n    function destroy() {\n        setToastId(null);\n    }\n    let opts = {\n        content: 'Not auto close',\n        duration: 0,\n        onClose: destroy,\n    };\n    return (\n        <>\n            <Button type=\"primary\" onClick={show}>\n                Show Toast\n            </Button>\n            <br />\n            <br />\n            <Button type=\"primary\" onClick={hide}>\n                Hide Toast\n            </Button>\n        </>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: 导入Semi UI Select组件\nDESCRIPTION: 展示如何从@douyinfe/semi-ui库中导入Select组件，并获取Option子组件的引用。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from '@douyinfe/semi-ui';\nconst Option = Select.Option;\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker API Parameters in Markdown\nDESCRIPTION: A markdown table listing and describing the various parameters available for the TimePicker component in the Semi Design system. It includes details on types, default values, and version information for each parameter.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameters | Instructions                                                                                                                                                                                                                                  | Type | Default | Version |\n| --- |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| --- | --- | --- |\n| autoAdjustOverflow | Whether the floating layer automatically adjusts its direction when it is blocked                                                                                                                                                             | boolean | true |  |\n| autoFocus | Automatic access to focus                                                                                                                                                                                                                     | boolean | false |\n| borderless        | borderless mode  >=2.33.0                                                                                                                                                                                                                     | boolean                         |           |\n| className | Outer style name                                                                                                                                                                                                                              | string |  |\n| clearIcon | Can be used to customize the clear button, valid when showClear is true                                                                                                                                                                       | ReactNode |  |  **2.25.0**|\n| clearText | Clear button prompt copy                                                                                                                                                                                                                      | string | Clear |\n| defaultOpen | Whether the panel is open by default                                                                                                                                                                                                          | boolean |  |  |\n| defaultValue | Default time                                                                                                                                                                                                                                  | Date\\|timeStamp\\|string (array when type = \"timeRange\") |  |\n| disabled | Disable all operations                                                                                                                                                                                                                        | boolean | false |\n| disabledHours | Prohibited selection of partial hour options                                                                                                                                                                                                  | () => number [] |  |\n| disabledMinutes | Prohibited to select some minute options                                                                                                                                                                                                      | (selectedHour: number) => number[] |  |\n| disabledSeconds | Unable to select partial second option                                                                                                                                                                                                        | (selectedHour: number, selectedMinute: number) => number[] |  |\n| dropdownMargin | Popup layer calculates the size of the safe area when the current direction overflows, used in scenes covered by fixed elements, more detail refer to [issue#549](https://github.com/DouyinFE/semi-design/issues/549), same as Tooltip margin | object\\|number |  | **2.25.0** |\n| focusOnOpen     | Whether to open the panel and focus the input box when mounting                                                                                                                                                                               | boolean                                                                            | false                                                     |                    |\n| format | Time format of presentation                                                                                                                                                                                                                   | string | \"HH: mm: ss.\" |  |\n| getPopupContainer | Specifies the container and the floating layer will be rendered into the element, you need to set 'position: relative`  This will change the DOM tree position, but not the view's rendering position.                                                                                                                        | () => HTMLElement | () => document.body |\n| hideDisabledOptions | Hide the option of forbidden selection                                                                                                                                                                                                        | boolean | false |\n| hourStep | Hour option interval                                                                                                                                                                                                                          | number | 1 |\n| inputReadOnly | Set the input box to read-only (avoid opening a virtual keyboard on a mobile device)                                                                                                                                                          | boolean | false |\n| minuteStep | Minute option interval                                                                                                                                                                                                                        | number | 1 |\n| motion | Whether to display the pop-up layer animation                                                                                                                                                                                                 | boolean | true |  |\n| open | Controlled property of whether the panel is open                                                                                                                                                                                              | boolean |  |\n| panelFooter | Addon at the bottom of the panel                                                                                                                                                                                                              | ReactNode\\|ReactNode[]\\|string |  |\n| panelHeader | Panel head addon                                                                                                                                                                                                                              | ReactNode\\|ReactNode[]\\|string |  |\n| placeholder | What's displayed when it's not worth it.                                                                                                                                                                                                      | string | \"Select time\" |\n| popupClassName | Pop-up class name                                                                                                                                                                                                                             | string | '' |\n| popupStyle | Pop-up layer style object                                                                                                                                                                                                                     | object | - |\n| position | Floating position                                                                                                                                                                                                                             | string | type=\"timeRange\" => \"bottom\"<br/>type=\"time\" => \"bottomLeft\" |\n| prefix | Prefix content                                                                                                                                                                                                                                | string\\|ReactNode |  |  |\n| preventScroll | Indicates whether the browser should scroll the document to display the newly focused element, acting on the focus method inside the component, excluding the component passed in by the user                                                 | boolean |  |  |\n| rangeSeparator | time range delimiter                                                                                                                                                                                                                          | string | \"~\" |\n| scrollItemProps | The props passed through to ScrollItem. The optional values are the same as [ScrollList#API](/zh-CN/show/scrolllist#ScrollItem)                                                                                                               | object |  | |\n```\n\n----------------------------------------\n\nTITLE: Tabs with Slash Style and Dynamic Content in React\nDESCRIPTION: Shows the usage of Tabs with 'slash' style, tabList prop for defining tabs, and dynamic content rendering based on selected tab.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs } from '@douyinfe/semi-ui';\n\nclass TabDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = { key: '1' };\n        this.onTabClick = this.onTabClick.bind(this);\n    }\n\n    onTabClick(key, type) {\n        this.setState({ [type]: key });\n    }\n\n    render() {\n        // eslint-disable-next-line react/jsx-key\n        const contentList = [<div>Document</div>, <div>Quick Start</div>, <div>Help</div>];\n        const tabList = [\n            { tab: 'Document', itemKey: '1' },\n            { tab: 'Quick Start', itemKey: '2' },\n            { tab: 'Help', itemKey: '3' },\n        ];\n        return (\n            <Tabs\n                type=\"slash\"\n                tabList={tabList}\n                onChange={key => {\n                    this.onTabClick(key, 'key');\n                }}\n            >\n                {contentList[this.state.key - 1]}\n            </Tabs>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Anchor without Auto Collapse in React\nDESCRIPTION: Demonstrates the Anchor component with auto collapse feature disabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                autoCollapse={false}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#动态展示\" title=\"1. 动态展示\">\n                    <Anchor.Link href=\"#组件\" title=\"1.1 组件\">\n                        <Anchor.Link href=\"#头像\" title=\"1.1.1 Avatar\" />\n                        <Anchor.Link href=\"#按钮\" title=\"1.1.2 Button\" />\n                        <Anchor.Link href=\"#图标\" title=\"1.1.3 Icon\" />\n                    </Anchor.Link>\n                    <Anchor.Link href=\"#物料\" title=\"1.2 物料\" />\n                    <Anchor.Link href=\"#主题商店\" title=\"1.3 主题商店\" />\n                </Anchor.Link>\n                <Anchor.Link href=\"#设计语言\" title=\"2. 设计语言\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal Layout Empty Component\nDESCRIPTION: Shows implementation of Empty component with horizontal layout and success illustration\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Empty, Button } from '@douyinfe/semi-ui';\nimport { IllustrationSuccess, IllustrationSuccessDark } from '@douyinfe/semi-illustrations';\n\n() => (\n    <Empty\n        title={'Created successfully'}\n        image={<IllustrationSuccess style={{ width: 150, height: 150 }} />}\n        darkModeImage={<IllustrationSuccessDark style={{ width: 150, height: 150 }} />}\n        layout=\"horizontal\"\n        description=\"This is a very long description text. This layout is recommended when the text is too long. This is a very long description text. This layout is recommended when the text is too long. This is a very long description text. This layout is recommended when the text is too long.\"\n        style={{ width: 800, margin: '0 auto' }}\n    >\n        <Button type=\"primary\" theme=\"solid\" style={{ padding: '6px 24px' }}>\n            Start operation\n        </Button>\n    </Empty>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Variations in TreeSelect\nDESCRIPTION: Demonstrates different size variations (small, default, large) of the TreeSelect component with multiple selection enabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@douyinfe/semi-ui';\n\n() => {\n    const treeData = [\n        {\n            label: '亚洲',\n            value: 'Asia',\n            key: '0',\n            children: [\n                {\n                    label: '中国',\n                    value: 'China',\n                    key: '0-0',\n                    children: [\n                        {\n                            label: '北京',\n                            value: 'Beijing',\n                            key: '0-0-0',\n                        },\n                        {\n                            label: '上海',\n                            value: 'Shanghai',\n                            key: '0-0-1',\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            label: '北美洲',\n            value: 'North America',\n            key: '1',\n        }\n    ];\n    return ( \n        <div>\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                size=\"small\"\n                placeholder=\"small\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                size=\"default\"\n                placeholder=\"default\"\n            />\n            <br />\n            <br />\n            <TreeSelect\n                style={{ width: 300 }}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                multiple\n                size=\"large\"\n                placeholder=\"large\"\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Crop Box Styling\nDESCRIPTION: Shows how to customize the crop box appearance and control resize box visibility.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, Switch } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nconst centerStyle = {\n    display: 'flex', \n    alignItems: 'center', \n    justifyContent: 'center',\n    width: 'fit-content'\n}\n\nfunction Demo() {\n    const ref = useRef(null);\n    const [cropperUrl, setCropperUrl] = useState('');\n\n    const onButtonClick = useCallback(() => {\n        const canvas = ref.current.getCropperCanvas();\n        setCropperUrl(canvas.toDataURL());\n    }, []);\n\n    return <>\n        <strong>showResizeBox = false，and change the outline color of cropper box</strong>\n        <Cropper\n            ref={ref} \n            src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n            style={containerStyle}\n            cropperBoxStyle={{ outlineColor: 'var(--semi-color-bg-0)'}}\n            showResizeBox={false}\n        />\n        <Button onClick={onButtonClick}>Get Cropped Image</Button>\n        <br /><br />\n        {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n    </>;\n}\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Component in React\nDESCRIPTION: Shows how to import the Breadcrumb component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Breadcrumb } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing AutoComplete Component in React\nDESCRIPTION: 展示如何在React项目中导入AutoComplete组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AutoComplete } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Custom Timeline Nodes\nDESCRIPTION: Example of customizing Timeline nodes with custom icons, colors, and styles.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Timeline } from '@douyinfe/semi-ui';\nimport { IconAlertTriangle } from '@douyinfe/semi-icons';\n\n() => (\n    <Timeline>\n        <Timeline.Item time='2019-07-14 10:35'>Default Style</Timeline.Item>\n        <Timeline.Item time='2019-06-13 16:17' dot={(<IconAlertTriangle />)} type='warning'>Customized Icon</Timeline.Item>\n        <Timeline.Item time='2019-05-14 18:34' color='pink'>Customized Color</Timeline.Item>\n        <Timeline.Item time='2019-04-10 12:20'><span style={{ fontSize: '18px' }}>Customized Node Style</span></Timeline.Item>\n    </Timeline>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage\nDESCRIPTION: Demonstrates basic Switch implementation with onChange handler and default checked state\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch onChange={(v, e) => console.log(v)} aria-label=\"a switch for demo\"></Switch>\n        <br />\n        <Switch defaultChecked={true} onChange={(v, e) => console.log(v)} aria-label=\"a switch for demo\"></Switch>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Lottie Animation Instance in React\nDESCRIPTION: Demonstrates how to use the 'getAnimationInstance' prop to access the current animation instance, which provides methods for controlling the animation.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n\n    return (\n        <div>\n            <Lottie\n                getAnimationInstance={animation => {\n                    console.log(animation);\n                }}\n                params={{ path: jsonURL }}\n                width={'300px'}\n                height={'300px'}\n            />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Spacing Options for Space Component in React\nDESCRIPTION: Illustrates the use of the 'spacing' prop to set different spacing sizes between elements, including tight, medium, loose, and custom array values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Space, Tabs, TabPane, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Tabs type=\"line\">\n        <TabPane tab=\"tight\" itemKey=\"1\">\n            <Space spacing='tight' style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n            </Space>\n        </TabPane>\n        <TabPane tab=\"medium\" itemKey=\"2\">\n            <Space spacing='medium' style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n            </Space>\n        </TabPane>\n        <TabPane tab=\"loose\" itemKey=\"3\">\n            <Space spacing='loose' style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n            </Space>\n        </TabPane>\n        <TabPane tab=\"array\" itemKey=\"4\">\n            <Space spacing={[8, 16]} wrap style={{ marginTop: '15px' }}>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n                <Button theme='solid' type='primary'>button</Button>\n            </Space>\n        </TabPane>\n    </Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Divider Component in Semi Design\nDESCRIPTION: Demonstrates various uses of the Divider component, including horizontal and vertical layouts, solid and dashed lines.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/divider/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Divider } from '@douyinfe/semi-ui';\n\n() => {\n\n    return (\n        <div>\n            <h3>Horizontal Solid Line</h3>\n            <span>Semi Design is a design system.</span>\n            <Divider margin='12px'/>\n            <span>It defines a set of components.</span>\n\n            <h3 style={{ \"marginTop\": \"40px\" }}>Horizontal Dashed Line</h3>\n            <span>Semi Design is a design system.</span>\n            <Divider dashed={true} margin='12px'/>\n            <span>It defines a set of components.</span>\n\n            <h3 style={{ \"marginTop\": \"40px\" }}>Vertical Solid Line</h3>\n\n            <div>\n                <span>Left</span>\n                <Divider layout=\"vertical\" margin='12px'/>\n                <span>Middle</span>\n                <Divider layout=\"vertical\" margin='12px'/>\n                <span>Right</span>\n            </div>\n\n            <h3 style={{ \"marginTop\": \"40px\" }}>Vertical Dashed Line</h3>\n            <div>\n                <span>Left</span>\n                <Divider layout=\"vertical\" dashed={true} margin='12px'/>\n                <span>Middle</span>\n                <Divider layout=\"vertical\" dashed={true} margin='12px'/>\n                <span>Right</span>\n            </div>\n\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Enumerating Feedback Components in Semi Design\nDESCRIPTION: Lists the components used for providing user feedback and notifications in the Semi Design library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: overview\nCODE:\n```\nBanner,\nNotification,\nPopconfirm,\nProgress,\nSkeleton,\nSpin,\nToast\n```\n\n----------------------------------------\n\nTITLE: Importing DragMove Component in React\nDESCRIPTION: Shows how to import the DragMove component from the Semi UI library. Available from v2.71.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DragMove } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Spin Component with Different Sizes\nDESCRIPTION: Shows how to use the size property to render Spin components in small, medium (default), and large sizes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ marginLeft: 30 }}>\n        <div style={{ marginBottom: 5 }}>size: small</div>\n        <Spin size=\"small\" />\n        <br />\n        <br />\n        <div style={{ marginBottom: 10 }}>size: middle</div>\n        <Spin size=\"middle\" />\n        <br />\n        <br />\n        <div style={{ marginBottom: 15 }}>size: large</div>\n        <Spin size=\"large\" />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Default Steps Implementation\nDESCRIPTION: Implementation of the legacy version of Steps component with basic configuration\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Steps current={1} onChange={(i)=>console.log(i)}>\n        <Steps.Step title=\"Finished\" description=\"This is a description\" />\n        <Steps.Step title=\"In Progress\" description=\"This is a description\" />\n        <Steps.Step title=\"Waiting\" description=\"This is a description\" />\n    </Steps>\n);\n```\n\n----------------------------------------\n\nTITLE: CSS for Avatar Upload Component\nDESCRIPTION: CSS styles for the avatar upload component, ensuring that the clickable area is circular by setting the border-radius to 50%.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.avatar-upload .semi-upload-add {\n    border-radius: 50%; // Make sure that only the circle is clicked on the hot zone\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Currency Display with Specific Locale Codes\nDESCRIPTION: Example showing how to manually specify currency types and locale codes for different currencies including CNY, EUR, JPY, and VND.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\n() => {\n    const defaultValue = 123456.78;\n    return (\n        <div>\n            <div>🇨🇳 人民币</div>\n            <InputNumber localeCode=\"zh-CN\" currency=\"CNY\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇪🇺 欧元</div>\n            <InputNumber localeCode=\"de-DE\" currency=\"EUR\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇯🇵 日元</div>\n            <InputNumber localeCode=\"ja-JP\" currency=\"JPY\" defaultValue={defaultValue} />\n            <br />\n            <br />\n            <div>🇻🇳 越南盾</div>\n            <InputNumber localeCode=\"vi-VN\" currency=\"VND\" defaultValue={defaultValue} />\n            <br />\n            <br />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing AudioPlayer Component in React\nDESCRIPTION: 展示如何在React项目中引入AudioPlayer组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Advanced SCSS Compilation with JS API\nDESCRIPTION: This example showcases the advanced API for compiling SCSS, using `generateScssMap`, `writeFile`, and `compilerFromScssMap`.  It demonstrates creating a SCSS map, writing it to a temporary directory, compiling the SCSS, and then writing the compiled CSS to an output file using fs-extra.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-scss-compile/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { generateScssMap, writeFile, compilerFromScssMap } = require('@douyinfe/semi-scss-compile');\nconst fs = require('fs-extra');\n\nconst isMin = false;\nconst scssMap = generateScssMap(\"path/to/foundation\", \"path/to/theme\", \"path/to/'@douyinfe/semi-icons'\");\nconst tempDir = writeFile(scssMap);\nconst result = compilerFromScssMap(path.join(tempDir, 'index.scss'), isMin);\nfs.outputFileSync(outputPath, result.css);\n```\n\n----------------------------------------\n\nTITLE: Grouped Bar Chart Implementation in React with VChart\nDESCRIPTION: Implements a grouped bar chart showing democracy vs autocracy data over time. Features direction switching and grouped data visualization with multiple series.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'bar',\n  data: [\n    {\n      id: 'barData',\n      values: [\n        { type: 'Autocracies', year: '1930', value: 129 },\n        { type: 'Autocracies', year: '1940', value: 133 },\n        { type: 'Autocracies', year: '1950', value: 130 },\n        { type: 'Autocracies', year: '1960', value: 126 },\n        { type: 'Autocracies', year: '1970', value: 117 },\n        { type: 'Autocracies', year: '1980', value: 114 },\n        { type: 'Autocracies', year: '1990', value: 111 },\n        { type: 'Autocracies', year: '2000', value: 89 },\n        { type: 'Autocracies', year: '2010', value: 80 },\n        { type: 'Autocracies', year: '2018', value: 80 },\n        { type: 'Democracies', year: '1930', value: 22 },\n        { type: 'Democracies', year: '1940', value: 13 },\n        { type: 'Democracies', year: '1950', value: 25 },\n        { type: 'Democracies', year: '1960', value: 29 },\n        { type: 'Democracies', year: '1970', value: 38 },\n        { type: 'Democracies', year: '1980', value: 41 },\n        { type: 'Democracies', year: '1990', value: 57 },\n        { type: 'Democracies', year: '2000', value: 87 },\n        { type: 'Democracies', year: '2010', value: 98 },\n        { type: 'Democracies', year: '2018', value: 99 }\n      ]\n    }\n  ],\n  seriesField: 'type',\n  title: {\n    visible: true,\n    text: 'Grouped bar chart',\n    subtext: 'This is a grouped bar chart',\n  },\n  legends: {\n    visible: true,\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Pie/Donut Chart with VChart in React\nDESCRIPTION: Creates a configurable pie/donut chart component with optional indicator card. Visualizes composition data with customizable labels and tooltips using VChart with React.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useCallback } from \"react\";\nimport { VChart } from \"@visactor/react-vchart\";\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n\nconst commonSpec = {\n  type: 'pie',\n  data: [\n    {\n      id: 'id0',\n      values: [{ type: 'oxygen', value: '46.60' }, { type: 'silicon', value: '27.72' },\n        { type: 'aluminum', value: '8.13' }, { type: 'iron', value: '5' },\n        { type: 'calcium', value: '3.63' }, { type: 'sodium', value: '2.83' },\n        { type: 'potassium', value: '2.59' }, { type: 'others', value: '3.5' }]\n    }\n  ],\n  valueField: 'value',\n  categoryField: 'type',\n  label: {\n    visible: true\n  },\n  tooltip: {\n    mark: {\n      content: [\n        {\n          key: datum => datum['type'],\n          value: datum => datum['value'] + '%'\n        }\n      ]\n    }\n  }\n};\n\nconst donutChart = {\n  title: {\n    visible: true,\n    text: 'Pie chart',\n    subtext: 'This is a pie chart',\n  },\n  legends: {\n    visible: true,\n    orient: 'right'\n  },\n}\n\nconst donutWithIndicator = {\n  title: {\n    visible: true,\n    text: 'Donut chart with indicator',\n    subtext: 'This is a donut chart with indicator',\n  },\n  legends: {\n    visible: true,\n    orient: 'right'\n  },\n  indicator: {\n    visible: true,\n    trigger: 'select',\n    title: {\n      visible: true,\n      style: {\n        fontSize: 12,\n        fontWeight: 'normal',\n        text: data => {\n          if (data) {\n            const value = data['type'];\n            return value ? value : null;\n          }\n          return '总和';\n        }\n      }\n    },\n    content: [\n      {\n        visible: true,\n        fontWeight: 'bold',\n        style: {\n          fontSize: 20,\n          text: data => {\n            if (data) {\n              const value = data['value'];\n              return value ? `${value}%` : null;\n            }\n            return 1234;\n          }\n        }\n      }\n    ]\n  }\n}\n\nfunction App() {\n  const [type, setType] = useState('donut');\n  const onChange = useCallback((e) => setType(e.target.value), []);\n  return (\n    <>\n      <RadioGroup onChange={onChange} value={type} >\n        <Radio value={'donut'}>饼图</Radio>\n        <Radio value={'donutWithIndicator'}>带指标卡饼图</Radio>\n      </RadioGroup>\n      <div style={{ display: 'flex', alignItem: 'center', justifyContent: 'center'}}>\n        <VChart\n            spec={{\n                ...commonSpec,\n                ...(type === 'donut' ? donutChart : donutWithIndicator),\n            }}\n            option={{ mode: \"desktop-browser\" }}\n            style={{ height: 440, width:680 }}\n        />\n      </div>\n    </>\n  )\n}\n\nrender(App);\n```\n\n----------------------------------------\n\nTITLE: Importing Space Component in React\nDESCRIPTION: Shows how to import the Space component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Space } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 使用defaultChecked设置默认选中状态\nDESCRIPTION: 通过defaultChecked属性设置Checkbox的默认选中状态，实现非受控使用方式。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <Checkbox defaultChecked onChange={e => console.log(e)} aria-label=\"Checkbox 示例\">Semi Design</Checkbox>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for Transfer Items\nDESCRIPTION: 为自定义的Transfer项添加样式，包括悬停效果、信息布局和关闭图标的交互效果。使用了Semi Design的CSS变量系统。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.components-transfer-demo-selected-item {\n    .semi-icon-close {\n        visibility: hidden;\n        color: var(--semi-color-tertiary);\n    }\n    &:hover {\n        .semi-icon-close {\n            visibility: visible;\n        }\n    }\n}\n\n.components-transfer-demo-selected-item,\n.components-transfer-demo-source-item {\n    height: 52px;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 10px 12px;\n    &:hover {\n        background-color: var(--semi-color-fill-0);\n    }\n    .info {\n        margin-left: 8px;\n        flex-grow: 1;\n    }\n    .name {\n        font-size: 14px;\n        line-height: 20px;\n    }\n    .email {\n        font-size: 12px;\n        line-height: 16px;\n        color: var(--semi-color-text-2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用SVGR将SVG文件转换为React组件\nDESCRIPTION: 介绍如何配置webpack和@svgr/webpack来将SVG文件直接导入为React组件，并在Icon组件中使用。适用于Semi提供的图标不满足业务需求的情况。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n{\n  test: /\\.svg$/,\n  use: ['@svgr/webpack'],\n}\n\nimport { Icon } from '@douyinfe/semi-ui';\nimport StarIcon from './star.svg';\n\n<Icon svg={<StarIcon />} />\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in Semi Design\nDESCRIPTION: Shows how to import the Card component from the Semi Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Resizable Components in React\nDESCRIPTION: Shows how to import the Resizable component and its subcomponents from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Resizable } from '@douyinfe/semi-ui';\nimport { ResizeItem, ResizeHandler, ResizeGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Listing Input Components in Semi Design\nDESCRIPTION: Enumerates the various input components available in the Semi Design library, covering a wide range of form elements and user input methods.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: overview\nCODE:\n```\nAutoComplete,\nCascader,\nButton,\nCheckbox,\nDatePicker,\nForm,\nInput,\nInputNumber,\nPinCode,\nRadio,\nRating,\nSelect,\nSlider,\nSwitch,\nTimePicker,\nTransfer,\nTreeSelect,\nUpload\n```\n\n----------------------------------------\n\nTITLE: Custom Option Styles - SCSS\nDESCRIPTION: This SCSS code snippet defines styles for the custom options rendered in the Select component. It specifies styling for different states like active, focused, selected, and disabled. The layout is set to flex for proper alignment, and spacing is added for various elements. This code ensures a consistent look and feel for the custom options while considering user interactions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_27\n\nLANGUAGE: scss\nCODE:\n```\n.components-select-demo-renderOptionItem {\n    .custom-option-render {\n        display: flex;\n        font-size: 14px;\n        line-height: 20px;\n        word-break: break-all;\n        padding-left: 12px;\n        padding-right: 12px;\n        padding-top: 8px;\n        padding-bottom: 8px;\n        color: var(--semi-color-text-0);\n        position: relative;\n        display: flex;\n        align-items: center;\n        cursor: pointer;\n        box-sizing: border-box;\n        .option-right {\n            margin-left: 8px;\n            display: inline-flex;\n            align-items: center;\n        }\n        &:active {\n            background-color: var(--semi-color-fill-1);\n        }\n        &-focused {\n            background-color: var(--semi-color-fill-0);\n        }\n        &-selected {\n            //font-weight: 700;\n        }\n        &-disabled {\n            color: var(--semi-color-disabled-text);\n            cursor: not-allowed;\n        }\n        &:first-of-type {\n            margin-top: 4px;\n        }\n        &:last-of-type {\n            margin-bottom: 4px;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TimePicker Format in React\nDESCRIPTION: Shows how to customize the format of the TimePicker component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker format={'HH:mm'} defaultValue={'10:24'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semi Design Components with UMD in Browser\nDESCRIPTION: Example of using Semi Design components via UMD in a browser environment using React and ReactDOM.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\">\n    const { Input, Button, Toast, Icon, Form } = SemiUI;\n    const { IconHome } = SemiIcons;\n    const { IllustrationConstruction } = SemiIllustrations;\n    ReactDOM.render(\n        <div>\n            <Button onClick={() => Toast.warning({ duration: 0, content: 'Semi Design' })}>test</Button>\n            <Input defaultValue=\"semi\" onChange={value => Toast.info('hello semi')}></Input>\n            <IconHome size=\"large\" />\n            <IllustrationConstruction style={{ width: 150, height: 150 }} />\n        </div>,\n        document.getElementById('root')\n    );\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing TreeSelect Component in React\nDESCRIPTION: Shows how to import the TreeSelect component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TreeSelect } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Customizing Transfer Panel Headers in React\nDESCRIPTION: This example demonstrates how to customize the header rendering for both source and selected panels in the Transfer component. It includes displaying item counts and custom buttons for selection and clearing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const data = Array.from({ length: 30 }, (v, i) => {\n        return {\n            label: `选项名称 ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n\n    const renderSourceHeader = (props) => {\n        const { num, showButton, allChecked, onAllClick } = props;\n        return <div style={{ margin: '10px 0 0 10px', height: 24, display: 'flex', alignItems: 'center' }}>\n            <span>共 {num} 项</span>\n            {showButton && <Button\n                theme=\"borderless\"\n                type=\"tertiary\"\n                size=\"small\" \n                onClick={onAllClick}>{ allChecked ? '取消全选' : '全选' }</Button>}\n        </div>;\n    };\n\n    const renderSelectedHeader = (props) => {\n        const { num, showButton, onClear } = props;\n        return <div style={{ margin: '10px 0 0 10px', height: 24, display: 'flex', alignItems: 'center' }}>\n            <span>{num} 项已选</span>\n            {showButton && <Button\n                theme=\"borderless\"\n                type=\"tertiary\"\n                size=\"small\"\n                onClick={onClear}>清空</Button>}\n        </div>;\n    };\n\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            dataSource={data}\n            renderSourceHeader={renderSourceHeader}\n            renderSelectedHeader={renderSelectedHeader}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Popover Component Implementation with Different Child Types\nDESCRIPTION: Demonstrates how to use Popover with different types of children components including functional components, class components, and DOM elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { forwardRef } from 'react';\nimport { Popover, Space } from '@douyinfe/semi-ui';\n\nconst style={ border: '2px solid var(--semi-color-border)', paddingLeft: 4, paddingRight: 4, borderRadius: 4 };\n\nconst FCChildren = forwardRef((props, ref) => {\n    return (<span {...props} ref={ref} style={style}>Functional Component</span>);\n});\n\nclass MyComponent extends React.Component {\n    render() {\n        return (<span {...this.props} style={style}>ClassComponent</span>);\n    }\n};\n\nconst content = (<article style={{ padding: 12 }}> Hi ByteDancer, this is a popover. <br /> We have 2 lines.</article>);\n\nfunction Demo() {\n    return (\n        <Space>\n            <Popover content={content}>\n                <FCChildren />\n            </Popover>\n            <Popover content={content}>\n                <MyComponent />\n            </Popover>\n            <Popover content={content}>\n                <span style={style}>DOM</span>\n            </Popover>\n        </Space>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Content in AutoComplete\nDESCRIPTION: 展示如何为AutoComplete组件设置自定义的空内容，当没有匹配项时显示。结合Empty组件和插图实现更友好的空状态提示。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AutoComplete, Empty } from '@douyinfe/semi-ui';\nimport { IllustrationNoContent } from '@douyinfe/semi-illustrations';\n\n() => {\n    let [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = v => {\n        setLoading(true);\n        setTimeout(() => {\n            if (!v) {\n                setData([]);\n                setLoading(false);\n                return;\n            }\n            setData(() => {\n                const res = Array.from(Array(5)).map(c => Math.random());\n                return res;\n            });\n            setLoading(false);\n        }, 1000);\n    };\n\n    return (\n        <AutoComplete\n            loading={loading}\n            data={data}\n            emptyContent={<Empty style={{ padding: 12, width: 300 }} image={<IllustrationNoContent style={{ width: 150, height: 150 }}/>} description={'暂无内容'} />}\n            onSearch={fetchData}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: TagInput with Duplicate Prevention\nDESCRIPTION: Shows how to prevent duplicate tags using the allowDuplicates property set to false.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput\n        allowDuplicates={false}\n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']} \n        placeholder='Please enter...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Top Slots in React\nDESCRIPTION: Shows how to add top slots to avatars with different sizes and gradient backgrounds.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n()=>{\n    return <div>\n\n        <Avatar color=\"amber\" topSlot={{\n            text: \"LIVE\",\n            gradientStart:\"rgb(255,23,100)\",\n            gradientEnd:\"rgb(237,52,148)\"\n        }}>T</Avatar>\n\n        <Avatar color=\"amber\" size=\"large\" topSlot={{\n            text: \"LIVE\",\n            gradientStart:\"rgb(255,23,100)\",\n            gradientEnd:\"rgb(237,52,148)\"\n        }}>T</Avatar>\n\n        <Avatar color=\"amber\" size=\"extra-large\" topSlot={{\n            text: \"LIVE\",\n            gradientStart:\"rgb(255,23,100)\",\n            gradientEnd:\"rgb(237,52,148)\"\n        }}>T</Avatar>\n    \n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Usage\nDESCRIPTION: Demonstrates basic usage of the Input component with a default value.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <Input defaultValue='hi'></Input>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Semi Design Tags\nDESCRIPTION: Shows various tag implementations with different colors and types including grey, blue, red, green, and ghost variants.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag color='grey' style={tagStyle}> grey tag </Tag>\n<Tag color='blue' style={tagStyle}> blue tag </Tag>\n<Tag color='blue' type='ghost' style={tagStyle}> ghost tag </Tag>\n```\n\n----------------------------------------\n\nTITLE: 引入ScrollList组件\nDESCRIPTION: 从@douyinfe/semi-ui包中导入ScrollList和ScrollItem组件的示例代码。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/scrolllist/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ScrollList, ScrollItem } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Semi Design Input Component\nDESCRIPTION: Shows how to import the Input component from the Semi Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Input } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Disabled Transfer Component\nDESCRIPTION: Example of a disabled Transfer component with default values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n() => {\n    const data = Array.from({ length: 20 }, (v, i) => {\n        return {\n            label: `Item ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            disabled\n            dataSource={data}\n            defaultValue={[2, 4]}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Badge as Standalone Element in React\nDESCRIPTION: Demonstrates how to use the Badge component as a standalone element without wrapping other components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Badge count={5} />\n        <br/>\n        <br/>\n        <Badge count='NEW' theme='light' />\n        <br/>\n        <br/>\n        <Badge count={99} overflowCount={10} type='danger' />\n        <br/>\n        <br/>\n        <span><Badge dot type='primary' /> 进行中 processing</span>\n        <br/>\n        <span><Badge dot type='tertiary' /> 信息 info</span>\n        <br/>\n        <span><Badge dot type='success' /> 成功 success</span>\n        <br/>\n        <span><Badge dot type='warning' /> 提醒 warning</span>\n        <br/>\n        <span><Badge dot type='danger' /> 错误 error</span>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Infinite Scroll\nDESCRIPTION: Implementation of TimePicker with wheel mode scrolling enabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker scrollItemProps={{ mode: \"wheel\", cycled: true }}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual ConfigProvider Value Retrieval using ConfigConsumer\nDESCRIPTION: Shows how to manually access ConfigProvider values using ConfigConsumer component. This is useful for scenarios where direct access to configuration values is needed outside of Semi UI components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useState } from 'react';\nimport { ConfigProvider, ConfigConsumer, Select, DatePicker, TimePicker, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo(props = {}) {\n  const [timeZone, setTimeZone] = useState('GMT+08:00');\n  const defaultTimestamp = 1581599305265;\n  const gmtList = useMemo(() => {\n    const list = [];\n    for (let hourOffset = -11; hourOffset <= 14; hourOffset++) {\n      const prefix = hourOffset >= 0 ? '+' : '-';\n      const hOffset = Math.abs(parseInt(hourOffset, 10));\n      list.push(`GMT${prefix}${String(hOffset).padStart(2, '0')}:00`);\n    }\n    return list;\n  }, []);\n\n  return (\n          <ConfigProvider timeZone={timeZone}>\n            {/*...*/}\n            <ConfigConsumer>\n              {(value) => {\n                return <Typography.Text ellipsis={{ showTooltip: {opts:{style:{minWidth:\"1200px\"}} }}}  style={{ width: 600 }}>\n                  {JSON.stringify(value)}\n                </Typography.Text>\n              }}\n            </ConfigConsumer>\n            {/*...*/}\n          </ConfigProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lerna Globally with NPM\nDESCRIPTION: Command to install Lerna version 6 globally using npm.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global lerna@6\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Pattern for Data Colors\nDESCRIPTION: Pattern showing how color tokens are named in the Semi Design system for VChart. These variables follow the format --semi-color-data-n where n is a number from 0-19 for the 20-color palette.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n--semi-color-data-n\n```\n\n----------------------------------------\n\nTITLE: 导入Checkbox组件\nDESCRIPTION: 从@douyinfe/semi-ui库中导入Checkbox和CheckboxGroup组件，用于创建复选框和复选框组。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Size Customization in React\nDESCRIPTION: Demonstrates how to adjust the size of the Breadcrumb component using the compact property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Breadcrumb compact>\n            <Breadcrumb.Item icon={<IconHome />}></Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Loose</Breadcrumb.Item>\n        </Breadcrumb>\n        <br/>\n        <Breadcrumb compact={false}>\n            <Breadcrumb.Item icon={<IconHome />}></Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Loose</Breadcrumb.Item>\n        </Breadcrumb>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Component in Semi-Design\nDESCRIPTION: Usage of the Timeline component to display a series of events with timestamps and different status types (ongoing, success, error). Each Timeline.Item represents a step in the process with associated time and type indicators.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<Timeline>\n    <Timeline.Item time='2019-07-14 10:35' type='ongoing'>Under review</Timeline.Item>\n    <Timeline.Item time='2019-06-13 16:17' type='success'>Publish successfully</Timeline.Item>\n    <Timeline.Item time='2019-05-14 18:34' type='error'>Audit failure</Timeline.Item>\n</Timeline>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Checkbox Group Layout in React\nDESCRIPTION: Demonstrates how to create a horizontally laid out CheckboxGroup using the direction prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const options = [\n        { label: 'semi', value: 'semi' },\n        { label: 'hotsoon', value: 'hotsoon' },\n        { label: 'pipixia', value: 'pipixia' },\n        { label: 'toutiao', value: 'toutiao' }\n    ];\n    return (\n        <CheckboxGroup options={options} direction='horizontal' aria-label=\"CheckboxGroup demo\" />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: InputNumber Event Handler Types\nDESCRIPTION: TypeScript type definitions for InputNumber component event handlers\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nonBlur: (e: domEvent) => void\nonFocus: (e: domEvent) => void\nonChange: (value: number|string) => void\nonNumberChange: (value: number) => void\n```\n\n----------------------------------------\n\nTITLE: Scaling Resizable Component\nDESCRIPTION: Demonstrates how to scale the Resizable component using the 'scale' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div style={{ width: '500px', height: '60%', transform: 'scale(0.5)', transformOrigin: '0 0' }}>\n            <Resizable\n                style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)' }}\n                defaultSize={{\n                    width: '60%',\n                    height: '60%',\n                }}\n                scale={0.5}\n            >\n                <div style={{ marginLeft: '20%' }}>scale 0.5</div>\n            </Resizable>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lottie Component in React\nDESCRIPTION: Shows how to import the Lottie component from the Semi UI library. This component is supported from version 2.62.0 onwards.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Listing Basic Components in Semi Design\nDESCRIPTION: Lists the basic components available in the Semi Design library, including layout and typography elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: overview\nCODE:\n```\nDivider,\nGrid,\nIcon,\nLayout,\nTypography\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeZone for TimePicker in React\nDESCRIPTION: Demonstrates how to configure the timezone for TimePicker using ConfigProvider and a timezone selector.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo, useState } from 'react';\nimport { ConfigProvider, Select, TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo(props = {}) {\n    const [timeZone, setTimeZone] = useState('GMT+08:00');\n    const defaultTimestamp = 1581599305265;\n    const gmtList = useMemo(() => {\n        const list = [];\n        for (let hourOffset = -11; hourOffset <= 14; hourOffset++) {\n            const prefix = hourOffset >= 0 ? '+' : '-';\n            const hOffset = Math.abs(parseInt(hourOffset, 10));\n            list.push(`GMT${prefix}${String(hOffset).padStart(2, '0')}:00`);\n        }\n        return list;\n    }, []);\n\n    return (\n        <ConfigProvider timeZone={timeZone}>\n            <div style={{ width: 300 }}>\n                <h5 style={{ margin: 10 }}>Select Time Zone:</h5>\n                <Select\n                    placeholder={'Please Choose TimeZone'}\n                    style={{ width: 300 }}\n                    value={timeZone}\n                    showClear={true}\n                    onSelect={value => setTimeZone(value)}\n                >\n                    {gmtList.map(gmt => (\n                        <Select.Option key={gmt} value={gmt}>\n                            {gmt}\n                        </Select.Option>\n                    ))}\n                </Select>\n                <br />\n                <br />\n                <h5 style={{ margin: 10 }}>TimePicker:</h5>\n                <TimePicker\n                    defaultValue={defaultTimestamp}\n                    onChange={(date, dateString) => console.log('DatePicker changed: ', date, dateString)}\n                />\n            </div>\n        </ConfigProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dates Based on Focus in DatePicker Range with React and Semi Design\nDESCRIPTION: This example demonstrates how to disable dates in a DatePicker range component based on the focus state. It uses the 'disabledDate' prop with the 'rangeInputFocus' option.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport * as dateFns from 'date-fns';\n\nfunction App() {\n    const today = new Date();\n    const disabledDate = (date, options) => {\n        const { rangeInputFocus } = options;\n        const baseDate = dateFns.set(today, { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });\n        if (rangeInputFocus === 'rangeStart') {\n            const disabledStart = dateFns.subDays(baseDate, 2);\n            const disabledEnd = dateFns.addDays(baseDate, 2);\n            return disabledStart <= date && date <= disabledEnd;\n        } else if (rangeInputFocus === 'rangeEnd') {\n            const disabledStart = dateFns.subDays(baseDate, 3);\n            const disabledEnd = dateFns.addDays(baseDate, 3);\n            return disabledStart <= date && date <= disabledEnd;\n        } else {\n            return false;\n        }\n    };\n\n    return (\n        <div>\n            <h4>{`开始日期禁用今天前2日和后2日，结束日期禁用今天前3天和后3天`}</h4>\n            <DatePicker motion={false} type='dateRange' disabledDate={disabledDate} defaultPickerValue={today} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Flex元素排序 (React)\nDESCRIPTION: 使用Col的order属性改变Flex布局中元素的排序。展示了如何通过order值调整列的顺序。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div className=\"grid\">\n        <Row type=\"flex\">\n            <Col span={6} order={4}><div className=\"col-content\">col-4</div></Col>\n            <Col span={6} order={3}><div className=\"col-content\">col-3</div></Col>\n            <Col span={6} order={2}><div className=\"col-content\">col-2</div></Col>\n            <Col span={6} order={1}><div className=\"col-content\">col-1</div></Col>\n        </Row>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a SortableItem Component with useSortable Hook\nDESCRIPTION: A reusable component that makes individual items sortable. It uses the useSortable hook from dnd-kit to handle drag interactions and applies appropriate transforms and transitions for smooth animations during sorting.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: JSX\nCODE:\n```\nfunction SortableItem({ id, renderItem }) {\n    const {\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        active,\n    } = useSortable({\n        id,\n    });\n\n    const sortableHandle = useCallback((WrapperComponent) => {\n        return () => <span {...listeners} style={{ lineHeight: 0 }}><WrapperComponent /></span>;\n    }, [listeners]);\n\n    const wrapperStyle = {\n        transform: cssDndKit.Transform.toString({\n            ...transform,\n            scaleX: 1,\n            scaleY: 1,\n        }),\n        transition: transition,\n        opacity: active && active.id === id ? 0 : undefined,\n    };\n\n    return <div \n        ref={setNodeRef}\n        style={wrapperStyle}\n    >\n        {renderItem({ id, sortableHandle })}\n    </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs with Icons in React\nDESCRIPTION: Shows how to add icons to tab labels using the Semi UI icon components within the Tabs component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\nimport { IconFile, IconGlobe, IconHelpCircle } from '@douyinfe/semi-icons';\n\n() => (\n    <Tabs>\n        <TabPane\n            tab={\n                <span>\n                    <IconFile />\n                    文档\n                </span>\n            }\n            itemKey=\"1\"\n        >\n            文档\n        </TabPane>\n        <TabPane\n            tab={\n                <span>\n                    <IconGlobe />\n                    快速起步\n                </span>\n            }\n            itemKey=\"2\"\n        >\n            快速起步\n        </TabPane>\n        <TabPane\n            tab={\n                <span>\n                    <IconHelpCircle />\n                    帮助\n                </span>\n            }\n            itemKey=\"3\"\n        >\n            帮助\n        </TabPane>\n    </Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing TimePicker Component in React\nDESCRIPTION: Shows how to import the TimePicker component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TimePicker } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Disabled Transfer Component Implementation\nDESCRIPTION: 展示了如何创建一个禁用状态的穿梭框。通过设置disabled属性为true，使整个穿梭框变为不可交互状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer } from '@douyinfe/semi-ui';\n() => {\n    const data = Array.from({ length: 20 }, (v, i) => {\n        return {\n            label: `选项名称 ${i}`,\n            value: i,\n            disabled: false,\n            key: `key-${i}`,\n        };\n    });\n    return (\n        <Transfer\n            style={{ width: 568, height: 416 }}\n            disabled\n            dataSource={data}\n            defaultValue={[2, 4]}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Spin Component with Custom Indicator\nDESCRIPTION: Shows how to customize the Spin component's appearance by providing a custom indicator element using the indicator property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\nimport { IconLoading } from '@douyinfe/semi-icons';\n\n() => (\n    <div style={{ marginLeft: 30 }}>\n        <div>A spin with customized indicator.</div>\n        <Spin indicator={<IconLoading />} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Input Area Using detailProps in Semi Design Chat\nDESCRIPTION: This snippet shows how to customize the input area using the detailProps object to access individual UI components like uploadNode, inputNode, and sendNode. It creates a custom input container with specific styling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomInputRender(props) {\n     const { detailProps } = props;\n    const { clearContextNode, uploadNode, inputNode, sendNode, onClick } = detailProps;\n   \n    return <div style={{margin: '8px 16px', display: 'flex', flexDirection:'row',\n      alignItems: 'flex-end', borderRadius: 16,padding: 10, border: '1px solid var(--semi-color-border)'}}\n      onClick={onClick} \n    >\n        {uploadNode}\n        {inputNode}\n        {sendNode}\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider in React\nDESCRIPTION: 展示垂直方向的 Slider 组件，包括正向和反向的单滑块和范围滑块。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical verticalReverse></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical range defaultValue={[20, 60]}></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical verticalReverse range defaultValue={[20, 60]}></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical range marks={{ 20: '20°C', 40: '40°C' }} step={10} defaultValue={[20, 60]}></Slider>\n        </div>\n        <div style={{ height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block' }}>\n            <Slider vertical verticalReverse range marks={{ 20: '20°C', 40: '40°C' }} step={10} defaultValue={[20, 60]}></Slider>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Card Group with Adjustable Spacing\nDESCRIPTION: Shows how to create a card group with dynamic spacing controlled by a slider component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Card, CardGroup, Typography, Slider } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n    const [ spacing, setSpacing ] = useState(12);\n\n    return (\n        <>\n            <Text>滑动调节 Card 间距</Text>\n            <Slider \n                defaultValue={12}\n                max={40}\n                min={10}\n                style={{ width: 360 }}\n                onChange={v=> setSpacing(v)}\n            />\n            <br />\n            <CardGroup spacing={spacing}>\n                {\n                    new Array(8).fill(null).map((v, idx)=>(\n                        <Card \n                            key={idx}\n                            shadows='hover'\n                            title='Card title'\n                            headerLine={false}\n                            style={{ width: 260 }}\n                            headerExtraContent={\n                                <Text link>\n                                    More\n                                </Text>\n                            }\n                        >\n                            <Text>Card content</Text>\n                        </Card>\n                    ))\n                }\n            </CardGroup>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring theme with component-level variables\nDESCRIPTION: This JavaScript snippet illustrates how to configure the `theme` option in SemiWebpackPlugin to apply component-level variable changes.  The `name` field specifies the theme package, and `include` points to the local.scss file containing the customized variables.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/customize-theme/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    theme: {\n        name:'Your theme npm package name',\n        include:'~Your theme npm package name/scss/local.scss'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Usage\nDESCRIPTION: Simple example of using a Radio component with a label and ARIA properties.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <Radio aria-label=\"单选示例\" name=\"demo-radio\">Radio</Radio>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of HotKeys Component\nDESCRIPTION: Demonstrates how to use the 'render' prop to completely customize the rendering of the HotKeys component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/hotkeys/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { HotKeys, Modal, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [visible, setVisible] = useState(false);\n  const showDialog = () => {\n      setVisible(true);\n  };\n  const handleOk = () => {\n      setVisible(false);\n  };\n  const handleCancel = () => {\n      setVisible(false);\n  };\n  const hotKeys = [HotKeys.Keys.Control, HotKeys.Keys.R]\n  \n  const newHotKeys = <Tag>Press Ctrl+R to Open Modal</Tag>\n  return (\n    <div>\n      <HotKeys hotKeys={hotKeys} onHotKey={showDialog} render={newHotKeys}></HotKeys>\n      <Modal\n          title=\"Dialog\"\n          visible={visible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n      >\n          This is the Modal opened by hotkey: {hotKeys.join('+')}.\n      </Modal>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Highlight Tag\nDESCRIPTION: Shows how to change the default highlight tag (mark) to a different HTML element using the component prop. This example uses a strong tag instead.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Highlight } from '@douyinfe/semi-ui';\n\n() => {\n    const sourceString = 'From Semi Design，To Any Design. Quickly define your design system and apply it to design drafts and code';\n    const searchWords = ['Any Design', 'Semi Design'];\n    \n    return (<h2>\n        <Highlight\n            sourceString={sourceString}\n            searchWords={searchWords}\n            component='strong'\n        />\n    </h2>);\n};\n```\n\n----------------------------------------\n\nTITLE: Badge Component with Maximum Value in React\nDESCRIPTION: Shows how to use the overflowCount property to cap the number value displayed on the badge.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div>\n            <Badge count={99} >\n                <Avatar color='teal' shape='square' style={style}>ZH</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={100} >\n                <Avatar color='teal' shape='square' style={style}>HS</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={99} overflowCount={10} >\n                <Avatar color='green' shape='square' style={style}>DY</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={1000} overflowCount={999} >\n                <Avatar color='green' shape='square' style={style}>TT</Avatar>\n            </Badge>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Nav.Header Component Properties in Markdown\nDESCRIPTION: This snippet defines the properties for the Nav.Header subcomponent using a markdown table. It includes properties such as children, className, link, linkOptions, logo, style, and text.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties  | Description                                                                                 | Type                | Default | Version |\n| ----------- | ------------------------------------------------------------------------------------------- | ------------------- | ------- | ------- |\n| children    | Sub element                                                                                 | ReactNode           |         |         |\n| className   | Outermost style name                                                                        | string              |         |         |\n| link        | Navigation item href link, when imported, the navigation item will be wrapped with an a tag | string              | -       |         |\n| linkOptions | Parameters transparently passed to the a tag                                                | object              | -       |         |\n| logo        | Logo, can be a string or component                                                          | string \\| ReactNode |         |         |\n| style       | Outermost style                                                                             | object              |         |         |\n| text        | Logo copy, which can be a string or component                                               | string \\| ReactNode |         |         |\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Locally\nDESCRIPTION: Command to execute Cypress end-to-end tests using Yarn package manager. Runs all test cases defined in the integration folder.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/cypress/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:cy\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Component Methods in Markdown\nDESCRIPTION: This code snippet defines the methods available on the TimePicker component instance. It includes the blur() and focus() methods for removing and obtaining focus respectively.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Semi Design\nDESCRIPTION: Shows how to import the Button and SplitButtonGroup components from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, SplitButtonGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Tag Shape Options in Semi Design\nDESCRIPTION: Demonstrates the different shape options for tags: square (default) and circle, with different size and color variations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => (\n    <Space>\n        <Tag size=\"small\" shape='circle' color='amber'> small circle tag </Tag>\n        <Tag size=\"large\" shape='circle' color='violet'> large circle tag </Tag>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: 图片基本用法 - React\nDESCRIPTION: 展示 Image 组件的基本用法，通过 src 指定图片路径，width 和 height 设置图片尺寸，默认具有预览功能。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@douyinfe/semi-ui';\n\n() => (  \n    <Image \n        width={360}\n        height={200}\n        src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg\"\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: DatePicker Type Definitions\nDESCRIPTION: TypeScript type definitions for the DatePicker component including value types, date types, string types and trigger render props interface.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype BaseValueType = string | number | Date;\ntype ValueType = BaseValueType | BaseValueType[];\ntype DateType = Date | Date[];\ntype StringType = string | string[];\ntype TriggerRenderProps = {\n    value?: ValueType;\n    inputValue?: string;\n    placeholder?: string | string[];\n    autoFocus?: boolean;\n    size?: InputSize;\n    disabled?: boolean;\n    inputReadOnly?: boolean;\n    componentProps?: DatePickerProps;\n    [x: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Skeleton.Avatar Component Properties Table\nDESCRIPTION: Markdown table describing the properties of the Skeleton.Avatar component, including className, size, style, and shape attributes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 类名 | string | - |\n| size | 设置头像的大小，支持 `extra-extra-small`, `extra-small`、`small`、`medium`、`large`、`extra-large` | string | `medium` |\n| style | 样式 | CSSProperties | - |\n| shape | 指定头像的形状，支持 `circle`、`square` | string | `circle` |\n```\n\n----------------------------------------\n\nTITLE: Customizing Resize Handles with Custom Elements\nDESCRIPTION: Shows how to customize the resize handles using the handleNode prop. This example replaces the right handle with a custom component containing an IconTransfer element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable, Button } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Resizable\n        style={{ marginLeft: '20%', backgroundColor: 'rgba(var(--semi-grey-1), 1)', border: 'var(--semi-color-border) 1px solid' }}\n        defaultSize={{\n          width: '60%',\n          height: 300,\n        }}\n        handleNode={{\n          right: <div style={{\n            height: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            width: 'fit-content',\n          }}><IconTransfer /></div>\n        }}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          right\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Component in Semi Design\nDESCRIPTION: Shows how to import the Tag component from the Semi Design UI library for use in React applications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tag } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Prefix Class with Semi Webpack Plugin\nDESCRIPTION: Demonstrates how to modify the default CSS prefix class in webpack configuration for Semi Design components. This allows changing the default '.semi-xx' prefix to a custom prefix like 'imes'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst SemiWebpackPlugin = require('@douyinfe/semi-webpack-plugin').default;\nmodule.exports = {\n    plugins: [new SemiWebpackPlugin({ prefixCls: 'imes' })],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PinCode Component in JSX\nDESCRIPTION: Shows how to import the PinCode component from the Semi UI library. Available from version 2.62.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinCode } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Nav RenderWrapper\nDESCRIPTION: Type definition for the renderWrapper prop that allows custom rendering of navigation items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n(data: { itemElement: ReactElement, isSubNav: boolean, isInSubNav: boolean, props: SubNavProps | ItemProps }) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: Paragraph Component Implementation\nDESCRIPTION: Shows paragraph component with different line spacing options\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Paragraph, Title } = Typography;\n    return (\n        <div>\n            <Title heading={5}>默认行距</Title>\n            <Paragraph>\n                Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n            </Paragraph>\n            <br />\n            <Title heading={5}>宽松行距</Title>\n            <Paragraph spacing=\"extended\">\n                Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n            </Paragraph>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Copyable Configuration Properties\nDESCRIPTION: Markdown table detailing the configuration options for the copyable functionality, including custom content and callback functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions | Type | Default | Version |\n| ---------- | --------------------------------------- | ---------------------------------------------- | ------- | ------- |\n```\n\n----------------------------------------\n\nTITLE: InputNumber Size Variants\nDESCRIPTION: Demonstrates different size options available for InputNumber component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div style={{ width: 180 }}>\n                <label>size=default</label>\n                <InputNumber />\n                <br/><br/>\n\n                <label>size=large</label>\n                <InputNumber size=\"large\" />\n                <br/><br/>\n\n                <label>size=small</label>\n                <InputNumber size=\"small\" />\n                <br/>\n\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining renderHintBox Type in Semi Design Chat Component\nDESCRIPTION: TypeScript definition for the renderHintBox function prop used in the Chat component. This type defines the parameters that will be passed to the custom render function for hint boxes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ntype renderHintBox = (props: {content: string; index: number,onHintClick: () => void}) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Importing Locale Provider in a React Component\nDESCRIPTION: This snippet shows how to import the locale settings for British English and utilize the LocaleProvider from the Semi UI library to wrap an application component, enabling multilingual support. The 'en_GB' locale is imported from the Semi UI locale source and applied to the LocaleProvider component. Required dependencies include '@douyinfe/semi-ui'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/locale/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\nimport { LocaleProvider } from '@douyinfe/semi-ui';\n\nreturn (\n    <LocaleProvider locale={en_GB}>\n        <App/>\n    </LocaleProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: VChart Theme Initialization Options Type Definition\nDESCRIPTION: TypeScript interface defining the configuration options for VChart Semi theme initialization\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IInitVChartSemiThemeOption {\n  /** 初始亮暗色模式 */\n  defaultMode?: 'light' | 'dark';\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BackTop Component in React\nDESCRIPTION: Shows how to import the BackTop component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/backtop/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BackTop } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Anchor with Auto Collapse in React\nDESCRIPTION: Shows the Anchor component with auto collapse feature enabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                autoCollapse={true}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#动态展示\" title=\"1. 动态展示\">\n                    <Anchor.Link href=\"#组件\" title=\"1.1 组件\">\n                        <Anchor.Link href=\"#头像\" title=\"1.1.1 Avatar\" />\n                        <Anchor.Link href=\"#按钮\" title=\"1.1.2 Button\" />\n                        <Anchor.Link href=\"#图标\" title=\"1.1.3 Icon\" />\n                    </Anchor.Link>\n                    <Anchor.Link href=\"#物料\" title=\"1.2 物料\" />\n                    <Anchor.Link href=\"#主题商店\" title=\"1.3 主题商店\" />\n                </Anchor.Link>\n                <Anchor.Link href=\"#设计语言\" title=\"2. 设计语言\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled Radio States\nDESCRIPTION: Example showing disabled Radio components in both checked and unchecked states, with a toggle button to change the disabled property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Radio, Button } from '@douyinfe/semi-ui';\n\n() => {\n    const [disabled, setDisabled] = useState(true);\n    const toggleDisabled = () => {\n        setDisabled(!disabled);\n    };\n    return (\n        <div>\n            <Radio defaultChecked={false} disabled={disabled} aria-label=\"单选示例\" name=\"demo-radio-disabled\">\n                Disabled\n            </Radio>\n            <br />\n            <Radio defaultChecked disabled={disabled} aria-label=\"单选示例\" name=\"demo-radio-defaultChecked-disabled\">\n                Disabled\n            </Radio>\n            <div style={{ marginTop: 20 }}>\n                <Button type=\"primary\" onClick={toggleDisabled}>\n                    Toggle disabled\n                </Button>\n            </div>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Clearing in Semi Design Chat\nDESCRIPTION: Shows how to implement context clearing functionality in the Chat component using showClearContext prop and clearContext method through ref.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport { Chat, Radio } from '@douyinfe/semi-ui';\n\nconst defaultMessage = [\n    {\n        role: 'system',\n        id: '1',\n        createAt: 1715676751919,\n        content: \"Hello, I'm your AI assistant.\",   \n    },\n    {\n        role: 'user',\n        id: '2',\n        createAt: 1715676751919,\n        content: \"介绍一下 semi design\", \n    },\n    {\n        role: 'assistant',\n        id: '3',\n        createAt: 1715676751919,\n        content: 'Semi Design 是由抖音前端团队和MED产品设计团队设计、开发并维护的设计系统',\n    }\n];\n\n// ... rest of the code\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in React\nDESCRIPTION: Shows how to import the Avatar and AvatarGroup components from the Semi-UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AvatarGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Banner Component in React\nDESCRIPTION: Shows how to import the Banner component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Banner } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing Semi-UI with pnpm\nDESCRIPTION: Command to install Semi-UI package using pnpm package manager.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @douyinfe/semi-ui\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in Semi Design\nDESCRIPTION: Shows how to import the Divider component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/divider/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Divider } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Using Notification Hook\nDESCRIPTION: Hook-based approach for creating notifications with context access\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nNotification.useNotification\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Usage Example\nDESCRIPTION: Shows the basic implementation of a Popover component with a Tag as trigger element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/popover/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Popover, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <Popover\n            content={\n                <article style={{ padding: 12 }}>\n                    Hi ByteDancer, this is a popover.\n                    <br /> We have 2 lines.\n                </article>\n            }\n        >\n            <Tag>Hover here</Tag>\n        </Popover>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Badge in React\nDESCRIPTION: Demonstrates how to set the position of the Badge component using the position prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div>\n            <Badge count='VIP' position='rightTop' type='danger'>\n                <Avatar color='amber' shape='square' style={style}>ZH</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='VIP' position='rightBottom' type='danger'>\n                <Avatar color='amber' shape='square' style={style}>HS</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='VIP' position='leftTop' type='danger'>\n                <Avatar color='orange' shape='square' style={style}>DY</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count='VIP' position='leftBottom' type='danger'>\n                <Avatar color='orange' shape='square' style={style}>TT</Avatar>\n            </Badge>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing HotKeys Component in React\nDESCRIPTION: Shows how to import the HotKeys component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/hotkeys/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotKeys } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Transfer Header Props\nDESCRIPTION: This snippet defines TypeScript interfaces for the props passed to custom header rendering functions in the Transfer component. It includes properties for item counts, button visibility, and callback functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ntype SourceHeaderProps = {\n    num: number; // 数据总数或筛选结果数目\n    showButton: boolean; // 是否展示全选/取消全选按钮\n    allChecked: boolean; // 当前数据是否已全选\n    onAllClick: () => void // 点击全选/取消全选按钮后应调用的函数\n}\n\ntype SelectedHeaderProps = {\n    num: number; // 已选中数据总数\n    showButton: boolean; // 是否展示清空按钮\n    onClear: () => void // 点击清空按钮后应调用的函数\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Carousel Arrow Styles in React with Semi Design\nDESCRIPTION: This snippet shows how to customize the arrow styles and click events of a Carousel component using the arrowProps property. It creates a Carousel with custom arrow icons and content slides.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Carousel, Typography, Space } from '@douyinfe/semi-ui';\nimport { IconArrowLeft, IconArrowRight } from \"@douyinfe/semi-icons\";\n\nclass CarouselDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.imgList = [\n            'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-1.png',\n            'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-2.png',\n            'https://lf3-static.bytednsdoc.com/obj/eden-cn/hjeh7pldnulm/SemiDocs/bg-3.png',\n        ];\n        this.textList = [\n            ['Semi Design System Management', 'From Semi Design, To Any Design', 'Quickly define your design system and apply it to design drafts and code'],\n            ['Semi Material', 'Customized components for business scenarios, support online preview and debugging', 'Content co-authored by Semi Design users'],\n            ['Semi Template', 'Efficient Design2Code converts design into real code in seconds', 'One-click conversion of massive page template front-end code'],\n        ];\n        this.arrowProps = {\n            leftArrow: { children: <IconArrowLeft size='large'/> },\n            rightArrow: { children: <IconArrowRight size='large'/> },\n        };\n    };\n    \n    renderLogo() {\n        return (\n            <img src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/semi_logo.svg' alt='semi_logo' style={{ width: 87, height: 31 }} />\n        );\n    };\n\n    render() {\n        const style = {\n            width: '100%',\n            height: '400px',\n        };\n\n        const titleStyle = { \n            position: 'absolute', \n            top: '100px', \n            left: '100px'\n        };\n\n        const colorStyle = {\n            color: '#1C1F23'\n        };\n\n        return (\n            <div>\n                <Carousel \n                    theme='dark'\n                    style={style} \n                    autoPlay={false} \n                    arrowProps={this.arrowProps}\n                >\n                    {\n                        this.imgList.map((src, index) => {\n                            return (\n                                <div key={index} style={{ backgroundSize: 'cover', backgroundImage: `url('${src}')` }}>\n                                    <Space vertical align='start' spacing='medium' style={titleStyle}>\n                                        {this.renderLogo()}\n                                        <Typography.Title heading={2} style={colorStyle}>{this.textList[index][0]}</Typography.Title>\n                                        <Space vertical align='start'>\n                                            <Typography.Paragraph style={colorStyle}>{this.textList[index][1]}</Typography.Paragraph>\n                                            <Typography.Paragraph style={colorStyle}>{this.textList[index][2]}</Typography.Paragraph>\n                                        </Space>\n                                    </Space>\n                                </div>\n                            );\n                        })\n                    }\n                </Carousel>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Arrow Navigation in Collapsible Tabs\nDESCRIPTION: Implements custom arrow rendering for collapsible tabs with dropdown functionality. Shows how to handle overflow items and custom navigation controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane, Dropdown } from '@douyinfe/semi-ui';\n\n() => {\n    const [activeKey, setActiveKey] = useState('Tab-0');\n    const renderArrow = (items, pos, handleArrowClick, defaultNode) => {\n        const style = {\n            width: 32,\n            height: 32,\n            margin: '0 12px',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderRadius: '100%',\n            background: 'rgba(var(--semi-grey-1), 1)',\n            color: 'var(--semi-color-text)',\n            cursor: 'pointer',\n        };\n        return (\n            <Dropdown\n                render={\n                    <Dropdown.Menu>\n                        {items.map(item => {\n                            return (\n                                <Dropdown.Item onClick={() => setActiveKey(item.itemKey)}>{item.itemKey}</Dropdown.Item>\n                            );\n                        })}\n                    </Dropdown.Menu>\n                }\n            >\n                {pos === 'start' ? (\n                    <div style={style} onClick={handleArrowClick}>\n                        ←\n                    </div>\n                ) : (\n                    <div style={style} onClick={handleArrowClick}>\n                        →\n                    </div>\n                )}\n            </Dropdown>\n        );\n    };\n\n    return (\n        <Tabs\n            renderArrow={renderArrow}\n            style={{ width: '50%', margin: '20px' }}\n            activeKey={activeKey}\n            type=\"card\"\n            collapsible\n            onChange={k => setActiveKey(k)}\n        >\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                    Content of card tab {i}\n                </TabPane>\n            ))}\n        </Tabs>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Transfer Component Type Definitions\nDESCRIPTION: TypeScript interfaces defining the props for source and selected panels in the Transfer component, including callbacks and data structures\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SourcePanelProps {\n   value: Array<string|number>;\n   loading: boolean;\n   noMatch: boolean;\n   filterData: Array<Item>\n   sourceData: Array<Item>;\n   allChecked: boolean;\n   showNumber: number;\n   inputValue: string;\n   onSearch: (searchString: string) => any;\n   onAllClick: () => void;\n   onSelectOrRemove: (item: Item) => any;\n   onSelect: (value:Array<string|number>)=>void;\n   selectedItem: Map;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Tree Properties in TypeScript\nDESCRIPTION: This snippet defines the default properties for the tree component used in the Tree Transfer. It specifies options like multiple selection, strict disabling, leaf-only selection, and tree node filtering.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Default TreeProps {\n    multiple:true,\n    disableStrictly:true,\n    leafOnly:true,\n    filterTreeNode:true,\n    searchRender:flase,\n\n}\n```\n\n----------------------------------------\n\nTITLE: TagInput with Auto-Complete on Blur\nDESCRIPTION: Demonstrates using the addOnBlur property to automatically create a tag from the current input value when the blur event is triggered.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput\n        addOnBlur={true}\n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']} \n        placeholder='Please enter...'\n        onChange={v => console.log(v)}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Empty Component in JSX\nDESCRIPTION: Shows how to import the Empty component from the Semi-design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/empty/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Empty } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Semi\nDESCRIPTION: This code snippet demonstrates how to configure `next.config.js` to use the `@douyinfe/semi-next` extension. It imports the extension and wraps the custom Next.js configuration, allowing the extension to modify the build process to exclude CSS references from Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-next/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n\nconst semi = require('@douyinfe/semi-next').default({/* the extension options */});\nmodule.exports = semi({\n    // your custom Next.js configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying All Notifications\nDESCRIPTION: Method to globally destroy all active notifications\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nNotification.destroyAll()\n```\n\n----------------------------------------\n\nTITLE: Tag Component Properties - Semi Design React\nDESCRIPTION: API documentation for Tag component showing supported properties like avatarShape, color, size, closable etc. with their types and default values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性  | 说明        | 类型   | 默认值 | 版本 |\n|-------|-------------|-----------------|--------|--------|\n| avatarShape | 头像 Tag 形状，可选 `square` 和 `circle` | string |  `square`   | 1.6.0|\n| avatarSrc | 头像的资源地址 | string |  -   | 1.6.0 |\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Bundle in Remix Root Component\nDESCRIPTION: Example of configuring the CSS bundle in the root component of a Remix application for Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// root.tsx\nimport { cssBundleHref } from \"@remix-run/css-bundle\";\n\nexport const links = () => {\n  return [\n    ...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n  ];\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CodeHighlight Component in React\nDESCRIPTION: Shows how to import the CodeHighlight component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Defining Value Types in TypeScript\nDESCRIPTION: This TypeScript snippet defines the types for values used in a DatePicker component. It includes a general value type that can be either a single or an array of date values, supporting various formats like string, number, and Date objects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/datePicker/contributing.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/** 范围选择时为数组 */\\nexport type ValueType = BaseValueType | BaseValueType[];\\nexport type BaseValueType = string | number | Date;\"\n```\n\n----------------------------------------\n\nTITLE: Importing TimePicker Component in React\nDESCRIPTION: Basic import statement for the TimePicker component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TimePicker } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Hover Page Select Pagination - React/JSX\nDESCRIPTION: Shows pagination with hover page select functionality\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <Pagination total={90} size=\"small\" hoverShowPageSelect></Pagination>\n);\n```\n\n----------------------------------------\n\nTITLE: Manual Close Notifications in React\nDESCRIPTION: Demonstrates how to create notifications that can only be closed manually using the Semi-Design Notification component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => {\n    let opts = {\n        content: 'Not auto close',\n        title: 'Hi',\n        duration: 0,\n    };\n    const [ids, setIds] = useState([]);\n    function show() {\n        let id = Notification.info(opts);\n        setIds([...ids, id]);\n    }\n    function hide() {\n        let idsTmp = [...ids];\n        Notification.close(idsTmp.shift());\n        setIds(idsTmp);\n    }\n    return (\n        <>\n            <Button type=\"primary\" onClick={show}>\n                Show Notification\n            </Button>\n            <br />\n            <br />\n            <Button type=\"primary\" onClick={hide}>\n                Hide Notification\n            </Button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Anchor Component in React\nDESCRIPTION: Shows how to import the Anchor component from Semi UI.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Anchor } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component in React\nDESCRIPTION: Shows how to import the Progress component from Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/progress/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Progress } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: JsonViewer Custom Render Rule Type Definition\nDESCRIPTION: Type definition for custom rendering rules that allow matching and rendering of specific content in the JsonViewer\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  match: string | RegExp | (value: string, path: string) => boolean;\n  render: (content: string) => React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Semi-UI with yarn\nDESCRIPTION: Command to install Semi-UI package using yarn package manager.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @douyinfe/semi-ui\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component in React\nDESCRIPTION: Shows how to import the Steps component from the Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps } from '@douyinfe/semi-ui';\nconst Step = Steps.Step;\n```\n\n----------------------------------------\n\nTITLE: 小尺寸 DatePicker - React\nDESCRIPTION: 使用 density 属性控制日期面板的尺寸，展示了日期时间选择器和日期范围选择器的小尺寸版本。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div>\n            <DatePicker type=\"dateTime\" density=\"compact\" />\n            <br />\n            <br />\n            <DatePicker type=\"dateRange\" density=\"compact\" style={{ width: 260 }} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image Components in React\nDESCRIPTION: Shows how to import the Image and ImagePreview components from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Enumerating Navigation Components in Semi Design\nDESCRIPTION: Lists the navigation-related components available in the Semi Design library, including various types of menus and navigation aids.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: overview\nCODE:\n```\nAnchor,\nBackTop,\nBreadcrumb,\nNavigation,\nPagination,\nSteps,\nTabs,\nTree\n```\n\n----------------------------------------\n\nTITLE: 引入 Image 和 ImagePreview 组件 - React\nDESCRIPTION: 展示如何从 Semi UI 库中引入 Image 和 ImagePreview 组件。这些组件从 v2.20.0 版本开始支持。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/image/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image, ImagePreview } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Defining Nav Component Properties in Markdown\nDESCRIPTION: This snippet defines the properties for the main Nav component using a markdown table. It includes properties such as tooltipHideDelay, tooltipShowDelay, limitIndent, and toggleIconPosition.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| tooltipHideDelay    | The latency hidden by tooltip is valid when it is true in MS                                                                                                                               | number                                                                                                                                                                   | 100       |\n| tooltipShowDelay    | The delay displayed by tooltip is valid when it is true in MS                                                                                                                              | number                                                                                                                                                                   | 0         |\n| limitIndent         | To lift the indentation limit, you can use level to customize the indentation of navigation items. The horizontal mode can only be true >=1.27.0                                           | boolean                                                                                                                                                                  | true      |\n| toggleIconPosition  | Parent navigation item arrow position with child navigation items >=1.27.0                                                                                                                 | 'left' \\| 'right'                                                                                                                                                        | 'right'   |\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Breadcrumb.Item Properties\nDESCRIPTION: Property definitions for individual Breadcrumb items including link destinations, icons, and event handlers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions | type | Default | version |\n| ---------- | ---------------------- | -------------------------------- | ------- | ------- |\n| href | Destinations for links | string | - | |\n| icon | Displayed icon | ReactNode | - | |\n| onClick | Click event | function (item: Route, e: Event) | - | 0.27.0 |\n| separator | Separator, used to override parent separator | ReactNode | - | 1.16.0 |\n| noLink | To remove hover and active effect on an item | boolean | false | 1.16.0 |\n```\n\n----------------------------------------\n\nTITLE: Cloning the Semi Design Repository in Bash\nDESCRIPTION: Instructions for forking and cloning the Semi Design repository to start contributing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/semi-design.git\ncd semi-design\n```\n\n----------------------------------------\n\nTITLE: Offset Range Utility for Token Processing\nDESCRIPTION: Utility class for managing text offset ranges, supporting operations like merging, intersection, and containment checks to control token reanalysis\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-json-viewer-core/src/tokens/index.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// offsetRange.ts\n// Provides range manipulation utilities for precise token processing\n```\n\n----------------------------------------\n\nTITLE: Anchor with Tooltip in React\nDESCRIPTION: Shows the Anchor component with tooltip feature enabled.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                showTooltip={true}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#显示工具提示\" title=\"工具提示是一个有用的工具，它可以在文字缩略时展示全部内容。\" />\n                <Anchor.Link href=\"#组件\" title=\"组件\" />\n                <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n                <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n                <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Image Cropper Type Definitions in TypeScript\nDESCRIPTION: TypeScript interface definitions showing the available properties and methods for the image cropper component. Includes controls for aspect ratio, zoom levels, rotation, shape options and styling customizations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImageCropperProps {\n  aspectRatio?: number;\n  className?: string;\n  cropperBoxClassName?: string;\n  cropperBoxStyle?: CSSProperties;\n  defaultAspectRatio?: number;\n  imgProps?: object;\n  fill?: string;\n  maxZoom?: number;\n  minZoom?: number;\n  onZoomChange?: (zoom: number) => void;\n  preview?: () => HTMLElement;\n  rotate?: number;\n  shape?: 'rect' | 'round' | 'roundRect';\n  src?: string;\n  showResizeBox?: boolean;\n  style?: CSSProperties;\n  zoom?: number;\n  zoomStep?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Sizing in Resizable Component\nDESCRIPTION: Shows how to implement controlled sizing for the Resizable component using the 'size' prop and 'onChange' callback.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Resizable } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [size, setSize] = useState({ width: 200, height: 100 });\n  const onButtonClick = () => {\n    let realSize = { width: size.width + 10, height: size.height + 10 };\n    setSize(realSize);\n  };\n  const onChange = (s) => { setSize(s); }\n\n  return (\n    <div style={{ width: '500px', height: '60%' }}>\n      <Button onClick={onButtonClick}>set += 10</Button>\n      <Resizable\n        style={{ backgroundColor: 'rgba(var(--semi-grey-1), 1)', marginTop: '10px' }}\n        size={size}\n        onChange={onChange}\n      >\n        <div style={{ marginLeft: '20%' }}>\n          受控\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Chat Component in Semi Design\nDESCRIPTION: Basic import statement for the Chat component from Semi Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chat } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Ellipsis Configuration Properties\nDESCRIPTION: Markdown table specifying the configuration options for the ellipsis feature, including collapse/expand behavior and tooltip settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions | type | Default |\n| ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | ---------- |\n```\n\n----------------------------------------\n\nTITLE: Animation Instance Creation and Event Binding\nDESCRIPTION: Example of creating an Animation instance with custom props and config, and binding event handlers for various animation lifecycle events.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Animation } from '@douyinfe/semi-animation';\n// ...\nconst animation = new Animation(\n    {\n        from: { value1: 0, value2: 1 /* ... */ },\n        to: { value1: 1, value2: 2 /* ... */ },\n    },\n    {\n        duration: 1000, // After passing in duration, the default is linear interpolation\n    }\n);\n\nanimation.on('frame', currentState => {\n    // currentState: is the state value object at the current moment\n    // { value1: xxx, value2: xxx, ... }\n});\n\n// The callbacks such as start and pause are the same as the frame above, and the parameters are also the same.\nanimation.on('start', currentState => { /* ... */ });\nanimation.on('pause', currentState => { /* ... */ });\nanimation.on('resume', currentState => { /* ... */ });\nanimation.on('rest', currentState => { /* ... */ });\nanimation.on('stop', currentState => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Importing Timeline Component\nDESCRIPTION: Basic import statement for the Timeline component from Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Timeline } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Disabled Input State\nDESCRIPTION: Demonstrates enabled and disabled states of the Input component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Input defaultValue='enabled input'></Input>\n        <br/>\n        <br/>\n        <Input disabled defaultValue='disbaled input'></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React\nDESCRIPTION: Basic import statement for the Slider component from Semi Design UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Common Lottie Animation Parameters in JSON\nDESCRIPTION: Defines common parameters used in the 'params' prop of the Lottie component. These parameters are passed to lottie-web's loadAnimation method.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"container\": \"element\",\n    \"renderer\": \"svg\",\n    \"loop\": true,\n    \"autoplay\": true,\n    \"path\": \"data.json\",\n    \"animationData\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DragMove Component in React\nDESCRIPTION: Shows how to import the DragMove component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/dragMove/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DragMove } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Converting Local Time to UTC in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to convert a local date-time value to UTC using the date-fns-tz library. It retrieves the picked date and the target time zone, then converts the time to UTC format before posting it to a server.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/datePicker/contributing.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"import { zonedTimeToUtc } from 'date-fns-tz'\\n\\nconst date = getDatePickerValue() // e.g. 2014-06-25 10:00:00 (picked in any time zone)\\nconst timeZone = getTimeZoneValue() // e.g. America/Los_Angeles\\n\\nconst utcDate = zonedTimeToUtc(date, timeZone) // In June 10am in Los Angeles is 5pm UTC\\n\\npostToServer(utcDate.toISOString(), timeZone) // post 2014-06-25T17:00:00.000Z, America/Los_Angeles\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for Package Management in Bash\nDESCRIPTION: Command to enable corepack, which is required for managing lerna and yarn dependencies.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Auto-Collapse Disabled Anchor\nDESCRIPTION: Demonstrates the Anchor component with auto-collapse functionality explicitly disabled, showing all child links regardless of scroll position.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                autoCollapse={false}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#Auto_Collapse\" title=\"1. Auto Collapse\">\n                    <Anchor.Link href=\"#Components\" title=\"1.1 Components\">\n                        <Anchor.Link href=\"#Avatar\" title=\"1.1.1 Avatar\" />\n                        <Anchor.Link href=\"#Button\" title=\"1.1.2 Button\" />\n                        <Anchor.Link href=\"#Icon\" title=\"1.1.3 Icon\" />\n                    </Anchor.Link>\n                    <Anchor.Link href=\"#Blocks\" title=\"1.2 Blocks\" />\n                    <Anchor.Link href=\"#Theme\" title=\"1.3 Theme\" />\n                </Anchor.Link>\n                <Anchor.Link href=\"#Design\" title=\"2. Design\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: 更新Toast内容 (React)\nDESCRIPTION: 展示如何通过唯一的id来更新Toast的内容。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    function show() {\n        const id = 'toastid';\n        Toast.info({ content: 'Update Content By Id', id });\n        setTimeout(() => {\n            Toast.success({ content: 'Id By Content Update', id });\n        }, 1000);\n    }\n\n    return (\n        <Button type=\"primary\" onClick={show}>\n            Update Content By Id\n        </Button>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Switch with Text Labels\nDESCRIPTION: Switch components with custom text labels for on/off states in different sizes\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch checkedText=\"on\" uncheckedText=\"off\" />\n        <Switch checkedText=\"｜\" uncheckedText=\"〇\" style={{ marginLeft: 5 }} />\n        <br />\n        <br />\n        <Switch defaultChecked checkedText=\"on\" uncheckedText=\"off\" />\n        <Switch defaultChecked checkedText=\"｜\" uncheckedText=\"〇\" style={{ marginLeft: 5 }} />\n        <br />\n        <br />\n        <Switch checkedText=\"on\" uncheckedText=\"off\" size=\"large\" />\n        <Switch checkedText=\"｜\" uncheckedText=\"〇\" size=\"large\" style={{ marginLeft: 5 }} />\n        <br />\n        <br />\n        <Switch defaultChecked checkedText=\"on\" uncheckedText=\"off\" size=\"large\" />\n        <Switch defaultChecked checkedText=\"｜\" uncheckedText=\"〇\" size=\"large\" style={{ marginLeft: 5 }} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning the Semi Design Repository (Bash)\nDESCRIPTION: Commands to fork and clone the Semi Design repository to start contributing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/semi-design.git\ncd semi-design\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Components in Semi Design\nDESCRIPTION: Example of how to import Radio and RadioGroup components from the Semi UI package.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Slider with Custom Handle Dots\nDESCRIPTION: Implementation showing how to customize slider handle dots with different sizes and colors\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n  <div>\n        <div>\n            <div>Default</div>\n            <Slider showBoundary={true} handleDot={{size:'4px',color:'blue'}}></Slider>\n        </div>\n        <br/>\n        <br/>\n        <div>\n            <div>Range</div>\n            <Slider defaultValue={[20, 60]} range handleDot={[{size:'4px',color:'blue'},{size:'4px',color:'pink'}]}></Slider>\n        </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Nav Event Handlers\nDESCRIPTION: Type definitions for various event handler props in the Nav component including onClick, onCollapseChange, onOpenChange, and onSelect callbacks.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nonClick: ({ itemKey: string, domEvent: MouseEvent, isOpen: boolean }) => void\n\nonCollapseChange: (isCollapsed: boolean) => void\n\nonOpenChange: ({ itemKey: string, openKeys: string[], domEvent: MouseEvent, isOpen: boolean }) => void\n\nonSelect: ({ itemKey: string, selectedKeys: string[], selectedItems: Item[], domEvent: MouseEvent, isOpen: boolean }) => void\n```\n\n----------------------------------------\n\nTITLE: Building SCSS with CLI\nDESCRIPTION: This command builds the SCSS files using the semi-build-scss command line tool. It takes parameters for foundation, theme, icon paths, output file path, and minification option.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-scss-compile/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g @douyinfe/semi-scss-compile\n\nsemi-build-scss --foundation=\"path/to/foundation\" --theme=\"path/to/theme\" --icon=\"path/to/'@douyinfe/semi-icons'\" --output=\"path/to/output.css\" --min\n\n# or for short\n\nsemi-build-scss -f \"path/to/foundation\" -t \"path/to/theme\" -i \"path/to/'@douyinfe/semi-icons'\" -o \"path/to/output.css\" -m\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Breadcrumb Component Properties\nDESCRIPTION: Detailed table of Breadcrumb component properties including type definitions, default values, and version information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties | Instructions | type | Default | version |\n| ---------- |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| -------------------------------------------- | --------- | ------- |\n| activeIndex| Controlled use, currently selected navigation index | - | 2.61.0 |\n| autoCollapse | Toggle whether to auto collapse when exceed maxItemCount | boolean | true | 1.9.0 |\n| className | Class name | string | - | |\n| compact | Compact sizing | boolean | true | |\n| maxItemCount | Set the number of item when reached to collapse | number | 4 | 1.9.0 |\n```\n\n----------------------------------------\n\nTITLE: Tag Size Variations in Semi Design\nDESCRIPTION: Shows how to use the size property to create small (default) and large tags with different colors.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tag, Space } from '@douyinfe/semi-ui';\n\n() => (\n    <Space>\n        <Tag size=\"small\" color='light-blue'> small tag </Tag>\n        <Tag size=\"large\" color='cyan'> large tag </Tag>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Codemod V2 Tool Globally\nDESCRIPTION: Command to install the Semi Codemod V2 tool globally for automating the upgrade process.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ies/semi-codemod-v2@latest -g // bnpm registry\n```\n\n----------------------------------------\n\nTITLE: Correct Intra-Package Import\nDESCRIPTION: Recommended import pattern using relative paths when referencing modules within the same package\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README-zh_CN.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ 推荐\n// semi-ui/modal/Modal.tsx\nimport Button from '../button';\n```\n\n----------------------------------------\n\nTITLE: Listing Input Components in Semi Design\nDESCRIPTION: This snippet lists various input-related components available in the Semi Design library, including form elements like autocomplete, cascader, buttons, checkboxes, date pickers, and more.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nAutoComplete 自动完成,\nCascader 级联选择,\nButton 按钮,\nCheckbox 复选框,\nDatePicker 日期选择器,\nForm 表单,\nInput 输入框,\nInputNumber 数字输入框,\nPinCode 验证码输入,\nRadio 单选框,\nRating 评分,\nSelect 选择器,\nSlider 滑动选择器,\nSwitch 开关,\nTagInput 标签输入框,\nTimePicker 时间选择器,\nTransfer 穿梭框,\nTreeSelect 树选择器,\nUpload 上传\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component\nDESCRIPTION: Basic import statement for the Steps component from Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps } from '@douyinfe/semi-ui';\nconst Step = Steps.Step;\n```\n\n----------------------------------------\n\nTITLE: Combining Image and Title Skeleton Components\nDESCRIPTION: Shows how to combine Image and Title skeleton components to create a placeholder for content that includes both an image and a title.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Skeleton } from '@douyinfe/semi-ui';\n\n() => {\n    const placeholder = (\n        <div>\n            <Skeleton.Image style={{ width: 200, height: 150 }} />\n            <Skeleton.Title style={{ width: 120, marginTop: 10 }} />\n        </div>\n    );\n\n    return (\n        <Skeleton placeholder={placeholder} loading={true}>\n            <img\n                src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dy.png\"\n                height=\"150\"\n                alt=\"avatar\"\n            />\n            <h4>Semi UI</h4>\n        </Skeleton>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Components in React\nDESCRIPTION: Shows how to import the Checkbox and CheckboxGroup components from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Checkbox, CheckboxGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Popconfirm Component Type Definitions\nDESCRIPTION: Type definitions for Popconfirm component props including trigger behavior, positioning, button properties, and callback functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/popconfirm/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PopconfirmProps {\n    arrowPointAtCenter?: boolean;\n    cancelText?: string;\n    cancelButtonProps?: object;\n    cancelType?: string;\n    closeOnEsc?: boolean;\n    content?: ReactNode | ({ initialFocusRef }) => ReactNode;\n    defaultVisible?: boolean;\n    disabled?: boolean;\n    getPopupContainer?: () => HTMLElement;\n    guardFocus?: boolean;\n    icon?: ReactNode;\n    motion?: boolean;\n    position?: string;\n    okText?: string;\n    okType?: string;\n    okButtonProps?: object;\n    showArrow?: boolean;\n    stopPropagation?: boolean;\n    returnFocusOnClose?: boolean;\n    title?: string | ReactNode;\n    trigger?: 'hover' | 'focus' | 'click' | 'custom';\n    visible?: boolean;\n    zIndex?: number;\n    onConfirm?: (e: Event) => void | Promise;\n    onCancel?: (e: Event) => void | Promise;\n    onVisibleChange?: (visible: boolean) => void;\n    onEscKeyDown?: (e: Event) => void;\n    onClickOutSide?: (e: Event) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Typescript Interface for beforeUploadResult\nDESCRIPTION: This TypeScript code defines the structure of the `beforeUploadResult` object, which allows developers to control the file upload process. It specifies properties for file handling, status updates, validation messages, and upload behavior.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// beforeUploadResult:\n{\n     fileInstance?: File,\n     status?:'success' |'uploadFail' |'validateFail' |'validating' |'uploading' |'wait',\n     validateMessage?: React.ReactNode | string, // file validation information\n     shouldUpload: boolean, // Whether to upload. The default is true, if it is false, the fileItem will only be displayed in the list, and the upload operation will not be triggered\n     autoRemove: boolean, // Whether to remove the file from the fileList, the default is false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highlight Component in React\nDESCRIPTION: Shows how to import the Highlight component from the Semi Design UI library. The Highlight component is available from version v2.24.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Highlight } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar in Day Mode\nDESCRIPTION: Demonstrates how to render a Calendar component in day mode.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => (\n    <Calendar mode=\"day\"></Calendar>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component in React\nDESCRIPTION: Shows how to import the Rating component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/rating/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rating } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing VChart Dependencies with Package Managers\nDESCRIPTION: Commands for installing required VChart packages using npm or yarn package managers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @visactor/react-vchart\n\n# yarn\nyarn add @visactor/react-vchart\n```\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @visactor/vchart-semi-theme\n\n# yarn\nyarn add @visactor/vchart-semi-theme\n```\n\n----------------------------------------\n\nTITLE: Importing TreeSelect from Semi UI\nDESCRIPTION: Shows how to import the TreeSelect component from the @douyinfe/semi-ui library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/treeselect/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TreeSelect } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Prohibited React/ReactDOM Import in Foundation\nDESCRIPTION: Example of forbidden React or ReactDOM imports in the foundation package, which should remain framework-agnostic\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README-zh_CN.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ \n// packages/semi-foundation/input/foundation.ts\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Bash)\nDESCRIPTION: Command to run Jest unit tests for the project.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Toast中使用链接文本 (React)\nDESCRIPTION: 展示如何在Toast中使用Typography组件来创建自定义链接文本，适用于更复杂的场景。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Typography, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n\n    let opts = {\n        content: (\n            <span>\n                <Text>Hi, Bytedance dance dance</Text>\n                <Text link style={{ marginLeft: 12 }}>\n                    更多\n                </Text>\n            </span>\n        ),\n        duration: 3,\n    };\n\n    let multiLineOpts = {\n        content: (\n            <>\n                <div>Hi, Bytedance dance dance</div>\n                <div style={{ marginTop: 8 }}>\n                    <Text link>查看详情</Text>\n                    <Text link style={{ marginLeft: 20 }}>\n                        一会再看\n                    </Text>\n                </div>\n            </>\n        ),\n        duration: 3,\n    };\n\n    return (\n        <>\n            <Button onClick={() => Toast.info(opts)}>Display Toast</Button>\n            <br />\n            <br />\n            <Button onClick={() => Toast.info(multiLineOpts)}>Display Multi-line Toast</Button>\n        </>\n    );\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Defining Nav.Sub Component Properties in Markdown\nDESCRIPTION: This snippet defines the properties for the Nav.Sub subcomponent using a markdown table. It includes properties such as disabled, dropdownProps, dropdownStyle, icon, indent, isCollapsed, isOpen, itemKey, level, maxHeight, text, onMouseEnter, and onMouseLeave.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties    | Description                                                                                                       | Type                | Default  |\n| ------------- | ----------------------------------------------------------------------------------------------------------------- | ------------------- | -------- |\n| disabled      | Disabled state                                                                                                    | boolean             | false    |\n| dropdownProps | Popup layer `dropdown` parameter configuration (v >= 2.69)                        | DropdownProps     |          |  |\n| dropdownStyle | Style of dropdown layer                                                                                           | CSSProperties       |          |\n| icon          | Navigation project icon name or component                                                                         | ReactNode           |          |\n| indent        | If the icon is empty, keep its space or not. Only effective for first level navigation                            | boolean             | false    |\n| isCollapsed   | Whether it is a controlled attribute in the collapsed state, only `mode = \"vertical\"`                             | boolean             | false    |\n| isOpen        | Control open state                                                                                                | boolean             | false    |\n| itemKey       | Navigation project only key                                                                                       | string              | \"\"       |\n| level         | The nesting level of the current item. When limitIndent is true, it is used to customize the indentation position | number              |          |\n| maxHeight     | max height                                                                                                        | number              | 999      |\n| text          | Navigation project copy or component                                                                              | string \\| ReactNode | \"\"       |\n| onMouseEnter  | Callback of mouse enter event                                                                                     | function(e) => {}   | () => {} |\n| onMouseLeave  | Callback of mouse leave event                                                                                     | function(e) => {}   | () => {} |\n```\n\n----------------------------------------\n\nTITLE: Installing Global Dependencies (Bash)\nDESCRIPTION: Commands to install necessary global dependencies like lerna and yarn.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\nnpm install --global lerna@6\n```\n\n----------------------------------------\n\nTITLE: Typescript Interface for Custom Request Parameters\nDESCRIPTION: This TypeScript code defines the structure of the input parameters for the `customRequest` function, which allows developers to completely customize the upload process. It includes properties for file information, data, progress updates, error handling, and success handling.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index-en-US.md#2025-04-12_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n{\n     // current file name\n     fileName: string,\n     // props.data set by the user\n     data: object,\n     // FileItem, refer to the following document for the specific structure\n     file: FileItem,\n     // original File Object which extends Blob, the file object actually obtained by the browser (https://developer.mozilla.org/zh-CN/docs/Web/API/File)\n     fileInstance: File,\n     // Function that should be called during upload, event needs to include total and loaded attributes\n     onProgress: (event: {total: number, loaded: number }) => any,\n     // Function to be called when upload error\n     onError: (userXhr: {status: number }, e: event) => any,\n      // The function that should be called after the upload is successful, response is the request result after the upload is successful\n     onSuccess: (response: any, e?: event) => any,\n     // props.withCredentials set by the user\n     withCredentials: boolean,\n     // props.action set by the user\n     action: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Transfer Component in React\nDESCRIPTION: Shows how to import the Transfer component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Transfer } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Site (Bash)\nDESCRIPTION: Command to run the Gatsby-based documentation site locally.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docsite\n```\n\n----------------------------------------\n\nTITLE: AudioPlayer Without Toolbar\nDESCRIPTION: Shows how to configure AudioPlayer without the toolbar interface by setting showToolbar prop to false\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const audioUrlObj = {\n        src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n        title: 'Audio Title'\n    };\n  \n    return (\n        <div style={{ width: '100%' }}>\n            <AudioPlayer\n                autoPlay={false}\n                audioUrl={audioUrlObj}\n                showToolbar={false}\n            />\n        </div>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Compiling SCSS with JS API\nDESCRIPTION: This code snippet demonstrates how to use the `compile` function from the `@douyinfe/semi-scss-compile` package to compile SCSS files. It takes an object with `foundationPath`, `themePath`, `iconPath`, `outputPath`, and `isMin` as parameters to define the compilation process.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-scss-compile/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { compile } = require('@douyinfe/semi-scss-compile');\nconst path = require('path');\n\nfunction resolve(dir) {\n    return path.join(__dirname, '../..', dir);\n}\n\n//eg\n\ncompile({\n    foundationPath: resolve('semi-foundation/'),\n    themePath: resolve('semi-theme-default/'),\n    iconPath: resolve('node_modules/@douyinfe/semi-icons'),\n    outputPath: resolve('semi-ui/dist/css/semi.min.css'),\n    isMin: true\n});\n\ncompile({\n    foundationPath: resolve('semi-foundation/'),\n    themePath: resolve('semi-theme-default/'),\n    iconPath: resolve('node_modules/@douyinfe/semi-icons'),\n    outputPath: resolve('semi-ui/dist/css/semi.css'),\n    isMin: false\n});\n```\n\n----------------------------------------\n\nTITLE: JsonViewer Line Break Character Definition\nDESCRIPTION: Example of the end-of-line character specification in formatting options\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neol: '\\n'\n```\n\n----------------------------------------\n\nTITLE: Cypress Project Directory Structure\nDESCRIPTION: Standardized Cypress project directory layout showing folders for fixtures, integration tests, plugins, and support files. Provides organized structure for managing test resources and configurations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/cypress/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├── fixtures                # mock data\n│   └── example.json\n├── integration             # test cases\n│   ├── *.spec.js\n├── plugins                 # custom plugins\n│   └── index.js\n├── support                 # custom commands\n│   ├── commands.js        \n│   └── index.js\n├── tsconfig.json           # cypress syntax\n```\n\n----------------------------------------\n\nTITLE: Installing the rspack Plugin\nDESCRIPTION: This snippet demonstrates how to install the @douyinfe/semi-rspack-plugin as a development dependency using npm or yarn. Ensure you have Node.js and npm/yarn installed.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-rspack/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @douyinfe/semi-rspack-plugin\n# or\nyarn add --dev @douyinfe/semi-rspack-plugin\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component in React\nDESCRIPTION: Shows how to import the Pagination component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pagination } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Cropper with Custom Aspect Ratio\nDESCRIPTION: Shows how to implement the Cropper with fixed and default aspect ratios for the cropping box.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper, Button, RadioGroup, Radio } from '@douyinfe/semi-ui';\nimport React, { useState, useRef, useCallback } from 'react';\n\nconst containerStyle = {\n  width: 550,\n  height: 300,\n  margin: 20,\n}\n\nfunction Demo() {\n    const ref = useRef(null);\n    const [cropperUrl, setCropperUrl] = useState('');\n\n    const onButtonClick = useCallback(() => {\n        const canvas = ref.current.getCropperCanvas();\n        setCropperUrl(canvas.toDataURL());\n    }, []);\n\n    return <>\n        <Cropper\n            aspectRatio={3/4}\n            ref={ref} \n            src={'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/other/image.png'}\n            style={containerStyle}\n        />\n        <Button onClick={onButtonClick}>裁切</Button>\n        <br /><br />\n        {cropperUrl && <img src={cropperUrl} style={{height: 400}}/>}\n    </>;\n}\n\nrender(<Demo />)\n```\n\n----------------------------------------\n\nTITLE: Importing AudioPlayer Component in React\nDESCRIPTION: Shows how to import the AudioPlayer component from the Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Listing Feedback Components in Semi Design\nDESCRIPTION: This snippet enumerates feedback-related components in the Semi Design library, including banners, notifications, popconfirms, progress bars, skeleton screens, spinners, and toasts.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nBanner 通知横幅,\nNotification 通知,\nPopconfirm 气泡确认框,\nProgress 进度条,\nSkeleton 骨架屏,\nSpin 加载器,\nToast 提示\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Semi-Animation via npm\nDESCRIPTION: Command to install the semi-animation library using npm package manager.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @douyinfe/semi-animation\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic Branch (Bash)\nDESCRIPTION: Command to create a new branch for your contribution topic.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <TOPIC_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Importing TagInput Component in React\nDESCRIPTION: Shows how to import the TagInput component from the Semi UI library for use in React applications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TagInput } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Anchor with Primary Rail Theme in React\nDESCRIPTION: Demonstrates the Anchor component with primary rail theme.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                railTheme={'primary'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#尺寸\" title=\"尺寸\" />\n                <Anchor.Link href=\"#滑轨主题\" title=\"滑轨主题\" />\n                <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n                <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n                <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Component in Semi Design\nDESCRIPTION: Shows how to import the Dropdown component from Semi Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/dropdown/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dropdown } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Using Semi Codemod V2 for Automatic Code Upgrades\nDESCRIPTION: Command structure for using the Semi Codemod V2 tool to scan and automatically modify breaking changes in project code.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsemi-codemod-v2 <ProjectPath> [options]\n\n//  options:\n//    --dry,        Dry run (no changes are made to files)   \n//    --force,      Whether ignore git status;               \n//    --verbose=2,  Log level, optional: 0/1/2, default: 0   \n```\n\n----------------------------------------\n\nTITLE: 引入 DatePicker 组件 - React\nDESCRIPTION: 从 @douyinfe/semi-ui 包中导入 DatePicker 组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DatePicker } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 引入Toast组件 (React)\nDESCRIPTION: 从Semi UI库中导入Toast组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Creating a New Topic Branch in Git\nDESCRIPTION: Command to create and checkout a new topic branch for your contribution.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <TOPIC_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: 设置不同尺寸的Select组件\nDESCRIPTION: 通过size属性控制Select组件的尺寸大小，支持small、default和large三种尺寸。示例展示了三种不同尺寸的Select组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select placeholder=\"请选择业务线\" style={{ width: '180px' }} size=\"small\">\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select placeholder=\"请选择业务线\" style={{ width: '180px' }}>\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select placeholder=\"请选择业务线\" style={{ width: '180px' }} size=\"large\">\n            <Select.Option value=\"ulikecam\">轻颜相机</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Component in React\nDESCRIPTION: Shows how to import the Navigation component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Nav } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Select Component with Different Sizes\nDESCRIPTION: Demonstrates the Select component in three different sizes: small, default, and large.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Select } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Select placeholder=\"Business line\" style={{ width: '200px' }} size=\"small\">\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select placeholder=\"Business line\" style={{ width: '200px' }}>\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n        </Select>\n        <br />\n        <br />\n        <Select placeholder=\"Business line\" style={{ width: '200px' }} size=\"large\">\n            <Select.Option value=\"douyin\">Douyin</Select.Option>\n        </Select>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: 导入 Calendar 组件 - React\nDESCRIPTION: 从 @douyinfe/semi-ui 包中导入 Calendar 组件以在 React 应用中使用。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Calendar } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Basic Spin Component Usage\nDESCRIPTION: Demonstrates the simplest implementation of the Spin component with default settings.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spin } from '@douyinfe/semi-ui';\n\n() => (\n    <div style={{ marginLeft: 30 }}>\n        <div style={{ marginBottom: 10 }}>A basic spin.</div>\n        <Spin />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Description Component in React\nDESCRIPTION: Shows how to import the Description component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Descriptions } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Accessibility Implementation Example\nDESCRIPTION: Demonstrates ARIA implementation for Collapsible component with proper accessibility controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Collapsible from './index';\n\n()=>{\n    const collapseId = 'myCollapsible';\n    const [visible, setVisible]=useState(false);\n    return <>\n        <Button onClick={()=>setVisible(!visible)} aria-controls={`${collapseId}`}>{visible?'hide':'show'}</Button>    \n        <Collapsible isOpen={visible} id={collapseId}>\n            <div>hide content</div>\n        </Collapsible>\n    </>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix for Semi Design\nDESCRIPTION: Configuration changes required in remix.config.js to use Semi Design in a Remix project. It enables CSS side-effect imports and bundles Semi-related packages.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// remix.config.js\nmodule.exports = {\n  future: {\n+    unstable_cssSideEffectImports: true,\n  },\n  serverDependenciesToBundle: [\n+    /^@douyinfe\\/semi-ui/,\n+    /^@douyinfe\\/semi-icons/,\n+    /^@douyinfe\\/semi-illustrations/,\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Semi-UI with npm\nDESCRIPTION: Command to install Semi-UI package using npm package manager.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @douyinfe/semi-ui\n```\n\n----------------------------------------\n\nTITLE: VChart Semi Theme Configuration Interface\nDESCRIPTION: TypeScript interface definition for VChart Semi theme initialization options.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IInitVChartSemiThemeOption {\n  /** default mode */\n  defaultMode?: 'light' | 'dark';\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Indentation with Text-Only Items\nDESCRIPTION: Shows how to create a navigation with text-only items (without icons). The component automatically aligns text to the left when no icons are provided for first-level navigation items.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Nav } from '@douyinfe/semi-ui';\n\nclass NavApp extends React.Component {\n    render() {\n        return (\n            <Nav\n                bodyStyle={{ height: 320 }}\n                defaultOpenKeys={[ 'task' ]}\n                items={[\n                    { itemKey: 'user', text: 'User Management' },\n                    { itemKey: 'union', text: 'User Center' },\n                    {\n                        itemKey: 'union-management',\n                        text: 'Union Management',\n                        items: ['Announcement Settings', 'Union Inquiries', 'Entry information']\n                    },\n                    {\n                        text: 'Task Platform',\n                        itemKey: 'task',\n                        items: ['Task Management', 'User Task Inquiries'],\n                    },\n                ]}\n                onSelect={data => console.log('trigger onSelect: ', data)}\n                onClick={data => console.log('trigger onClick: ', data)}\n            />\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Semi Design\nDESCRIPTION: Command to execute unit tests to ensure all changes pass the test suite.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Importing Lottie Component in React\nDESCRIPTION: Shows how to import the Lottie component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Extra Information in React\nDESCRIPTION: Demonstrates how to add extra information to a Checkbox using the extra prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <>\n        <Checkbox\n            extra='Semi Design is a design system developed and maintained by IES Front-end Team and UED Team'\n            aria-label=\"Checkbox demo\"\n        >\n            Semi Design\n        </Checkbox>\n        <br/>\n        <Checkbox\n            extra='Semi Design is a design system developed and maintained by IES Front-end Team and UED Team'\n            aria-label=\"Checkbox demo\"\n            style={{ width: 400 }}\n        >\n            Semi Design\n        </Checkbox>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Style-lint Package\nDESCRIPTION: Command to install the Semi Style-lint package for updating CSS variable usage.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @ies/stylelint-semi@2.0.0-alpha.1\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Illustrations Package\nDESCRIPTION: Command to install the @douyinfe/semi-illustrations npm package using npm package manager\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-illustrations/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @douyinfe/semi-illustrations\n```\n\n----------------------------------------\n\nTITLE: Listing Display Components in Semi Design\nDESCRIPTION: This snippet lists various display-oriented components in the Semi Design library, including avatars, badges, calendars, cards, carousels, collapse panels, descriptions, dropdowns, and more.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nAvatar 头像,\nBadge 徽章,\nCalendar 日历,\nCard 卡片,\nCarousel 轮播图,\nCollapse 折叠面板,\nCollapsible 折叠,\nDescriptions 描述列表,\nDropdown 下拉框,\nEmpty 空状态,\nHighlight 高亮文本,\nImage 图片,\nCropper 图片裁切,\nList 列表,\nModal 模态对话框,\nOverflowList 折叠列表,\nPopover 气泡卡片,\nScrollList 滚动列表,\nSideSheet 滑动侧边栏,\nTable 表格,\nTag 标签,\nTimeline 时间轴,\nTooltip 工具提示,\nUserGuide 用户引导,\nVChart 图表\n```\n```\n\n----------------------------------------\n\nTITLE: Pagination with Specified Current Page - React/JSX\nDESCRIPTION: Shows how to set a default current page in pagination\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Pagination total={80} showTotal defaultCurrentPage={3}></Pagination>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Semi Scrollbar Style in CSS\nDESCRIPTION: This CSS class applies Semi's custom scrollbar style to WebKit browsers (Chrome/Safari). It should be applied to the outermost DOM element to affect all child elements. Note that it uses a wildcard selector which may impact performance.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/faq/index.md#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.semi-light-scrollbar\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint for Semi\nDESCRIPTION: JSON configuration for .stylelintrc.json file to set up Semi style-lint rules.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/update-to-v2/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@ies/stylelint-semi\"],\n  \"rules\": {\n    \"semi/css-token-migrate\": [true, { \"severity\": \"warning\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Popconfirm Component in React\nDESCRIPTION: Shows how to import the Popconfirm component from the Semi-design UI library in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/popconfirm/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Popconfirm } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Tag Components in Semi Design\nDESCRIPTION: Shows how to import the Tag and TagGroup components from the Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tag/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tag, TagGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Component in React\nDESCRIPTION: Shows how to import the Breadcrumb component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Breadcrumb } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 导入Spin组件 - React\nDESCRIPTION: 从Semi UI库中导入Spin组件。这是使用Spin组件的第一步。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spin } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component in React\nDESCRIPTION: Shows how to import the Skeleton component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Skeleton } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Transfer Component from Semi UI\nDESCRIPTION: 基本的引入方式，用于在React项目中引入Semi UI的Transfer组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Transfer } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Design Webpack Plugin Shell\nDESCRIPTION: Install the '@douyinfe/semi-webpack-plugin' as a development dependency using npm or yarn. This is a necessary step to use the plugin for theme customization in Semi Design.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-webpack/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @douyinfe/semi-webpack-plugin\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @douyinfe/semi-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Importing InputNumber Component in React\nDESCRIPTION: Shows how to import the InputNumber component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { InputNumber } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing Semi-UI with NPM\nDESCRIPTION: Command to install the Semi-UI package using npm package manager\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/README-zh_CN.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @douyinfe/semi-ui\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Import Practices in Monorepo\nDESCRIPTION: Demonstrates proper and improper ways to import packages under a monorepo, emphasizing the use of package names instead of relative paths to ensure the functionality of package imports regardless of folder locations.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Not recommend\\n// semi-ui/input/index.tsx\\nimport inputFoundation from '../semi-foundation/input/foundation';\\n\\n// ✅ Recommend\\n// semi-ui/input/index.tsx\\nimport inputFoundation from '@douyinfe/semi-foundation/input/foundation';\n```\n\n----------------------------------------\n\nTITLE: Configuring Semi Rspack Plugin for Web Components\nDESCRIPTION: Configuration example for the Semi rspack plugin in a Rsbuild project. It sets up the plugin to insert styles for web components and excludes Semi SCSS files from processing.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/web-components/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Rspack project configuration file: such as rsbuild.config.mjs\nimport { defineConfig } from '@rsbuild/core';\nconst RspackPlugin = require('@douyinfe/semi-rspack-plugin').SemiRspackPlugin;\n\nexport default defineConfig({\n  /*...other settings */\n  tools: {\n    rspack: (config, { addRules }) => {\n      config.module?.rules?.forEach((rule) => {\n        if ((rule?.test)?.toString() === '/\\.s(?:a|c)ss$/' ) {\n          rule['exclude'] = /@douyinfe\\/semi-(ui|icons|foundation)\\/lib\\/.+\\.scss$/;\n        }\n      });\n\n      config.plugins.push(new SemiPlugin({\n        webComponentPath: true,\n      }));\n    }\n  } \n  /*...other settings */\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React\nDESCRIPTION: Shows how to import the Badge component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Semi Design Project\nDESCRIPTION: Command to install project dependencies and set up the development environment.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bootstrap\n```\n\n----------------------------------------\n\nTITLE: Importing Upload Component in React\nDESCRIPTION: Shows how to import the Upload component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Upload } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Anchor with Default Size in React\nDESCRIPTION: Demonstrates the Anchor component with default size setting.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Anchor size={'default'}>\n        <Anchor.Link href=\"#组件\" title=\"组件\" />\n        <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n        <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n        <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n    </Anchor>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Typography for Conditional Tooltip Display in React\nDESCRIPTION: Shows how to use the Typography component to automatically display a Tooltip when content overflows, without manual condition checking.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Paragraph, Title, Text } = Typography;\n\n    return (\n        <div>\n            <Title heading={5} ellipsis={{ showTooltip: true }} style={{ width: 250 }}>\n                是一个很长很长很长很长5号标题\n            </Title>\n            <br />\n            <Text link ellipsis={{ showTooltip: true, pos: 'middle' }} style={{ width: 150 }}>\n                是一个很长很长很长很长的链接\n            </Text>\n            <br />\n            <br />\n            <Paragraph\n                ellipsis={{ rows: 3, showTooltip: { type: 'popover', opts: { style: { width: 300 } } } }}\n                style={{ width: 300 }}\n            >\n                多行截断，展示 Popover：Semi Design 是由抖音前端团队与 UED\n                团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的\n                Web 应用。\n            </Paragraph>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Theme with npm Package for Semi Design\nDESCRIPTION: This JavaScript snippet configures the rspack plugin to use a custom theme from an npm package generated by Semi Design System. You need to replace the theme option with your actual package name after customization.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-rspack/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rspack.config.js\nconst {SemiRspackPlugin} = require('@douyinfe/semi-rspack-plugin');\n\nmodule.exports = {\n    // ...\n    plugins: [\n        new SemiRspackPlugin({\n            theme: '@douyinfe/semi-theme-default'\n        })\n    ]\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: 渲染日视图日历 - React\nDESCRIPTION: 使用 Calendar 组件渲染日视图的日历。可通过 showCurrTime 属性控制是否显示当前时间的红线。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Calendar } from '@douyinfe/semi-ui';\n\n() => <Calendar mode=\"day\"></Calendar>;\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component in React\nDESCRIPTION: Shows how to import the Select component from Semi Design and access its Option subcomponent.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from '@douyinfe/semi-ui';\nconst Option = Select.Option;\n```\n\n----------------------------------------\n\nTITLE: Controlling Avatar Overlap Direction with overlapFrom\nDESCRIPTION: Shows how to control the direction of avatar overlap using the overlapFrom prop, which can be set to 'start' (default) or 'end'. This affects which avatars appear on top of others in the group.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar, AvatarGroup } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div>\n            <AvatarGroup overlapFrom={'start'}>\n                <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n                <Avatar alt='Caroline Xiao'>CX</Avatar>\n                <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n                <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n                <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n            </AvatarGroup>\n        </div>\n        <div>\n            <AvatarGroup overlapFrom={'end'}>\n                <Avatar color=\"red\" alt='Lisa LeBlanc'>LL</Avatar>\n                <Avatar alt='Caroline Xiao'>CX</Avatar>\n                <Avatar color=\"amber\" alt='Rafal Matin'>RM</Avatar>\n                <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }} alt='Zank Lance'>ZL</Avatar>\n                <Avatar style={{ backgroundColor: '#87d068' }} alt='Youself Zhang'>YZ</Avatar>\n            </AvatarGroup>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: InputNumber with Inner Buttons\nDESCRIPTION: Example of InputNumber with buttons placed inside the input field.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { InputNumber } from '@douyinfe/semi-ui';\n\n() => (\n    <InputNumber innerButtons style={{ width: 190 }} />\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar Component in React\nDESCRIPTION: Shows how to import the Calendar component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/calendar/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Calendar } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Text Area Properties Table in Markdown\nDESCRIPTION: Markdown table defining TextArea component properties including ARIA attributes, styling options, and event handlers\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Property          | Instructions                                                                                                           | Type                            | Default |\n|-------------------|------------------------------------------------------------------------------------------------------------------------|---------------------------------|---------|\n```\n\n----------------------------------------\n\nTITLE: Methods Table in Markdown\nDESCRIPTION: Markdown table describing internal methods accessible through ref for the Input component\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Description  |\n|---------|--------------|\n```\n\n----------------------------------------\n\nTITLE: Importing UserGuide Component in React\nDESCRIPTION: Shows how to import the UserGuide component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/userGuide/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UserGuide } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Adding Cover to Card in Semi Design\nDESCRIPTION: Demonstrates how to add a cover image to a card using the 'cover' prop of the Card component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <Card\n            style={{ maxWidth: 300 }}\n            cover={ \n                <img \n                    alt=\"example\" \n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo2.jpeg\" \n                />\n            }\n        >\n            <Meta title=\"卡片封面\" />\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Events in HotKeys Component\nDESCRIPTION: Shows how to use the 'preventDefault' prop to control the default event behavior of the HotKeys component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/hotkeys/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { HotKeys, Modal } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [visible, setVisible] = useState(false);\n  const showDialog = () => {\n      setVisible(true);\n  };\n  const handleOk = () => {\n      setVisible(false);\n  };\n  const handleCancel = () => {\n      setVisible(false);\n  };\n  const hotKeys = [HotKeys.Keys.Meta, HotKeys.Keys.S]\n\n  return (\n    <div>\n      <HotKeys hotKeys={hotKeys} onHotKey={showDialog} preventDefault></HotKeys>\n      <br />\n      <HotKeys hotKeys={[HotKeys.Keys.Control, HotKeys.Keys.S]} onHotKey={showDialog} preventDefault></HotKeys>\n      <Modal\n          title=\"Dialog\"\n          visible={visible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n      >\n          This is the Modal opened by hotkey: {'Meta/Control + S'}.\n      </Modal>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Banner Component in React\nDESCRIPTION: Shows how to import the Banner component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/banner/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Banner } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPicker Component in React\nDESCRIPTION: 展示如何在 React 项目中引入 ColorPicker 组件。ColorPicker 从 v2.64.0 版本开始支持。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Non-blocking SideSheet with TextArea Integration\nDESCRIPTION: Shows implementation of SideSheet without mask for non-blocking workflow with TextArea interaction.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { SideSheet, Button, TextArea } from '@douyinfe/semi-ui';\n\n() => {\n    const [visible, setVisible] = useState(false);\n    const [value, setValue] = useState('');\n    return (\n        <>\n            <Button onClick={() => setVisible(true)}>Open SideSheet</Button>\n            <TextArea placeholder=\"Please enter something\" onChange={value => setValue(value)} style={{ marginTop: 12 }}/>\n            <SideSheet title=\"SideSheet\" visible={visible} onCancel={() => setVisible(false)} mask={false} disableScroll={false}>\n                <p>Here is what you entered: </p>\n                <p>{value}</p>\n            </SideSheet>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating semi-design Animations in React\nDESCRIPTION: This code snippet demonstrates how to integrate animation styles from semi-design into a React component. It leverages classes from the imported stylesheet to create bounce animations on a div element. Ensure that the `@douyinfe/semi-animation-styled` package is installed and imported. Parameters include the class names such as `semi-bounce` for animation type, `semi-speed-slow` for animation speed, and `semi-loop-infinite` for infinite looping. The input is a JSX element with animation class names and the output is a rendered div with the specified animation effects.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation-styled/README.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@douyinfe/semi-animation-styled'; \nimport React from 'react';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"semi-animated semi-bounce semi-speed-slow semi-loop-infinite\">bounce</div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Mode Radio\nDESCRIPTION: Example of an advanced mode Radio that allows users to uncheck a previously selected option by clicking it again.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Radio } from '@douyinfe/semi-ui';\n\n() => {\n    const [checked, setChecked] = useState(true);\n    const toggle = (e) => {\n        console.log('radio checked', e.target.checked);\n        setChecked(e.target.checked);\n    };\n    return (\n        <Radio \n            checked={checked}\n            mode=\"advanced\"\n            onChange={toggle}\n            aria-label=\"单选示例\"\n            name=\"demo-radio-advanced\"\n        >\n            允许取消选择\n        </Radio>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation\nDESCRIPTION: Demonstrates default, range, and disabled slider variants with different configurations\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <div>\n            <div>Default</div>\n            <Slider aria-label='Slider default' showBoundary={true}></Slider>\n        </div>\n        <br/>\n        <br/>\n        <div>\n            <div>Range</div>\n            <Slider aria-label='Slider range' defaultValue={[20, 60]} range></Slider>\n        </div>\n        <br/>\n        <br/>\n        <div>\n            <div>Disabled</div>\n            <Slider aria-label='Slider disabled' defaultValue={40} disabled></Slider>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Primary Rail Theme Anchor\nDESCRIPTION: Demonstrates the Primary rail theme (default) for the Anchor component, which changes the color of the indicator rail.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                railTheme={'primary'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#Size\" title=\"Size\" />\n                <Anchor.Link href=\"#Rail_Theme\" title=\"Rail Theme\" />\n                <Anchor.Link href=\"#Design\" title=\"Design\" />\n                <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n                <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component in React\nDESCRIPTION: Shows how to import the Collapsible component from the Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Component in Semi Design\nDESCRIPTION: Shows how to import the Nav component from the Semi UI library. This is the basic import statement needed before using the navigation component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Nav } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: ARIA Attributes Implementation for Pagination\nDESCRIPTION: Specification of ARIA attributes used for accessibility in the pagination component. Includes aria-label for element labeling and aria-current for current page indication.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- `aria-label`: Labels the element such as previous, next, pages in the pagination.\n- `aria-current`: Indicates the current page.\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component in React\nDESCRIPTION: Shows how to import the Collapsible component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Anchor with Small Size in React\nDESCRIPTION: Shows the Anchor component with small size setting.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Anchor size={'small'}>\n        <Anchor.Link href=\"#组件\" title=\"组件\" />\n        <Anchor.Link href=\"#设计语言\" title=\"设计语言\" />\n        <Anchor.Link href=\"#物料平台\" title=\"物料平台\" />\n        <Anchor.Link href=\"#主题商店\" title=\"主题商店\" />\n    </Anchor>\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Site for Semi Design\nDESCRIPTION: Command to run the documentation site locally for development and preview.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docsite\n```\n\n----------------------------------------\n\nTITLE: Importing JsonViewer Component\nDESCRIPTION: Shows how to import the JsonViewer component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/jsonviewer/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { JsonViewer } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Tokenizing JSON Text in TypeScript\nDESCRIPTION: Core tokenization module for parsing JSON text and identifying different token types including delimiters, keywords, strings, numbers, and comments\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-json-viewer-core/src/tokens/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Tokenization interface in tokenize.ts\n// Supports token identification for JSON syntax\n```\n\n----------------------------------------\n\nTITLE: Custom Display Format in DatePicker with React and Semi Design\nDESCRIPTION: This snippet shows how to customize the display format of a DatePicker component using the 'format' prop. It sets a custom format for date and time display.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker format=\"yyyy年MM月dd日 HH:mm\" type=\"dateTime\" defaultValue={new Date()} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Validation in React Upload Component\nDESCRIPTION: This code demonstrates how to add custom file validation to a React-based upload component using the beforeUpload hook. It includes both synchronous and asynchronous validation examples.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\nclass ValidateDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.beforeUpload = this.beforeUpload.bind(this);\n        this.transformFile = this.transformFile.bind(this);\n        this.count = 0;\n    }\n\n    transformFile(fileInstance) {\n        if (this.count === 0) {\n            let newFile = new File([fileInstance], 'newFileName', { type: 'image/png' });\n            return newFile;\n        } else {\n            return fileInstance;\n        }\n    }\n\n    beforeUpload({ file, fileList }) {\n        let result;\n        if (this.count > 0) {\n            result = {\n                autoRemove: false,\n                fileInstance: file.fileInstance,\n                shouldUpload: true,\n            };\n        } else {\n            result = {\n                autoRemove: false,\n                fileInstance: file.fileInstance,\n                status: 'validateFail',\n                shouldUpload: false,\n            };\n        }\n        this.count = this.count + 1;\n        return result;\n    }\n\n    render() {\n        return (\n            <Upload\n                action=\"https://api.semi.design/upload\"\n                transformFile={this.transformFile}\n                beforeUpload={this.beforeUpload}\n            >\n                <Button icon={<IconUpload />} theme=\"light\">\n                    点击上传（上传前同步校验）\n                </Button>\n            </Upload>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Bash)\nDESCRIPTION: Command to install all project dependencies using npm.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bootstrap\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Different Sizes in React\nDESCRIPTION: Demonstrates how to use the 'size' prop to render avatars of various sizes, from extra-extra-small to extra-large.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/avatar/index-en-US.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Avatar size=\"extra-extra-small\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"extra-small\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"small\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"default\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar style={{ margin: 4 }} alt='User'>U</Avatar>\n        <Avatar size=\"large\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n        <Avatar size=\"extra-large\" style={{ margin: 4 }} alt='User'>\n            U\n        </Avatar>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing OverflowList Component in React\nDESCRIPTION: Shows how to import the OverflowList component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OverflowList } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb with Icons in React\nDESCRIPTION: Shows how to add icons to Breadcrumb items using the Semi UI icon components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Breadcrumb>\n        <Breadcrumb.Item icon={<IconHome />}></Breadcrumb.Item>\n        <Breadcrumb.Item icon={<IconArticle />}>Breadcrumb</Breadcrumb.Item>\n        <Breadcrumb.Item>With Icon</Breadcrumb.Item>\n    </Breadcrumb>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing SideSheet Component in React\nDESCRIPTION: Shows how to import the SideSheet component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/sidesheet/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SideSheet } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Internal Module Import Best Practices\nDESCRIPTION: Shows the recommended way to import modules within the same package by using relative paths, rather than referencing the entire package name, to ensure compatibility and clarity.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Not recommend\\n// semi-ui/modal/Modal.tsx\\nimport { Button } from '@douyinfe/semi-ui';\\n\\n// ✅ Recommend\\n// semi-ui/modal/Modal.tsx\\nimport Button from '../button';\n```\n\n----------------------------------------\n\nTITLE: Mini Pagination with Hover Page Select in React\nDESCRIPTION: Shows how to enable quick page selection on hover for mini Pagination using the 'hoverShowPageSelect' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <Pagination total={90} size=\"small\" hoverShowPageSelect></Pagination>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabled TagInput Component in React\nDESCRIPTION: Shows how to create a disabled TagInput component with the disabled property.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TagInput } from '@douyinfe/semi-ui';\n\n() => (\n    <TagInput \n        disabled \n        showClear \n        defaultValue={['Semi', 'Hotsoon', 'Pipixia']} \n        placeholder='Please enter...'\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Import Tooltip Component from Semi UI\nDESCRIPTION: This code snippet demonstrates how to import the Tooltip component from the '@douyinfe/semi-ui' library. This import statement is necessary to use the Tooltip component in a React application.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Animation React Library\nDESCRIPTION: Command to install the @douyinfe/semi-animation-react library using npm.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-animation-react/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @douyinfe/semi-animation-react\n```\n\n----------------------------------------\n\nTITLE: Defining onChange Function Signature in TypeScript\nDESCRIPTION: This TypeScript snippet provides a type definition for the onChange event handler in a DatePicker. The handler can accept various types of date inputs, allowing for flexibility in application logic.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-ui/datePicker/contributing.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"export type OnChangeType = (date?: Date | Date[] | string | string[], dateStr?: string | string[] | Date | Date[]) => void;\"\n```\n\n----------------------------------------\n\nTITLE: Icon组件的尺寸设置示例\nDESCRIPTION: 演示了图标组件size属性的各种预设值，包括extra-small、small、default、large和extra-large。也可以设置为inherit继承上下文字体大小。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconSearch, IconHelpCircle, IconAlertCircle, IconMinusCircle, IconPlusCircle, IconPlus, IconRefresh } from '@douyinfe/semi-icons';\n\n() => {\n    // eslint-disable-next-line react/jsx-key\n    const types = [<IconSearch />, <IconHelpCircle />, <IconAlertCircle />, <IconMinusCircle />, <IconPlusCircle />, <IconPlus />, <IconRefresh />];\n    const sizes = ['extra-small', 'small', 'default', 'large', 'extra-large'];\n    let icons = types.map((type, i) => {\n        return <div key={i} style={{ marginBottom: 4 }}>{sizes.map(size => React.cloneElement(type, { size, key: size }))}</div>;\n    });\n    return icons;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing OverflowList Component in React\nDESCRIPTION: Shows how to import the OverflowList component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/overflowlist/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OverflowList } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Descriptions Component in React\nDESCRIPTION: Shows how to import the Descriptions component from the Semi-UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/descriptions/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Descriptions } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Basic Cropper Import\nDESCRIPTION: Basic import statement for the Cropper component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/cropper/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cropper } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Size Configuration in React\nDESCRIPTION: Demonstrates how to set the size of the Breadcrumb component using the compact prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/breadcrumb/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <div>\n        <Breadcrumb compact>\n            <Breadcrumb.Item icon={<IconHome size=\"small\" />}></Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Loose</Breadcrumb.Item>\n        </Breadcrumb>\n        <br/>\n        <Breadcrumb compact={false}>\n            <Breadcrumb.Item icon={<IconHome size=\"small\" />}></Breadcrumb.Item>\n            <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>\n            <Breadcrumb.Item>Loose</Breadcrumb.Item>\n        </Breadcrumb>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Carousel Component in React\nDESCRIPTION: Shows how to import the Carousel component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/carousel/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Carousel } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Creating Sidebar Layout with Semi UI\nDESCRIPTION: Shows how to implement a layout with a sidebar on the left and main content on the right using Semi UI Layout components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/layout/index-en-US.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => {\n    const { Header, Footer, Sider, Content } = Layout;\n    const commonStyle = {\n        height: 64,\n        lineHeight: '64px',\n        background: 'var(--semi-color-fill-0)'\n    };\n    return (\n        <Layout className=\"components-layout-demo\">\n            <Sider style={{ width: '120px', background: 'var(--semi-color-fill-2)' }}>Sider</Sider>\n            <Layout>\n                <Header style={commonStyle}>Header</Header>\n                <Content style={{ height: 300, lineHeight: '300px' }}>Content</Content>\n                <Footer style={commonStyle}>Footer</Footer>\n            </Layout>\n        </Layout>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Components in Semi-Design\nDESCRIPTION: Shows how to import the Col and Row components from the Semi-UI library for use in the grid system.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Col, Row } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Creating Link Text with Typography Component\nDESCRIPTION: Shows how to use the Typography component to create link text buttons instead of using Button component for links.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Typography } from '@douyinfe/semi-ui';\nimport { IconLink } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Text } = Typography;\n    return (\n        <div>\n            <Text link={{ href: 'https://semi.design/' }}>Link</Text>\n            <br />\n            <br />\n            <Text link={{ href: 'https://semi.design/' }}>Open Website</Text>\n            <br />\n            <br />\n            <Text link icon={<IconLink />} underline>Link</Text>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Lottie Instance\nDESCRIPTION: Demonstrates how to access the global Lottie instance using both getLottie prop and static method.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n\n    console.log('lottie', Lottie.getLottie());\n\n    return (\n        <div>\n            <Lottie\n                getLottie={lottie => console.log('lottie', lottie)}\n                params={{ path: jsonURL }}\n                width={'300px'}\n                height={'300px'}\n            />\n            ;\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CodeHighlight Component in React\nDESCRIPTION: Shows how to import the CodeHighlight component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeHighlight } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in React\nDESCRIPTION: 从Semi Design UI库中导入Switch组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Vertical Spacing with Space Component in React\nDESCRIPTION: Demonstrates how to use the 'vertical' prop to create vertical spacing between elements.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/space/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n() => (\n    <Space vertical>\n        <Button theme='solid' type='primary'>按钮</Button>\n        <Button theme='solid' type='primary'>按钮</Button>\n        <Button theme='solid' type='primary'>按钮</Button>\n        <Button theme='solid' type='primary'>按钮</Button>\n    </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Input Component Size Variations in React\nDESCRIPTION: Shows the three available sizes for the Input component: large, default, and small.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Input placeholder='large' size='large'></Input>\n        <br/><br/>\n        <Input placeholder='default'></Input>\n        <br/><br/>\n        <Input placeholder='small' size='small'></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalized Currency Display with Language Switching\nDESCRIPTION: A React component that demonstrates currency display with multiple language support using LocaleProvider. It includes a language selector and displays currency values according to the selected locale.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/inputnumber/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport zh_CN from '@douyinfe/semi-ui/lib/es/locale/source/zh_CN';\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\n[...additional imports...]\n\nclass I18nDemo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            locale: zh_CN,\n            localeCode: 'zh_CN',\n        };\n        this.onLanguageChange = this.onLanguageChange.bind(this);\n    }\n\n    onLanguageChange(code) {\n        let language = {\n            'zh_CN': zh_CN,\n            'en_GB': en_GB,\n            [...additional languages...]\n        };\n        this.setState({ locale: language[code], localeCode: code });\n    }\n\n    render() {\n        const { locale, localeCode } = this.state;\n        return (\n            <>\n                <div style={{ paddingBottom: 20 }}>\n                    <Select onChange={this.onLanguageChange} insetLabel='切换语言' style={{ width: 250 }} defaultValue='zh_CN'>\n                        [...Select.Options...]\n                    </Select>\n                </div>\n                <LocaleProvider locale={locale}>\n                    <InputNumber key={localeCode} currency={true} defaultValue={123456.78} />\n                </LocaleProvider>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Semi Material List Component\nDESCRIPTION: Demonstrates how to use the semi-material-list component with a code parameter value of 5\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/button/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<semi-material-list code=\"5\"></semi-material-list>\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Component\nDESCRIPTION: Basic import statement for the Typography component from Semi Design UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/typography/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Typography } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Display Value for Badge in React\nDESCRIPTION: Shows how to set a maximum display value for the Badge component using the overflowCount prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar } from '@douyinfe/semi-ui';\n\n() => {\n    const style = {\n        width: '42px',\n        height: '42px',\n        borderRadius: '4px',\n    };\n    return (\n        <div>\n            <Badge count={99} >\n                <Avatar color='teal' shape='square' style={style}>ZH</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={100} >\n                <Avatar color='teal' shape='square' style={style}>HS</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={99} overflowCount={10} >\n                <Avatar color='green' shape='square' style={style}>DY</Avatar>\n            </Badge>\n            <br/>\n            <br/>\n            <Badge count={1000} overflowCount={999} >\n                <Avatar color='green' shape='square' style={style}>TT</Avatar>\n            </Badge>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Semi Webpack Plugin for Web Components\nDESCRIPTION: Configuration example for the Semi webpack plugin to enable style insertion into shadow DOM. It specifies the path where shadow DOM components are located using a regular expression.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/web-components/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Configuration file: such as webpack.config.js\nconst SemiPlugin = require('@douyinfe/semi-webpack-plugin').default;\n\nmodule.exports = {\n    /*...other settings */\n    plugin: [\n        /*...other plugins */\n        new SemiPlugin({\n            webComponentPath: /\\(src\\/components\\)/\n        }),\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Components with Popover, Tooltip, and Rating in Semi Design\nDESCRIPTION: Shows how to create interactive UI elements using Semi Design components. Includes a Tag with a Popover that displays 'hi semi-design' when hovered, a Tag with a Tooltip showing the same content, and a small Rating component initialized with a value of 3.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/dark-mode/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ display: 'flex', alignItems: 'center' }}>\n    <Popover content={'hi semi-design'} style={{ padding: 8 }}><Tag style={{ marginRight: 8 }}>I am Popover</Tag></Popover>\n    <Tooltip content={'hi semi-design'}>\n        <Tag style={{ marginRight: 8 }}>I am Tooltip</Tag>\n    </Tooltip>\n    <Rating defaultValue={3} size='small' style={{ marginRight: 8 }} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component\nDESCRIPTION: Basic import statement for the Skeleton component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Skeleton } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider API Reference Table in Semi-Design\nDESCRIPTION: Documentation table for the ConfigProvider component API, listing properties such as direction, getPopupContainer, locale, and timeZone along with their instructions, types, and default values.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/other/configprovider/index-en-US.md#2025-04-12_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n| Properties | Instructions                                                                                                      | type          | Default |\n|------------|-------------------------------------------------------------------------------------------------------------------|---------------|--------|\n| direction  | Sets the direction of the text                                                                                    | `ltr`\\| `rtl` | `ltr`   |\n| getPopupContainer | Specifies the parent DOM, and the bullet layer will be rendered to the DOM, you need to set 'position: relative`  This will change the DOM tree position, but not the view's rendering position.  | function():HTMLElement | () => document.body    |\n| locale     | Multi-language configuration, same as the [usage](/en-US/other/locale) of `locale` parameter in `LocaleProvider`(If `locale` is configured in `ConfigProvider` and `LocaleProvider` at the same time, the former has higher priority than the latter)  | object         |         |\n| timeZone   | [Time zone identifier](#Time_Zone_Identifier)                                                                     | string\\|number |         |\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Upload Trigger in React\nDESCRIPTION: This snippet demonstrates how to create a file upload component with a custom upload trigger. It uses the Semi Design UI library and allows manual control of the upload process.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload, IconPlus } from '@douyinfe/semi-icons';\n\nclass ManulUploadDemo extends React.Component {\n    constructor() {\n        super();\n        this.manulUpload = this.manulUpload.bind(this);\n        this.uploadRef = React.createRef();\n    }\n\n    manulUpload() {\n        this.uploadRef.current.upload();\n    }\n\n    render() {\n        let action = 'https://api.semi.design/upload';\n        return (\n            <div>\n                <Upload\n                    accept=\"image/gif, image/png, image/jpeg, image/bmp, image/webp\"\n                    action={action}\n                    uploadTrigger=\"custom\"\n                    ref={this.uploadRef}\n                    onSuccess={(...v) => console.log(...v)}\n                    onError={(...v) => console.log(...v)}\n                >\n                    <Button icon={<IconPlus />} theme=\"light\" style={{ marginRight: 8 }}>\n                        选择文件\n                    </Button>\n                </Upload>\n                <Button icon={<IconUpload />} theme=\"light\" onClick={this.manulUpload}>\n                    开始上传\n                </Button>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Anchor with Tooltip Display\nDESCRIPTION: Shows how to enable tooltips for Anchor links when text is truncated, using the showTooltip property set to true for displaying full content on hover.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                showTooltip={true}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}\n            >\n                <Anchor.Link href=\"#Show_Tooltip\" title=\"Tooltip is a useful tool that displays the entire content when text is abbreviated.\" />\n                <Anchor.Link href=\"#Components\" title=\"Components\" />\n                <Anchor.Link href=\"#Design\" title=\"Design\" />\n                <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n                <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Interactive Steps Progress\nDESCRIPTION: Demonstrates an interactive steps implementation with next/previous navigation and content display\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Steps, Button } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        };\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({ current });\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({ current });\n    }\n\n    render() {\n        const { current } = this.state;\n        const { Step } = Steps;\n        const steps = [\n            {\n                title: 'First',\n                content: 'First-content',\n            },\n            {\n                title: 'Second',\n                content: 'Second-content',\n            },\n            {\n                title: 'Last',\n                content: 'Last-content',\n            },\n        ];\n\n        return (\n            <div>\n                <Steps type=\"basic\" current={current} onChange={(i)=>console.log(i)}>\n                    {steps.map(item => (\n                        <Step key={item.title} title={item.title} />\n                    ))}\n                </Steps>\n                <div className Name=\"steps-content\" style={{ marginTop: 4, marginBottom: 4 }}>\n                    {steps[current].content}\n                </div>\n                <div className=\"steps-action\">\n                    {current < steps.length - 1 && (\n                        <Button type=\"primary\" onClick={() => this.next()}>\n                            Next\n                        </Button>\n                    )}\n                    {current === steps.length - 1 && (\n                        <Button type=\"primary\" onClick={() => console.log('Processing complete!')}>\n                            Done\n                        </Button>\n                    )}\n                    {current > 0 && (\n                        <Button style={{ marginLeft: 8 }} onClick={() => this.prev()}>\n                            Previous\n                        </Button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip with Popconfirm in React\nDESCRIPTION: Demonstrates how to properly nest Tooltip inside Popconfirm by wrapping the Tooltip in a span element to prevent event hijacking issues.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Popconfirm, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Popconfirm content=\"是否确认删除\" title='确认' style={{ width: 320 }}>\n        <span style={{ display: 'inline-block' }}>\n            <Tooltip content={'删除评价'}>\n                <Button type=\"danger\">删除</Button>\n            </Tooltip>\n        </span>\n    </Popconfirm>\n);\n```\n\n----------------------------------------\n\nTITLE: FileItem Interface Definition in TypeScript\nDESCRIPTION: Interface definition for the FileItem object used in the Upload component. This defines the structure of each file in the upload list with properties for status, progress, validation, and display controls.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileItem {\n    event? : event,  // xhr event\n    fileInstance?: File, // original File Object which extends Blob, 浏览器实际获取到的文件对象(https://developer.mozilla.org/zh-CN/docs/Web/API/File)\n    name: string,\n    percent? : number, // 上传进度百分比\n    preview: boolean, // 是否根据url进行预览\n    response?: any, // xhr的response, 请求成功时为respoonse body，请求失败时为对应 error\n    shouldUpload?: boolean; // 是否应该继续上传\n    showReplace?: boolean, // 单独控制该file是否展示替换按钮\n    showRetry?: boolean, // 单独控制该file是否展示重试按钮\n    size: string, // 文件大小，单位kb\n    status: string, // 'success' | 'uploadFail' | 'validateFail' | 'validating' | 'uploading' | 'wait';\n    uid: string, // 文件唯一标识符，如果当前文件是通过upload选中添加的，会自动生成uid。如果是defaultFileList, 需要自行保证不会重复\n    url: string,\n    validateMessage?: ReactNode | string,\n}\n```\n\n----------------------------------------\n\nTITLE: Focus-Based Date Range Disabling\nDESCRIPTION: Demonstrates how to disable dates based on the input focus state in a date range picker using rangeInputFocus option.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\nimport * as dateFns from 'date-fns';\n\nfunction App() {\n    const today = new Date();\n    const disabledDate = (date, options) => {\n        const { rangeInputFocus } = options;\n        const baseDate = dateFns.set(today, { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });\n        if (rangeInputFocus === 'rangeStart') {\n            const disabledStart = dateFns.subDays(baseDate, 2);\n            const disabledEnd = dateFns.addDays(baseDate, 2);\n            return disabledStart <= date && date <= disabledEnd;\n        } else if (rangeInputFocus === 'rangeEnd') {\n            const disabledStart = dateFns.subDays(baseDate, 3);\n            const disabledEnd = dateFns.addDays(baseDate, 3);\n            return disabledStart <= date && date <= disabledEnd;\n        } else {\n            return false;\n        }\n    };\n\n    return (\n        <div>\n            <h4>{`Start date disables 2 days before and 2 days after today, end date disables 3 days before and 3 days after today`}</h4>\n            <DatePicker motion={false} type='dateRange' disabledDate={disabledDate} defaultPickerValue={today} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Borders in Semi Design\nDESCRIPTION: Shows how to customize card borders and lines using the 'bordered', 'headerLine', and 'footerLine' props of the Card component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div \n            style={{\n                display: 'inline-block',\n                padding: 20,\n                backgroundColor: 'var(--semi-color-fill-0)'\n            }}\n        >\n            <Card \n                style={{ maxWidth: 360 }}\n                bordered={false}\n                headerLine={true}\n                title='Semi Design'\n            >\n                Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。设计系统包含设计语言以及一整套可复用的前端组件，帮助设计师与开发者更容易地打造高质量的、用户体验一致的、符合设计规范的 Web 应用。\n            </Card>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: 自定义Toast显示时长 (React)\nDESCRIPTION: 展示如何通过设置duration属性来自定义Toast的显示时长。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Toast, Button } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    let opts = {\n        content: 'Hi, Bytedance dance dance',\n        duration: 10,\n    };\n\n    return <Button onClick={() => Toast.info(opts)}>Close After 10s</Button>;\n}\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Defining Snap Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Snap property that specifies x and y coordinates for resizing snap points.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/resizable/index-en-US.md#2025-04-12_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Snap {\n    x: number[];\n    y: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Icon组件的旋转与动画效果示例\nDESCRIPTION: 展示如何使用size、rotate和spin属性来控制图标的大小、旋转角度和旋转动画效果。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconHome, IconEmoji, IconSpin } from '@douyinfe/semi-icons';\n\n() => (\n    <div>\n        <IconHome size=\"small\" />\n        <IconEmoji rotate={180} />\n        <IconSpin spin />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Card with Cover in Semi Design\nDESCRIPTION: Demonstrates how to add a cover image to a card using the 'cover' property. It also uses Card.Meta for the title.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <Card\n            style={{ maxWidth: 300 }}\n            cover={ \n                <img \n                    alt=\"example\" \n                    src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/card-cover-docs-demo2.jpeg\" \n                />\n            }\n        >\n            <Meta title=\"Card cover\" />\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch States in React\nDESCRIPTION: 展示Switch组件的禁用状态，包括未选中和选中两种情况。通过disabled属性控制禁用状态。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Switch } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Switch disabled aria-label=\"a switch for demo\"></Switch>\n        <br />\n        <Switch disabled checked={true} aria-label=\"a switch for demo\"></Switch>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Component in React\nDESCRIPTION: Shows how to import the Toast component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toast } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Cascader Component Methods Interface\nDESCRIPTION: Interface defining the methods available through ref on the Cascader component, including open/close dropdown, focus/blur, and search functionality.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CascaderMethods {\n    close(): void;\n    open(): void;\n    focus(): void;\n    blur(): void;\n    search(value: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Radio Component in Semi Design\nDESCRIPTION: Demonstrates how to create disabled Radio components and toggle their disabled state.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Radio, Button } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            disabled: true,\n        };\n        this.toggleDisabled = this.toggleDisabled.bind(this);\n    }\n\n    toggleDisabled() {\n        this.setState({\n            disabled: !this.state.disabled,\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Radio defaultChecked={false} disabled={this.state.disabled} aria-label=\"Radio demo\" name=\"demo-radio-disabled\">\n                    Disabled\n                </Radio>\n                <br />\n                <Radio defaultChecked disabled={this.state.disabled} aria-label=\"Radio demo\" name=\"demo-radio-defaultChecked-disabled\">\n                    Disabled\n                </Radio>\n                <div style={{ marginTop: 20 }}>\n                    <Button type=\"primary\" onClick={this.toggleDisabled} aria-label=\"Radio demo\">\n                        Toggle disabled\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Tooltip Styles in React with Semi-Design\nDESCRIPTION: Demonstrates how to customize the Tooltip component's style and className. It overrides the default maxWidth and adds a custom className to the Tooltip.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\n\n() => {\n    return (\n        <Tooltip\n            style={{\n                maxWidth: 320,\n            }}\n            className=\"another-classname\"\n            content={'hi semi semi semi semi semi semi semi'}\n        >\n            <Tag style={{ marginRight: '8px' }}>Custom Style And ClassName</Tag>\n        </Tooltip>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Spin Component from Semi Design\nDESCRIPTION: Basic import statement for the Spin component from the Semi Design UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spin } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Setting Theme for AudioPlayer Component\nDESCRIPTION: 通过theme属性设置AudioPlayer组件的主题，支持'light'和'dark'两种主题，默认为'dark'。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/audioPlayer/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { AudioPlayer } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const audioUrlArrObj = [\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio1.mp3',\n            title: '音频标题1',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n        {\n            src: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/components/audio2.mp3',\n            title: '音频标题2',\n            cover: 'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/abstract.jpg',\n        },\n    ];\n  \n    return (\n        <div style={{ width: '100%' }}>\n            <AudioPlayer\n                audioUrl={audioUrlArrObj}\n                theme=\"light\"\n            />\n        </div>\n    );\n}\n\nrender(Demo);\n```\n\n----------------------------------------\n\nTITLE: Disabling TimePicker in React\nDESCRIPTION: Shows how to disable the TimePicker component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { TimePicker } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return <TimePicker defaultValue={'12:08:23'} disabled />;\n}\n```\n\n----------------------------------------\n\nTITLE: Input Size Variations\nDESCRIPTION: Shows different size variations (large, default, small) of the Input component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n\n() => (\n    <>\n        <Input placeholder='large' size='large'></Input>\n        <br/><br/>\n        <Input placeholder='default'></Input>\n        <br/><br/>\n        <Input placeholder='small' size='small'></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Lottie Animation from Local JSON\nDESCRIPTION: Shows how to render a Lottie animation using locally imported JSON data with state management.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/lottie/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Lottie } from '@douyinfe/semi-ui';\nimport React from 'react';\n\n() => {\n    const jsonURL =\n        'https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/lottie_demo.json';\n    const [data, setData] = useState('');\n\n    useEffect(() => {\n        fetch(jsonURL)\n            .then(resp => resp.json())\n            .then(setData);\n    }, []);\n\n    return (\n        <div>\n            <Lottie params={{ animationData: data }} width={'300px'} height={'300px'} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Form with Semi-UI Components\nDESCRIPTION: Example of setting up a simple form using Semi-UI Form and Button components in a React application. It demonstrates how to initialize a form field with a default value and add a submit button.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Button, Form } from '@douyinfe/semi-ui';\n\nconst App = () => (\n    <Form>\n        <Form.Input field='name' initValue='semi design'></Form.Input>\n        <Button htmlType='submit'>submit</Button>\n    </Form>\n);\n\nconst root = createRoot(document.querySelector('#app'));\n\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in React\nDESCRIPTION: Shows how to import the Badge component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/badge/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 多选日期 DatePicker - React\nDESCRIPTION: 通过设置 multiple 属性为 true，实现多个日期的选择功能。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker multiple={true} style={{ width: 240 }} />;\n```\n\n----------------------------------------\n\nTITLE: Customizing Arrow Position in Collapsible Tabs\nDESCRIPTION: Shows different arrow position configurations (start, both, end) for collapsible tabs. Demonstrates how to control navigation arrow placement.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible arrowPosition={'start'}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                        <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                            Content of card tab {i}\n                        </TabPane>\n                    ))}\n                </Tabs>\n                <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible arrowPosition={'both'}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                        <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                            Content of card tab {i}\n                        </TabPane>\n                    ))}\n                </Tabs>\n                <Tabs style={{ width: '60%', margin: '20px' }} type=\"card\" collapsible arrowPosition={'end'}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => (\n                        <TabPane tab={`Tab-${i}`} itemKey={`Tab-${i}`} key={i}>\n                            Content of card tab {i}\n                        </TabPane>\n                    ))}\n                </Tabs>\n            </>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker Directly in React\nDESCRIPTION: 展示了如何直接在页面上使用 ColorPicker，而不是在弹层中。alpha 属性控制是否显示透明度选择器。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/colorpicker/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { ColorPicker } from '@douyinfe/semi-ui';\nfunction Demo() {\n    return <ColorPicker alpha={true} onChange={value=>{console.log(value);}}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Inter Font Family in CSS\nDESCRIPTION: CSS code to import the Inter and Inter-Bold font families through @font-face declarations. These fonts are hosted on a CDN and need to be imported separately to reduce bundle size and allow businesses to decide whether to use them.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/tokens/index.md#2025-04-12_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: \"Inter\";\n  src: url(\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/slepweh7nupqpognuhbo/Inter-Regular.ttf\") format(\"truetype\");\n}\n\n@font-face {\n  font-family: \"Inter-Bold\";\n  src: url(\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/slepweh7nupqpognuhbo/Inter-Bold.ttf\") format(\"truetype\");\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Transfer with Filtering and Item Rendering\nDESCRIPTION: 展示如何自定义穿梭框的筛选逻辑和数据项渲染。使用filter自定义搜索逻辑，renderSourceItem自定义左侧源数据渲染，renderSelectedItem自定义右侧已选项渲染。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/transfer/index.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Transfer, Checkbox, Avatar, Highlight } from '@douyinfe/semi-ui';\nimport { IconClose } from '@douyinfe/semi-icons';\n\n() => {\n    const [searchText, setSearchText] = useState('');\n    const renderSourceItem = item => {\n        return (\n            <div className=\"components-transfer-demo-source-item\" key={item.label}>\n                <Checkbox\n                    onChange={() => {\n                        item.onChange();\n                    }}\n                    key={item.label}\n                    checked={item.checked}\n                    style={{ height: 52, alignItems: 'center' }}\n                >\n                    <Avatar color={item.color} size=\"small\">\n                        {item.abbr}\n                    </Avatar>\n                    <div className=\"info\">\n                        <div className=\"name\">\n                            <Highlight sourceString={item.label} searchWords={[searchText]}></Highlight>\n                        </div>\n                        <div className=\"email\">\n                            <Highlight sourceString={item.value} searchWords={[searchText]}></Highlight>\n                        </div>\n                    </div>\n                </Checkbox>\n            </div>\n        );\n    };\n\n    const renderSelectedItem = item => {\n        return (\n            <div className=\"components-transfer-demo-selected-item\" key={item.label}>\n                <Avatar color={item.color} size=\"small\">\n                    {item.abbr}\n                </Avatar>\n                <div className=\"info\">\n                    <div className=\"name\">{item.label}</div>\n                    <div className=\"email\">{item.value}</div>\n                </div>\n                <IconClose onClick={item.onRemove} />\n            </div>\n        );\n    };\n\n    const customFilter = (sugInput, item) => {\n        return item.value.includes(sugInput) || item.label.includes(sugInput);\n    };\n\n    const data = [\n        { label: '夏可漫', value: 'xiakeman@example.com', abbr: '夏', color: 'amber', area: 'US', key: 1 },\n        { label: '申悦', value: 'shenyue@example.com', abbr: '申', color: 'indigo', area: 'UK', key: 2 },\n        { label: '文嘉茂', value: 'wenjiamao@example.com', abbr: '文', color: 'cyan', area: 'HK', key: 3 },\n        { label: '曲晨一', value: 'quchenyi@example.com', abbr: '曲', color: 'blue', area: 'India', key: 4 },\n        { label: '曲晨二', value: 'quchener@example.com', abbr: '二', color: 'blue', area: 'India', key: 5 },\n        { label: '曲晨三', value: 'quchensan@example.com', abbr: '三', color: 'blue', area: 'India', key: 6 },\n    ];\n\n    return (\n        <Transfer\n            style={{ width: 568 }}\n            dataSource={data}\n            filter={customFilter}\n            defaultValue={['xiakeman@example.com', 'shenyue@example.com']}\n            renderSelectedItem={renderSelectedItem}\n            renderSourceItem={renderSourceItem}\n            inputProps={{ placeholder: '搜索姓名或邮箱' }}\n            onSearch={searchText => setSearchText(searchText)}\n            onChange={(values, items) => console.log(values, items)}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: JSX方式声明Checkbox组\nDESCRIPTION: 使用CheckboxGroup组件包裹多个Checkbox元素创建复选框组，通过defaultValue属性设置默认选中的选项。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/checkbox/index.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { CheckboxGroup, Checkbox } from '@douyinfe/semi-ui';\n\n() => (\n    <CheckboxGroup style={{ width: '100%' }} defaultValue={['A', 'B']} aria-label=\"CheckboxGroup 示例\">\n        <Checkbox value=\"A\">A</Checkbox>\n        <Checkbox value=\"B\">B</Checkbox>\n        <Checkbox value=\"C\">C</Checkbox>\n        <Checkbox value=\"D\">D</Checkbox>\n        <Checkbox value=\"E\">E</Checkbox>\n    </CheckboxGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Card Style Radio Group in Semi Design\nDESCRIPTION: Shows how to create a card-style Radio group with background using the 'type' prop set to 'card'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { RadioGroup, Radio } from '@douyinfe/semi-ui';\n\n() => (\n    <RadioGroup type='card' defaultValue={1} direction='vertical' aria-label=\"RadioGroup demo\" name=\"demo-radio-group-card\">\n        <Radio value={1} extra='Radio description' style={{ width: 280 }}>\n            Radio Title\n        </Radio>\n        <Radio value={2} disabled extra='Radio description' style={{ width: 280 }}>\n            Radio Title\n        </Radio>\n        <Radio value={3} extra='Radio description' style={{ width: 280 }}>\n            Radio Title\n        </Radio>\n    </RadioGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Interface Definition\nDESCRIPTION: TypeScript interface definition for the triggerRender property parameters, including value, inputValue, and various callback functions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/select/index-en-US.md#2025-04-12_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TriggerRenderProps {\n  value: array<object> // All currently selected options\n  inputValue: string; // The input value of the current input box\n  onSearch: (inputValue: string) => void; // The function used to update the value of the input box\n  onClear: () => void; // Function to clear the value\n  onRemove: (option: object) => void; // support after v2.32\n  disabled: boolean; // Whether to disable Select\n  placeholder: string; // Select placeholder\n  componentProps: //All props passed to Select by users\n}\n```\n\n----------------------------------------\n\nTITLE: Tertiary Rail Theme Anchor\nDESCRIPTION: Shows the Tertiary rail theme option for the Anchor component, providing a different visual styling for the indicator rail.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                railTheme={'tertiary'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#Size\" title=\"Size\" />\n                <Anchor.Link href=\"#Rail_Theme\" title=\"Rail Theme\" />\n                <Anchor.Link href=\"#Design\" title=\"Design\" />\n                <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n                <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Theme Registration for Legacy Semi Versions\nDESCRIPTION: Code example showing how to manually register and apply VChart themes for older Semi Design versions\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport semiDesignLight from '@visactor/vchart-semi-theme/public/semiDesignLight.json';\nimport semiDesignDark from '@visactor/vchart-semi-theme/public/semiDesignDark.json';\nimport VChart from '@visactor/vchart';\n// register the theme\nVChart.ThemeManager.registerTheme('semiDesignLight', semiDesignLight);\nVChart.ThemeManager.registerTheme('semiDesignDark', semiDesignDark);\n// apply the light theme\nVChart.ThemeManager.setCurrentTheme('semiDesignLight');\n// apply the dark theme\nVChart.ThemeManager.setCurrentTheme('semiDesignDark');\n```\n\n----------------------------------------\n\nTITLE: Disabled Panel in Collapse\nDESCRIPTION: Demonstrates how to disable specific panels within a Collapse component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapse/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse } from '@douyinfe/semi-ui';\n\n() => (\n    <Collapse accordion>\n        <Collapse.Panel header=\"This is panel header 1\" itemKey=\"1\" disabled>\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 2\" itemKey=\"2\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n        <Collapse.Panel header=\"This is panel header 3\" itemKey=\"3\">\n            <p>Hi, bytedance dance dance. This is the docsite of Semi UI. </p>\n        </Collapse.Panel>\n    </Collapse>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Additional Language Support for Prismjs\nDESCRIPTION: Demonstrates how to import support for additional languages in Prismjs, using Vala as an example.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/codehighlight/index.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"prismjs/components/prism-vala.js\"\n```\n\n----------------------------------------\n\nTITLE: Directory Upload in React Upload Component\nDESCRIPTION: Demonstrates how to enable directory upload using the 'directory' prop in the Upload component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button } from '@douyinfe/semi-ui';\nimport { IconUpload } from '@douyinfe/semi-icons';\n\n() => {\n    let action = 'https://api.semi.design/upload';\n    return (\n        <>\n            <Upload action={action} directory>\n                <Button icon={<IconUpload />} theme=\"light\">\n                    上传文件夹\n                </Button>\n            </Upload>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessible Collapsible Implementation\nDESCRIPTION: Shows how to implement Collapsible with ARIA attributes for accessibility\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/collapsible/index-en-US.md#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Collapsible from './index';\n\n()=>{\n    const collapseId = 'myCollapsible';\n    const [visible, setVisible]=useState(false);\n    return <>\n        <Button onClick={()=>setVisible(!visible)} aria-controls={`${collapseId}`}>{visible?'hide':'show'}</Button>\n        <Collapsible isOpen={visible} id={collapseId}>\n            <div>hide content</div>\n        </Collapsible>\n    </>;\n};\n```\n\n----------------------------------------\n\nTITLE: Avoiding React and ReactDOM Imports in Foundation\nDESCRIPTION: Highlights the rule of not importing React or ReactDOM within the semi-foundation to adhere to design principles that separate foundational logic from UI dependencies.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ \\n// packages/semi-foundation/input/foundation.ts\\nimport React from 'react';\\nimport ReactDOM from 'react-dom';\n```\n\n----------------------------------------\n\nTITLE: Disabled Pagination in React\nDESCRIPTION: Shows how to create a disabled Pagination component using the 'disabled' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@douyinfe/semi-ui';\n\n() => (\n    <Pagination total={30} disabled style={{ marginBottom: 12 }}></Pagination>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Cards in Semi Design\nDESCRIPTION: Shows how to create simple cards with only content and cards with meta information using the Card and Card.Meta components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Popover, Avatar } from '@douyinfe/semi-ui';\nimport { IconInfoCircle } from '@douyinfe/semi-icons';\n\nfunction Demo() {\n    const { Meta } = Card;\n\n    return (\n        <>\n            <Card style={{ maxWidth: 360 }} >\n                Semi Design 是由抖音前端团队与 UED 团队共同设计开发并维护的设计系统。\n            </Card>\n            <br />\n            <Card \n                style={{ maxWidth: 360 }} \n                bodyStyle={{ \n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}\n            >\n                <Meta \n                    title=\"Semi Doc\" \n                    avatar={\n                        <Avatar \n                            alt='Card meta img'\n                            size=\"default\"\n                            src='https://lf3-static.bytednsdoc.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/card-meta-avatar-docs-demo.jpg'\n                        />\n                    }\n                />\n                <Popover\n                    position='top'\n                    showArrow\n                    content={\n                        <article style={{ padding: 6 }}>\n                            这是一个 Card\n                        </article>\n                    }\n                >\n                    <IconInfoCircle style={{ color: 'var(--semi-color-primary)' }}/>\n                </Popover>\n            </Card>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semi Design Plugin for Next.js\nDESCRIPTION: Setup for using the @douyinfe/semi-next plugin in a Next.js project to enable custom theming and support for older Next.js versions.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/getting-started/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst semi = require('@douyinfe/semi-next').default({\n    /* the extension options */\n});\nmodule.exports = semi({\n    // your custom Next.js configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Content in React\nDESCRIPTION: Shows how to update the content of an existing notification using a unique ID with the Semi-Design Notification component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Notification, Button } from '@douyinfe/semi-ui';\n\n() => (\n    <Button\n        onClick={() => {\n            const id = Notification.open({\n                title: 'Hi, Bytedance',\n                content: 'ies dance dance dance',\n                duration: 3,\n            })\n            setTimeout(() => {\n                Notification.open({\n                    title: 'Hi, Bytedance',\n                    content: 'updated',\n                    duration: 10,\n                    id\n                })\n            }, 1000)\n        }\n        }\n    >\n        Display Notification\n    </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Selector Prefix Replacement JavaScript\nDESCRIPTION: Use the '@douyinfe/semi-webpack-plugin' to replace the default 'semi' prefix in CSS selectors with a custom one by setting the 'prefixCls' option.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-webpack/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst SemiPlugin = require('@douyinfe/semi-webpack-plugin').default;\n\nmodule.exports = {\n    plugins: [\n        new SemiPlugin({\n            prefixCls: 'custom'\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Avatar Upload Component in CSS\nDESCRIPTION: CSS styles to make the upload area circular for the avatar upload component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/upload/index.md#2025-04-12_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.avatar-upload .semi-upload-add {\n    border-radius: 50%; // 确保只有圆是点击热区\n}\n```\n\n----------------------------------------\n\nTITLE: Muted Rail Theme Anchor\nDESCRIPTION: Demonstrates the Muted rail theme option for the Anchor component, providing a more subdued visual style for the indicator rail.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/anchor/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Anchor } from '@douyinfe/semi-ui';\n\n() => {\n    const getContainer = () => {\n        return document.querySelector('window');\n    };\n    return (\n        <div>\n            <Anchor\n                railTheme={'muted'}\n                getContainer={getContainer}\n                targetOffset={60}\n                offsetTop={100}>\n                <Anchor.Link href=\"#Size\" title=\"Size\" />\n                <Anchor.Link href=\"#Rail_Theme\" title=\"Rail Theme\" />\n                <Anchor.Link href=\"#Design\" title=\"Design\" />\n                <Anchor.Link href=\"#Blocks\" title=\"Blocks\" />\n                <Anchor.Link href=\"#Theme\" title=\"Theme\" />\n            </Anchor>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Input Validation States\nDESCRIPTION: Shows different validation states (warning, error) for the Input component.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/input/index-en-US.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Input } from '@douyinfe/semi-ui';\n() => (\n    <>\n        <Input defaultValue='ies' validateStatus='warning'></Input>\n        <br/><br/>\n        <Input defaultValue='ies' validateStatus='error'></Input>\n        <br/><br/>\n        <Input defaultValue='ies'></Input>\n    </>\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Deprecated Toast Action in JSX\nDESCRIPTION: Example showing a deprecated approach to Toast actions, using dismissive actions like 'Dismiss'. This pattern should be avoided according to the content guidelines.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/toast/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastCard type='error' content={<div>Ticket transfer failed <span style={{ color: 'var(--semi-color-primary)', marginLeft: 4, cursor: 'pointer' }}>Dismiss</span> </div>} />\n```\n\n----------------------------------------\n\nTITLE: Custom Theme via NPM Package JavaScript\nDESCRIPTION: Configure Webpack to use a custom theme by specifying an npm package name under the 'theme' option in the '@douyinfe/semi-webpack-plugin'.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-webpack/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst SemiPlugin = require('@douyinfe/semi-webpack-plugin').default;\n\nmodule.exports = {\n    plugins: [\n        new SemiPlugin({\n            theme: '@douyinfe/semi-theme-default'\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Icons Lab Package\nDESCRIPTION: This command installs the `@douyinfe/semi-icons-lab` package as a dependency to your project. It uses npm, the Node Package Manager.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-icons-lab/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @douyinfe/semi-icons-lab\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Day Status Type in Markdown\nDESCRIPTION: Type definition for the dayStatus object that describes various states of a date box in the DatePicker component\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index-en-US.md#2025-04-12_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\ntype DayStatusType = {\n    isToday?: boolean,\n    isSelected?: boolean,\n    isDisabled?: boolean,\n    isSelectedStart?: boolean,\n    isSelectedEnd?: boolean,\n    isInRange?: boolean,\n    isHover?: boolean,\n    isOffsetRangeStart?: boolean,\n    isOffsetRangeEnd?: boolean,\n    isHoverInOffsetRange?: boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Icon组件颜色设置示例\nDESCRIPTION: 演示如何通过CSS的color属性或者style属性来设置图标的颜色。图标会自动继承外部容器的color属性，也可以直接给图标设置style来指定颜色。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconLikeHeart, IconFlag, IconLock, IconUnlock } from '@douyinfe/semi-icons';\n\n() => (\n    <div>\n        <div style={{ color: '#E91E63' }} >\n            <IconLikeHeart size=\"extra-large\"/>\n            <IconFlag size=\"extra-large\"/>\n        </div>\n        <br/>\n        <div>\n            <IconLock style={{ color: '#6A3AC7' }} size=\"extra-large\" />\n            <IconUnlock style={{ color: '#9C27B0' }} size=\"extra-large\"/>\n        </div>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Slider with Tooltip Customization\nDESCRIPTION: Examples showing tooltip formatting and hiding using tipFormatter property\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index-en-US.md#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@douyinfe/semi-ui';\n\n() => (\n    <div>\n        <Slider tipFormatter={v => (`${v}%`)} />\n        <br/>\n        <br/>\n        <Slider tipFormatter={null} />\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Theme via Local SCSS File SCSS\nDESCRIPTION: Create a local SCSS file (e.g., local.scss) to define design tokens like font sizes for customizing Semi Design themes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-webpack/README.md#2025-04-12_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n$font-size-small: 16px;\n```\n\n----------------------------------------\n\nTITLE: Steps.Step Component Parameters Table\nDESCRIPTION: Markdown table defining all available parameters for the Steps.Step subcomponent, including their types, defaults, and version information.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/steps/index-en-US.md#2025-04-12_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameters | Instructions | type | Default | Version |\n| --- | --- | --- | --- | --- |\n| aria-label | Container aria-label   | React.AriaAttributes[\"aria-label\"] |  |   |\n| description | Detailed description of steps, optional | ReactNode |  | - |  |\n| icon | Type of step icon, optional | ReactNode |  | - |  |\n| role      | Container role  | React.AriaRole | -  |    |\n| status | Specify the state. When this property is not configured, the `current`of Steps is used to automatically specify the state. Optional: `wait`,`process`,`finish`,`error`,`warning` | string | wait |  |\n| style     | CSS Style                                                                          | CSSProperties |            |    |\n| title | Title | ReactNode |  | - |  |\n| onClick | Callback of click | function | - |  |\n| onKeyDown     | Callback ok keyDown  | function | -   |    |\n```\n\n----------------------------------------\n\nTITLE: Listing Other Utility Components in Semi Design\nDESCRIPTION: Enumerates additional utility components in the Semi Design library, focusing on configuration and localization providers.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index-en-US.md#2025-04-12_snippet_6\n\nLANGUAGE: overview\nCODE:\n```\nConfigProvider,\nLocaleProvider\n```\n\n----------------------------------------\n\nTITLE: Slider with Dot Handle in React\nDESCRIPTION: 展示带圆点的滑块，可以自定义圆点的大小和颜色。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n  <div>\n        <div>\n            <div>Default</div>\n            <Slider showBoundary={true} handleDot={{size:'4px',color:'blue'}}></Slider>\n        </div>\n        <br/>\n        <br/>\n        <div>\n            <div>Range</div>\n            <Slider defaultValue={[20, 60]} range handleDot={[{size:'4px',color:'blue'},{size:'4px',color:'pink'}]}></Slider>\n        </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Installing VChart Dependencies with NPM/Yarn\nDESCRIPTION: Commands for installing required VChart packages including the React wrapper and Semi theme\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/chart/index.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @visactor/react-vchart\n\n# yarn\nyarn add @visactor/react-vchart\n```\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @visactor/vchart-semi-theme\n\n# yarn\nyarn add @visactor/vchart-semi-theme\n```\n\n----------------------------------------\n\nTITLE: Incorrect Foundation Package Import from UI\nDESCRIPTION: Example of an incorrect import pattern where semi-foundation imports from semi-ui, which violates the dependency design principles\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README-zh_CN.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ 不推荐\n// semi-ui/input/index.tsx\nimport inputFoundation from '../semi-foundation/input/foundation';\n```\n\n----------------------------------------\n\nTITLE: Importing PinCode Component in React\nDESCRIPTION: Shows how to import the PinCode component from the Semi UI library. PinCode is supported from version 2.62.0 onwards.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/pincode/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PinCode } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Custom Content in HotKeys Component\nDESCRIPTION: Shows how to customize the content of the HotKeys component using the 'content' prop.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/hotkeys/index-en-US.md#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { HotKeys, Modal } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n  const [visible, setVisible] = useState(false);\n  const showDialog = () => {\n      setVisible(true);\n  };\n  const handleOk = () => {\n      setVisible(false);\n  };\n  const handleCancel = () => {\n      setVisible(false);\n  };\n  const hotKeys = [HotKeys.Keys.Control, 'Shift', HotKeys.Keys.B]\n  \n  return (\n    <div>\n      <HotKeys hotKeys={hotKeys} onHotKey={showDialog} content={['Ctrl', 'Shift', 'B']}></HotKeys>\n      <Modal\n          title=\"Dialog\"\n          visible={visible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n      >\n          This is the Modal opened by hotkey: {hotKeys.join('+')}.\n      </Modal>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Cards in Semi Design\nDESCRIPTION: Demonstrates how to nest cards within other cards, creating a hierarchical structure of card components.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/card/index.md#2025-04-12_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Card, Typography } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    const { Text } = Typography;\n  \n    return (\n        <Card title='Card title' >\n            <Card \n                title='Inner Card title'\n                style={{ marginBottom: 20 }}\n                headerExtraContent={\n                    <Text link>\n                        More\n                    </Text>\n                }\n            >\n                Inner Card content\n            </Card>\n            <Card \n                title='Inner Card title'\n                headerExtraContent={\n                    <Text link>\n                        More\n                    </Text>\n                }\n            >\n                Inner Card content\n            </Card>\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Intra-Package Import\nDESCRIPTION: Example of an incorrect import within the same package using full package path instead of relative import\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README-zh_CN.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ 不推荐\n// semi-ui/modal/Modal.tsx\nimport { Button } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Notification Component in React\nDESCRIPTION: How to import the Notification component from the Semi-Design UI library for use in React applications.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/notification/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Notification } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Skeleton.Paragraph Component Properties Table\nDESCRIPTION: Markdown table listing the properties of the Skeleton.Paragraph component, including className, rows, and style attributes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性      | 说明                 | 类型          | 默认值 |\n| --------- | -------------------- | ------------- | ------ |\n| className | 类名                 | string        | -      |\n| rows      | 设置段落占位图的行数 | number        | 4      |\n| style     | 样式                 | CSSProperties | -      |\n```\n\n----------------------------------------\n\nTITLE: 导入Grid组件 (React)\nDESCRIPTION: 从Semi UI库中导入Col和Row组件用于创建栅格布局。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/grid/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Col, Row } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing TagInput Component in React\nDESCRIPTION: Shows how to import the TagInput component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/taginput/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TagInput } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 引入Chat组件 - React\nDESCRIPTION: 从@douyinfe/semi-ui包中引入Chat组件。Chat组件从v2.63.0版本开始支持。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/plus/chat/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chat } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component in React\nDESCRIPTION: Demonstrates how to import the Tabs and TabPane components from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tabs/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Component in React\nDESCRIPTION: Basic import statement for the Tooltip component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 年月选择 DatePicker - React\nDESCRIPTION: 使用 type=\"month\" 实现年月选择功能。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/datepicker/index.md#2025-04-12_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { DatePicker } from '@douyinfe/semi-ui';\n\n() => <DatePicker defaultValue={new Date()} type=\"month\" style={{ width: 140 }} />;\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component\nDESCRIPTION: Basic import statement for the Switch component from Semi UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/switch/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: 基础使用Icon组件示例\nDESCRIPTION: 展示如何使用从@douyinfe/semi-icons包中导入的图标组件进行基本渲染。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/basic/icon/index.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { IconHome } from '@douyinfe/semi-icons';\n\n() => <IconHome />;\n```\n\n----------------------------------------\n\nTITLE: Importing Timeline Component in React\nDESCRIPTION: Basic import statement for the Timeline component from Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/timeline/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Timeline } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Component in Semi Design\nDESCRIPTION: Shows how to import the Radio and RadioGroup components from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/radio/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Radio, RadioGroup } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Expand Icon Props Interface in Semi Design Tree Component\nDESCRIPTION: This TypeScript interface defines the properties for the expandIcon function in the Tree component. It includes the onClick event handler, className for styling, and expanded state flag.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/tree/index.md#2025-04-12_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexpandIcon: ReactNode | ((props: {\n    onClick: (e: MouseEvent) => void;\n    className: string;\n    expanded: boolean;\n}))\n```\n\n----------------------------------------\n\nTITLE: Importing AutoComplete Component in React\nDESCRIPTION: Shows how to import the AutoComplete component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/autocomplete/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AutoComplete } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component - React/JSX\nDESCRIPTION: Shows how to import the Pagination component from the Semi-Design UI library\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/pagination/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Pagination } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Listing Plus Components in Semi Design\nDESCRIPTION: This snippet enumerates additional specialized components in the Semi Design library, such as code highlighting, markdown renderer, Lottie animations, chat interface, hotkeys, drag-and-move functionality, JSON viewer, and audio player.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/overview/index.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```overview\nCodeHighlight 代码高亮,\nMarkdown 渲染器,\nLottie 动画,\nChat 对话,\nHotKeys 快捷键,\nDragMove 拖拽移动,\nJsonViewer Json编辑器,\nAudioPlayer 音频播放器\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Nav.Item Component Properties in Markdown\nDESCRIPTION: This snippet defines the properties for the Nav.Item subcomponent using a markdown table. It includes properties such as disabled, icon, indent, itemKey, level, link, linkOptions, text, onClick, onMouseEnter, and onMouseLeave.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/navigation/navigation/index-en-US.md#2025-04-12_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Properties   | Description                                                                                                       | Type                                                                 | Default  |\n| ------------ | ----------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- | -------- | ------- |\n| disabled     | Disabled state                                                                                                    | boolean                                                              | false    |\n| icon         | Navigation project icon name or component                                                                         | ReactNode                                                            |          | \n| indent       | If the icon is empty, keep its space or not. Only effective for first level navigation                            | boolean                                                              | false    |\n| itemKey      | Unique item identifier, no duplication allowed                                                                    | string                                                               | \"\"       |\n| level        | The nesting level of the current item. When limitIndent is true, it is used to customize the indentation position | number                                                               |          |\n| link         | Navigation item href link, when imported, the navigation item will be wrapped with an a tag                       | string                                                               | -        |\n| linkOptions  | Parameters transparently passed to the a tag                                                                      | object                                                               | -        |\n| text         | Navigation project copy or element                                                                                | string \\| ReactNode                                                  | \"\"       |\n| onClick      | Callback of click                                                                                                 | function({ itemKey: string, domEvent: MouseEvent, isOpen: boolean }) | () => {} |\n| onMouseEnter | Callback of mouse enter event                                                                                     | function(e) => {}                                                    | () => {} |\n| onMouseLeave | Callback of mouse leave event                                                                                     | function(e) => {}                                                    | () => {} |\n```\n\n----------------------------------------\n\nTITLE: Importing Cascader Component in React\nDESCRIPTION: Shows how to import the Cascader component from the Semi UI library.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/cascader/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cascader } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Customizing Spin Icon Color with CSS\nDESCRIPTION: Shows how to modify the color of the spin icon by overriding the CSS for the spin wrapper element.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/spin/index-en-US.md#2025-04-12_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.semi-spin-wrapper {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Highlight Component in Semi Design\nDESCRIPTION: Shows how to import the Highlight component from Semi Design library. The component is available since v2.24.0.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/highlight/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Highlight } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React\nDESCRIPTION: 展示如何在 React 项目中引入 Semi Design 的 Slider 组件。\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/slider/index.md#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Slider } from '@douyinfe/semi-ui';\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Component Props in Markdown\nDESCRIPTION: This code snippet defines the props for the TimePicker component in a markdown table format. It includes properties such as secondStep, showClear, stopPropagation, size, triggerRender, type, use12Hours, value, onBlur, onChange, onChangeWithDateFirst, onFocus, and onOpenChange.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/input/timepicker/index.md#2025-04-12_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| secondStep            | 秒选项间隔                                                                                                               | number                                                                            | 1                                                                 |            |\n| showClear             | 是否展示清除按钮                                                                                                         | boolean                                                                           | true                                                              |            |\n| stopPropagation       | 是否阻止弹出层上的点击事件冒泡                                                                                           | boolean                                                                           | true                                                              | **2.49.0** |\n| size                  | 输入框的大小，可选 'default'，'small'，'large'                                                                           | string                                                                            | 'default'                                                         |            |\n| triggerRender         | 自定义触发器渲染方法                                                                                                     | ({ placeholder: string }) => ReactNode                                            | -                                                                 |            |\n| type                  | 类型                                                                                                                     | \"time\"|\"timeRange\"                                                               | \"time\"                                                            |            |\n| use12Hours            | 使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a`                                                                   | boolean                                                                           | false                                                             |            |\n| value                 | 当前时间                                                                                                                 | Date|timeStamp|String（type=\"timeRange\"时为数组）                               |                                                                   |            |\n| onBlur                | 失去焦点时的回调                                                                                                         | (e: domEvent) => void                                                             | () => {}                                                          |            |\n| onChange              | 时间发生变化的回调                                                                                                       | Function(time: Date, timeString: string): void （type=\"timeRange\"时入参皆为数组） | 无                                                                |            |\n| onChangeWithDateFirst | 设置为 `true` 时 onChange 的入参顺序为 (Date, string), `false` 时为 (string, Date)                                       | boolean                                                                           | true                                                              | **2.4.0**  |\n| onFocus               | 获得焦点时的回调                                                                                                         | (e: domEvent) => void                                                             | () => {}                                                          |            |\n| onOpenChange          | 面板打开/关闭时的回调                                                                                                    | Function(isOpen: boolean): void                                                   | 无                                                                |            |\n```\n\n----------------------------------------\n\nTITLE: Installing Semi Design A11y Theme Package\nDESCRIPTION: Command to install the accessibility-friendly theme package for Semi Design\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/start/accessibility/index-en-US.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @semi-bot/semi-theme-a11y\n```\n\n----------------------------------------\n\nTITLE: Skeleton Component Properties Table\nDESCRIPTION: Markdown table defining the main Skeleton component's properties including active, className, loading, placeholder and style attributes.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/feedback/skeleton/index.md#2025-04-12_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| 属性        | 说明                                       | 类型          | 默认值 |\n| ----------- | ------------------------------------------ | ------------- | ------ |\n| active      | 是否展示动画效果                           | boolean       | false  |\n| className   | 类名                                       | string        | -      |\n| loading     | 为 true 时，显示占位元素。反之则显示子组件 | boolean       | true   |\n| placeholder | 加载等待时的占位元素                       | ReactNode     | -      |\n| style       | 样式                                       | CSSProperties | -      |\n```\n\n----------------------------------------\n\nTITLE: Correct Foundation Package Import\nDESCRIPTION: Recommended import pattern using full package name to ensure proper dependency resolution across different installation paths\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/packages/semi-eslint-plugin/README-zh_CN.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ 推荐\n// semi-ui/input/index.tsx\nimport inputFoundation from '@douyinfe/semi-foundation/input/foundation';\n```\n\n----------------------------------------\n\nTITLE: Tooltip Rendering to Specified DOM Container\nDESCRIPTION: This example demonstrates how to render the Tooltip's popup to a specific DOM element using the `getPopupContainer` prop. By providing a function that returns a DOM node, the Tooltip will be rendered within that node, allowing for greater control over the popup's positioning and stacking context. When rendering to a container other than `document.body`, the container needs to have `position:relative` set.\nSOURCE: https://github.com/DouyinFE/semi-design/blob/main/content/show/tooltip/index.md#2025-04-12_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\n\nfunction Demo() {\n    return (\n        <div id=\"tooltip-wrapper\" style={{ position: 'relative' }}>\n            <Tooltip\n                position=\"right\"\n                content=\"浮层被渲染至#tooltip-wrapper元素中\"\n                trigger=\"click\"\n                getPopupContainer={() => document.querySelector('#tooltip-wrapper')}\n            >\n                <Tag>点击此处</Tag>\n            </Tooltip>\n        </div>\n    );\n}\n\n```"
  }
]