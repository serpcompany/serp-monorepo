[
  {
    "owner": "pmndrs",
    "repo": "koota",
    "content": "TITLE: React Hooks for Koota ECS Integration\nDESCRIPTION: Introduces React hooks for integrating Koota ECS with React components, including useQuery, useQueryFirst, and useWorld.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst entities = useQuery(Position, Velocity);\n\nreturn (\n  <>\n    {entities.map(entity => <View key={entity.id()} entity={entity} />)}\n  </>\n);\n\nconst player = useQueryFirst(Player, Position);\n\nreturn player ? (\n  <View entity={player} />\n) : null;\n\nconst world = useWorld();\n\nuseEffect(() => {\n    const entity = world.spawn()\n    return => entity.destroy()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: React Hooks for Koota ECS Integration\nDESCRIPTION: Showcases React hooks provided by Koota ECS for querying entities and accessing the world context in React components.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst entities = useQuery(Position, Velocity);\n\nreturn (\n  <>\n    {entities.map(entity => <View key={entity.id()} entity={entity} />)}\n  </>\n);\n\nconst player = useQueryFirst(Player, Position);\n\nreturn player ? (\n  <View entity={player} />\n) : null;\n\nconst world = useWorld();\n\nuseEffect(() => {\n    const entity = world.spawn()\n    return => entity.destroy()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Using Koota with React Components\nDESCRIPTION: Demonstrates how to integrate Koota with React using WorldProvider, useQuery, and useTrait hooks. Shows how to reactively render entities and observe trait changes in components.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { WorldProvider, useQuery, useTrait } from 'koota/react'\n\n// Wrap your app in WorldProvider\ncreateRoot(document.getElementById('root')!).render(\n    <WorldProvider world={world}>\n        <App />\n    </WorldProvider>\n);\n\nfunction RocketRenderer() {\n    // Reactively update whenever the query updates with new entities\n    const rockets = useQuery(Position, Velocity)\n    return (\n        <>\n            {rockets.map((entity) => <RocketView key={entity} entity={entity} />)}\n        </>\n    )\n}\n\nfunction RocketView({ entity }) {\n    // Observes this entity's position trait and reactively updates when it changes\n    const position = useTrait(entity, Position)\n    return (\n        <div style={{ position: 'absolute', left: position.x ?? 0, top: position.y ?? 0 }}>\n        🚀\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Koota in React Components\nDESCRIPTION: Demonstrates how to use Koota traits reactively inside React components, including setting up the WorldProvider and using useQuery and useTrait hooks.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WorldProvider, useQuery, useTrait } from 'koota/react'\n\n// Wrap your app in WorldProvider\ncreateRoot(document.getElementById('root')!).render(\n    <WorldProvider world={world}>\n        <App />\n    </WorldProvider>\n);\n\nfunction RocketRenderer() {\n    // Reactively update whenever the query updates with new entities\n    const rockets = useQuery(Position, Velocity)\n    return (\n        <>\n            {rockets.map((entity) => <RocketView key={entity} entity={entity} />)}\n        </>\n    )\n}\n\nfunction RocketView({ entity }) {\n    // Observes this entity's position trait and reactively updates when it changes\n    const position = useTrait(entity, Position)\n    return (\n        <div style={{ position: 'absolute', left: position.x ?? 0, top: position.y ?? 0 }}>\n        🚀\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing World Provider in React\nDESCRIPTION: Sets up a WorldProvider component to provide world context to child components. Creates a world instance and makes it available to all hooks.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a world and pass it to the provider\nconst world = createWorld();\n\n// All hooks will now use this world instead of the default\nfunction App() {\n  return (\n    <WorldProvider world={world}>\n      <Game />\n    </WorldProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using WorldProvider with React Context\nDESCRIPTION: Demonstrates how to create and provide a world context to child components using WorldProvider, enabling access to the world instance throughout the component tree.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a world and pass it to the provider\nconst world = createWorld();\n\n// All hooks will now use this world instead of the default\nfunction App() {\n  return (\n    <WorldProvider world={world}>\n      <Game />\n    </WorldProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Traits in Koota\nDESCRIPTION: Shows how to define traits, which are the building blocks of state in Koota. Examples include basic traits with default values, traits with callbacks for initial values, and tag traits with no data.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { trait } from 'koota';\n\n// Basic trait with default values\nconst Position = trait({ x: 0, y: 0 });\nconst Velocity = trait({ x: 0, y: 0 });\n\n// Trait with a callback for initial value\n// ⚠️ Must be an object\nconst Mesh = trait(() => new THREE.Mesh());\n\n// Tag trait (no data)\nconst IsActive = trait();\n```\n\n----------------------------------------\n\nTITLE: Defining Traits in Koota\nDESCRIPTION: Examples of defining different types of traits in Koota, including basic traits with default values, traits with callbacks, and tag traits.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { trait } from 'koota';\n\n// Basic trait with default values\nconst Position = trait({ x: 0, y: 0 });\nconst Velocity = trait({ x: 0, y: 0 });\n\n// Trait with a callback for initial value\n// ⚠️ Must be an object\nconst Mesh = trait(() => new THREE.Mesh());\n\n// Tag trait (no data)\nconst IsActive = trait();\n```\n\n----------------------------------------\n\nTITLE: Spawning Entities in Koota\nDESCRIPTION: Demonstrates how to create a world and spawn entities with traits. Entities can be created with default trait values or with custom initial values passed to the trait function.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createWorld } from 'koota';\n\nconst world = createWorld();\n\nconst player = world.spawn(Position, Velocity);\n// Initial values can be passed in to the trait by using it as a function\nconst goblin = world.spawn(Position({ x: 10, y: 10 }), Velocity, Mesh);\n```\n\n----------------------------------------\n\nTITLE: Entity API Usage in Koota ECS\nDESCRIPTION: Demonstrates various Entity API methods including trait management, relationship queries, and entity destruction.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nentity.add(Position) \nentity.remove(Position)\nconst result = enttiy.has(Position) \nconst position = entity.get(Position)\nentity.set(Position, { x: 10, y: 10 })\nentity.set(Position, (prev) => ({\n  x: prev + 1,\n  y: prev + 1\n}))\nconst targets = entity.targetsFor(Contains)\nconst target = entity.targetFor(Contains)\nconst id = entity.id()\nentity.destroy()\n```\n\n----------------------------------------\n\nTITLE: Spawning Entities in Koota\nDESCRIPTION: Demonstrates how to create a world and spawn entities with traits in Koota.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWorld } from 'koota';\n\nconst world = createWorld();\n\nconst player = world.spawn(Position, Velocity);\n// Initial values can be passed in to the trait by using it as a function\nconst goblin = world.spawn(Position({ x: 10, y: 10 }), Velocity, Mesh);\n```\n\n----------------------------------------\n\nTITLE: Querying and Updating Entity Data in Koota\nDESCRIPTION: Shows how to use queries to fetch entities sharing specific traits (archetypes) and batch update them efficiently. This example demonstrates updating position based on velocity.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Run this in a loop\nworld.query(Position, Velocity).updateEach(([position, velocity]) => {\n    position.x += velocity.x * delta;\n    position.y += velocity.y * delta;\n});\n```\n\n----------------------------------------\n\nTITLE: Querying and Updating Data in Koota\nDESCRIPTION: Shows how to use queries to fetch and update entities efficiently in Koota.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Run this in a loop\nworld.query(Position, Velocity).updateEach(([position, velocity]) => {\n    position.x += velocity.x * delta;\n    position.y += velocity.y * delta;\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Koota State with Actions\nDESCRIPTION: Shows how to create and use actions to safely modify Koota state from inside React components, both in effects and event handlers. Actions provide a structured way to manipulate entities.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createActions } from 'koota'\nimport { useActions } from 'koota/react';\n\nconst actions = createActions((world) => ({\n    spawnShip: (position) => world.spawn(Position(position), Velocity),\n    destroyAllShips: (world) => {\n        world.query(Position, Velocity).forEach((entity) => {\n            entity.destroy();\n        });\n    },\n}));\n\nfunction DoomButton() {\n    const { spawnShip, destroyAllShips } = useActions(actions);\n\n    // Spawn three ships on mount\n    useEffect(() => {\n        spawnShip({ x: 0, y: 1 });\n        spawnShip({ x: 1, y: 0 });\n        spawnShip({ x: 1, y: 1 });\n\n        // Destroy all ships during cleanup\n        return () => drestroyAllShips();\n    }, []);\n\n    // And destroy all ships on click!\n    return <button onClick={destroyAllShips}>Boom!</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actions for Safe State Modification in Koota\nDESCRIPTION: Explains how to use actions to safely modify Koota state from inside React components, either in effects or events.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createActions } from 'koota'\nimport { useActions } from 'koota/react';\n\nconst actions = createActions((world) => ({\n    spawnShip: (position) => world.spawn(Position(position), Velocity),\n    destroyAllShips: (world) => {\n        world.query(Position, Velocity).forEach((entity) => {\n            entity.destroy();\n        });\n    },\n}));\n\nfunction DoomButton() {\n    const { spawnShip, destroyAllShips } = useActions(actions);\n\n    // Spawn three ships on mount\n    useEffect(() => {\n        spawnShip({ x: 0, y: 1 });\n        spawnShip({ x: 1, y: 0 });\n        spawnShip({ x: 1, y: 1 });\n\n        // Destroy all ships during cleanup\n        return () => drestroyAllShips();\n    }, []);\n\n    // And destroy all ships on click!\n    return <button onClick={destroyAllShips}>Boom!</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTraitEffect for Trait Change Subscriptions\nDESCRIPTION: Demonstrates useTraitEffect hook for subscribing to trait changes without causing rerenders. Shows both entity-level and world-level trait subscriptions.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to position changes on an entity and update a ref without causing a rerender\nuseTraitEffect(entity, Position, (position) => {\n  if (!position) return;\n  meshRef.current.position.copy(position);\n});\n\n// Subscribe to world-level traits\nuseTraitEffect(world, GameState, (state) => {\n  if (!state) return;\n  console.log('Game state changed:', state);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Koota World Directly in React\nDESCRIPTION: Shows how to directly access and use the Koota world instance in React components using the useWorld hook, allowing for entity management within React effects.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst world = useWorld();\n\nuseEffect(() => {\n    const entity = world.spawn(Velocity, Position);\n    return () => entity.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing World Directly in Koota\nDESCRIPTION: Shows how to access the Koota world directly and use it within a React component.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst world = useWorld();\n\nuseEffect(() => {\n    const entity = world.spawn(Velocity, Position);\n    return () => entity.destroy();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Entity Relationships in Koota\nDESCRIPTION: Demonstrates how to create relationships between entities using the relation function, allowing entities to be connected and queried based on these connections.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst ChildOf = relation();\n\nconst parent = world.spawn();\nconst child = world.spawn(ChildOf(parent));\n\nconst entity = world.queryFirst(ChildOf(parent)); // Returns child\n```\n\n----------------------------------------\n\nTITLE: Using Relationships in Koota\nDESCRIPTION: Demonstrates how to create and use relationships between entities in Koota, including basic relationships, relationships with data, and auto-removing targets.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ChildOf = relation();\n\nconst parent = world.spawn();\nconst child = world.spawn(ChildOf(parent));\n\nconst entity = world.queryFirst(ChildOf(parent)); // Returns child\n\n// With data\nconst Contains = relation({ store: { amount: 0 } });\n\nconst inventory = world.spawn();\nconst gold = world.spawn();\ninventory.add(Contains(gold));\ninventory.set(Contains(gold), { amount: 10 });\n\n// Auto remove target\nconst ChildOf = relation({ autoRemoveTarget: true });\n\nconst parent = world.spawn();\nconst child = world.spawn(ChildOf(parent));\nconst grandchild = world.spawn(ChildOf(child));\n\nparent.destroy();\n\nworld.has(child); // False, the child and grandchild are destroyed too\n```\n\n----------------------------------------\n\nTITLE: Using Exclusive Relationships in Koota\nDESCRIPTION: Explains how to use exclusive relationships in Koota to ensure each entity can only have one target.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Targeting = relation({ exclusive: true });\n\nconst hero = world.spawn();\nconst rat = world.spawn();\nconst goblin = world.spawn();\n\nhero.add(Targeting(rat));\nhero.add(Targeting(goblin));\n\nhero.has(Targeting(rat)); // False\nhero.has(Targeting(goblin)); // True\n```\n\n----------------------------------------\n\nTITLE: Querying All Entities in Koota\nDESCRIPTION: Shows how to query all queryable entities in the world by using an empty query. Explains the difference between queryable entities and all entities in the world.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// Returns all queryable entities\nconst allQueryableEntities = world.query()\n```\n\n----------------------------------------\n\nTITLE: Auto-removing Target Entities in Relationships\nDESCRIPTION: Demonstrates how to configure relationships to automatically remove target entities and their descendants when the source entity is destroyed.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst ChildOf = relation({ autoRemoveTarget: true });\n\nconst parent = world.spawn();\nconst child = world.spawn(ChildOf(parent));\nconst grandchild = world.spawn(ChildOf(child));\n\nparent.destroy();\n\nworld.has(child); // False, the child and grandchild are destroyed too\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships in Koota\nDESCRIPTION: Shows various ways to query relationships in Koota, including specific targets, wildcard targets, and inverted wildcard searches.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst gold = world.spawn();\nconst silver = world.spawn();\nconst inventory = world.spawn(Contains(gold), Contains(silver));\n\nconst targets = inventory.targetsFor(Contains); // Returns [gold, silver]\n\nconst chest = world.spawn(Contains(gold));\nconst dwarf = world.spawn(Desires(gold));\n\nconst constainsSilver = world.query(Contains(silver)); // Returns [inventory]\nconst containsAnything = world.query(Contains('*')); // Returns [inventory, chest]\nconst relatesToGold = world.query(Wildcard(gold)); // Returns [inventory, chest, dwarf]\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships in Koota\nDESCRIPTION: Demonstrates advanced relationship queries including getting specific targets, using wildcards for any target, and inverse wildcard searches to find entities with relationships targeting a specific entity.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst gold = world.spawn();\nconst silver = world.spawn();\nconst inventory = world.spawn(Contains(gold), Contains(silver));\n\nconst targets = inventory.targetsFor(Contains); // Returns [gold, silver]\n\nconst chest = world.spawn(Contains(gold));\nconst dwarf = world.spawn(Desires(gold));\n\nconst constainsSilver = world.query(Contains(silver)); // Returns [inventory]\nconst containsAnything = world.query(Contains('*')); // Returns [inventory, chest]\nconst relatesToGold = world.query(Wildcard(gold)); // Returns [inventory, chest, dwarf]\n```\n\n----------------------------------------\n\nTITLE: Using Query Modifiers in Koota\nDESCRIPTION: Demonstrates the use of various query modifiers in Koota, including Not, Or, Added, Removed, and Changed modifiers.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Not, Or, createAdded, createRemoved, createChanged } from 'koota';\n\nconst staticEntities = world.query(Position, Not(Velocity));\n\nconst movingOrVisible = world.query(Or(Velocity, Renderable));\n\nconst Added = createAdded();\nconst newPositions = world.query(Added(Position));\n\nconst Removed = createRemoved();\nconst stoppedEntities = world.query(Removed(Velocity));\n\nconst Changed = createChanged();\nconst movedEntities = world.query(Changed(Position));\n```\n\n----------------------------------------\n\nTITLE: Querying All Entities in Koota\nDESCRIPTION: Shows how to query all queryable entities in Koota.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns all queryable entities\nconst allQueryableEntities = world.query()\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships with Data in Koota\nDESCRIPTION: Shows how relationships in Koota can contain data like any trait, enabling more complex entity connections with associated information.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst Contains = relation({ store: { amount: 0 } });\n\nconst inventory = world.spawn();\nconst gold = world.spawn();\ninventory.add(Contains(gold));\ninventory.set(Contains(gold), { amount: 10 });\n```\n\n----------------------------------------\n\nTITLE: Using Add, Remove, and Change Events in Koota\nDESCRIPTION: Demonstrates how to subscribe to add, remove, and change events for specific traits in Koota.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to Position changes\nconst unsub = world.onChange(Position, (entity) => {\n    console.log(`Entity ${entity} changed position`);\n});\n\n// Subscribe to Position additions\nconst unsub = world.onAdd(Position, (entity) => {\n    console.log(`Entity ${entity} added position`);\n});\n\n// Subscribe to Position removals\nconst unsub = world.onRemove(Position, (entity) => {\n    console.log(`Entity ${entity} removed position`);\n});\n\n// Trigger events\nconst entity = world.spawn(Position);\nentity.set(Position, { x: 10, y: 20 });\nentity.remove(Position);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Entity Events in Koota\nDESCRIPTION: Demonstrates how to subscribe to add, remove, and change events for specific traits, allowing for reactive behavior when entities are modified.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n// Subscribe to Position changes\nconst unsub = world.onChange(Position, (entity) => {\n    console.log(`Entity ${entity} changed position`);\n});\n\n// Subscribe to Position additions\nconst unsub = world.onAdd(Position, (entity) => {\n    console.log(`Entity ${entity} added position`);\n});\n\n// Subscribe to Position removals\nconst unsub = world.onRemove(Position, (entity) => {\n    console.log(`Entity ${entity} removed position`);\n});\n\n// Trigger events\nconst entity = world.spawn(Position);\nentity.set(Position, { x: 10, y: 20 });\nentity.remove(Position);\n```\n\n----------------------------------------\n\nTITLE: Using Added Query Modifier in Koota\nDESCRIPTION: Shows how to use the Added modifier to track entities that have newly added specific traits since the last query, useful for responding to state changes.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { createAdded } from 'koota';\n\nconst Added = createAdded();\n\n// This query will return entities that have just added the Position trait\nconst newPositions = world.query(Added(Position));\n\n// After running the query, the Added modifier is reset\n```\n\n----------------------------------------\n\nTITLE: Using Removed Query Modifier in Koota\nDESCRIPTION: Demonstrates the Removed modifier which tracks entities that have lost specific traits since the last query, including destroyed entities.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { createRemoved } from 'koota';\n\nconst Removed = createRemoved();\n\n// This query will return entities that have just removed the Velocity trait\nconst stoppedEntities = world.query(Removed(Velocity));\n\n// After running the query, the Removed modifier is reset\n```\n\n----------------------------------------\n\nTITLE: Using Changed Query Modifier in Koota\nDESCRIPTION: Shows how to use the Changed modifier to track entities whose trait values have changed since the last query, enabling reactions to value modifications.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { createChanged } from 'koota';\n\nconst Changed = createChanged();\n\n// This query will return entities whose Position has changed\nconst movedEntities = world.query(Changed(Position));\n\n// After running the query, the Changed modifier is reset\n```\n\n----------------------------------------\n\nTITLE: Creating Exclusive Relationships in Koota\nDESCRIPTION: Shows how to define exclusive relationships where each entity can only have one target, automatically removing previous targets when a new one is added.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst Targeting = relation({ exclusive: true });\n\nconst hero = world.spawn();\nconst rat = world.spawn();\nconst goblin = world.spawn();\n\nhero.add(Targeting(rat));\nhero.add(Targeting(goblin));\n\nhero.has(Targeting(rat)); // False\nhero.has(Targeting(goblin)); // True\n```\n\n----------------------------------------\n\nTITLE: Implementing World Traits in Koota ECS\nDESCRIPTION: Demonstrates how to create and use world traits for global data like time. World traits are added to the world but do not appear in queries.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst Time = trait({ delta: 0, current: 0 });\nworld.add(Time);\n\nconst time = world.get(Time);\nworld.set(Time, { current: performance.now() });\n```\n\n----------------------------------------\n\nTITLE: Selecting Traits for Query Updates in Koota ECS\nDESCRIPTION: Shows how to use the select method to choose specific traits for updates in queries, allowing for more targeted data modifications.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nworld.query(Position, Velocity, Mass)\n  .select(Mass)\n  .updateEach([mass] => {\n    mass.value += 1\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Detection in Koota\nDESCRIPTION: Shows how to configure change detection behavior when using updateEach, allowing for control over when change events are triggered during batch updates.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n// Setting changeDetection to 'never' will silence it, triggering no change events\nworld.query(Position, Velocity).updateEach(([position, velocity]) => {\n}, { changeDetection: 'never' });\n\n// Setting changeDetection to 'always' will ignore selective tracking and always emit change events for all traits that are mutated\nworld.query(Position, Velocity).updateEach(([position, velocity]) => {\n}, { changeDetection: 'always' });\n```\n\n----------------------------------------\n\nTITLE: Creating and Using World Traits in Koota ECS\nDESCRIPTION: Demonstrates how to create and use world traits for global data like time. World traits are added to the world but do not appear in queries.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst Time = trait({ delta: 0, current: 0 });\nworld.add(Time);\n\nconst time = world.get(Time);\nworld.set(Time, { current: performance.now() });\n```\n\n----------------------------------------\n\nTITLE: Selecting Traits for Query Updates in Koota ECS\nDESCRIPTION: Shows how to use the 'select' method to choose specific traits for updates in queries, allowing for more targeted modifications of entity data.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nworld.query(Position, Velocity, Mass)\n  .select(Mass)\n  .updateEach([mass] => {\n    mass.value += 1\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Or Query Modifier in Koota\nDESCRIPTION: Demonstrates the Or modifier which enables logical OR instead of the default AND when combining query parameters, broadening the entity selection criteria.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { Or } from 'koota';\n\nconst movingOrVisible = world.query(Or(Velocity, Renderable));\n```\n\n----------------------------------------\n\nTITLE: World API Usage in Koota ECS\nDESCRIPTION: Provides examples of various World API methods including entity spawning, querying, trait manipulation, and event subscription.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst entity = world.spawn()\n\nconst result = world.has(entity)\n\nconst entities = world.query(Position)\n\nconst entity = world.queryFirst(Position)\n\nworld.add(Time)\n\nworld.remove(Time)\n\nconst result = world.has(Time)\n\nconst time = world.get(Time)\n\nworld.set(Time, { current: performance.now() })\n\nworld.set(Time, (prev) => ({\n  current: performance.now(),\n  delta: performance.now() - prev.current\n}))\n\nconst unsub = world.onAdd([Position], (entity) => {})\nconst unsub = world.onRemove([Position], (entity) => {})\nconst unsub = world.onChange([Position], (entity) => {})\n\nworld.entities\n\nconst id = world.id()\n\nworld.reset()\n\nworld.destroy()\n```\n\n----------------------------------------\n\nTITLE: Entity API Usage in Koota ECS\nDESCRIPTION: Demonstrates various Entity API methods including trait manipulation, relationship handling, and entity destruction.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nentity.add(Position) \n\nentity.remove(Position)\n\nconst result = enttiy.has(Position) \n\nconst position = entity.get(Position)\n\nentity.set(Position, { x: 10, y: 10 })\n\nentity.set(Position, (prev) => ({\n  x: prev + 1,\n  y: prev + 1\n}))\n\nconst targets = entity.targetsFor(Contains)\n\nconst target = entity.targetFor(Contains)\n\nconst id = entity.id()\n\nentity.destroy()\n```\n\n----------------------------------------\n\nTITLE: Trait Creation and Usage in Koota ECS\nDESCRIPTION: Explains different methods of creating traits, including schema-based and callback-based approaches, and their performance implications.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst Position = trait({ x: 0, y: 0, z: 0 })\n\nconst Inventory = trait({ \n  items: () => [], \n  max: 10, \n})\n\nconst Velocity = trait(() => new THREE.Vector3())\n\nconst velocity = entity.get(Velocity)\n```\n\n----------------------------------------\n\nTITLE: World API Usage in Koota ECS\nDESCRIPTION: Provides examples of various World API methods including entity spawning, querying, trait management, and event subscriptions.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst entity = world.spawn()\nconst result = world.has(entity)\nconst entities = world.query(Position)\nconst entity = world.queryFirst(Position)\nworld.add(Time)\nworld.remove(Time)\nconst result = world.has(Time)\nconst time = world.get(Time)\nworld.set(Time, { current: performance.now() })\nworld.set(Time, (prev) => ({\n  current: performance.now(),\n  delta: performance.now() - prev.current\n}))\nconst unsub = world.onAdd([Position], (entity) => {})\nconst unsub = world.onRemove([Position], (entity) => {})\nconst unsub = world.onChange([Position], (entity) => {})\nworld.entities\nconst id = world.id()\nworld.reset()\nworld.destroy()\n```\n\n----------------------------------------\n\nTITLE: Typing Traits in Koota ECS with TypeScript\nDESCRIPTION: Demonstrates how to add type definitions to traits using TypeScript, including workarounds for using interfaces.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype AttackerSchema = {\n  continueCombo: boolean | null,\n  currentStageIndex: number | null,\n  stages: Array<AttackStage> | null,\n  startedAt: number | null,\n}\n\nconst Attacker = trait<AttackerSchema>({\n  continueCombo: null,\n  currentStageIndex: null,\n  stages: null,\n  startedAt: null,\n})\n\ninterface AttackerSchema {\n  continueCombo: boolean | null,\n  currentStageIndex: number | null,\n  stages: Array<AttackStage> | null,\n  startedAt: number | null,\n}\n\nconst Attacker = trait<Pick<AttackerSchema, keyof AttackerSchema>>({\n  continueCombo: null,\n  currentStageIndex: null,\n  stages: null,\n  startedAt: null,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Not Query Modifier in Koota\nDESCRIPTION: Shows how to use the Not modifier to exclude entities with specific traits from query results, allowing for more refined entity selection.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { Not } from 'koota';\n\nconst staticEntities = world.query(Position, Not(Velocity));\n```\n\n----------------------------------------\n\nTITLE: Creating Traits in Koota ECS\nDESCRIPTION: Shows different ways to create traits, including schema-based and callback-based approaches, and explains the performance implications of each method.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst Position = trait({ x: 0, y: 0, z: 0 })\n\nconst Inventory = trait({ \n  items: () => [], \n  max: 10, \n})\n\nconst Velocity = trait(() => new THREE.Vector3())\n\nconst velocity = entity.get(Velocity)\n```\n\n----------------------------------------\n\nTITLE: Typing Traits in Koota ECS with TypeScript\nDESCRIPTION: Demonstrates how to add type information to traits using TypeScript, including workarounds for using interfaces.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype AttackerSchema = {\n  continueCombo: boolean | null,\n  currentStageIndex: number | null,\n  stages: Array<AttackStage> | null,\n  startedAt: number | null,\n}\n\nconst Attacker = trait<AttackerSchema>({\n  continueCombo: null,\n  currentStageIndex: null,\n  stages: null,\n  startedAt: null,\n})\n\ninterface AttackerSchema {\n  continueCombo: boolean | null,\n  currentStageIndex: number | null,\n  stages: Array<AttackStage> | null,\n  startedAt: number | null,\n}\n\nconst Attacker = trait<Pick<AttackerSchema, keyof AttackerSchema>>({\n  continueCombo: null,\n  currentStageIndex: null,\n  stages: null,\n  startedAt: null,\n})\n```\n\n----------------------------------------\n\nTITLE: Reactive Trait Observation with useTrait\nDESCRIPTION: Shows how to observe entity traits reactively using the useTrait hook, handling cases where traits may be added, removed, or changed.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the position trait from an entity and reactively updates when it changes\nconst position = useTrait(entity, Position);\n\n// If position is removed from entity then it will be undefined\nif (!position) return null\n\n// Render the position\nreturn (\n  <div>\n    Position: {position.x}, {position.y}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Entities with useTrait\nDESCRIPTION: Demonstrates handling undefined entities with useTrait when combined with queries, showing how to disambiguate between missing entities and missing traits.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// The entity may be undefined if there is no valid result\nconst entity = useQueryFirst(Position, Velocity)\n// useTrait handles this by returned undefined if the target passed in does not exist\nconst position = useTrait(entity, Position);\n\n// However, undefined here can mean no entity or no component on entity\n// To make the outcome no longer ambiguous you have to test the entity\nif (!entity) return <div>No entity found!</div>\n\n// Now this is narrowed to Position no longer being on the component\nif (!position) return null\n\nreturn (\n  <div>\n    Position: {position.x}, {position.y}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Trait Effect Subscription with useTraitEffect\nDESCRIPTION: Shows how to subscribe to trait changes using useTraitEffect for both entity-level and world-level traits without causing rerenders.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to position changes on an entity and update a ref without causing a rerender\nuseTraitEffect(entity, Position, (position) => {\n  if (!position) return;\n  meshRef.current.position.copy(position);\n});\n\n// Subscribe to world-level traits\nuseTraitEffect(world, GameState, (state) => {\n  if (!state) return;\n  console.log('Game state changed:', state);\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Trait Stores Directly in Koota ECS\nDESCRIPTION: Demonstrates how to use the 'useStore' hook for direct access to trait stores, bypassing safety checks for performance-critical operations. Stores are structured as arrays for efficiency.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nworld.query(Position, Velocity).useStore(([position, velocity], entities) => {\n    for (let i = 0; i < entities.length; i++) {\n        const eid = entities[i].id();\n        position.x[eid] += velocity.x[eid] * delta;\n        position.y[eid] += velocity.y[eid] * delta;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing World Actions with useActions\nDESCRIPTION: Demonstrates creating and using world-bound actions with useActions hook for consistent world state modifications.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Create actions\nconst actions = createActions((world) => ({\n    spawnPlayer: () => world.spawn(IsPlayer),\n    destroyAllPlayers: () => {\n        world.query(IsPlayer).forEach((player) => {\n            player.destroy()\n        })\n    }\n}))\n\n// Get actions bound to the world in context\nconst { spawnPlayer, destroyAllPlayers } = useActions();\n\n// Call actions to modify the world in an effect or handlers\nuseEffect(() => {\n    spawnPlayer()\n    return () => destroyAllPlayers()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Using useTrait Hook for Entity Trait Observation\nDESCRIPTION: Demonstrates how to use useTrait hook to observe and react to trait changes on an entity. Shows basic trait access and conditional rendering based on trait presence.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the position trait from an entity and reactively updates when it changes\nconst position = useTrait(entity, Position);\n\n// If position is removed from entity then it will be undefined\nif (!position) return null\n\n// Render the position\nreturn (\n  <div>\n    Position: {position.x}, {position.y}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced useTrait Usage with Queries\nDESCRIPTION: Shows advanced usage of useTrait combined with queries, handling undefined entities and disambiguating between different undefined states.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// The entity may be undefined if there is no valid result\nconst entity = useQueryFirst(Position, Velocity)\n// useTrait handles this by returned undefined if the target passed in does not exist\nconst position = useTrait(entity, Position);\n\n// However, undefined here can mean no entity or no component on entity\n// To make the outcome no longer ambiguous you have to test the entity\nif (!entity) return <div>No entity found!</div>\n\n// Now this is narrowed to Position no longer being on the component\nif (!position) return null\n\nreturn (\n  <div>\n    Position: {position.x}, {position.y}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Managing World Actions with useActions Hook\nDESCRIPTION: Shows how to create and use actions with the useActions hook. Demonstrates action creation, binding to world context, and usage in effects and handlers.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Create actions\nconst actions = createActions((world) => ({\n    spawnPlayer: () => world.spawn(IsPlayer),\n    destroyAllPlayers: () => {\n        world.query(IsPlayer).forEach((player) => {\n            player.destroy()\n        })\n    }\n}))\n\n// Get actions bound to the world in context\nconst { spawnPlayer, destroyAllPlayers } = useActions();\n\n// Call actions to modify the world in an effect or handlers\nuseEffect(() => {\n    spawnPlayer()\n    return () => destroyAllPlayers()\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Installing Koota via NPM\nDESCRIPTION: Command to install Koota using npm package manager.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i koota\n```\n\n----------------------------------------\n\nTITLE: Modifying Trait Stores Directly in Koota ECS\nDESCRIPTION: Demonstrates how to use the useStore hook for direct manipulation of trait stores, bypassing safety checks for performance-critical operations.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nworld.query(Position, Velocity).useStore(([position, velocity], entities) => {\n    for (let i = 0; i < entities.length; i++) {\n        const eid = entities[i].id();\n        position.x[eid] += velocity.x[eid] * delta;\n        position.y[eid] += velocity.y[eid] * delta;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Detection in Koota's updateEach\nDESCRIPTION: Explains how to configure change detection behavior in Koota's updateEach method.\nSOURCE: https://github.com/pmndrs/koota/blob/main/README.md#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting changeDetection to 'never' will silence it, triggering no change events\nworld.query(Position, Velocity).updateEach(([position, velocity]) => {\n}, { changeDetection: 'never' });\n\n// Setting changeDetection to 'always' will ignore selective tracking and always emit change events for all traits that are mutated\nworld.query(Position, Velocity).updateEach(([position, velocity]) => {\n}, { changeDetection: 'always' });\n```\n\n----------------------------------------\n\nTITLE: Describing TSConfig Structure in Markdown\nDESCRIPTION: This snippet outlines the purpose of the tsconfig files in the Koota project. It explains that these are base shared configurations from which all other tsconfig.json files in the project inherit, ensuring consistency across the codebase.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/tsconfig/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `tsconfig`\n\nThese are base shared `tsconfig.json`s from which all other `tsconfig.json`'s inherit from.\n```\n\n----------------------------------------\n\nTITLE: Installing Koota via npm\nDESCRIPTION: Command to install the Koota library via npm package manager.\nSOURCE: https://github.com/pmndrs/koota/blob/main/packages/publish/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i koota\n```"
  }
]