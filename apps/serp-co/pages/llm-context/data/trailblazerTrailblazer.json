[
  {
    "owner": "trailblazer",
    "repo": "trailblazer",
    "content": "TITLE: Defining a Trailblazer Operation in Ruby\nDESCRIPTION: This code snippet demonstrates how to define a Trailblazer operation in Ruby. It shows the use of the `step` DSL to define the flow of the operation, including steps for creating a model, validating data, handling errors, and sending notifications.  It leverages the Trailblazer::Operation class.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/README.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/concepts/song/operation/create.rb\nmodule Song::Operation\n  class Create < Trailblazer::Operation\n    step :create_model\n    step :validate\n    left :handle_errors\n    step :notify\n\n    def create_model(ctx, **)\n      # do whatever you feel like.\n      ctx[:model] = Song.new\n    end\n\n    def validate(ctx, params:, **)\n      # ..\n    end\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Calling a Trailblazer Operation in Ruby\nDESCRIPTION: This snippet demonstrates how to call a Trailblazer operation and access the results. The `Operation.call` method is used to execute the operation with a given set of parameters. The result object provides access to computed values, statuses, and models from within the operation.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/README.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nresult = Song::Operation::Create.(params: {title: \"Hear Us Out\", band: \"Rancid\"})\n\nresult.success? #=> true\nresult[:model]  #=> #<Song title=\"Hear Us Out\" ...>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nested Operation Selection - Ruby\nDESCRIPTION: This snippet demonstrates the use of dynamic nesting in Trailblazer operations, where the nested operation is determined at runtime based on input parameters. A lambda function is used to choose the nested operation (`Moderated` or `Comment`) based on the `params[:type]` value. This allows for branching logic within the operation flow.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CHANGES.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nstep Nested( ->(options, params:) { params[:type] == \"moderated\" ? Moderated : Comment } )\n```\n\n----------------------------------------\n\nTITLE: Building Contract with Builder option and keyword arguments - Ruby\nDESCRIPTION: This snippet shows how to define a custom builder function for a contract within a Trailblazer operation.  It illustrates how to access keyword arguments such as `constant` within the builder using double splatting (`**`) to capture remaining keyword arguments. This allows more flexible contract creation.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CHANGES.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nContract::Build( builder: ->(options, constant:, **) )\n```\n\n----------------------------------------\n\nTITLE: Using Model macro with custom method - Ruby\nDESCRIPTION: This snippet demonstrates how to use the `Model` macro in Trailblazer with a custom method, enabling the use of methods other than the default finders.  This allows for integration with ORMs like Sequel, where data retrieval might use custom syntax, i.e., `Comment[params[:id]]`.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CHANGES.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nstep Model( Comment, :[] )\n```\n\n----------------------------------------\n\nTITLE: Operation Process with Validation - Ruby\nDESCRIPTION: This snippet demonstrates the `process` method within a Trailblazer Operation. It shows how to use the `validate` method to determine the flow of execution, performing actions based on whether the input parameters are valid or invalid. The return value of `#validate` is `true` or `false`.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CHANGES.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef process(params)\n  if validate(params)\n    .. do valid\n  else\n    .. handle invalid\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Step with Method Call - Ruby\nDESCRIPTION: This snippet demonstrates how to define a step within a Trailblazer operation using a method call. It illustrates writing to `options` instead of `self` within the `process` method, as `self` is no longer directly mutable within operation steps. The `options` hash is the recommended way to manage state.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CHANGES.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nstep :process\ndef process(*)\n  self[\"x\"] = true\nend\n```\n\n----------------------------------------\n\nTITLE: Testing a Trailblazer Operation in Ruby\nDESCRIPTION: This snippet illustrates how to write a unit test for a Trailblazer operation using the `trailblazer-test` gem. It uses the `assert_pass` method to verify that the operation passes with valid input and that the expected values are set. It allows for testing of operation results and side effects.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/README.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nit \"passes with valid input\" do\n  assert_pass Song::Operation::Create, valid_input,\n    title: \"Hear us out\",\n    persisted?: true\nend\n```\n\n----------------------------------------\n\nTITLE: Tracing a Trailblazer Operation in Ruby\nDESCRIPTION: This code snippet shows how to use the `#wtf?` method to trace the internal flow of a Trailblazer operation. This is useful for debugging and identifying which step failed during the operation's execution. It provides insights into the operation's control flow and variable mapping.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/README.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nresult = Song::Operation::Create.wtf?(params: {title: \"\", band: \"Rancid\"})\n```\n\n----------------------------------------\n\nTITLE: Adding Files and Committing Changes\nDESCRIPTION: This snippet demonstrates how to add specific files or file patterns to the staging area and then commit the changes with a descriptive message. Make sure the message explains what changed and why.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add your_filename.rb (File names to add content from, or fileglobs e.g. *.rb)\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Amending Commit and Force Pushing\nDESCRIPTION: This snippet shows how to amend your previous commit and then force push the changes to your remote branch. This is often used to update the commit message or include additional changes after the initial commit.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\ngit push origin my-feature-branch -f\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Branch\nDESCRIPTION: This snippet shows how to push your local feature branch to your remote repository on GitHub. This makes your changes available for creating a pull request.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Rebasing with Upstream Master\nDESCRIPTION: This snippet demonstrates how to rebase your feature branch with the latest changes from the upstream master branch. This helps to keep your branch up-to-date and avoid merge conflicts.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/master\ngit push origin my-feature-branch -f\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: This snippet shows how to create a new feature branch from the master branch. It first updates the local master branch with the latest changes from the upstream repository and then creates a new branch for your feature or bug fix.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\ngit checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests\nDESCRIPTION: This snippet explains how to install the necessary dependencies for the project using Bundler and then run the test suite to ensure that the project is in a working state before making changes.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nbundle exec rake\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Upstream Repository\nDESCRIPTION: This snippet demonstrates how to clone the Trailblazer repository from GitHub, navigate to the project directory, and add the upstream repository to track changes from the main project.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_HANDLE/trailblazer.git\ncd trailblazer\ngit remote add upstream https://github.com/trailblazer/trailblazer.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: This snippet illustrates how to configure Git with your name and email address. This information is included in your commit logs to identify you as the author of the changes.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"contributor@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Updating Changelog with Pull Request Number\nDESCRIPTION: This snippet provides an example of how to update the CHANGELOG.md file with the pull request number and a brief description of the changes.\nSOURCE: https://github.com/trailblazer/trailblazer/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n* [#123](https://github.com/trailblazer/trailblazer/pull/123): Your brief description - [@your_gh_handle](https://github.com/your_gh_handle).\n```"
  }
]