[
  {
    "owner": "googlechromelabs",
    "repo": "comlink",
    "content": "TITLE: Comlink: Simple Function Example (main.js)\nDESCRIPTION: This code snippet demonstrates how to use Comlink to run a simple function in a WebWorker. It imports Comlink, initializes a worker, wraps it with Comlink.wrap to create a proxy object, and then calls methods on the proxy object, which are executed in the worker thread.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Comlink from \"https://unpkg.com/comlink/dist/esm/comlink.mjs\";\nasync function init() {\n  const worker = new Worker(\"worker.js\");\n  // WebWorkers use `postMessage` and therefore work with Comlink.\n  const obj = Comlink.wrap(worker);\n  alert(`Counter: ${await obj.counter}`);\n  await obj.inc();\n  alert(`Counter: ${await obj.counter}`);\n}\ninit();\n```\n\n----------------------------------------\n\nTITLE: Comlink: Simple Function Example (worker.js)\nDESCRIPTION: This code snippet demonstrates exposing an object from within a WebWorker using Comlink. It imports the Comlink library and defines an object with a counter property and an increment method.  The Comlink.expose() function makes this object accessible from the main thread via a proxy.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportScripts(\"https://unpkg.com/comlink/dist/umd/comlink.js\");\n// importScripts(\"../../../dist/umd/comlink.js\");\n\nconst obj = {\n  counter: 0,\n  inc() {\n    this.counter++;\n  },\n};\n\nComlink.expose(obj);\n```\n\n----------------------------------------\n\nTITLE: Comlink: Transferable Data Example\nDESCRIPTION: This code snippet demonstrates how to transfer data between threads using Comlink and Transferable objects. It creates a Uint8Array and then uses Comlink.transfer to send the array's buffer to the worker thread, avoiding a copy.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = new Uint8Array([1, 2, 3, 4, 5]);\nawait myProxy.someFunction(Comlink.transfer(data, [data.buffer]));\n```\n\n----------------------------------------\n\nTITLE: Comlink: Callback Example (main.js)\nDESCRIPTION: This code snippet demonstrates how to pass a callback function to a WebWorker using Comlink.  It imports Comlink, defines a callback function, wraps a worker with Comlink.wrap, and then calls a remote function in the worker, passing the callback as an argument using Comlink.proxy().  The callback is executed in the main thread when the remote function calls it.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Comlink from \"https://unpkg.com/comlink/dist/esm/comlink.mjs\";\n// import * as Comlink from \"../../../dist/esm/comlink.mjs\";\nfunction callback(value) {\n  alert(`Result: ${value}`);\n}\nasync function init() {\n  const remoteFunction = Comlink.wrap(new Worker(\"worker.js\"));\n  await remoteFunction(Comlink.proxy(callback));\n}\ninit();\n```\n\n----------------------------------------\n\nTITLE: Comlink: Callback Example (worker.js)\nDESCRIPTION: This code snippet shows how to receive and execute a callback function within a WebWorker using Comlink. It imports Comlink, defines an async function `remoteFunction` that receives a callback function as an argument, and then executes that callback with a string argument. Comlink.expose is then used to expose `remoteFunction` to the main thread.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportScripts(\"https://unpkg.com/comlink/dist/umd/comlink.js\");\n// importScripts(\"../../../dist/umd/comlink.js\");\n\nasync function remoteFunction(cb) {\n  await cb(\"A string from a worker\");\n}\n\nComlink.expose(remoteFunction);\n```\n\n----------------------------------------\n\nTITLE: Comlink: Proxy Example\nDESCRIPTION: This example shows how to use Comlink.proxy to pass a function (like a callback) to another thread by reference, rather than by copying. This allows both threads to work on the same value.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmyProxy.onready = Comlink.proxy((data) => {\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Comlink: SharedWorker Example (main.js)\nDESCRIPTION: This snippet demonstrates how to use Comlink with a SharedWorker. It initializes a SharedWorker, wraps its port property with Comlink.wrap to create a proxy object, and then calls methods on the proxy object. SharedWorkers require using the `port` property for communication.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Comlink from \"https://unpkg.com/comlink/dist/esm/comlink.mjs\";\nasync function init() {\n  const worker = new SharedWorker(\"worker.js\");\n  /**\n   * SharedWorkers communicate via the `postMessage` function in their `port` property.\n   * Therefore you must use the SharedWorker's `port` property when calling `Comlink.wrap`.\n   */\n  const obj = Comlink.wrap(worker.port);\n  alert(`Counter: ${await obj.counter}`);\n  await obj.inc();\n  alert(`Counter: ${await obj.counter}`);\n}\ninit();\n```\n\n----------------------------------------\n\nTITLE: Comlink: SharedWorker Example (worker.js)\nDESCRIPTION: This code demonstrates how to expose an object from within a SharedWorker using Comlink.  It imports Comlink, defines an object with a counter and an increment method, and then exposes the object through Comlink.expose within the onconnect event handler.  SharedWorkers use the `port` property of the connection event to communicate.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimportScripts(\"https://unpkg.com/comlink/dist/umd/comlink.js\");\n// importScripts(\"../../../dist/umd/comlink.js\");\n\nconst obj = {\n  counter: 0,\n  inc() {\n    this.counter++;\n  },\n};\n\n/**\n * When a connection is made into this shared worker, expose `obj`\n * via the connection `port`.\n */\nonconnect = function (event) {\n  const port = event.ports[0];\n\n  Comlink.expose(obj, port);\n};\n\n// Single line alternative:\n// onconnect = (e) => Comlink.expose(obj, e.ports[0]);\n```\n\n----------------------------------------\n\nTITLE: Comlink: Release Proxy Example\nDESCRIPTION: This example demonstrates how to release a proxy created by Comlink to allow for garbage collection. This is done by calling the [Comlink.releaseProxy]() method on the proxy object.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst proxy = Comlink.wrap(port);\n// ... use the proxy ...\nproxy[Comlink.releaseProxy]();\n```\n\n----------------------------------------\n\nTITLE: Comlink: Event Transfer Handler Setup\nDESCRIPTION: This code snippet demonstrates how to create a custom transfer handler for Event objects in Comlink.  Since Event objects are not directly transferable, this handler serializes relevant properties (target.id, target.classList) and deserializes them on the other side.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nComlink.transferHandlers.set(\"EVENT\", {\n  canHandle: (obj) => obj instanceof Event,\n  serialize: (ev) => {\n    return [\n      {\n        target: {\n          id: ev.target.id,\n          classList: [...ev.target.classList],\n        },\n      },\n      [],\n    ];\n  },\n  deserialize: (obj) => obj,\n});\n```\n\n----------------------------------------\n\nTITLE: Comlink: Create Endpoint Example\nDESCRIPTION: This snippet demonstrates creating a new MessagePort connected to the same object as an existing Comlink proxy using the [Comlink.createEndpoint]() method.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst port = myProxy[Comlink.createEndpoint]();\nconst newProxy = Comlink.wrap(port);\n```\n\n----------------------------------------\n\nTITLE: Installing Comlink using npm\nDESCRIPTION: This command installs Comlink as a dependency to your project using npm.\nSOURCE: https://github.com/googlechromelabs/comlink/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save comlink\n```"
  }
]