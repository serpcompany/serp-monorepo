[
  {
    "owner": "thinkinaixyz",
    "repo": "go-mcp",
    "content": "TITLE: Integrating MCP with Gin Framework in Go\nDESCRIPTION: This Go snippet shows how to integrate Go-MCP with the Gin web framework. It creates an SSE transport and handler, registers the handler with Gin routes for SSE and message endpoints, and starts both the MCP server and the Gin server.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README_CN.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/ThinkInAIXYZ/go-mcp/protocol\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/server\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/transport\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tmessageEndpointURL := \"/message\"\n\n\tsseTransport, mcpHandler, err := transport.NewSSEServerTransportAndHandler(messageEndpointURL)\n\tif err != nil {\n\t\tlog.Panicf(\"new sse transport and hander with error: %v\", err)\n\t}\n\n\t// new mcp server\n\tmcpServer, _ := server.NewServer(sseTransport)\n\n\t// register tool with mcpServer\n\t// mcpServer.RegisterTool(tool, toolHandler)\n\n\t// start mcp Server\n\tgo func() {\n\t\tmcpServer.Run()\n\t}()\n\n\tdefer mcpServer.Shutdown(context.Background())\n\n\tr := gin.Default()\n\tr.GET(\"/sse\", func(ctx *gin.Context) {\n\t\tmcpHandler.HandleSSE().ServeHTTP(ctx.Writer, ctx.Request)\n\t})\n\tr.POST(messageEndpointURL, func(ctx *gin.Context) {\n\t\tmcpHandler.HandleMessage().ServeHTTP(ctx.Writer, ctx.Request)\n\t})\n\n\tif err = r.Run(\":8080\"); err != nil {\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Go-MCP with Gin\nDESCRIPTION: This Go code demonstrates integrating the Go-MCP server with the Gin web framework. It sets up an SSE transport and handler, registers it with a Gin router, and starts both the MCP server and Gin server on port 8080. The MCP server runs in a separate goroutine, and a `defer` statement ensures that the server is shut down gracefully. It depends on `go-mcp/protocol`, `go-mcp/server`, `go-mcp/transport`, `github.com/gin-gonic/gin`, standard `context` and `log` packages.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/ThinkInAIXYZ/go-mcp/protocol\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/server\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/transport\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tmessageEndpointURL := \"/message\"\n\n\tsseTransport, mcpHandler, err := transport.NewSSEServerTransportAndHandler(messageEndpointURL)\n\tif err != nil {\n\t\tlog.Panicf(\"new sse transport and hander with error: %v\", err)\n\t}\n\n\t// new mcp server\n\tmcpServer, _ := server.NewServer(sseTransport)\n\n\t// register tool with mcpServer\n\t// mcpServer.RegisterTool(tool, toolHandler)\n\n\t// start mcp Server\n\tgo func() {\n\t\tmcpServer.Run()\n\t}()\n\n\tdefer mcpServer.Shutdown(context.Background())\n\n\tr := gin.Default()\n\tr.GET(\"/sse\", func(ctx *gin.Context) {\n\t\tmcpHandler.HandleSSE().ServeHTTP(ctx.Writer, ctx.Request)\n\t})\n\tr.POST(messageEndpointURL, func(ctx *gin.Context) {\n\t\tmcpHandler.HandleMessage().ServeHTTP(ctx.Writer, ctx.Request)\n\t})\n\n\tif err = r.Run(\":8080\"); err != nil {\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MCP Server with SSE Transport in Go\nDESCRIPTION: This Go snippet creates an MCP server using SSE transport. It registers a 'current_time' tool that takes a timezone as input and returns the current time in that timezone. The example showcases tool registration and handling of requests.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README_CN.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/ThinkInAIXYZ/go-mcp/protocol\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/server\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/transport\"\n)\n\ntype TimeRequest struct {\n\tTimezone string `json:\"timezone\" description:\"时区\" required:\"true\"` // 使用 field tag 描述 inputschema\n}\n\nfunc main() {\n\t// 创建 SSE 传输服务器\n\ttransportServer, err := transport.NewSSEServerTransport(\"127.0.0.1:8080\")\n\tif err != nil {\n\t\tlog.Fatalf(\"创建传输服务器失败: %v\", err)\n\t}\n\n\t// 初始化 MCP 服务器\n\tmcpServer, err := server.NewServer(transportServer)\n\tif err != nil {\n\t\tlog.Fatalf(\"创建 MCP 服务器失败: %v\", err)\n\t}\n\n\t// 注册时间查询工具\n\ttool, err := protocol.NewTool(\"current_time\", \"获取指定时区的当前时间\", TimeRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"创建工具失败: %v\", err)\n\t\treturn\n\t}\n\tmcpServer.RegisterTool(tool, handleTimeRequest)\n\n\t// 启动服务器\n\tif err = mcpServer.Run(); err != nil {\n\t\tlog.Fatalf(\"服务器运行失败: %v\", err)\n\t}\n}\n\nfunc handleTimeRequest(req *protocol.CallToolRequest) (*protocol.CallToolResult, error) {\n\tvar timeReq TimeRequest\n\tif err := protocol.VerifyAndUnmarshal(req.RawArguments, &timeReq); err != nil {\n\t\treturn nil, err\n\t}\n\n\tloc, err := time.LoadLocation(timeReq.Timezone)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"无效的时区: %v\", err)\n\t}\n\n\treturn &protocol.CallToolResult{\n\t\tContent: []protocol.Content{\n\t\t\tprotocol.TextContent{\n\t\t\t\tType: \"text\",\n\t\t\t\tText: time.Now().In(loc).String(),\n\t\t\t},\n\t\t},\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Server Example in Go\nDESCRIPTION: This Go code demonstrates a basic MCP server that exposes a 'current_time' tool which returns the current time for a specified timezone. The server utilizes SSE transport, registers the tool with a handler function, and starts the server. It depends on `go-mcp/protocol`, `go-mcp/server`, `go-mcp/transport`, and standard `log`, `fmt`, and `time` packages.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/ThinkInAIXYZ/go-mcp/protocol\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/server\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/transport\"\n)\n\ntype TimeRequest struct {\n\tTimezone string `json:\"timezone\" description:\"timezone\" required:\"true\"` // Use field tag to describe input schema\n}\n\nfunc main() {\n\t// Create SSE transport server\n\ttransportServer, err := transport.NewSSEServerTransport(\"127.0.0.1:8080\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create transport server: %v\", err)\n\t}\n\n\t// Initialize MCP server\n\tmcpServer, err := server.NewServer(transportServer)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create MCP server: %v\", err)\n\t}\n\n\t// Register time query tool\n\ttool, err := protocol.NewTool(\"current_time\", \"Get current time for specified timezone\", TimeRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create tool: %v\", err)\n\t\treturn\n\t}\n\tmcpServer.RegisterTool(tool, handleTimeRequest)\n\n\t// Start server\n\tif err = mcpServer.Run(); err != nil {\n\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}\n\nfunc handleTimeRequest(req *protocol.CallToolRequest) (*protocol.CallToolResult, error) {\n\tvar timeReq TimeRequest\n\tif err := protocol.VerifyAndUnmarshal(req.RawArguments, &timeReq); err != nil {\n\t\treturn nil, err\n\t}\n\n\tloc, err := time.LoadLocation(timeReq.Timezone)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid timezone: %v\", err)\n\t}\n\n\treturn &protocol.CallToolResult{\n\t\tContent: []protocol.Content{\n\t\t\tprotocol.TextContent{\n\t\t\t\tType: \"text\",\n\t\t\t\tText: time.Now().In(loc).String(),\n\t\t\t},\n\t\t},\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Client Example in Go\nDESCRIPTION: This Go code demonstrates a basic MCP client that connects to an MCP server using SSE transport, lists available tools, and prints the results. It initializes an SSE client transport, creates an MCP client, retrieves the list of available tools, and logs the output.  It depends on the `go-mcp/client`, `go-mcp/transport`, and standard `log` packages.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/ThinkInAIXYZ/go-mcp/client\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/transport\"\n)\n\nfunc main() {\n\t// Create SSE transport client\n\ttransportClient, err := transport.NewSSEClientTransport(\"http://127.0.0.1:8080/sse\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create transport client: %v\", err)\n\t}\n\n\t// Initialize MCP client\n\tmcpClient, err := client.NewClient(transportClient)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create MCP client: %v\", err)\n\t}\n\tdefer mcpClient.Close()\n\n\t// Get available tools\n\ttools, err := mcpClient.ListTools(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to list tools: %v\", err)\n\t}\n\tlog.Printf(\"Available tools: %+v\", tools)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MCP Client with SSE Transport in Go\nDESCRIPTION: This Go snippet demonstrates how to create an MCP client using SSE transport. It initializes a new SSE client transport, then uses it to initialize an MCP client. Finally, it retrieves and logs a list of available tools from the MCP server.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README_CN.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/ThinkInAIXYZ/go-mcp/client\"\n\t\"github.com/ThinkInAIXYZ/go-mcp/transport\"\n)\n\nfunc main() {\n\t// 创建 SSE 传输客户端\n\ttransportClient, err := transport.NewSSEClientTransport(\"http://127.0.0.1:8080/sse\")\n\tif err != nil {\n\t\tlog.Fatalf(\"创建传输客户端失败: %v\", err)\n\t}\n\n\t// 初始化 MCP 客户端\n\tmcpClient, err := client.NewClient(transportClient)\n\tif err != nil {\n\t\tlog.Fatalf(\"创建 MCP 客户端失败: %v\", err)\n\t}\n\tdefer mcpClient.Close()\n\n\t// 获取可用工具列表\n\ttools, err := mcpClient.ListTools(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"获取工具列表失败: %v\", err)\n\t}\n\tlog.Printf(\"可用工具: %+v\", tools)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go-MCP via go get\nDESCRIPTION: This command retrieves and installs the Go-MCP package using the `go get` command. It requires Go 1.18 or higher.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README_CN.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/ThinkInAIXYZ/go-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Go-MCP with go get\nDESCRIPTION: This command is used to install the Go-MCP library using the `go get` command. It downloads the package and its dependencies, making it available for use in Go projects.  Requires Go 1.18 or higher.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo get github.com/ThinkInAIXYZ/go-mcp\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage on the go-mcp Project\nDESCRIPTION: This snippet executes Go tests with verbose output, race condition detection, and code coverage analysis, excluding the `examples` directory. The `-coverprofile` flag specifies the output file for the coverage report, and the `-covermode=atomic` flag specifies the coverage mode. This ensures code reliability and thorough testing.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -race $(go list ./... | grep -v /examples/) -coverprofile=coverage.txt -covermode=atomic\n```\n\n----------------------------------------\n\nTITLE: Running Golint on the go-mcp Project\nDESCRIPTION: This snippet runs the `golint` linter on the go-mcp project, excluding the `examples` directory. It utilizes `go list` to generate a list of packages and `grep` to filter out the `examples` directory. It ensures code quality by enforcing style guidelines.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngolint $(go list ./... | grep -v /examples/)\ngolangci-lint run $(go list ./... | grep -v /examples/)\n```\n\n----------------------------------------\n\nTITLE: Submitting Commit with Git\nDESCRIPTION: This snippet prepares and submits the changes in a git repository. It stages all modified files, commits the changes, and pushes the commit to a remote branch named `my-feature` on the `upstream` repository.  This pushes local changes to the remote repository for review.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit\ngit push upstream my-feature\n```\n\n----------------------------------------\n\nTITLE: Syncing the go-mcp Repository with Git\nDESCRIPTION: This snippet demonstrates fetching updates from the upstream repository.  The first command fetches updates only from the origin repository, while the second fetches updates from the forked (upstream) repository. This is a crucial step to ensure the local copy is synchronized with the latest changes.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch with Git\nDESCRIPTION: This snippet demonstrates creating a new feature branch based on the `origin/main` branch. It uses `git checkout -b` to create and switch to the new branch simultaneously.  This is essential for isolating new features or bug fixes during development.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/my-feature origin/main\n```\n\n----------------------------------------\n\nTITLE: Cloning the go-mcp Repository with Git\nDESCRIPTION: This snippet demonstrates cloning the go-mcp repository from GitHub, navigating to the project directory, and adding the forked repository as an upstream remote.  It is essential for setting up a local development environment for contributing to the project. It assumes the user has a GitHub account and has forked the go-mcp repository.\nSOURCE: https://github.com/thinkinaixyz/go-mcp/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/thinkinaixyz/go-mcp.git\ncd go-mcp\ngit remote add upstream 'git@github.com:<your github username>/go-mcp.git'\n```"
  }
]