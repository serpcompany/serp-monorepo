[
  {
    "owner": "invertase",
    "repo": "notifee",
    "content": "TITLE: Importing Notifee Type Definitions\nDESCRIPTION: Demonstrates how to import specific type definitions from Notifee, using AndroidColor as an example. This is particularly useful for TypeScript projects that need type safety.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/usage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AndroidColor } from '@notifee/react-native';\n```\n\n----------------------------------------\n\nTITLE: Installing Notifee with npm or Yarn\nDESCRIPTION: Commands to install the Notifee package to the root of a React Native project using either npm or Yarn package managers.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install --save @notifee/react-native\n\n# Using Yarn\nyarn add @notifee/react-native\n```\n\n----------------------------------------\n\nTITLE: Initializing React Native Component with Notifee Import\nDESCRIPTION: Sets up a basic React Native component with a button to trigger notification display. Imports the necessary modules including Notifee.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/displaying-a-notification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport notifee from '@notifee/react-native';\n\nfunction Screen() {\n  return (\n    <View>\n      <Button title=\"Display Notification\" onPress={() => {}} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Notifee Notifications in JavaScript\nDESCRIPTION: Demonstrates how to implement error handling when displaying notifications using Notifee. This pattern wraps the notification creation in a try/catch block to capture any validation errors that may occur during notification setup.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/debugging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await notifee.displayNotification({\n    title: 'Chat with Joe Bloggs',\n    body: 'A new message has been received from a user.',\n    ...\n  });\n} catch (e) {\n  console.log(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions with Notifee in React Native\nDESCRIPTION: This snippet demonstrates how to request notification permissions from users and handle the response based on whether permission was granted or declined.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AuthorizationStatus } from '@notifee/react-native';\n\nasync function requestUserPermission() {\n  const settings = await notifee.requestPermission();\n\n  if (settings.authorizationStatus >= AuthorizationStatus.AUTHORIZED) {\n    console.log('Permission settings:', settings);\n  } else {\n    console.log('User declined permissions');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Notifee Core Library in React Native\nDESCRIPTION: Shows how to import the main Notifee library into a React Native project. This import can be used in both React components and standalone contexts like Headless Tasks.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/usage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n```\n\n----------------------------------------\n\nTITLE: Creating Android Notification Channel with Notifee\nDESCRIPTION: Demonstrates how to create a notification channel with basic configuration including ID, name, lights, vibration and importance settings. This is essential for Android 8.0+ notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/channels.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidImportance } from '@notifee/react-native';\n\nawait notifee.createChannel({\n  id: 'alarm',\n  name: 'Firing alarms & timers',\n  lights: false,\n  vibration: true,\n  importance: AndroidImportance.DEFAULT,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Complete Notification Object via FCM (Server-Side)\nDESCRIPTION: Server-side code that sends a complete Notifee notification object as a JSON string in the FCM data payload. The notification includes a body, channel ID, and interactive actions for Android.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Node.JS\nawait admin.messaging().sendMulticast({\n  tokens,\n  data: {\n    notifee: JSON.stringify({\n      body: 'This message was sent via FCM!',\n      android: {\n        channelId: 'default',\n        actions: [\n          {\n            title: 'Mark as Read',\n            pressAction: {\n              id: 'read',\n            },\n          },\n        ],\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Messaging Style Notification in React Native with Notifee\nDESCRIPTION: Shows how to create a chat-style notification that displays message history with user avatars and timestamps. Supports both individual and group conversations with customizable user information.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/styles.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidStyle } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Sarah Lane',\n  body: 'Great thanks, food later?',\n  android: {\n    channelId,\n    style: {\n      type: AndroidStyle.MESSAGING,\n      person: {\n        name: 'John Doe',\n        icon: 'https://my-cdn.com/avatars/123.png',\n      },\n      messages: [\n        {\n          text: 'Hey, how are you?',\n          timestamp: Date.now() - 600000, // 10 minutes ago\n        },\n        {\n          text: 'Great thanks, food later?',\n          timestamp: Date.now(), // Now\n          person: {\n            name: 'Sarah Lane',\n            icon: 'https://my-cdn.com/avatars/567.png',\n          },\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Time-Based Trigger Notification in React Native\nDESCRIPTION: Example shows how to create a notification that triggers at a specific time using Notifee. Demonstrates setting up a timestamp trigger to fire a notification 10 minutes before a meeting.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/triggers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { View, Button } from 'react-native';\nimport notifee, { TimestampTrigger, TriggerType } from '@notifee/react-native';\n\nfunction Screen() {\n  async function onCreateTriggerNotification() {\n    const date = new Date(Date.now());\n    date.setHours(11);\n    date.setMinutes(10);\n\n    // Create a time-based trigger\n    const trigger: TimestampTrigger = {\n      type: TriggerType.TIMESTAMP,\n      timestamp: date.getTime(), // fire at 11:10am (10 minutes before meeting)\n    };\n\n    // Create a trigger notification\n    await notifee.createTriggerNotification(\n      {\n        title: 'Meeting with Jane',\n        body: 'Today at 11:20am',\n        android: {\n          channelId: 'your-channel-id',\n        },\n      },\n      trigger,\n    );\n  }\n\n  return (\n    <View>\n      <Button title=\"Create Trigger Notification\" onPress={() => onCreateTriggerNotification()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Notification in React Native Notifee\nDESCRIPTION: Defines the Notification interface with properties for building local notifications. Includes optional fields for notification content (title, body, subtitle), platform-specific options (android, ios), data storage, and remote notification handling.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.Notification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Notification {\n    id?: string;\n    title?: string;\n    subtitle?: string;\n    body?: string;\n    data?: {\n        [key: string]: string | number | object;\n    };\n    android?: NotificationAndroid;\n    ios?: NotificationIOS;\n    readonly remote?: {\n        messageId: string;\n        senderId: string;\n        contentAvailable?: number;\n        mutableContent?: number;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions with Notifee in React Native\nDESCRIPTION: This snippet demonstrates how to request notification permissions from users using Notifee's requestPermission method. It checks the authorization status and logs the result.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AuthorizationStatus } from '@notifee/react-native';\n\nasync function requestUserPermission() {\n  const settings = await notifee.requestPermission();\n\n  if (settings.authorizationStatus >= AuthorizationStatus.AUTHORIZED) {\n    console.log('Permission settings:', settings);\n  } else {\n    console.log('User declined permissions');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Press Events in iOS with Notifee\nDESCRIPTION: Demonstrates how to listen for notification press events using the onBackgroundEvent listener. When a user taps a notification, it triggers an event with the EventType.PRESS type.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  if (type === EventType.PRESS) {\n    console.log('User pressed the notification.', detail.pressAction.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Big Picture Style Notification in React Native with Notifee\nDESCRIPTION: Demonstrates how to create a notification with a large resolution image that expands to show the full picture. Uses AndroidStyle.BIGPICTURE to display an uploaded image in the notification body.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/styles.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidStyle } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Image uploaded',\n  body: 'Your image has been successfully uploaded',\n  android: {\n    channelId,\n    style: { type: AndroidStyle.BIGPICTURE, picture: 'https://my-cdn.com/user/123/upload/456.png' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking and Managing Battery Optimization in Android\nDESCRIPTION: This code checks if battery optimization is enabled for the app and guides users to disable it through a dialog. It uses Notifee's API to check optimization status and open the relevant settings screen when needed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/background-restrictions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. checks if battery optimization is enabled\nconst batteryOptimizationEnabled = await notifee.isBatteryOptimizationEnabled();\nif (batteryOptimizationEnabled) {\n  // 2. ask your users to disable the feature\n  Alert.alert(\n      'Restrictions Detected',\n      'To ensure notifications are delivered, please disable battery optimization for the app.',\n      [\n        // 3. launch intent to navigate the user to the appropriate screen\n        {\n          text: 'OK, open settings',\n          onPress: async () => await notifee.openBatteryOptimizationSettings(),\n        },\n        {\n          text: \"Cancel\",\n          onPress: () => console.log(\"Cancel Pressed\"),\n          style: \"cancel\"\n        },\n      ],\n      { cancelable: false }\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Foreground Events in React Native with Notifee\nDESCRIPTION: This code snippet shows how to unsubscribe from foreground events using the function returned by Notifee's onForegroundEvent method.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst unsubscribe = notifee.onForegroundEvent(...);\n\n// Sometime later...\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Handling App Open Events in React Native with Notifee\nDESCRIPTION: This snippet illustrates how to use Notifee's getInitialNotification method to handle app open events. It demonstrates setting up a bootstrap function in the root component to check if a notification caused the app to open.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/events.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport notifee from '@notifee/react-native';\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n\n  // Bootstrap sequence function\n  async function bootstrap() {\n    const initialNotification = await notifee.getInitialNotification();\n\n    if (initialNotification) {\n      console.log('Notification caused application to open', initialNotification.notification);\n      console.log('Press action used to open the app', initialNotification.pressAction);\n    }\n  }\n\n  useEffect(() => {\n    bootstrap()\n      .then(() => setLoading(false))\n      .catch(console.error);\n  }, []);\n\n  if (loading) {\n    return null;\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving FCM Device Tokens in React Native\nDESCRIPTION: Retrieves the device-specific FCM token and saves it to a backend API. This code should be run on app bootstrap to ensure the token is current, as tokens can change. It requires the @react-native-firebase/messaging package.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\nasync function onAppBootstrap() {\n  // Register the device with FCM\n  await messaging().registerDeviceForRemoteMessages();\n\n  // Get the token\n  const token = await messaging().getToken();\n\n  // Save the token\n  await postToApi('/users/1234/tokens', { token });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Display with Notifee in React Native\nDESCRIPTION: Creates a function to handle button press, request permissions, create an Android channel, and display a notification using Notifee. This includes platform-specific configurations for both iOS and Android.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/displaying-a-notification.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Screen() {\n  async function onDisplayNotification() {\n    // Request permissions (required for iOS)\n    await notifee.requestPermission()\n\n    // Create a channel (required for Android)\n    const channelId = await notifee.createChannel({\n      id: 'default',\n      name: 'Default Channel',\n    });\n\n    // Display a notification\n    await notifee.displayNotification({\n      title: 'Notification Title',\n      body: 'Main body content of the notification',\n      android: {\n        channelId,\n        smallIcon: 'name-of-a-small-icon', // optional, defaults to 'ic_launcher'.\n        // pressAction is needed if you want the notification to open the app when pressed\n        pressAction: {\n          id: 'default',\n        },\n      },\n    });\n  }\n\n  return (\n    <View>\n      <Button title=\"Display Notification\" onPress={() => onDisplayNotification()} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Press Action in React Native\nDESCRIPTION: Sets up a basic notification press action that opens the application when pressed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New notification',\n  android: {\n    channelId,\n    pressAction: {\n      id: 'default',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Notifee Events in React Native\nDESCRIPTION: This code demonstrates how to subscribe to background and foreground events in a React Native app using Notifee.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.onBackgroundEvent(async ({type, detail}) => {\n  // ...\n})\n\nfunction App() {\n\n  useEffect(() => {\n    // ...\n    return notifee.onForegroundEvent(async ({type, detail}) => {\n    // ...\n    }))\n  }, [])\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Input from Notifications Using Notifee Background Events in React Native\nDESCRIPTION: This code snippet shows how to set up a background event listener to handle user input from notifications. It demonstrates accessing the user's input and performing actions based on the input, such as updating a chat and canceling the notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  if (type === EventType.ACTION_PRESS && detail.pressAction.id === 'reply') {\n    await updateChat(detail.notification.data.chatId, detail.input);\n    await notifee.cancelNotification(detail.notification.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Notification Input with Predefined Choices in React Native\nDESCRIPTION: This snippet demonstrates how to set up a notification with a 'Reply' action that presents predefined choices to the user. It uses the Notifee library to configure the notification with custom input options.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New message',\n  body: 'You have a new message from Sarah!',\n  android: {\n    channelId: 'messages',\n    actions: [\n      {\n        title: 'Reply',\n        icon: 'https://my-cdn.com/icons/reply.png',\n        pressAction: {\n          id: 'reply',\n        },\n        input: {\n          allowFreeFormInput: false, // set to false\n          choices: ['Yes', 'No', 'Maybe'],\n          placeholder: 'Reply to Sarah...',\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Timestamp in Notifee Notification\nDESCRIPTION: Shows how to display a human-readable timestamp on a notification by setting showTimestamp to true and providing a timestamp value. This example shows a notification that indicates it was delivered 8 minutes ago.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/timers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Message from Sarah Lane',\n  body: 'Tap to view your unread message from Sarah.',\n  subtitle: 'Messages',\n  android: {\n    channelId,\n    largeIcon: 'https://my-cdn/users/123.png',\n    timestamp: Date.now() - 480000, // 8 minutes ago\n    showTimestamp: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification with Quick Actions for Foreground Service Control\nDESCRIPTION: Displays a notification with a quick action button that can be used to stop the foreground service. This works with the event handler shown in the previous example.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Foreground Service Notification',\n  body: 'Press the Quick Action to stop the service',\n  android: {\n    channelId,\n    actions: [\n      {\n        title: 'Stop',\n        pressAction: {\n          id: 'stop',\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Badge Count with Notifee\nDESCRIPTION: Removes the badge and count from the application icon by passing 0 to the setBadgeCount method.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.setBadgeCount(0).then(() => console.log('Badge count removed!'));\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Notification with Notifee in React Native\nDESCRIPTION: Demonstrates how to update an existing notification by providing a custom ID. This function creates a channel, requests permission, displays an initial notification, and then updates it with new content.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/displaying-a-notification.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function onDisplayNotification() {\n  const channelId = await notifee.createChannel({\n    id: 'default',\n    name: 'Default Channel',\n  });\n\n  // Required for iOS\n  // See https://notifee.app/react-native/docs/ios/permissions\n  await notifee.requestPermission();\n\n  const notificationId = await notifee.displayNotification({\n    id: '123',\n    title: 'Notification Title',\n    body: 'Main body content of the notification',\n    android: {\n      channelId,\n    },\n  });\n\n  // Sometime later...\n  await notifee.displayNotification({\n    id: '123',\n    title: 'Updated Notification Title',\n    body: 'Updated main body content of the notification',\n    android: {\n      channelId,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Input from iOS Notification Actions\nDESCRIPTION: Shows how to retrieve and process user input submitted through notification action buttons. This example demonstrates handling reply text for a chat application.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  const { notification, pressAction, input } = detail;\n\n  if (type === EventType.ACTION_PRESS && pressAction.id === 'reply') {\n    updateChatOnServer(notification.data.conversationId, input);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Events with Notifee\nDESCRIPTION: Demonstrates how to listen for and handle various channel-related events such as app blocking, channel blocking, and channel group blocking.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/channels.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onForegroundEvent(({ type, detail }) => {\n  if (type === EventType.APP_BLOCKED) {\n    console.log('User toggled app blocked', detail.blocked);\n  }\n\n  if (type === EventType.CHANNEL_BLOCKED) {\n    console.log('User toggled channel block', detail.channel.id, detail.blocked);\n  }\n\n  if (type === EventType.CHANNEL_GROUP_BLOCKED) {\n    console.log('User toggled channel group block', detail.channelGroup.id, detail.blocked);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Notifee Notifications from Partial FCM Data (Client-Side)\nDESCRIPTION: Client-side React Native code that constructs a Notifee notification based on partial data received from an FCM message. It handles specific message types and formats the notification content accordingly.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// React Native\nimport notifee from '@notifee/react-native';\nimport messaging from '@react-native-firebase/messaging';\n\nfunction onMessageReceived(message) {\n  const { type, timestamp } = message.data;\n\n  if (type === 'order_shipped') {\n    notifee.displayNotification({\n      title: 'Your order has been shipped',\n      body: `Your order was shipped at ${new Date(Number(timestamp)).toString()}!`,\n      android: {\n        channelId: 'orders',\n      },\n    });\n  }\n}\n\nmessaging().onMessage(onMessageReceived);\nmessaging().setBackgroundMessageHandler(onMessageReceived);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Notification Quick Actions in iOS\nDESCRIPTION: Shows how to create a notification category with a simple action button. This example sets up a 'Mark as read' action for message notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function setCategories() {\n  await notifee.setNotificationCategories([\n    {\n      id: 'message',\n      actions: [\n        {\n          id: 'mark-as-read',\n          title: 'Mark as read',\n        },\n      ],\n    },\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to FCM Messages in React Native\nDESCRIPTION: Sets up message handlers for both foreground and background FCM messages using React Native Firebase. This code requires the @react-native-firebase/messaging package and handles incoming messages regardless of the application state.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n// Note that an async function or a function that returns a Promise \n// is required for both subscribers.\nasync function onMessageReceived(message) {\n  // Do something\n}\n\nmessaging().onMessage(onMessageReceived);\nmessaging().setBackgroundMessageHandler(onMessageReceived);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Task-Based Foreground Service in JavaScript\nDESCRIPTION: Creates a foreground service that listens to task update events and automatically stops the service when the task is complete. Demonstrates the subscription pattern for long-running tasks.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.registerForegroundService(() => {\n  return new Promise(() => {\n    // Example task subscriber\n    onTaskUpdate(async (task) => {\n      if (task.complete) {\n          await notifee.stopForegroundService()\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Quick Action Interaction in iOS Notifications\nDESCRIPTION: Demonstrates how to listen for and respond to quick action presses. This example shows handling a 'mark-as-read' action press through the onBackgroundEvent listener.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  if (type === EventType.ACTION_PRESS && detail.pressAction.id === 'mark-as-read') {\n    console.log('User pressed the \"Mark as read\" action.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Foreground Events in React Native with Notifee\nDESCRIPTION: This snippet demonstrates how to use the useEffect hook with Notifee's onForegroundEvent method to handle foreground events in a React Native application. It shows how to differentiate between dismissed and pressed notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport notifee, { EventType } from '@notifee/react-native';\n\nfunction App() {\n  // Subscribe to events\n  useEffect(() => {\n    return notifee.onForegroundEvent(({ type, detail }) => {\n      switch (type) {\n        case EventType.DISMISSED:\n          console.log('User dismissed notification', detail.notification);\n          break;\n        case EventType.PRESS:\n          console.log('User pressed notification', detail.notification);\n          break;\n      }\n    });\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Importance in Android with Notifee\nDESCRIPTION: Demonstrates how to set notification importance using channels for Android 8.0+ and direct notification configuration for older devices. Creates a high importance channel and displays a notification through it.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidImportance } from '@notifee/react-native';\n\nconst channelId = await notifee.createChannel({\n  id: 'important',\n  name: 'Important Notifications',\n  importance: AndroidImportance.HIGH,\n});\n\nawait notifee.displayNotification({\n  title: 'Your account requires attention',\n  body: 'You are overdue payment on one or more of your accounts!',\n  android: {\n    channelId,\n    importance: AndroidImportance.HIGH,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Existing Notification Settings without Requesting Permissions\nDESCRIPTION: This code shows how to get the current notification permission settings without triggering a permission request dialog, using the getNotificationSettings API.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getExistingSettings() {\n  const settings = await notifee.getNotificationSettings();\n\n  if (settings) {\n    console.log('Current permission settings: ', settings);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Styled Notification with HTML Attributes in React Native\nDESCRIPTION: This snippet demonstrates how to create a notification with styled text using HTML attributes. It includes custom colors, font weights, and Unicode characters for both the notification content and action buttons.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: '<p style=\"color: #4caf50;\"><b>Styled HTMLTitle</span></p></b></p> &#128576;',\n  subtitle: '&#129395;',\n  body:\n    'The <p style=\"text-decoration: line-through\">body can</p> also be <p style=\"color: #ffffff; background-color: #9c27b0\"><i>styled too</i></p> &#127881;!',\n  android: {\n    channelId,\n    color: '#4caf50',\n    actions: [\n      {\n        title: '<b>Dance</b> &#128111;',\n        pressAction: { id: 'dance' },\n      },\n      {\n        title: '<p style=\"color: #f44336;\"><b>Cry</b> &#128557;</p>',\n        pressAction: { id: 'cry' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Notification with Tag using Notifee in React Native\nDESCRIPTION: Demonstrates how to cancel a notification using both its ID and tag. This provides an alternative method for removing notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/displaying-a-notification.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  await notifee.cancelNotification(notificationId, tag);\n```\n\n----------------------------------------\n\nTITLE: Handling Notifee Events for Remote Notifications\nDESCRIPTION: This JSX code snippet demonstrates how to set up event listeners for Notifee remote notification events in a React Native app.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport notifee, { EventType } from '@notifee/react-native';\n\nfunction App() {\n  // Subscribe to events\n  useEffect(() => {\n    return notifee.onForegroundEvent(({ type, detail }) => {\n      console.log('Remote notification info: ', detail.notification?.remote)\n      switch (type) {\n        case EventType.DISMISSED:\n          console.log('User dismissed notification', detail.notification);\n          break;\n        case EventType.PRESS:\n          console.log('User pressed notification', detail.notification);\n          break;\n      }\n    });\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Small Icon for Android Notification in React Native\nDESCRIPTION: This code shows how to set a small icon for an Android notification. It demonstrates setting the icon resource name and color. The small icon is typically used to identify the app or reflect the content type of the notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Small Icon',\n  body: 'A notification using the small icon!.',\n  android: {\n    // Reference the name created (Optional, defaults to 'ic_launcher')\n    smallIcon: 'ic_small_icon',\n\n    // Set color of icon (Optional, defaults to white)\n    color: '#9c27b0',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Observing Notification Permission Settings in iOS\nDESCRIPTION: This snippet demonstrates how to check the current notification permission status and settings for an application, useful for adapting app behavior based on permissions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nasync function checkApplicationPermission() {\n  const settings = await notifee.requestPermission();\n\n  if (settings.authorizationStatus) {\n    console.log('User has notification permissions enabled');\n  } else {\n    console.log('User has notification permissions disabled');\n  }\n\n  console.log('iOS settings: ', settings.ios);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Interactions with Foreground Service Notifications\nDESCRIPTION: Subscribes to notification events inside the foreground service task and handles user interactions. This example shows how to stop the service when a user presses a specific action button.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\n// Create the task runner\nnotifee.registerForegroundService((notification) => {\n  return new Promise(() => {\n    notifee.onForegroundEvent(async ({ type, detail }) => {\n      if (type === EventType.ACTION_PRESS && detail.pressAction.id === 'stop') {\n        await notifee.stopForegroundService()\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Quick Action Interactions\nDESCRIPTION: Sets up an event listener to handle quick action button presses.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onForegroundEvent(({ type, detail }) => {\n  if (type === EventType.ACTION_PRESS && detail.pressAction.id) {\n    console.log('User pressed an action with the id: ', detail.pressAction.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Critical Alert Permissions for iOS\nDESCRIPTION: This snippet shows how to request permission for critical alerts that can bypass user preferences like mute switch or Do Not Disturb mode. This requires a special entitlement issued by Apple.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/behaviour.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// iOS > 12\nnotifee.requestPermission({\n  //...,\n  criticalAlert: true\n});\n\n// iOS > 10\nnotifee.displayNotification({\n  title: 'ALERT!',\n  body: 'This is a critical notification!',\n  ios: {\n    critical: true,\n    sound: 'local.wav',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Channel with Badge Control in React Native\nDESCRIPTION: This code demonstrates how to create a notification channel with badge control. It shows how to disable badges for notifications posted to this channel on Android 8.0 and above.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.createChannel({\n  id: 'messages',\n  name: 'Private Messages',\n  badge: false, // disable in badges\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Destructive and Authentication-Required Actions in iOS\nDESCRIPTION: Demonstrates creating advanced notification actions including destructive actions (shown in red) and authentication-required actions that only appear when the device is unlocked.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function setCategories() {\n  await notifee.setNotificationCategories([\n    {\n      id: 'message',\n      actions: [\n        {\n          id: 'view-post',\n          title: 'View post',\n          foreground: true,\n        },\n        {\n          id: 'delete-chat',\n          title: 'Delete chat',\n          destructive: true,\n          // Only show if device is unlocked\n          authenticationRequired: true,\n        },\n      ],\n    },\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Big Text Style Notification in React Native with Notifee\nDESCRIPTION: Shows how to create a notification that can display a large volume of text when expanded. Useful for displaying long messages or emails that would otherwise be truncated.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/styles.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidStyle } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Image uploaded',\n  body: 'Your image has been successfully uploaded',\n  android: {\n    channelId,\n    style: { type: AndroidStyle.BIGTEXT, text: 'Large volume of text shown in the expanded state' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Large Icon for Android Notification in React Native\nDESCRIPTION: This snippet illustrates different ways to set a large icon for an Android notification. It shows how to use remote URLs, local images, file paths, Android resources, and base64 encoded images as large icons.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Chat with Joe Bloggs',\n  body: 'A new message has been received from a user.',\n  android: {\n    // Remote image\n    largeIcon: 'https://my-cdn.com/users/123456.png',\n\n    // Local image\n    largeIcon: require('../assets/user.jpg'),\n\n    // Absolute file path\n    largeIcon: 'file:///xxxx/xxxx/xxxx.jpg',\n\n    // Android resource (mipmap or drawable)\n    largeIcon: 'large_icon',\n    \n    // Base 64 image\n    largeIcon: `data:${image.mime};base64,${image.rawBase64Data}`\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timestamp Trigger for Notifications in React Native\nDESCRIPTION: This snippet shows how to set up a timestamp trigger for notifications, scheduled to fire 5 seconds from the current time.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* Timestamp Date */\nconst getTimestamp = () => {\n  const timestampDate = new Date(Date.now());\n  timestampDate.setSeconds(timestampDate.getSeconds() + 5);\n  return timestampDate.getTime();\n};\n\n/* Trigger */\nconst trigger = {\n    timestamp: timestampDate,\n    type: TriggerType.TIMESTAMP,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Channel Groups and Assigning Channels\nDESCRIPTION: Demonstrates creating a channel group and assigning a notification channel to it, useful for organizing multiple notification channels.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/channels.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a group\nawait notifee.createChannelGroup({\n  id: 'personal',\n  name: 'Personal',\n});\n\n// Assign the group to the channel\nawait notifee.createChannel({\n  id: 'comments',\n  name: 'New Comments',\n  groupId: 'personal',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Background Events in React Native with Notifee\nDESCRIPTION: This example demonstrates how to register a callback handler for background events using Notifee's onBackgroundEvent method. It shows handling a 'Mark as read' action by updating an external API and cancelling the notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/events.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// index.js\nimport { AppRegistry } from 'react-native';\nimport notifee, { EventType } from '@notifee/react-native';\nimport App from './App';\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  const { notification, pressAction } = detail;\n\n  // Check if the user pressed the \"Mark as read\" action\n  if (type === EventType.ACTION_PRESS && pressAction.id === 'mark-as-read') {\n    // Update external API\n    await fetch(`https://my-api.com/chat/${notification.data.chatId}/read`, {\n      method: 'POST',\n    });\n\n    // Remove the notification\n    await notifee.cancelNotification(notification.id);\n  }\n});\n\n// Register main application\nAppRegistry.registerComponent('app', () => App);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trigger Notification IDs\nDESCRIPTION: Simple example showing how to retrieve all trigger notification IDs using Notifee's getTriggerNotificationIds method.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/triggers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.getTriggerNotificationIds().then(ids => console.log('All trigger notifications: ', ids));\n```\n\n----------------------------------------\n\nTITLE: Creating Interval Trigger\nDESCRIPTION: Example demonstrates how to create an interval trigger that repeats every 30 minutes using Notifee's IntervalTrigger type.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/triggers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { IntervalTrigger, TriggerType, TimeUnit } from '@notifee/react-native';\n\nconst trigger: IntervalTrigger = {\n  type: TriggerType.INTERVAL,\n  interval: 30,\n  timeUnit: TimeUnit.MINUTES\n};\n```\n\n----------------------------------------\n\nTITLE: Rebuilding React Native Project for Autolinking\nDESCRIPTION: Commands to rebuild a React Native project after installing Notifee to enable autolinking for both iOS and Android platforms.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For iOS\ncd ios/ && pod install --repo-update\nnpx react-native run-ios\n\n# For Android\nnpx react-native run-android\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifee Notifications from FCM Data (Client-Side)\nDESCRIPTION: Client-side React Native code that parses the Notifee notification JSON from an FCM data payload and displays it. This handler works for both foreground and background messages.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// React Native\nimport notifee from '@notifee/react-native';\nimport messaging from '@react-native-firebase/messaging';\n\nfunction onMessageReceived(message) {\n  notifee.displayNotification(JSON.parse(message.data.notifee));\n}\n\nmessaging().onMessage(onMessageReceived);\nmessaging().setBackgroundMessageHandler(onMessageReceived);\n```\n\n----------------------------------------\n\nTITLE: Integrating Badge Count with Background Events in Notifee\nDESCRIPTION: Manages badge counts based on notification events. Increments count when a notification is displayed in the background and decrements when a user interacts with a notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\nimport { firebase } from '@react-native-firebase/messaging'\n\n// Your app's background handler for incoming remote messages\nfirebase.messaging().setBackgroundMessageHandler(async (\n  remoteMessage: FirebaseMessagingTypes.RemoteMessage\n) => {\n   await notifee.displayNotification(...)\n   // Increment the count by 1\n   await notifee.incrementBadgeCount();\n})\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  const { notification, pressAction } = detail;\n\n  // Check if the user pressed the \"Mark as read\" action\n  if (type === EventType.ACTION_PRESS && pressAction.id === 'mark-as-read') {\n    // Decrement the count by 1\n    await notifee.decrementBadgeCount();\n\n    // Remove the notification\n    await notifee.cancelNotification(notification.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Channel Groups\nDESCRIPTION: Shows how to delete a channel group without affecting the channels assigned to it.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/channels.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait notifee.deleteChannelGroup('personal');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notification Categories with Actions in Notifee\nDESCRIPTION: Demonstrates how to create a notification category with quick actions using the setNotificationCategories method. The example creates a 'post' category with 'like' and 'dislike' actions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/categories.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nasync function setCategories() {\n  await notifee.setNotificationCategories([\n    {\n      id: 'post',\n      actions: [\n        {\n          id: 'like',\n          title: 'Like Post',\n        },\n        {\n          id: 'dislike',\n          title: 'Dislike Post',\n        },\n      ],\n    },\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required AndroidManifest.xml Settings for Full-Screen Notifications\nDESCRIPTION: XML configuration needed in AndroidManifest.xml to enable full-screen notifications, including activity attributes and permissions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n  <activity\n    ...\n    android:showWhenLocked=\"true\"\n    android:turnScreenOn=\"true\"\n  />\n```\n\nLANGUAGE: xml\nCODE:\n```\n  <uses-permission android:name=\"android.permission.USE_FULL_SCREEN_INTENT\">\n```\n\n----------------------------------------\n\nTITLE: Creating Group Summary Notification in Android\nDESCRIPTION: Demonstrates how to create a summary notification that acts as a container for grouped notifications using the groupId and groupSummary properties.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/grouping-and-sorting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Emails',\n  subtitle: '3 Unread Emails',\n  android: {\n    channelId,\n    groupSummary: true,\n    groupId: '123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Foreground-Launching Quick Actions for iOS Notifications\nDESCRIPTION: Shows how to configure a notification action that opens the app in the foreground when pressed. This is useful for actions that require the full app interface.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function setCategories() {\n  await notifee.setNotificationCategories([\n    {\n      id: 'message',\n      actions: [\n        {\n          id: 'view-post',\n          title: 'View post',\n          // Trigger the app to open in the foreground\n          foreground: true,\n        },\n      ],\n    },\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FCM Payload with Notifee Options\nDESCRIPTION: This JSON snippet shows how to structure an FCM payload to include Notifee-specific options for advanced notification features.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    notification: {\n      title: 'A notification title!',\n      body: 'A notification body',\n    },\n    apns: {\n        payload: {\n            aps: {\n                'contentAvailable': 1,\n                'mutableContent': 1,\n            },\n            notifee_options: {\n                image: 'https://placeimg.com/640/480/any',\n                ios: {\n                    sound: 'media/kick.wav',\n                    foregroundPresentationOptions: {alert: true, badge: true, sound: true, banner: true, list: true},\n                    categoryId: 'post',\n                    attachments: [{url: 'https://placeimg.com/640/480/any', thumbnailHidden: true}]\n                },\n            },\n        },\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Lights on Android Devices\nDESCRIPTION: Examples showing how to configure the LED notification light color and pattern on Android devices, with different implementations for Android 8.0+ and older versions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidColor } from '@notifee/react-native';\n// Android >= 8.0 (API level 26)\nnotifee.createChannel({\n  id: 'custom-lights',\n  name: 'Channel with custom lights',\n  lights: true,\n  lightColor: AndroidColor.RED,\n});\n\n// Android < 8.0 (API level 26)\nnotifee.displayNotification({\n  body: 'Custom lights',\n  android: {\n    lights: [AndroidColor.RED, 300, 600],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring APNs Payload for FCM Remote Notifications\nDESCRIPTION: This JSON snippet shows how to structure an FCM payload to include APNs-specific properties like category and custom sound.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    notification: {\n      title: 'A notification title!',\n      body: 'A notification body',\n    },\n    apns: {\n        payload: {\n            aps: {\n                category: 'post', // A category that's already been created by your app\n                sound: 'media/kick.wav', // A local sound file you have inside your app's bundle\n                 ... // any other properties\n            },\n        },\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Actions\nDESCRIPTION: Adds quick action buttons to a notification with custom icons and handlers.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: '08:00am Alarm',\n  body: 'The alarm you set for 08:00am requires attention!',\n  android: {\n    channelId: 'alarms',\n    actions: [\n      {\n        title: 'Snooze',\n        icon: 'https://my-cdn.com/icons/snooze.png',\n        pressAction: {\n          id: 'snooze',\n        },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding User Input Actions to iOS Notifications\nDESCRIPTION: Shows how to create notification actions that allow users to input text responses directly from the notification. This example enables a reply functionality for message notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function setCategories() {\n  await notifee.setNotificationCategories([\n    {\n      id: 'message',\n      actions: [\n        {\n          id: 'reply',\n          title: 'Reply',\n          input: true,\n        },\n      ],\n    },\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Decrementing Badge Count by 1 with Notifee\nDESCRIPTION: Decreases the current badge count by 1 and retrieves the updated count. If the new value is less than 1, the badge will be removed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Decrement by 1\nnotifee\n  .decrementBadgeCount()\n  .then(() => notifee.getBadgeCount())\n  .then(count => console.log('Badge count decremented by 1 to: ', count));\n```\n\n----------------------------------------\n\nTITLE: Registering a Foreground Service with Notifee in JavaScript\nDESCRIPTION: Registers a foreground service that runs a long-lived task in the background. The callback must return a Promise and will receive the notification object when called.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nnotifee.registerForegroundService((notification) => {\n  return new Promise(() => {\n    // Long running task...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Chronometer Timer to Notification\nDESCRIPTION: Demonstrates how to add an ongoing counting timer (chronometer) to a notification by enabling showChronometer. This can be useful for scenarios like showing call duration.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/timers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Message from Sarah Lane',\n  body: 'Tap to view your unread message from Sarah.',\n  subtitle: 'Messages',\n  android: {\n    channelId,\n    largeIcon: 'https://my-cdn/users/123.png',\n    timestamp: Date.now() - 480000, // 8 minutes ago\n    showTimestamp: true,\n    showChronometer: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Decrementing Badge Count by Custom Value with Notifee\nDESCRIPTION: Decreases the current badge count by a custom value (3 in this example) and retrieves the updated count. If the new value is less than 1, the badge will be removed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Decrement by 3\nnotifee\n  .decrementBadgeCount(3)\n  .then(() => notifee.getBadgeCount())\n  .then(count => console.log('Badge count decremented by 3 to: ', count));\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationAndroid Interface in TypeScript\nDESCRIPTION: This code snippet defines the NotificationAndroid interface with various properties for customizing Android notifications. It includes options for actions, foreground services, auto-cancellation, badges, categories, channels, colors, chronometers, and more.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationAndroid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationAndroid {\n  actions?: AndroidAction[];\n  asForegroundService?: boolean;\n  autoCancel?: boolean;\n  badgeCount?: number;\n  badgeIconType?: AndroidBadgeIconType;\n  category?: AndroidCategory;\n  channelId?: string;\n  chronometerDirection?: \"up\" | \"down\";\n  circularLargeIcon?: boolean;\n  color?: string;\n  colorized?: boolean;\n  defaults?: AndroidDefaults[];\n  flags?: AndroidFlags[];\n  foregroundServiceTypes?: AndroidForegroundServiceType[];\n  fullScreenAction?: NotificationFullScreenAction;\n  groupAlertBehavior?: AndroidGroupAlertBehavior;\n  // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Foreground Service Notification in JavaScript\nDESCRIPTION: Displays a notification that will be attached to a foreground service. The notification is configured with the asForegroundService property set to true, and includes customized appearance options.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidColor } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Foreground service',\n  body: 'This notification will exist for the lifetime of the service runner',\n  android: {\n    channelId,\n    asForegroundService: true,\n    color: AndroidColor.RED,\n    colorized: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Notifee Logs on Android\nDESCRIPTION: Terminal command to filter and view Notifee-specific logs on Android using ADB. This filters out all other logs, making it easier to focus on Notifee-related issues.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/debugging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nadb logcat '*:S' NOTIFEE:D\n```\n\n----------------------------------------\n\nTITLE: Enabling In-App Notification Settings in iOS\nDESCRIPTION: This code demonstrates how to enable the in-app notification settings feature, which adds a button in the iOS Settings UI that can redirect users back to your app for notification configuration.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait notifee.requestPermission({\n  inAppNotificationSettings: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Media Attachments to iOS Notifications with Notifee\nDESCRIPTION: Demonstrates how to add various types of media attachments (local images, file paths, React Native assets, and remote images) to iOS notifications. Attachments can be displayed as thumbnails or full media when the user expands the notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/appearance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Media uploaded',\n  body: 'Your media has been successfully uploaded',\n  ios: {\n    attachments: [\n      {\n        // iOS resource\n        url: 'local-image.png',\n        thumbnailHidden: true,\n      },\n      {\n        // Local file path.\n        url: '/Path/on/device/to/local/file.mp4',\n        thumbnailTime: 3, // optional\n      },\n      {\n        // React Native asset.\n        url: require('./assets/my-image.gif'),\n      },\n      {\n        // Remote image\n        url: 'https://my-cdn.com/images/123456.png',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing Badge Count by 1 with Notifee\nDESCRIPTION: Increases the current badge count by 1 and retrieves the updated count.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Increment by 1\nnotifee\n  .incrementBadgeCount()\n  .then(() => notifee.getBadgeCount())\n  .then(count => console.log('Badge count incremented by 1 to: ', count));\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Display in React Native\nDESCRIPTION: This snippet shows how to choose and set a specific notification payload from predefined examples in the Notifee example project.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// const notification = notifications.basic;\nconst notification = notifications.image;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Sound for iOS Notifications\nDESCRIPTION: This snippet demonstrates how to set a custom sound file for iOS notifications. The sound file must be a local resource (.wav, .aiff, or .caf format) and less than 30 seconds in length.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/behaviour.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  body: 'Custom sound',\n  ios: {\n    // iOS resource (.wav, aiff, .caf)\n    sound: 'local.wav',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Interruption Level for iOS Focus Mode\nDESCRIPTION: This code shows how to control a notification's importance using the iOS 15+ interruptionLevel API. This determines whether a notification can interrupt the user in Focus Mode.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/behaviour.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// iOS > 15\nnotifee.displayNotification({\n  title: 'ALERT!',\n  body: 'This is a critical notification!',\n  ios: {\n    interruptionLevel: 'timeSensitive',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Notifee API Actions in React Native\nDESCRIPTION: This snippet demonstrates how to test different Notifee API actions by modifying the onAPIPress function in the example project.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst onAPIPress = async () => {\n  /* Change the API function to test */\n  const result = await notifee.cancelAllNotifications();\n\n  console.log('onAPIPress -> ', result != null ? result : 'API Call Success');\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Android Notification Channel\nDESCRIPTION: Shows how to remove an existing notification channel using its ID. Important to note that notifications for deleted channels will no longer display.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/channels.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait notifee.deleteChannel('alarm');\n```\n\n----------------------------------------\n\nTITLE: Checking App-wide Notification Permissions with Notifee in React Native\nDESCRIPTION: This code snippet shows how to check if notifications are enabled for the app using Notifee's getNotificationSettings method. It checks the authorizationStatus and logs whether permissions are authorized or denied.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, {AuthorizationStatus} from '@notifee/react-native';\n\nasync function checkNotificationPermission() {\n  const settings = await notifee.getNotificationSettings();\n\n  if (settings.authorizationStatus == AuthorizationStatus.AUTHORIZED) {\n    console.log('Notification permissions has been authorized');\n  } else if (settings.authorizationStatus == AuthorizationStatus.DENIED) {\n    console.log('Notification permissions has been denied');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Notification Content in Service Extension\nDESCRIPTION: This Objective-C code snippet shows how to modify the notification content in the NotificationService before passing it to NotifeeExtensionHelper.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_5\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {\n    self.contentHandler = contentHandler;\n    self.bestAttemptContent = [request.content mutableCopy];\n  \n    NSMutableDictionary *userInfoDict = [self.bestAttemptContent.userInfo mutableCopy];\n    userInfoDict[@\"notifee_options\"] = [NSMutableDictionary dictionary];\n    userInfoDict[@\"notifee_options\"][@\"title\"] = @\"Modified Title\";\n  \n    self.bestAttemptContent.userInfo = userInfoDict;\n\n    [NotifeeExtensionHelper populateNotificationContent:request\n                                withContent: self.bestAttemptContent\n                                withContentHandler:contentHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Vibration Patterns for Notifications\nDESCRIPTION: Examples of how to set custom vibration patterns for notifications on Android, showing implementation for both Android 8.0+ (via channel) and older versions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Android >= 8.0 (API level 26)\nnotifee.createChannel({\n  id: 'custom-vibration',\n  name: 'Channel with custom vibration',\n  vibration: true,\n  vibrationPattern: [300, 500],\n});\n\n// Android < 8.0 (API level 26)\nnotifee.displayNotification({\n  body: 'Custom vibration',\n  android: {\n    vibrationPattern: [300, 500],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Foreground Service Types in Notification Configuration\nDESCRIPTION: Creates a notification that explicitly defines which foreground service types to use when creating the service. This is required for Android 14+ to ensure proper permission verification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidForegroundServiceType } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Foreground service',\n  body: 'This notification will exist for the lifetime of the service runner',\n  android: {\n    channelId,\n    asForegroundService: true,\n    foregroundServiceTypes: [AndroidForegroundServiceType.FOREGROUND_SERVICE_TYPE_CAMERA, AndroidForegroundServiceType.FOREGROUND_SERVICE_TYPE_MICROPHONE],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing NotifeeExtensionHelper in Notification Service\nDESCRIPTION: This Objective-C code snippet shows how to import the NotifeeExtensionHelper in the NotificationService.m file.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\n#import \"NotificationService.h\"\n#import \"NotifeeExtensionHelper.h\"\n```\n\n----------------------------------------\n\nTITLE: Updating Progress Indicators Based on Upload Task Events\nDESCRIPTION: This example demonstrates a complete workflow for updating a notification's progress based on an upload task. It handles different events (start, update, completion) and adjusts the notification accordingly, including switching to an indeterminate state during finalization.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/progress-indicators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nonUploadTaskEvent(async (event, upload) => {\n  if (event.status === 'start') {\n    await notifee.displayNotification({\n      id: upload.id,\n      android: {\n        progress: {\n          max: upload.size,\n          current: 0,\n        },\n      },\n    });\n  }\n\n  if (event.status === 'update') {\n    await notifee.displayNotification({\n      id: upload.id,\n      android: {\n        progress: {\n          max: upload.size,\n          current: upload.current,\n        },\n      },\n    });\n  }\n\n  if (upload.size === upload.current) {\n    await notifee.displayNotification({\n      id: upload.id,\n      title: 'Finalizing upload...',\n      android: {\n        progress: {\n          indeterminate: true,\n        },\n      },\n    });\n  }\n\n  if (event.status === 'complete') {\n    await notifee.cancelNotification(upload.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Alert Behavior\nDESCRIPTION: Demonstrates how to control notification alert behavior for grouped notifications using AndroidGroupAlertBehavior.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/grouping-and-sorting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidGroupAlertBehavior } from '@notifee/react-native';\n\n// Create summary\nnotifee.displayNotification({\n  title: 'Emails',\n  subtitle: '3 Unread Emails',\n  android: {\n    channelId,\n    groupSummary: true,\n    groupId: '123',\n    groupAlertBehavior: AndroidGroupAlertBehavior.SUMMARY,\n  },\n});\n\n// Children\nnotifee.displayNotification({\n  title: 'New Email',\n  body: 'Tap to open your email.',\n  subtitle: 'Unread',\n  android: {\n    channelId,\n    groupId: '123',\n    groupAlertBehavior: AndroidGroupAlertBehavior.SUMMARY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build for Notifee with JDK 11\nDESCRIPTION: JSON configuration for eas.json to specify an Ubuntu image with JDK 11 for building Expo apps with Notifee, which requires Java JDK 11+ to build on Android.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"dev\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"image\": \"ubuntu-18.04-jdk-11-ndk-r19c\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NativeAndroidChannel Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface that extends AndroidChannel to define properties for Android notification channels. Includes settings for badges, DND bypass, descriptions, groups, importance levels, lights, sounds, and vibration patterns.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NativeAndroidChannel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NativeAndroidChannel extends AndroidChannel {\n  blocked: boolean;\n  badge?: boolean;\n  bypassDnd?: boolean;\n  description?: string;\n  groupId?: string;\n  id: string;\n  importance?: AndroidImportance;\n  lightColor?: string;\n  lights?: boolean;\n  name: string;\n  sound?: string;\n  soundURI?: string;\n  vibration?: boolean;\n  vibrationPattern?: number[];\n  visibility?: AndroidVisibility;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Permission Settings in iOS\nDESCRIPTION: This code shows how to request notification permissions with custom settings by overriding the default values, allowing fine-grained control over how notifications behave.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait notifee.requestPermission({\n  sound: false,\n  announcement: true,\n  inAppNotificationSettings: false,\n  // ... other permission settings\n});\n```\n\n----------------------------------------\n\nTITLE: TimestampTrigger Interface Definition in TypeScript\nDESCRIPTION: Interface definition for TimestampTrigger that includes properties for configuring timestamp-based notification triggers. Contains properties for setting the trigger type, timestamp, repeat frequency, and Android alarm manager options.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.TimestampTrigger.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimestampTrigger {\n    type: TIMESTAMP;\n    timestamp: number;\n    repeatFrequency?: RepeatFrequency;\n    alarmManager?: boolean | TimestampTriggerAlarmManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Progress Indicator in Notifications with Notifee\nDESCRIPTION: This code demonstrates how to create a notification with a progress indicator by attaching a progress object to the notification's android object. The max value sets the maximum value of the progress bar, while current indicates the current progress.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/progress-indicators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnotifee.displayNotification({\n  android: {\n    progress: {\n      max: 10,\n      current: 5,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying OneSignal Gradle Dependencies for Notifee Compatibility\nDESCRIPTION: This code snippet shows how to modify the OneSignal Gradle dependency to exclude conflicting Google service dependencies, which is necessary for compatibility with Notifee. This modification should be applied to the react-native-onesignal Android build.gradle file when using versions earlier than 4.0.0.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/onesignal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napi ('com.onesignal:OneSignal:3.15.1') {\n  exclude group: 'com.google.android.gms', module: 'play-services-location'\n  exclude group: 'com.google.android.gms', module: 'play-services-base'\n  exclude group: 'com.google.android.gms', module: 'play-services-ads-identifier'\n  exclude group: 'com.google.firebase', module: 'firebase-messaging'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Android Notification Type Interface\nDESCRIPTION: TypeScript interface definitions for Android notification configuration options including grouping, importance, appearance, and behavior settings.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationAndroid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationAndroid {\n  groupId?: string;\n  groupSummary?: boolean;\n  importance?: AndroidImportance;\n  inputHistory?: string[];\n  largeIcon?: string | number | object;\n  lights?: [string, number, number];\n  lightUpScreen?: boolean;\n  localOnly?: boolean;\n  loopSound?: boolean;\n  ongoing?: boolean;\n  onlyAlertOnce?: boolean;\n  pressAction?: NotificationPressAction;\n  progress?: AndroidProgress;\n  showChronometer?: boolean;\n  showTimestamp?: boolean;\n  smallIcon?: string;\n  smallIconLevel?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSNotificationSettings Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for iOS notification settings. Contains properties for controlling various aspects of notifications including alerts, badges, sounds, critical alerts, and authorization status.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSNotificationSettings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOSNotificationSettings {\n  alert: IOSNotificationSetting;\n  announcement: IOSNotificationSetting;\n  authorizationStatus: AuthorizationStatus;\n  badge: IOSNotificationSetting;\n  carPlay: IOSNotificationSetting;\n  criticalAlert: IOSNotificationSetting;\n  inAppNotificationSettings: IOSNotificationSetting;\n  lockScreen: IOSNotificationSetting;\n  notificationCenter: IOSNotificationSetting;\n  showPreviews: IOSShowPreviewsSetting;\n  sound: IOSNotificationSetting;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Notification to a Category in Notifee\nDESCRIPTION: Shows how to display a notification and assign it to a previously created category using the categoryId property in the iOS options.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/categories.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'New post from John',\n  body: 'Hey everyone! Check out my new blog post on my website.',\n  ios: {\n    categoryId: 'post',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining IOSNotificationCategoryAction Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSNotificationCategoryAction interface, which includes properties for configuring iOS notification quick actions. It specifies various options such as action ID, title, input capabilities, destructive nature, foreground launching, and authentication requirements.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSNotificationCategoryAction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IOSNotificationCategoryAction {\n  id: string;\n  title: string;\n  input?: true | IOSInput;\n  destructive?: boolean;\n  foreground?: boolean;\n  authenticationRequired?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Full-Screen Notifications for Time-Sensitive Alerts\nDESCRIPTION: Shows how to create full-screen notifications for urgent alerts like alarms or incoming calls, including necessary manifest configuration.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  body: 'Full-screen notification',\n  android: {\n    // Recommended to set a category\n    category: AndroidCategory.CALL,\n    // Recommended to set importance to high\n    importance: AndroidImportance.HIGH,\n    fullScreenAction: {\n      id: 'default',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationPressAction Interface in TypeScript\nDESCRIPTION: Interface definition for notification press actions with properties for handling user interactions. Includes ID field for action identification, optional Android activity launch settings, and custom React component configuration.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationPressAction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationPressAction {\n  id: string;\n  launchActivity?: string;\n  launchActivityFlags?: AndroidLaunchActivityFlag[];\n  mainComponent?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: EventType Enum Definition - TypeScript\nDESCRIPTION: Enumeration of notification event types used in the Notifee library. Includes events for notification interactions like dismissal, press, delivery, and various Android-specific blocking states.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.EventType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum EventType {\n  UNKNOWN = -1,\n  DISMISSED = 0,\n  PRESS = 1,\n  ACTION_PRESS = 2,\n  DELIVERED = 3,\n  APP_BLOCKED = 4,\n  CHANNEL_BLOCKED = 5,\n  CHANNEL_GROUP_BLOCKED = 6,\n  TRIGGER_NOTIFICATION_CREATED = 7,\n  FG_ALREADY_EXIST = 8\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timestamp Trigger with Repeat Frequency\nDESCRIPTION: Example shows how to create a timestamp trigger that fires after 3 hours and repeats weekly, with optional AlarmManager configuration for Android.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/triggers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { TimestampTrigger, TriggerType, TimeUnit, AlarmType } from '@notifee/react-native';\n\nconst trigger: TimestampTrigger = {\n  type: TriggerType.TIMESTAMP,\n  timestamp: Date.now() + 1000 * 60 * 60 * 3, // fire in 3 hours\n  repeatFrequency: RepeatFrequency.WEEKLY, // repeat once a week\n};\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationSettings Interface in TypeScript\nDESCRIPTION: This code snippet defines the NotificationSettings interface with properties for authorization status and platform-specific settings. It includes references to other interfaces and enumerations for Android, iOS, and web notification settings.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationSettings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NotificationSettings {\n  authorizationStatus: AuthorizationStatus;\n  android: AndroidNotificationSettings;\n  ios: IOSNotificationSettings;\n  web: WebNotificationSettings;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Countdown Timer in Notification\nDESCRIPTION: Shows how to create a countdown timer in a notification by setting chronometerDirection to 'down'. This example creates a 5-minute countdown timer for a time-limited offer.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/timers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: '&#11088; Claim Your Prize &#11088;',\n  body: 'Tap to claim your time limited prize! Hurry! &#10024;',\n  subtitle: 'Prizes',\n  android: {\n    channelId,\n    showChronometer: true,\n    chronometerDirection: 'down',\n    timestamp: Date.now() + 300000, // 5 minutes\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayedNotification Interface in TypeScript\nDESCRIPTION: This code snippet defines the DisplayedNotification interface with properties for date, id, notification, and trigger. It includes type definitions and optional properties.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.DisplayedNotification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DisplayedNotification {\n  date?: string;\n  id?: string;\n  notification: Notification;\n  trigger: Trigger;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox Style Notification in React Native with Notifee\nDESCRIPTION: Demonstrates creation of a notification that can display multiple lines of content in a list format. Useful for showing multiple messages or updates in a single notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/styles.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidStyle } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  title: 'Messages list',\n  android: {\n    channelId,\n    style: {\n      type: AndroidStyle.INBOX,\n      lines: ['First Message', 'Second Message', 'Third Message', 'Forth Message'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Badge Count on App Launch with Notifee\nDESCRIPTION: Resets the badge count to zero when the application is launched, typically used in the main app component's useEffect hook.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  useEffect(() => {\n    // App launched, remove the badge count\n    notifee.setBadgeCount(0).then(() => console.log('Badge count removed'));\n  }, []);\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RepeatFrequency Enumeration in TypeScript\nDESCRIPTION: This enumeration defines constants for different notification repeat frequencies: NONE, HOURLY, DAILY, and WEEKLY. It is used with TimestampTrigger.repeatFrequency for setting up recurring notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.RepeatFrequency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum RepeatFrequency {\n  NONE = -1,\n  HOURLY = 0,\n  DAILY = 1,\n  WEEKLY = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Channel-specific Notification Permissions with Notifee in React Native\nDESCRIPTION: This snippet demonstrates how to check if notifications are enabled for a specific channel using Notifee's getChannel method. It checks the blocked attribute of the channel object and logs whether the channel is enabled or disabled.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nasync function checkChannelPermission() {\n  const channel = await notifee.getChannel();\n\n  if (channel.blocked) {\n    console.log('Channel is disabled');\n  } else {\n    console.log('Channel is enabled');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventDetail Interface Properties in TypeScript\nDESCRIPTION: This code snippet defines the properties of the EventDetail interface, including optional fields for blocked status, channel information, input details, and notification data. It specifies the types and availability of each property based on different event types and platform versions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.EventDetail.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EventDetail {\n  blocked?: boolean;\n  channel?: NativeAndroidChannel;\n  channelGroup?: NativeAndroidChannelGroup;\n  input?: string;\n  notification?: Notification;\n  pressAction?: NotificationPressAction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSShowPreviewsSetting Enumeration in TypeScript\nDESCRIPTION: This enumeration defines the possible values for the show previews notification setting on iOS devices. It includes options for not supported, never show previews, always show previews, and show previews when authenticated.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.IOSShowPreviewsSetting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum IOSShowPreviewsSetting {\n  NOT_SUPPORTED = -1,\n  NEVER = 0,\n  ALWAYS = 1,\n  WHEN_AUTHENTICATED = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Indeterminate Progress Indicator in Notifications\nDESCRIPTION: This snippet shows how to create an indeterminate progress state when the overall progress cannot be determined. The indeterminate flag creates an animating progress bar, ignoring any max and current values that may be set.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/progress-indicators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nnotifee.displayNotification({\n  android: {\n    progress: {\n      max: 10,\n      current: 5,\n      indeterminate: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Notifications by Timestamp\nDESCRIPTION: Shows how to sort notifications using custom timestamps, displaying them in chronological order.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/grouping-and-sorting.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New message',\n  body: 'New message from Sarah Lane',\n  android: {\n    channelId,\n    timestamp: Date.now() - 300000, // 5 minutes ago\n    showTimestamp: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Intent Identifiers Enumeration in TypeScript\nDESCRIPTION: Enumerates all possible iOS intent identifiers that can be used with Siri. Includes constants for workout management, call handling, messaging, car settings, payment operations, and media playback. Each identifier is assigned a unique numeric value.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.IOSIntentIdentifier.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum IOSIntentIdentifier {\n  START_AUDIO_CALL = 0,\n  START_VIDEO_CALL = 1,\n  SEARCH_CALL_HISTORY = 2,\n  SET_AUDIO_SOURCE_IN_CAR = 3,\n  SET_CLIMATE_SETTINGS_IN_CAR = 4,\n  SET_DEFROSTER_SETTINGS_IN_CAR = 5,\n  SET_SEAT_SETTINGS_IN_CAR = 6,\n  SET_PROFILE_IN_CAR = 7,\n  SAVE_PROFILE_IN_CAR = 8,\n  START_WORKOUT = 9,\n  PAUSE_WORKOUT = 10,\n  END_WORKOUT = 11,\n  CANCEL_WORKOUT = 12,\n  RESUME_WORKOUT = 13,\n  SET_RADIO_STATION = 14,\n  SEND_MESSAGE = 15,\n  SEARCH_FOR_MESSAGES = 16,\n  SET_MESSAGE_ATTRIBUTE = 17,\n  SEND_PAYMENT = 18,\n  REQUEST_PAYMENT = 19,\n  SEARCH_FOR_PHOTOS = 20,\n  START_PHOTO_PLAYBACK = 21,\n  LIST_RIDE_OPTIONS = 22,\n  REQUEST_RIDE = 23,\n  GET_RIDE_STATUS = 24\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - AndroidMessagingStyle\nDESCRIPTION: TypeScript interface definition for Android Messaging Style notifications. Includes properties for message type, person details, messages array, title override, and group settings. Used to create rich messaging-style notifications on Android devices.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidMessagingStyle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidMessagingStyle {\n  type: MESSAGING;\n  person: AndroidPerson;\n  messages: AndroidMessagingStyleMessage[];\n  title?: string;\n  group?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Weekly Trigger Notification\nDESCRIPTION: Example demonstrates how to update an existing trigger notification to repeat weekly using a specific notification ID.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/triggers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { TimestampTrigger, TriggerType } from '@notifee/react-native';\n\nasync function onCreateTriggerNotification() {\n  const date = new Date(Date.now());\n  date.setHours(11);\n  date.setMinutes(10);\n\n  const trigger: TimestampTrigger = {\n    type: TriggerType.TIMESTAMP,\n    timestamp: date.getTime(),\n    repeatFrequency: RepeatFrequency.WEEKLY,\n  };\n\n  await notifee.createTriggerNotification(\n    {\n      id: '123',\n      title: 'Meeting with Jane',\n      body: 'Today at 11:20am',\n      android: {\n        channelId: 'your-channel-id',\n      },\n    },\n    trigger,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TriggerNotification Interface in TypeScript\nDESCRIPTION: This code snippet defines the TriggerNotification interface with two properties: notification of type Notification and trigger of type Trigger. It represents a pending notification with its associated trigger information.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.TriggerNotification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TriggerNotification {\n  notification: Notification;\n  trigger: Trigger;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSNotificationInterruptionLevel Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the IOSNotificationInterruptionLevel type alias, which represents the possible interruption levels for iOS notifications. It is used to indicate the importance and delivery timing of a notification in the @notifee/react-native package.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/TypeAlias.IOSNotificationInterruptionLevel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype IOSNotificationInterruptionLevel = \"active\" | \"critical\" | \"passive\" | \"timeSensitive\"\n```\n\n----------------------------------------\n\nTITLE: Android Notification Properties Type Definitions in TypeScript\nDESCRIPTION: TypeScript interface definitions for Android notification configuration properties including sortKey, sound, style, tag, ticker, timeoutAfter, timestamp, vibrationPattern, and visibility settings.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationAndroid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationAndroid {\n  sortKey?: string;\n  sound?: string;\n  style?: AndroidBigPictureStyle | AndroidBigTextStyle | AndroidInboxStyle | AndroidMessagingStyle;\n  tag?: string;\n  ticker?: string;\n  timeoutAfter?: number;\n  timestamp?: number;\n  vibrationPattern?: number[];\n  visibility?: AndroidVisibility;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Critical Notification Volume Level for iOS\nDESCRIPTION: This example demonstrates how to control the sound volume level for critical notifications on iOS 12+. The criticalVolume property accepts a float value between 0.0 and 1.0, where 1.0 represents full volume.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/behaviour.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// iOS > 10\nnotifee.displayNotification({\n  title: 'ALERT!',\n  body: 'This is a critical notification!',\n  ios: {\n    critical: true,\n    sound: 'local.wav',\n    // iOS > 12\n    // play at 90% sound volume\n    criticalVolume: 0.9,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NONE Importance Level in TypeScript\nDESCRIPTION: Zero importance level (0) that prevents notifications from being shown, equivalent to disabled notifications in app settings.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidImportance.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nNONE: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Foreground Notification Presentation with Notifee\nDESCRIPTION: Shows how to customize the presentation of iOS notifications when the app is in the foreground using IOSForegroundPresentationOptions. This allows controlling whether notifications show as banners, in the notification list, with badges, and with sounds.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/appearance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nawait notifee.displayNotification({\n  title: 'Your account requires attention',\n  body: 'You are overdue payment on one or more of your accounts!',\n  ios: {\n    foregroundPresentationOptions: {\n      badge: true,\n      sound: true,\n      banner: true,\n      list: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidMessagingStyleMessage Interface in TypeScript\nDESCRIPTION: This code snippet defines the AndroidMessagingStyleMessage interface with properties for text, timestamp, and optional person information. It is used for constructing Messaging Style notifications on Android.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidMessagingStyleMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidMessagingStyleMessage {\n  text: string;\n  timestamp: number;\n  person?: AndroidPerson;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TASK_ON_HOME Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the TASK_ON_HOME flag (value 17) which corresponds to FLAG_ACTIVITY_TASK_ON_HOME in Android. This flag places the task of the activity on top of the home activity when the activity is brought to the front.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nTASK_ON_HOME: 17\n```\n\n----------------------------------------\n\nTITLE: Getting Current Badge Count with Notifee\nDESCRIPTION: Retrieves the current badge count displayed on the application icon.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.getBadgeCount().then(count => console.log('Current badge count: ', count));\n```\n\n----------------------------------------\n\nTITLE: Enabling Provisional Notifications in iOS\nDESCRIPTION: This snippet shows how to request provisional notification permissions, which allows notifications to be delivered quietly without requiring explicit user permission through a dialog.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait notifee.requestPermission({\n  provisional: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FORWARD_RESULT Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the FORWARD_RESULT flag (value 5) which corresponds to FLAG_ACTIVITY_FORWARD_RESULT in Android. This flag forwards the result of the activity launch to the parent of the activity being launched.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nFORWARD_RESULT: 5\n```\n\n----------------------------------------\n\nTITLE: Updating a Foreground Service Notification with Progress in JavaScript\nDESCRIPTION: Updates an existing foreground service notification to show progress. This snippet demonstrates how to maintain the same notification ID while updating its content, such as a progress indicator.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.registerForegroundService((notification) => {\n  return new Promise(() => {\n    // Example task subscriber\n    onTaskUpdate(async (task) => {\n      if (task.update) {\n        notifee.displayNotification({\n          id: notification.id,\n          body: notification.body,\n          android: {\n            ...notification.android,\n            progress: {\n              max: task.update.total,\n              current: task.update.current,\n            },\n          },\n        });\n      }\n\n      if (task.complete) {\n        await notifee.stopForegroundService()\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationIOS Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for iOS notification options. Includes properties for managing attachments, badge counts, categories, critical alerts, sounds, and other iOS-specific notification features.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationIOS.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationIOS {\n  attachments?: IOSNotificationAttachment[];\n  badgeCount?: null | number;\n  categoryId?: string;\n  communicationInfo?: IOSCommunicationInfo;\n  critical?: boolean;\n  criticalVolume?: number;\n  foregroundPresentationOptions?: IOSForegroundPresentationOptions;\n  interruptionLevel?: IOSNotificationInterruptionLevel;\n  launchImageName?: string;\n  sound?: string;\n  summaryArgument?: string;\n  summaryArgumentCount?: number;\n  targetContentId?: string;\n  threadId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MULTIPLE_TASK Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the MULTIPLE_TASK flag (value 3) which corresponds to FLAG_ACTIVITY_MULTIPLE_TASK in Android. This flag allows multiple instances of the same activity to be launched.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMULTIPLE_TASK: 3\n```\n\n----------------------------------------\n\nTITLE: Defining IOSForegroundPresentationOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSForegroundPresentationOptions interface with properties for customizing foreground notification presentation on iOS. It includes options for alert (deprecated), badge, banner, list, and sound.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSForegroundPresentationOptions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOSForegroundPresentationOptions {\n  alert?: boolean;\n  badge?: boolean;\n  banner?: boolean;\n  list?: boolean;\n  sound?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Notifee Debug Logs on Android\nDESCRIPTION: Terminal command to enable native Notifee logs in release mode on Android devices using ADB. This is useful for debugging notification issues in production builds.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/debugging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadb shell setprop log.tag.NOTIFEE DEBUG\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for React Native Android Project\nDESCRIPTION: This CMake snippet sets up the build configuration for a React Native Android project. It defines the project name, sets the minimum required CMake version, and includes the necessary React Native Android configuration file.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/android/app/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\n# Define the library name here.\nproject(example_appmodules)\n\n# This file includes all the necessary to let you build your application with the New Architecture.\ninclude(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidInput Interface in TypeScript\nDESCRIPTION: This snippet defines the AndroidInput interface with various properties for configuring notification input behavior on Android. It includes options for free-form input, generated replies, predefined choices, and placeholder text.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidInput.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidInput {\n  allowFreeFormInput?: boolean;\n  allowGeneratedReplies?: boolean;\n  choices?: string[];\n  editableChoices?: boolean;\n  placeholder?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Notification with Notifee in React Native\nDESCRIPTION: Shows how to cancel a notification using its ID. This function can be called to remove a notification from the device.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/displaying-a-notification.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function cancel(notificationId) {\n  await notifee.cancelNotification(notificationId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Trigger Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Trigger type alias as a union of TimestampTrigger and IntervalTrigger interfaces. It is used to specify different types of triggers for scheduling notifications in the Notifee React Native library.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/TypeAlias.Trigger.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Trigger = TimestampTrigger | IntervalTrigger;\n```\n\n----------------------------------------\n\nTITLE: Running Platform Tests\nDESCRIPTION: Commands for running tests on Android and iOS platforms.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn tests_rn:android:test\nyarn tests_rn:ios:test\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Dismiss Events\nDESCRIPTION: Sets up an event listener for notification dismissal actions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { EventType } from '@notifee/react-native';\n\nnotifee.onBackgroundEvent(async ({ type, detail, headless }) => {\n  if (type === EventType.DISMISSED) {\n    // Update remote API\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing Badge Count by Custom Value with Notifee\nDESCRIPTION: Increases the current badge count by a custom value (3 in this example) and retrieves the updated count.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Increment by 3\nnotifee\n  .incrementBadgeCount(3)\n  .then(() => notifee.getBadgeCount())\n  .then(count => console.log('Badge count incremented by 3 to: ', count));\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification to Only Alert Once During Updates\nDESCRIPTION: This snippet shows how to use the onlyAlertOnce property to ensure the notification only alerts the user the first time it's displayed. This is useful when frequently updating a notification to prevent multiple sounds or alerts.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/progress-indicators.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnotifee.displayNotification({\n  title: 'Updating',\n  android: {\n    onlyAlertOnce: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining IntervalTrigger Interface in TypeScript\nDESCRIPTION: This snippet defines the IntervalTrigger interface with properties for interval, optional timeUnit, and type. It is used to create triggers for repeating notifications at specified intervals.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IntervalTrigger.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IntervalTrigger {\n  interval: number;\n  timeUnit?: TimeUnit;\n  type: TriggerType.INTERVAL;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input Actions\nDESCRIPTION: Configures a notification action with text input capability for user responses.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New message',\n  body: 'You have a new message from Sarah!',\n  android: {\n    channelId: 'messages',\n    actions: [\n      {\n        title: 'Reply',\n        icon: 'https://my-cdn.com/icons/reply.png',\n        pressAction: {\n          id: 'reply',\n        },\n        input: true,\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Icon Type for Android Notification in React Native\nDESCRIPTION: This snippet shows how to set the badge icon type for an Android notification. It demonstrates using the small icon in badged mode, which affects how the notification appears in the app icon badge on supported launchers.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidBadgeIconType } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  body: 'Notification using small icon in badged mode',\n  android: {\n    channelId, // channel with badges enabled\n    badgeIconType: AndroidBadgeIconType.SMALL,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Visibility in Android with Notifee\nDESCRIPTION: Shows how to set notification visibility for secure lockscreens using channel-based and direct configuration approaches. Creates a secret visibility channel and displays a sensitive notification.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidVisibility } from '@notifee/react-native';\n\nconst channelId = await notifee.createChannel({\n  id: 'secret',\n  name: 'Secret Notifications',\n  visibility: AndroidVisibility.SECRET,\n});\n\nawait notifee.displayNotification({\n  title: 'Your payment information',\n  body: 'A payment has been made to another account',\n  android: {\n    channelId,\n    visibility: AndroidVisibility.SECRET,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ForegroundServiceTask Type in TypeScript\nDESCRIPTION: Type definition for a foreground service task that takes a notification parameter and returns a Promise<void>. Used in Android platforms to handle foreground service operations that require persistent notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/TypeAlias.ForegroundServiceTask.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nForegroundServiceTask: (notification: Notification) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component for Notification Press\nDESCRIPTION: Registers a custom React component to be launched when a notification is pressed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CustomComponent() {\n  return (\n    <View>\n      <Text>A custom component</Text>\n    </View>\n  );\n}\n\nAppRegistry.registerComponent('custom-component', () => CustomComponent);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Android Activity\nDESCRIPTION: Implements a custom Android Activity for notification interaction.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// com.awesome.app\nimport com.facebook.react.ReactActivity;\n\npublic class CustomActivity extends ReactActivity {\n  @Override\n  protected String getMainComponentName() {\n    return \"application\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Color in Android with Notifee\nDESCRIPTION: Demonstrates how to apply custom colors to Android notifications using either system-defined colors or custom hexadecimal values. The color affects icon tinting, action text, and other UI elements.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/appearance.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee, { AndroidColor } from '@notifee/react-native';\n\nnotifee.displayNotification({\n  android: {\n    color: AndroidColor.RED,\n    // or\n    color: '#E8210C', // red\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining IOSCommunicationInfoPerson Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSCommunicationInfoPerson interface with three properties: id, displayName, and an optional avatar. It is used to structure person information for iOS communication notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSCommunicationInfoPerson.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IOSCommunicationInfoPerson {\n    id: string;\n    displayName: string;\n    avatar?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSInput Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSInput interface with two optional properties: buttonText and placeholderText. These properties allow customization of the input button and placeholder text in iOS notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSInput.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOSInput {\n    buttonText?: string;\n    placeholderText?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for AndroidChannel\nDESCRIPTION: Interface definition for Android notification channels with properties controlling notification behavior such as badges, DND bypass, lights, sound, vibration, and visibility settings. Each property includes detailed type information and documentation about its purpose and limitations.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidChannel.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidChannel {\n    badge?: boolean;\n    bypassDnd?: boolean;\n    description?: string;\n    groupId?: string;\n    id: string;\n    importance?: AndroidImportance;\n    lightColor?: string;\n    lights?: boolean;\n    name: string;\n    sound?: string;\n    soundURI?: string;\n    vibration?: boolean;\n    vibrationPattern?: number[];\n    visibility?: AndroidVisibility;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Notifications by Custom Keys\nDESCRIPTION: Demonstrates how to implement custom sorting of notifications using sortKey property, which overrides timestamp-based sorting.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/grouping-and-sorting.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New message',\n  body: 'New message from Sarah Lane',\n  android: {\n    channelId,\n    timestamp: Date.now() - 300000, // 5 minutes ago\n    showTimestamp: true,\n    sortKey: '1',\n  },\n});\n\nnotifee.displayNotification({\n  title: 'New message',\n  body: 'New message from John Doe',\n  android: {\n    channelId,\n    timestamp: Date.now() - 480000, // 8 minutes ago\n    showTimestamp: true,\n    sortKey: '2',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Full-Screen Intent Permission in Android Manifest\nDESCRIPTION: This XML snippet shows how to add the required permission for using full-screen intents in the AndroidManifest.xml file.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationFullScreenAction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.USE_FULL_SCREEN_INTENT\" />\n```\n\n----------------------------------------\n\nTITLE: Defining IOSCommunicationInfo Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSCommunicationInfo interface with properties for iOS communication notifications. It includes optional fields for body, group name, and group avatar, as well as required fields for conversation ID and sender information.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSCommunicationInfo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IOSCommunicationInfo {\n  conversationId: string;\n  body?: string;\n  groupName?: string;\n  groupAvatar?: string;\n  sender: IOSCommunicationInfoPerson;\n}\n```\n\n----------------------------------------\n\nTITLE: AndroidPerson Interface Definition in TypeScript\nDESCRIPTION: Interface definition for AndroidPerson that describes a person shown in notifications. Contains properties for person identification, display settings, and contact information. Used primarily with AndroidMessagingStyle notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidPerson.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidPerson {\n    name: string;\n    id?: string;\n    bot?: boolean;\n    important?: boolean;\n    icon?: string;\n    uri?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Count with Notifee\nDESCRIPTION: Sets a numerical badge count on the application icon. The value must be an integer greater than zero.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/badges.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.setBadgeCount(1).then(() => console.log('Badge count set!'));\n```\n\n----------------------------------------\n\nTITLE: Installing Notifee React Native Package\nDESCRIPTION: Command to install the Notifee React Native package using yarn package manager.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @notifee/react-native\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Placeholder and Button Text for iOS Notification Actions\nDESCRIPTION: Demonstrates how to customize the placeholder text and send button label for notification input actions, providing a more tailored user experience.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/interaction.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function setCategories() {\n  await notifee.setNotificationCategories([\n    {\n      id: 'message',\n      actions: [\n        {\n          id: 'reply',\n          title: 'Reply',\n          input: {\n            placeholderText: 'Send a message...',\n            buttonText: 'Send Now',\n          },\n        },\n      ],\n    },\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSNotificationPermissions Interface in TypeScript\nDESCRIPTION: This interface defines various notification permission properties for iOS, including alert, announcement, badge, carPlay, criticalAlert, provisional, and sound. Each property is optional and has a specific purpose in the iOS notification system.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSNotificationPermissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOSNotificationPermissions {\n  alert?: boolean;\n  announcement?: boolean;\n  badge?: boolean;\n  carPlay?: boolean;\n  criticalAlert?: boolean;\n  provisional?: boolean;\n  sound?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidNotificationSetting Enumeration in TypeScript\nDESCRIPTION: TypeScript enumeration defining the possible states of Android notification settings: NOT_SUPPORTED (-1) for unsupported devices, DISABLED (0) for user-disabled settings, and ENABLED (1) for enabled settings. This enumeration is returned by requestPermission and getNotificationSettings methods.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidNotificationSetting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum AndroidNotificationSetting {\n  NOT_SUPPORTED = -1,\n  DISABLED = 0,\n  ENABLED = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Sound on Android Notifications\nDESCRIPTION: Code examples showing how to set custom sound for notifications on Android, with different implementations for Android 8.0+ (via channel) and older versions (directly on notification).\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Android >= 8.0 (API level 26)\nnotifee.createChannel({\n  id: 'custom-sound',\n  name: 'Channel with custom sound',\n  sound: 'hollow',\n});\n\n// Android < 8.0 (API level 26)\nnotifee.displayNotification({\n  body: 'Custom sound',\n  android: {\n    sound: 'hollow',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - NativeAndroidChannelGroup\nDESCRIPTION: Interface extending AndroidChannelGroup that defines the structure of a native Android notification channel group. Contains properties for managing blocked status, channels list, description, ID, and name.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NativeAndroidChannelGroup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NativeAndroidChannelGroup extends AndroidChannelGroup {\n    blocked: boolean;\n    channels: NativeAndroidChannel[];\n    description?: string;\n    id: string;\n    name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSNotificationAttachment Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSNotificationAttachment interface with various properties for configuring iOS notification attachments. It includes optional properties for id, typeHint, thumbnailHidden, thumbnailClippingRect, thumbnailTime, and a required url property.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSNotificationAttachment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOSNotificationAttachment {\n  id?: string;\n  url: string;\n  typeHint?: string;\n  thumbnailHidden?: boolean;\n  thumbnailClippingRect?: IOSAttachmentThumbnailClippingRect;\n  thumbnailTime?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Cancel Behavior for Notifications\nDESCRIPTION: Shows how to prevent a notification from being automatically canceled when pressed by setting the autoCancel property to false.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait notifee.displayNotification({\n  title: 'Disable auto cancel',\n  android: {\n    autoCancel: false, // Defaults to true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DEFAULT Importance Level in TypeScript\nDESCRIPTION: Default importance level (3) that shows notification icon in statusbar and expanded state in notification shade.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidImportance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDEFAULT: 3\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationFullScreenAction Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the NotificationFullScreenAction interface with properties for id, launchActivity, launchActivityFlags, and mainComponent. It includes type definitions and platform-specific annotations.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NotificationFullScreenAction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationFullScreenAction {\n  id: string;\n  launchActivity?: string;\n  launchActivityFlags?: AndroidLaunchActivityFlag[];\n  mainComponent?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidBigTextStyle Interface in TypeScript for Notifee\nDESCRIPTION: TypeScript interface definition for Android Big Text Style notifications. This interface defines required properties like 'text' and 'type', as well as optional properties 'title' and 'summary' that can override the main notification values when expanded.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidBigTextStyle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    summary?: string;\n    text: string;\n    title?: string;\n    type: BIGTEXT;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Full-Screen Notification Configuration with Custom Components\nDESCRIPTION: Examples of advanced full-screen notification configuration using custom components or activities, and combining with foreground services.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  body: 'Full-screen notification',\n  android: {\n    fullScreenAction: {\n      // For custom component:\n      id: 'default',\n      mainComponent: 'custom-component',\n\n      // For Android Activity other than the default:\n      id: 'full-screen',\n      launchActivity: 'com.awesome.app.FullScreenActivity',\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  body: 'Full-screen notification',\n  android: {\n    fullScreenAction: {\n      id: 'default',\n    },\n    asForegroundService: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidGroupAlertBehavior Enum in TypeScript\nDESCRIPTION: This enumeration defines three behavior options for grouped notifications on Android: ALL (all notifications alert), SUMMARY (only summary notification alerts), and CHILDREN (only child notifications alert).\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidGroupAlertBehavior.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AndroidGroupAlertBehavior {\n  ALL = 0,\n  SUMMARY = 1,\n  CHILDREN = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Notification Category Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for iOS notification category configuration including actions, visibility settings, and CarPlay compatibility. The interface requires a unique ID and provides optional configuration for notification behavior and appearance.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSNotificationCategory.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOSNotificationCategory {\n  id: string;\n  actions?: IOSNotificationCategoryAction[];\n  allowAnnouncement?: boolean;\n  allowInCarPlay?: boolean;\n  hiddenPreviewsBodyPlaceholder?: string;\n  hiddenPreviewsShowSubtitle?: boolean;\n  hiddenPreviewsShowTitle?: boolean;\n  intentIdentifiers?: IOSIntentIdentifier[];\n  summaryFormat?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidProgress Interface in TypeScript\nDESCRIPTION: This code snippet defines the AndroidProgress interface with three optional properties: max, current, and indeterminate. It is used to set progress indicators for Android notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidProgress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidProgress {\n  max?: number;\n  current?: number;\n  indeterminate?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Component Press Action Configuration\nDESCRIPTION: Configures a notification to launch a custom component when pressed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New notification',\n  android: {\n    channelId,\n    pressAction: {\n      id: 'default',\n      mainComponent: 'custom-component',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SOUND Constant in AndroidDefaults Enum\nDESCRIPTION: Constant that enables sound alerts for notifications on Android devices below API Level 26.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidDefaults.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSOUND: 1\n```\n\n----------------------------------------\n\nTITLE: Managing Power Manager Settings for Android Notifications\nDESCRIPTION: This code retrieves information about the device's power manager and guides users to adjust their settings to prevent the app from being killed. It checks if the device has specific power management settings and provides navigation to those settings.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/background-restrictions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. get info on the device and the Power Manager settings\nconst powerManagerInfo = await notifee.getPowerManagerInfo();\nif (powerManagerInfo.activity) {\n  // 2. ask your users to adjust their settings\n  Alert.alert(\n      'Restrictions Detected',\n      'To ensure notifications are delivered, please adjust your settings to prevent the app from being killed',\n      [\n        // 3. launch intent to navigate the user to the appropriate screen\n        {\n          text: 'OK, open settings',\n          onPress: async () => await notifee.openPowerManagerSettings(),\n        },\n        {\n          text: \"Cancel\",\n          onPress: () => console.log(\"Cancel Pressed\"),\n          style: \"cancel\"\n        },\n      ],\n      { cancelable: false }\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidInboxStyle Interface in TypeScript\nDESCRIPTION: This snippet defines the AndroidInboxStyle interface with properties for lines, summary, title, and type. It's used to configure Inbox Style notifications on Android.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidInboxStyle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AndroidInboxStyle {\n  lines: string[];\n  summary?: string;\n  title?: string;\n  type: INBOX;\n}\n```\n\n----------------------------------------\n\nTITLE: AndroidBadgeIconType Enum Declaration\nDESCRIPTION: Enumeration defining the possible badge icon types for Android notifications. It includes NONE (0) for numerical badges only, SMALL (1) for using smallIcon as badge, and LARGE (2) for using largeIcon as badge.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidBadgeIconType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AndroidBadgeIconType {\n  NONE = 0,    // No badge is displayed, will always show as a number\n  SMALL = 1,   // Shows the badge as the notifications smallIcon\n  LARGE = 2    // Shows the badge as the notifications largeIcon (if available)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending FCM Messages with Node.js Firebase Admin SDK\nDESCRIPTION: Server-side code that uses the firebase-admin SDK to send multicast messages to multiple FCM tokens. The code initializes the Firebase Admin SDK and sends a simple data payload to all registered tokens fetched from a datastore.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Node.js\nvar admin = require('firebase-admin');\n\n// Initialize Firebase\nadmin.initializeApp({\n  credential: admin.credential.applicationDefault(),\n  databaseURL: 'https://<DATABASE_NAME>.firebaseio.com',\n});\n\nasync function sendMessage() {\n  // Fetch the tokens from an external datastore (e.g. database)\n  const tokens = await getTokensFromDatastore();\n\n  // Send a message to devices with the registered tokens\n  await admin.messaging().sendMulticast({\n    tokens, // ['token_1', 'token_2', ...]\n    data: { hello: 'world!' },\n  });\n}\n\n// Send messages to our users\nsendMessage();\n```\n\n----------------------------------------\n\nTITLE: Android Foreground Service Type Constants in TypeScript\nDESCRIPTION: TypeScript enumeration defining all possible foreground service types for Android notifications. Each constant represents a specific type of foreground service as defined in Android's documentation. Values are numeric flags that can be combined for services performing multiple types of operations.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidForegroundServiceType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AndroidForegroundServiceType {\n  FOREGROUND_SERVICE_TYPE_CAMERA = 64,\n  FOREGROUND_SERVICE_TYPE_CONNECTED_DEVICE = 16,\n  FOREGROUND_SERVICE_TYPE_DATA_SYNC = 1,\n  FOREGROUND_SERVICE_TYPE_HEALTH = 256,\n  FOREGROUND_SERVICE_TYPE_LOCATION = 8,\n  FOREGROUND_SERVICE_TYPE_MANIFEST = -1,\n  FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK = 2,\n  FOREGROUND_SERVICE_TYPE_MEDIA_PROCESSING = 8192,\n  FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION = 32,\n  FOREGROUND_SERVICE_TYPE_MICROPHONE = 128,\n  FOREGROUND_SERVICE_TYPE_PHONE_CALL = 4,\n  FOREGROUND_SERVICE_TYPE_REMOTE_MESSAGING = 512,\n  FOREGROUND_SERVICE_TYPE_SHORT_SERVICE = 2048,\n  FOREGROUND_SERVICE_TYPE_SPECIAL_USE = 1073741824,\n  FOREGROUND_SERVICE_TYPE_SYSTEM_EXEMPTED = 1024\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreground Service Types in AndroidManifest.xml\nDESCRIPTION: Adds foreground service type declarations to the AndroidManifest.xml file to request access to device hardware like location, camera, or microphone for use within the service.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/foreground-service.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\">\n  <application>\n    ...\n    <!-- For example, with one service type -->\n    <service android:name=\"app.notifee.core.ForegroundService\" android:foregroundServiceType=\"location\" tools:replace=\"android:foregroundServiceType\" />\n\n     <!-- Or, with multiple service types -->\n    <service android:name=\"app.notifee.core.ForegroundService\" android:foregroundServiceType=\"location|camera|microphone\" tools:replace=\"android:foregroundServiceType\" />\n  </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidCategory Enumeration in TypeScript for React Native Notifications\nDESCRIPTION: TypeScript enumeration that defines different categories for Android notifications. These categories help the device understand the notification's purpose and can be used for ranking and filtering but have no visual impact on the notification display.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidCategory.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AndroidCategory {\n  ALARM = \"alarm\",\n  CALL = \"call\",\n  EMAIL = \"email\",\n  ERROR = \"error\",\n  EVENT = \"event\",\n  MESSAGE = \"msg\",\n  NAVIGATION = \"navigation\",\n  PROGRESS = \"progress\",\n  PROMO = \"promo\",\n  RECOMMENDATION = \"recommendation\",\n  REMINDER = \"reminder\",\n  SERVICE = \"service\",\n  SOCIAL = \"social\",\n  STATUS = \"status\",\n  SYSTEM = \"sys\", // Avoid using - generally used by the system.\n  TRANSPORT = \"transport\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SDK Versions in build.gradle\nDESCRIPTION: Required modifications to Android build.gradle file to set minimum compileSdkVersion and targetSdkVersion for Notifee compatibility. compileSdkVersion must be at least 34, and targetSdkVersion must be at least 33 when requesting permissions on Android 13.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n  ext {\n    compileSdkVersion = 34 // at least 34\n    targetSdkVersion = 33 // If requesting permission on Android 13 via requestPermission, at least 33 \n    ... \n } \n ... \n}\n```\n\n----------------------------------------\n\nTITLE: Defining IOSNotificationSetting Enumeration in TypeScript\nDESCRIPTION: This enumeration represents notification settings for iOS apps. It includes NOT_SUPPORTED (-1), DISABLED (0), and ENABLED (1) states. The value is greater than 0 if the setting is enabled.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.IOSNotificationSetting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum IOSNotificationSetting {\n  NOT_SUPPORTED = -1,\n  DISABLED = 0,\n  ENABLED = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NativeError Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for NativeError that extends the Error class. It includes properties for error codes, messages, and native platform-specific error information used in the Notifee React Native library.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.NativeError.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NativeError extends Error {\n    readonly code: string;          // Error code, e.g. 'invalid-parameter'\n    readonly message: string;       // Error message\n    name: string;                  // Inherited from Error\n    readonly nativeErrorCode: string | number;    // The native returned error code\n    readonly nativeErrorMessage: string;          // The native returned error message\n    stack?: string;               // Optional stack trace\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Android Notification Flags Enum in TypeScript\nDESCRIPTION: Enumeration defining special flags for Android notifications. Includes FLAG_INSISTENT (4) for repeating audio until notification cancellation, and FLAG_NO_CLEAR (32) for preventing notification removal via Clear all button.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidFlags.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AndroidFlags {\n  FLAG_INSISTENT = 4,\n  FLAG_NO_CLEAR = 32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidColor Enumeration in TypeScript\nDESCRIPTION: This code snippet defines the AndroidColor enumeration with 23 color constants. Each constant is assigned a string value representing the color name. This enumeration is used for specifying colors in Android Notifications within the @notifee/react-native package.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidColor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum AndroidColor {\n  RED = \"red\",\n  BLUE = \"blue\",\n  GREEN = \"green\",\n  BLACK = \"black\",\n  WHITE = \"white\",\n  CYAN = \"cyan\",\n  MAGENTA = \"magenta\",\n  YELLOW = \"yellow\",\n  LIGHTGRAY = \"lightgray\",\n  DARKGRAY = \"darkgray\",\n  GRAY = \"gray\",\n  LIGHTGREY = \"lightgrey\",\n  DARKGREY = \"darkgrey\",\n  AQUA = \"aqua\",\n  FUCHSIA = \"fuchsia\",\n  LIME = \"lime\",\n  MAROON = \"maroon\",\n  NAVY = \"navy\",\n  OLIVE = \"olive\",\n  PURPLE = \"purple\",\n  SILVER = \"silver\",\n  TEAL = \"teal\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Device Sounds with react-native-notification-sounds\nDESCRIPTION: Example of how to retrieve and use system notification sounds from a device using the react-native-notification-sounds package with Notifee.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NotificationSounds from 'react-native-notification-sounds';\nimport notifee from '@notifee/react-native';\n\n// Retrieve a list of system notification sounds\nconst soundsList = await NotificationSounds.getNotifications('notification');\n\nawait notifee.createChannel({\n       id: \"custom-sound\",\n       name: \"System Sound\",\n       // Set sound to Aldebaran\n       // (url: \"content://media/internal/audio/media/30\")\n       sound: soundsList[0].url,\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining NOT_DETERMINED Authorization Status in TypeScript\nDESCRIPTION: Defines the NOT_DETERMINED (-1) status for iOS platforms when the user hasn't yet chosen whether to allow notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AuthorizationStatus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNOT_DETERMINED: -1\n```\n\n----------------------------------------\n\nTITLE: Defining TimeUnit Enumeration for Interval Triggers in TypeScript\nDESCRIPTION: This enumeration defines the different units of time that can be used with IntervalTrigger.timeUnit. It includes SECONDS, MINUTES, HOURS, and DAYS as options for specifying time intervals.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.TimeUnit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum TimeUnit {\n  SECONDS = \"SECONDS\",\n  MINUTES = \"MINUTES\",\n  HOURS = \"HOURS\",\n  DAYS = \"DAYS\"\n}\n```\n\n----------------------------------------\n\nTITLE: AlarmType Enumeration Definition in TypeScript\nDESCRIPTION: Defines the various alarm types available for TimestampTrigger.alarmManager.type. Includes basic SET (0), SET_AND_ALLOW_WHILE_IDLE (1), SET_EXACT (2), SET_EXACT_AND_ALLOW_WHILE_IDLE (3), and SET_ALARM_CLOCK (4).\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AlarmType.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AlarmType {\n  SET = 0,\n  SET_AND_ALLOW_WHILE_IDLE = 1,\n  SET_EXACT = 2,\n  SET_EXACT_AND_ALLOW_WHILE_IDLE = 3,\n  SET_ALARM_CLOCK = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Category Summary Text in Notifee\nDESCRIPTION: Demonstrates how to customize the summary text for stacked notifications using summaryFormat, summaryArgument, and summaryArgumentCount properties for iOS devices.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/categories.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport notifee from '@notifee/react-native';\n\nawait notifee.setNotificationCategories([\n  {\n    id: 'post',\n    summaryFormat: 'You have %u+ unread messages from %@.',\n    actions: [\n      {\n        id: 'reply',\n        title: 'Reply',\n      },\n    ],\n  },\n]);\n\nnotifee.displayNotification({\n  title: 'New post from John',\n  body: 'Hey everyone! Check out my new blog post on my website.',\n  ios: {\n    categoryId: 'post',\n    summaryArgument: 'John',\n    summaryArgumentCount: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RETAIN_IN_RECENTS Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the RETAIN_IN_RECENTS flag (value 18) which corresponds to FLAG_ACTIVITY_RETAIN_IN_RECENTS in Android. This flag indicates that the entry for this activity should remain in recents even after the activity is finished.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nRETAIN_IN_RECENTS: 18\n```\n\n----------------------------------------\n\nTITLE: Defining REORDER_TO_FRONT Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the REORDER_TO_FRONT flag (value 14) which corresponds to FLAG_ACTIVITY_REORDER_TO_FRONT in Android. This flag moves the existing instance of the activity to the front if it exists.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nREORDER_TO_FRONT: 14\n```\n\n----------------------------------------\n\nTITLE: Defining LAUNCH_ADJACENT Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the LAUNCH_ADJACENT flag (value 19) which corresponds to FLAG_ACTIVITY_LAUNCH_ADJACENT in Android. This flag indicates that the activity should be launched in adjacent task in split-screen mode.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nLAUNCH_ADJACENT: 19\n```\n\n----------------------------------------\n\nTITLE: Defining NO_USER_ACTION Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the NO_USER_ACTION flag (value 13) which corresponds to FLAG_ACTIVITY_NO_USER_ACTION in Android. This flag indicates that this activity is not being launched in response to a user action.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nNO_USER_ACTION: 13\n```\n\n----------------------------------------\n\nTITLE: Defining HIGH Importance Level in TypeScript\nDESCRIPTION: Highest importance level (4) for urgent notifications that appear on top of applications and require immediate attention.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidImportance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nHIGH: 4\n```\n\n----------------------------------------\n\nTITLE: Defining MIN Importance Level in TypeScript\nDESCRIPTION: Minimum importance level (1) where notifications don't show in statusbar and appear collapsed at bottom of notification shade.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidImportance.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nMIN: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Interval Trigger for Notifications in React Native\nDESCRIPTION: This code sets up an interval trigger for notifications, configured to trigger every 60 seconds.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* Interval */\nconst interval = 60;\n\n/* Trigger */\nconst trigger = {\n    timeUnit: TimeUnit.SECONDS,\n    type: TriggerType.INTERVAL,\n    interval: interval,\n  }\n```\n\n----------------------------------------\n\nTITLE: Customizing Trigger Notification in React Native\nDESCRIPTION: This code demonstrates how to select and set a specific trigger type for notifications in the Notifee example project.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// const triggerType = triggers.timestamp;\nconst triggerType = triggers.interval;\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Plugin for Notifee Compatibility\nDESCRIPTION: JavaScript configuration to add to the Expo config (app.json or app.config.js) for setting the required Android SDK versions using the expo-build-properties plugin.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"name\": \"my app\",\n  \"plugins\": [\n    [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"compileSdkVersion\": 34, // at least 34\n            \"targetSdkVersion\": 33 // Only needed if requesting permission on Android 13 via requestPermission, at least 33 \n          },\n        },\n      ],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LOW Importance Level in TypeScript\nDESCRIPTION: Low importance level (2) that shows icon in statusbar but without alerting the user. On iOS, notifications won't display but remain visible in notification center.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidImportance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nLOW: 2\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permissions in React Native iOS App\nDESCRIPTION: This code snippet shows how to request user permissions for displaying notifications on iOS using useEffect hook.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/example/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  useEffect(() => {\n    (async () => {\n      await requestUserPermission();\n    })();\n  }, []);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Export in TypeScript for Notifee React Native Module\nDESCRIPTION: Declares the default export constant variable with ModuleWithStatics type, located in the main index.ts file of the react-native package.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Variable.default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst default: ModuleWithStatics\n```\n\n----------------------------------------\n\nTITLE: Custom Activity Press Action Configuration\nDESCRIPTION: Configures a notification to launch a custom activity when pressed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New notification',\n  android: {\n    channelId,\n    pressAction: {\n      id: 'default',\n      launchActivity: 'com.awesome.app.CustomActivity',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AUTHORIZED Authorization Status in TypeScript\nDESCRIPTION: Defines the AUTHORIZED (1) status when the app is authorized to create notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AuthorizationStatus.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nAUTHORIZED: 1\n```\n\n----------------------------------------\n\nTITLE: MainActivity Configuration for Custom Component\nDESCRIPTION: Overrides the MainActivity configuration to handle custom component routing.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/interaction.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.invertase.testing;\nimport com.facebook.react.ReactActivity;\n\n// Import the NotifeeApiModule\nimport io.invertase.notifee.NotifeeApiModule;\n\npublic class MainActivity extends ReactActivity {\n  @Override\n  protected String getMainComponentName() {\n    return NotifeeApiModule.getMainComponent(\"app\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DENIED Authorization Status in TypeScript\nDESCRIPTION: Defines the DENIED (0) status when the app is not authorized to create notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AuthorizationStatus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDENIED: 0\n```\n\n----------------------------------------\n\nTITLE: Sending Partial Notification Data via FCM (Server-Side)\nDESCRIPTION: Server-side code that sends a partial data payload via FCM, with just the essential information needed for the client to construct a full notification. Note that all values must be strings in FCM data payloads.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Node.JS\nawait admin.messaging().sendMulticast({\n  tokens,\n  data: {\n    type: 'order_shipped',\n    timestamp: Date.now().toString(), // values must be strings!\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Child Notifications to Group\nDESCRIPTION: Shows how to add additional notifications to an existing group by using the same groupId.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/grouping-and-sorting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  title: 'New Email',\n  body: 'Tap to open your email.',\n  subtitle: 'Unread',\n  android: {\n    channelId,\n    groupId: '123',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining PROVISIONAL Authorization Status in TypeScript\nDESCRIPTION: Defines the PROVISIONAL (2) status for iOS 12 and above when the app is authorized to post non-interrupting notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AuthorizationStatus.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPROVISIONAL: 2\n```\n\n----------------------------------------\n\nTITLE: Defining TimestampTriggerAlarmManager Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TimestampTriggerAlarmManager that includes an optional deprecated allowWhileIdle boolean property and an optional type property of AlarmType enum.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.TimestampTriggerAlarmManager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimestampTriggerAlarmManager {\n    allowWhileIdle?: boolean; // deprecated\n    type?: AlarmType;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FCM Data Messages in React Native\nDESCRIPTION: Handles incoming FCM data messages by accessing the payload data and logging it. This example shows how to extract and use data from the FCM message object in the message handler function.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/integrations/fcm.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onMessageReceived(message) {\n  console.log(`Hello ${message.data.hello}`); // Hello world!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BROUGHT_TO_FRONT Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the BROUGHT_TO_FRONT flag (value 8) which corresponds to FLAG_ACTIVITY_BROUGHT_TO_FRONT in Android. This flag indicates that the activity is being brought to the front, not newly launched.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nBROUGHT_TO_FRONT: 8\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidNotificationSettings Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Android notification settings that includes an alarm property which determines trigger creation capabilities. The alarm setting is particularly relevant for Android 12 (API 31) and above.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.AndroidNotificationSettings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidNotificationSettings {\n    alarm: AndroidNotificationSetting;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLEAR_WHEN_TASK_RESET Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the CLEAR_WHEN_TASK_RESET flag (value 11) which corresponds to FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET in Android. This flag clears the activity stack when the task is reset.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nCLEAR_WHEN_TASK_RESET: 11\n```\n\n----------------------------------------\n\nTITLE: Defining SINGLE_TOP Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the SINGLE_TOP flag (value 1) which corresponds to FLAG_ACTIVITY_SINGLE_TOP in Android. This flag indicates that if the activity being launched is already running at the top of the stack, a new instance should not be created.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSINGLE_TOP: 1\n```\n\n----------------------------------------\n\nTITLE: Defining InitialNotification Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for InitialNotification, containing optional input property for Android API Level >= 20, notification object, and pressAction object. Used for handling app launch via notification interactions.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.InitialNotification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InitialNotification {\n    input?: string;\n    notification: Notification;\n    pressAction: NotificationPressAction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LAUNCHED_FROM_HISTORY Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the LAUNCHED_FROM_HISTORY flag (value 10) which corresponds to FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY in Android. This flag indicates that the activity is being launched from the history.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nLAUNCHED_FROM_HISTORY: 10\n```\n\n----------------------------------------\n\nTITLE: Defining MATCH_EXTERNAL Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the MATCH_EXTERNAL flag (value 20) which corresponds to FLAG_ACTIVITY_MATCH_EXTERNAL in Android. This flag indicates that the activity launch should match external activities.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nMATCH_EXTERNAL: 20\n```\n\n----------------------------------------\n\nTITLE: Android Notification Style Enumeration Definition\nDESCRIPTION: Defines an enumeration of available Android notification styles including BIGPICTURE, BIGTEXT, INBOX, and MESSAGING. Each style is assigned a numeric value from 0-3.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidStyle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AndroidStyle {\n  BIGPICTURE = 0,\n  BIGTEXT = 1,\n  INBOX = 2,\n  MESSAGING = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NEW_TASK Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the NEW_TASK flag (value 2) which corresponds to FLAG_ACTIVITY_NEW_TASK in Android. This flag launches the activity as a new task on the activity stack.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nNEW_TASK: 2\n```\n\n----------------------------------------\n\nTITLE: Defining PREVIOUS_IS_TOP Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the PREVIOUS_IS_TOP flag (value 6) which corresponds to FLAG_ACTIVITY_PREVIOUS_IS_TOP in Android. This flag indicates that the previous activity should be considered the top activity for the purposes of handling this intent.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPREVIOUS_IS_TOP: 6\n```\n\n----------------------------------------\n\nTITLE: Defining NO_HISTORY Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the NO_HISTORY flag (value 0) which corresponds to FLAG_ACTIVITY_NO_HISTORY in Android. This flag indicates that the activity should not be kept in the activity stack.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNO_HISTORY: 0\n```\n\n----------------------------------------\n\nTITLE: Using AndroidVisibility Enumeration in TypeScript\nDESCRIPTION: The AndroidVisibility enum defines three visibility levels for Android notifications: PRIVATE (0) shows notifications but conceals sensitive info on secure lockscreens, PUBLIC (1) shows notifications entirely on all lockscreens, and SECRET (-1) hides notifications completely on secure lockscreens.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidVisibility.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum AndroidVisibility {\n  PRIVATE = 0,  // Show notification but conceal sensitive info on secure lockscreens\n  PUBLIC = 1,   // Show notification entirely on all lockscreens\n  SECRET = -1   // Do not reveal any part of notification on secure lockscreens\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Notifee Repository\nDESCRIPTION: Commands to clone the Notifee repository and navigate to its directory\nSOURCE: https://github.com/invertase/notifee/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/invertase/notifee.git\ncd notifee/\n```\n\n----------------------------------------\n\nTITLE: Defining NEW_DOCUMENT Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the NEW_DOCUMENT flag (value 12) which corresponds to FLAG_ACTIVITY_NEW_DOCUMENT in Android. This flag launches the activity as a new document in the recents screen.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nNEW_DOCUMENT: 12\n```\n\n----------------------------------------\n\nTITLE: Defining ALL Constant in AndroidDefaults Enum\nDESCRIPTION: Constant that enables all possible notification alert options on Android devices below API Level 26.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidDefaults.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nALL: -1\n```\n\n----------------------------------------\n\nTITLE: Version Number References Markdown\nDESCRIPTION: Version references for Notifee releases using GitHub comparison links and commit references.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/release-notes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[9.1.8](https://github.com/invertase/notifee/compare/@notifee/react-native@9.1.7...@notifee/react-native@9.1.8)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Mock for Notifee\nDESCRIPTION: JavaScript code to mock Notifee module in Jest tests using the provided jest-mock package.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('@notifee/react-native', () => require('@notifee/react-native/jest-mock'))\n```\n\n----------------------------------------\n\nTITLE: Defining CLEAR_TASK Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the CLEAR_TASK flag (value 16) which corresponds to FLAG_ACTIVITY_CLEAR_TASK in Android. This flag clears all existing activities from the task when launching the activity.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nCLEAR_TASK: 16\n```\n\n----------------------------------------\n\nTITLE: Commit Reference Links Markdown\nDESCRIPTION: Git commit reference links used in changelog entries.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/release-notes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[a799167](https://github.com/invertase/notifee/commit/a79916748f53ea7cdd66d60ba9054472aabc050b)\n```\n\n----------------------------------------\n\nTITLE: Jest Transform Ignore Patterns Configuration\nDESCRIPTION: Configuration to exclude Notifee and related packages from Jest transformations.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntransformIgnorePatterns: [\n    'node_modules/(?!(jest-)?react-native|@react-native|@notifee)'\n]\n```\n\n----------------------------------------\n\nTITLE: Defining CLEAR_TOP Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the CLEAR_TOP flag (value 4) which corresponds to FLAG_ACTIVITY_CLEAR_TOP in Android. This flag clears all activities on top of the target activity in the stack.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nCLEAR_TOP: 4\n```\n\n----------------------------------------\n\nTITLE: Running Validation Scripts\nDESCRIPTION: Commands for running linting and type checking on project files.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn validate:all:js\nyarn validate:all:ts\nyarn validate:all:flow\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Packager\nDESCRIPTION: Command to start the React Native packager for development\nSOURCE: https://github.com/invertase/notifee/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn tests_rn:packager\n```\n\n----------------------------------------\n\nTITLE: Defining LIGHTS Constant in AndroidDefaults Enum\nDESCRIPTION: Constant that enables LED light alerts for notifications on Android devices below API Level 26.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidDefaults.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nLIGHTS: 4\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Compiler\nDESCRIPTION: Command to run TypeScript compiler in watch mode for react-native submodule changes\nSOURCE: https://github.com/invertase/notifee/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:rn:watch\n```\n\n----------------------------------------\n\nTITLE: Defining VIBRATE Constant in AndroidDefaults Enum\nDESCRIPTION: Constant that enables vibration alerts for notifications on Android devices below API Level 26.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidDefaults.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nVIBRATE: 2\n```\n\n----------------------------------------\n\nTITLE: Defining IOSAttachmentThumbnailClippingRect Interface in TypeScript\nDESCRIPTION: This code snippet defines the IOSAttachmentThumbnailClippingRect interface with four number properties: x, y, width, and height. These properties are used to specify the clipping rectangle for an image thumbnail in iOS notifications.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.IOSAttachmentThumbnailClippingRect.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IOSAttachmentThumbnailClippingRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EXCLUDE_FROM_RECENTS Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the EXCLUDE_FROM_RECENTS flag (value 7) which corresponds to FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS in Android. This flag excludes the activity from being listed in the recently launched activities.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nEXCLUDE_FROM_RECENTS: 7\n```\n\n----------------------------------------\n\nTITLE: Defining RESET_TASK_IF_NEEDED Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the RESET_TASK_IF_NEEDED flag (value 9) which corresponds to FLAG_ACTIVITY_RESET_TASK_IF_NEEDED in Android. This flag resets the task to its initial state if needed.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nRESET_TASK_IF_NEEDED: 9\n```\n\n----------------------------------------\n\nTITLE: Defining NO_ANIMATION Flag in AndroidLaunchActivityFlag Enumeration (TypeScript)\nDESCRIPTION: Declaration of the NO_ANIMATION flag (value 15) which corresponds to FLAG_ACTIVITY_NO_ANIMATION in Android. This flag launches the activity without animation.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Enumeration.AndroidLaunchActivityFlag.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nNO_ANIMATION: 15\n```\n\n----------------------------------------\n\nTITLE: Installing Apple Simulator Utils\nDESCRIPTION: Commands for installing Apple Simulator Utils via Homebrew, which is a required dependency for iOS testing.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap wix/brew\nbrew install wix/brew/applesimutils\n```\n\n----------------------------------------\n\nTITLE: Detox Test Notification Payload Example\nDESCRIPTION: Example of a notification payload structure required for Detox testing with Notifee, including iOS-specific configuration.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  title: 'test',\n  body: 'Body',\n  payload: {\n    __notifee_notification: {\n      ios: {\n        foregroundPresentationOptions: {\n          banner: true,\n          list: true,\n        },\n      },\n      data: {}\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting React Native Packager\nDESCRIPTION: Command to start the React Native packager specifically for testing.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn tests_rn:packager:jet\n```\n\n----------------------------------------\n\nTITLE: Building Native Applications\nDESCRIPTION: Commands for building the native applications for Android and iOS platforms.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn tests_rn:android:build\nyarn tests_rn:ios:build\n```\n\n----------------------------------------\n\nTITLE: Jest Error Example for Notifee Native Module\nDESCRIPTION: Example of the error message shown when Notifee native module is not properly mocked in Jest tests.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n ● Test suite failed to run\n\n    Notifee native module not found.\n\n      59 |     this._nativeModule = NativeModules[this._moduleConfig.nativeModuleName];\n      60 |     if (this._nativeModule == null) {\n    > 61 |       throw new Error('Notifee native module not found.');\n         |             ^\n      62 |     }\n      63 |\n      64 |     return this._nativeModule;\n```\n\n----------------------------------------\n\nTITLE: Adding Notifee Extension to Podfile\nDESCRIPTION: This Ruby code snippet shows how to add the Notifee extension to the Podfile for iOS projects using CocoaPods.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n$NotifeeExtension = true\n\ntarget 'NotifeeNotificationService' do\n  pod 'RNNotifeeCore', :path => '../node_modules/@notifee/react-native/RNNotifeeCore.podspec'\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Test Project Dependencies\nDESCRIPTION: Commands to install project dependencies and setup iOS pods.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn tests_rn:ios:pod:install\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Dependencies\nDESCRIPTION: Commands to clean all node_modules and build folders for a fresh start.\nSOURCE: https://github.com/invertase/notifee/blob/main/tests_react_native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lerna:clean\nyarn build:all:clean\n```\n\n----------------------------------------\n\nTITLE: Event Interface Definition in TypeScript\nDESCRIPTION: Interface definition for Notifee events that includes event type and detail properties. The Event interface is used to handle notification events and contains the event type and detailed event information.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/reference/Interface.Event.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Event {\n  type: EventType;\n  detail: EventDetail;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ongoing Notifications That Cannot Be Dismissed\nDESCRIPTION: Demonstrates how to create ongoing notifications that cannot be dismissed by users and must be programmatically canceled.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/android/behaviour.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnotifee.displayNotification({\n  body: 'Ongoing notification',\n  android: {\n    ongoing: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using NotifeeExtensionHelper in Notification Service\nDESCRIPTION: This Objective-C code snippet demonstrates how to use the NotifeeExtensionHelper to populate notification content in the NotificationService.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/ios/remote-notification-support.mdx#2025-04-22_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\n[NotifeeExtensionHelper populateNotificationContent:request\n                withContent: self.bestAttemptContent\n                withContentHandler:contentHandler];\n```\n\n----------------------------------------\n\nTITLE: Running Validation Commands\nDESCRIPTION: Commands to run ESLint and type checks on project files\nSOURCE: https://github.com/invertase/notifee/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn validate:all:js\nyarn validate:all:ts\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all project dependencies using Yarn\nSOURCE: https://github.com/invertase/notifee/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Links Markdown\nDESCRIPTION: GitHub issue reference links used in changelog entries.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/react-native/release-notes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#1176](https://github.com/invertase/notifee/issues/1176)\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release\nDESCRIPTION: Commands to create a GitHub release using the gh CLI tool\nSOURCE: https://github.com/invertase/notifee/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TAGNAME=`git tag --list|sort -r|head -1`\ngh release create ${TAGNAME} --title \"${TAGNAME}\" --notes \"[Release Notes](https://github.com/invertase/notifee/blob/main/docs/react-native/release-notes.mdx)\"\n```\n\n----------------------------------------\n\nTITLE: Documentation TODO Placeholder\nDESCRIPTION: A markdown TODO placeholder indicating pending documentation for the Notifee Flutter integration.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/flutter/packages/notifee/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Notifee - Flutter\\n\\nTODO\n```\n\n----------------------------------------\n\nTITLE: Referencing Notifee Package in Markdown\nDESCRIPTION: This code snippet provides a markdown link to the Notifee package on pub.dev. It directs users to the main Notifee package for actual usage.\nSOURCE: https://github.com/invertase/notifee/blob/main/packages/flutter/packages/notifee_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[`notifee`](https://pub.dev/packages/notifee)\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Notifee React Native Overview Page\nDESCRIPTION: This YAML snippet specifies a redirect to the React Native overview page for Notifee documentation. It uses a simple key-value pair to define the redirection target.\nSOURCE: https://github.com/invertase/notifee/blob/main/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nredirect: \"/react-native/overview\"\n---\n```"
  }
]