[
  {
    "owner": "prismarinejs",
    "repo": "mineflayer",
    "content": "TITLE: Using Mineflayer Bot Functions\nDESCRIPTION: Demonstration of common bot functions for interacting with the Minecraft world, such as finding blocks, chatting, and moving.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Find nearby blocks\nconst blocks = bot.findBlocks({\n  matching: bot.registry.blocksByName.diamond_ore.id,\n  maxDistance: 32,\n  count: 10\n});\n\n// Send a chat message\nbot.chat('Hello, world!');\n\n// Look at a specific point\nbot.lookAt(new Vec3(100, 65, 120));\n\n// Dig a block\nconst block = bot.blockAt(new Vec3(10, 20, 30));\nbot.dig(block);\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Events in Mineflayer\nDESCRIPTION: This snippet demonstrates how to listen for and handle chat events in a Mineflayer bot. It includes parameters for username, message, translation, JSON message, and regex matches.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"chat\" (username, message, translate, jsonMsg, matches)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Echo Bot with Mineflayer\nDESCRIPTION: JavaScript code snippet demonstrating how to create a simple Minecraft bot that echoes chat messages using Mineflayer.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n\nconst bot = mineflayer.createBot({\n  host: 'localhost', // minecraft server ip\n  username: 'Bot', // username to join as if auth is `offline`, else a unique identifier for this account. Switch if you want to change accounts\n  auth: 'microsoft' // for offline mode servers, you can set this to 'offline'\n  // port: 25565,              // set if you need a port that isn't 25565\n  // version: false,           // only set if you need a specific version or snapshot (ie: \"1.8.9\" or \"1.16.5\"), otherwise it's set automatically\n  // password: '12345678'      // set if you want to use password-based auth (may be unreliable). If specified, the `username` must be an email\n})\n\nbot.on('chat', (username, message) => {\n  if (username === bot.username) return\n  bot.chat(message)\n})\n\n// Log errors and kick reasons:\nbot.on('kicked', console.log)\nbot.on('error', console.log)\n```\n\n----------------------------------------\n\nTITLE: Listening to Mineflayer Bot Events\nDESCRIPTION: Example of how to listen to various bot events, such as entity spawning, block updates, and player actions.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbot.on('entitySpawn', (entity) => {\n  console.log('New entity spawned:', entity);\n});\n\nbot.on('blockUpdate', (oldBlock, newBlock) => {\n  console.log('Block updated from', oldBlock, 'to', newBlock);\n});\n\nbot.on('playerJoined', (player) => {\n  console.log('Player joined:', player.username);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Mineflayer Bot\nDESCRIPTION: This code snippet shows the function call to create a new Mineflayer bot with custom options. It's the entry point for initializing a bot instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmineflayer.createBot(options)\n```\n\n----------------------------------------\n\nTITLE: Accessing Bot Properties in Mineflayer\nDESCRIPTION: This snippet demonstrates how to access various properties of a Mineflayer bot, such as the game world, entities, and player information.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbot.world\nbot.entity\nbot.entities\nbot.username\nbot.spawnPoint\nbot.game.levelType\nbot.game.dimension\nbot.game.difficulty\nbot.game.gameMode\nbot.game.hardcore\nbot.game.maxPlayers\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Minecraft Realm with Mineflayer\nDESCRIPTION: JavaScript code snippet showing how to connect a Mineflayer bot to a Minecraft Realm using Microsoft authentication.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = mineflayer.createBot({\n  username: 'email@example.com', // minecraft username\n  realms: {\n    // This function is called with an array of Realms the account can join. It should return the one it wants to join.\n    pickRealm: (realms) => realms[0]\n  },\n  auth: 'microsoft'\n})\n```\n\n----------------------------------------\n\nTITLE: Placing Blocks with Mineflayer in JavaScript\nDESCRIPTION: Allows a bot to place a block next to a reference block in a specified direction. Returns a Promise that resolves when the server confirms block placement.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbot.placeBlock(referenceBlock, faceVector)\n```\n\n----------------------------------------\n\nTITLE: Installing Mineflayer via npm\nDESCRIPTION: Commands to install and update Mineflayer using npm package manager.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mineflayer\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm update\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Echo Bot with Mineflayer in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a basic Minecraft bot using Mineflayer. The bot connects to a server and echoes back any chat messages it receives, excluding its own messages.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tr/README_TR.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n\nconst bot = mineflayer.createBot({\n  host: 'localhost', // minecraft server ip\n  username: 'email@example.com', // minecraft username\n  password: '12345678' // minecraft password, comment out if you want to log into online-mode=false servers\n  // port: 25565,                // only set if you need a port that isn't 25565\n  // version: false,             // only set if you need a specific version or snapshot (ie: \"1.8.9\" or \"1.16.5\"), otherwise it's set automatically\n  // auth: 'mojang'              // only set if you need microsoft auth, then set this to 'microsoft'\n})\n\nbot.on('chat', (username, message) => {\n  if (username === bot.username) return\n  bot.chat(message)\n})\n\n// Log errors and kick reasons:\nbot.on('kicked', console.log)\nbot.on('error', console.log)\n```\n\n----------------------------------------\n\nTITLE: Mineflayer Bot Inventory Management\nDESCRIPTION: Examples of inventory-related functions in Mineflayer, including equipping items and crafting.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Equip an item\nbot.equip(item, 'hand');\n\n// Craft an item\nbot.craft(recipe, 1, craftingTable);\n\n// Open a container\nbot.openContainer(containerBlock);\n\n// Click a window slot\nbot.clickWindow(slot, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Activating Blocks with Mineflayer in JavaScript\nDESCRIPTION: Activates a block (e.g., opening doors, pressing buttons). Takes optional direction and cursor position parameters. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nbot.activateBlock(block, direction?: Vec3, cursorPos?: Vec3)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Chat Event with Complex Pattern in Mineflayer (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom chat event in a Mineflayer bot that parses and logs messages with a specific format using regular expressions.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nbot.chatAddPattern(\n  /^\\[(.+)\\] (\\S+) > (.+)$/,\n  'my_chat_event',\n  'Custom chat event'\n)\n\nconst logger = (rank, username, message) => {\n  console.log(`${username} said ${message}`)\n}\n\nbot.on('my_chat_event', logger)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mineflayer Bot Connection Options\nDESCRIPTION: Creates a Mineflayer bot with specified connection settings using an options object to define the host and port to connect to.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n\nconst options = {\n  host: 'localhost', // Change this to the ip you want.\n  port: 25565 // Change this to the port you want.\n}\n\nconst bot = mineflayer.createBot(options)\n```\n\n----------------------------------------\n\nTITLE: Handling Block Updates in Mineflayer\nDESCRIPTION: This snippet shows how to listen for block updates in the game world, including both general updates and specific coordinate-based updates.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nworld \"blockUpdate\" (oldBlock, newBlock)\nworld \"blockUpdate:(x, y, z)\" (oldBlock, newBlock)\n```\n\n----------------------------------------\n\nTITLE: Placing Entities with Mineflayer in JavaScript\nDESCRIPTION: Places an entity next to a reference block in a specified direction. Returns a Promise that resolves with the placed Entity when complete.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nbot.placeEntity(referenceBlock, faceVector)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Chat Event in Mineflayer (JavaScript)\nDESCRIPTION: This snippet shows how to create a custom chat event in a Mineflayer bot that responds to 'hello' messages from other players.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nbot.chatAddPattern(\n  /(helo|hello|Hello)/,\n  'hello',\n  'Someone says hello'\n)\n\nconst hi = () => {\n  bot.chat('Hi!')\n}\n\nbot.on('hello', hi)\n```\n\n----------------------------------------\n\nTITLE: Basic Mineflayer Bot Creation\nDESCRIPTION: Shows the minimal code required to create a Mineflayer bot instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n\nconst bot = mineflayer.createBot()\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Arguments for Bot Configuration\nDESCRIPTION: Demonstrates how to use command line arguments to configure a Mineflayer bot, allowing the host, port, username, and password to be specified when running the script.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst bot = mineflayer.createBot({\n  host: process.argv[2],\n  port: parseInt(process.argv[3]),\n  username: process.argv[4],\n  password: process.argv[5]\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Bot Chat Events in JavaScript\nDESCRIPTION: Demonstrates how to listen for chat and whisper events, including parsing the message content and sender information.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nbot.on(\"chat\", (username, message, translate, jsonMsg, matches) => {\n  // Handle public chat message\n})\n\nbot.on(\"whisper\", (username, message, translate, jsonMsg, matches) => {\n  // Handle private whisper message\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading a Plugin in Mineflayer\nDESCRIPTION: Example demonstrating how to create a custom plugin for Mineflayer and load it into a bot. The plugin adds a custom function to the bot's API namespace and shows best practices for plugin development.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/br/api_br.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction somePlugin (bot, options) {\n  function someFunction () {\n    bot.chat('Yay!')\n  }\n\n  bot.myPlugin = {} // Boas práticas para API de plugin de namespace (faça isso para evitar erros como myPlugin não está definido)\n  bot.myPlugin.someFunction = someFunction\n}\n\nconst bot = mineflayer.createBot({})\nbot.loadPlugin(somePlugin)\nbot.once('login', function () {\n  bot.myPlugin.someFunction() // Yay!\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Entity Inventories with Mineflayer Bot API\nDESCRIPTION: Method to open entity inventories such as villager trading windows. Takes an entity object and returns a promise that resolves with the opened Window object.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openEntity(entity)\n```\n\n----------------------------------------\n\nTITLE: Opening Blocks with Mineflayer Bot API\nDESCRIPTION: Method to open container blocks like chests. Takes a block object, optional direction vector (defaults to up), and optional cursor position (defaults to block center). Returns a promise that resolves with the opened Window object.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openBlock(block, direction?: Vec3, cursorPos?: Vec3)\n```\n\n----------------------------------------\n\nTITLE: Handling Bot Spawn and Death Events in JavaScript\nDESCRIPTION: Shows how to listen for bot spawn and death events, which are crucial for initializing bot behavior and handling respawns.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nbot.on(\"spawn\", () => {\n  // Bot has spawned, initialize behavior\n})\n\nbot.on(\"death\", () => {\n  // Bot has died, handle respawn logic\n})\n```\n\n----------------------------------------\n\nTITLE: Crafting Items with Mineflayer in JavaScript\nDESCRIPTION: Crafts items using a recipe, with options for count and crafting table. Returns a Promise that resolves when crafting completes.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nbot.craft(recipe, count, craftingTable)\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with Promises in Mineflayer\nDESCRIPTION: Demonstrates how to use async/await syntax with Mineflayer's promise-based methods, allowing for cleaner sequential code execution and error handling.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nasync function consume (bot) {\n  try {\n    await bot.consume()\n    console.log('Finished consuming')\n  } catch (err) {\n    console.log(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fishing with Mineflayer in JavaScript\nDESCRIPTION: Makes the bot use a fishing rod. Returns a Promise that resolves when fishing ends.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nbot.fish()\n```\n\n----------------------------------------\n\nTITLE: Monitoring Entity and Block Updates in JavaScript\nDESCRIPTION: Demonstrates how to listen for entity and block update events, which are useful for tracking changes in the game world.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nbot.on(\"entitySpawn\", (entity) => {\n  // New entity has spawned\n})\n\nbot.on(\"blockUpdate\", (oldBlock, newBlock) => {\n  // A block has been updated\n})\n```\n\n----------------------------------------\n\nTITLE: Flying to Destination in Creative Mode with Mineflayer\nDESCRIPTION: Method to make the bot fly to a specified destination in creative mode. Takes a Vec3 destination and returns a Promise that resolves when the bot arrives. Best used for short distances as it does not implement pathfinding.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nbot.creative.flyTo(destination)\n```\n\n----------------------------------------\n\nTITLE: Implementing a 'Come To Me' Pathfinding Command\nDESCRIPTION: Sets up a chat listener that makes the bot navigate to a player's position when they type a message containing 'come', using the pathfinder plugin.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbot.removeAllListeners('chat')\n@On(bot, 'chat')\ndef handleMsg(this, sender, message, *args):\n  if sender and (sender != BOT_USERNAME):\n    bot.chat('Hi, you said ' + message)\n    if 'come' in message:\n      player = bot.players[sender]\n      target = player.entity\n      if not target:\n        bot.chat(\"I don't see you !\")\n        return\n      pos = target.position\n      bot.pathfinder.setMovements(movements)\n      bot.pathfinder.setGoal(pathfinder.goals.GoalNear(pos.x, pos.y, pos.z, RANGE_GOAL))\n    if 'stop' in message:\n      off(bot, 'chat', handleMsg)\n```\n\n----------------------------------------\n\nTITLE: Activating Entities at Position with Mineflayer in JavaScript\nDESCRIPTION: Activates an entity at a specific world position, useful for entities like armor stands. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nbot.activateEntityAt(entity, position)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Game Ticks in Mineflayer (JavaScript)\nDESCRIPTION: Promise-based function that waits for a specific number of in-game ticks to pass before continuing execution.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nbot.waitForTicks(ticks)\n```\n\n----------------------------------------\n\nTITLE: Awaiting Chat Messages in JavaScript\nDESCRIPTION: Demonstrates how to use the bot.awaitMessage() function to wait for specific chat messages or patterns. This method returns a promise that resolves when a matching message is received.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nasync function wait () {\n  await bot.awaitMessage('<flatbot> hello world') // resolves on \"hello world\" in chat by flatbot\n  await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // resolves on \"hello\" or \"world\" in chat by flatbot\n  await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // resolves on \"hello\" or \"world\" or \"im\" or \"batman\" in chat by flatbot\n  await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // resolves on \"hello\" or \"world\" in chat by flatbot\n  await bot.awaitMessage(/<flatbot> (.+)/) // resolves on first message matching the regex\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Items Between Slots in Mineflayer (JavaScript)\nDESCRIPTION: Advanced method to transfer items between different inventory slots with specific options for item type, metadata, source/destination ranges, count, and NBT data. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nbot.transfer(options)\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Entity in JavaScript using Mineflayer\nDESCRIPTION: This code snippet demonstrates how to find the nearest cow entity to the bot using the nearestEntity method. It uses a case-insensitive comparison to match the entity name.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst cow = bot.nearestEntity(entity => entity.name.toLowerCase() === 'cow')\n```\n\n----------------------------------------\n\nTITLE: Handling Mineflayer Error Events\nDESCRIPTION: Example showing how to hide error events in Mineflayer by adding empty event listeners for 'error' and 'end' events.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('error', () => {})\nclient.on('end', () => {})\n```\n\n----------------------------------------\n\nTITLE: Block Interaction Methods - JavaScript\nDESCRIPTION: Core methods for block interactions including digging, placing, and activating blocks with various options.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbot.dig(block, [forceLook = true], [digFace])\nbot.placeBlock(referenceBlock, faceVector)\nbot.activateBlock(block, direction?: Vec3, cursorPos?: Vec3)\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins in Mineflayer\nDESCRIPTION: Shows how to create and load a custom plugin for a Mineflayer bot. The example demonstrates defining a plugin function, loading it into the bot, and using the plugin's functionality.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction somePlugin (bot, options) {\n  function someFunction () {\n    bot.chat('Yay!')\n  }\n\n  bot.myPlugin = {} // Good practice to namespace plugin API\n  bot.myPlugin.someFunction = someFunction\n}\n\nconst bot = mineflayer.createBot({})\nbot.loadPlugin(somePlugin)\nbot.once('login', function () {\n  bot.myPlugin.someFunction() // Yay!\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Events with Anonymous Functions in Mineflayer\nDESCRIPTION: Demonstrates using an anonymous function to handle a Mineflayer event, which is defined directly in the event registration call.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nbot.once('spawn', () => {\n  bot.chat('hi!')\n})\n```\n\n----------------------------------------\n\nTITLE: Crafting Items Correctly in Mineflayer Using Promises (JavaScript)\nDESCRIPTION: This snippet shows the correct approach to crafting items in a Mineflayer bot using promises. It waits for each crafting operation to complete before starting the next one.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nasync function craft (bot) {\n  const mcData = require('minecraft-data')(bot.version)\n  const plankRecipe = bot.recipesFor(mcData.itemsByName.oak_planks.id ?? mcData.itemsByName.planks.id)[0]\n  await bot.craft(plankRecipe, 1, null)\n  const stickRecipe = bot.recipesFor(mcData.itemsByName.sticks.id)[0]\n  await bot.craft(stickRecipe, 1, null)\n  bot.chat('Crafting Sticks finished')\n}\n```\n\n----------------------------------------\n\nTITLE: Player Object Structure in JavaScript\nDESCRIPTION: Example structure of a player object in Mineflayer, showing the properties available for player entities including username, display name, gamemode, ping and entity reference.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  username: 'player',\n  displayName: { toString: Function }, // ChatMessage object.\n  gamemode: 0,\n  ping: 28,\n  entity: entity // null if you are too far away\n}\n```\n\n----------------------------------------\n\nTITLE: Using getSignText() to Read Sign Content\nDESCRIPTION: Example showing how to get a sign's plain text using the getSignText() method rather than directly accessing unstable blockEntity data.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n> block = bot.blockAt(new Vec3(0, 60, 0)) // assuming a sign is here\n> block.getSignText()\n[ \"Front text\\nHello world\", \"Back text\\nHello world\" ]\n```\n\n----------------------------------------\n\nTITLE: Attacking Entities with Mineflayer in JavaScript\nDESCRIPTION: Attacks a player or mob entity. Optional parameter controls whether the arm swings during attack.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nbot.attack(entity, swing = true)\n```\n\n----------------------------------------\n\nTITLE: Loading and Configuring the Pathfinder Plugin\nDESCRIPTION: Loads the mineflayer-pathfinder plugin, creates movement configuration based on the bot's Minecraft version, and sets up pathfinding parameters.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npathfinder = require('mineflayer-pathfinder')\nbot.loadPlugin(pathfinder.pathfinder)\n# Create a new minecraft-data instance with the bot's version\nmcData = require('minecraft-data')(bot.version)\n# Create a new movements class\nmovements = pathfinder.Movements(bot, mcData)\n# How far to be from the goal\nRANGE_GOAL = 1\n```\n\n----------------------------------------\n\nTITLE: Updating Bot's Held Item in Mineflayer\nDESCRIPTION: Method to update the bot.heldItem property, which represents the item currently in the bot's hand.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nbot.updateHeldItem()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bot Actions with Prismarine Viewer\nDESCRIPTION: JavaScript code snippet demonstrating how to use Prismarine Viewer to display a Mineflayer bot's actions in a browser window.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mineflayer: mineflayerViewer } = require('prismarine-viewer')\nbot.once('spawn', () => {\n  mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port is the minecraft server port, if first person is false, you get a bird's-eye view\n})\n```\n\n----------------------------------------\n\nTITLE: Moving Vehicles with Mineflayer in JavaScript\nDESCRIPTION: Controls vehicle movement with left/right and forward/backward parameters relative to where the bot is looking.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nbot.moveVehicle(left,forward)\n```\n\n----------------------------------------\n\nTITLE: Activating Held Items with Mineflayer in JavaScript\nDESCRIPTION: Activates the currently held item for eating, shooting bows, throwing items, etc. Optional parameter selects main hand or off hand.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nbot.activateItem(offHand=false)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bot Actions with Prismarine-Viewer in JavaScript\nDESCRIPTION: This code snippet shows how to use the prismarine-viewer module to visualize a Mineflayer bot's actions in a browser. It sets up a viewer on port 3007 with a first-person perspective when the bot spawns.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tr/README_TR.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { mineflayer: mineflayerViewer } = require('prismarine-viewer')\nbot.once('spawn', () => {\n  mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port is the minecraft server port, if first person is false, you get a bird's-eye view\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Bot Inventory and Control State in JavaScript\nDESCRIPTION: Shows how to access the bot's inventory, quick bar slot, and control state properties.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbot.quickBarSlot // Selected quick bar slot (0-8)\nbot.inventory // Window instance representing inventory\nbot.controlState // Object with main control states\n```\n\n----------------------------------------\n\nTITLE: Bot Authentication Configuration\nDESCRIPTION: Shows how to configure bot authentication with username and password.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst bot = mineflayer.createBot({\n  host: 'localhost',\n  port: 25565,\n  username: 'Player',\n  password: 'password'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Items on Entities with Mineflayer in JavaScript\nDESCRIPTION: Uses the currently held item on a target entity, for actions like applying saddles or using shears.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nbot.useOn(targetEntity)\n```\n\n----------------------------------------\n\nTITLE: Importing Mineflayer in Python\nDESCRIPTION: Python code snippet that demonstrates how to import and access the Mineflayer JavaScript library within a Python script using the JavaScript bridge.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom javascript import require\nmineflayer = require('mineflayer')\n```\n\n----------------------------------------\n\nTITLE: Command Line Arguments Usage\nDESCRIPTION: Demonstrates how to use command line arguments for bot configuration.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst bot = mineflayer.createBot({\n  host: process.argv[2],\n  port: parseInt(process.argv[3]),\n  username: process.argv[4],\n  password: process.argv[5]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Events with Named Functions in Mineflayer\nDESCRIPTION: Shows how to handle Mineflayer events by passing a named function to the event listener, which will be called when the specified event occurs.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst welcome = () => {\n  bot.chat('hi!')\n}\n\nbot.once('spawn', welcome)\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Entity Data for Signs\nDESCRIPTION: Example showing how to access block entity data for signs. The blockEntity property contains coordinates, ID, and text content of the sign.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// sign.blockEntity\n{\n  x: -53,\n  y: 88,\n  z: 66,\n  id: 'minecraft:sign', // 'Sign' в 1.10\n  Text1: { toString: Function }, // ChatMessage object\n  Text2: { toString: Function }, // ChatMessage object\n  Text3: { toString: Function }, // ChatMessage object\n  Text4: { toString: Function } // ChatMessage object\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Entities with Mineflayer in JavaScript\nDESCRIPTION: Activates an entity such as a villager for trading. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nbot.activateEntity(entity)\n```\n\n----------------------------------------\n\nTITLE: Stopping Flying Mode in Mineflayer Creative Mode\nDESCRIPTION: Method to stop flying and restore normal gravity in creative mode.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nbot.creative.stopFlying()\n```\n\n----------------------------------------\n\nTITLE: Checking Bot Position\nDESCRIPTION: Retrieves and displays the bot's current position in the Minecraft world.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbot.entity.position\n```\n\n----------------------------------------\n\nTITLE: Creating a Mineflayer Bot with Inline Options\nDESCRIPTION: Shows how to create a Mineflayer bot with connection options defined inline rather than as a separate variable.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst bot = mineflayer.createBot({ host: 'localhost', port: 25565 })\n```\n\n----------------------------------------\n\nTITLE: Opening Enchantment Tables with Mineflayer in JavaScript\nDESCRIPTION: Opens an enchantment table and returns a Promise resolving to an EnchantmentTable instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openEnchantmentTable(enchantmentTableBlock)\n```\n\n----------------------------------------\n\nTITLE: Opening Containers with Mineflayer in JavaScript\nDESCRIPTION: Opens a block or entity container with optional direction and cursor position parameters. Returns a Promise resolving to a Container instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openContainer(containerBlock or containerEntity, direction?, cursorPos?)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting the Bot\nDESCRIPTION: Demonstrates how to properly disconnect the bot from the server using the quit method.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbot.quit()\n```\n\n----------------------------------------\n\nTITLE: Configuring Mineflayer Bot with Login Credentials\nDESCRIPTION: Creates a Mineflayer bot with connection settings and login credentials for authenticating with a Minecraft server.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst bot = mineflayer.createBot({\n  host: 'localhost',\n  port: 25565,\n  username: 'Player',\n  password: 'password'\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Scoreboard Items Map Structure\nDESCRIPTION: Example showing the structure of the ScoreBoard.itemsMap object, which provides key-value mapping of player names to their scores.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  wvffle: { name: 'wvffle', value: 3 },\n  dzikoysk: { name: 'dzikoysk', value: 6 }\n}\n```\n\n----------------------------------------\n\nTITLE: Trading with Villagers in Mineflayer (JavaScript)\nDESCRIPTION: Executes a trade with a villager at the specified trade index. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nbot.trade(villagerInstance, tradeIndex, [times])\n```\n\n----------------------------------------\n\nTITLE: Accessing Villager Trade Data Structure\nDESCRIPTION: Example showing the structure of villager trade data, including input items, output items, trade status, and usage information.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    firstInput: Item,\n    output: Item,\n    hasSecondItem: false,\n    secondaryInput: null,\n    disabled: false,\n    tooluses: 0,\n    maxTradeuses: 7\n  },\n  {\n    firstInput: Item,\n    output: Item,\n    hasSecondItem: false,\n    secondaryInput: null,\n    disabled: false,\n    tooluses: 0,\n    maxTradeuses: 7\n  },\n  {\n    firstInput: Item,\n    output: Item,\n    hasSecondItem: true,\n    secondaryInput: Item,\n    disabled: false,\n    tooluses: 0,\n    maxTradeuses: 7\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test in Mineflayer\nDESCRIPTION: This command runs a specific test in Mineflayer using npm and mocha, where <test_name> is the name of the test to run.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run mocha_test -- -g <test_name>\n```\n\n----------------------------------------\n\nTITLE: Opening Furnaces with Mineflayer in JavaScript\nDESCRIPTION: Opens a furnace block and returns a Promise resolving to a Furnace instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openFurnace(furnaceBlock)\n```\n\n----------------------------------------\n\nTITLE: Crafting Items Incorrectly in Mineflayer (JavaScript)\nDESCRIPTION: This snippet demonstrates an incorrect approach to crafting items in a Mineflayer bot. It attempts to craft oak planks and sticks sequentially without waiting for the first crafting operation to complete.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction craft (bot) {\n  const mcData = require('minecraft-data')(bot.version)\n  const plankRecipe = bot.recipesFor(mcData.itemsByName.oak_planks.id ?? mcData.itemsByName.planks.id)[0] // Get the first recipe for oak planks\n  bot.craft(plankRecipe, 1) // ❌ start crafting oak planks.\n\n  const stickRecipe = bot.recipesFor(mcData.itemsByName.sticks.id)[0] // Get the first recipe for sticks\n  bot.craft(stickRecipe, 1) // ❌ start crafting sticks.\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Items Between Inventory Slots in Mineflayer\nDESCRIPTION: Method to move an item from one slot to another in the current window. Takes source and destination slot indices and returns a Promise that resolves when complete.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nbot.moveSlotItem(sourceSlot, destSlot)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Screenshot Bot\nDESCRIPTION: Commands to build a Docker image for the screenshot bot, useful for running on systems where direct installation is difficult.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/screenshot-with-node-canvas-webgl/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd screenshot-with-node-canvas\ndocker build . -t screenshot-bot\n```\n\n----------------------------------------\n\nTITLE: Opening Villager Trading with Mineflayer in JavaScript\nDESCRIPTION: Opens a trading window with a villager entity and returns a Promise resolving to a Villager instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openVillager(villagerEntity)\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Support in Mineflayer (JavaScript)\nDESCRIPTION: Checks if a specific feature is available in the current Minecraft version, useful for version-specific functionality.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nbot.supportFeature(name)\n```\n\n----------------------------------------\n\nTITLE: Setting Inventory Slot in Creative Mode with Mineflayer\nDESCRIPTION: Method to set a specific inventory slot with a given item in creative mode. Takes a slot index and item object. Returns a Promise that resolves when the server confirms the change.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nbot.creative.setInventorySlot(slot, item)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Usage Example\nDESCRIPTION: Shows how to create and access JavaScript objects with key-value pairs.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = {\n  number: 10,\n  another: 5\n}\n\nconsole.log(object.number) // 这将打印值10\n```\n\n----------------------------------------\n\nTITLE: Opening Anvils with Mineflayer in JavaScript\nDESCRIPTION: Opens an anvil block and returns a Promise resolving to an anvil instance.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openAnvil(anvilBlock)\n```\n\n----------------------------------------\n\nTITLE: Error Handling Pattern in Mineflayer\nDESCRIPTION: Demonstrates the recommended Node.js-style error handling pattern for Mineflayer, using callbacks instead of throwing errors to ensure bots can recover gracefully from failures.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction myfunction (param1, callback) {\n  // do stuff\n  let toDo = 1\n  toDo = 2\n  if (toDo === 2) { // everything worked\n    callback()\n  } else {\n    callback(new Error('something failed'))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Flying Mode in Mineflayer Creative Mode\nDESCRIPTION: Method to start flying in creative mode by setting gravity to 0. Useful for hovering while performing other actions.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nbot.creative.startFlying()\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Variables in JavaScript\nDESCRIPTION: Demonstrates how to create a constant variable named 'test' and assign it the value 5. This is a basic JavaScript example showing variable declaration and assignment.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = 5\n```\n\n----------------------------------------\n\nTITLE: Writing Books with Mineflayer in JavaScript\nDESCRIPTION: Writes content to a book in the specified inventory slot. Returns a Promise that resolves upon completion or error.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nbot.writeBook(slot, pages)\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Breaking with AsyncTask\nDESCRIPTION: Creates a chat listener that triggers block breaking below the bot when 'break' is mentioned. Uses @AsyncTask to run the digging operation in a separate thread.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@On(bot, 'chat')\ndef breakListener(this, sender, message, *args):\n  if sender and (sender != BOT_USERNAME):\n    if 'break' in message:\n      pos = bot.entity.position.offset(0, -1, 0)\n      blockUnder = bot.blockAt(pos)\n      if bot.canDigBlock(blockUnder):\n        bot.chat(f\"I'm breaking the '{blockUnder.name}' block underneath\")\n        # The start=True parameter means to immediately invoke the function underneath\n        # If left blank, you can start it with the `start()` function later on.\n        try:\n          @AsyncTask(start=True)\n          def break_block(task):\n            bot.dig(blockUnder)\n          bot.chat('I started digging!')\n        except Exception as e:\n          bot.chat(f\"I had an error {e}\")\n      else:\n        bot.chat(f\"I can't break the '{blockUnder.name}' block underneath\")\n    if 'stop' in message:\n      off(bot, 'chat', breakListener)\n```\n\n----------------------------------------\n\nTITLE: Swinging Arm Animation with Mineflayer in JavaScript\nDESCRIPTION: Plays an arm swing animation with options to specify which arm and whether to show the hand in the packet.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nbot.swingArm([hand], showHand)\n```\n\n----------------------------------------\n\nTITLE: Output of While Loop Execution\nDESCRIPTION: Shows the console output of the countdown loop, displaying numbers from 5 down to 1, followed by the 'Finished!' message.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n5\n4\n3\n2\n1\nFinished!\n```\n\n----------------------------------------\n\nTITLE: Mounting Vehicles with Mineflayer in JavaScript\nDESCRIPTION: Makes the bot mount a vehicle entity. Use dismount() to exit the vehicle.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nbot.mount(entity)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Chat Event Listener with Deregistration\nDESCRIPTION: Listens for chat messages, prints them to the console, and removes the listener if the message contains 'stop', demonstrating event listener cleanup.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@On(bot, 'chat')\ndef onChat(this, user, message, *rest):\n  print(f'{user} said \"{message}\"')\n\n  # If the message contains stop, remove the event listener and stop logging.\n  if 'stop' in message:\n    off(bot, 'chat', onChat)\n```\n\n----------------------------------------\n\nTITLE: Consuming Items with Mineflayer in JavaScript\nDESCRIPTION: Makes the bot eat or drink the currently held item. Returns a Promise that resolves when consumption completes.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nbot.consume()\n```\n\n----------------------------------------\n\nTITLE: Deactivating Held Items with Mineflayer in JavaScript\nDESCRIPTION: Deactivates the currently held item, used for releasing arrows, stopping eating, etc.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nbot.deactivateItem()\n```\n\n----------------------------------------\n\nTITLE: Getting Equipment Slot ID in Mineflayer\nDESCRIPTION: Method to get the inventory equipment slot ID for a given equipment destination name (head, torso, legs, feet, hand, off-hand).\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nbot.getEquipmentDestSlot(destination)\n```\n\n----------------------------------------\n\nTITLE: Dismounting Vehicles with Mineflayer in JavaScript\nDESCRIPTION: Makes the bot dismount from the current vehicle.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nbot.dismount()\n```\n\n----------------------------------------\n\nTITLE: Setting Quick Bar Slot with Mineflayer in JavaScript\nDESCRIPTION: Selects a slot (0-8) in the bot's quick bar.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nbot.setQuickBarSlot(slot)\n```\n\n----------------------------------------\n\nTITLE: Setting Command Block Properties in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set properties of a command block using the bot.setCommandBlock method. It includes options for mode, track output, conditional execution, and always active state.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/br/api_br.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  modo: 2,\n  rastrearSaída: verdadeiro,\n  condicional: falso,\n  sempreAtivo: verdadeiro\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Windows in Mineflayer (JavaScript)\nDESCRIPTION: Closes an open window interface such as an inventory, chest, or crafting table.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nbot.closeWindow(window)\n```\n\n----------------------------------------\n\nTITLE: Clicking Window Slots in Mineflayer (JavaScript)\nDESCRIPTION: Low-level method to click on slots in an open window with various mouse buttons and modes. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nbot.clickWindow(slot, mouseButton, mode)\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variable on Windows\nDESCRIPTION: This snippet demonstrates how to set the DEBUG environment variable for minecraft-protocol on Windows and run a Node.js script.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Batch\nCODE:\n```\nset DEBUG=minecraft-protocol\nnode your_script.js\n```\n\n----------------------------------------\n\nTITLE: Clearing Entire Inventory in Creative Mode with Mineflayer\nDESCRIPTION: Method to clear the entire bot inventory in creative mode. Returns a Promise that resolves when the server confirms the operation.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nbot.creative.clearInventory()\n```\n\n----------------------------------------\n\nTITLE: Moving Items to Slots in Mineflayer (JavaScript)\nDESCRIPTION: Low-level method to put an item from one slot into a specified range of slots. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nbot.putSelectedItemRange(start, end, window, slot)\n```\n\n----------------------------------------\n\nTITLE: Opening Chests with Mineflayer in JavaScript\nDESCRIPTION: Deprecated method to open chests, equivalent to openContainer. Use openContainer instead.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openChest(chestBlock or minecartchestEntity, direction?, cursorPos?)\n```\n\n----------------------------------------\n\nTITLE: Parsing Multi-line Chat Messages in Mineflayer\nDESCRIPTION: Demonstrates how to parse complex multi-line chat messages from custom server plugins using regex patterns and the messagestr event.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst regex = {\n  first: /\\(!\\) (.+) has won the \\/jackpot and received +/,\n  second: /\\$(.+)! They purchased (.+) \\((.+)%\\) ticket\\(s\\) out of the /,\n  third: /(.+) ticket\\(s\\) sold!/\n}\n\nlet jackpot = {}\nbot.on('messagestr', msg => {\n  if (regex.first.test(msg)) {\n    const username = msg.match(regex.first)[1]\n    jackpot.username = username\n  } else if (regex.second.test(msg)) {\n    const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)\n    jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))\n    jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))\n    jackpot.winPercent = parseFloat(winPercent)\n  } else if (regex.third.test(msg)) {\n    const totalTickets = msg.match(regex.third)[1]\n    jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))\n    onDone(jackpot)\n    jackpot = {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Putting Items Away in Mineflayer (JavaScript)\nDESCRIPTION: Low-level method to put an item from a specified slot into the inventory. Returns a Promise that resolves upon completion.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nbot.putAway(slot)\n```\n\n----------------------------------------\n\nTITLE: Importing Modules with Node.js Require Function\nDESCRIPTION: Shows how to import an NPM package (Mineflayer) using the require function in Node.js after installation with npm install.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n```\n\n----------------------------------------\n\nTITLE: Sending Commands in Mineflayer\nDESCRIPTION: Shows how to send server commands using the bot.chat() method.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/FAQ.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbot.chat('/give @p diamond')\n```\n\n----------------------------------------\n\nTITLE: Mineflayer Version History Entry 4.4.0\nDESCRIPTION: Changelog entry detailing updates including fixes to chatterbox example, documentation updates, type additions and various feature enhancements.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/history.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.4.0\n\n* Fix chatterbox example not getting dropped item (@u9g)\n* Fix 404d link to license (@BalaM314)\n* Add bot.clickWindow mode disclaimer (@IceTank)\n* Add spectator to GameMode types (@IceTank)\n* Update types for isABed (@amoraschi)\n* Replace openChest with openContainer in docs and examples (@slightly-imperfect)\n* Add ender chests as a chest type (@RoseChilds)\n* Added method to wait until sleep function is in reality sleeping (@sefirosweb)\n* Added type on move event (@sefirosweb)\n* Added thunderState type (@sefirosweb)\n* Fix type error on chest open (@IceTank)\n* Add support for repeating and chain command blocks. (@mirkokral)\n* Add player object to blockBreakProgressEnd & observed. (@JackCrispy)\n* Add entity to blockBreakProgress (@JackCrispy )\n* Add direction support to activateBlock, openBlock (@IceTank)\n* Add entityAtCursor function (@O-of)\n* Fix regex dos (@IceTank)\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Block Properties in JavaScript using Mineflayer\nDESCRIPTION: Example of options object for the setCommandBlock method, which allows configuring a command block's properties including mode, tracking output, conditional execution, and always active state.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/es/api_es.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  mode: 2,\n  trackOutput: true,\n  conditional: false,\n  alwaysActive: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Player Join Event Listener\nDESCRIPTION: Uses the @On decorator to listen for playerJoin events and have the bot send a chat message when someone joins the server.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@On(bot, 'playerJoin')\ndef end(this, player):\n  bot.chat('Someone joined!')\n```\n\n----------------------------------------\n\nTITLE: Mineflayer Version History Entry 4.3.0\nDESCRIPTION: Changelog entry covering caching position updates, team management updates and mcdata version upgrade.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/history.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.0\n\n* Cache 'positionUpdateSentEveryTick' feature lookup (@IceTank)\n* Remove old teams from bot.teamMap (@U9G)\n* mcdata 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Bot Chat Pattern Addition - JavaScript\nDESCRIPTION: Methods to add chat patterns for message matching. Allows configuring custom patterns with options.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbot.addChatPattern(name, pattern, chatPatternOptions)\nbot.addChatPatternSet(name, patterns, chatPatternOptions)\nbot.removeChatPattern(name)\n```\n\n----------------------------------------\n\nTITLE: Manual Respawning in Mineflayer (JavaScript)\nDESCRIPTION: Manually respawns the bot when the automatic respawn option is disabled.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nbot.respawn()\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and Checking Versions\nDESCRIPTION: Uses the 'n' version manager to install Node.js LTS, then checks both Node.js and Python versions to ensure compatibility with Mineflayer.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Use `n` to install nodejs 18, if it's not already installed:\n!curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts > /dev/null\n# Now write the Node.js and Python version to the console\n!node --version\n!python --version\n```\n\n----------------------------------------\n\nTITLE: Using If-Statements for Conditional Logic\nDESCRIPTION: Demonstrates conditional execution using if, else if, and else statements. The code checks a name variable against different values and executes different code blocks accordingly.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = 'Bob'\n\nif (name === 'Bob') {\n  console.log('Your name is Bob')\n} else if (name === 'Alice') {\n  console.log('Your name is Alice')\n} else {\n  console.log('Your name is not Bob or Alice')\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Item Lore in Mineflayer\nDESCRIPTION: Function to extract and parse item lore text using NBT data and prismarine-chat library.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/FAQ.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getLore (item) {\n  let message = ''\n  if (item.nbt == null) return message\n\n  const nbt = require('prismarine-nbt')\n  const ChatMessage = require('prismarine-chat')(bot.version)\n\n  const data = nbt.simplify(item.nbt)\n  const display = data.display\n  if (display == null) return message\n\n  const lore = display.Lore\n  if (lore == null) return message\n  for (const line of lore) {\n    message += new ChatMessage(line).toString()\n    message += '\\n'\n  }\n\n  return message\n}\n```\n\n----------------------------------------\n\nTITLE: Running Block Finder Test for Minecraft 1.18.1\nDESCRIPTION: This example command demonstrates how to run the block finder test specifically for Minecraft version 1.18.1 in Mineflayer.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run mocha_test -- -g \"1.18.1.*BlockFinder\"\n```\n\n----------------------------------------\n\nTITLE: Working with JavaScript Objects\nDESCRIPTION: Demonstrates how to create and access JavaScript objects with key-value pairs, which are essential for passing options and configurations in Mineflayer.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = {\n  number: 10,\n  another: 5\n}\n\nconsole.log(object.number) // This will print the value 10\n```\n\n----------------------------------------\n\nTITLE: Callback Error Handling\nDESCRIPTION: Shows how to implement error handling in bot callbacks.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbot.consume((error) => {\n  if (error) { // 这将检查是否发生错误\n    console.log(error)\n  } else {\n    console.log('Finished consuming')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Dispensers with Mineflayer in JavaScript\nDESCRIPTION: Deprecated method to open dispensers, equivalent to openContainer. Use openContainer instead.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nbot.openDispenser(dispenserBlock)\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Anonymous Function\nDESCRIPTION: Demonstrates event handling using an anonymous function.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbot.once('spawn', () => {\n  bot.chat('你好!')\n})\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Named Function\nDESCRIPTION: Shows how to handle bot events using a named function.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst welcome = () => {\n  bot.chat('你好!')\n}\n\nbot.once('spawn', welcome)\n```\n\n----------------------------------------\n\nTITLE: Inline Bot Configuration\nDESCRIPTION: Demonstrates inline object creation for bot configuration.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bot = mineflayer.createBot({ host: 'localhost', port: 25565 })\n```\n\n----------------------------------------\n\nTITLE: Configuring Mineflayer Bot Connection\nDESCRIPTION: Demonstrates how to configure bot connection options including host and port.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n\nconst options = {\n  host: 'localhost', // 将此项更改为所需的ip\n  port: 25565 // 将此项更改为所需的端口\n}\n\nconst bot = mineflayer.createBot(options)\n```\n\n----------------------------------------\n\nTITLE: Logging Variables to Console\nDESCRIPTION: Demonstrates how to use console.log() to display the value of a variable in the terminal, which is useful for debugging and monitoring program execution.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = 5\n\nconsole.log(test)\n```\n\n----------------------------------------\n\nTITLE: Clearing Inventory Slot in Creative Mode with Mineflayer\nDESCRIPTION: Method to clear a specific inventory slot in creative mode. Takes a slot index and returns a Promise that resolves when the server confirms the change.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nbot.creative.clearSlot(slot)\n```\n\n----------------------------------------\n\nTITLE: Importing Mineflayer Library\nDESCRIPTION: Imports the Mineflayer Node.js library using the require function from the javascript package.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmineflayer = require('mineflayer')\n```\n\n----------------------------------------\n\nTITLE: Setting Command Block Properties in Mineflayer (JavaScript)\nDESCRIPTION: Sets a command block's properties including command, mode, and various options.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nbot.setCommandBlock(pos, command, [options])\n```\n\n----------------------------------------\n\nTITLE: Creating and Spawning a Mineflayer Bot\nDESCRIPTION: Creates a Mineflayer bot with a random username and connects to a test server. Uses the 'once' function to wait for the login event before sending a chat message.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrandom_number = id([]) % 1000 # Give us a random number upto 1000\nBOT_USERNAME = f'colab_{random_number}'\n\nbot = mineflayer.createBot({ 'host': 'pjs.deptofcraft.com', 'port': 25565, 'username': BOT_USERNAME, 'hideErrors': False })\n\n# The spawn event\nonce(bot, 'login')\nbot.chat('I spawned')\n```\n\n----------------------------------------\n\nTITLE: Configuring Socks5 Proxy in Mineflayer\nDESCRIPTION: Implementation of socks5 proxy configuration for Mineflayer bot connection using the socks package.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/FAQ.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconnect: (client) => {\n    socks.createConnection({\n      proxy: {\n        host: PROXY_IP,\n        port: PROXY_PORT,\n        type: 5,\n        userId: PROXY_USERNAME,\n        password: PROXY_PASSWORD\n      },\n      command: 'connect',\n      destination: {\n        host: MC_SERVER_ADDRESS,\n        port: MC_SERVER_PORT\n      }\n    }, (err, info) => {\n      if (err) {\n        console.log(err)\n        return\n      }\n      client.setSocket(info.socket)\n      client.emit('connect')\n    })\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Bot Time Properties in JavaScript\nDESCRIPTION: Demonstrates how to access various time-related properties of the Mineflayer bot, including total ticks, time of day, day count, and moon phase.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbot.time.time // Total number of ticks since day 0\nbot.time.timeOfDay // Time of the day in ticks (0-23999)\nbot.time.day // Day of the world\nbot.time.isDay // Boolean, whether it is day or not\nbot.time.moonPhase // Phase of the moon (0-7)\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Entity Data for Signs\nDESCRIPTION: Example showing the structure of blockEntity data for sign blocks in Minecraft 1.19, containing sign text and formatting information.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// sign.blockEntity example from 1.19\n{\n  GlowingText: 0, // 0 for false, 1 for true\n  Color: 'black',\n  Text1: '{\"text\":\"1\"}',\n  Text2: '{\"text\":\"2\"}',\n  Text3: '{\"text\":\"3\"}',\n  Text4: '{\"text\":\"4\"}'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scoreboard Items Array Structure\nDESCRIPTION: Example showing the structure of the ScoreBoard.items array, which provides a sorted list of players and their scores.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { name: 'dzikoysk', value: 6 },\n  { name: 'wvffle', value: 3 }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Skin Data in Mineflayer\nDESCRIPTION: Example showing the structure of the skinData property in player objects, which contains the skin URL and model type (slim or classic).\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// player.skinData\n{\n  url: 'http://textures.minecraft.net/texture/...',\n  model: 'slim' // or 'classic'\n}\n```\n\n----------------------------------------\n\nTITLE: Looping Over Object Entries in JavaScript\nDESCRIPTION: This snippet demonstrates how to loop over both keys and values of an object simultaneously using the for...of loop and Object.entries() method in JavaScript.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(key + ', ' + value)\n}\n```\n\n----------------------------------------\n\nTITLE: Tablist Object Structure in JavaScript\nDESCRIPTION: Structure of the tablist object showing header and footer properties as ChatMessage objects.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  header: { toString: Function }, // ChatMessage object.\n  footer: { toString: Function } // ChatMessage object.\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Enchantment Table Data Structure\nDESCRIPTION: Example showing the structure of enchantments data available when using an enchantment table, which includes the level of each available enchantment option.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/api.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    level: 3\n  },\n  {\n    level: 4\n  },\n  {\n    level: 9\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing For-Of Loops in JavaScript\nDESCRIPTION: Demonstrates a for-of loop that iterates through each element in an array, printing each item. This is useful for performing operations on every element in a collection.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3]\n\nfor (const item of array) {\n  console.log(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Scoreboard Items Structure in Mineflayer\nDESCRIPTION: Examples showing the structure of scoreboard data in Mineflayer. ScoreBoard.itemsMap provides an object representation while ScoreBoard.items provides a sorted array of scoreboard entries.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  wvffle: { name: 'wvffle', value: 3 },\n  dzikoysk: { name: 'dzikoysk', value: 6 }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  { name: 'dzikoysk', value: 6 },\n  { name: 'wvffle', value: 3 }\n]\n```\n\n----------------------------------------\n\nTITLE: Villager Trades Structure in Mineflayer\nDESCRIPTION: Example showing the structure of villager trade data in Mineflayer. Each trade contains information about input and output items, trade status, and usage limits.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    firstInput: Item,\n    output: Item,\n    hasSecondItem: false,\n    secondaryInput: null,\n    disabled: false,\n    tooluses: 0,\n    maxTradeuses: 7\n  },\n  {\n    firstInput: Item,\n    output: Item,\n    hasSecondItem: false,\n    secondaryInput: null,\n    disabled: false,\n    tooluses: 0,\n    maxTradeuses: 7\n  },\n  {\n    firstInput: Item,\n    output: Item,\n    hasSecondItem: true,\n    secondaryInput: Item,\n    disabled: false,\n    tooluses: 0,\n    maxTradeuses: 7\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Looping Over Object Values in JavaScript\nDESCRIPTION: This snippet demonstrates how to loop over the values of an object using the for...of loop and Object.values() method in JavaScript.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: 1,\n  b: 2,\n  c: 3\n}\n\nfor (const value of Object.values(obj)) {\n  console.log(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Mineflayer Bot Client Reference\nDESCRIPTION: Shows how to access the underlying Minecraft protocol client through the bot._client property. This is an unstable API that handles packet reading and writing using node-minecraft-protocol. Usage should be limited as functionality may change with Minecraft versions.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/unstable_api.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nbot._client\n```\n\n----------------------------------------\n\nTITLE: Accessing Player Skin Data in Mineflayer\nDESCRIPTION: Example showing the structure of player skin data in Mineflayer. The skinData property contains the URL to the player's skin texture and the model type (slim or classic).\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// player.skinData\n{\n  url: 'http://textures.minecraft.net/texture/...',\n  model: 'slim' // или 'classic'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Different JavaScript Data Types\nDESCRIPTION: Examples of various JavaScript data types including strings, arrays, objects, functions, booleans, and undefined values, showing how each type is declared.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = 'This is a string' // string type\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3] // array type\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = {} // object type\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst adder = (a, b) => { return a + b } // function type\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst boolean = true // boolean type\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet nothing // undefined type\nconst notDefined = undefined // undefined type\n```\n\n----------------------------------------\n\nTITLE: Analyzing Block Frequencies with Matplotlib\nDESCRIPTION: Uses Python's matplotlib library to analyze and visualize the frequency of different block types in the loaded Minecraft world chunks, demonstrating integration with Python data analysis tools.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfigure = plt.figure()\naxes = figure.add_axes([0,0,1,1])\nVec3 = require('vec3').Vec3\n\ncolumns = bot.world.getColumns()\nblock_freqs = {}\nfor c in range(0, 3): # iterate through some of the loaded chunk columns\n  cc = columns[c].column\n  for y in range(1, 40):\n    for x in range(1, 16):\n      for z in range(1, 16):\n        block = cc.getBlock(Vec3(x, y, z))\n        if block.name in block_freqs:\n          block_freqs[block.name] += 1\n        else:\n          block_freqs[block.name] = 1\n\nprint(block_freqs)\naxes.bar(block_freqs.keys(), block_freqs.values())\nplt.xticks(rotation=45)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Bot Entity Finding Function - JavaScript\nDESCRIPTION: Method to find the nearest entity matching a given criteria. Takes an optional match function that returns a boolean.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/ru/api_ru.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbot.nearestEntity(match = (entity) => { return true })\n```\n\n----------------------------------------\n\nTITLE: For-Of Loop Array Iteration\nDESCRIPTION: Demonstrates how to iterate over array elements using a for-of loop structure.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3]\n\nfor (const item of array) {\n  console.log(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for Minecraft Protocol in Node.js\nDESCRIPTION: This snippet shows how to enable debug output for the minecraft-protocol module using the DEBUG environment variable in a Node.js environment.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nDEBUG=\"minecraft-protocol\" node [...]\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Bridge Functions\nDESCRIPTION: Imports necessary functions from the 'javascript' package to interface with Node.js libraries, including require, On, Once, AsyncTask, once, and off.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom javascript import require, On, Once, AsyncTask, once, off\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loops in JavaScript\nDESCRIPTION: Demonstrates a while loop that counts down from 5 to 1, printing each number and then a completion message. The loop continues as long as the countDown variable is greater than 0.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet countDown = 5\n\nwhile (countDown > 0) {\n  console.log(countDown)\n  countDown = countDown - 1 // Decrement countDown by 1\n}\n\nconsole.log('Finished!')\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Minecraft Version in Mineflayer\nDESCRIPTION: This command runs tests for a specific Minecraft version in Mineflayer using npm and mocha.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run mocha_test -- -g <version>\n```\n\n----------------------------------------\n\nTITLE: Running All Mineflayer Tests\nDESCRIPTION: This command runs all tests for the Mineflayer project using npm.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Functions in JavaScript\nDESCRIPTION: Shows how to define an arrow function for addition, assign it to a variable, and then call it with different parameters. The function takes two parameters and returns their sum.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst addition = (a, b) => {\n  return a + b\n}\n\nconst test1 = addition(5, 10)\nconst test2 = addition(1, 0)\n\nconsole.log(test1)\nconsole.log(test2)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Minecraft Versions in Bash\nDESCRIPTION: Commands for running Mineflayer tests for different Minecraft versions using npm scripts. Includes examples for running all tests, specific tests, or tests for a particular Minecraft version.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Run all tests in all supported versions\nnpm run test\n\n# Run a specific test in Minecraft 1.20.4\nnpm run mocha_test -- -g \"mineflayer_external 1.20.4v.*exampleBee\"\n\n# Run all tests in just version 1.20.4\nnpm run mocha_test -- -g \"mineflayer_external 1.20.4v\"\n```\n\n----------------------------------------\n\nTITLE: Executando Testes do Mineflayer (Bash)\nDESCRIPTION: Comandos para executar todos os testes do Mineflayer, testes para uma versão específica do Minecraft, ou um teste individual. Útil para desenvolvedores contribuindo para o projeto ou verificando compatibilidade.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/br/README_BR.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -g <versão>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -- -g <nome_do_teste>\n```\n\n----------------------------------------\n\nTITLE: For Loop Implementation in JavaScript\nDESCRIPTION: Shows how to implement the same countdown using a for loop structure with initialization, condition, and increment parts.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let countDown = 5; countDown > 0; countDown = countDown - 1) {\n  console.log(countDown)\n}\n```\n\n----------------------------------------\n\nTITLE: Habilitando Depuração do Protocolo Minecraft no Mineflayer (Bash)\nDESCRIPTION: Mostra como habilitar a depuração do protocolo Minecraft usando variáveis de ambiente no Linux/macOS e Windows. Isso é útil para solucionar problemas de comunicação entre o bot e o servidor.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/br/README_BR.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=\"minecraft-protocol\" node [...]\n```\n\nLANGUAGE: bash\nCODE:\n```\nset DEBUG=minecraft-protocol\nnode seu_arquivo.js\n```\n\n----------------------------------------\n\nTITLE: Installing the JavaScript Python Package\nDESCRIPTION: Installs the 'javascript' Python package using pip, which allows Python to access Node.js libraries.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/mineflayer.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n !pip install javascript\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Bridge for Python\nDESCRIPTION: Command to install the JavaScript bridge package that allows using JavaScript libraries in Python. This is a prerequisite for using Mineflayer in Python applications.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install javascript\n```\n\n----------------------------------------\n\nTITLE: Project Links in Markdown\nDESCRIPTION: Markdown links and descriptions for three Mineflayer-based projects, including embedded video demonstrations.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/demos.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## mineflayer-navigate\n\n[navigate](https://github.com/andrewrk/mineflayer-navigate/) - get around\n   easily using A* pathfinding\n\n<iframe type=\"text/html\" width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/O6lQdmRz8eE\" frameborder=\"0\"></iframe>\n\n## rbot\n\n[rom1504/rbot](https://github.com/rom1504/rbot) smart bot based on mineflayer\n\n<iframe type=\"text/html\" width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/0cQxg9uDnzA\" frameborder=\"0\"></iframe>\n\n## chaoscraft\n\n[Chaoscraft](https://github.com/schematical/chaoscraft) Minecraft bot using genetic algorithms\n\n\n​<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/videoseries?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Running Screenshot Bot in Docker Container\nDESCRIPTION: Command to run the screenshot bot Docker container with volume mapping to save screenshots to the host and environment variables for server connection.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/screenshot-with-node-canvas-webgl/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd):/usr/src/app/screenshots -e HOST='<server ip address>' -e PORT=<port> screenshot-bot\n```\n\n----------------------------------------\n\nTITLE: Looping Over Object Keys in JavaScript\nDESCRIPTION: This snippet shows how to loop over the keys of an object using the for...of loop and Object.keys() method in JavaScript.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const key of Object.keys(obj)) {\n  console.log(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Prismarine Viewer Image in HTML\nDESCRIPTION: This HTML snippet embeds an image of the Prismarine Viewer for Mineflayer. It includes an image source, alt text, width specification, and a link to the Prismarine Viewer project page.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/viewer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png\" alt=\"viewer\" width=\"800\">\n```\n\n----------------------------------------\n\nTITLE: Running Screenshot Script on Linux with Xvfb\nDESCRIPTION: Command for running the screenshot script on Linux using Xvfb to create a virtual framebuffer for rendering.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/screenshot-with-node-canvas-webgl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxvfb-run -s \"-ac -screen 0 1280x1024x24\" node <your script> [...args]\n```\n\n----------------------------------------\n\nTITLE: Implementing For Loops in JavaScript\nDESCRIPTION: Shows a for loop that accomplishes the same countdown from 5 to 1 as the while loop, but with initialization, condition, and increment steps combined in the loop declaration.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let countDown = 5; countDown > 0; countDown = countDown - 1) {\n  console.log(countDown)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Screenshot Script on macOS\nDESCRIPTION: Simple command for running the screenshot script on macOS High Sierra without additional display configuration.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/screenshot-with-node-canvas-webgl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode <your script> [...args]\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Node-Canvas\nDESCRIPTION: Commands to install necessary system dependencies on Linux for the node-canvas package used by the screenshot functionality.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/screenshot-with-node-canvas-webgl/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update -y\nsudo apt-get install -y xserver-xorg-dev libxi-dev xserver-xorg-dev libxext-dev xvfb\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loop Counter in JavaScript\nDESCRIPTION: Demonstrates a basic while loop that counts down from 5 to 1, printing each number and decrementing the counter.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet countDown = 5\n\nwhile (countDown > 0) {\n  console.log(countDown)\n  countDown = countDown - 1 // 从1递减\n}\n\nconsole.log('已完成!')\n```\n\n----------------------------------------\n\nTITLE: Loop Output Example\nDESCRIPTION: Shows the expected output from the countdown loop implementation.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/zh/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n5\n4\n3\n2\n1\n已完成!\n```\n\n----------------------------------------\n\nTITLE: Using awaitMessage with Promises in Mineflayer\nDESCRIPTION: Example showing how to use the bot.awaitMessage() method with Promises to wait for specific messages to appear in chat. The function demonstrates various patterns for matching messages including exact strings, arrays of possibilities, and regular expressions.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/br/api_br.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function wait () {\n  await bot.awaitMessage('<flatbot> hello world') // resolve \"hello world\" no chat por flatbot (se resolve quando um usuário chamado flatbot escreve \"hello world\" no chat)\n  await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // resolve \"hello\" ou \"world\" no chat por flatbot (se resolve quando um usuário chamado flatbot escreve \"hello\" ou \"world\" no chat)\n  await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // resolve \"hello\" ou \"world\" ou \"im\" ou \"batman\" no chat por flatbot (se resolve quando um usuário chamado flatbot escreve \"hello world\", \"world\", \"im\" ou \"batman\" no bater papo)\n  await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // resolve \"hello\" ou \"world\" no chat do flatbot\n  await bot.awaitMessage(/<flatbot> (.+)/) // resolve na primeira mensagem correspondente ao regex (se resolve quando um usuário chamado flatbot escreve algo que coincide com o padrão)\n}\n```\n\n----------------------------------------\n\nTITLE: Attempted Reassignment of a Constant Variable\nDESCRIPTION: Shows an invalid attempt to reassign a value to a constant variable. The second line will produce an error as constants cannot be modified after declaration.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = 5\n// eslint-disable-next-line\ntest = 10 // This line is invalid.\n```\n\n----------------------------------------\n\nTITLE: Disabling Chest Confirmation Requirement in Mineflayer Bot\nDESCRIPTION: This code sets window.requiresConfirmation to false when a window opens, allowing the bot to interact with chests even when confirmation packets aren't sent by certain Spigot plugins. Without this fix, the bot would hang waiting for confirmations that never arrive, and event listeners would remain attached indefinitely.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/examples/advanced/chest_confirm.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbot.on('windowOpen', async (window) => {\n  window.requiresConfirmation = false // fix\n  await bot.clickWindow(13, 0, 0)\n  console.log(bot._events) // without the fix this code is unreachable, the promise never resolve\n})\nbot.on('windowClose', () => {\n  console.log(bot._events) // without the fix there is a confirmTransaction1 listener that is never removed\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mineflayer Bot\nDESCRIPTION: The minimal code required to create a Mineflayer bot with default settings, which will attempt to connect to a local Minecraft server.\nSOURCE: https://github.com/prismarinejs/mineflayer/blob/master/docs/tutorial.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst mineflayer = require('mineflayer')\n\nconst bot = mineflayer.createBot()\n```"
  }
]