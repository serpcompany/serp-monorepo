[
  {
    "owner": "tavernari",
    "repo": "dicontainer",
    "content": "TITLE: Using Property Wrappers for Dependency Injection in Swift\nDESCRIPTION: Shows how to use the @Injected and @InjectedSafe property wrappers to automatically resolve dependencies, with options for handling missing dependencies.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n@Injected(.githubService)\nvar githubService: FetchService\n\n@Injected(.githubService, default: FallbackService())\nvar githubService: FetchService\n\n@InjectedSafe(.by(type: FetchService.self, key: \"gitlab\"))\nvar gitlabService: FetchService?\n\n@Injected\nvar externalService: ExternalSingletonService\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies with Other Dependencies in Swift\nDESCRIPTION: Shows how to register a dependency that requires other dependencies by using the resolver parameter to resolve them during registration.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nContainer.standard.register(.gitlabService) { resolver in\n\n    let externalService = try resolver.resolve(.externalService)\n    return GitlabService(externalService)\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies Directly from Container in Swift\nDESCRIPTION: Demonstrates how to manually resolve dependencies from the Container using different identifier approaches. This gives direct control over dependency resolution.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nlet githubService = try? Container.standard.resolve(.githubService)\nlet gitlabService = try? Container.standard.resolve(.by(type: FetchService.self, key: \"gitlab\"))\nlet externalService = try? Container.standard.resolve(.by(type: ExternalSingletonService.self))\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies with Type and Key Variants in Swift\nDESCRIPTION: Demonstrates registering multiple implementations of the same type with different keys to distinguish between them, enabling polymorphic dependency injection.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nContainer.standard.register(type: FetchService.self, key: \"github\") { _ in GitHubService() }\n\nContainer.standard.register(type: FetchService.self, key: \"gitlab\") { _ in GitlabService() }\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies Using Type in Swift\nDESCRIPTION: Shows how to register a dependency in the Container using a type as the identifier. This approach allows for type-safe dependency resolution.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nContainer.standard.register(type: FetchService.self) { _ in GitHubService() }\n```\n\n----------------------------------------\n\nTITLE: Creating Shortcut Identifiers with InjectIdentifier Extension in Swift\nDESCRIPTION: Shows how to create custom identifier shortcuts through extension, providing cleaner and more maintainable dependency references throughout the codebase.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nextension InjectIdentifier {\n\n    static var githubService: InjectIdentifier<FetchService> { .by(type: FetchService.self, key: \"github\") }\n    static var gitlabService: InjectIdentifier<FetchService> { .by(type: FetchService.self, key: \"gitlab\") }\n    static var externalService: InjectIdentifier<ExternalSingletonService> { .by(type: ExternalSingletonService.self) }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies Using Shortcuts in Swift\nDESCRIPTION: Demonstrates how to register dependencies using the custom identifier shortcuts, which provides a cleaner and more type-safe registration process.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nContainer.standard.register(.githubService) { _ in GitHubService() }\n\nContainer.standard.register(.gitlabService) { _ in GitlabService() }\n\nContainer.standard.register(.externalService) { _ in ExternalSingletonService.shared }\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies Using Key Directly in Swift\nDESCRIPTION: Demonstrates how to register a dependency in the Container using a string key identifier. This approach allows you to reference the dependency by a custom string.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nContainer.standard.register(key: \"some_key\") { _ in SomeObjc() }\n```\n\n----------------------------------------\n\nTITLE: Installing DIContainer with Swift Package Manager\nDESCRIPTION: Demonstrates how to integrate DIContainer into a project using Swift Package Manager by adding the dependency to the Package.swift file.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\ndependencies: [\n    // Dependencies declare other packages that this package depends on.\n    // .package(url: /* package url */, from: \"1.0.0\"),\n    .package(url: \"https://github.com/Tavernari/DIContainer\", from: \"0.2.0\")\n],\ntargets: [\n    .target(\n        name: \"MyProject\",\n        dependencies: [..., \"DIContainer\"]\n    )\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing DIContainer with CocoaPods in Ruby\nDESCRIPTION: Shows how to integrate DIContainer into a project using CocoaPods by adding the dependency to the Podfile.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\npod 'DIContainer-swift', '~> 0.2.0'\n```\n\n----------------------------------------\n\nTITLE: Fork Repository Command Example\nDESCRIPTION: Example command line and environment setup instructions for contributing to the repository. The document recommends using Node.js v16 for running the site locally.\nSOURCE: https://github.com/tavernari/dicontainer/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Are you making changes to the application code? You'll need **Node.js v16** to run the site locally. See [contributing/development.md](contributing/development.md).\n- Are you contributing to markdown? We use [GitHub Markdown](contributing/content-markup-reference.md).\n```"
  }
]