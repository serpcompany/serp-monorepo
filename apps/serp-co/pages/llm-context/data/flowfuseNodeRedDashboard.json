[
  {
    "owner": "flowfuse",
    "repo": "node-red-dashboard",
    "content": "TITLE: Implementing Vue Component for Dashboard 2.0 Widget\nDESCRIPTION: Example Vue component structure for a Dashboard 2.0 widget. It demonstrates the use of data tracker, state management, and event handling.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/core-widgets.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div @click=\"onAction\">\n        {{ id }}\n    </div>\n</template>\n\n<script>\n    import { useDataTracker } from '../data-tracker.js'\n    import { mapState } from 'vuex'\n\n    export default {\n        name: 'DBUIWidget',\n        // we need to inject $socket so that we can send events to Node-RED\n        inject: ['$socket', '$dataTracker'],\n        props: {\n            id: String,    // the id of the widget, as defined by Node-RED\n            props: Object, // the properties for this widget defined in the Node-RED editor\n            state: Object  // the state of this widget, e.g. enabled, visible\n        },\n        computed: {\n            // map our data store such that we can get any data bound to this widget\n            // received on input from Node-RED\n            ...mapState('data', ['messages']), // provides access to `this.messages` where `this.messages[this.id]` is the stored msg for this widget\n        },\n        created () {\n            // setup the widget with default onInput, onLoad and onDynamicProperties handlers\n            this.$dataTracker(this.id)\n        },\n        methods: {\n            onAction () {\n                // we can send any data we need Node-RED through this (optional) message parameter\n                const msg = {\n                    payload: 'hello world'\n                }\n                // send an event to Node-RED to inform it that we've clicked this widget\n                this.$socket.emit('widget-action', this.id, msg)\n            }\n        }\n    }\n</script>\n  \n<style scoped>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Widget with Vue Component\nDESCRIPTION: A complete Vue component example that implements a counter widget with data binding, watchers, computed properties, and event handling. The component sends messages to Node-RED when count reaches multiples of 5.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div>\n        <h2>Counter - loaded: {{ loaded }}</h2>\n        <p>Current Count: {{ count }}</p>\n        <p class=\"my-class\">Formatted Count: {{ formattedCount }}</p>\n        <v-btn @click=\"increase()\">Increment</v-btn>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                loaded: false,\n                count: 0\n            }\n        },\n        watch: {\n            count: function () {\n                if (this.count % 5 === 0) {\n                    this.send({payload: 'Multiple of 5'})\n                }\n            }\n        },\n        computed: {\n            formattedCount: function () {\n                return `${this.count} Apples`\n            }\n        },\n        methods: {\n            increase: function () {\n                this.count++\n            }\n        },\n        mounted() {\n            this.loaded = true\n        },\n        unmounted() {\n        }\n    }\n</script>\n<style>\n    .my-class {\n        color: red;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing ChartJS Polar Area Chart in Node-RED Dashboard UI Template\nDESCRIPTION: Creates a dynamic polar area chart using ChartJS that responds to input from multiple ui-sliders. The implementation includes initialization of the chart, handling dynamic data updates, and managing color-coded data categories. Uses Vue.js component lifecycle hooks and websocket communication for real-time updates.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <canvas ref=\"chart\" />\n</template>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n    export default {\n        mounted() {\n            // register a listener for incoming data\n            this.$socket.on('msg-input:' + this.id, this.onInput)\n\n            // code here when the component is first loaded\n            let interval = setInterval(() => {\n                if (window.Chart) {\n                    // Babylon.js is loaded, so we can now use it\n                    clearInterval(interval);\n                    this.draw()\n                }\n            }, 100);\n        },\n        methods: {\n            draw () {\n                const ctx = this.$refs.chart\n                const data = {\n                    labels: [],\n                    datasets: [{\n                        label: 'Colors',\n                        data: [],\n                        backgroundColor: []\n                    }]\n                }\n                \n                // Render the chart\n                const chart = new Chart(ctx, {\n                    type: 'polarArea',\n                    data: data,\n                    options: {\n                        responsive: true,\n                        scales: {\n                            r: {\n                                pointLabels: {\n                                    display: true,\n                                    centerPointLabels: true,\n                                    font: {\n                                        size: 18\n                                    }\n                                }\n                            }\n                            },\n                            plugins: {\n                            legend: {\n                                position: 'top',\n                            },\n                            title: {\n                                display: true,\n                                text: 'Chart.js Polar Area Chart With Centered Point Labels'\n                            }\n                        }\n                    },\n                });\n                this.chart = chart\n            },\n            onInput (msg) {\n                // in this example, our topics will be colors\n                const color = msg.topic\n\n                // have we seen this color before?\n                const index = this.chart.data.labels.indexOf(color)\n                \n                if (index === -1) {\n                    console.log('new color', color)\n                    // add new dataset for this topic\n                    this.chart.data.labels.push(color)\n                    this.chart.data.datasets[0].data.push(msg.payload)\n                    this.chart.data.datasets[0].backgroundColor.push(color)\n                } else {\n                    // we've already got data for this color, update the value\n                    this.chart.data.datasets[0].data[index] = msg.payload\n                }\n\n                // ensure the chart re-renders\n                this.chart.update()      \n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Data Tables with UI Template and Vuetify in Node-RED Dashboard\nDESCRIPTION: This code demonstrates how to create a customized data table using the ui-template node with Vuetify's Data Table component. It includes search functionality, custom header rendering, and specialized cell formatting with conditional styling based on data values.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- Provide an input text box to search the content -->\n    <v-text-field v-model=\"search\" label=\"Search\" prepend-inner-icon=\"mdi-magnify\" single-line variant=\"outlined\"\n    hide-details></v-text-field>\n    <v-data-table v-model:search=\"search\" :items=\"msg?.payload\">\n      <template v-slot:header.current>\n        <!-- Override how we render the header for the \"current\" column -->\n        <div class=\"text-center\">Center-Aligned</div>\n      </template>\n\n      <template v-slot:item.target=\"{ item }\">\n        <!-- Add a custom suffix to the value for the \"target\" column -->\n        {{ item.target }}°C\n      </template>\n\n      <template v-slot:item.current=\"{ item }\">\n        <!-- Render a Linear Progress Bar for the \"current\" column -->\n        <v-progress-linear v-model=\"item.current\" min=\"15\" max=\"25\" height=\"25\" :color=\"getColor(item)\">\n          <template v-slot:default=\"{ value }\">\n            <strong>{{ item.current }}°C</strong>\n          </template>\n        </v-progress-linear>\n      </template>\n    \n    </v-data-table>\n</template>\n\n<script>\n    export default {\n    data () {\n      return {\n        search: ''\n      }\n    },\n    methods: {\n        // add a function to determine the color of the progress bar given the row's item\n      getColor: function (item) {\n        if (item.current > item.target) {\n          return 'red'\n        } else {\n          return 'green'\n        }\n      }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Registration in Node-RED\nDESCRIPTION: Demonstrates the basic pattern for registering a widget node in Node-RED Dashboard. Shows how to create a node, get group reference, and register the widget with event handlers.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/registration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (RED) {\n    function MyNode (config) {\n        // create node in Node-RED\n        RED.nodes.createNode(this, config)\n        // store reference to our Node-RED node\n        const node = this\n\n        // which group are we rendering this widget\n        const group = RED.nodes.getNode(config.group)\n\n        // an object detailing the events to subscribe to\n        const evts = {}\n\n        // inform the dashboard UI that we are adding this node\n        group.register(node, config, evts)\n    }\n\n    RED.nodes.registerType('ui-mywidget', MyNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Widget Component Structure\nDESCRIPTION: Basic structure of a Vue component for Node-RED Dashboard showing how to access widget properties including ID, props, and state.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div>ID: {{ id }}</div>\n    <div>Name: {{ props.name }}</div>\n    <div>Group: {{ props.group }}</div>\n</template>\n\n<script>\nexport default {\n    props: ['id', 'props', 'state'],\n    mounted () {\n        // runs on load of the widget\n        alert(this.id)\n    }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Button Label Dynamically in Node-RED Dashboard\nDESCRIPTION: This snippet demonstrates how to change the label of a ui-button node dynamically using the msg.ui_update object. It sets a new label for the button at runtime.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/dynamic-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nmsg = {\n    \"ui_update\": {\n        \"label\": \"New Label\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Layout Manager in Vue for Node-RED Dashboard\nDESCRIPTION: This Vue component demonstrates how to create a custom layout manager for Node-RED Dashboard 2.0. It extends a baseline layout, renders widgets dynamically, and uses Vuex for state management. The layout wraps each widget in a Vuetify card component.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- Extend the Baseline Template, and render the page title appropriately -->\n    <BaselineLayout :page-title=\"$route.name\">\n        <!-- Retrieve our widgets assigned to this page (page id = $route.meta.id) -->\n        <div class=\"nrdb-layout--flex\" v-if=\"widgets && widgets[$route.meta.id]\">\n            <!-- Loop over the widgets defined for this page -->\n            <div v-for=\"w in widgets[$route.meta.id]\" :key=\"w.id\">\n                <!-- here we wrap all of our widgets inside a Vuetify v-card -->\n                <v-card variant=\"outlined\" class=\"\">\n                    <!-- draw our widget into the #text slot of the v-card -->\n                    <template #text>\n                        <!-- render the widget's component, passing in the widget id, props and state -->\n                        <component  :is=\"w.component\" :id=\"w.id\" :props=\"w.props\" :state=\"w.state\"/>\n                    </template>\n                </v-card>\n            </div>\n        </div>\n    </BaselineLayout>\n</template>\n\n<script>\n    import BaselineLayout from './Baseline.vue'\n    import { mapState } from 'vuex';\n\n    export default {\n        name: 'LayoutFlex',\n        computed: {\n            // our \"ui\" vue store contains a collection\n            //of widgets mapped by Page ID ($route.meta.id)\n            ...mapState('ui', ['widgets']),\n        },\n        components: {\n            // extend the BaselineLayout component to get\n            // the header and navigation drawer\n            BaselineLayout\n        }\n    }\n</script>\n\n<style scoped>\n/*\n    any CSS you have for this layout can go here,\n    mapped with appropriate CSS classes\n*/\n</style>\n```\n\n----------------------------------------\n\nTITLE: Pre-filling Form Values with JavaScript in Node-RED Dashboard\nDESCRIPTION: Example showing how to pre-fill form fields by sending an object in msg.payload where each key matches a form element's key name. This pattern allows setting default values before displaying the form to the user.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = {\n    \"first_name\": \"John\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with Vuetify in Node-RED Dashboard\nDESCRIPTION: This Vue.js component creates a file upload widget using Vuetify's v-file-input. It allows users to select a file, displays upload progress, and sends the file data to Node-RED for processing. The component includes error checking and handles file reading using FileReader.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- Card for uploading binary file -->\n    <v-card raised color=\"white\">\n        <!-- Card Title -->\n        <v-card-title>Upload binary file to Node-Red</v-card-title>\n        <br>\n        <v-card-text>\n            <!-- File Input -->\n            <v-file-input label=\"Click here to select a file\" show-size v-model=\"uploadFile\">\n            </v-file-input>\n            <!-- Progress Indicator -->\n            <div>Progress: {{ progress }} bytes loaded</div>\n        </v-card-text>\n        <v-card-actions>\n            <v-spacer></v-spacer>\n            <!-- Upload Button -->\n            <v-btn right @click=\"startUpload\">Upload File</v-btn>\n        </v-card-actions>\n    </v-card>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                uploadFile: null, // Holds the selected file\n                progress: 0 // Progress indicator for file upload\n            }\n        },\n        methods: {\n            // Method triggered when Upload File button is clicked\n            startUpload() {\n                // Check if a file is selected\n                if (!this.uploadFile) {\n                    console.warn('No file selected');\n                    return;\n                }\n\n                // Log the selected file information to console\n                console.log('File selected:');\n                console.log(this.uploadFile);\n\n                // Create a FileReader instance to read the file\n                const reader = new FileReader();\n\n                // When the file is read, send it to Node-RED\n                reader.onload = () => {\n                    // Prepare the payload to send\n                    const payload = {\n                        topic: 'upload', // Topic for Node-RED\n                        payload: this.uploadFile, // File content\n                        file: {\n                            name: this.uploadFile.name, // File name\n                            size: this.uploadFile.size, // File size\n                            type: this.uploadFile.type // File type\n                        }\n                    };\n                    \n                    // Send the payload to Node-RED (assuming 'send' method is defined)\n                    this.send(payload);\n                };\n\n                // Track progress of file reading\n                reader.onprogress = (event) => {\n                    this.progress = event.loaded; // Update progress\n                };\n\n                // Read the file as an ArrayBuffer\n                reader.readAsArrayBuffer(this.uploadFile);\n            }\n        },\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete UI Template Example with JavaScript and Styling\nDESCRIPTION: A comprehensive example of a ui-template node combining HTML, JavaScript, and CSS to create an interactive button that sends data to Node-RED and responds to messages. Includes event handling and socket communication.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- Any HTML can go here -->\n    <button class=\"my-class\" onclick=\"onClick()\">My Button</button>\n</template>\n\n<script>\n    /* Write any JavaScript here */\n    // add our onClick function to the window object to make it accessible by the HTML <button>\n    window.onClick = function () {\n        alert('Button has been clicked')\n    }\n\n    // Use send() function to pass on data back into Node-RED:\n    this.send('Component has loaded')\n\n    // Subscribe to the incoming msg's\n    this.$socket.on('msg-input:' + this.id, function(msg) {\n        // do stuff with the message\n        alert('message received: ' + msg.payload)\n    })\n</script>\n\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Widget-Change Event Handling in Node-RED Dashboard\nDESCRIPTION: This snippet shows how the widget-change event handles updating message payloads. It takes a previously received message and merges it with a newly received value, updating the payload while preserving other properties.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/events.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payload\": 30,\n    \"topic\": \"on-change\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payload\": 40,\n    \"topic\": \"on-change\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Subflow Environment Variables in Node-RED Dashboard 2.0\nDESCRIPTION: Demonstrates how to use environment variables defined in a subflow to dynamically set properties on child nodes, such as a ui-slider's label.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/subflows.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n${label}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Static Bar Chart with ChartJS in Node-RED Dashboard\nDESCRIPTION: Illustrates how to create a custom static 2D bar chart using ChartJS within a UI Template node in Node-RED Dashboard.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <canvas ref=\"chart\" />\n</template>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n    export default {\n        mounted() {\n            // code here when the component is first loaded\n            let interval = setInterval(() => {\n                if (window.Chart) {\n                    // Babylon.js is loaded, so we can now use it\n                    clearInterval(interval);\n                    this.draw()\n                }\n            }, 100);\n        },\n        methods: {\n            draw () {\n                const ctx = this.$refs.chart\n                new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n                        datasets: [{\n                            label: '# of Votes',\n                            data: [12, 19, 3, 5, 2, 3],\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            y: {\n                                beginAtZero: true\n                            }\n                        }\n                    }\n                });\n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Line Chart with ChartJS in Node-RED Dashboard\nDESCRIPTION: Demonstrates how to create a dynamic line chart that updates with incoming data using ChartJS within a UI Template node in Node-RED Dashboard.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <canvas ref=\"chart\" />\n</template>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n    export default {\n        mounted() {\n            // register a listener for incoming data\n            this.$socket.on('msg-input:' + this.id, this.onInput)\n\n            // check with ChartJS has loaded\n            let interval = setInterval(() => {\n                if (window.Chart) {\n                    // clear the check for ChartJS\n                    clearInterval(interval);\n                    // draw our initial chart\n                    this.draw()\n                }\n            }, 100);\n        },\n        methods: {\n            draw () {\n                // get reference to the <canvas /> element\n                const ctx = this.$refs.chart\n                \n                // Render the chart\n                const chart = new Chart(ctx, {\n                    type: 'line',\n                    data: {\n                        datasets: [{\n                            label: \"My Label\",  // label for the single line we'll render\n                            data: []            // start with no data\n                        }]\n                    },\n                    options: {\n                        animation: false, // don't run the animation for incoming data\n                        responsive: true, // ensure we auto-resize the content\n                        scales: {\n                            x: {\n                                type: 'time' // in this example, we're rendering timestamps\n                            }\n                        },\n                        parsing: {\n                            xAxisKey: 'time', // the property to render on the x-axis\n                            yAxisKey: 'value' // the property to render on the y-axis\n                        },\n                        plugins: {\n                            legend: {\n                                position: 'top',\n                            },\n                            title: {\n                                display: true,\n                                text: 'Chart.js Line Chart'\n                            }\n                        }   \n                    },\n                });\n                // make this available to all elements of the component\n                this.chart = chart\n            },\n            onInput (msg) {\n                // add a new data point ot our existing dataset\n                this.chart.data.datasets[0].data.push({\n                    time: (new Date()).getTime(),\n                    value: msg.payload\n                }) \n                // ensure the chart re-renders\n                this.chart.update()      \n            }\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Data Tracker Implementation\nDESCRIPTION: Implementation of the Data Tracker functionality for handling standard input/load events in a widget.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    inject: ['$dataTracker'],\n    // rest of your vue component here\n    created () {\n        this.$dataTracker(this.id)\n        // we can override the default events if we want to with\n        // this.$dataTracker(this.id, myOnInputFunction, myOnLoadFunction, myOnDynamicPropertiesFunction)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Properties in Vue Component for Dashboard Widget\nDESCRIPTION: Example of how to handle dynamic properties in a Vue component for a Dashboard widget, using computed properties and custom methods for property management.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/core-widgets.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // ...\n    computed: {\n        label () {\n            return this.getProperty('label')\n        }\n    },\n    created () {\n        // we can define a custom onDynamicProperty handler for this widget\n        useDataTracker(this.id, null, null, this.onDynamicProperty)\n    // ...,\n    methods () {\n        // ...,\n        onDynamicProperty (msg) {\n            // standard practice to accept updates via msg.ui_update\n            const updates = msg.ui_update\n            // use globally available API to update the dynamic property\n            this.updateDynamicProperty('label', updates.label)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Case Sensitivity in Vuetify Data Tables with Node-RED Dashboard\nDESCRIPTION: This implementation shows how to handle case sensitivity issues when using template overrides in Vuetify's Data Table. It demonstrates techniques for mapping differently cased property names to HTML-friendly formats using the headers option and value transformations.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div id=\"app\">\n        <v-text-field v-model=\"search\" label=\"Search\" prepend-inner-icon=\"mdi-magnify\" single-line variant=\"outlined\"\n            hide-details></v-text-field>\n        <v-data-table v-model:search=\"search\" :headers=\"headers\" :items=\"msg?.payload\" class=\"elevation-1\" :items-per-page=\"20\">\n            <template v-slot:header.lowercase>\n                <div>custom <b>html</b> title</div>\n            </template>\n            <template v-slot:item.snake_case=\"{ item }\">\n                ${{ 3 * item.snake_case }}\n            </template>\n        </v-data-table>\n    </div>\n</template>\n\n<script>\n    export default {\n    data () {\n      return {\n        search: '',\n        headers: [\n            // a basic header definition\n            { title: 'kebab-case', key: 'kebab-case' },\n            { title: 'slithering', key: 'snake_case'},\n            // we can also skip defining a title here,\n            // and use v-slot (see in HTML above) instead\n            { key: 'lowercase' },\n            // if we need to transform due to case sensitivity, we can do so like this:\n            { title: 'Date & Time', key: 'camel-case', value: item => item['camelCase']},\n            // we can also add JS transformation to our values too\n            { title: 'All Caps', key: 'macro-case', value: item => item['MACRO_CASE'].toUpperCase()}\n        ],\n      }\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding World Map in Node-RED Dashboard using ui-template\nDESCRIPTION: This Vue.js template demonstrates how to embed the Node-RED World Map node into Dashboard 2.0 using an iframe within a ui-template node. It includes CSS to ensure the map fills the available space.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <iframe src=\"/worldmap\" class=\"worldmap\"></iframe>\n</template>\n<style>\n  .worldmap {\n    width: 100%;\n    height: 100%;  \n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Datastore Get Operation\nDESCRIPTION: Function to retrieve the latest message for a specific node ID from the datastore.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndatastore.get(node.id)\n```\n\n----------------------------------------\n\nTITLE: Handling Widget-Send Events in Node-RED Dashboard\nDESCRIPTION: This snippet demonstrates how the widget-send event, typically used by ui-template, handles different types of input. It shows how non-object values are automatically wrapped into a msg.payload object, and how object inputs are directly used as the msg object.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/events.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsend(10)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payload\": 10 \n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsend({ myVar: 10, topic: \"my-topic\" })\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"myVar\": 10,\n    \"topic\": \"my-topic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Event Handling with Node-RED Integration\nDESCRIPTION: Examples of sending messages to Node-RED flows using click events and v-model binding with Vuetify components.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<v-btn @click=\"send({payload: 'Hello World'})\">Send Hello World</v-btn>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<v-rating hover :length=\"5\" :size=\"32\" v-model=\"value\"\n    active-color=\"primary\" @update:model-value=\"send({payload: value})\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading External Dependencies in UI Template Node\nDESCRIPTION: Shows how to load external JavaScript libraries in a ui-template node and handle the asynchronous nature of script loading. Uses an interval to check when the library becomes available for use.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- Template Content Here -->\n</template>\n\n<script src=\"https://cdn.babylonjs.com/babylon.js\"></script>\n\n<script>\nfunction init () {\n    alert('Babylon.js is loaded')\n}\n\n// run this code when the widget is built\nlet interval = setInterval(() => {\n    if (window.BABYLON) {\n        // call an init() to use BABYLON\n        init();\n        // Babylon.js is loaded, so we can now use it\n        clearInterval(interval);\n    }\n}, 100);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Dashboard Components in Node-RED\nDESCRIPTION: Demonstrates how to programmatically enable or disable pages, groups, and widgets in the dashboard while maintaining their visibility, preventing user interaction with specific elements.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = {\n    pages: {\n        enable: ['<Page Id>'],\n        disable: ['<Page Id>']\n    },\n    groups: {\n        enable: ['<Group Id>'],\n        disable: ['<Group Id>']\n    },\n    widgets: {\n        enable: ['<Widget Id>'],\n        disable: ['<Widget Id>']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Variables to HTML Attributes in UI Template Node\nDESCRIPTION: Demonstrates how to bind variables to HTML attributes using the colon (:) prefix in a ui-template node. This method allows treating the content inside quotes as JavaScript expressions, enabling dynamic attribute binding.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p :class=\"msg.payload\">Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content Example in Node-RED Dashboard\nDESCRIPTION: An example of markdown syntax that can be used with the ui-markdown component, including headers, code blocks, lists, hyperlinks, and tables with dynamic message injection.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown Content\n\n## Secondary Header\n\n### Third Header\n\nParagraph here...\n\ninline `<code-example />` with other text either side\n\n```js\n// multiline\nfunction () {\n    console.log('hello world')\n}\n```\n\n- List Item 1\n- List Item 1\n- List Item 1\n- List Item 1\n\n[Hyperlink](https://news.bbc.co.uk)\n\n---\n\n> Lorum Ipsum Quotation Over two lines \n\n| Header 1 | Header 2 |\n|-|-|\n| `msg.payload` | {{ msg.payload || 'Placeholder' }} |\n```\n\n----------------------------------------\n\nTITLE: Formatting Live Sensor Data for Node-RED Dashboard Charts\nDESCRIPTION: Demonstrates how to structure live sensor data for automatic plotting with calculated timestamps in Node-RED Dashboard charts.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    \"topic\": \"Sensor A\" \n    \"payload\": {\n        \"value\": 3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Visibility of Dashboard Elements in Node-RED\nDESCRIPTION: Shows how to programmatically show or hide pages and groups in the dashboard using various identifier formats, providing flexible control over UI component visibility.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = {\n    pages: {\n        show: ['<Page Name>',\n               '<Page Id>'\n               {page: '<Page Name>'},\n               {page: '<Page Id>'}],\n        hide: ['<Page Id>']\n    },\n    groups: {\n        show: ['<Group Name>',\n               '<Group Id>'\n               '<Page Name>:<Group Name>',\n               '<Page Id>:<Group Name>',\n               {group: '<Group Name>'},\n               {group: '<Group Id>'},\n               {page: '<Page Name>', group: '<Group Name>'},\n               {page: '<Page Id>', group: '<Group Name>'}],\n        hide: ['<Group Id>']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Page View Event in Node-RED Dashboard\nDESCRIPTION: Example of the payload emitted by the ui-event node when a user views a page. It includes page details, query parameters, and client information.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-event.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    topic: '$pageview',\n    payload: {\n        page: {\n            name: 'Page Name',\n            path: '/page/path'\n            id: '1234',\n            theme: 'dark',\n            layout: 'default',\n            _groups: []\n        },\n        query: {\n            key: 'value'\n        }\n    },\n    _client: {\n        socketId: '1234',\n        socketIp: '127.0.0.1',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nested JSON Data in Node-RED Dashboard Charts\nDESCRIPTION: Shows an example of nested JSON data structure that can be used for plotting in Node-RED Dashboard charts.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    \"payload\": {\n        \"id\": \"Dataset 1\",\n        \"value\": 3,\n        \"nested\": {\n            \"value\": 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SocketIO Event Handler in Node-RED\nDESCRIPTION: Server-side implementation of custom SocketIO event handlers in Node-RED.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nevts = {\n    onSocket: {\n        // subscribe to custom events\n        'my-custom-event': function (conn, id, msg) {\n            // emit a msg in Node-RED from this node\n            node.send(msg)\n        }\n    }\n}\ngroup.register(node, config, evts)\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Hooks for Dashboard Plugin\nDESCRIPTION: JavaScript implementation of runtime hooks for Node-RED Dashboard plugin, including setup, message handling, and connection validation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/plugins/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(RED) {\n    RED.plugins.registerPlugin(\"node-red-dashboard-2-<plugin-name>\", {\n        type: \"node-red-dashboard-2\",\n        hooks: {\n            onSetup: (RED, config, req, res) => {\n                return {\n                    socketio: {\n                        path: `${config.path}/socketio`, \n                    }\n                }\n            },\n            onInput: (msg) => {\n                return msg\n            },\n            onAction: (conn, id, msg) => {\n                msg.myField = \"Hello World\"\n                return msg\n            },\n            onChange: (conn, id, msg) => {\n                msg.myField = \"Hello World\"\n                return msg\n            },\n            onLoad: (conn, id, msg) => {\n                msg.myField = \"Hello World\"\n                return msg\n            },\n            onAddConnectionCredentials: (conn, msg) => {\n                msg._client.socketIp = conn.request.socket.remoteAddress\n                return msg\n            },\n            onIsValidConnection: (conn, msg) => {\n                if (msg._client?.socketId) {\n                    return msg._client.socketId === conn.id\n                }\n                return true\n            },\n            onCanSaveInStore: (msg) => {\n                if (msg._client?.socketId) {\n                    return false\n                }\n                return true\n            }\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Class Dynamically in Node-RED Dashboard\nDESCRIPTION: This example shows how to dynamically update the CSS class of a ui-button node using the msg.ui_update object. It appends a new class to the widget's container.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/dynamic-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nmsg = {\n    \"ui_update\": {\n        \"class\": \"my-class\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Teleport Implementation for Page Title\nDESCRIPTION: Demonstrates using Vue's Teleport feature to render content in the Dashboard's header area. Shows how to add buttons to the app bar title area.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <Teleport v-if=\"mounted\" to=\"#app-bar-title\">\n        <v-btn>Button 1</v-btn>\n        <v-btn>Button 2</v-btn>\n    </Teleport>\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                mounted: false\n            }\n        },\n        mounted() {\n            this.mounted = true\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Conditional Attribute Binding Based on msg.payload in UI Template Node\nDESCRIPTION: Demonstrates conditional attribute binding in ui-template nodes where the class is determined by the value of msg.payload. Uses ternary operator to apply different classes based on condition evaluation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- \n  Change color based on the value of msg.payload: \n  * When msg.payload equals \"error\", set text to the predefined `text-error` color. \n  * Otherwise, set text to the predefined `text-info` color.\n-->\n<p :class=\"msg.payload === 'error' ? 'text-error' : 'text-info'\">Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Complex Data Series Injection for Dashboard 2.0 Charts\nDESCRIPTION: Example showing how to inject multiple data series into a Dashboard 2.0 chart. This format allows for categorizing data points into different series using a 'category' property that can be mapped to the chart's series configuration.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/migration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = [{\n    \"category\": \"cat-1\",\n    \"value\": 2,\n    \"date\": \"2023-10-23\"\n}, {\n    \"category\": \"cat-2\",\n    \"value\": 3,\n    \"date\": \"2023-10-23\"\n}, {\n    \"category\": \"cat-1\",\n    \"value\": 1,\n    \"date\": \"2023-10-24\"\n}, {\n    \"category\": \"cat-2\",\n    \"value\": 6,\n    \"date\": \"2023-10-24\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Page in Node-RED Dashboard\nDESCRIPTION: Shows how to programmatically navigate to a specific page using ui-control. The payload can be either a simple string with the page name or an object with page name and optional query parameters.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// String\nmsg.payload = '<Page Name>'\n\n// Object\nmsg.payload = {\n    page: '<Page Name>',\n}\n```\n\n----------------------------------------\n\nTITLE: Using msg.payload in Attribute Values in UI Template Node\nDESCRIPTION: Shows how to use msg.payload as part of an attribute value in ui-template nodes. The example demonstrates concatenating the payload value with a string to create dynamic class names.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Change color based on msg.payload. Expects payload to be either \"error\", \"warning\" or \"info\" -->`\n<p :class=\"'text-' + msg.payload\">Hello World</p>\n<!-- or with string literals: -->\n<p :class=\"`text-${msg.payload}`\">Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Chart Data Injection for Dashboard 2.0\nDESCRIPTION: Example JavaScript showing how to inject data into a Dashboard 2.0 chart with single data points. This format uses a simple value or object with x/y values, where time can be automatically added.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/migration.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = <value>\n\n```\n\n----------------------------------------\n\nTITLE: Text Interpolation with Mustache Syntax in UI Template Node\nDESCRIPTION: Shows how to interpolate variables into HTML text content using the mustache syntax ({{ }}). This allows inserting dynamic values from the msg object directly into the text of an element.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello {{ msg.payload }}</p>\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Chart in Node-RED Dashboard\nDESCRIPTION: Demonstrates how to append data to an existing chart using a custom action property in the message object.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    \"action\": \"append\",\n    \"payload\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-RED Dashboard Settings for Larger File Uploads\nDESCRIPTION: This JavaScript snippet demonstrates how to increase the maximum HTTP buffer size in the Node-RED settings.js file. This allows for larger file uploads in the Dashboard, increasing the limit from the default 1MB to 100MB in this example.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndashboard: {\n    maxHttpBufferSize: 1e8 // size in bytes, example: 100 MB\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Multi-Selection for ui-dropdown in Node-RED Dashboard\nDESCRIPTION: Code snippet showing how to programmatically select multiple options in a ui-dropdown by passing an array of values as msg.payload when 'Allow Multiple' is enabled.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-dropdown.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = [\"option1\", \"option2\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Table with Multiple Rows in Node-RED\nDESCRIPTION: Example showing how to format data for initializing a table with multiple rows. The payload should be an array of objects where each object represents a row with named columns.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-table.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"colA\": \"A\",\n    \"colB\": \"Hello\",\n    \"colC\": 3\n}, {\n    \"colA\": \"B\",\n    \"colB\": \"World\",\n    \"colC\": 5\n}]\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Page with Query Parameters in Node-RED Dashboard\nDESCRIPTION: Demonstrates how to navigate to a page while passing query parameters that will be appended to the URL, creating a parameterized page navigation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = {\n    page: '<Page Name>',\n    query: {\n        hello: 'world'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening External URLs in New Tab from Node-RED Dashboard\nDESCRIPTION: Demonstrates how to open an external URL in a new browser tab or window by specifying the target property in the payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = {\n    url: 'https://nodered.org',\n    target: '_blank'\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Switch Widget onChange Handler\nDESCRIPTION: Example of a custom onChange event handler implementation for a switch widget, showing status updates and value synchronization across clients.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/registration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Handle the input from the widget\n * @param {object} msg - the last known msg received (prior to this new value)\n * @param {boolean} value - the updated value sent by the widget\n * @param {Socket} conn - socket.io socket connecting to the server\n * @param {String} id - widget id sending the action\n */\nonChange: async function (msg, value, conn, id) {\n    // ensure we have latest instance of the widget's node\n    const wNode = RED.nodes.getNode(node.id)\n\n    node.status({\n        fill: value ? 'green' : 'red',\n        shape: 'ring',\n        text: value ? states[1] : states[0]\n    })\n\n    // retrieve the assigned on/off value\n    const on = RED.util.evaluateNodeProperty(config.onvalue, config.onvalueType, wNode)\n    const off = RED.util.evaluateNodeProperty(config.offvalue, config.offvalueType, wNode)\n    msg.payload = value ? on : off\n\n    // sync this change to all clients with the same widget\n    const exclude = [conn.id] \n    base.emit('widget-sync:' + id, msg, node, exclude)\n\n    // simulate Node-RED node receiving an input\n    wNode.send(msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Node-RED Data Store Access\nDESCRIPTION: Accessing and using the Node-RED data store in a widget's JavaScript file.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst group = RED.nodes.getNode(config.group)\nconst base = group.getBase()\n\nbase.stores.data.save(base, node, msg)\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Ticks with CSS Variables in Node-RED Dashboard\nDESCRIPTION: CSS code to customize the appearance of slider ticks by overriding default styles using CSS variables. Separate classes are defined for horizontal and vertical sliders with different scaling and color properties.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-slider.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.my-slider-horizontal.nrdb-ui-slider{\n    --tick-scaleX: 0.25;\n    --tick-scaleY: 4;\n    --tick-color: rgba(var(--v-theme-primary),0.7);\n}\n.my-slider-vertical.nrdb-ui-slider{\n    --tick-scaleX: 4;\n    --tick-scaleY: 0.25; \n    --tick-color: orange;\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Single Row to UI Table in Node-RED\nDESCRIPTION: Format for adding a single row of data to an existing table. The payload should be a single object with properties matching the table columns.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-table.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"colA\": \"A\",\n    \"colB\": \"Hello\",\n    \"colC\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Event to Specific UI-Event Node in Vue\nDESCRIPTION: Example of emitting a custom event to a specific ui-event node using the $socket.emit function in a Vue template.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-event.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<v-btn @click=\"$socket.emit('ui-event', 'ui-event-node-id', msg)\">Send Custom Event</v-btn>\n```\n\n----------------------------------------\n\nTITLE: Datastore Save Operation\nDESCRIPTION: Function to save a message to the datastore for a specific node and base configuration.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndatastore.save(base, node, msg)\n```\n\n----------------------------------------\n\nTITLE: Clearing a radio group selection\nDESCRIPTION: Example of how to clear the current selection in a radio group by sending an empty string as the payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-radio-group.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = \"\"\n```\n\n----------------------------------------\n\nTITLE: Vue Teleport for App Bar Actions\nDESCRIPTION: Shows how to add custom actions to the right-hand side of the Dashboard's App Bar using Vue's Teleport feature.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <Teleport v-if=\"mounted\" to=\"#app-bar-actions\">\n        <v-btn>My Action</v-btn>\n    </Teleport>\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                mounted: false\n            }\n        },\n        mounted() {\n            this.mounted = true\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.IO Middleware for Dashboard\nDESCRIPTION: Example of adding custom Socket.IO middleware to the Dashboard configuration. This allows for validation or processing of websocket connections between the Dashboard page and Node-RED.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/settings.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ndashboard: {\n    ioMiddleware: (socket, next) => {\n        if (isValid(socket.request)) {\n            next();\n        } else {\n            next(new Error(\"invalid\"));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Statestore Get All Properties\nDESCRIPTION: Function to retrieve all dynamic properties for a specific node ID.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstatestore.getAll(node.id)\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Dashboard View in Node-RED\nDESCRIPTION: Demonstrates how to force a refresh of the current dashboard view by sending an empty string payload to the ui-control node.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = \"\"\n```\n\n----------------------------------------\n\nTITLE: Vue Teleport for Image Display\nDESCRIPTION: Example of using Teleport to display an image in the app bar title area, replacing the default page name with dynamic content from msg.payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <Teleport v-if=\"mounted\" to=\"#app-bar-title\">\n        <img height=\"32px\" :src=\"msg.payload\"></img>\n    </Teleport>\n</template>\n<script>\n    export default {\n        data() {\n            return {\n                mounted: false\n            }\n        },\n        mounted() {\n            this.mounted = true\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Dashboard Property to Settings File\nDESCRIPTION: How to add the dashboard property to the Node-RED settings.js file. This property contains all Dashboard 2.0 specific configurations.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndashboard: {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Node-RED Message Handling in Vue Component\nDESCRIPTION: Implementation of SocketIO event handlers for receiving messages from Node-RED in a Vue component.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    props: ['id', 'props', 'state'],\n    // rest of your vue component here\n    mounted () {\n        this.$socket.on('msg-input' + this.id, (msg) => {\n            // do something with the msg\n        })\n    },\n    unmounted () {\n        // unsubscribe from the event when the widget is destroyed\n        this.$socket.off('msg-input:' + this.id)\n    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dashboard Client Disconnection Events in Node-RED\nDESCRIPTION: Shows the message format emitted by ui-control when a dashboard client disconnects from Node-RED, allowing flows to react to connection loss events.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    payload: 'lost',\n    socketid: '<socketid>',\n    socketip: '<socketip>'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Page Change Events in Node-RED Dashboard\nDESCRIPTION: Shows the message format emitted by ui-control when a user changes the active page in the dashboard, providing information about the page navigation event.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    payload: 'change',\n    socketid: '<socketid>',\n    socketip: '<socketip>',\n    tab: '<Page Index>',\n    name: '<Page Name>'\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Widget Output Format in JavaScript\nDESCRIPTION: The output format of the File Upload widget when a file is uploaded. It includes the file content as a Buffer in the payload property, file metadata in the file property, and any topic value.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-file-input.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    payload: <Buffer>,\n    file: {\n        name: <String>,\n        type: <String>,\n        size: <Number>\n    },\n    topic: <String>,\n}\n```\n\n----------------------------------------\n\nTITLE: Table Selection Event Output Format in Node-RED\nDESCRIPTION: Format of the output message when a row is selected or checkboxes are clicked. Includes the full row data and the type of action performed.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-table.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"payload\": \"<full row object>\",\n    \"action\": \"row_click\" | \"multiselect\"\n}\n```\n\n----------------------------------------\n\nTITLE: Node-RED Message Display Component\nDESCRIPTION: Shows how to display incoming Node-RED messages in a Vue component template.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div>\n        <h2>Latest <code>msg</code> received:</h2>\n        <pre>{{ msg }}</pre>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Custom Event to All UI-Event Nodes in Vue\nDESCRIPTION: Example of broadcasting a custom event to all ui-event nodes using the $socket.emit function in a Vue template.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-event.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<v-btn @click=\"$socket.emit('ui-event', 'all', msg)\">Send Custom Event</v-btn>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum File Size in Node-RED Settings\nDESCRIPTION: Configuration example for increasing the maximum file upload size in the Node-RED settings.js file. This allows handling files larger than the default 5MB limit by modifying the maxHttpBufferSize property.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-file-input.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ndashboard: {\n    maxHttpBufferSize: 1e8 // size in bytes, example: 100 MB\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Widget Component Template\nDESCRIPTION: Basic Vue.js component structure using Options API for Dashboard widgets\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div>{{ myVar }}</div>\n</template>\n\n<script>\nexport default {\n    props: ['id', 'props', 'state'],\n    data () {\n        return {\n            myVar: 'Hello World'\n        }\n    },\n    computed: {\n        myComputedProp () {\n            return this.myVar + '!'\n        }\n    },\n    methods: {\n        myMethod () {\n            alert(this.myVar)\n        }\n    },\n    mounted () {\n        alert('Component has mounted')\n    },\n    unmounted () {\n        alert('Component has been removed')\n    }\n}\n</script>\n\n<style>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Sending values programmatically to select an option\nDESCRIPTION: Code showing how to programmatically select an option from a radio group by sending its value in msg.payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-radio-group.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = \"option1\"\n```\n\n----------------------------------------\n\nTITLE: Handling Dashboard Client Connection Events in Node-RED\nDESCRIPTION: Shows the message format emitted by ui-control when a new dashboard client connects to Node-RED, providing connection status information.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmsg = {\n    payload: 'connect',\n    socketid: '<socketid>',\n    socketip: '<socketip>'\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Single Selection for ui-dropdown in Node-RED Dashboard\nDESCRIPTION: Code snippet showing how to programmatically select a single option in a ui-dropdown by passing its value as msg.payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-dropdown.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = \"option1\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component for UI Group Examples\nDESCRIPTION: Vue setup script that imports required components and initializes example data for UI group demonstrations. Uses Vue 3 composition API to manage group dialog examples.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/config/ui-group.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n    import FlowViewer from '../../components/FlowViewer.vue'\n    import ExampleGroupDialog from '../../examples/group-dialog-type.json'\n\n    const examples = ref({\n      'group-dialog': ExampleGroupDialog\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operations in Text Interpolation in UI Template Node\nDESCRIPTION: Demonstrates performing mathematical operations within text interpolation in ui-template nodes. The example shows multiplying a value by 100 to display a percentage.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Percentage {{ msg.payload * 100 }}%</p>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure for Custom Data Tables in Node-RED Dashboard\nDESCRIPTION: This JSON structure illustrates the expected data format for the custom data table implementation. It contains room information with target and current temperature values that are used in the table rendering and conditional formatting.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"room\": \"Living Room\",\n        \"id\": \"1234\",\n        \"target\": 18.1,\n        \"current\": 20\n    },\n    {\n        \"room\": \"Bathroom Room\",\n        \"id\": \"5678\",\n        \"target\": 19.5,\n        \"current\": 18\n    },\n    {\n        \"room\": \"Kitchen Room\",\n        \"id\": \"9101\",\n        \"target\": 18.1,\n        \"current\": 17.6\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Clearing Selection in ui-dropdown for Node-RED Dashboard\nDESCRIPTION: Code snippet showing how to clear all selections in a ui-dropdown by passing an empty array as msg.payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-dropdown.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = []\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Properties in Node-RED Dashboard Widget\nDESCRIPTION: Example of how to set dynamic properties for a Node-RED Dashboard widget on the server-side, using the state store's set function within the beforeSend event.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/core-widgets.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst evts = {\n    onChange: true,\n    beforeSend: function (msg) {\n        if (msg.ui_update) {\n            const update = msg.ui_update\n            if (typeof update.options !== 'undefined') {\n                // dynamically set \"options\" property\n                statestore.set(group.getBase(), node, msg, 'options', update.options)\n            }\n        }\n        return msg\n    }\n}\n\n// inform the dashboard  UI that we are adding this node\ngroup.register(node, config, evts)\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Options for ui-form in Node-RED Dashboard\nDESCRIPTION: JSON configuration for dropdown options that can be dynamically passed to a ui-form element. Each option includes the dropdown name it belongs to, the value to be stored when selected, and the label displayed to users.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"dropdown\": \"Dropdown Name\",\n    \"value\": \"1\",\n    \"label\": \"Option 1\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Dashboard Widget Package Configuration\nDESCRIPTION: JSON configuration in package.json for defining widget properties and dependencies\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"node-red-dashboard-2\": {\n        \"version\": \"0.8.0\",\n        \"widgets\": {\n            \"ui-example\": {\n                \"output\": \"ui-example.umd.js\",\n                \"component\": \"UIExample\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Store Latest Message Function for Testing\nDESCRIPTION: A Node-RED function node that stores the latest message in a global context to enable testing widget output using the checkOutput helper command.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.set('msg', msg)\nreturn msg;\n```\n\n----------------------------------------\n\nTITLE: Client Data Object Structure Example\nDESCRIPTION: Demonstrates the basic structure of the msg._client object that contains client connection details in Node-RED Dashboard 2.0. This object contains at minimum the socketId and can be extended with additional client information.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_client\": {\n        \"socketId\": \"unique-socket-identifier\"\n        // Additional client data can be added here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a password input field in a ui-form element. The configuration specifies the password input type, label text, key identifier, and required status.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"password\",\n    \"label\": \"Password\",\n    \"key\": \"password\",\n    \"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing UI Table Data in Node-RED\nDESCRIPTION: Command to clear all data from the table by sending an empty array as the payload.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-table.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with Reactive References\nDESCRIPTION: Sets up Vue component with reactive data using ref() and imports required components. Defines widget categories and makes them reactive for use in the template.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n    import WidgetCard from '../components/WidgetCard.vue'\n    import WidgetGrid from '../components/WidgetGrid.vue'\n    const widgets = ref({\n        general,\n        form,\n        data,\n        events\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Static HTML in UI Text Widget\nDESCRIPTION: Example of HTML code that can be injected as msg.payload to create a clickable link in a UI Text widget. This demonstrates how to render formatted content with links.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-text.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://flowfuse.com\" target=\"_blank\">FlowFuse</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a checkbox input in a ui-form element. The configuration defines the checkbox type, label text, and key identifier for capturing boolean values.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"checkbox\",\n    \"label\": \"Subscribe to Newsletter\",\n    \"key\": \"newsletter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Dashboard Plugin Features\nDESCRIPTION: HTML/JavaScript code for defining client-side plugin features including sidebar tabs and authentication settings in Node-RED Dashboard.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/plugins/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\">\n    RED.plugins.registerPlugin('node-red-dashboard-2-<plugin-name>', {\n        type: 'node-red-dashboard-2',\n        tabs: [\n            {\n                id: 'my-tab-id',\n                label: 'My Tab',\n                init (base, parent) {\n                    // add some content to the tab\n                }\n            }\n        ],\n        auth: true/false,\n        description: ''\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Statestore Get Single Property\nDESCRIPTION: Function to retrieve a specific property value for a node ID.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstatestore.getProperty(node.id, property)\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Access in Vue Component\nDESCRIPTION: Demonstrates how to access URL query parameters in a Vue component using the built-in $route object.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-template.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <div>\n        <p>Query Parameter: {{ $route.query }}</p>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum HTTP Buffer Size for Dashboard\nDESCRIPTION: Example of configuring the maximum HTTP buffer size for the Dashboard. This setting controls the maximum message size the socket can send, which is important when uploading larger files.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/settings.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndashboard: {\n    maxHttpBufferSize: 1e8 // size in bytes, example: 100 MB\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a switch toggle input in a ui-form element. The configuration specifies the switch type, label text, and key identifier for capturing boolean values in a toggle format.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"switch\",\n    \"label\": \"Enable Notifications\",\n    \"key\": \"notifications\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Water Tank Gauge Segments in JavaScript\nDESCRIPTION: Default segment configuration when switching to a \"Water Tank\" type gauge. This defines color gradients and threshold values for the water level visualization.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-gauge.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[{\n    color: '#A8F5FF',\n    from: 0\n}, {\n    color: '#55DBEC',\n    from: 15\n}, {\n    color: '#53B4FD',\n    from: 35\n}, {\n    color: '#2397D1',\n    from: 50\n}]\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Components and Imports\nDESCRIPTION: Vue script setup block that imports required components and initializes reactive references for example data patterns.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n    import FlowViewer from './components/FlowViewer.vue'\n    import ExampleDesignPatterns from '../examples/design-patterns.json'\n    import RecommendedTutorials from './components/RecommendedTutorials.vue'\n\n    const examples = ref({\n      'design-patterns': ExampleDesignPatterns,\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Select in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a dropdown selection field in a ui-form element. The configuration specifies the dropdown type, label text, and key identifier.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"dropdown\",\n    \"label\": \"Dropdown\",\n    \"key\": \"selection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiline Text Area in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a multiline text area in a ui-form element. This includes the input type, label, key identifier, required status, and the number of rows to display.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"multiline\",\n    \"label\": \"Name\",\n    \"key\": \"name\",\n    \"required\": true,\n    \"rows\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Example Cypress Test Specification for Button Groups\nDESCRIPTION: A sample Cypress test specification file showing how to test button group widgets in Node-RED Dashboard, including value emission and styling tests.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Node-RED Dashboard 2.0 - Button Groups', () => {\n    // anything here will run before all of the indivudal tests below\n    beforeEach(() => {\n        // here we can use our helper command to load a flow.json\n        cy.deployFixture('dashboard-button-groups')\n        // then make sure we're starting on the correct page for each test\n        cy.visit('/dashboard/page1')\n    })\n\n    // it('') specifies a new test\n    it('can be clicked and emit a string value representing the option', () => {\n        // clickAndWait is a helper command that clicks on an element and waits for a set time\n        cy.clickAndWait(cy.get('button').contains('Option 3'))\n        \n        // checkOutput then utilises the Helper APIs we have in place tho check what output came from the button\n        cy.checkOutput('msg.topic', 'first-row')\n        cy.checkOutput('msg.payload', 'option_3')\n    })\n\n    it('allows for definition of custom colouring for options', () => {\n        // Click the last button in the button group\n        cy.clickAndWait(cy.get('#nrdb-ui-widget-ui-button-group-colors button').last())\n\n        // check the CSS is applied correctly\n        cy.get('#nrdb-ui-widget-ui-button-group-colors button').last()\n            .should('have.css', 'background-color', 'rgb(217, 255, 209)')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: External Dependency Usage in Vue Component\nDESCRIPTION: Example of importing and using external npm dependencies in a Vue component.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport toTitleCase from 'to-title-case'\n\nexport default {\n    // rest of component here\n    computed: {\n        titleCase () {\n            return toTitleCase(this.input.title)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Input Element in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a text input field in a ui-form element. The configuration specifies the input type, label text, unique key identifier, and whether the field is required.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"text\",\n    \"label\": \"Name\",\n    \"key\": \"name\",\n    \"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data for Scatter Plot in JSON\nDESCRIPTION: This JSON snippet defines a dataset for a scatter plot with multiple series. Each data point includes a series identifier, x-coordinate, and y-coordinate.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"series\": \"A\", \"x\": 5, \"y\": 84 },\n    { \"series\": \"A\", \"x\": 9, \"y\": 10 },\n    { \"series\": \"A\", \"x\": 11, \"y\": 70 },\n    { \"series\": \"B\", \"x\": 12, \"y\": 28 },\n    { \"series\": \"B\", \"x\": 15, \"y\": 35 },\n    { \"series\": \"B\", \"x\": 26, \"y\": 42 },\n    { \"series\": \"C\", \"x\": 20, \"y\": 12 },\n    { \"series\": \"C\", \"x\": 24, \"y\": 54 },\n    { \"series\": \"C\", \"x\": 27, \"y\": 60 },\n    { \"series\": \"C\", \"x\": 30, \"y\": 66 }]\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Middleware for Dashboard\nDESCRIPTION: Example of adding custom Express middleware to the Dashboard configuration. This can be used for authentication, logging, or other request processing before the dashboard handles the request.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndashboard: {\n    middleware: (request, response, next) => {\n        console.log(`New dashboard request from ${request.ip} to ${request.path}`)\n        next()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Node-RED Store Module\nDESCRIPTION: Shows how to import store modules in a Node-RED node's JavaScript file.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = require('<path>/<to>/store.js')\n```\n\n----------------------------------------\n\nTITLE: Dynamic Mermaid Chart with Message Injection\nDESCRIPTION: Example of a Mermaid pie chart that uses mustache templating to inject dynamic values from incoming messages into the chart definition.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-markdown.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Here is some Markdown\n\nand here is a definition for a Mermaid Chart:\n\n```mermaid\npie title NETFLIX\n         \"Time spent looking for movie\" : {{ msg.payload }}\n         \"Time spent watching it\" : 10\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Financial Data for Grouped Bar Chart in JSON\nDESCRIPTION: This JSON snippet defines financial data for a grouped bar chart. Each object represents a year with quarterly data, suitable for side-by-side or stacked bar representation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"year\": 2021, \"Q1\": 115, \"Q2\": 207, \"Q3\": 198, \"Q4\": 163 },\n    { \"year\": 2022, \"Q1\": 170, \"Q2\": 200, \"Q3\": 230, \"Q4\": 210 },\n    { \"year\": 2023, \"Q1\": 86, \"Q2\": 140, \"Q3\": 180, \"Q4\": 138 }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Node-RED Settings File\nDESCRIPTION: The fundamental structure of the Node-RED settings.js file, which is formatted as a JavaScript module with exports. This is where all Node-RED configuration settings are defined.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n    // Lots of settings...\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Dynamic Properties in HTML for Editor\nDESCRIPTION: This HTML snippet demonstrates how to document dynamic properties for the Node-RED editor. It includes a description and details of the 'options' and 'class' properties.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/core-widgets.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h3>Dynamic Properties (Inputs)</h3>\n<p>Any of the following can be appended to a <code>msg.</code> in order to override or set properties on this node at runtime.</p>\n<dl class=\"message-properties\">\n    <dt class=\"optional\">options <span class=\"property-type\">array</span></dt>\n    <dd>\n        Change the options available in the dropdown at runtime\n        <ul>\n            <li><code>Array&lt;string&gt;</code></li>\n            <li><code>Array&lt;{value: String}&gt;</code></li>\n            <li><code>Array&lt;{value: String, label: String}&gt;</code></li>\n        </ul>\n    </dd>\n    <dt class=\"optional\">class <span class=\"property-type\">string</span></dt>\n    <dd>Add a CSS class, or more, to the Button at runtime.</dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Defining Election Data for Grouped Bar Chart in JSON\nDESCRIPTION: This JSON snippet defines election data for a grouped bar chart. Each object represents a candidate's performance in a specific year, allowing for flexible grouping by candidate or year.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"candidate\": \"Dave\", \"year\": 2019, \"votes\": 100 },\n    { \"candidate\": \"Sarah\", \"year\": 2019, \"votes\": 90 },\n    { \"candidate\": \"Chris\", \"year\": 2019, \"votes\": 160 },\n    { \"candidate\": \"Lucy\", \"year\": 2019, \"votes\": 125 },\n    { \"candidate\": \"Dave\", \"year\": 2024, \"votes\": 20 },\n    { \"candidate\": \"Sarah\", \"year\": 2024, \"votes\": 170 },\n    { \"candidate\": \"Chris\", \"year\": 2024, \"votes\": 150 },\n    { \"candidate\": \"Lucy\", \"year\": 2024, \"votes\": 60 }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Quarterly Earnings Data for Pie/Doughnut Chart in JSON\nDESCRIPTION: This JSON snippet defines quarterly earnings data suitable for a pie or doughnut chart. Each object represents a quarter's earnings for a specific year.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"year\": 2021, \"quarter\": \"Q1\", \"earnings\": 115 },\n    { \"year\": 2021, \"quarter\": \"Q2\", \"earnings\": 120 },\n    { \"year\": 2021, \"quarter\": \"Q3\", \"earnings\": 100 },\n    { \"year\": 2021, \"quarter\": \"Q4\", \"earnings\": 180 }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a number input field in a ui-form element. The configuration defines the number input type, label text, key identifier, and required status.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"number\",\n    \"label\": \"Age\",\n    \"key\": \"age\",\n    \"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: Vue script setup code that imports components and example chart configurations. Defines a reference object containing various chart examples.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n    import AddedIn from '../../components/AddedIn.vue';\n    import TryDemo from \"./../../components/TryDemo.vue\"\n    \n    import { ref } from 'vue'\n    import FlowViewer from '../../components/FlowViewer.vue'\n    import ExampleChartLineTimestamp from '../../examples/chart-line-timestamp.json'\n    import ExampleChartLineMultiple from '../../examples/chart-line-multiple.json'\n    import ExampleChartBarSWCharacters from '../../examples/chart-bar-sw-characters.json'\n    import ExampleChartBarFinance from '../../examples/chart-bar-finance-grouped.json'\n    import ExampleChartBarElection from '../../examples/chart-bar-election-grouped.json'\n    import ExampleChartPieDoughnut from '../../examples/chart-pie-doughnut.json'\n    import ExampleChartHistogramBins from '../../examples/chart-histogram-bins.json'\n    import ExampleChartHistogramCategories from '../../examples/chart-histogram-categories.json'\n    import ExampleChartHistogramSeries from '../../examples/chart-histogram-series.json'\n    import ExampleChartScatter from '../../examples/chart-scatter-grouped.json'\n    import ExampleCustomChartLine from '../../examples/custom-chart-slider-line.json'\n    import ExampleCustomChartPolar from '../../examples/custom-chart-slider-polar.json'\n\n    const examples = ref({\n      'chart-line-timestamp': ExampleChartLineTimestamp,\n      'chart-line-multiple': ExampleChartLineMultiple,\n      'chart-bar-sw-characters': ExampleChartBarSWCharacters,\n      'chart-bar-finance': ExampleChartBarFinance,\n      'chart-bar-election': ExampleChartBarElection,\n      'chart-pie-doughnut': ExampleChartPieDoughnut,\n      'chart-histogram-bins': ExampleChartHistogramBins,\n      'chart-histogram-categories': ExampleChartHistogramCategories,\n      'chart-histogram-series': ExampleChartHistogramSeries,\n      'chart-scatter-grouped': ExampleChartScatter,\n      'custom-chart-line': ExampleCustomChartLine,\n      'custom-chart-polar': ExampleCustomChartPolar\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Next or Previous Page in Node-RED Dashboard\nDESCRIPTION: Shows how to navigate to the next or previous page in the dashboard sequence using simple string payloads with relative indicators.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Next Page\nmsg.payload = \"+1\"\n\n// Previous Page\nmsg.payload = \"-1\"\n```\n\n----------------------------------------\n\nTITLE: Basic Mermaid Chart Integration in Markdown\nDESCRIPTION: Example showing how to integrate a Mermaid chart in the ui-markdown component using a code block with mermaid type specification.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-markdown.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Here is some Markdown\n\nand here is a definition for a Mermaid Chart:\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for an email input field in a ui-form element. The configuration defines the email input type, label text, key identifier, and required status.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"email\",\n    \"label\": \"E-Mail Address\",\n    \"key\": \"email\",\n    \"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Player Component Template\nDESCRIPTION: Vue template markup showing the TryDemo wrapper component with the ui-audio heading. Provides the basic structure for the audio player documentation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-audio.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<TryDemo href=\"audio-example\">\n\n# Audio `ui-audio`\n\n</TryDemo>\n```\n\n----------------------------------------\n\nTITLE: Accessing Widget Messages in Vue Component\nDESCRIPTION: Example of a Vue component accessing the last message received by a widget using the data store and Vuex mapState helper.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <pre>this.messages[this.id]</pre>\n</template>\n<script>\nexport default {\n    computed: {\n        ...mapState('data', ['messages'])\n    }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Mermaid Charts with Dynamic Content\nDESCRIPTION: Technique for completely replacing a Mermaid chart definition using incoming message payloads, requiring only the initial code fence in the editor.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-markdown.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\n{{ msg.payload }}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a time input field in a ui-form element. The configuration specifies the time input type, label text, key identifier, and required status.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"time\",\n    \"label\": \"Time of Birth\",\n    \"key\": \"tob\",\n    \"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the AddedIn Component in Vue.js\nDESCRIPTION: Vue.js script setup block that imports the AddedIn component, which is used to indicate features added in specific versions of the software.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/pwa.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n    import AddedIn from '../components/AddedIn.vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Statestore Set Property\nDESCRIPTION: Function to set a dynamic property value for a specific node.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstatestore.set(base, node, msg, property, value)\n```\n\n----------------------------------------\n\nTITLE: Styling Filled Slider Ticks in Node-RED Dashboard\nDESCRIPTION: CSS code snippet that specifically targets and styles the filled portion of a slider track. This allows for visual differentiation between the filled and unfilled sections of the slider.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-slider.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.my-slider-horizontal.nrdb-ui-slider .v-slider-track__tick--filled{\n    --tick-color:violet;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Input in ui-form for Node-RED Dashboard\nDESCRIPTION: JSON configuration for a date input field in a ui-form element. The configuration defines the date input type, label text, key identifier, and required status.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-form.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"date\",\n    \"label\": \"Date of Birth\",\n    \"key\": \"dob\",\n    \"required\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Statestore Reset Operation\nDESCRIPTION: Function to remove all dynamic properties for a specific node ID.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstatestore.reset(node.id)\n```\n\n----------------------------------------\n\nTITLE: Styling Groups in Node-RED Dashboard\nDESCRIPTION: This CSS snippet shows how to customize the appearance of groups in the Dashboard by targeting the .nrdb-ui-group and .v-card classes. In this example, it increases the border width of all groups.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* All .v-card's inside a group */\n.nrdb-ui-group .v-card {\n    border-width: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Socket Event Handler\nDESCRIPTION: Shows how to implement custom Socket.IO event handling for externally developed widgets in Node-RED Dashboard.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/registration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst evts = {\n    onSocket: {\n        'my-custom-event': function (id, msg) {\n            console.log('my-custom-event', id, msg)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UI Control Node Reference\nDESCRIPTION: Reference to the UI control node with inline code formatting.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/config/ui-link.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<code>ui-control</code>\n```\n\n----------------------------------------\n\nTITLE: Datastore Append Operation\nDESCRIPTION: Function to append a message to the history of messages for a specific node.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndatastore.append(base, node, msg)\n```\n\n----------------------------------------\n\nTITLE: Navigating to External URLs from Node-RED Dashboard\nDESCRIPTION: Shows how to trigger navigation to external websites or resources from within the dashboard, with the option to specify if it should open in a new tab.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-control.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmsg.payload = {\n    url: 'https://nodered.org'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Node-RED Dashboard Plugin\nDESCRIPTION: Package.json configuration for a Node-RED Dashboard 2.0 plugin, including required metadata and plugin registration.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/plugins/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"node-red-dashboard-2-<plugin-name>\",\n    \"version\": \"<x.y.z>\",\n    \"description\": \"<describe your plugin>\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"test\": \"<run your tests here>\"\n    },\n    \"author\": {\n        \"name\": \"<your name>\",\n        \"url\": \"<your website/gh profile>\"\n    },\n    \"node-red\": {\n        \"plugins\": {\n            \"node-red-dashboard-2-<plugin-name>\": \"index.js\"\n        }\n    },\n    \"license\": \"Apache-2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Datastore Clear Operation\nDESCRIPTION: Function to clear all stored messages for a specific node ID.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/state-management.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndatastore.clear(node.id)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Styling\nDESCRIPTION: Example of CSS styling implementation in a Vue component using scoped styles.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n.ui-example-wrapper {\n    padding: 10px;\n    margin: 10px;\n    border: 1px solid black;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Finding Node-RED Settings File Location via Log Output\nDESCRIPTION: Example log output showing the location of the Node-RED settings file, which is typically located in the ~/.node-red directory. This information helps users locate the correct file to modify.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n12 Sep 13:31:37 - [info] Settings file  : /Users/nol/.node-red/settings.js\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Background Image to Node-RED Dashboard\nDESCRIPTION: This CSS snippet demonstrates how to add a custom background image or texture to the main content area of the Dashboard using the .v-main class.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.v-main {\n    background-image: url(\"\\thttps://www.transparenttextures.com/patterns/batthern.png\");\n    background-repeat: repeat;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Notification Content Example\nDESCRIPTION: Example HTML payload for creating a notification with styled heading and paragraph text in Node-RED Dashboard. Shows how to inject custom HTML with formatting into the notification widget.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-notification.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h3>Generated Notification</h3><p>This is custom HTML injected into <b>Node-RED</b></p>\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Drawer in Node-RED Dashboard\nDESCRIPTION: This CSS snippet demonstrates how to override the default styling of the side navigation drawer in the Dashboard by targeting the .v-navigation-drawer class. It changes the background color and text color.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.v-navigation-drawer {\n    background-color: white;\n    color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Button Testing Example with Output Verification\nDESCRIPTION: A Cypress test case demonstrating how to test buttons in the Dashboard, verifying both string and JSON payloads are correctly emitted when buttons are clicked.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/testing.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Node-RED Dashboard 2.0 - Buttons', () => {\n    beforeEach(() => {\n        cy.deployFixture('dashboard-buttons') // reads in a flow.json and deploys it to the local Node-RED instance\n        cy.visit('/dashboard/page1')\n    })\n\n    it('can be clicked and outputs the correct payload & topic are emitted', () => {\n        // Emitting strings\n        cy.clickAndWait(cy.get('button').contains('Button 1 (str)'))\n        // checkOutput calls our helper endpoints to checks the values against the stored msg\n        cy.checkOutput('msg.payload', 'button 1 clicked')\n        cy.checkOutput('msg.topic', 'button-str-topic')\n\n        // Emitting JSON\n        cy.clickAndWait(cy.get('button').contains('Button 1 (json)'))\n        cy.checkOutput('msg.payload.hello', 'world')\n        cy.checkOutput('msg.topic', 'button-json-topic')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Dashboard Widget Profiles in Vue Component\nDESCRIPTION: Vue setup script that imports JSON configuration profiles for various Dashboard widgets used in the migration guide. These profiles are used to display comparisons between Dashboard 1.0 and 2.0 widgets.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/migration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n    import MigrationWidgetProfile from '../components/MigrationWidgetProfile.vue'\n\n    import uiButton from './migration/ui_button.json'\n    import uiChart from './migration/ui_chart.json'\n    import uiControl from './migration/ui_control.json'\n    import uiDropdown from './migration/ui_dropdown.json'\n    import uiForm from './migration/ui_form.json'\n    import uiGauge from './migration/ui_gauge.json'\n    import uiLink from './migration/ui_link.json'\n    import uiSlider from './migration/ui_slider.json'\n    import uiSwitch from './migration/ui_switch.json'\n    import uiTemplate from './migration/ui_template.json'\n    import uiText from './migration/ui_text.json'\n    import uiTextInput from './migration/ui_text_input.json'\n    import uiToast from './migration/ui_toast.json'\n\n    const widgets = ref({\n        'ui_button': uiButton,\n        'ui_chart': uiChart,\n        'ui_control': uiControl,\n        'ui_dropdown': uiDropdown,\n        'ui_form': uiForm,\n        'ui_gauge': uiGauge,\n        'ui_link': uiLink,\n        'ui_slider': uiSlider,\n        'ui_switch': uiSwitch,\n        'ui_template': uiTemplate,\n        'ui_text': uiText,\n        'ui_text_input': uiTextInput,\n        'ui_toast': uiToast\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS to Dynamically Updated Button in Node-RED Dashboard\nDESCRIPTION: This CSS snippet demonstrates how to style a button that has been dynamically updated with a custom class. It changes the background color of the button to red.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/dynamic-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-class button.v-btn {\n    background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue.js Setup Script in HTML\nDESCRIPTION: This snippet sets up a Vue.js script block, which is likely used for reactive functionality within the dashboard configuration page. The script is empty, suggesting that additional Vue.js logic may be added later.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/config/ui-theme.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Node-RED Widget Registration\nDESCRIPTION: JavaScript code for registering a widget node with Node-RED and Dashboard\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(RED) {\n    function UIExampleNode(config) {\n        RED.nodes.createNode(this, config);\n        var node = this;\n        const group = RED.nodes.getNode(config.group)\n        group.register(node, config, evts)\n    }\n    RED.nodes.registerType(\"ui-example\", UIExampleNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Audio Component\nDESCRIPTION: Vue component setup code that imports the ref composable from Vue and includes a TryDemo component. Used to demonstrate the audio player functionality.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-audio.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n\n    import TryDemo from \"./../../components/TryDemo.vue\"\n    \n</script>\n```\n\n----------------------------------------\n\nTITLE: Example Mermaid Chart Content for Dynamic Override\nDESCRIPTION: Sample content for msg.payload that can be used to override a Mermaid chart definition, showing a pie chart without the surrounding code fence.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-markdown.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npie title NETFLIX\n         \"Time spent looking for movie\" : {{ msg.payload }}\n         \"Time spent watching it\" : 10\n```\n\n----------------------------------------\n\nTITLE: Vue Component with VueX State Management\nDESCRIPTION: Implementation of VueX state management in a Vue component for data storage.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <!-- Retrieve the latest data values from widget with <id> -->\n    {{ messages[id] }}\n</template>\n<script>\n// import mapState from VueX\nimport { mapState } from 'vuex'\n\nexport default {\n    props: ['id', 'props', 'state'],\n    // ... rest of your component here\n    computed: {// map the store's messages to our own Vue component\n        ...mapState('data', ['messages'])\n    },\n    mounted () {\n        // alerts the most recent message on load of the widget\n        alert(this.messages[this.id])\n    }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import and Setup\nDESCRIPTION: Basic Vue component setup script that imports the TryDemo component for demonstration purposes.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-switch.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import TryDemo from \"./../../components/TryDemo.vue\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font in Node-RED Dashboard\nDESCRIPTION: This CSS snippet shows how to change the default font for the entire Dashboard by overriding the font-family property at the body level.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/template-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    font-family: monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Load Event Handler\nDESCRIPTION: Implementation of the widget load event handler for initializing widget state.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    props: ['id', 'props', 'state'],\n    // rest of your component here\n    mounted () {\n        this.$socket.on('widget-load' + this.id, (msg) => {\n            // do something with the msg\n        })\n    },\n    unmounted () {\n        // unsubscribe from the event when the widget is destroyed\n        this.$socket.off('widget-load:' + this.id)\n    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component Setup Script\nDESCRIPTION: Simple Vue script setup block that imports the TryDemo component for demonstration purposes.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-number-input.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import TryDemo from \"./../../components/TryDemo.vue\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Node-RED Testing Instance Dependencies\nDESCRIPTION: Command to install the dependencies for the local Node-RED testing instance that will be used with Cypress tests.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./cypress/fixtures/user-dir/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Node-RED Dashboard Repository\nDESCRIPTION: Commands for cloning the forked repository, installing dependencies, and building the dashboard.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your_github_account>/node-red-dashboard.git\ncd /node-red-dashboard\nnpm install\nexport NODE_ENV=development\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import and Demo Setup\nDESCRIPTION: Imports required Vue components and sets up the demo section for the button group documentation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-button-group.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import AddedIn from '../../components/AddedIn.vue';\n    import TryDemo from \"./../../components/TryDemo.vue\"\n</script>\n\n<TryDemo href=\"button-group\">\n\n# Button `ui-button-group` <AddedIn version=\"1.3.0\" />\n\n</TryDemo>\n```\n\n----------------------------------------\n\nTITLE: Installing Node-RED Dashboard into Node-RED\nDESCRIPTION: Commands for navigating to the Node-RED directory, uninstalling existing dashboard, and installing the forked version.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/.node-red\nnpm uninstall @flowfuse/node-red-dashboard\nnpm install <path_to_your_forked_dashboard>\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Changes to GitHub\nDESCRIPTION: Git commands for creating a new branch, committing changes, and pushing to GitHub.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b name_of_your_new_branch\ngit commit -a -m \"Description of your changes\"\ngit push origin\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Data Arrays for Dashboard Widgets\nDESCRIPTION: Defines arrays containing widget configurations for different categories including general widgets, form elements, data visualization, and event handling components. Each widget object contains properties for name, widget type, image path, and description.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nconst general = [{\n        name: 'Audio',\n        widget: 'ui-audio',\n        image: '/images/node-examples/ui-audio.png',\n        description: 'Adds a audio player to your dashboard.'\n    }, {\n        name: 'Button',\n        widget: 'ui-button',\n        image: '/images/node-examples/ui-button.png',\n        description: 'Adds a clickable button to your dashboard.'\n    }, {\n        name: 'Markdown',\n        widget: 'ui-markdown',\n        image: '/images/node-examples/ui-markdown.png',\n        description: 'Renders dynamic Markdown (including Mermaid Charts).'\n    }]\n```\n\n----------------------------------------\n\nTITLE: Building Production Version of Node-RED Dashboard UI (Shell)\nDESCRIPTION: Compiles and minifies the Node-RED Dashboard UI project for production deployment. This command creates optimized and compressed files ready for serving in a production environment.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/ui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Third-Party Widget\nDESCRIPTION: Commands for installing dependencies and building the widget's UMD file\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nexport NODE_ENV=development\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Widget Event Handler Structure\nDESCRIPTION: Shows the structure of event handlers object used in widget registration. Defines the possible event types that can be handled by a widget.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/guides/registration.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst evts = {\n    onAction:   // boolean\n    onChange:   // boolean || function\n    beforeSend: // function\n    onInput:    // function\n    onError:    // function\n    onSocket    // object\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Node-RED Dashboard UI (Shell)\nDESCRIPTION: Starts a development server with hot-reloading for the Node-RED Dashboard UI. This command is used during development to see real-time changes in the browser.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/ui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Development Server\nDESCRIPTION: Command to run the documentation locally for development and testing.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Properties in YAML for Online Documentation\nDESCRIPTION: This YAML snippet demonstrates how to define dynamic properties in the frontmatter of a node's documentation file. It specifies the structure for 'Options' and 'Class' properties.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/core-widgets.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndynamic:\n    Options:\n        payload: msg.options\n        structure: [\"Array<String>\", \"Array<{value: String}>\", \"Array<{value: String, label: String}>\"]\n    Class:\n        payload: msg.class\n        structure: [\"String\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Properties Table in Markdown\nDESCRIPTION: This Markdown snippet shows how to include a dynamic properties table in the node's documentation using a custom component.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/core-widgets.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Dynamic Properties\n\n<DynamicPropsTable/>\n```\n\n----------------------------------------\n\nTITLE: Demo link and title for Spacer widget\nDESCRIPTION: Creates a demo link with TryDemo component and displays the widget title with version information using the AddedIn component indicating the widget was added in version 1.9.0.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-spacer.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<TryDemo href=\"spacer\">\n\n# Spacer `ui-spacer` <AddedIn version=\"1.9.0\" />\n\n</TryDemo>\n```\n\n----------------------------------------\n\nTITLE: Vue.js Script Setup for Dashboard Homepage\nDESCRIPTION: Vue.js script setup that imports components and defines functionality for the homepage. It includes a clipboard copy function for the installation command and manages the copied state with Vue's reactive ref.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue';\n\n    import HomeExtension from './components/HomeExtension.vue';\n    import RecommendedTutorials from './components/RecommendedTutorials.vue';\n    import RecommendedReading from './components/RecommendedReading.vue';\n    import FlowFuseAdvert from './components/FlowFuseAdvert.vue';\n    import DashboardExamples from './components/DashboardExamples.vue';\n    import CopyIcon from './components/icons/CopyIcon.vue';\n\n    const copied = ref(false); \n\n    function copy () {\n        navigator.clipboard.writeText('@flowfuse/node-red-dashboard');\n        copied.value = true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing HubSpot Form with JavaScript\nDESCRIPTION: JavaScript code that ensures the HubSpot script is loaded before creating a form. It uses a recursive function to check for the HubSpot object and then initializes a form with specific portal and form IDs.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction checkHbspt() { if (typeof window.hbspt === 'undefined') { setTimeout(checkHbspt, 50); return; } else { hbspt.forms.create({\n    target: '#ebook-form',\n    region: 'eu1',\n    portalId: '26586079',\n    formId: '372e557c-9f90-48e8-81da-d7e462f8ef55'\n  }); } ;}; checkHbspt()\n```\n\n----------------------------------------\n\nTITLE: Installing Widget in Node-RED\nDESCRIPTION: Commands for installing the widget locally in Node-RED\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/third-party.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/.node-red\nnpm install /path/to/your/local/node-red-dashboard-example-node-folder\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for UI Text Documentation\nDESCRIPTION: Vue component setup that imports necessary components and examples for the UI Text documentation page. It defines reference to example JSON configurations that demonstrate different UI Text use cases.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-text.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n    import FlowViewer from '../../components/FlowViewer.vue'\n    import ExampleSuffix from '../../examples/ui-text-suffix.json'\n    import ExampleHTMLInjection from '../../examples/ui-text-html-injection.json'\n    import TryDemo from \"./../../components/TryDemo.vue\"\n\n    const examples = ref({\n      'suffix': ExampleSuffix,\n      'html-injection': ExampleHTMLInjection\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Button Widget Components in Vue\nDESCRIPTION: This Vue script setup initializes components and data for the Button widget documentation. It imports example data and components for demonstrating button functionality.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-button.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n\n    import ExampleButtonHold from '../../examples/ui-button-hold.json'\n\n    import TryDemo from \"./../../components/TryDemo.vue\"\n    import FlowViewer from '../../components/FlowViewer.vue'\n    \n    const examples = ref({\n      'hold': ExampleButtonHold\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Node-RED Dashboard UI (Shell)\nDESCRIPTION: Installs all required dependencies for the Node-RED Dashboard UI project using npm. This command should be run before starting development or building the project.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing TryDemo Component in Vue.js\nDESCRIPTION: This code snippet imports the TryDemo component from a relative path, likely used to provide an interactive demo of the text input widget.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-text-input.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import TryDemo from \"./../../components/TryDemo.vue\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running the Test Server for Node-RED Dashboard\nDESCRIPTION: Command to start the Node-RED test server that runs at http://localhost:1881 with Dashboard 2.0 installed.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cy:server\n```\n\n----------------------------------------\n\nTITLE: Importing Vue components for Spacer documentation\nDESCRIPTION: Imports AddedIn and TryDemo Vue components for use in the documentation page. These components provide version information and a demo link for the Spacer widget.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-spacer.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import AddedIn from '../../components/AddedIn.vue';\n    import TryDemo from \"./../../components/TryDemo.vue\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering TryDemo Component with Text Input Link\nDESCRIPTION: This code snippet renders the TryDemo component, passing a 'text-input' href prop, and wraps the widget title in the component.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-text-input.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<TryDemo href=\"text-input\">\n\n# Text Input `ui-text-input`\n\n</TryDemo>\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress Test Runner\nDESCRIPTION: Command to open the Cypress test runner interface for running individual E2E tests against the Dashboard.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/contributing/widgets/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cy:open\n```\n\n----------------------------------------\n\nTITLE: UI Link Code Reference\nDESCRIPTION: Code reference showing the ui-link configuration node usage with inline code formatting.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/config/ui-link.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code>ui-link</code>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import for Version Indicator\nDESCRIPTION: Script setup block importing the AddedIn component used to display version information in the documentation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/layouts/types/notebook.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import AddedIn from '../../components/AddedIn.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AddedIn Component in Vue\nDESCRIPTION: A Vue script setup block that imports the AddedIn component for displaying version information in the documentation.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/layouts/types/tabs.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import AddedIn from '../../components/AddedIn.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing the AddedIn Component in Vue\nDESCRIPTION: This Vue script setup block imports the AddedIn component from the components directory. This component is used in the documentation to indicate when features were added to specific versions.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/sidebar.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import AddedIn from '../components/AddedIn.vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Number Input Component Demo Template\nDESCRIPTION: Vue template that implements the TryDemo component with the number-input demonstration.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-number-input.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<TryDemo href=\"number-input\">\n\n# Number Input `ui-number-input`\n\n</TryDemo>\n```\n\n----------------------------------------\n\nTITLE: Properties table component for Spacer widget\nDESCRIPTION: Renders a properties table component that displays the configurable properties of the Spacer widget based on the YAML frontmatter defined at the top of the page.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-spacer.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable/>\n```\n\n----------------------------------------\n\nTITLE: Vue Template Markup\nDESCRIPTION: Vue template markup showing the layout structure for the toggle switch documentation, including the TryDemo component and main heading.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/widgets/ui-switch.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<TryDemo href=\"switch\">\n\n# Toggle Switch `ui-switch`\n\n</TryDemo>\n```\n\n----------------------------------------\n\nTITLE: UI Base Code Reference\nDESCRIPTION: Reference to the UI base component with inline code formatting.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/config/ui-link.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<code>ui-base</code>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: Empty Vue setup script block used for component initialization.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/nodes/config/ui-link.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Legacy Dashboard 1.0 Chart Data Format (Not Supported)\nDESCRIPTION: Example of the Dashboard 1.0 chart data format that is currently not supported in Dashboard 2.0. This shows the previously used structure with predefined series and data arrays.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/migration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[{\n    \"series\": [\"A\", \"B\"],\n    \"data\": [\n        [\n            { \"x\": 1504029632890, \"y\": 5 },\n            { \"x\": 1504029636001, \"y\": 4 },\n            { \"x\": 1504029638656, \"y\": 2 }\n        ],\n        [\n            { \"x\": 1504029633514, \"y\": 6 },\n            { \"x\": 1504029636622, \"y\": 7 },\n            { \"x\": 1504029639539, \"y\": 6 }\n        ]\n    ],\n    \"labels\": [\"\"]\n}]\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with External Dependencies\nDESCRIPTION: Initial Vue component setup that imports required components and example JSON files for multi-tenancy demonstrations. Uses Vue's composition API with script setup syntax.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/docs/user/multi-tenancy.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n    import { ref } from 'vue'\n    import AuthProvider from '../components/AuthProvider.vue'\n    import FlowViewer from '../components/FlowViewer.vue'\n    import ExampleSlider from '../examples/multi-tenancy.json'\n    import ExampleForm from '../examples/multi-tenancy-form.json'\n\n    const examples = ref({\n      'multi-tenant-slider': ExampleSlider,\n      'multi-tenant-form': ExampleForm\n    })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Linting and Fixing Node-RED Dashboard UI Code (Shell)\nDESCRIPTION: Runs the linter on the Node-RED Dashboard UI project files, identifying and potentially fixing code style issues. This helps maintain code quality and consistency across the project.\nSOURCE: https://github.com/flowfuse/node-red-dashboard/blob/main/ui/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```"
  }
]