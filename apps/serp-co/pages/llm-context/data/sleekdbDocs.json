[
  {
    "owner": "sleekdb",
    "repo": "docs",
    "content": "TITLE: Inserting Data into SleekDB in PHP\nDESCRIPTION: This snippet inserts an article (represented as an associative array) into the 'news' store. The `insert` method returns the inserted data, including a unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Document - PHP\nDESCRIPTION: This code snippet demonstrates the method for inserting a new document into the store. It takes an associative array of data as input and returns the inserted document with a unique _id. The function persists this data into a file in the data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Find All Documents\nDESCRIPTION: Retrieves all documents of that store.  Takes optional parameters for ordering (`orderBy`), limiting the number of results (`limit`), and offsetting the start of the results (`offset`). Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet updates documents in a SleekDB store using the `QueryBuilder` class. It constructs a query to filter documents based on location or age, orders them by '_id', and then updates the selected documents by setting the 'status' field to 'VIP'. The result is then encoded and outputted as a JSON response. It depends on the SleekDB library and its autoload functionality.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates inserting an article (represented as an associative array) into the \"news\" store. The `insert` method automatically adds a unique `_id` property to the inserted data. The `$results` variable will contain the inserted data including the new `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration in PHP\nDESCRIPTION: This code initializes a SleekDB store with custom configurations, including auto-caching, cache lifetime, timeout, primary key, and search settings. The $configuration array defines the desired settings, which are passed as the third parameter to the \\SleekDB\\Store constructor. This allows for store-wide customization of SleekDB's behavior.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// default configurations\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users in PHP\nDESCRIPTION: This example demonstrates updating multiple users' names using a loop after retrieving them with `findBy`. It retrieves all users with the name 'Josh', changes their name to 'Luke Bowman', and then uses the `update()` method to update all of them.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Complex Deletion Criteria in SleekDB (PHP)\nDESCRIPTION: This example demonstrates a complex `deleteBy()` usage, mirroring an SQL WHERE clause: `WHERE ( name = \"Joshua Edwards\" OR name = \"Mark Schiffer\" ) AND ( age > 30 OR age < 10 )`.  It showcases nested criteria arrays and the use of 'AND' and 'OR' operators.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB Store PHP\nDESCRIPTION: Inserts a new item into the SleekDB store. An associative array `$newsInsertable` is created with the data to be inserted. The `insert()` method is called on the `$newsStore` object, passing the array as an argument. The result is stored in the `$results` variable.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// An array that we want to insert.\n$newsInsertable = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"The unlocked biggest Pixel 2...\"\n];\n$results = $newsStore->insert( $newsInsertable );\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store using the `SleekDB\\Store` class.  It initializes a store named 'news' within a 'database' directory.  It requires the SleekDB library to be installed and available in the PHP environment.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents\nDESCRIPTION: Creates/Inserts many documents in the store. Returns the inserted documents with their new and unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Inserting a User into SleekDB Store\nDESCRIPTION: This snippet demonstrates inserting a new user into the 'users' store. It calls the `insert()` method on the `$userStore` object, passing an associative array containing user data such as name, email, and avatar URLs. The avatar data is structured as a nested array with keys 'sm' and 'lg' representing small and large image URLs respectively.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Documents PHP\nDESCRIPTION: This snippet demonstrates how to update documents based on a given query using the `update()` method. The first example updates the status of all users in London to 'VIP'. The second example updates a nested field (address.street) for users in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Complex Delete Condition in PHP\nDESCRIPTION: This example demonstrates how to delete documents based on a complex condition using the deleteBy() method. The condition is equivalent to a SQL WHERE clause: `WHERE ( name = \"Joshua Edwards\" OR name = \"Mark Schiffer\" ) AND ( age > 30 OR age < 10 )`. It shows how to combine multiple conditions with AND/OR operators.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Complex WHERE Deletion in SleekDB (PHP)\nDESCRIPTION: This code demonstrates deleting users based on a complex WHERE statement using the `deleteBy()` method.  The example translates the SQL `WHERE ( name = \"Joshua Edwards\" OR name = \"Mark Schiffer\" ) AND ( age > 30 OR age < 10 )` into a SleekDB `deleteBy()` call.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Store PHP\nDESCRIPTION: Inserts a new document (news article) into the 'news' store using the `insert` method. The article data is passed as an associative array, with keys representing the fields and values representing the data. The `insert` method automatically adds a unique '_id' field to the inserted data. The result is the inserted data with its unique '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents in SleekDB\nDESCRIPTION: This code snippet demonstrates how to insert multiple documents into a SleekDB store using the `insertMany()` method. It initializes the store, defines an array of new users, inserts these users into the 'users' store, and outputs the result as a JSON response. It requires SleekDB and autoload.php.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\"\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\"\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Document\nDESCRIPTION: Creates/Inserts a new document in the store or updates an existing one if it already exists. Parameters: `$data` (array) - an associative array representing the document data. Returns the inserted/updated document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nfunction updateOrInsert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Insert a Single Document in SleekDB\nDESCRIPTION: This PHP snippet demonstrates how to insert a single document into a SleekDB store using the `insert` method. It prepares a PHP array representing user data and inserts it into the 'users' store, returning the inserted document with an automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents with Complex Criteria in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch documents from a SleekDB store using complex criteria with `findBy()`.  It finds news articles where the author is 'John' OR 'Mark' AND the topic is LIKE 'School%' OR 'Work%'. The results are ordered by title ascending, limited to 10, and offset by 20.  Returns an array of documents matching the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Example\nDESCRIPTION: Example of inserting a single document into a SleekDB store using the `insert` method. It shows how to prepare a PHP array representing the data and then insert it using `$userStore->insert($user)`. The resulting `$user` variable will contain the inserted data including the automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store\nDESCRIPTION: This PHP snippet initializes a SleekDB store named 'news' within the specified data directory. If the store does not exist, it will be created automatically.  It uses the `SleekDB\\Store` class and requires the SleekDB library to be included.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Initialize Store PHP\nDESCRIPTION: Initializes a SleekDB store named 'news' in the specified database directory. If the store does not exist, it will be created automatically. The second parameter `$databaseDirectory` specifies where the database will be stored. Optionally, a configuration array can be passed as the third parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: Complex Delete Query using deleteBy() in SleekDB\nDESCRIPTION: This example demonstrates a more complex deletion using a nested array of conditions. It combines `OR` and `AND` operations to specify more precise deletion criteria, simulating a SQL WHERE clause.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder search() Example 1 - PHP\nDESCRIPTION: Demonstrates using the `search()` method of the `QueryBuilder` class to search through multiple fields in the 'news' store. It shows how to sort the results by relevance (searchScore) and exclude the searchScore field from the final result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting One Document - SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store using the `insert()` method. It includes setting up the store configuration, creating a new store object, defining the document data, inserting it, and outputting the resulting document as JSON. The store configuration specifies options like auto-caching, cache lifetime, timeout, primary key, and search settings.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\",\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n\n```\n\n----------------------------------------\n\nTITLE: where() Example 3: Complex Conditions in PHP\nDESCRIPTION: This example demonstrates using the `where()` method with complex nested conditions involving AND and OR operators. It retrieves users with specific status, city, and age criteria, showcasing advanced query building techniques.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document PHP\nDESCRIPTION: This example shows how to insert a single document into the 'users' store using the `insert()` method. It prepares a PHP array representing user data and then inserts it into the store, which returns the inserted document including the generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Function Definition - PHP\nDESCRIPTION: This function takes a PHP array as input, representing a single document to be inserted into the SleekDB store. It returns the inserted document as an array, including the automatically generated unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents\nDESCRIPTION: Creates/Inserts many documents in the store. Accepts an array of data to be inserted. Returns the inserted documents with their new and unique `_id` fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting a Document (with _id) PHP\nDESCRIPTION: This example shows how to update or insert a single document using the `updateOrInsert()` method.  If a document with the given '_id' exists, it will be updated; otherwise, a new document will be inserted.  The `autoGenerateIdOnInsert` parameter controls whether a missing `_id` will result in an auto-generated one.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents into SleekDB using PHP\nDESCRIPTION: This snippet demonstrates how to insert multiple documents into a SleekDB store using the `insertMany()` method. It prepares an array of user data, each representing a separate user, and then inserts them all at once. The inserted data, including the automatically generated `_id` for each document, is then returned.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/insert-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates how to create a new SleekDB store using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace to be imported. The constructor takes the store name and data directory path as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Multiple Documents in SleekDB\nDESCRIPTION: This PHP snippet demonstrates how to update or insert multiple documents into a SleekDB store using the `updateOrInsertMany` method.  It shows examples for updating or inserting multiple users, and highlights how the `_id` is handled based on the `$autoGenerateIdOnInsert` parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/insert-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store Object PHP\nDESCRIPTION: This snippet shows how to create a SleekDB Store object in PHP.  It requires the SleekDB library to be installed and utilizes the 'users' store in the specified database directory. This sets up the object to perform later operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents\nDESCRIPTION: Inserts multiple documents (represented as an array of associative arrays) into the store. The function returns an array containing the inserted documents, each with its unique '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents\nDESCRIPTION: Inserts multiple documents into a SleekDB store. It takes a PHP array of arrays as input, where each inner array represents a document. It returns an array containing all the inserted documents, each including their automatically generated and unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Insert Document\nDESCRIPTION: Creates/Inserts a new document in the store. Accepts an array of data to be inserted. Returns the inserted document with its new and unique `_id` field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: useCache() with Default Lifetime PHP\nDESCRIPTION: Retrieves and caches 20 active users. The results will be cached until any document gets updated, deleted, or inserted.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregating Data with groupBy - PHP\nDESCRIPTION: This PHP code demonstrates how to use the SleekDB Query Builder to group data based on multiple fields, aggregate data, rename fields, and sort the output. It selects 'category' (aliased as 'Category'), 'subcategory', counts grouped products as productAmount and aggregates 'views', sorting by category and subcategory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \n    \"Category\" => \"category\", \n    \"subcategory\", \n    \"productAmount\", \n    \"views\" => [\"SUM\" => \"views\"] \n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Check Username Existence\nDESCRIPTION: Example of checking if a username already exists in the database using the `exists()` method. Requires an instance of a QueryBuilder and a username field in the user documents. Returns `true` if the username exists, and `false` otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SleekDB QueryBuilder\nDESCRIPTION: This code demonstrates how to retrieve documents using the SleekDB QueryBuilder. It requires the SleekDB library and autoloads dependencies. It creates a Store object and then uses the createQueryBuilder method to build a query with where conditions, ordering, limits, and skips.  The resulting data is then fetched and outputted as JSON. It depends on the SleekDB\\Store and SleekDB\\Query classes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Document PHP\nDESCRIPTION: This snippet demonstrates how to verify if a document exists based on a given query using the `exists()` method.  The example checks whether a username already exists in the database. This approach is more performant than fetching data to check existence.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Update Document by ID PHP\nDESCRIPTION: Updates parts of a document in SleekDB using the `updateById()` method. This method efficiently updates the document using its `_id`. It accepts the `_id` of the document to update and an array containing the fields to update. Nested values can be updated using dot notation within the array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document - SleekDB - PHP\nDESCRIPTION: Inserts a single document (PHP array) into a SleekDB store using the `insert()` function. It returns the inserted document as an array, including the automatically generated unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date and Time in SleekDB\nDESCRIPTION: This snippet demonstrates storing the current date and time in SleekDB using either a formatted string or a timestamp. It retrieves the current date and time using `new DateTime()`, then formats it as 'Y-m-d H:i:s' or stores it as a timestamp before inserting it into the database. This is useful for tracking creation or modification times.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/dates.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Insert Document\nDESCRIPTION: Inserts a new document into the store.  Accepts an array of data representing the document.  Returns the inserted document with its new and unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Inserting a new document into the store\nDESCRIPTION: This snippet shows how to insert a new document into the SleekDB store.  It takes an array of data as input and returns the inserted document with its unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Insert Data into SleekDB Store PHP\nDESCRIPTION: This code inserts a new article into the 'news' store. The article data is provided as an associative array. The `insert` method returns the inserted data, including a unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents\nDESCRIPTION: Creates/Inserts many documents in the store. Returns the inserted documents with their new and unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Store in SleekDB\nDESCRIPTION: This code snippet demonstrates creating a 'posts' store to hold user-generated posts.  It initializes a `Store` object with the name 'posts' and the data directory `$dataDir`. This allows storing and managing post data associated with users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users PHP\nDESCRIPTION: Demonstrates how to update multiple users.  It retrieves users with a specific name, loops through them, changes the name, and then updates all the users in the store using the update method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Update by ID in SleekDB PHP\nDESCRIPTION: Demonstrates how to update a document by its ID using `updateById()` in SleekDB.  It requires an ID (integer or string) and an associative array of fields to update. It returns the updated document or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Find Documents by Criteria PHP\nDESCRIPTION: Retrieves one or more documents from the store based on specified criteria. This function allows filtering, ordering, limiting, and offsetting the results. Criteria (array): An array of conditions to filter the documents. orderBy (array, optional): An array defining the sorting order. limit (int, optional): The maximum number of documents to retrieve. offset (int, optional): The starting point for retrieving documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store\nDESCRIPTION: This snippet demonstrates how to insert data into a SleekDB store using the `insert()` method. It inserts a new user with name, email, and avatar details into the `$userStore`. The data is passed as an associative array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/managing-store.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Fields By ID in PHP with SleekDB\nDESCRIPTION: This snippet shows how to update multiple fields of a document using the `updateById()` method. It changes the 'name' and 'age' fields of the document with the ID 24 to 'Georg' and 22 respectively.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: Update Data PHP\nDESCRIPTION: This code demonstrates how to update documents matching a query in SleekDB. It showcases setting a 'status' field to 'VIP' for users in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Fields By ID in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to update multiple fields of a document in SleekDB using its ID with the `updateById()` method. It changes the 'name' to 'Georg' and 'age' to 22 for the user with the ID 24. The `$userStore` object must be initialized before executing this code.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Nested Store Joins\nDESCRIPTION: This snippet shows how to perform a nested `join()`, joining stores within the subquery of another join. This example retrieves users, their articles, and the comments for each article. This creates a three-level data structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetch Documents with Criteria using findBy in SleekDB\nDESCRIPTION: The `findBy` method retrieves documents from a SleekDB store based on specified criteria. It allows for filtering using `WHERE` clauses, ordering the results using `orderBy`, limiting the number of results using `limit`, and skipping a specific number of documents using `offset`. The method returns an array of documents that match the criteria or `null` if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: This snippet initializes a SleekDB store named 'news' within the specified database directory. The `SleekDB\\Store` class is instantiated with the store name and database directory as arguments. If the store does not exist, it will be created automatically.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date and Time in SleekDB\nDESCRIPTION: This snippet illustrates storing the current date and time in SleekDB.  It demonstrates two different formats: formatting the DateTime object as a string using `format()` or storing it as a timestamp using `getTimestamp()`. Both versions create a new article with a 'createdAt' field representing the current time and insert it into the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/dates.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Document in SleekDB\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store. It initializes the SleekDB store with optional configurations, creates a new user array, inserts it into the 'users' store, and then outputs the newly created user object, including its unique ID, as a JSON response. It requires the SleekDB library and autoload.php to be included.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\"\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents with SleekDB\nDESCRIPTION: This snippet demonstrates how to insert multiple documents into a SleekDB store using the `insertMany()` method.  It initializes a SleekDB store, defines an array of user data, inserts all users at once and returns the inserted documents. It requires the SleekDB library and outputs the inserted data as JSON.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\",\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\",\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple SleekDB Stores\nDESCRIPTION: This code demonstrates creating multiple stores in SleekDB for different data sets. It shows creating a 'users' store and a 'posts' store, both using the same data directory. Each store is assigned to a variable for further operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = \\SleekDB\\SleekDB::store('users', $dataDir);\n```\n\nLANGUAGE: php\nCODE:\n```\n$postStore = \\SleekDB\\SleekDB::store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Remove Fields with Query PHP\nDESCRIPTION: This code shows how to remove specific fields from documents that match a query using the `removeFields()` method. It removes the 'status' field from all users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Update Documents with Query\nDESCRIPTION: This snippet updates one or multiple documents in a SleekDB database based on a specified query using the `update()` method. It requires an existing Query object and an array of updatable fields. The method returns `true` on success and `false` if no documents are found to update, or the updated documents if `$returnUpdatedDocuments` is true.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Fetch a Document by ID with findById in SleekDB\nDESCRIPTION: The `findById` method retrieves a single document from a SleekDB store using its unique ID. It returns the document as an array or `null` if the document is not found. This method directly accesses the file, making it very fast.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Search Documents\nDESCRIPTION: Performs a fulltext like search against one or multiple fields. Accepts an array of fields to search within, a search query string, and optional parameters for ordering, limiting, and offsetting the results. Returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID in SleekDB PHP\nDESCRIPTION: Demonstrates how to remove specific fields from a document by its ID using `removeFieldsById()` in SleekDB. It requires an ID (integer or string) and an array of field names to remove. It returns the updated document or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction removeFieldsById(int|string $id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Finding Documents By Criteria in SleekDB\nDESCRIPTION: This PHP function retrieves one or multiple documents that match the provided criteria. It takes an array of criteria for filtering. It also accepts optional parameters for ordering, limiting, and offsetting the results. It returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents - PHP\nDESCRIPTION: This snippet demonstrates how to insert multiple documents into a SleekDB store using the `insertMany()` method. The method takes an array of PHP arrays as input, where each inner array represents a document to be inserted.  It returns an array containing all inserted documents, each including its automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Remove Name and Age Fields PHP\nDESCRIPTION: Removes the 'name' and 'age' fields from the user with _id = 24 using the `removeFieldsById()` method.  This example demonstrates how to remove multiple fields from a document in a single operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\", \"age\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Users and Retrieving Deleted Documents - PHP\nDESCRIPTION: Demonstrates how to delete users by name and retrieve the deleted documents as an array.  This example imports the `Query` class and passes `Query::DELETE_RETURN_RESULTS` as the second argument to the `deleteBy()` method. The return value of `deleteBy()` will be an array of the deleted document objects.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$userStore->deleteBy(['name', '=', 'Joshua Edwards'], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert with Existing ID PHP\nDESCRIPTION: Updates or inserts a user with `_id = 23` using the `updateOrInsert()` method and `$autoGenerateIdOnInsert = false`. If the ID already exists, the document will be updated, otherwise, a new document is created with the same ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Search Method Signature (PHP)\nDESCRIPTION: Shows the signature for the search method of the QueryBuilder class, which allows fulltext-like searching against one or more fields. The method returns the QueryBuilder instance for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB PHP\nDESCRIPTION: This snippet demonstrates inserting a news article represented as an associative array into the 'news' store using the `insert()` method. The article data includes the title, about, and author information. The function returns the inserted data, including the automatically generated unique '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Fetching Document by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch a single document from a SleekDB store by its `_id` using the `findById()` method.  It retrieves the news article with the ID 12 from the `$newsStore` store. The method is optimized for speed by directly accessing the file. Returns a document as an array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SleekDB Store\nDESCRIPTION: This snippet demonstrates how to retrieve documents from a SleekDB store using the `findBy` method of the `Store` class. It initializes the SleekDB environment and retrieves user data based on specified conditions, ordering, and pagination. It requires the SleekDB library and autoloads dependencies. The `findBy` method accepts a where condition, order by clause, limit, and skip values as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Where Condition\nDESCRIPTION: Add \"where\" condition to filter data. Can be used multiple times. All additional uses add an \"and where\" condition. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Criteria in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to delete documents from a SleekDB store based on specified criteria using the `deleteBy()` method. It includes the function signature and an example of deleting users named \"Joshua Edwards\".\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(['name', '=', 'Joshua Edwards']);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: GroupBy with SUM and Multiple Fields - PHP\nDESCRIPTION: Demonstrates a more complex example of using `groupBy()` in conjunction with `select()`, filtering with `where()`, and ordering with `orderBy()`. Groups by 'category' and 'subcategory', calculates the sum of 'views' for each group, and includes a counter 'productAmount'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([\n    \"Category\" => \"category\",\n    \"subcategory\",\n    \"productAmount\",\n    \"views\" => [\"SUM\" => \"views\"]\n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"Category\" => \"pants\", \"subcategory\" => \"shorts\", \"productAmount\" => 20, \"views\" => 212],\n  [\"Category\" => \"pants\", \"subcategory\" => \"jeans\", \"productAmount\" => 83, \"views\" => 331],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Values with SleekDB Query\nDESCRIPTION: This code shows how to update nested values within a document based on a query using the `update()` method of the SleekDB Query object. It changes the street of users in London. Nested values are referenced using dot notation.  Requires an initialized Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by Criteria PHP\nDESCRIPTION: This code demonstrates how to delete documents based on specified criteria using the `deleteBy()` method. It explains the parameters like `$criteria` (field, condition, value) and `$returnOption` (boolean, array, or count).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many Example 1 in SleekDB PHP\nDESCRIPTION: Updates or inserts multiple user documents, automatically generating IDs for inserts. It requires the `$userStore` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Multiple Documents PHP\nDESCRIPTION: This snippet demonstrates how to update or insert multiple documents into the SleekDB store using the `updateOrInsertMany()` method.  It uses the `_id` field in each document to determine whether to update an existing document or insert a new one. The `autoGenerateIdOnInsert` parameter controls whether a new `_id` is automatically generated for documents without one.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/insert-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: Updating parts of a document by ID\nDESCRIPTION: This snippet demonstrates how to update specific fields of a document identified by its ID. It takes the ID and an array of updatable fields as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Example of Hits Algorithm in SleekDB\nDESCRIPTION: Illustrates the use of the 'hits' search algorithm constant from the Query class in SleekDB. This algorithm calculates the score based on the amount of search hits.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Defining deleteBy() Function Signature PHP\nDESCRIPTION: This snippet shows the signature of the `deleteBy()` function in SleekDB, which allows deleting documents based on specified criteria. It accepts an array of criteria and a return option, and can return a boolean, integer, or an array depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with Select in PHP\nDESCRIPTION: This snippet demonstrates how to use the `select()` method to specify which fields should be included in the output.  It provides an example of selecting only the 'name' field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields - PHP\nDESCRIPTION: Illustrates how to select only the 'name' field from all user documents using the `select()` method. The result will contain an array of objects, each with an '_id' and a 'name' property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Remove Fields from Documents in SleekDB PHP\nDESCRIPTION: This snippet shows how to remove specific fields from documents that match a given query using the `removeFields()` method of the SleekDB Query object. The `$fieldsToRemove` parameter is an array containing the names of the fields to be removed. The method returns the updated documents on success or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): array|false\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Searching SleekDB Store with PHP\nDESCRIPTION: This snippet shows how to search a 'news' store in SleekDB for the phrase 'SleekDB is the best database solution' across the 'title.mainTitle', 'title.subTitle', and 'content' fields. The result is then sorted in descending order based on the 'searchScore'. Requires the SleekDB library to be installed and a store named 'news' to be available. It also requires the store to have the fields \"title.mainTitle\", \"title.subTitle\" and \"content\".\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from SleekDB PHP\nDESCRIPTION: This code snippet retrieves all news articles from the SleekDB store using the findAll method. The results are then printed to the console using print_r. The findAll method returns an array containing all the documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to create a new store in SleekDB using the `Store` class. It requires the `SleekDB\\Store` namespace to be imported. The store is initialized with a store name ('news') and the data directory ($dataDir).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet demonstrates how to search documents in a SleekDB store using the QueryBuilder. It defines a search query, searches in specific fields, orders the results by search score, removes the score from the results, and applies pagination. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Document PHP\nDESCRIPTION: This snippet demonstrates how to insert a single document (PHP array) into the SleekDB store using the `insert()` method. The inserted document will have an automatically generated `_id` property.  The method takes a PHP array as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document - SleekDB PHP\nDESCRIPTION: Inserts a single document (PHP array) into the SleekDB store using the `insert()` function. The function accepts an associative array representing the document to be inserted and returns the inserted document including the auto-generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name and Retrieving Deleted Documents in SleekDB with PHP\nDESCRIPTION: Demonstrates how to delete all users with the name \"Joshua Edwards\" and retrieve the deleted documents as an array using the `deleteBy()` method with `Query::DELETE_RETURN_RESULTS` option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Stores Quick Example (PHP)\nDESCRIPTION: This snippet demonstrates a quick example of joining the 'users' store with the 'comments' store. It fetches all users and adds a 'comments' property to each user object, containing the user's comments from the 'comments' store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Document by ID\nDESCRIPTION: Updates parts of one document in the store by its `_id`. Parameters: `$id` (int|string) - the ID of the document to update, `$updatable` (array) - an associative array containing the fields to update and their new values. Returns the updated document as an array, or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: SleekDB Delete by Name Example\nDESCRIPTION: This example demonstrates deleting documents where the 'name' field is equal to 'Joshua Edwards'. It uses the default `DELETE_RETURN_BOOL` option, so it returns `true` if the deletion was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Store object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new `Store` object in SleekDB. The constructor accepts the store name, database path, and an optional configuration array. It internally creates a new store folder if one doesn't already exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Find Documents By Criteria\nDESCRIPTION: Retrieves one or multiple documents based on provided criteria. Accepts an array of criteria for filtering.  Takes optional parameters for ordering (`orderBy`), limiting the number of results (`limit`), and offsetting the start of the results (`offset`). Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Fetching Document by ID in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a single document from a SleekDB store by its `_id` using the `findById()` method. This method provides fast access as it directly accesses the file by ID. Returns null if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/fetch-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to query nested properties within JSON documents in SleekDB using the `where` clause. It allows filtering data based on values deep within the document structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Ordering results with 'orderBy' (Example 2) PHP\nDESCRIPTION: Illustrates how to sort the result set by multiple fields using the SleekDB query builder's `orderBy` method.  Retrieves all users sorted by 'name' (ascending) and then by 'age' (ascending). Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Where Condition with QueryBuilder in PHP\nDESCRIPTION: Demonstrates the creation and usage of a query builder object step-by-step. It initializes the query builder, sets a `where` condition to filter users named \"Joshua Edwards\", retrieves the query object, and then executes the query to fetch matching user records.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Example 1 (PHP)\nDESCRIPTION: Illustrates joining the 'users' store with the 'comments' store to retrieve users and their associated comments.  Two approaches are shown: one returning the result of the subquery, and the other returning a QueryBuilder object to be executed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Options Store-Wide - PHP\nDESCRIPTION: This snippet shows how to configure search options store-wide when creating a new SleekDB store. It sets the minimum word length, search mode, score key name, and the search algorithm to be used for all searches within that store. The configuration is passed as an array to the Store constructor.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: Deleting Document by ID in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to delete a document from a SleekDB store by its unique ID using the `deleteById()` method.  It includes the function signature and an example of deleting a user with ID 12.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID PHP\nDESCRIPTION: Removes specified fields from a document using its ID with `removeFieldsById()`.  This example demonstrates how to remove fields from a document by specifying their names in an array.  Nested fields can be removed by using dot notation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById(int|string $id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Updating Document By ID in PHP with SleekDB\nDESCRIPTION: This code shows how to update specific fields of a document using the `updateById()` method. It changes the 'status' field of the document with the ID 23 to 'active'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Delete with Results in PHP\nDESCRIPTION: This example demonstrates how to delete documents and retrieve the deleted documents as an array using `Query::DELETE_RETURN_RESULTS`. It first includes the Query class from SleekDB and then calls `deleteBy()` with the desired criteria and return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents PHP\nDESCRIPTION: This snippet demonstrates inserting multiple documents into the 'users' store using the `insertMany()` method.  It creates an array of user data arrays and inserts them all at once, returning an array of the inserted documents each containing a generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents\nDESCRIPTION: Creates and inserts multiple documents into the store.  Parameters: `$data` (array) - an array of associative arrays, each representing a document. Returns the inserted documents with their new and unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Searching Data in SleekDB\nDESCRIPTION: This code snippet demonstrates how to use the `search()` method to find users who live in Canada.  It searches the `location.country` field for the keyword 'Canada' using the `$usersDB` object, and fetches the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/search-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = $usersDB\n    ->search( 'location.country', 'Canada' )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SleekDB Store\nDESCRIPTION: This code snippet retrieves documents from a SleekDB store using the `findBy()` method of the `Store` object. It defines a where condition to filter the documents based on location (new york or london) or age (> 29), applies pagination, orders the results by '_id' in descending order, and outputs the resulting documents as a JSON response. The snippet requires SleekDB to be installed and accessible via autoload.php.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Joining Stores in SleekDB\nDESCRIPTION: This PHP function joins the current store with another store. It takes a Closure (joinFunction) and a propertyName. The Closure defines the join logic. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Removing a Field By ID in PHP with SleekDB\nDESCRIPTION: This snippet shows how to remove a specific field from a document using the `updateById()` method. It removes the 'status' field from the document with the ID 23.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(23, [ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Delete Document by ID\nDESCRIPTION: Deletes a single document from the store based on its unique '_id'. This is optimized for speed because it uses the file path directly. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: SleekDB Delete with Complex WHERE Clause\nDESCRIPTION: This example demonstrates deleting documents using a complex `WHERE` clause with nested conditions and logical operators (AND, OR). It uses an array structure to represent the conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: useCache() with Lifetime PHP\nDESCRIPTION: This example illustrates how to set a specific cache lifetime (120 seconds) when using the `useCache()` method. This means the cache will be considered valid for two minutes after the initial query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with DateTime Objects in SleekDB\nDESCRIPTION: Demonstrates how to filter data in SleekDB using PHP's DateTime class with the `findBy()` method and the `BETWEEN` condition. Requires SleekDB and PHP DateTime objects.  It shows how to convert date strings to DateTime objects and use them in a query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents by Criteria in SleekDB\nDESCRIPTION: This code retrieves documents from the 'news' store based on specified criteria, sorting, limit, and offset.  The function returns an array of documents that match the criteria, or an empty array if no documents are found. Complex where clauses can be constructed using nested arrays with logical operators.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Getting the Query Object\nDESCRIPTION: Demonstrates how to obtain a Query object from a QueryBuilder instance in SleekDB. The Query object is essential for executing database queries after building the query using the QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store in PHP\nDESCRIPTION: This code shows how to delete a SleekDB store using the `deleteStore()` method. It deletes the store and wipes all the data and cache it contains. `$userStore` must be an initialized `SleekDB\\Store` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/managing-store.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents with SleekDB in PHP\nDESCRIPTION: This snippet shows how to use the `fetch()` method to retrieve all documents that match the query criteria. The example fetches all users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store using the `insert()` function. It takes a PHP array as input, representing the data to be inserted, and returns the inserted document as an array, including the automatically generated `_id` property.  The `$userStore` object is assumed to be an instance of a SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Distinct Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `distinct` method within the SleekDB QueryBuilder, which retrieves only unique values from the store based on the specified field(s). It accepts either a single field name as a string, or an array of field names, and returns the QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndistinct( array|string $fields ): QueryBuilder;\n```\n\n----------------------------------------\n\nTITLE: deleteBy() Example 1 PHP\nDESCRIPTION: This snippet demonstrates a simple example of using the `deleteBy()` method to delete all users whose name is \"Joshua Edwards\". It assumes that `$userStore` is an existing instance of the `Store` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Select Specific Fields\nDESCRIPTION: Specifies which fields to include in the result set. Parameters: `$fieldNames` (string[]) - an array of field names to select. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Where Clause - Inline Query - PHP\nDESCRIPTION: This snippet demonstrates the use of the `where` method to filter data based on a single condition. It creates a query builder, adds a where clause to match names equal to \"Joshua Edwards\", retrieves the query object, and fetches the results using the `fetch()` method. The condition uses an inline approach.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many Documents - PHP\nDESCRIPTION: This snippet demonstrates how to update or insert multiple documents using the `updateOrInsertMany()` method.  The function takes an array of documents to update or insert and a boolean flag `autoGenerateIdOnInsert`. If `autoGenerateIdOnInsert` is true, documents without an `_id` will have one automatically generated. If false, and a document has an `_id`, the document will either be updated if the _id exists, or the new document will use the specified _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/insert-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: Multiple where() conditions in PHP\nDESCRIPTION: This code snippet shows how to use multiple `where()` conditions, connected by AND. It demonstrates filtering users based on both `products.totalSaved` and `products.totalBought`, presenting both an inline and step-by-step approach. The code also includes an example of providing all conditions in a single where call.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents with Criteria in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch documents from the 'newsStore' based on specified criteria, ordering, limit, and offset using the `findBy()` method.  It allows for complex nested queries using operators like '=', '>', '<', 'LIKE', 'IN', 'BETWEEN' with 'AND' and 'OR' operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\n----------------------------------------\n\nTITLE: Where Clause Examples in PHP\nDESCRIPTION: These code snippets provides different examples on how to use the `where` clause in SleekDB. Includes inline query execution and how to chain `where` methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents PHP\nDESCRIPTION: This example demonstrates how to insert multiple documents into a SleekDB store using the `insertMany()` method. It takes an array of PHP arrays, each representing a document. The return value is an array of the inserted documents, each including a unique '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name in SleekDB (PHP)\nDESCRIPTION: This example demonstrates deleting users whose name is \"Joshua Edwards\" using the `deleteBy()` method.  It utilizes a simple criteria array and assumes `$userStore` is an instance of a SleekDB Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many Example 2 in SleekDB PHP\nDESCRIPTION: Updates or inserts multiple user documents, and only inserts if _id already exists.  One of the users is missing an _id and will get an auto-generated _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: Performing a full-text search in PHP\nDESCRIPTION: This code snippet performs a full-text-like search against specified fields in the store. The `search` method accepts an array of fields to search, the search query, optional ordering, limit, and offset parameters. It returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Retrieve Documents - SleekDB QueryBuilder (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve documents from a SleekDB store using the QueryBuilder. It builds a query with where conditions, ordering, limiting, and skipping. Finally, it fetches the results and outputs them as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Remove User Status Field by ID in PHP\nDESCRIPTION: This example shows how to remove the 'status' field from a user with a specific ID using the `removeFieldsById()` method in SleekDB. It removes the 'status' field of the user with _id = 23.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(23, [ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents - SleekDB (PHP)\nDESCRIPTION: This snippet shows how to insert multiple documents into a SleekDB store using the insertMany() method. It sets up the Store object with configuration options and defines an array of user data to be inserted. Finally, the newly inserted users, including their generated IDs, are outputted as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\",\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\",\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n```\n\n----------------------------------------\n\nTITLE: Configuring Store-Wide Search Settings in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to configure store-wide search settings when creating a new SleekDB store. It defines the minimum word length for search queries, the search mode (OR or AND), the key used to store search scores, and the search algorithm to use. These settings are applied to all search operations performed on this store unless overridden on a per-query basis.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: Setting Database Directory PHP\nDESCRIPTION: This snippet sets the database directory path, which can be either absolute or relative.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: Filtering with Simple Criteria in SleekDB\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method in SleekDB to filter documents based on a simple criteria: finding all news articles where the author is \"John\".\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/criteria.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"]);\n```\n\n----------------------------------------\n\nTITLE: Reusing Query Object in SleekDB (PHP)\nDESCRIPTION: This example demonstrates how to reuse a Query object in SleekDB to perform multiple operations on the same set of matched documents without running additional queries. The Query object stores the query conditions, allowing you to fetch, update, or perform other operations on the data matching those conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Basic Join Example PHP\nDESCRIPTION: This example demonstrates how to join the 'users' store with the 'comments' store to fetch all users and their associated comments.  It shows the basic usage of the `join()` method and how to define the join condition using a closure and the `findBy()` method. The `userStore` and `commentStore` must be initialized with the path to the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/join-stores.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find One Document By Criteria\nDESCRIPTION: Retrieves a single document based on the provided criteria.  Accepts an array of criteria for filtering.  Returns the document as an array or null if no match is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: FindBy with Simple Criteria in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method with a simple criteria array to find news articles with the author \"John\". It showcases the basic structure of the criteria array, consisting of the field name, condition, and value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/criteria.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"]);\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Document in SleekDB\nDESCRIPTION: This PHP function either inserts a new document or updates an existing one.  It accepts an associative array `$data` representing the document.  It returns the inserted or updated document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Using `search()` method of `QueryBuilder` - PHP\nDESCRIPTION: This code demonstrates using the `search()` method of the `QueryBuilder` class to perform a full-text search across multiple fields in SleekDB. It includes sorting the results by relevance and excluding the search score field.  The example requires a SleekDB store named 'news'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents by Criteria in PHP\nDESCRIPTION: This code shows how to fetch documents from a SleekDB store based on specified criteria using the `findBy()` method. It allows for complex filtering with multiple conditions, sorting, limiting, and offsetting the results.  Criteria are defined as an array of conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/fetch-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Multiple Documents in PHP\nDESCRIPTION: This code snippet shows the function definition for `updateOrInsertMany()` in SleekDB.  This function either updates a batch of existing documents if they exists or inserts new documents if they don't. The function takes an array of data and a boolean which determines whether the id should be autogenerated when a document is being inserted.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\npublic function updateOrInsertMany(array $data, bool $autoGenerateIdOnInsert = true): array\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Example\nDESCRIPTION: Example demonstrating how to insert multiple documents into a SleekDB store using the `insertMany` function. The code prepares a PHP array of user data, where each element is an associative array representing a user. The `$userStore->insertMany($users)` call inserts all the user documents into the store, and the returned `$users` variable contains the inserted documents with their generated `_id` fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Joining Stores Quick Example PHP\nDESCRIPTION: This example demonstrates a basic join operation in SleekDB. It fetches all users from the \"users\" store and joins their corresponding comments from the \"comments\" store based on the user's ID.  The result is an array of users, each with an additional \"comments\" property containing the user's comments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting a User into a SleekDB Store\nDESCRIPTION: This code snippet shows how to insert a new user into the 'userStore'. The `insert()` method takes an associative array representing the user's data, including name, email, and avatar details. The avatar data is structured as a nested array with 'sm' and 'lg' keys representing small and large avatar image paths respectively.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Reusing Query Object (PHP)\nDESCRIPTION: This example demonstrates how to keep the Query object to perform multiple operations on the same result set without running an additional query. The code fetches data based on certain conditions, updates the matched documents, and then fetches the updated data, all using the same Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents PHP\nDESCRIPTION: This snippet illustrates how to insert multiple documents (an array of PHP arrays) into the SleekDB store using the `insertMany()` method.  Each inserted document will have an automatically generated `_id` property. The method accepts a PHP array containing multiple document arrays as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents with QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to group documents in a SleekDB store using the QueryBuilder.  It sets up the store configuration, creates a Store, and then builds a query to select, group, and order the results. It uses the `select()`, `groupBy()`, `having()`, `orderBy()`, `limit()`, and `skip()` methods of the QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n\n```\n\n----------------------------------------\n\nTITLE: Find One by Author - PHP\nDESCRIPTION: This snippet demonstrates how to find a single news article by a specific author using SleekDB's `findOneBy` method.  It performs an equality check on the 'author' field.  The expected input is an array specifying the field, operator, and value. The output is a single news article object as an associative array if found, otherwise null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\n----------------------------------------\n\nTITLE: SleekDB Joining Stores - Quick Example\nDESCRIPTION: This code snippet demonstrates a quick example of joining two SleekDB stores, 'users' and 'comments'. It fetches all users from the 'users' store and adds a 'comments' property to each user, containing all comments associated with that user.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with DateTime objects in SleekDB\nDESCRIPTION: This snippet demonstrates how to use PHP's DateTime class to filter data in SleekDB. It converts date strings into DateTime objects and uses the BETWEEN condition to retrieve records within a specific date range.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet demonstrates how to group documents in a SleekDB store using the QueryBuilder. It applies a where condition, selects specific fields, groups the results by age, applies a having condition, orders the results by followerAmount, and applies pagination. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Complex where() conditions in PHP\nDESCRIPTION: This code illustrates complex filtering using nested conditions with `AND` and `OR` operators within the `where()` method. It provides an equivalent SQL example for clarity, demonstrating how to retrieve users with specific criteria related to status, city, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// example in sql\nWHERE \n  status = \"premium\" \n  AND \n  (\n    (\n      city = \"london\" OR city = \"new york\" \n    )\n    AND \n    (\n      (age >= 16 AND age < 20) OR age > 30 \n    )\n  )\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB using PHP\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents using SleekDB's `where` clause.  It checks if the 'role' property inside 'post.author' equals 'admin'.  This shows SleekDB's capability to handle schema-free data and allows filtering on nested elements within the JSON structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Joining Users and Comments (SleekDB, PHP)\nDESCRIPTION: This code demonstrates how to retrieve users with their associated comments using SleekDB's `join()` method. It initializes the `userStore` and `commentStore` and then creates a query builder for the `userStore`. The `join()` method is used to associate each user with their comments by querying the `commentStore` for comments where the `userId` matches the user's `_id`. The result is a collection of user objects, each containing an array of comments in the 'comments' property. Two variations are demonstrated, returning results and returning a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Where Condition\nDESCRIPTION: Add \"where\" condition to filter data. Can be used multiple times. All additional uses add an \"and where\" condition. Accepts an array of conditions. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents into SleekDB Store\nDESCRIPTION: This code snippet illustrates how to insert multiple documents into a SleekDB store using the `insertMany` method. It creates an array of user data and calls the `$userStore->insertMany($users)` method to insert all documents into the store. The return value is an array of the inserted documents, including their automatically generated `_id` values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Update Document by ID Example 1 PHP\nDESCRIPTION: Changes the status of the user with _id = 23 using the `updateById()` method.  This example demonstrates how to update a specific field of a document using its ID.  It directly modifies the 'status' field to 'active'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet retrieves documents from a SleekDB store using the `QueryBuilder` class. It constructs a query with `where` conditions, ordering, pagination (limit and skip), then executes the query and returns the fetched results as a JSON response. It requires SleekDB to be installed and accessible via autoload.php.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents - SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to insert multiple documents into a SleekDB store using the insertMany() method. It initializes the SleekDB store, creates an array of user arrays, and then inserts this array into the store. The inserted documents, including their unique IDs, are then outputted as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\",\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\",\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: Quick Example (SleekDB, PHP)\nDESCRIPTION: This code snippet demonstrates how to join the 'users' and 'comments' stores in SleekDB to fetch users with their corresponding comments. It uses the `join` method of the `QueryBuilder` to create a new property called 'comments' for each user, containing an array of comments associated with that user. The example relies on having two stores, `userStore` and `commentStore`, already initialized. The `findBy` method is used to retrieve comments based on the user's ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Document into SleekDB using PHP\nDESCRIPTION: This snippet demonstrates how to insert a single document into a SleekDB store using the `insert()` method. It prepares a PHP array representing a user with name, product details, and location information, and then inserts it into the store.  The inserted data, including the `_id`, is assigned back to the `$user` variable.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Store Object - PHP\nDESCRIPTION: This snippet shows the constructor for creating a new Store object in SleekDB. It takes the store name, data directory, and an optional configuration array as parameters.  The constructor initializes the store and creates the store directory if it doesn't already exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $dataDir, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by ID using deleteById() in SleekDB\nDESCRIPTION: The `deleteById()` method allows deleting a single document based on its unique `_id`. This method is optimized for speed as it directly targets the document without traversing through all files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents - SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to insert multiple documents into a SleekDB store using the `insertMany()` method.  It includes setting up the store configuration, creating a new store object, defining an array of document data, inserting them, and outputting the resulting documents as JSON. The store configuration specifies options like auto-caching, cache lifetime, timeout, primary key, and search settings.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\",\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\",\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to insert multiple documents into a SleekDB store using the `insertMany()` function. It accepts an array of PHP arrays, where each inner array represents a document to be inserted. The function returns an array containing all the inserted documents, each including its unique `_id`. The `$userStore` object represents an instance of a SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Updating a Document by ID in SleekDB\nDESCRIPTION: This PHP function updates parts of a document specified by its ID. It accepts the document ID and an associative array `$updatable` containing the fields to update. It returns the updated document as an array, or `false` if the update fails.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Storing Date as Timestamp in SleekDB\nDESCRIPTION: This snippet demonstrates how to store a date as a timestamp in a SleekDB document. It creates a DateTime object and then uses its getTimestamp() method to store the timestamp value in the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Using SUM and AVG Select Functions - PHP\nDESCRIPTION: Demonstrates how to use the SUM and AVG select functions in SleekDB to aggregate data. The results are aliased as 'followerSum' and 'followerAvg' respectively.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"followerSum\" => [\"SUM\" => \"follower\"],\n    \"followerAvg\" => [\"AVG\" => \"follower\"]\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"followerSum\" => 81482, \"followerAvg\" => 501.319205]\n]\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Field By ID in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to remove a nested field within a document in SleekDB using its ID with the `updateById()` method. It removes the 'street' field from the 'address' array for the user with ID 24. The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Document PHP\nDESCRIPTION: Updates or inserts a single document using the `updateOrInsert()` method. If a document with the specified `_id` exists, it's updated; otherwise, a new document is inserted.  The `$autoGenerateIdOnInsert` parameter controls whether a new `_id` is automatically generated if the document doesn't have one.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function updateOrInsert(array $data, bool $autoGenerateIdOnInsert = true): array\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Store PHP\nDESCRIPTION: This code snippet inserts a new article represented as an associative array into the 'news' store.  The `insert()` method takes the article data as input. The returned `$results` array will contain the inserted data, including a generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Complex WHERE Clause Deletion in SleekDB with PHP\nDESCRIPTION: Demonstrates how to delete documents based on a more complex WHERE clause using the `deleteBy()` method.  The example combines multiple conditions with AND/OR operators to filter the documents for deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents in SleekDB\nDESCRIPTION: This PHP snippet demonstrates how to insert multiple documents into a SleekDB store using the `insertMany` method. It prepares an array of user data and inserts it into the 'users' store, returning an array of the inserted documents, each with an automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Simple where() condition in PHP\nDESCRIPTION: This code snippet demonstrates how to use the `where()` method to filter data based on a single condition.  It shows both an inline approach and a step-by-step approach of creating a query builder, preparing the query, and then executing it to fetch data where name equals 'Joshua Edwards'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Or Insert Many Documents\nDESCRIPTION: Creates/Inserts many documents in the store or updates existing ones if they already exist. Accepts an array of data. Returns the inserted/updated documents as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Definition PHP\nDESCRIPTION: Defines the `insert` function for inserting a single document into a SleekDB store.  The function accepts a single array representing the document to be inserted and returns the inserted document, including a generated unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: where Example 1 - Inline Query in PHP\nDESCRIPTION: This code snippet shows an example of using the `where` method to filter users based on their name, using an inline query construction and executing the query using `fetch()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting a New User into SleekDB with PHP\nDESCRIPTION: This snippet shows how to insert a new user into the 'users' store using the `insert()` method. The data includes the user's name, email, and avatar URLs, demonstrating the storage of nested data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents in SleekDB\nDESCRIPTION: This PHP function inserts multiple documents into the store. It takes an array of associative arrays `$data`, where each inner array represents a document to be inserted. The function returns an array containing the inserted documents, each with a new unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Update One Document in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to update an entire document in SleekDB using the `update()` method. It retrieves a user, modifies the 'name' field, and then updates the document in the store using the user's `_id`. The `$userStore` object must be initialized and the `insert()` method must've been called to generate an `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Deleting Records and Returning Count with SleekDB Query\nDESCRIPTION: This code shows how to delete documents based on a given query using the `delete()` method of the SleekDB Query object, and retrieve the amount of deleted users. It requires the `Query` class and deletes inactive users and returns their number. Requires an initialized Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: orWhere combined with where in PHP\nDESCRIPTION: Demonstrates combining `where` and `orWhere` to create complex filter conditions. It retrieves users that satisfy the condition `(products.totalSaved > 10 AND products.totalBought > 20) OR products.shipped = 1`. This example shows the interaction between `where` and `orWhere` to build complex SQL-like queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Simple where() example (PHP)\nDESCRIPTION: Demonstrates a simple example using the `where()` method to filter users based on their name.  It shows both inline and step-by-step approaches.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a User Store in PHP\nDESCRIPTION: This snippet shows how to create a store named 'users' for storing user data. It initializes a `SleekDB\\Store` object with the store name 'users' and a data directory `$dataDir`. This assumes `$dataDir` has already been defined.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/managing-store.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store\nDESCRIPTION: This snippet demonstrates how to create a new SleekDB store instance named `$userStore`. It initializes the store with the name 'users' and specifies the directory for storing the database files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Removing Nested Fields with SleekDB Query\nDESCRIPTION: This code shows how to remove nested fields from documents based on a query using the `removeFields()` method of the SleekDB Query object. It removes the street field from the address of users in London. Nested fields are specified using dot notation. Requires an initialized Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB with PHP\nDESCRIPTION: This example demonstrates how to query nested properties within JSON documents using SleekDB's `where` clause in PHP. SleekDB will traverse the JSON structure to find the specified data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Example - SleekDB PHP\nDESCRIPTION: Demonstrates how to prepare a PHP array and insert it as a single document into a SleekDB store using the `insert()` method. The inserted document is then returned with a unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Update Document by ID Example 2 PHP\nDESCRIPTION: Changes the name and age of the user with _id = 24 using the `updateById()` method.  This example updates multiple fields of a document at once. Both 'name' and 'age' are modified in a single operation using the document's ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: Example 2: Deletion with complex WHERE statement\nDESCRIPTION: This example demonstrates a more complex deletion scenario with nested conditions using AND and OR operators. The example replicates a SQL WHERE clause with multiple conditions on name and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Prioritize Algorithm (PHP)\nDESCRIPTION: Defines the 'prioritize' search algorithm in SleekDB.  The order of the fields are a big part of the score. If one document has one search hit in the title field it will have a higher score than a document that has no search hits in the title field but 61 search hits in the content field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: Insert Document - SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to insert a single document into a SleekDB store. It initializes the SleekDB store, creates a new user array, and then inserts this array into the store using the insert() method. The inserted document, including its unique ID, is then outputted as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\",\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n```\n\n----------------------------------------\n\nTITLE: Get documents with findBy in SleekDB (PHP)\nDESCRIPTION: The `findBy()` method retrieves one or multiple documents from a SleekDB store based on specified criteria, ordering, limit, and offset. It supports complex nested conditions using AND/OR operators. It returns found documents in an array or `null` if nothing is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Removing fields with SleekDB (Example 2)\nDESCRIPTION: Removes a nested field ('address.street') from documents in SleekDB where the city is london. It assumes `$userStore` object is an instance that provides `createQueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Exists Query\nDESCRIPTION: Check if data is found. Returns a boolean indicating whether any data was found matching the query conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents PHP\nDESCRIPTION: These snippets demonstrate deleting documents based on a query using the `delete()` method. Different return options are available (boolean, count, or deleted results). Examples show deleting inactive users with different return options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents with SleekDB Store\nDESCRIPTION: This code snippet shows how to insert multiple documents into a SleekDB store. It requires the SleekDB library and autoloads dependencies.  It initializes a Store object, defines an array of new users, inserts the users into the store using `insertMany`, and outputs the users with their unique IDs as JSON. It depends on the SleekDB\\Store class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\"\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\"\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n```\n\n----------------------------------------\n\nTITLE: Delete Documents and Return Count with Query PHP\nDESCRIPTION: This snippet demonstrates how to delete documents that match the query and return the number of deleted documents using the `delete()` method and `Query::DELETE_RETURN_COUNT` option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Storing Date as a String in SleekDB\nDESCRIPTION: This snippet demonstrates storing a date as a string in a SleekDB document. It creates a new article array with the releaseDate field containing a string representation of the date and inserts it into the SleekDB store. This method allows you to store dates without converting them to DateTime objects or timestamps.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/dates.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Updating documents using SleekDB\nDESCRIPTION: This snippet demonstrates how to update documents that match a specific criteria using the `update()` method of the SleekDB Query object. It updates the status of all users located in London to 'VIP'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Update Documents with Query PHP\nDESCRIPTION: This snippet demonstrates how to update documents that match a specified query criteria using the `update()` method. It sets the status of all users in London to 'VIP'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Multiple OrWhere Clauses - PHP\nDESCRIPTION: This code snippet demonstrates using multiple `orWhere` clauses to create more complex OR conditions. It retrieves users that have `products.totalSaved > 10 OR (products.totalBought > 20 AND products.shipped = 1) OR totalBought = 0`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting Data using deleteBy() in SleekDB\nDESCRIPTION: The `deleteBy()` method allows deleting documents based on specified criteria. It accepts an array of conditions and an optional return option. The return option determines whether the method returns a boolean value, an array of deleted documents, or the count of deleted documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Update Documents (Query) PHP\nDESCRIPTION: Updates one or multiple documents, based on the current query. Takes the updatable data as an array. Returns a boolean indicating the success of the update operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Update or Insert in SleekDB PHP\nDESCRIPTION: Demonstrates how to update an existing document or insert a new one if it doesn't exist using `updateOrInsert()` in SleekDB.  It requires an associative array representing the document to update or insert. Returns the updated or inserted document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\npublic function updateOrInsert(array $data, bool $autoGenerateIdOnInsert = true): array\n```\n\n----------------------------------------\n\nTITLE: Insert Document PHP\nDESCRIPTION: Creates/Inserts a new document in the store. Returns the inserted document with its new and unique _id. The input is an associative array representing the document's data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Selecting Nested Fields with Alias - PHP\nDESCRIPTION: Shows how to retrieve a nested field ('userBiography.age') and assign it an alias ('age') in the result set. The `select()` method is used with a key-value pair where the key is the alias and the value is the path to the nested field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to create a QueryBuilder instance using the `createQueryBuilder()` method of a SleekDB Store object. The QueryBuilder is used to construct complex queries without immediately executing them.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Fetching One Document by Criteria in SleekDB\nDESCRIPTION: This code retrieves a single document from the 'news' store that matches the specified criteria. It returns one document or null if no document matches the criteria. Complex where clauses can be constructed using nested arrays with logical operators.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/fetch-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Update User Name and Age by ID (SleekDB)\nDESCRIPTION: Updates the 'name' and 'age' fields of a user document in SleekDB using the `updateById` method.  It assumes the `$userStore` object is initialized and the database is accessible. It will modify the specified fields of the document with the ID of 24.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Criteria - deleteBy() - PHP\nDESCRIPTION: Deletes documents that match specified criteria using the `deleteBy()` method of the `Store` class. The method accepts an array of conditions and an optional return option. The return option determines whether the function returns a boolean, an array of deleted documents, or the number of deleted documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Deleting User by ID in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to delete a user from the `$userStore` based on its `_id` using the `deleteById()` method. It returns `true` if successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Inserting a New User into SleekDB\nDESCRIPTION: This snippet demonstrates inserting a new user into the 'users' store using the `insert()` method.  It includes user details such as name, email, and avatar URLs. The avatar data is nested within the user document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Example 3: Nested Joins (PHP)\nDESCRIPTION: Illustrates using a `join()` call within a join subquery. This retrieves users, their articles, and the comments associated with each article, demonstrating a nested join scenario where articles are joined to the comments store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Example - SleekDB PHP\nDESCRIPTION: Shows how to prepare an array of PHP arrays, representing multiple documents, and insert them into a SleekDB store using the `insertMany()` function.  The resulting array contains the inserted documents with their unique `_id` values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet demonstrates searching documents in a SleekDB store using the `QueryBuilder` object. It configures a new store, creates a QueryBuilder object, applies a search query to the 'title' and 'content' fields, orders the results by search score, excludes the search score from the result, applies pagination using limit and skip, and then fetches the results, outputting them as a JSON object. SleekDB library and autoload.php is required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Quick Join Example (PHP)\nDESCRIPTION: Demonstrates a quick example of joining the 'users' store with the 'comments' store to fetch users and their associated comments using SleekDB's query builder and join functionality. This creates a new 'comments' property on each user object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store. It requires the SleekDB library and autoloads dependencies. It initializes a Store object, defines a new user array, inserts the user into the store, and outputs the user with its unique ID as JSON. It depends on the SleekDB\\Store class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\"\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n```\n\n----------------------------------------\n\nTITLE: Search with Store: Sort by Relevance (PHP)\nDESCRIPTION: This example demonstrates how to use the `search()` method of the Store class to search through multiple fields in SleekDB. It sorts the results by relevance using the 'searchScore' field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Definition PHP\nDESCRIPTION: Defines the `insertMany` function for inserting multiple documents into a SleekDB store. The function accepts an array of arrays, where each inner array represents a document. It returns an array containing all the inserted documents, each with its generated unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: where Method Example 3 in PHP\nDESCRIPTION: This code demonstrates a complex where condition using nested arrays and AND/OR operators in PHP. It's designed to mirror the SQL example, filtering for users with 'premium' status, living in 'london' or 'new york', and with age either between 16-20 or over 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting data using deleteBy() in SleekDB\nDESCRIPTION: The `deleteBy()` method allows you to delete documents based on specified criteria. It supports complex nested conditions using AND/OR operators and different return options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to create a QueryBuilder instance using the `createQueryBuilder()` method of the `Store` class in SleekDB. This QueryBuilder can then be used to construct complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Update Example 1 in SleekDB PHP\nDESCRIPTION: Updates a user document after retrieving it, changing the 'name' field. It involves inserting a new user, retrieving it by ID, modifying the name, and then updating the document. Requires `$userStore` object initialization and calls `insert()` and `findById()` methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Setting up Data Directory PHP\nDESCRIPTION: This snippet defines the data directory where SleekDB will store its data. It uses the __DIR__ constant to create an absolute path to the 'mydb' directory within the current script's directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: Update One User in PHP\nDESCRIPTION: This example demonstrates updating a user's name after retrieving and modifying the user object.  It uses `insert()` to initially store the user, `findById()` to retrieve it, modifies the 'name' field, and then uses `update()` to persist the changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Search with Nested Fields & Algorithm Config (PHP)\nDESCRIPTION: This code illustrates how to search through nested fields and configure a specific search algorithm using SleekDB's QueryBuilder. It targets a nested property \"title.mainTitle\", sets the search algorithm to \"prioritize\", and applies sorting, exclusion, and limits to the search results. This example demonstrates advanced searching capabilities within SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Grouping documents using SleekDB groupBy() with counter\nDESCRIPTION: This PHP snippet demonstrates how to group documents by the 'category' field and count the number of documents in each group using the `groupBy()` method with a counter key name ('productAmount'). The `where()` method filters the documents based on the 'active' field being true, and `groupBy` groups the active products by category and keeps the product amount. \nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Store object in SleekDB\nDESCRIPTION: This snippet shows how to create a new Store object, which is the starting point for interacting with a SleekDB store.  It takes the store name, database path, and an optional configuration array as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Finding News Articles by Author and Title in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method with multiple criteria to find news articles where the author is \"John\" and the title contains \"cat\". It uses the `AND` operator to combine the conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/criteria.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"], \n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"], \n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert with Auto ID PHP\nDESCRIPTION: Updates or inserts a user with `_id = 23`, automatically generating an `_id` if it's an insert using the `updateOrInsert()` method.  This example demonstrates the default behavior of `$autoGenerateIdOnInsert = true`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache PHP\nDESCRIPTION: This method re-generates the cache for the query. It returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with DateTime in SleekDB\nDESCRIPTION: This snippet demonstrates how to filter data in SleekDB using PHP's DateTime class. It initializes a SleekDB store, creates DateTime objects for a start and end date, and then uses the `findBy()` method to retrieve records where the `releaseDate` falls between these dates. It requires the SleekDB library and assumes the existence of a 'news' store in the specified database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/dates.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: Single Join Example (SleekDB, PHP)\nDESCRIPTION: This example demonstrates a single join operation to retrieve users along with their comments. It shows two different approaches for the join function: returning the result of an executed subquery or returning a QueryBuilder object. Requires SleekDB store instances for 'users' and 'comments'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Example 1 in SleekDB PHP\nDESCRIPTION: Updates or inserts a user document with a specific ID (23), automatically generating an ID if it is an insert. It requires the `$userStore` object to be initialized. The function will update if _id 23 exists, or insert with _id 23.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Insert Document PHP\nDESCRIPTION: This method inserts a new document into the store. It takes an array of data as input and returns the inserted document, including its newly generated unique ID (_id).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Fetching all documents using SleekDB\nDESCRIPTION: This snippet shows how to fetch all documents that match a specific criteria using the `fetch()` method of the SleekDB Query object. It retrieves all users located in London, using the `where` method to filter the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Document by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to update a document by its ID using the `updateById()` method in SleekDB. It takes the ID of the document and an array of fields to update. The method returns the updated document on success or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Update Nested Field in Document\nDESCRIPTION: Example of updating a nested field (address.street) of a user with a specific ID.  Illustrates updating nested values using dot notation. Requires a QueryBuilder instance and assumes the existence of an 'address' field with a 'street' subfield.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Join Stores Example 1 - SleekDB PHP\nDESCRIPTION: This example showcases how to join the 'users' and 'comments' stores using the `join()` method. It demonstrates two alternative ways to perform the join: either by directly returning the result of the `findBy` method, or by returning a `QueryBuilder` object that is later executed with `getQuery()` and `fetch()`.  It requires `SleekDB\\Store` and assumes `$dataDir` is defined.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/join-stores.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Data Returning Count PHP\nDESCRIPTION: This snippet shows how to delete records in SleekDB based on specified criteria and return the count of deleted records. This example deletes all users where the 'active' field is set to 'false' and returns a the count.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Nested WHERE Conditions - PHP\nDESCRIPTION: This PHP code snippet uses SleekDB's query builder to create a query with nested WHERE conditions, similar to the SQL example. It filters users based on product totals, name patterns, and age ranges.  It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance in PHP\nDESCRIPTION: This snippet demonstrates how to create a `QueryBuilder` instance from a `Store` object. The `$userStore` variable is assumed to be an instance of the `Store` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Filtering grouped data using SleekDB having()\nDESCRIPTION: This PHP snippet demonstrates how to filter grouped data using the `having()` method. It selects the category and the sum of views (aliased as totalViews), filters for active products, groups the results by category, and then filters the grouped data to include only categories with total views between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Storing date as a string in SleekDB\nDESCRIPTION: This example shows how to store a date as a string in SleekDB. It creates a new article array with a `releaseDate` field containing a date string in `YYYY-MM-DD` format.  The `insert` method of the SleekDB store is then used to add this article to the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Multiple Joins Example PHP\nDESCRIPTION: This example shows how to use multiple `join()` methods to retrieve users with their comments and articles. It joins the \"users\" store with both the \"comments\" and \"articles\" stores, based on the `userId` and `author` fields respectively. This retrieves all comments and articles associated with each user.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Search with QueryBuilder: Nested Field and Options (PHP)\nDESCRIPTION: This example demonstrates how to use the `search()` method of the QueryBuilder to search through a nested field (title.mainTitle) and a regular field ('content') in SleekDB.  It also shows how to pass search options to configure the search algorithm. It limits the result to 20 items, sorts by relevance and excludes the score field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching a single document using criteria in SleekDB\nDESCRIPTION: The `findOneBy()` method fetches a single document from a SleekDB store that matches the specified criteria. It supports complex queries with nested conditions and returns the first matching document as an array or null if no document is found. This function is used to get a single document based on the provided conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Update Documents\nDESCRIPTION: Updates one or multiple documents based on the current criteria. Returns true on success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to create a SleekDB store using the `SleekDB\\Store` class.  It requires the `SleekDB\\Store` class to be imported and a data directory (`$dataDir`) to be defined. The store name ('news') is used to create a directory within the specified data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: where Example 1 - QueryBuilder in PHP\nDESCRIPTION: This code snippet shows an example of using the `where` method to filter users based on their name, demonstrating the QueryBuilder instance creation, query preparation using `where`, and query execution.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Complex where() condition (PHP)\nDESCRIPTION: Demonstrates a complex `where()` condition with nested `AND` and `OR` operators to filter users based on status, city, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates how to create a new store in SleekDB. It requires the `SleekDB\\Store` class and a data directory path (`$dataDir`). The first parameter is the name of the store, and the second parameter is the data directory where the store's data will be stored.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document - SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store. It initializes a Store object with optional configuration, defines a new user array, and inserts it using the insert() method. The resulting user data, including the generated unique ID, is then outputted as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\",\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Street Field by ID PHP\nDESCRIPTION: Removes the nested 'street' field within the 'address' array of the user document with ID 24 using the `removeFieldsById` function. It uses dot notation to target the nested field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Update by ID Example 3 in SleekDB PHP\nDESCRIPTION: Updates a nested field ('address.street') within a user document with a specific ID.  It requires the `$userStore` object to be initialized and an existing document with the given ID. The 'address' field must exist as an array or object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to delete a SleekDB store using the `deleteStore()` method. It completely removes the store directory and all data and cache associated with it.  The `deleteStore()` method is called on an existing store object (e.g., `$userStore`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Grouping Products with SleekDB and SUM\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to group active products by category and subcategory, calculates the sum of views, and orders the results. It selects the category (aliased as 'Category'), subcategory, product amount, and the sum of views (aliased as 'views').\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \n    \"Category\" => \"category\", \n    \"subcategory\", \n    \"productAmount\", \n    \"views\" => [\"SUM\" => \"views\"] \n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a Store in SleekDB\nDESCRIPTION: This snippet demonstrates how to create a SleekDB store instance using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` class to be imported and takes the store name and data directory as parameters. The store name defines the name of the directory where the data will be stored, and the data directory specifies the base directory for all stores.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Update One User\nDESCRIPTION: Demonstrates how to update a single user in SleekDB. First, a user is inserted into the store. Then, it retrieves the user, modifies a property, and uses the `update` method to persist the changes using the user's `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$store->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: deleteBy() Example 2 with Complex WHERE clause PHP\nDESCRIPTION: This snippet shows how to use the `deleteBy()` method with a more complex WHERE clause involving AND and OR operators and nested conditions. It demonstrates the array structure required to represent such complex conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Deleting User by ID PHP\nDESCRIPTION: This snippet deletes a user with a specific `_id` (12) using the `deleteById()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Multiple Users Auto-Generate ID in PHP\nDESCRIPTION: This example demonstrates how to use the `updateOrInsertMany()` method to update or insert multiple users and apply auto-generated _id's on inserts.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Insert Data into Store PHP\nDESCRIPTION: Inserts a news article (represented as an associative array) into the 'news' store using the `insert` method. The `$article` array contains the article's title, about section, and author information. The `insert` method returns the inserted data including a unique `_id` property that is automatically generated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Multiple where() Conditions in PHP\nDESCRIPTION: This example showcases using multiple `where()` conditions to filter users based on two product properties: `products.totalSaved` and `products.totalBought`. It demonstrates both chaining multiple `where` calls and passing multiple conditions within a single `where` call.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20\"]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20\"]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `orderBy` method within the SleekDB QueryBuilder, which sorts the result set based on a specified field and order. It takes an array containing the field name and sort order ('asc' or 'desc') as input and returns the QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy( array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining Users with Comments and Articles (Example 2)\nDESCRIPTION: This example shows how to use multiple `join()` methods to retrieve all users along with their associated comments and articles. It initializes three SleekDB stores: 'users', 'comments', and 'articles'. Each join uses a closure to perform a sub-query on the respective store to find related data based on the user ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting a document by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a document from the store by its `_id`. The `deleteById` method accepts the document's ID and returns a boolean indicating success or failure.  It is very fast since the document is located by its file path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Removing Nested Field By ID in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to remove a nested field within a document using the `updateById()` method. It removes the 'street' field, which is nested within the 'address' array, from the document with the ID 24.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Get Query Object from QueryBuilder\nDESCRIPTION: Demonstrates how to obtain a Query object instance from a QueryBuilder object in SleekDB.  The Query object is then used to execute database queries. Requires an instance of a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents by Criteria with findBy in PHP\nDESCRIPTION: This snippet shows how to retrieve one or multiple documents from the 'news' store based on specified criteria. It uses the `findBy()` method with parameters for defining where conditions, ordering the results, limiting the number of returned documents, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: GroupBy example with SUM\nDESCRIPTION: Demonstrates grouping by multiple fields and using SUM to calculate the sum of views for each group.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([\n    \"Category\" => \"category\",\n    \"subcategory\",\n    \"productAmount\",\n    \"views\" => [\"SUM\" => \"views\"]\n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update an Entire Document in PHP\nDESCRIPTION: This code snippet demonstrates how to update an entire document in SleekDB using the `update()` method. The method takes an array representing the updated document, and it updates the document with the matching `_id`. Returns `true` on success or `false` if the document with the given _id does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in SleekDB Store\nDESCRIPTION: This code retrieves the total number of documents in the 'news' store. It is optimized for speed by directly counting the files.  The function returns the count as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/fetch-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\nLANGUAGE: php\nCODE:\n```\n$newsCount = $newsStore->count();\n// Returns: 27 \n```\n\n----------------------------------------\n\nTITLE: Getting the last inserted ID\nDESCRIPTION: This snippet shows how to retrieve the ID of the last document inserted into the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Timestamps in SleekDB\nDESCRIPTION: This snippet demonstrates filtering data using timestamps in SleekDB, avoiding the need to directly compare DateTime objects. It first inserts an article with a timestamp for 'createdAt'.  Then, it retrieves articles where 'releaseDate' is within a set of specified timestamps. It requires the SleekDB library and assumes the existence of a 'news' store and a previously stored article.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/dates.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting a Document (no _id) PHP\nDESCRIPTION: This example shows how to update or insert a single document using the `updateOrInsert()` method when no `_id` is initially present in the document. An auto-generated `_id` will be assigned for the insert.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store\nDESCRIPTION: This snippet demonstrates how to create a new SleekDB store using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` class and a data directory path (`$dataDir`). The store is created with a name (e.g., 'news') and stores data in the specified directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/managing-store.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Use Cache QueryBuilder\nDESCRIPTION: Use caching for current query. Accepts an optional cache lifetime in seconds. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Store Class Search Example 1 - PHP\nDESCRIPTION: This example shows how to use the `search()` method of the `Store` class to search through multiple fields. It showcases the simplicity of searching data directly through the store, ordering the results by search score. It searches through 'title', 'description', and 'content' fields for 'SleekDB is the best database solution' and orders by the 'searchScore'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by Criteria in SleekDB (PHP)\nDESCRIPTION: This code demonstrates how to delete documents from a SleekDB store based on specified criteria using the `deleteBy()` method. The criteria can be simple or complex, involving multiple conditions and operations. The return option can be configured to return a boolean, the deleted results or the amount of deleted documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Select functions (SUM, AVG)\nDESCRIPTION: Demonstrates using select functions like SUM and AVG to calculate aggregated values from the 'follower' field. The result includes 'followerSum' and 'followerAvg' values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"followerSum\" => [\"SUM\" => \"follower\"],\n    \"followerAvg\" => [\"AVG\" => \"follower\"]\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"followerSum\" => 81482, \"followerAvg\" => 501.319205]\n]\n```\n\n----------------------------------------\n\nTITLE: In Usage Example 1 PHP\nDESCRIPTION: Demonstrates the basic usage of the `in` method in SleekDB to retrieve users from specific countries: BD, CA, SE, and NA.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Searching Documents Using QueryBuilder in SleekDB\nDESCRIPTION: This code demonstrates searching for documents in SleekDB using the QueryBuilder object. It initializes a store, creates a query to search for documents based on a search term within specific fields, orders the results by score, excludes the score from the final output, applies pagination, and returns the resulting documents as JSON. Requires the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n?>\n```\n\n----------------------------------------\n\nTITLE: findById Method in SleekDB\nDESCRIPTION: The `findById` method retrieves a single document from the SleekDB store based on its unique ID.  It takes an integer `$id` as a parameter and returns the document as an array if found, or null if not found. This method directly accesses the file, making it very efficient.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/fetch-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search Query in PHP\nDESCRIPTION: This snippet shows how to perform a search query in SleekDB, searching through the 'title.mainTitle', 'title.subTitle', and 'content' fields of the 'news' store for the phrase 'SleekDB is the best database solution'. The results are then sorted by relevance using the 'searchScore' in descending order. Requires SleekDB to be installed and a 'news' store to exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to search documents in a SleekDB store using the search() method of the Store object.  It defines a search query, specifies the fields to search in, orders the results by search score, and applies pagination. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"], \n    $searchQuery, \n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Complex Where Conditions - PHP\nDESCRIPTION: This code snippet demonstrates complex `where` conditions, combining AND and OR operators to filter users based on status, city, and age. It retrieves users with \"premium\" status, living in \"london\" OR \"new york\", and being between 16 and 20 OR older than 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using useCache() to Enable Caching in PHP\nDESCRIPTION: Activates caching for a specific query with an optional lifetime parameter.  If no lifetime is specified (null), the cache will be regenerated on every update, delete, or insert. If a lifetime (in seconds) is provided, the cache will expire after that duration; '0' means infinite lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting aggregated data with SleekDB SUM function\nDESCRIPTION: This example demonstrates how to use the `select()` method in SleekDB with aggregate functions like `SUM` and `AVG` to retrieve aggregated data from the 'follower' field. The query builder is used to select the sum and average of the 'follower' field, aliasing them as 'followerSum' and 'followerAvg' respectively, and fetches the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"followerSum\" => [\"SUM\" => \"follower\"],\n    \"followerAvg\" => [\"AVG\" => \"follower\"]\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: where() Method Example 3 PHP\nDESCRIPTION: This code example shows a complex `where` condition with nested `AND` and `OR` operators. It retrieves users that have a status of \"premium\", live in \"london\" OR \"new york\", AND are between 16 and 20 OR older than 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder Object in SleekDB (PHP)\nDESCRIPTION: This snippet illustrates how to reuse a QueryBuilder object to add multiple conditions to a query in SleekDB.  By keeping the QueryBuilder object, you can chain multiple `where()` clauses without resetting the conditions. The resulting query will combine all the conditions specified.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Search Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `search` method within the SleekDB QueryBuilder, which performs a full-text-like search against one or more specified fields. It takes either a single field name as a string, or an array of field names, and a keyword to search for, returning the QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Inserting One Document with SleekDB\nDESCRIPTION: This snippet demonstrates inserting a single document into a SleekDB store. It initializes a new Store object with optional configurations, defines a new user array, inserts the user into the store using the `insert()` method, and outputs the new user data, including its generated unique ID, as JSON. It requires the SleekDB library to be installed via Composer and the autoloader to be included.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\",\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetch Documents with Query\nDESCRIPTION: This snippet retrieves an array of documents from a SleekDB database based on a specified query using the `fetch()` method. It requires an existing Query object and returns an array containing the matched documents or an empty array if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: This code snippet shows how to initialize a SleekDB Store object. It requires the `SleekDB/Store` class and specifies the store name and database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Example: QueryBuilder Search with Sort & Exclude (PHP)\nDESCRIPTION: This code demonstrates how to perform a search using the QueryBuilder class in SleekDB, including sorting the results by relevance and excluding the search score from the final output.  It shows how to chain methods to define the search fields, query, sorting, and exclusion criteria, and then execute the query to fetch the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB PHP\nDESCRIPTION: This snippet inserts a news article (represented as an array) into the 'news' store using the `insert` method. The inserted data, including a unique '_id' property, is returned.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Update One User (SleekDB)\nDESCRIPTION: Illustrates how to update a single user document in SleekDB. It first inserts a new user, retrieves it by its ID, modifies the 'name' field, and then updates the document using the `update` method.  It relies on the `$userStore` object being properly initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Update User Status by ID (SleekDB)\nDESCRIPTION: Updates the 'status' field of a user document in SleekDB, identified by its ID.  It assumes `$userStore` is an instance of the `Store` class and the database is already set up.  The method returns the updated document on success, or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: Fetching documents by criteria in SleekDB\nDESCRIPTION: This function retrieves documents from the SleekDB store that match the specified criteria. It supports multiple criteria, ordering, limiting, and offsetting. The function returns an array containing the matching documents or an empty array if no documents match the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in SleekDB\nDESCRIPTION: This snippet shows how to use the `update()` method to modify documents that match a query. It takes an array of key-value pairs representing the properties to update.  Returns `true` on success and `false` if no documents were updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/query.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Complex findBy Example in PHP\nDESCRIPTION: This example demonstrates a more complex use case of the `findBy` method, simulating a SQL WHERE clause with multiple AND/OR conditions. It shows how to structure the `$criteria` array to achieve the desired filtering logic. The code filters news items where the author is either John or Mark, and the topic is like 'School%' or 'Work%', sorted by title.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Select Fields\nDESCRIPTION: Select specific fields to include in the query results. Accepts an array of field names. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB Nested Joins - Example 3\nDESCRIPTION: This example demonstrates nested joins. It retrieves users, their created articles, and the comments associated with each article. The inner `join` (articles and comments) is performed within the outer `join` (users and articles).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Searching Documents in SleekDB\nDESCRIPTION: This PHP function performs a full-text search against specified fields. It takes an array of fields to search, a query string, and optional parameters for ordering, limiting, and offsetting. It returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Removing fields from a document by ID in PHP\nDESCRIPTION: This code snippet removes specific fields from a document identified by its ID. The `removeFieldsById` method accepts the document's ID and an array of field names to remove. It returns the updated document or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining stores - Quick Example\nDESCRIPTION: This code snippet demonstrates how to join the 'users' store with the 'comments' store to fetch all users along with their associated comments. It uses the `join()` method with an anonymous function that queries the 'comments' store based on the user's ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Nested Field By ID in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to update a nested field within a document in SleekDB using its ID and the `updateById()` method. It changes the 'street' field within the 'address' array to 'first street' for the user with the ID 24.  The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Join Stores Example 2 - SleekDB PHP\nDESCRIPTION: This example demonstrates using multiple `join()` calls to retrieve users, their comments, and their articles.  It chains two `join` calls: one for fetching comments based on the user ID, and another for fetching articles based on the author (user ID). It relies on `SleekDB\\Store` and assumes `$dataDir` is available.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/join-stores.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Example 1 (PHP)\nDESCRIPTION: This snippet demonstrates joining the `users` store with the `comments` store to retrieve users and their associated comments using both `findBy` and a `QueryBuilder` approach within the join function.  It requires `SleekDB\\Store` and initialization of the `$userStore` and `$commentStore` objects.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Delete By Criteria\nDESCRIPTION: This snippet shows the function signature for `deleteBy()`. It accepts an array of criteria for defining the where conditions for deletion, and an integer representing the return option, defaulting to a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to update documents in a SleekDB store using the QueryBuilder. It sets up the store configuration, creates a Store instance, builds a query with a `where()` condition and `orderBy()`, and then uses the `update()` method to set the `status` field to `VIP` for the matching documents. The updated result is outputted as a json object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configurations. It showcases setting options like auto_cache, cache_lifetime, timeout (deprecated), primary_key, and search parameters, including minimum length, mode, score key, and search algorithm. The $dataDir variable should point to the directory where SleekDB stores its data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/configurations.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// default configurations\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120, // deprecated! Set it to false!\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Usage - PHP\nDESCRIPTION: Sorts the result set by the 'name' field in ascending order.  The `orderBy` method provides a way to control the order in which documents are returned. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[[\"_id\" => 13, \"name\" => \"Anton\"], [\"_id\" => 2, \"name\" => \"Berta\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Update by Query\nDESCRIPTION: Updates one or multiple documents based on the criteria defined in the current query. Accepts an array of updatable key-value pairs and a flag to return updated documents.  Returns an array of updated documents or a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Limiting the result set using limit in SleekDB PHP\nDESCRIPTION: Demonstrates how to use the `limit()` method to limit the number of documents returned in the result. This is equivalent to the LIMIT clause in SQL. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder Object in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to keep and reuse the QueryBuilder object in SleekDB to add new conditions. By keeping the object, you can avoid resetting the conditions to default. It builds a query step-by-step, adding conditions for 'products.totalBought', 'products.totalSaved', and 'active' fields, fetching users at each stage.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating Documents using QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates updating documents in SleekDB using the QueryBuilder. It sets up the store, creates a QueryBuilder instance, applies a where condition, orders the results, and then updates the matching documents by setting the 'status' field to 'VIP'. The updated documents are then outputted as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Join Stores\nDESCRIPTION: Joins the current store with another store. Can be used multiple times to join multiple stores. Parameters: `$joinFunction` (Closure) - a closure that defines the join logic, `$propertyName` (string) - the name of the property to store the joined data in. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting a document by ID\nDESCRIPTION: This snippet demonstrates how to delete a document identified by its ID. It's fast because it directly removes the corresponding file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search with Relevance Sorting in PHP\nDESCRIPTION: This code snippet demonstrates how to perform a search operation on a SleekDB store. It searches within the 'title.mainTitle', 'title.subTitle', and 'content' fields of the 'news' store for the query 'SleekDB is the best database solution' and sorts the results in descending order based on the 'searchScore'. The 'news' store is initialized and the search method is called using the store object. The database directory is set using `__DIR__ . \"/database\"`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n```\n\n----------------------------------------\n\nTITLE: SleekDB deleteBy() Function Signature in PHP\nDESCRIPTION: Shows the signature of the `deleteBy()` function in SleekDB, which allows deleting documents based on specified criteria. It takes an array of criteria and an optional return option as parameters, returning either a boolean, integer, or array based on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with Criteria in SleekDB (PHP)\nDESCRIPTION: The `deleteBy()` method deletes documents based on specified criteria.  It accepts an array of conditions and a return option. The criteria can be nested for complex queries. The return option controls whether the method returns a boolean, the deleted results, or the count of deleted documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function (Closure) - PHP\nDESCRIPTION: Demonstrates the use of a custom select function to concatenate the 'forename' and 'surname' fields into a 'fullName'.  Illustrates the flexibility of custom functions for data manipulation during selection. Requires SleekDB QueryBuilder and PHP 7.0+ for closures.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => function($user){\n      return $user['forename'] . ', ' . $user['surname'];\n    },\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Extract the custom function from the select array\n$fullNameSelectFunction = function($user){\n  return $user['forename'] . ', ' . $user['surname'];\n}\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$nameSeparator = ', ';\n\n$fullNameSelectFunction = function($user) use ($nameSeparator){\n  return $user['forename'] . $nameSeparator . $user['surname'];\n};\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"fullName\" => \"Tom, Great\", \"follower\" => 901],\n  [\"age\" => 20, \"fullName\" => \"John, West\", \"follower\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Check Document Existence with Query\nDESCRIPTION: Checks if a document exists based on a given query using the `exists()` method in SleekDB. Requires an existing Query object. Returns `true` if a matching document is found, and `false` otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Complex Query - PHP\nDESCRIPTION: This snippet demonstrates how to execute a complex query with multiple conditions joined by AND and OR operators using SleekDB. It is equivalent to the SQL WHERE clause provided. The input is a nested array structure defining the conditions and logical operators. The expected output is a single news article matching the criteria or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from a SleekDB Store in PHP\nDESCRIPTION: This snippet fetches all documents from the \"news\" store using the `findAll` method and prints the result. `findAll()` returns an array containing all the documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Example - PHP\nDESCRIPTION: This code snippet shows how to insert multiple documents into a SleekDB store using the `insertMany` function. It prepares a PHP array containing multiple user arrays, then inserts all of them into the `$userStore`. The returned `$users` variable contains the inserted documents with `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Simple where() Example in PHP\nDESCRIPTION: This example demonstrates the usage of the `where()` method to filter users based on their name.  It shows both an inline approach and a step-by-step approach of creating the QueryBuilder, preparing the query, and executing it.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update User Status by ID in PHP\nDESCRIPTION: This example shows how to update the 'status' field of a user with a specific ID using the `updateById()` method in SleekDB. It updates the user with _id = 23 to have a status of 'active'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering with rounded prices using SQL having()\nDESCRIPTION: This SQL query selects the name and rounded price (aliased as roundedPrice), filters for active products, and then filters the results using `HAVING` to include only products with roundedPrice between 500 and 1000.  The price is rounded to 0 decimal places.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  name, \n  ROUND(price, 0) AS roundedPrice\nWHERE \n  active = true \nHAVING\n  roundedPrice > 500 AND roundedPrice < 1000;\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Configurations (PHP)\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configurations.  The configuration array allows you to set options like auto_cache, cache_lifetime, timeout, and primary_key. It requires the SleekDB library to be installed and a directory path for data storage.  The output is a new SleekDB\\Store instance configured according to the provided array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/configurations.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\"\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Filtering with Nested Criteria (OR) in SleekDB\nDESCRIPTION: This code demonstrates filtering with nested criteria using the `OR` operator within the outer array. It filters for news articles where the author is \"John\" OR \"Smith\", AND the title contains \"cat\". The optional `AND` operator is explicitly included in the first version, then omitted in the second showing the implicit `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/criteria.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"], \n    \"OR\",\n    [\"author\", \"=\", \"Smith\"], \n  ],\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"], \n    \"OR\",\n    [\"author\", \"=\", \"Smith\"], \n  ],\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search Query in PHP\nDESCRIPTION: This code snippet shows how to search for a phrase within specific fields of documents in a SleekDB store. The `search()` method is used to search through 'title.mainTitle', 'title.subTitle', and 'content' fields within the 'news' store. The results are then sorted in descending order based on their 'searchScore'. A Store object must be initialized beforehand.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n```\n\n----------------------------------------\n\nTITLE: Keeping SleekDB Query Object for Updates (PHP)\nDESCRIPTION: Demonstrates how to keep the `Query` object to perform multiple operations (fetch, update, fetch) on the same result set without re-running the query. This optimizes performance by reusing the already-filtered data. Requires an existing `$userStore` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Finding Document By ID in SleekDB\nDESCRIPTION: This PHP function retrieves a document by its `_id`. It is a fast operation because it finds the document directly by its file path. It takes the `_id` as an integer or string. It returns the document as an array or `null` if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Checking Existence with PHP\nDESCRIPTION: This snippet demonstrates how to efficiently check if a document exists based on a query using the `exists()` method of the Query object. It is more efficient than `fetch`. The example checks if a user with the username \"foobar\" exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Simple orWhere() Example in PHP\nDESCRIPTION: This example uses `orWhere()` in conjunction with `where()` to retrieve users based on combined `AND` and `OR` conditions related to product properties.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20\"]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using Cache with QueryBuilder in PHP\nDESCRIPTION: This snippet demonstrates how to enable caching for a query using the `useCache()` method on a QueryBuilder object. It showcases retrieving and caching active users, with and without a specified lifetime.  It covers cases where cache is invalidated upon insert operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Join Stores Quick Example - SleekDB PHP\nDESCRIPTION: This example demonstrates how to join the 'users' store with the 'comments' store.  It fetches all users and adds a 'comments' property to each user, containing their comments based on user ID. It utilizes the `join` method with a closure that uses the `findBy` method on the `$commentStore` to find comments for each user.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/join-stores.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Options Store-Wide in SleekDB\nDESCRIPTION: This code snippet demonstrates how to configure search options at the store level when creating a SleekDB store. It sets the minimum length of search terms, the search mode, the key for storing search scores, and the search algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: Selecting with Aggregation and GroupBy - PHP\nDESCRIPTION: Illustrates combining `select()` with `groupBy()` to aggregate data based on a specific field in SleekDB. This snippet groups users by 'age' and calculates the sum of 'follower' for each age group, aliased as 'followerSum'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"followerSum\" => 901],\n  [\"age\" => 20, \"followerSum\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Remove Field By ID in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to remove a specific field from a document in SleekDB using its ID with the `updateById()` method and providing the field name to be removed. It removes the 'status' field of the user with the ID 23. The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting User and Returning Results PHP\nDESCRIPTION: This snippet deletes users named 'Joshua Edwards' and retrieves the deleted documents as an array using the `Query::DELETE_RETURN_RESULTS` option. It also requires the `SleekDB/Query` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Check Existence of Document in SleekDB PHP\nDESCRIPTION: This code shows how to check if a document exists based on a given query using the `exists()` method. It's more efficient than `fetch()` when only checking for existence. It returns `true` if a document is found and `false` otherwise. The example checks if a username already exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with IN Clause in PHP\nDESCRIPTION: This snippet demonstrates how to use the `in()` method to filter data based on whether a field's value is within a specified array of values.  It shows examples of using multiple `in` clauses.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Joining Users, Comments, and Articles (SleekDB, PHP)\nDESCRIPTION: This snippet demonstrates how to join three stores in SleekDB: users, comments, and articles. It retrieves all users along with their comments and articles using multiple calls to the `join()` method. The first `join()` retrieves the comments associated with each user, and the second `join()` retrieves the articles authored by each user.  The `Store` objects for 'users', 'comments', and 'articles' must be instantiated before execution.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with SleekDB Query\nDESCRIPTION: This snippet illustrates how to delete documents that match a specified query using the `delete()` method of the SleekDB Query object. It deletes all inactive users and returns a boolean indicating success. Requires an initialized Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: SleekDB InsertMany Function Signature in PHP\nDESCRIPTION: This snippet shows the function signature of the `insertMany` function.  It accepts an array of arrays, where each inner array represents a document to be inserted, and returns an array containing all the inserted documents, each with a unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Using where with separate QueryBuilder steps in PHP\nDESCRIPTION: This snippet shows how to use the `where()` method with separate steps for creating the QueryBuilder, preparing the query, and executing it.  This provides more modularity.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with SleekDB QueryBuilder\nDESCRIPTION: This code demonstrates how to search documents in a SleekDB store using the QueryBuilder. It initializes the SleekDB environment, defines a search query, and uses the QueryBuilder to execute the search, order the results, exclude the search score from the result, and apply pagination. It requires the SleekDB library and autoloads dependencies.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Find Document By ID\nDESCRIPTION: Retrieves one document by its `_id`. Very fast because it finds the document by its file path. Accepts the document ID (integer or string) as a parameter. Returns the document as an array, or `null` if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Using SleekDB Cache\nDESCRIPTION: This code snippet demonstrates how to use the `useCache()` method in SleekDB to retrieve data from the cache. If the data is not present in cache, it will fetch data from storage and then cache it for future use. The query chain shows how to filter, search, order, and limit the results before using the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->where( 'active', '=', 1 )\n    ->where( 'location.country', '=', 'United States' )\n    ->search( 'bio', 'PHP developer' )\n    ->search( 'bio', 'SleekDB' )\n    ->orderBy( 'desc', 'rank' )\n    ->limit( 20 )\n    ->useCache() // Use the cache data.\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Add Where Condition\nDESCRIPTION: Adds a 'where' condition to the query, filtering the data based on the provided conditions. Takes an array of conditions and returns the QueryBuilder object. Multiple calls add 'and where' conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields - PHP\nDESCRIPTION: Retrieves only the 'name' field from all user documents. The example uses the `select` method of the SleekDB QueryBuilder to specify the fields to include in the result.  Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: String function UPPER in PHP\nDESCRIPTION: Demonstrates how to use the `UPPER` string function within the `select` method to convert a field to uppercase.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"UPPER\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents - SleekDB - PHP\nDESCRIPTION: Inserts multiple documents (an array of PHP arrays) into a SleekDB store using the `insertMany()` function. It returns an array containing all the inserted documents, each with an automatically generated unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: where method in PHP\nDESCRIPTION: This snippet presents the signature of the `where` method in the QueryBuilder class in PHP. It accepts an array of criteria to define filtering conditions and returns the QueryBuilder instance, allowing for method chaining. Multiple conditions within a single `where` call are combined with an `AND` operator.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Limiting result count with 'limit' PHP\nDESCRIPTION: Illustrates how to limit the number of documents retrieved using the SleekDB query builder's `limit` method, similar to SQL's LIMIT clause. Retrieves just the first ten users. Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Query Object from QueryBuilder PHP\nDESCRIPTION: This code snippet demonstrates how to obtain a Query object from a QueryBuilder object in SleekDB. The Query object is essential for executing database queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents and Return Count PHP\nDESCRIPTION: This code snippet demonstrates how to delete documents and retrieve the number of deleted documents. It deletes all inactive users and returns their count using `Query::DELETE_RETURN_COUNT`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name - SleekDB (PHP)\nDESCRIPTION: This snippet shows how to delete a user based on their name using the `deleteBy()` method. It demonstrates deleting all users named \"Joshua Edwards\" and expects a boolean `true` as a return value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/delete-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteBy(['name', '=', 'Joshua Edwards']);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Field By ID in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to update a nested field within a document using the `updateById()` method. It changes the 'street' field, which is nested within the 'address' array, of the document with the ID 24 to 'first street'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Complex where() Conditions in PHP\nDESCRIPTION: This example demonstrates a complex `where()` condition with nested `AND` and `OR` operators.  It filters users based on status, city, and age, combining multiple conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find Document by ID\nDESCRIPTION: Retrieves one document by its _id. Very fast because it finds the document by its file path. Returns the document array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from a SleekDB Store using PHP\nDESCRIPTION: This snippet retrieves all news articles from the \"news\" store using the `findAll` method. The retrieved data is then printed to the console using `print_r`. The `findAll` method returns an array of associative arrays, each representing a news article.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Grouping with HAVING Clause PHP - Rounded Price\nDESCRIPTION: This PHP snippet uses SleekDB's Query Builder to select the name and rounded price of active products, rounding the price to zero decimal places. It filters results to only include products with a rounded price between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"name\", \"roundedPrice\" => [\"ROUND\" => [\"price\", 0]] ])\n  ->where([\"active\", \"=\", true])\n  ->having([ \n    [\"roundedPrice\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"roundedPrice\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Grouping and Filtering with SleekDB Query Builder (PHP)\nDESCRIPTION: This PHP snippet uses the SleekDB query builder to group active products by category and filter categories with total views between 500 and 1000. It utilizes the `select`, `where`, `groupBy`, and `having` methods to construct the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Document with SleekDB in PHP\nDESCRIPTION: This snippet demonstrates the `first()` method to efficiently retrieve the first document that matches the query criteria. The example fetches the first user with the email 'foo@bar.com'. Note that `orderBy` will not work with this method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Search with QueryBuilder in SleekDB\nDESCRIPTION: Illustrates how to use the `search` method of the `QueryBuilder` class in SleekDB to perform a full-text search across one or more fields, ordering results by relevance and excluding the score key.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Criteria - Single Condition PHP\nDESCRIPTION: This code snippet demonstrates how to use the $criteria argument to find news articles where the author is \"John\" using the findBy() method in SleekDB. It shows a simple example of filtering data based on a single condition. The $newsStore object is assumed to be an instance of the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/criteria.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Posts Store\nDESCRIPTION: This snippet illustrates creating a 'posts' store using the `SleekDB\\Store` class. It takes the store name 'posts' and the data directory `$dataDir` as parameters. This store is intended to hold posts shared by users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Update Example 2 in SleekDB PHP\nDESCRIPTION: Updates multiple user documents after retrieving them based on a specific criteria (name = 'Josh').  It retrieves users, changes their names, and then updates the entire set of documents. Requires `$userStore` object initialization and `findBy()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Accessing SleekDB Search Algorithm Constants in PHP\nDESCRIPTION: This code demonstrates how to access the predefined search algorithm constants within the SleekDB Query class. These constants, such as Query::SEARCH_ALGORITHM[\"hits\"], represent different search algorithms that can be used to influence the score generation during search operations. The available algorithms are 'hits', 'hits_prioritize', 'prioritize', and 'prioritize_position'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/configurations.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Multiple Where Conditions - Method Chaining in PHP\nDESCRIPTION: This example uses method chaining with multiple `where` calls to retrieve users whose `products.totalSaved` is greater than 10 AND `products.totalBought` is greater than 20. The query is built and executed in a single line using method chaining and `fetch`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting documents with SleekDB (Example 2)\nDESCRIPTION: Deletes documents in SleekDB that match a given query (active equals false) and returns the count of deleted documents. It assumes `$userStore` object is an instance that provides `createQueryBuilder` and `use SleekDB\\Query;` is declared.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Fetch Data PHP\nDESCRIPTION: This example shows how to fetch all documents matching a specific criteria from a SleekDB database using the `fetch()` method on the Query object. The method returns an array containing all the matched documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search with Relevance Sorting (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to perform a search query in SleekDB, targeting multiple fields within a 'news' store. It uses the `search()` method to find articles where the main title, subtitle, or content match the specified search query. The results are then sorted in descending order based on the 'searchScore', indicating the relevance of each result to the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Users Store in SleekDB with PHP\nDESCRIPTION: This code snippet demonstrates the creation of a 'users' store using the `SleekDB\\Store` class.  It assumes that the `$dataDir` variable is already defined, pointing to the data directory for SleekDB. This store can be used to manage user data within the SleekDB database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Creating a Users Store in SleekDB with PHP\nDESCRIPTION: This snippet illustrates creating another SleekDB store, named 'users', for storing user data. It reuses the `$dataDir` variable, which should be a path to a directory accessible by SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Grouping with HAVING Clause PHP\nDESCRIPTION: This PHP snippet uses SleekDB's Query Builder to group active products by category and retrieve categories with total views between 500 and 1000. It selects the category and the sum of views as totalViews, filtering for active products.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting a document\nDESCRIPTION: This snippet shows how to either insert a new document or update an existing one.  It takes an array of data as input and returns the inserted/updated document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Retrieve First Document with Query PHP\nDESCRIPTION: This code demonstrates how to use the `first()` method of the Query object to retrieve the first document that matches a specific condition. It retrieves the user with the email address 'foo@bar.com'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Complex where() conditions with AND/OR in PHP\nDESCRIPTION: This snippet demonstrates a complex query with nested AND and OR conditions. It retrieves users that have the status \"premium\", live in \"london\" OR \"new york\", and are between the age of 16 and 20 OR older than 30.  This showcases the use of nested arrays to define complex logical conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update By ID in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to update a document in SleekDB using its ID with the `updateById()` method. It changes the 'status' field of the user with the ID 23 to 'active'.  The `$userStore` object must be initialized prior to running this code.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a QueryBuilder object using the `createQueryBuilder()` method of the `Store` class. The `$userStore` variable is assumed to be an instance of the Store class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function Usage - PHP\nDESCRIPTION: Demonstrates the syntax for using custom select functions (closures) in SleekDB to manipulate data during retrieval.  This snippet shows how to specify an alias and a closure that receives a document as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => CLOSURE, ...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Store Object with SleekDB in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store object using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace and creates a store named 'news' in the specified database directory. The `__DIR__` constant refers to the current directory where the script is executed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Storing Date as Timestamp in SleekDB\nDESCRIPTION: This snippet shows how to store a date as a timestamp in SleekDB.  It creates a DateTime object, then extracts its timestamp using `getTimestamp()` and includes it in the news article data.  The article is then inserted into the SleekDB store.  It showcases the recommended approach of using timestamps for date storage.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/dates.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Fetch a Single Document by Criteria with findOneBy in SleekDB\nDESCRIPTION: The `findOneBy` method retrieves a single document from a SleekDB store that matches the specified criteria. It returns the document as an array or `null` if no matching document is found. It accepts an array of criteria to filter the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join with QueryBuilder PHP\nDESCRIPTION: This example demonstrates joining stores by returning a `QueryBuilder` object from the `join` closure instead of the result.  It constructs a subquery to find comments associated with each user.  `userStore` and `commentStore` are initialized from the `SleekDB\\Store` class, pointing to database files stored in `$dataDir`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/join-stores.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Multiple Joins - Example 2\nDESCRIPTION: This example showcases the use of multiple `join()` calls to retrieve users along with their associated comments and articles. It joins the 'users', 'comments', and 'articles' stores sequentially.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Document - PHP\nDESCRIPTION: This snippet demonstrates how to update an existing document or insert a new one using the `updateOrInsert()` method. The method takes a PHP array representing the document and an optional boolean flag `autoGenerateIdOnInsert`. If `autoGenerateIdOnInsert` is true (default) and the document doesn't have an `_id`, a new `_id` will be automatically generated. If false, and an `_id` exists in the data, it will be used; otherwise an auto-generated id will be used.  If the document has an `_id` that already exists, the document will be updated.  It returns the updated or inserted document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Search Documents - SleekDB QueryBuilder (PHP)\nDESCRIPTION: This snippet demonstrates how to search documents in a SleekDB store using the QueryBuilder. It builds a query with the fields to search in, the search query, orders by searchScore and removes the searchScore from the final result. Finally, it fetches the search results and outputs them as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Update Nested User Address by ID (SleekDB)\nDESCRIPTION: Updates the 'street' field within the nested 'address' array of a user document using `updateById`. It demonstrates how to access nested values by using a dot notation (address.street).  It relies on the `$userStore` object being properly initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with SleekDB QueryBuilder\nDESCRIPTION: This snippet demonstrates updating documents in a SleekDB store using the QueryBuilder. It initializes the SleekDB environment, sets up a query with a where condition and ordering, and then updates the matching documents with a new status value. It requires the SleekDB library and autoloads dependencies.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Deleting documents with SleekDB (Example 3)\nDESCRIPTION: Deletes documents in SleekDB that match a given query (active equals false) and returns an array of the deleted documents.  It assumes `$userStore` object is an instance that provides `createQueryBuilder` and `use SleekDB\\Query;` is declared.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation - PHP\nDESCRIPTION: This snippet shows how to create a new SleekDB store object using the `Store` class.  It requires the `SleekDB\\Store` namespace and takes the store name and database directory as parameters. This is a prerequisite for all data insertion operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Update Documents\nDESCRIPTION: Updates one or multiple documents based on a query. Accepts an array of fields to be updated. Requires a previous query to be executed to define the documents to be updated. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Delete Inactive Users & Return Count\nDESCRIPTION: Example of deleting all inactive users and retrieving the count of deleted users.  Requires a QueryBuilder instance, assumes an 'active' field, and uses the `Query::DELETE_RETURN_COUNT` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Update Documents Query\nDESCRIPTION: Update one or multiple documents, based on the current query. Accepts an array of updatable fields and a boolean to return the updated documents. Returns an array of updated documents or a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Select Fields\nDESCRIPTION: Selects specific fields to include in the query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Document By ID\nDESCRIPTION: Deletes one document by its `_id`. Very fast because it deletes the document by its file path. Accepts the document ID (integer or string) as a parameter. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Update Nested Data PHP\nDESCRIPTION: This code snippet demonstrates updating a nested value within a SleekDB document. The example updates the 'street' field within the 'address' array of a user.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering with `where` and `orWhere` in PHP\nDESCRIPTION: This PHP snippet uses the `where` and `orWhere` methods to create complex nested conditions to filter users based on status, city and age. The conditions are structured in nested arrays to represent AND and OR logic.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Per-Query - PHP\nDESCRIPTION: This code snippet shows how to configure search options on a query-by-query basis using the `search()` method of the `QueryBuilder` class.  It allows setting `minLength`, `mode`, `scoreKey`, and `algorithm` for a specific search query. The SleekDB library is a prerequisite.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Document by ID\nDESCRIPTION: Updates parts of one document specified by its _id. Returns the updated document or false on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Fetching a Document by ID in SleekDB\nDESCRIPTION: This code snippet shows how to retrieve a single document from a SleekDB store using its unique ID with the `findById()` method. It accepts an integer `$id` as a parameter and returns the corresponding document as an array or `null` if not found. SleekDB accesses the file directly by id making it an efficient method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Multiple Documents in SleekDB\nDESCRIPTION: This PHP function updates or inserts multiple documents.  It receives an array of associative arrays `$data` with documents. Returns the inserted/updated documents as array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Options Per-Query in SleekDB\nDESCRIPTION: This snippet shows how to configure search options on a query-by-query basis when using SleekDB.  It sets the minimum length of search terms, the search mode, the key for storing search scores, and the search algorithm, using an options array passed to the `search` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Example of regenerateCache() in PHP\nDESCRIPTION: Shows how to regenerate the cache for a query. The example initially caches with an infinite lifetime, then regenerates the cache with a 20-second lifetime, forcing a refresh of the cached data.  Requires an existing QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetch Documents with Criteria using findBy() in SleekDB\nDESCRIPTION: Retrieves documents from the SleekDB store based on specified criteria, ordering, limit and offset.  It supports complex nested where clauses, sorting, limiting results, and offsetting.  It returns an array of documents or null if no documents match the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Example SleekDB PHP\nDESCRIPTION: This code snippet demonstrates how to use the `insertMany()` function to insert multiple user documents into a SleekDB store. It prepares a PHP array containing multiple user documents and then calls `$userStore->insertMany($users)` to insert all of the documents into the store. The resulting `$users` variable will contain an array of all the inserted documents with their automatically generated `_id`s.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Creating a Store\nDESCRIPTION: This snippet demonstrates how to create a new store object in SleekDB using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace to be imported. The constructor takes two arguments: the store name and the data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: FindBy with OR and AND Operators in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to use `findBy()` with combined `OR` and `AND` operators to retrieve articles by \"John\" or \"Smith\" containing \"cat\" in the title. It highlights nested criteria arrays and operator precedence in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/criteria.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"],\n    \"OR\",\n    [\"author\", \"=\", \"Smith\"],\n  ],\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"],\n    \"OR\",\n    [\"author\", \"=\", \"Smith\"],\n  ],\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Filtering with where conditions in SleekDB PHP\nDESCRIPTION: Demonstrates how to use the `where` and `orWhere` methods to construct complex filter conditions in SleekDB. It shows nesting conditions and using operators like AND and OR to combine them.  The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to query nested properties in SleekDB using the `where` clause. It filters data based on the 'role' property nested within 'post.author'. Requires SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document SleekDB PHP\nDESCRIPTION: This code snippet defines the `insert()` function used to insert a single document (represented as a PHP array) into a SleekDB store. It accepts an array `$data` representing the document to be inserted and returns the inserted document as an array, including the automatically generated `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Search with Store Class in SleekDB\nDESCRIPTION: Illustrates how to use the `search` method of the `Store` class in SleekDB to perform a full-text search across specified fields and sort the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: Searching for documents using full-text search\nDESCRIPTION: This snippet shows how to perform a full-text search on specific fields within the store.  It allows optional ordering, limiting, and offsetting of the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Update Nested Field by ID in PHP\nDESCRIPTION: This example shows how to update a nested field ('address.street') of a user with a specific ID using the `updateById()` method in SleekDB.  Dot notation is used to access the nested field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Delete Documents with Query\nDESCRIPTION: Deletes one or multiple documents in a SleekDB database based on a specified query using the `delete()` method. It requires an existing Query object and an optional return option. The return value depends on the chosen return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL)\n```\n\n----------------------------------------\n\nTITLE: Delete Documents and Return Results PHP\nDESCRIPTION: This example deletes documents and retrieves the deleted documents as an array. It deletes all inactive users and returns an array of the deleted user records using `Query::DELETE_RETURN_RESULT`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Searching with SleekDB in PHP\nDESCRIPTION: This code snippet shows how to use SleekDB's `search()` method to search for articles based on relevance. It takes the fields to search in, the search query, and an optional sort order as input. The `searchScore` is used to sort the results by relevance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Document by ID\nDESCRIPTION: Deletes one document from the store by its `_id`. Very fast because it deletes the document by its file path.  Parameters: `$id` (int|string) - the ID of the document to delete. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Update Documents - SleekDB QueryBuilder (PHP)\nDESCRIPTION: This snippet demonstrates how to update documents in a SleekDB store using the QueryBuilder. It builds a query with a where condition and then updates the matching documents with a new status value. The number of updated documents is then outputted as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields with SleekDB\nDESCRIPTION: This PHP snippet demonstrates how to use the `select()` method in SleekDB to retrieve only the 'name' field from all user documents. It initializes a query builder, specifies the 'name' field in the `select()` method, and then executes the query to fetch the results. The result includes the '_id' and 'name' fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Add In Condition\nDESCRIPTION: Adds an 'in' condition to the query, filtering data where a specified field's value is within a provided set of values. Takes a field name and an array of values as input, and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Search with QueryBuilder: Sort and Exclude Score (PHP)\nDESCRIPTION: This example demonstrates how to use the `search()` method of the QueryBuilder to search through multiple fields in SleekDB. It sorts the results by relevance using the 'searchScore' field and excludes the 'searchScore' field from the final result set using the `except()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Keeping QueryBuilder Object - PHP\nDESCRIPTION: This example shows how to keep and reuse a `QueryBuilder` object to add multiple conditions to a query.  It demonstrates chaining `where()` calls to build up the query conditions and then execute the query using `getQuery()->fetch()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents PHP\nDESCRIPTION: This snippet demonstrates how to fetch all documents that match a given query using the `fetch()` method. The query filters users located in London and returns an array containing the matching user documents. The function returns an array of arrays where each inner array is a document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB: deleteById() Method Signature\nDESCRIPTION: This snippet shows the signature of the deleteById() method in SleekDB's Store class. It takes an integer or string representing the _id of the document to be deleted.  It returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Records and Returning Results with SleekDB Query\nDESCRIPTION: This snippet demonstrates how to delete documents based on a specified query using the `delete()` method of the SleekDB Query object, and retrieve the deleted users. It imports the `Query` class and deletes inactive users, returning the deleted user array. Requires an initialized Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Grouping and Filtering with SQL\nDESCRIPTION: This SQL query groups active products by category and retrieves only those categories with total views between 500 and 1000. It uses the `SUM` aggregate function and the `HAVING` clause for filtering.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields in SleekDB PHP\nDESCRIPTION: Demonstrates how to use the `select()` method to specify which fields to include in the result. This can improve performance and reduce the size of the returned data. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Street Field by ID PHP\nDESCRIPTION: Updates a nested street field within the 'address' array for a user with a specific ID. It uses dot notation (`address.street`) to target the nested field when calling `$userStore->updateById()`.  This demonstrates updating nested values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with PHP\nDESCRIPTION: This snippet demonstrates how to delete documents based on a query condition using the `delete()` method of the Query object. The example deletes all users that are not active and returns a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Rounding price with HAVING condition SQL\nDESCRIPTION: This SQL snippet selects product names and their rounded prices (rounded to 0 decimal places) where the products are active and the rounded price is between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  name, \n  ROUND(price, 0) AS roundedPrice\nWHERE \n  active = true \nHAVING\n  roundedPrice > 500 AND roundedPrice < 1000;\n```\n\n----------------------------------------\n\nTITLE: Finding one document by criteria\nDESCRIPTION: This snippet demonstrates how to find a single document that matches the given criteria. It returns the document if found, or null otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Directory PHP\nDESCRIPTION: This code snippet initializes the database directory using the `__DIR__` magic constant to create an absolute path.  This path is where SleekDB will store its data files. The path is required before initializing a store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: Update Whole Document PHP\nDESCRIPTION: Updates a whole document using the `update()` method. This method updates/overrides entire document/s, not just parts. It is especially fast because it uses the `_id` of the given document/s to update it directly instead of traversing through all documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Storing Date as a Timestamp in SleekDB\nDESCRIPTION: This snippet demonstrates storing a date as a timestamp in SleekDB.  It creates a DateTime object and retrieves its timestamp using `getTimestamp()`, which is then stored in the `releaseDate` field.  This is the recommended method for storing dates in SleekDB for filtering purposes. This example assumes you have already initialized the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Remove User Name and Age Fields by ID in PHP\nDESCRIPTION: This example demonstrates removing multiple fields ('name' and 'age') from a user with a specific ID using the `removeFieldsById()` method in SleekDB. It removes both the 'name' and 'age' fields of the user with _id = 24.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"name\", \"age\" ]);\n```\n\n----------------------------------------\n\nTITLE: Updating Records with SleekDB Query\nDESCRIPTION: This code demonstrates how to update documents that match a given query using the `update()` method of the SleekDB Query object. It sets the status of all users in London to VIP.  It requires an initialized Query object and an array of updatable fields. The method can optionally return the updated documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Posts Store in PHP\nDESCRIPTION: This snippet creates a 'posts' store in SleekDB, intended to hold user-shared posts. It uses the `Store` class, specifying 'posts' as the store name and `$dataDir` for the data directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Update One User Example PHP\nDESCRIPTION: Demonstrates updating a single user's data after retrieving it. First, a user object is created and inserted into the store. Then, the user is retrieved by ID, modified, and updated back into the store using the `update()` method, leveraging the `_id` for efficient updating.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store Object\nDESCRIPTION: This code snippet demonstrates the creation of a `Store` object in SleekDB, which is required before inserting data. It utilizes the `use SleekDB\\Store;` statement to import the necessary class and then instantiates the `Store` with a store name ('users') and a path to the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Fetching a document by ID in SleekDB\nDESCRIPTION: The `findById()` method retrieves a single document from a SleekDB store based on its unique ID. It directly accesses the file, making it a fast method for retrieving specific documents. It accepts an integer ID as a parameter and returns the document as an array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates creating a second SleekDB store, assuming an existing `$dataDir` variable. The store is named 'users' and will be located within the specified data directory. This demonstrates creating multiple stores within a SleekDB instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Filtering with Multiple Criteria in SleekDB\nDESCRIPTION: This example showcases filtering documents based on multiple conditions.  It searches for news articles where the author is \"John\" AND the title contains \"cat\".  The optional `AND` operator is explicitly included in the first version, then omitted in the second showing the implicit `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/criteria.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"], \n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"], \n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting documents using SleekDB (Count Return)\nDESCRIPTION: This snippet shows how to delete documents and retrieve the number of deleted documents. It configures the `delete()` method to return the count of deleted records using the `Query::DELETE_RETURN_COUNT` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: where() Method Example 1 PHP\nDESCRIPTION: This code demonstrates using the `where()` method to filter data based on a specific condition. The example retrieves users whose name is \"Joshua Edwards\". It shows both an inline approach and a more verbose approach of building the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Closures in SleekDB\nDESCRIPTION: This code snippet demonstrates how to use closures within the `$criteria` argument of the `findBy()` method in SleekDB to filter news articles based on custom logic. It shows different ways to use closures, including inline closures, extracted closures, and closures with external variables.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/criteria.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Extracted the closure from the criteria array\n$johnOrSmithCondition = function($article){\n  return ($article['author'] === 'John' || $article['author'] === 'Smith');\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Use external variables\n$wantedAuthors = ['John', 'Smith'];\n\n$johnOrSmithCondition = function($article) use ($wantedAuthors){\n  return in_array($article['author'], $wantedAuthors, true);\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Performing a full-text search with QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates performing a full-text-like search against one or more fields using the `QueryBuilder`. The `search` method accepts a string or array of fields, the search query, and optional options. It returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Search Documents - SleekDB Store (PHP)\nDESCRIPTION: This snippet demonstrates how to search documents in a SleekDB store using the search() method. It defines the fields to search in, the search query, and orders the results by the scoreKey.  The search results are then outputted as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"], \n    $searchQuery, \n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Group Documents - SleekDB QueryBuilder (PHP)\nDESCRIPTION: This snippet demonstrates how to group documents in a SleekDB store using the QueryBuilder. It builds a query with a where condition, selects specific fields, groups the results by age, adds a having condition, and orders the groups by followerAmount. Finally, it fetches the grouped results and outputs them as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder Object in SleekDB (PHP)\nDESCRIPTION: This code shows how to reuse a `QueryBuilder` object to add multiple conditions to a query.  It creates a `QueryBuilder` instance, adds two `where` conditions sequentially, fetches the results, adds another `where` condition, and fetches the results again, demonstrating that previous conditions are retained.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/advanced.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Nested Join Example PHP\nDESCRIPTION: This example demonstrates how to use a `join()` method within another `join()` method. It retrieves all users, their articles, and the comments associated with each article.  The outer join retrieves the users and their articles and the inner join finds all comments related to those articles by joining the article store with the comment store based on article id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithms in SleekDB - PHP\nDESCRIPTION: This code snippet illustrates how to access predefined search algorithms within SleekDB using the `Query` class. These algorithms determine the method used for generating search scores. The snippet shows how to access the 'hits' search algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/configurations.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Store Constructor PHP\nDESCRIPTION: Creates a new Store object. Internally, it creates a new store folder if it doesn't exist. The function takes a store name, data directory, and an optional configuration array as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(string $storeName, string $dataDir, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Initializing a SleekDB Store Object in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB Store object. It requires the SleekDB library and specifies the store name and database directory. The resulting $userStore object is used for interacting with the 'users' data store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Deleting with Complex WHERE clause in PHP\nDESCRIPTION: This snippet showcases how to construct a complex WHERE clause for deleting documents in SleekDB using the `deleteBy()` method. The criteria are nested arrays representing logical AND and OR operations. Each condition is an array containing the field name, operator, and value to match against.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Filtering Data by Author in SleekDB\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method in SleekDB to filter news articles by a specific author. It uses the `$criteria` argument to specify the field to filter (`author`), the condition to apply (`=`), and the value to match (`John`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/criteria.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents and Returning Results with PHP\nDESCRIPTION: This snippet demonstrates how to delete documents based on a query condition and retrieve the deleted documents as an array. It uses the `Query::DELETE_RETURN_RESULT` constant for the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Numeric function ROUND in PHP\nDESCRIPTION: Demonstrates how to use the `ROUND` numeric function within the `select` method to round the value of a field to a specified precision.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"ROUND\" => [\"fieldName\", PRECISION]], ...]\n```\n\n----------------------------------------\n\nTITLE: Grouping and Filtering with SleekDB (PHP)\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to group active products by category and retrieve categories with total views between 500 and 1000. It utilizes the `select`, `where`, `groupBy`, and `having` methods for constructing the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Store Search Method Signature (PHP)\nDESCRIPTION: Shows the signature for the search method of the Store class. This method provides a simplified way to search the store directly, returning an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination in SleekDB (PHP)\nDESCRIPTION: The `changeStore()` method allows a single Store object to manage multiple stores by changing the destination. It takes the new store name, an optional data directory, and an optional configuration array as parameters. This allows for dynamic switching between data stores without creating new Store objects.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Join Users with Comments\nDESCRIPTION: This PHP snippet demonstrates how to use the `join()` method in SleekDB to retrieve users along with their associated comments. It initializes the user and comment stores and uses a closure to define the join condition based on user ID, returning the result or the query builder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update by ID Method Signature\nDESCRIPTION: Shows the signature of the `updateById` method, which allows updating parts of a document using its ID. It's faster than traversing all documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Set Skip Amount PHP\nDESCRIPTION: Sets the amount of data records to skip.  Used for pagination. Takes an integer representing the number of records to skip. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store\nDESCRIPTION: This code demonstrates inserting data into a SleekDB store. It utilizes the `insert()` method of a `Store` object (in this case, `$userStore`). The method accepts an associative array representing the data to be inserted.  The data is stored as a JSON document in the specified store directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: SQL SUM example\nDESCRIPTION: This SQL shows how to get the Sum of a column.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(follower) as followerSum;\n```\n\n----------------------------------------\n\nTITLE: Changing Store Example - SleekDB PHP\nDESCRIPTION: Illustrates changing the active store in SleekDB using the `changeStore()` method. The example creates a store named 'users', inserts data, then changes the store to 'alerts' and inserts new data there. This demonstrates the ability to dynamically manage multiple databases using one Store instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents with findAll in PHP\nDESCRIPTION: The `findAll` method retrieves all documents from a SleekDB store. It returns an array containing all documents or an empty array if no documents exist. This function takes no parameters and is a straightforward way to retrieve all data from a store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Select and OrderBy - SQL\nDESCRIPTION: SQL statement for selecting category as Category, subcategory, counting productAmount, summing views, filtering for active products, grouping by category and subcategory, and ordering by category and subcategory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination in SleekDB\nDESCRIPTION: This PHP code allows the user to change the destination of an existing Store object. It takes the new store name, an optional database path, and an optional configuration array as parameters. The method returns the modified Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to keep and reuse a QueryBuilder object in SleekDB to add multiple conditions. This avoids resetting conditions to default and allows for building complex queries incrementally. It showcases the use of the `where()` method to add conditions and `getQuery()->fetch()` to retrieve the data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get First Document from Query PHP\nDESCRIPTION: This snippet shows how to retrieve the first document that matches a specified query criteria using the `first()` method. It retrieves the first user with the email 'foo@bar.com'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: NestedWhere conditions array structure PHP\nDESCRIPTION: Demonstrates the array structure required for the deprecated nestedWhere function, showing how to define outermost operations and nested conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Criteria in SleekDB\nDESCRIPTION: This PHP function deletes one or more documents based on specified criteria. It accepts an array of criteria and a return option. The return option determines what the function returns (boolean, array, or null).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Remove Fields from Documents PHP\nDESCRIPTION: This snippet demonstrates how to remove specific fields from documents that match a query criteria using the `removeFields()` method. It removes the 'status' field from all users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Configuring SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configuration options. It sets the auto_cache, cache_lifetime, timeout (deprecated), primary_key, and search configurations for the 'news' store. The configuration array is passed as the third parameter to the Store constructor.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// default configurations\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120, // deprecated! Set it to false!\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Selecting aggregated data with SQL SUM function\nDESCRIPTION: This SQL snippet illustrates using the `SUM` function to calculate the total number of followers.  It's a direct SQL equivalent for aggregation. It calculates the sum of the 'follower' column and aliases it as 'followerSum'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(follower) as followerSum;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Document in SleekDB\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store. It initializes a new Store object, defines a new user array, inserts the user into the store using the insert() method, and outputs the new user data as a JSON string. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUser = [\n  \"username\" => \"Bob\",\n  \"age\" => 20,\n  \"address\" => [\n    \"street\" => \"down street\"\n    \"streetNumber\" => 12,\n    \"postalCode\" => \"8174\",\n  ],\n];\n\n$newUser = $userStore->insert($newUser);\n\n// Output user with its unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUser);\n```\n\n----------------------------------------\n\nTITLE: Grouping with HAVING condition PHP\nDESCRIPTION: This PHP snippet uses SleekDB's QueryBuilder to group active products by category and retrieve categories with total views between 500 and 1000. It uses the select, where, groupBy, and having methods to construct the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document by ID in SleekDB\nDESCRIPTION: This PHP function deletes a document by its `_id`.  It's fast because it deletes the file directly.  It takes the ID as an integer or string.  Returns `true` on success, `false` otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Store - SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to search for documents in a SleekDB store using the `search()` method of the Store object. It configures a SleekDB store and then performs a search on the `title` and `content` fields, orders results by `scoreKey`, and applies pagination using `limit` and `skip`.  The search results are then returned as JSON.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"], \n    $searchQuery, \n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields with 'select' PHP\nDESCRIPTION: Illustrates how to select specific fields to retrieve from a database using the SleekDB query builder's `select` method. Retrieves only the 'name' field from the 'users' collection. Depends on the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]] \n```\n\n----------------------------------------\n\nTITLE: Updating a Document in PHP with SleekDB\nDESCRIPTION: This example demonstrates how to update an entire document using the `update()` method after retrieving it using `findById()`.  It first inserts a new user, retrieves it, modifies the name, and then updates the entire document in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: deleteBy() Example 1 with Return Results PHP\nDESCRIPTION: This snippet demonstrates using the `deleteBy()` method to delete all users whose name is \"Joshua Edwards\" and retrieve the deleted documents. It requires the `SleekDB/Query` namespace and uses the `Query::DELETE_RETURN_RESULTS` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Selecting aggregated data with groupBy in SleekDB\nDESCRIPTION: This example demonstrates how to use the `select()` method in conjunction with `groupBy()` to retrieve aggregated data grouped by a specific field ('age'). The query builder is used to select the 'age' field and the sum of the 'follower' field, aliasing the sum as 'followerSum', and then groups the results by 'age'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Counting documents in SleekDB\nDESCRIPTION: This function returns the total number of documents in the SleekDB store. It efficiently counts the files without loading their content. The function returns the count as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/fetch-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\nLANGUAGE: php\nCODE:\n```\n$newsCount = $newsStore->count();\n// Returns: 27 \n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields\nDESCRIPTION: Illustrates how to select only the 'name' field from the 'users' collection. This method returns an array of documents, each containing only the _id and name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Inserting a User into a SleekDB Store with PHP\nDESCRIPTION: This code inserts a new user document into the 'users' store. It defines a user with a name, email, and avatar details. The avatar is an array containing 'sm' and 'lg' image paths. This operation utilizes the `insert()` method of the `$userStore` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: First Data PHP\nDESCRIPTION: This snippet illustrates how to retrieve the first document matching specific criteria from a SleekDB database using the `first()` method.  This method is more efficient than `fetch()` for retrieving a single record. The `orderBy` will not work when using this method to get the very first item.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by ID using deleteById() PHP\nDESCRIPTION: This snippet demonstrates deleting a document by its `_id` using the `deleteById()` method. It attempts to delete the document with `_id` equal to 12 and returns a boolean representing success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Creating a Store in SleekDB with PHP\nDESCRIPTION: This code snippet demonstrates how to create a new store in SleekDB using the `SleekDB\\Store` class. It requires the SleekDB library to be installed and a data directory path to be defined in the `$dataDir` variable. The store is initialized with a name ('news' in this case) and the data directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users Using notIn() - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `notIn()` method in SleekDB to retrieve users who are NOT from specific countries. It excludes users from the countries specified in the array.  It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetch All Documents with findAll in SleekDB\nDESCRIPTION: The `findAll` method retrieves all documents from a SleekDB store. It returns an array containing all documents in the store, or an empty array if no documents are found. This method does not accept any parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Configuring Search (Store-Wide) - PHP\nDESCRIPTION: Demonstrates how to configure SleekDB's search behavior store-wide when creating a new store instance. This includes setting the minimum word length, search mode, score key, and search algorithm.  The configuration is passed as an array during store initialization.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: Update One User - SleekDB - PHP\nDESCRIPTION: Demonstrates how to update a single user's data in SleekDB using the `update()` method. The example retrieves a user, modifies a property, and then updates the user's record based on their `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$store->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields - PHP\nDESCRIPTION: Illustrates how to select specific fields from a SleekDB database using the `select()` method. The example retrieves the 'name' field from all user documents, demonstrating basic field selection.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Delete Documents By Criteria PHP\nDESCRIPTION: This method deletes one or multiple documents based on the specified criteria. It supports different return options to specify the type of data returned after deletion. It returns a boolean, array, or null depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Delete User by Name in SleekDB\nDESCRIPTION: This example demonstrates how to delete all users with the name \"Joshua Edwards\" using the `deleteBy()` method. It uses a simple criteria array to specify the condition and returns true on successful deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Changing SleekDB Store Destination (PHP)\nDESCRIPTION: Demonstrates how to use the `changeStore()` method of the `Store` class to dynamically switch the active store. This allows a single `Store` object to manage multiple data stores.  Parameters include the new store name, data directory (optional), and configuration array (optional).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents by Criteria in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch documents from a SleekDB store based on specified criteria using the `findBy()` method.  It retrieves news articles from the `$newsStore` store where the author is 'John', orders the results by title in ascending order, limits the result to 10 documents, and skips the first 20.  Returns an array of documents or an empty array if no matching documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\n----------------------------------------\n\nTITLE: Using Infinite Cache PHP\nDESCRIPTION: This code snippet demonstrates how to activate caching for a query with an infinite lifetime. Setting the lifetime to 0 with the useCache() method results in the cache persisting indefinitely until manually cleared or the store is updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Joining Users and Comments - SleekDB (PHP)\nDESCRIPTION: This example shows how to retrieve users with their comments using the `join()` method. It initializes two stores, 'users' and 'comments', and then performs a join operation where the 'comments' property is populated with comments that have a 'userId' matching the user's '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/join-stores.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Removing Fields from a Document by ID in SleekDB\nDESCRIPTION: This PHP function removes specific fields from a document, identified by its primary key. It takes the document ID and an array of fields to remove. It returns the modified document or false if the document does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Retrieving all documents from the store\nDESCRIPTION: This snippet shows how to retrieve all documents from the SleekDB store.  It allows optional ordering, limiting, and offsetting of the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination Example - PHP\nDESCRIPTION: This example shows how to create a store, insert data, change the store destination using `changeStore()`, and insert more data into the new store. It utilizes the `Store` class from SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document\nDESCRIPTION: Inserts a single document into a SleekDB store. It takes a PHP array as input, representing the document to be inserted, and returns the inserted document as an array, including the automatically generated and unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Finding documents by criteria in PHP\nDESCRIPTION: This code snippet retrieves one or multiple documents from the store based on specified criteria. The `findBy` method accepts an array of criteria, optional ordering, limit, and offset parameters. It returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Update Nested Values with Query PHP\nDESCRIPTION: This snippet demonstrates how to update a nested value within a document that matches the query criteria using the `update()` method. The street of a user located in london is updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents SleekDB PHP\nDESCRIPTION: This code snippet defines the `insertMany()` function used to insert multiple documents (represented as a PHP array) into a SleekDB store. It accepts an array `$data` containing multiple documents to be inserted and returns an array containing the inserted documents, each including an automatically generated `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Get Store Object PHP\nDESCRIPTION: Gets the store object used to create the query builder. Returns the `Store` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many Documents\nDESCRIPTION: Creates/Inserts many documents in the store or updates existing ones if they already exist. Parameters: `$data` (array) - an array of associative arrays, each representing a document. Returns the inserted/updated documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nfunction updateOrInsertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Multiple orWhere() conditions in PHP\nDESCRIPTION: This snippet demonstrates chained `orWhere()` calls to build a complex OR condition. The example retrieves users where `products.totalSaved > 10 OR (products.totalBought > 20 AND products.shipped = 1) OR totalBought = 0`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing a SleekDB Store in PHP\nDESCRIPTION: This snippet initializes a SleekDB store named \"news\" using the previously defined data directory.  If the store does not exist, it will be created automatically. An optional configuration array can be passed as a third parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in SleekDB Query\nDESCRIPTION: This PHP function updates one or multiple documents based on the current query. It takes an associative array `$updatable` containing the fields to update and a boolean flag indicating whether to return the updated documents.  It returns an array of updated documents if `$returnUpdatedDocuments` is true, otherwise it returns a boolean indicating success/failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Update a Single User\nDESCRIPTION: Demonstrates updating a single user's name using the `update()` method. First, a user is inserted, then retrieved, modified, and finally updated in the SleekDB store. The `_id` is used to identify the record to be updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$store->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: Quick Example (SleekDB, PHP)\nDESCRIPTION: This example demonstrates a basic join operation to fetch users and their associated comments. It uses the `join` method to create a 'comments' property for each user containing their comments. Requires the $userStore and $commentStore to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Document By ID\nDESCRIPTION: Updates parts of a single document identified by its _id. Accepts the document's _id and an array of updatable key-value pairs.  Returns the updated document as an array or false on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Document with Criteria in SleekDB\nDESCRIPTION: This snippet demonstrates how to retrieve a single document from a SleekDB store that matches the specified criteria using the `findOneBy()` method. It accepts an array `$criteria` representing where clauses and returns the first matching document as an array or `null` if no match is found. Only returns a single document\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in PHP\nDESCRIPTION: This code snippet shows how to fetch all documents from a SleekDB store using the `findAll()` method.  It demonstrates a simple retrieval of all news articles. Optional parameters allow sorting, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/fetch-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Search Function Signature in SleekDB\nDESCRIPTION: This PHP code shows the function signature of the `search` method in the SleekDB QueryBuilder class.  This method is used to perform full-text searches against specified fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete User and Retrieve Results in SleekDB\nDESCRIPTION: This example shows how to delete all users with the name \"Joshua Edwards\" and retrieve the deleted documents. It uses the `Query::DELETE_RETURN_RESULTS` constant to specify the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Distinct Method Usage PHP\nDESCRIPTION: Demonstrates how to use the `distinct` method to retrieve unique users based on the `name` field.  The example shows how to chain the `distinct` method with `getQuery()` and `fetch()` to retrieve the desired data. Two examples are provided: using a string and an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update User Status to VIP\nDESCRIPTION: Example of updating the status of all users located in London to 'VIP' using the `update()` method. Requires an instance of a QueryBuilder and a city field in the user documents. Updates the 'status' field in all matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Update Document Method PHP\nDESCRIPTION: Updates a whole document.  It accepts an array of documents to update, using the `_id` field of each document to identify the documents to update. Returns `true` on success or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Update or Insert a User without ID in PHP\nDESCRIPTION: This example demonstrates how to use the `updateOrInsert()` method to insert a new user without specifying an _id.  The function will autogenerate an _id value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Documents in SleekDB\nDESCRIPTION: This snippet illustrates the `exists()` method to check if any document matches the specified query. It's more efficient than using `fetch()` for checking existence and returns a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/query.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction exists(): bool\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents in SleekDB\nDESCRIPTION: This snippet demonstrates how to use the `delete()` method to remove documents that match a query. It supports different return options to specify what the method returns after deletion: boolean, the count of deleted documents, or the deleted documents themselves.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/query.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Delete Documents with Query PHP\nDESCRIPTION: This snippet demonstrates how to delete documents that match a specified query criteria using the `delete()` method. It deletes all inactive users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Delete Document by ID\nDESCRIPTION: Deletes one document by its _id. Very fast because it deletes the document by its file path. Returns true on success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Field by ID in PHP\nDESCRIPTION: This example demonstrates removing a nested field ('address.street') from a user with a specific ID using the `removeFieldsById()` method in SleekDB. It removes the 'street' field within the 'address' array of the user with _id = 24.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Delete Cache\nDESCRIPTION: Deletes the cache file(s) for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Example - PHP\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a SleekDB store using the `insert` function.  It prepares a PHP array representing a user, then inserts it into the `$userStore`. The returned `$user` variable will contain the automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Searching a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates how to use SleekDB to search for articles in a 'news' store. It initializes a `Store` object, defines a search query, and then calls the `search()` method to search through the 'title.mainTitle', 'title.subTitle', and 'content' fields. The results are sorted by 'searchScore' in descending order. The store is located in the `/database` directory relative to the current script.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\",\n//     \"subTitle\" => \"Just believe me!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search(\n  [\"title.mainTitle\", \"title.subTitle\", \"content\"], // fields\n  $searchQuery, // query\n  [\"searchScore\" => \"DESC\"] // orderBy\n);\n\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering Example using where in SleekDB PHP\nDESCRIPTION: Illustrates a complex filtering scenario using nested conditions, including AND and OR operators, mimicking an SQL WHERE clause. It showcases the flexibility of the SleekDB query builder. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Select and OrderBy - PHP\nDESCRIPTION: Illustrates combining `groupBy()`, `select()`, and `orderBy()` to group, aggregate, and sort data.  The example groups active products by 'category' and 'subcategory', calculates the sum of 'views', and sorts the results by 'category' (ASC) and 'subcategory' (DESC).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([\n    \"Category\" => \"category\",\n    \"subcategory\",\n    \"productAmount\",\n    \"views\" => [\"SUM\" => \"views\"]\n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"Category\" => \"pants\", \"subcategory\" => \"shorts\", \"productAmount\" => 20, \"views\" => 212],\n  [\"Category\" => \"pants\", \"subcategory\" => \"jeans\", \"productAmount\" => 83, \"views\" => 331],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Limit Method Usage - PHP\nDESCRIPTION: Limits the result set to the first 10 documents. The `limit` method is used to restrict the number of documents returned by the query. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder PHP\nDESCRIPTION: Creates a `QueryBuilder` instance from a `userStore` object. This is the starting point for building and executing queries with caching options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Keeping Query Object for Updates in SleekDB (PHP)\nDESCRIPTION: This example shows how to keep the Query object in SleekDB to perform additional operations like updating documents without running an additional query. It uses the `createQueryBuilder()`, `where()`, and `getQuery()` methods to create and store a query. The code then demonstrates fetching data and updating the matched documents, followed by fetching the updated data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: String function LENGTH in PHP\nDESCRIPTION: Demonstrates how to use the `LENGTH` string function within the `select` method to get the length of a field (can also be used on arrays).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"LENGTH\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Fetching One Document by Criteria in PHP\nDESCRIPTION: This snippet retrieves a single document from the SleekDB store that matches the provided criteria using the `findOneBy()` method.  If multiple documents match, only the first one found is returned. Returns null if no document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/fetch-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Update Documents with Query PHP\nDESCRIPTION: This example updates the status of all users located in London to 'VIP' using the `update()` method of the Query object. The `update` method modifies documents based on the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Where Clause in PHP\nDESCRIPTION: This snippet demonstrates how to use the `where()` method to filter data based on specified criteria. It shows examples of using the `where` method inline, multiple times, and with nested conditions. The conditions are combined with `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating Additional SleekDB Stores\nDESCRIPTION: This snippet shows how to create multiple SleekDB stores. It assumes you're building a community platform and need stores for users and posts. It uses the `SleekDB\\Store` class with different store names ('users', 'posts') and the same data directory (`$dataDir`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/managing-store.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Storing Date as a String in SleekDB\nDESCRIPTION: This snippet demonstrates how to store a date as a string in a SleekDB document.  It shows a basic example of inserting a new article with the releaseDate field set to a date string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Algorithm Hits Prioritize - PHP\nDESCRIPTION: Shows how to set the search algorithm to 'hits_prioritize' using the `Query::SEARCH_ALGORITHM` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits_prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: Using notIn() to Filter Users by Country PHP\nDESCRIPTION: This code snippet demonstrates how to use the notIn() method to retrieve users who are not from specific countries. It chains the method with getQuery() and fetch() to execute the query and retrieve the results. The query filters out users from the countries 'IN', 'KE', and 'OP'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with DateTime objects in SleekDB\nDESCRIPTION: This code snippet demonstrates how to filter data in SleekDB using PHP's DateTime objects with the `findBy` method.  It converts date strings to DateTime objects and uses the `BETWEEN` operator to retrieve news articles within a specific date range.  The example assumes SleekDB is installed and autoloaded, and a 'news' store is already created.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Search QueryBuilder\nDESCRIPTION: Performs a full-text like search against one or more fields. Accepts the fields to search (as a string or array), the search query string, and optional search options. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder object\nDESCRIPTION: This snippet demonstrates how to create a QueryBuilder object from a Store object. The QueryBuilder is used to construct complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetching all documents with SleekDB\nDESCRIPTION: Executes a SleekDB query to retrieve all documents that match a given criteria (city equals london) and returns them as an array. It depends on a QueryBuilder being properly configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Multiple Documents PHP\nDESCRIPTION: This example shows how to update or insert multiple documents using the `updateOrInsertMany()` method. The first parameter expects an array of documents to be updated or inserted.  The second parameter, `autoGenerateIdOnInsert`, dictates whether a missing '_id' field should generate a new '_id' upon insertion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/insert-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: where Method Example 1 in PHP\nDESCRIPTION: This code demonstrates using the where method to filter users based on their name. Two approaches are shown: one using inline chaining and another creating the QueryBuilder separately. Both methods retrieve users named 'Joshua Edwards'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Finding News Articles by Author (OR) and Title in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method with nested criteria and the `OR` operator to find news articles where the author is either \"John\" or \"Smith\" and the title contains \"cat\".\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/criteria.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"], \n    \"OR\",\n    [\"author\", \"=\", \"Smith\"], \n  ],\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"], \n    \"OR\",\n    [\"author\", \"=\", \"Smith\"], \n  ],\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Fetch Documents from Query PHP\nDESCRIPTION: This snippet demonstrates how to fetch all documents that match a specified query criteria using the `fetch()` method. It retrieves all users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Sorting results using orderBy in SleekDB PHP\nDESCRIPTION: Shows how to use the `orderBy()` method to sort the result set by one or more fields in ascending or descending order.  The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: FindBy with Closure in SleekDB (PHP)\nDESCRIPTION: This example illustrates how to use closures within the `findBy()` method for custom filtering logic in SleekDB.  It demonstrates finding news articles by authors \"John\" or \"Smith\" with \"cat\" in the title, using a closure for the author check.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/criteria.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Extracted the closure from the criteria array\n$johnOrSmithCondition = function($article){\n  return ($article['author'] === 'John' || $article['author'] === 'Smith');\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$wantedAuthors = ['John', 'Smith'];\n\n$johnOrSmithCondition = function($article) use ($wantedAuthors){\n  return in_array($article['author'], $wantedAuthors, true);\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Update Single User - SleekDB - PHP\nDESCRIPTION: This code snippet demonstrates how to update a single user's data in SleekDB. It first inserts a new user, retrieves the user using `findById()`, modifies the user's name, and then updates the user in the database using the `update()` method with the modified user data, leveraging the automatically assigned `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$store->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in PHP\nDESCRIPTION: This code snippet demonstrates how to get the total number of documents in a SleekDB store using the `count()` method. It retrieves the number of news articles in the `$newsStore` store. The method is optimized for speed by counting files directly and returns an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$newsCount = $newsStore->count();\n// Returns: 27 \n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents - SleekDB PHP\nDESCRIPTION: Inserts multiple documents (array of PHP arrays) into the SleekDB store using the `insertMany()` function. The function expects an array of associative arrays, where each inner array represents a document to be inserted. It returns an array containing all inserted documents, each including the automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Updating a document by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to update a document in the store by its `_id`. The `updateById` method accepts the document's ID and an array of fields to update. It returns the updated document as an array or `false` if the update fails.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Update Nested Field with Query PHP\nDESCRIPTION: This example updates a nested field ('address.street') of users located in London to 'first street' using the `update()` method of the Query object. Nested fields can be updated using dot notation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Or Where Condition\nDESCRIPTION: Add or-where conditions to filter data. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Properties in SleekDB\nDESCRIPTION: This code snippet shows how to search multiple properties simultaneously in SleekDB. It searches the 'bio' field for 'Manufactured in Canada' and the 'location.country' field for 'Canada', then filters the results to only include active users (where 'active' equals 1).\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/search-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = $usersDB\n    ->search( 'bio', 'Manufactured in Canada' )\n    ->search( 'location.country', 'Canada' )\n    ->where( 'active', '=', 1 )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with timestamps in SleekDB\nDESCRIPTION: This example demonstrates how to filter data in SleekDB using timestamps instead of DateTime objects. It retrieves timestamps from DateTime objects and then uses those timestamps in the `findBy` method with the `IN` operator. This approach avoids potential issues with DateTime object conversions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: Update Or Insert Document\nDESCRIPTION: Creates/Inserts a new document in the store or updates an existing one if it already exists. Accepts an array of data. Returns the inserted/updated document as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function Example - PHP\nDESCRIPTION: Demonstrates how to use a custom select function (closure) to concatenate the 'forename' and 'surname' fields into a 'fullName' field.  This shows different ways to define and use the closure within the select statement including using external variables.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => function($user){\n      return $user['forename'] . ', ' . $user['surname'];\n    },\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Extract the custom function from the select array\n$fullNameSelectFunction = function($user){\n  return $user['forename'] . ', ' . $user['surname'];\n}\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$nameSeparator = ', ';\n\n$fullNameSelectFunction = function($user) use ($nameSeparator){\n  return $user['forename'] . $nameSeparator . $user['surname'];\n};\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"fullName\" => \"Tom, Great\", \"follower\" => 901],\n  [\"age\" => 20, \"fullName\" => \"John, West\", \"follower\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithms - PHP\nDESCRIPTION: This code shows how to access the different search algorithms available in SleekDB through constants of the Query class. These constants are used to specify which algorithm to use when configuring search options either store-wide or per-query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Delete Document By ID PHP\nDESCRIPTION: This method deletes a document by its unique ID (_id). It is optimized for speed because it directly deletes the document using its file path. It returns a boolean indicating whether the deletion was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Complex orWhere() conditions in PHP\nDESCRIPTION: This code illustrates complex filtering using nested conditions with `OR` and `AND` operators. It provides an equivalent SQL example for clarity, demonstrating how to retrieve users with specific criteria related to status, city, and age, using orWhere().\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// example in sql\nWHERE \n  status = \"premium\" \n  OR \n  (\n    (\n      city = \"london\" OR city = \"new york\" \n    )\n    AND \n    (\n      (age >= 16 AND age < 20) OR age > 30 \n    )\n  )\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Except Method Example in SleekDB (PHP)\nDESCRIPTION: Demonstrates how to use the `except` method to retrieve all user information except for the `_id` and `name` fields. The example shows a call to `except` with an array of field names, followed by `getQuery` and `fetch` to execute the query and retrieve the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\": 28], [\"age\": 18]]\n```\n\n----------------------------------------\n\nTITLE: Using useCache() with Specific Lifetime in PHP\nDESCRIPTION: This example demonstrates how to use the `useCache()` method to cache results for a specific duration (120 seconds = 2 minutes). It fetches active users and caches the results for the specified lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Searching Documents using QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to perform searches in SleekDB using the QueryBuilder object.  It configures a store, creates a QueryBuilder instance, specifies the search fields and query, orders the result by the search score, excludes the searchScore from the final result set, applies pagination, and then returns the matching documents as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Find Document by ID\nDESCRIPTION: Retrieves one document by its _id. Very fast because it finds the document by its file path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: orWhere Example 3 - Complex OR conditions using arrays in PHP\nDESCRIPTION: This code demonstrates a complex query using `orWhere` with nested conditions, filtering users based on status, city, and age using a combination of AND/OR logic within the `orWhere` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function (Closure) - PHP\nDESCRIPTION: Demonstrates using a custom select function (closure) to combine data from multiple fields into a single field in SleekDB. This example concatenates 'forename' and 'surname' to create a 'fullName' field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => function($user){\n      return $user['forename'] . ', ' . $user['surname'];\n    },\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating Another Store in SleekDB\nDESCRIPTION: This snippet demonstrates how to create another SleekDB store instance, assuming you are working with multiple data categories, such as users. It initializes a new `Store` object with a different store name ('users') but uses the same data directory as the previous store. The `dataDir` variable should be defined beforehand, pointing to the base directory where SleekDB stores its data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: OrderBy example 2 result\nDESCRIPTION: Result of the orderBy example 2.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"_id\" => 13, \"name\" => \"Anton\", \"age\" => 20],\n  [\"_id\" => 4, \"name\" => \"Aragon\", \"age\" => 16], \n  [\"_id\" => 2, \"name\" => \"Aragon\", \"age\" => 17], \n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional Store\nDESCRIPTION: This snippet shows how to create another store object, representing a 'users' store. It assumes that the `$dataDir` variable is already defined and available in the scope. The store name 'users' and the data directory are passed to the `Store` constructor.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Where Condition\nDESCRIPTION: Adds a \"where\" condition to filter data. Can be used multiple times; additional uses add an \"and where\" condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Select Fields PHP\nDESCRIPTION: Select specific fields to include in the query results.  Takes an array of field names as a parameter.  Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB Insert Function Signature in PHP\nDESCRIPTION: This snippet displays the function signature of the `insert` function used to insert a single document into a SleekDB store. The function accepts an array as input representing the document and returns an array including the generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Updating by ID PHP\nDESCRIPTION: Updates a specific document by its ID. The `updateById()` method takes the document's ID and an array of fields to update. Returns the updated document on success or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Selecting Nested Fields with Alias - PHP\nDESCRIPTION: Retrieves the 'age' field from a nested 'userBiography' array and assigns it an alias 'age'.  Demonstrates how to access nested data and rename the resulting field using the `select` method. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: Selecting Nested Fields with Alias - PHP\nDESCRIPTION: Demonstrates selecting a nested field from a SleekDB document using the `select()` method and assigning an alias to the selected field. The example retrieves the 'age' field from the 'userBiography' nested array and aliases it as 'age'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date and Time in SleekDB (PHP)\nDESCRIPTION: Demonstrates storing the current date and time in a SleekDB store. Two methods are shown: formatting the DateTime object as a string using `format()` and storing the timestamp using `getTimestamp()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Limiting results with `limit` in PHP\nDESCRIPTION: This PHP snippet uses the `limit` method to limit the result set to a specific number of users, similar to the LIMIT clause in SQL.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit($limit)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete User by ID in SleekDB\nDESCRIPTION: This example demonstrates how to delete a user with a specific `_id` using the `deleteById()` method. It returns `true` if the deletion was successful or if the document did not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Example 2 (PHP)\nDESCRIPTION: This snippet demonstrates using multiple `join()` calls to retrieve users, their comments, and their articles. It joins the `users` store with `comments` and `articles` stores, retrieving the associated data for each user. It requires `SleekDB\\Store` and initialization of the `$userStore`, `$commentStore`, and `$articleStore` objects.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Query PHP\nDESCRIPTION: Returns a new `Query` object which can be used to execute the query build. The `Query` object is responsible for executing the query defined by the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Getting the SleekDB Query Object\nDESCRIPTION: Demonstrates how to obtain a SleekDB Query object from a QueryBuilder instance, which is necessary for executing queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder PHP\nDESCRIPTION: This snippet shows how to create a QueryBuilder instance from a SleekDB store object.  It is the starting point for creating and executing queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: where Example 2 - Multiple where calls inline in PHP\nDESCRIPTION: This snippet shows how to use multiple `where` calls chained together to create a query that filters users based on two conditions, `products.totalSaved` and `products.totalBought`. This example constructs and executes the query inline.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents using QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This code demonstrates grouping documents in SleekDB using the QueryBuilder. It sets up the store, creates a QueryBuilder, applies a where condition, selects fields including a SUM aggregation, groups the results by age and peopleCount, applies a having condition, orders the result, applies pagination, and fetches the grouped results. The output is returned as JSON.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Store Object in SleekDB\nDESCRIPTION: This PHP code snippet shows the constructor for creating a new Store object in SleekDB.  It requires the store name and database path. Optionally, you can specify a configuration array. If the store folder doesn't exist, it's created internally.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: OrderBy example 2\nDESCRIPTION: Shows how to order the result by multiple columns.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents in SleekDB PHP\nDESCRIPTION: This code demonstrates how to delete documents based on a query using the `delete()` method of the SleekDB Query object. The `$returnOption` parameter dictates the return type, allowing for boolean success/failure, the count of deleted documents, or an array of the deleted documents.  It uses constants from the SleekDB\\Query class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL)\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Sorting Results by Name and Age - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `orderBy()` method to sort users by their 'name' and then by 'age', both in ascending order. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configuration options. The configuration array allows you to specify settings like auto_cache, cache_lifetime, timeout, and the primary key used by the store. The store is initialized with the specified configurations, data directory, and store name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/configurations.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\"\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Delete Document by ID PHP\nDESCRIPTION: Deletes a single document from the store based on its unique '_id'. This is a fast operation as it directly uses the file path for deletion. id (int): The unique identifier of the document to delete.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Remove Fields (Query)\nDESCRIPTION: Removes specified fields from one or multiple documents based on the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Inserting a New User in SleekDB with PHP\nDESCRIPTION: This code demonstrates inserting a new user into the 'userStore' in SleekDB. It creates an array containing user data (name, email, avatar) and uses the `insert()` method of the `SleekDB\\Store` class to store the data as a JSON document in the store. The `userStore` variable is assumed to be an instance of the `SleekDB\\Store` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Get Query Object from QueryBuilder PHP\nDESCRIPTION: This snippet shows how to obtain a Query object instance from a QueryBuilder object, which is necessary to execute database queries in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Except Fields\nDESCRIPTION: Excludes specific fields from the query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with distinct()\nDESCRIPTION: This PHP code shows two examples of using the `distinct` method. The first example provides a string, while the second provides an array.  Both examples retrieve unique users based on the 'name' field, removing any duplicate entries with the same name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert a Document in PHP\nDESCRIPTION: This code snippet shows the function definition for `updateOrInsert()` in SleekDB. This function either updates an existing document if it exists, or inserts a new document if it does not. The function takes an array of data and a boolean which determines whether the id should be autogenerated when a document is being inserted.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\npublic function updateOrInsert(array $data, bool $autoGenerateIdOnInsert = true): array\n```\n\n----------------------------------------\n\nTITLE: Initializing a SleekDB Store Object in PHP\nDESCRIPTION: This snippet shows how to create a new SleekDB store object named 'users', specifying the store name and the database directory. This is a prerequisite for inserting data into the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: useCache() Example PHP\nDESCRIPTION: This snippet demonstrates how to use the `useCache()` method to enable caching for a query that retrieves 20 active users. It shows how the cache is automatically invalidated upon inserting a new user. When no lifetime is provided, the cache is invalidated after data modifications.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Check Existence\nDESCRIPTION: Checks if any data matching the query criteria exists. Returns a boolean indicating whether any documents were found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Reusing Query Object for Updates in SleekDB PHP\nDESCRIPTION: This snippet showcases how to keep a Query object in SleekDB and use it for fetching data and then updating the discovered documents without running an additional query. The Query object is created using `createQueryBuilder()` and the `where()` method to set conditions.  The `fetch()` method retrieves the data, and then `update()` modifies the matched documents. It then fetches the updated data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using the where() Method (PHP)\nDESCRIPTION: Explains how to use the `where()` method to filter data based on specified criteria. It provides examples of single and multiple conditions connected by `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Keeping QueryBuilder Object - SleekDB PHP\nDESCRIPTION: Shows how to reuse a QueryBuilder object in SleekDB to add multiple conditions. The example creates a QueryBuilder, adds two `where` conditions, fetches the results, then adds another `where` condition and fetches the results again. This avoids creating new QueryBuilder objects for each set of conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Storing Date as a Timestamp in SleekDB\nDESCRIPTION: This snippet shows how to store a date as a timestamp in SleekDB. It creates a DateTime object, retrieves its timestamp using the `getTimestamp()` method, and then stores this timestamp in the `releaseDate` field of the article. This allows for easy sorting and filtering based on date values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/dates.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache PHP\nDESCRIPTION: Deletes all cache files for the current store. This is a destructive operation that removes all cached data. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Nested Join: Users, Articles, and Comments (SleekDB, PHP)\nDESCRIPTION: This code demonstrates a nested `join()` in SleekDB to retrieve users with their created articles and the comments associated with each article.  It first joins the `userStore` with the `articleStore` to retrieve the articles created by each user. Within the first join's closure, another `join()` is performed on the `articleStore`'s query builder to fetch the comments associated with each article. This results in a structure where each user has an array of articles, and each article has an array of comments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Document by ID with findById in PHP\nDESCRIPTION: The `findById` method retrieves a single document from a SleekDB store based on its unique ID. This method accesses the file directly, which makes it efficient. It returns the document as an array or null if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Fetching documents with findBy in PHP\nDESCRIPTION: This code demonstrates how to fetch documents from a SleekDB store based on specified criteria using the `findBy()` method. It allows for complex queries with conditions, ordering, limiting, and offset. The `$criteria` parameter is an array defining the search conditions. The `$orderBy` parameter allows to sort the results. The `$limit` parameter limits the amount of returned results. The `$offset` parameter allows to skip a specific amount of results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\n----------------------------------------\n\nTITLE: Multiple where() conditions using a single array in PHP\nDESCRIPTION: This snippet demonstrates applying multiple conditions within a single `where()` call using an array. This is an alternative to method chaining, allowing for a more compact representation of the conditions (`products.totalSaved > 10 AND products.totalBought > 20`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get First User by Email\nDESCRIPTION: Example of retrieving the first user with a specific email address using the `first()` method. Requires an instance of a QueryBuilder and an email field in the user documents. Returns the first user document matching the specified email address.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to create a QueryBuilder instance from a SleekDB store. The QueryBuilder is then used for constructing queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Update Or Insert Many Documents with Provided IDs (PHP)\nDESCRIPTION: This snippet demonstrates updating/inserting multiple documents in SleekDB using the `updateOrInsertMany()` method with `$autoGenerateIdOnInsert` set to `false`. It uses provided `_id`'s when inserting new documents and will generate an `_id` if it isn't present. The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Document PHP\nDESCRIPTION: This example shows how to insert a single document into a SleekDB store using the `insert()` method. The input is a PHP array representing the document, and the output is the inserted document including the automatically generated '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Filtering News Articles with Closures in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use closures with the `findBy()` method to filter news articles. It finds articles where the author is \"John\" or \"Smith\" and the title contains \"cat\". The examples show different ways to use closures, including extracting the closure into a separate variable and using external variables.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/criteria.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Extracted the closure from the criteria array\n$johnOrSmithCondition = function($article){\n  return ($article['author'] === 'John' || $article['author'] === 'Smith')\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$wantedAuthors = ['John', 'Smith'];\n\n$johnOrSmithCondition = function($article) use ($wantedAuthors){\n  return in_array($article['author'], $wantedAuthors, true);\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: findOneBy Method in SleekDB\nDESCRIPTION: The `findOneBy` method retrieves a single document from the SleekDB store based on the specified criteria. It takes an array of criteria `$criteria` as a parameter.  It returns the first document that matches the criteria or null if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/fetch-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\n----------------------------------------\n\nTITLE: Setting the sort order in PHP\nDESCRIPTION: This code demonstrates how to set the sort order for the query results. The `orderBy` method accepts an array of criteria and returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents PHP\nDESCRIPTION: This method inserts multiple documents into the store. It accepts an array of data arrays and returns the inserted documents, each with their unique ID (_id).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Updating documents with SleekDB (Example 1)\nDESCRIPTION: Updates documents in SleekDB based on a query (city equals london), setting the status field to VIP.  It assumes `$userStore` object is an instance that provides `createQueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: deleteById() Example PHP\nDESCRIPTION: This snippet demonstrates how to use the `deleteById()` method to delete a document by its `_id`. It assumes that `$userStore` is an existing instance of the `Store` class and that a document with `_id` 12 exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: where() Method Definition PHP\nDESCRIPTION: This code snippet shows the method signature for the `where()` method of the `QueryBuilder` class. It's used to add `where` conditions to the query being built. It accepts an array `$criteria` and returns the `$this` QueryBuilder object to allow method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Performing a full-text search using QueryBuilder\nDESCRIPTION: This snippet demonstrates how to perform a full-text search on specific fields using the QueryBuilder.  It takes the field(s) to search, the query string, and optional options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache in PHP\nDESCRIPTION: This code demonstrates how to regenerate the cache for a query using the `regenerateCache()` method. This forces the query to fetch fresh data from the store and update the cache, regardless of the cache's current lifetime. First the cache is set to infinite, and then it is forced to regenerate by being set to a 20 second lifetime and calling regenerateCache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching single document with findOneBy in PHP\nDESCRIPTION: This code shows how to fetch one document from a SleekDB store using the `findOneBy()` method based on given criteria. The method returns the first document that matches the criteria, or `null` if no document matches. This is useful when you only need a single result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Lifetime PHP\nDESCRIPTION: This code snippet shows how to activate caching for a query and define a specific lifetime (in seconds) for the cache. In this example, the cache lifetime is set to 120 seconds (2 minutes).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Set Order By\nDESCRIPTION: Sets the sort order for the query result. Takes an array of criteria for sorting and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet updates documents in a SleekDB store using the QueryBuilder. It defines a where condition to select documents based on location and age, then updates the selected documents by setting the 'status' field to 'VIP'. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Boolean Return in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates deleting documents based on a query and returning a boolean value indicating success or failure. It deletes all users who are not active and returns true if any documents were deleted, and false otherwise. This uses the default `Query::DELETE_RETURN_BOOL` return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Delete Data Returning Results PHP\nDESCRIPTION: This snippet shows how to delete records in SleekDB based on specified criteria and return the deleted records. This example deletes all users where the 'active' field is set to 'false' and returns a array of deleted records.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with deleteBy() - Example 1 PHP\nDESCRIPTION: This snippet demonstrates deleting data using the `deleteBy()` method with a simple condition. It deletes all users whose name is \"Joshua Edwards\" and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to search documents in a SleekDB store using the QueryBuilder's `search()` method. The example shows creating a new store object, setting up pagination, defining a search query, and then using the QueryBuilder to search specific fields, order results by the search score, exclude the score from results, limit the number of results, skip a number of results, and finally, fetch the data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"]) // remove score from result\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with DateTime Objects in SleekDB\nDESCRIPTION: This snippet demonstrates how to filter data in SleekDB using PHP's DateTime objects with the `findBy` method and the `BETWEEN` condition. It initializes a SleekDB store, converts date strings to DateTime objects, and then retrieves news articles within a specified date range. Requires the SleekDB library and assumes that `vendor/autoload.php` is properly configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/dates.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Limit Records\nDESCRIPTION: Sets the maximum number of data records to return (limit).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int|string $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents PHP\nDESCRIPTION: Creates/Inserts many documents in the store. Returns the inserted documents with their new and unique _id. The function accepts an array of associative arrays, each representing a document to insert.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Update Documents PHP\nDESCRIPTION: This method updates one or multiple documents. It takes an array of updatable data as input. It returns a boolean indicating whether the update was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with SleekDB Query\nDESCRIPTION: This code demonstrates how to fetch all documents that match a specific criteria using the `fetch()` method of the SleekDB Query object. It retrieves all users located in London. It requires an initialized Query object and returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Order in SleekDB\nDESCRIPTION: This PHP function sets the sort order for the query results.  It takes an array of criteria for ordering.  Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Checking if data exists in PHP\nDESCRIPTION: This code snippet demonstrates how to check if any data matching the query exists. The `exists` method returns a boolean indicating whether any documents were found that match the query criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Keeping Conditions in SleekDB Queries\nDESCRIPTION: This code demonstrates how to use the `keepConditions()` method to prevent the active query state from being reset after fetching data. This allows for performing additional operations (like update) on the same query results without re-running the query. The example shows fetching and then updating documents based on the same conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Find documents.\n$result = $usersDB\n  ->keepConditions() // Won't reset the active query state.\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0);\n\n// Fetch data.\n$result->fetch();\n\n// Update matched documents.\n$result->update([\n  'someRandomData' => '123',\n]);\n```\n\n----------------------------------------\n\nTITLE: Searching Documents using Store - SleekDB (PHP)\nDESCRIPTION: This code demonstrates how to search documents within a SleekDB store using the search() method of the Store object. It initializes the store, defines a search query, specifies the fields to search within, and sets the sorting order based on the search score. Pagination is also implemented, and the search results are returned as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"],\n    $searchQuery,\n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Delete Documents with Query PHP\nDESCRIPTION: This code snippet demonstrates how to delete documents based on a query using the `delete()` method of the Query object. It deletes all users that are not active.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Fetching the first document using SleekDB\nDESCRIPTION: This code demonstrates retrieving the first document that matches a specific condition using the `first()` method of the SleekDB Query object. In this example, it retrieves the first user with the email address 'foo@bar.com'. Note that `orderBy` will not work with this method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Find One Document by Criteria\nDESCRIPTION: Retrieves a single document from the store based on specified criteria. Returns the document as an array, or null if no matching document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Finding One Document By Criteria in SleekDB\nDESCRIPTION: This PHP function retrieves a single document that matches the given criteria. It accepts an array of criteria for filtering the data. It returns the first document matching the criteria, or `null` if no document matches.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Fetch Document by ID with findById() in SleekDB\nDESCRIPTION: Retrieves a single document from the SleekDB store using its unique ID. This method accesses the file directly, making it efficient. It returns the document as an array or null if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Updating documents based on query\nDESCRIPTION: This snippet demonstrates how to update documents based on the current query. It takes an array of updatable fields as input and optionally returns the updated documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Delete by ID in PHP\nDESCRIPTION: This example demonstrates how to delete a document by its _id using the deleteById() method. It attempts to delete the document with _id 12. The method returns true if the deletion was successful or if the document does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Not In Condition PHP\nDESCRIPTION: This method adds a \"not in\" condition to filter data. It checks if a field's value is not within a specified array of values. It takes a field name and an array of values as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to update multiple users in SleekDB. It retrieves users based on a condition, iterates through them, modifies their properties, and then updates all the modified users in the store using the `update()` method. The `_id` within each user array is used for updating the correct documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/edit-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Where Condition\nDESCRIPTION: Adds a \"where\" condition to filter the data. Can be used multiple times; additional uses add an \"and where\" condition.  Accepts an array of conditions.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Simple Join Example\nDESCRIPTION: This PHP snippet demonstrates a basic join operation in SleekDB. It queries the 'users' store and joins related comments for each user, storing them in the 'comments' property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Documents in SleekDB PHP\nDESCRIPTION: This snippet demonstrates how to update documents based on a query using the `update()` method of the SleekDB Query object. It accepts an array of key-value pairs representing the fields to update and an optional boolean flag to return the updated documents. It returns `true` on success, `false` if no documents were updated or the updated documents if `$returnUpdatedDocuments = true`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Nested Join Example (PHP)\nDESCRIPTION: This snippet showcases a nested `join()`, where a join is performed within the subquery of another join.  It retrieves users, their created articles, and then the comments for each article. It requires `SleekDB\\Store` and initialization of the `$userStore`, `$commentStore`, and `$articleStore` objects.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: OrderBy Multiple Fields - PHP\nDESCRIPTION: Demonstrates how to sort by multiple fields ('name' and 'age') using the `orderBy()` method. The results are first sorted by name in ascending order and then by age in ascending order.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"_id\" => 13, \"name\" => \"Anton\", \"age\" => 20],\n  [\"_id\" => 4, \"name\" => \"Aragon\", \"age\" => 16], \n  [\"_id\" => 2, \"name\" => \"Aragon\", \"age\" => 17], \n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents with findAll in PHP\nDESCRIPTION: This snippet retrieves all documents from the 'news' store. It shows how to use the `findAll()` method without any parameters to get all data.  It also describes optional parameters for sorting, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Update Nested Field by ID PHP\nDESCRIPTION: Changes the street of the user with _id = 24 using the `updateById()` method and dot notation. This example updates a nested field within the 'address' array. It demonstrates how to use dot notation to target specific values within nested data structures.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Sorting Results by Name - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `orderBy()` method to sort users by their 'name' in ascending order. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents with Criteria in SleekDB\nDESCRIPTION: This snippet illustrates how to retrieve one or more documents from a SleekDB store that match specific criteria using the `findBy()` method. It allows filtering with `$criteria`, ordering results with `$orderBy`, limiting the number of results with `$limit`, and setting an offset with `$offset`.  It returns an array of matching documents or `null` if no matches are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\n----------------------------------------\n\nTITLE: Storing current date and time in SleekDB\nDESCRIPTION: This example showcases storing the current date and time in SleekDB, both as a formatted string and as a timestamp.  It creates a DateTime object representing the current time and demonstrates how to format it into a string using `format()` and retrieve its timestamp using `getTimestamp()`. Either value is then stored within the `createdAt` field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Fetching One Document by Criteria in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch a single document from a SleekDB store based on specified criteria using the `findOneBy()` method. It retrieves one news article from the `$newsStore` store where the author is 'Mike'. Returns a single document or null if no matching document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\n----------------------------------------\n\nTITLE: Find All Documents PHP\nDESCRIPTION: Retrieves all documents from the store. The function returns an array containing all documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Fetch Query Results\nDESCRIPTION: Executes the query and retrieves the results as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Adding Having Condition in SleekDB\nDESCRIPTION: This PHP function adds a 'having' condition to the query builder. It allows filtering after join, search, select and groupBy methods are applied. It takes an array of criteria for filtering. It returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in PHP\nDESCRIPTION: This code demonstrates how to efficiently count the total number of documents in a SleekDB store using the `count()` method.  This provides a fast file count operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/fetch-data.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction count(): int\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$newsCount = $newsStore->count();\n// Returns: 27 \n```\n\n----------------------------------------\n\nTITLE: Where Clause - Multiple lines - PHP\nDESCRIPTION: This snippet demonstrates the use of the `where` method to filter data based on a single condition. It creates a query builder, adds a where clause to match names equal to \"Joshua Edwards\", retrieves the query object, and fetches the results using the `fetch()` method. The condition is set up using multiple lines.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with select()\nDESCRIPTION: This PHP code uses the `select` method to retrieve only the 'name' field of all users. The output will only contain the _id and name fields for each user record.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Fetching all documents with findAll in PHP\nDESCRIPTION: This code shows how to fetch all documents from a SleekDB store using the `findAll()` method. The method returns an array containing all documents in the store, or an empty array if the store is empty. No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Checking existence with SleekDB\nDESCRIPTION: Executes a SleekDB query to check if a document exists that matches a given criteria (username equals foobar) and returns a boolean value (true if exists, false otherwise).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in SleekDB\nDESCRIPTION: This snippet demonstrates how to use the `fetch()` method to retrieve all documents that match the query criteria. It returns an array of documents or an empty array if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/query.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction fetch(): array\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: OrWhere Clause Examples in PHP\nDESCRIPTION: These are examples on how to use `orWhere` clauses.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Example: Delete user by ID\nDESCRIPTION: This example demonstrates how to delete a user by their ID using the `deleteById()` method. It showcases the basic usage and returns a boolean value indicating the success of the operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Filtering with DateTime objects in SleekDB\nDESCRIPTION: This example demonstrates how to use PHP's DateTime objects to filter data in SleekDB using the `findBy` method with the `BETWEEN` operator. It shows how to create a SleekDB store, define start and end dates as DateTime objects, and retrieve data within that range. Ensure that the `releaseDate` field in your data can be converted to a DateTime object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store with PHP\nDESCRIPTION: This code snippet demonstrates how to delete a SleekDB store using the `deleteStore()` method. This action permanently removes the store and all its data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Insert New Document\nDESCRIPTION: Creates/Inserts a new document in the store. Returns the inserted document with its new and unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: SleekDB Store Change Example (PHP)\nDESCRIPTION: Illustrates how to change the store destination for a SleekDB Store object. A store is created, data is inserted, the store destination is changed using `changeStore()`, and then more data is inserted into the new store.  This demonstrates managing multiple stores with one object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Deleting documents by criteria in PHP\nDESCRIPTION: This code snippet deletes documents from the store based on specified criteria. The `deleteBy` method accepts an array of criteria and an optional return option. It returns a boolean, array, or null depending on the `returnOption` parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting a Document (no auto-generated _id) PHP\nDESCRIPTION: This example shows how to update or insert a single document using the `updateOrInsert()` method, explicitly disabling automatic `_id` generation on insert. If the `_id` does not exist, it won't be automatically generated and used, rather a new auto-generated ID will be used for the insert.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\n----------------------------------------\n\nTITLE: Find Document by ID\nDESCRIPTION: Retrieves one document from the store by its `_id`. Very fast because it finds the document by its file path. Parameters: `$id` (int|string) - the ID of the document to retrieve. Returns the document as an array, or `null` if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Searching with SleekDB QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates full-text search functionality using the `search()` method of the SleekDB QueryBuilder. It searches for articles containing the word \"SleekDB\" in their content. The `$fields` parameter specifies the field(s) to search in, and `$keyword` is the search term.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$articles = $articleQueryBuilder\n  ->search(\"content\", \"SleekDB\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Reusing SleekDB Query Object (PHP)\nDESCRIPTION: Illustrates how to reuse a Query object for multiple operations such as fetching and updating data.  A Query object is created, data is fetched, then the same Query object is used to update the data, and finally, data is fetched again to retrieve the updated records. This prevents redundant queries and improves performance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Excluding nested fields with 'except' PHP\nDESCRIPTION: Illustrates how to exclude nested fields from the result set using the SleekDB query builder's `except` method.  Retrieves all user information except 'name' and 'address.streetNumber'. Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting Primary Key in SleekDB\nDESCRIPTION: This PHP function retrieves the name of the field used as the primary key. It does not take any input parameters. The function returns the primary key field name as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: Example 1: Delete user by name\nDESCRIPTION: This example demonstrates how to delete all users with the name \"Joshua Edwards\" using the `deleteBy()` method. It shows the basic usage and returns a boolean value indicating the success of the operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document into SleekDB Store\nDESCRIPTION: This code demonstrates how to insert a single document into a SleekDB store using the `insert` method. It prepares a PHP array representing the user data and then calls the `$userStore->insert($user)` method to insert the data into the store. The returned value is the inserted document, including the automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Deleting User with Complex Criteria PHP\nDESCRIPTION: This snippet demonstrates a more complex deletion scenario using nested criteria with 'OR' and 'AND' operators.  It deletes users based on a combination of name and age conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Keeping Query Object - SleekDB PHP\nDESCRIPTION: Illustrates how to keep a Query object in SleekDB to perform multiple operations on the same set of results. The example creates a Query, fetches data, updates the matched documents, and fetches the data again to verify the update. This avoids running additional queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents by Criteria PHP\nDESCRIPTION: Deletes one or more documents from the store based on the specified criteria. This function offers options for what to return after the deletion operation. criteria (array): An array of conditions to filter the documents to be deleted. returnOption (int, optional): Specifies what to return after deletion. Can be Query::DELETE_RETURN_BOOL, Query::DELETE_RETURN_ARRAY, or Query::DELETE_RETURN_NULL.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Delete Documents By Criteria\nDESCRIPTION: Deletes one or multiple documents based on provided criteria. Accepts an array of criteria for filtering and an optional `returnOption` parameter to specify the return value. Returns a boolean, an array, or null depending on the `returnOption`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Exclude Specific Fields\nDESCRIPTION: Specifies which fields to exclude from the result set. Parameters: `$fieldNames` (string[]) - an array of field names to exclude. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB Basic Store Join\nDESCRIPTION: This snippet demonstrates a basic example of joining the 'users' and 'comments' stores in SleekDB. It fetches all users and adds a 'comments' property to each user object, containing the user's comments. The function returns the executed subquery result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find All Documents in SleekDB Store PHP\nDESCRIPTION: This code retrieves all documents from the 'news' store using the `findAll` method. The returned data is then printed using `print_r`. No specific filters or sorting are applied.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Update single user in SleekDB using PHP\nDESCRIPTION: This code snippet demonstrates how to update a single user in SleekDB. First, a user is inserted, then retrieved using `findById()`.  The user's name is updated, and the `update()` method is used to persist the changes to the database, using the user's `_id` for direct update.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$store->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining stores - Example 3\nDESCRIPTION: This example showcases nested `join()` calls. It retrieves all users with their created articles, and each article contains its comments.  The inner `join()` fetches the comments for each article.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Count Documents\nDESCRIPTION: Returns the total number of documents in the store.  Returns an integer representing the document count.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents with Complex Criteria in PHP\nDESCRIPTION: This code snippet demonstrates a complex `findBy` query with nested criteria to simulate a SQL WHERE clause. It shows how to combine multiple conditions using 'AND' and 'OR' operators with the `findBy()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store\nDESCRIPTION: This snippet demonstrates how to delete a store using the `deleteStore()` method. Calling this method on a store object will permanently delete the store and all data and cache it contains. This assumes the `$userStore` object has already been instantiated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Directory Path PHP\nDESCRIPTION: This code snippet initializes the data directory path where SleekDB will store its data.  It constructs an absolute path by concatenating the current directory (__DIR__) with the directory name \"/mydb\". This path is then used when creating a new SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: orderBy() Usage Example PHP\nDESCRIPTION: This example demonstrates how to use the `orderBy()` method to retrieve all users sorted by their name in ascending order. It chains the `orderBy()` method with `getQuery()` and `fetch()` to execute the query and retrieve the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing a SleekDB Store in PHP\nDESCRIPTION: This snippet initializes a SleekDB store named \"news\" within the specified data directory.  If the store does not exist, it will be automatically created. A configuration array can optionally be passed as a third parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: Multiple Joins Example (SleekDB, PHP)\nDESCRIPTION: This example demonstrates how to use multiple `join()` calls to retrieve users with their comments and articles. Requires SleekDB store instances for 'users', 'comments', and 'articles'. Each join creates a new property on the user object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get First Document in SleekDB PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the first document that matches a specific query using the `first()` method of the SleekDB Query object. It's more efficient than `fetch()` for retrieving a single record. Note that orderBy will not work with this method. The function returns an array representing the first document or an empty array if no document matches the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Query Search Settings in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to configure search settings on a query-by-query basis using the `search()` method of the `QueryBuilder` class in SleekDB. It sets the minimum word length, search mode, score key, and algorithm for a specific search query. This allows for fine-grained control over search behavior for different scenarios.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: IN Clause Examples in PHP\nDESCRIPTION: Demonstrates different ways to use the IN clause in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to delete a store using the `deleteStore()` method.  This method permanently removes the specified store and all the data and cache it contains. In the example, it deletes the 'userStore'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates how to create a new SleekDB store using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` class to be imported. The store is named 'news' and uses the directory specified by the `$dataDir` variable to store its data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Function Definition - PHP\nDESCRIPTION: This function takes a PHP array of arrays as input, representing multiple documents to be inserted into the SleekDB store.  It returns an array containing all inserted documents, each including their automatically generated unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/insert-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Joining Users with Comments (SleekDB PHP)\nDESCRIPTION: This example demonstrates how to join the 'users' store with the 'comments' store based on the 'userId' field in the 'comments' store matching the '_id' field in the 'users' store.  The code shows two ways to achieve the same result: returning the result of the subquery directly or returning a QueryBuilder object. It initializes two SleekDB stores and then performs the join operation using the createQueryBuilder and join methods. Data directory is assumed to be defined.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: disableCache() Example in PHP\nDESCRIPTION: This example retrieves 20 active users without using the cache, forcing a fresh data fetch.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Finding documents by criteria\nDESCRIPTION: This snippet shows how to find documents based on specific criteria.  It allows optional ordering, limiting, and offsetting of the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Find One Document by Criteria\nDESCRIPTION: Retrieves one document from the store based on the provided criteria.  Parameters: `$criteria` (array) - an associative array specifying the search criteria.  Returns the document as an array, or `null` if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Filtering SleekDB data without DateTime\nDESCRIPTION: This snippet shows how to filter data by timestamp values without using DateTime objects directly in the query. It first stores dates as timestamps and then uses those timestamp values to filter the data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with PHP\nDESCRIPTION: This example shows how to update documents based on a query condition using the `update()` method. The `$updatable` array contains the properties to update. The example sets the status of all users located in London to \"VIP\".\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache with regenerateCache() in PHP\nDESCRIPTION: Illustrates how to regenerate the cache for a query using the regenerateCache() method. This forces the query to fetch data from the source and update the cache, regardless of the cache's lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Store-Wide - PHP\nDESCRIPTION: This code snippet demonstrates how to configure search options at the store level when creating a SleekDB store. It sets the minimum length of searchable words, the search mode, the key for storing search scores, and the search algorithm. It requires the SleekDB library to be installed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: where Method Definition PHP\nDESCRIPTION: This code snippet defines the `where` method of the QueryBuilder class, which is used to add a WHERE clause to the query.  Multiple conditions are connected with an AND.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination in SleekDB\nDESCRIPTION: The `changeStore()` method of the `Store` class allows you to change the data store destination, enabling the management of multiple stores with a single Store object. The function takes the new store name, optional data directory, and optional configuration array as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Distinct example PHP\nDESCRIPTION: This PHP snippet shows how to use the distinct method to retrieve unique users by name, using both a string and an array for the field name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Example PHP\nDESCRIPTION: Demonstrates how to insert a single document into a SleekDB store using the `insert` method. It first prepares a PHP array representing a user and then inserts it into the `$userStore`. The returned array, which includes the generated `_id`, is assigned back to the `$user` variable.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime PHP\nDESCRIPTION: Gets the cache lifetime. Returns the cache lifetime as an integer or null if not set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Multiple Users No Auto-Generate in PHP\nDESCRIPTION: This example shows how to use the `updateOrInsertMany()` method to update or insert multiple users. When a document doesn't contain the `_id` key, then a new `_id` key is created with an autogenerated value.  This happens because the `$autoGenerateIdOnInsert` is set to `false`\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: notin() Usage Example PHP\nDESCRIPTION: This code snippet demonstrates how to use the `notIn()` method to retrieve users who are not from the countries 'IN', 'KE', or 'OP'. It showcases a simple query using `notIn()` followed by `getQuery()` and `fetch()` to retrieve the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Multiple Joins PHP\nDESCRIPTION: This example shows how to perform multiple joins in SleekDB, joining 'users' with 'comments' and 'articles'.  It retrieves users along with their comments and articles using consecutive `join` calls. `userStore`, `commentStore`, and `articleStore` are instances of the `SleekDB\\Store` class, referencing individual database files in the `$dataDir`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/join-stores.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a QueryBuilder instance using the createQueryBuilder() method of a Store object in PHP. The resulting QueryBuilder object can then be used to construct more complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Example 1 PHP\nDESCRIPTION: This example demonstrates how to join the \"users\" store with the \"comments\" store to retrieve users with their comments. It shows two ways of using the join function: either returning the result of the `findBy` query, or returning a `QueryBuilder` object. It initializes the stores and uses the `join` method with a closure that performs the sub-query based on the `userId` field in the comments and the `_id` in the user store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetch Documents in SleekDB PHP\nDESCRIPTION: This snippet illustrates how to retrieve all documents that match a specific query using the `fetch()` method of the SleekDB Query object. It requires a Query object to be initialized and a 'where' clause to filter the documents based on a condition. The function returns an array of documents or an empty array if no documents match the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration (PHP)\nDESCRIPTION: Initializes a SleekDB Store object with custom configurations for auto_cache, cache_lifetime, timeout, and primary_key. This example shows how to set these configurations as an array and pass it as the third parameter to the \\SleekDB\\Store constructor.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\"\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Complex orWhere() Conditions in PHP\nDESCRIPTION: This example demonstrates a complex query with nested `AND` and `OR` conditions using `orWhere()`. The query filters users based on their status or a combination of city and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation in SleekDB\nDESCRIPTION: This PHP snippet demonstrates how to create a `Store` object in SleekDB. It requires the `SleekDB\\Store` class and initializes a store named 'users' in the specified database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting multiple documents\nDESCRIPTION: This snippet demonstrates how to either insert new documents or update existing ones in bulk. It accepts an array of data arrays and returns the inserted/updated documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates how to delete a SleekDB store using the `deleteStore()` method. This method removes the store directory and all its contents, including data and cache. It's important to note that this operation is irreversible.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents (Query)\nDESCRIPTION: Deletes matched documents based on the current query. The `returnOption` parameter controls what is returned after deletion. Returns a boolean, array or integer depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with multiple notIn()\nDESCRIPTION: This PHP code chains two `notIn` methods. It retrieves users who are NOT from specific countries AND whose `products.totalSaved` value is NOT in a specific list of values. It excludes users who match either of these conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Checking for existence using SleekDB\nDESCRIPTION: This snippet shows how to check if a document exists based on a specific condition using the `exists()` method of the SleekDB Query object. It checks if a user with the username 'foobar' exists in the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Delete Inactive Users\nDESCRIPTION: Example of deleting all inactive users using the `delete()` method with the default boolean return option. Requires a QueryBuilder instance and assumes the existence of an 'active' field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Find Document By Criteria PHP\nDESCRIPTION: This method retrieves one or multiple documents based on specified criteria. It supports ordering, limiting, and offsetting the results. It returns an array of documents that match the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Getting Last Inserted ID in SleekDB\nDESCRIPTION: This PHP function returns the last created store object ID, useful for tracking recently added documents.  It returns the last inserted ID as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Storing Date as Timestamp in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to store a date as a timestamp when inserting data into a SleekDB store. It creates a DateTime object, retrieves its timestamp using `getTimestamp()`, and stores it in the 'releaseDate' field of the new article array. Requires SleekDB library and PHP's DateTime class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: PHP limit() Method Definition\nDESCRIPTION: This PHP code defines the `limit` method signature. This method is used to limit the number of documents returned in the result set. It takes an integer representing the maximum number of documents to retrieve.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction limit($limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing Store with Custom Configuration (PHP)\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configuration options. It defines an array of configurations including auto_cache, cache_lifetime, timeout, and primary_key, and then passes this array as the third parameter to the \\SleekDB\\Store constructor. This allows for store-wide customization of SleekDB's behavior.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\"\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: findAll Method in SleekDB\nDESCRIPTION: The `findAll` method retrieves all documents from a specified SleekDB store. It takes no parameters and returns an array of all documents. If the store is empty, it returns an empty array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/fetch-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Example: Deleting Users by Name - PHP\nDESCRIPTION: Demonstrates how to delete all users with the name 'Joshua Edwards' using the `deleteBy()` method.  The default return option (`Query::DELETE_RETURN_BOOL`) is used, so the function returns `true` if the deletion was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(['name', '=', 'Joshua Edwards']);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Querying Nested JSON Properties with SleekDB in PHP\nDESCRIPTION: This snippet demonstrates how to query nested properties within JSON documents using SleekDB's `where` clause.  The `where` method allows filtering data based on conditions applied to nested fields. The example looks for documents where the 'post.author.role' field equals 'admin'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role' '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store in SleekDB with PHP\nDESCRIPTION: This code snippet shows how to delete a store and its associated data and cache using the `deleteStore()` method.  The `$userStore` variable must be an instance of the `SleekDB\\Store` class. This action is irreversible and removes all data within the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Finding All Data in SleekDB with PHP\nDESCRIPTION: This snippet retrieves all documents from the 'news' store using the `findAll` method. The results are then printed using `print_r`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Update or Insert a User with ID in PHP\nDESCRIPTION: This example demonstrates how to use the `updateOrInsert()` method to update a user with _id = 23 if it exists, or insert it if it doesn't. An auto-generated id is used if the operation results in an insert.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Deleting data using deleteById() in SleekDB\nDESCRIPTION: The `deleteById()` method allows you to delete a single document using its unique ID (_id). This method is optimized for performance as it directly targets the document by its ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: orderBy() Function Definition PHP\nDESCRIPTION: Defines the `orderBy()` method within the SleekDB QueryBuilder. This method allows sorting the query results based on one or more fields, similar to the ORDER BY clause in SQL. The criteria parameter is an array that specifies the field names and the order (asc or desc) for sorting.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy( array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID Example 2 in SleekDB PHP\nDESCRIPTION: Removes the 'name' and 'age' fields from a user document with a specific ID. It requires the `$userStore` object to be initialized and an existing document with the given ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"name\", \"age\" ]);\n```\n\n----------------------------------------\n\nTITLE: Check If Data Exists\nDESCRIPTION: Checks if any data matches the query criteria. Returns a boolean indicating whether any data was found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Returning the First Document - PHP\nDESCRIPTION: This code snippet demonstrates the method for retrieving the first document that matches the query. It is more efficient than `fetch` if only the first record is needed, but `orderBy` does not work. It takes no parameters and returns the first document as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Skip Method Example - PHP\nDESCRIPTION: Demonstrates how to use the `skip()` method to skip the first 10 documents. This is equivalent to the OFFSET clause in SQL.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Finding a document by its ID in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a single document from the store by its `_id`. The `findById` method accepts an integer or string ID and returns the document as an array or `null` if not found.  It is very fast since the document is located by its file path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Delete Inactive Users & Return Results\nDESCRIPTION: Example of deleting all inactive users and retrieving the deleted user documents. Requires a QueryBuilder instance, assumes an 'active' field, and uses the `Query::DELETE_RETURN_RESULT` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Deleting Document by ID - SleekDB (PHP)\nDESCRIPTION: This snippet describes the `deleteById()` function in SleekDB for deleting a single document by its unique ID. The method efficiently removes the document without traversing all files. It returns `true` if deletion was successful, and `false` if failed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/delete-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: OrderBy Example Result\nDESCRIPTION: Result of the orderBy example.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n[[\"_id\" => 13, \"name\" => \"Anton\"], [\"_id\" => 2, \"name\" => \"Berta\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Inserting multiple documents into the store\nDESCRIPTION: This snippet demonstrates how to insert multiple documents into the SleekDB store. It accepts an array of data arrays and returns the inserted documents with their unique _ids.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination - PHP\nDESCRIPTION: Demonstrates how to use the `changeStore()` method to change the destination of a SleekDB store object, allowing a single Store object to manage multiple stores. The function takes the new store name, data directory, and configuration as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Products with SleekDB\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to group active products by category, sums the views (aliased as 'totalViews'), and filters the results to only include categories with total views between 500 and 1000 using the `having` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Joining current store with another in PHP\nDESCRIPTION: This code demonstrates how to join the current store with another. The `join` method accepts a Closure as the join function and a property name, and returns the modified `QueryBuilder` instance.  It can be used multiple times to join multiple stores.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Limiting the number of documents using SleekDB limit() with string\nDESCRIPTION: This PHP snippet demonstrates how to limit the result set to the first 10 documents using the `limit()` method with a string value. The `limit()` method accepts both integers and strings as input for the maximum number of documents to return.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Data PHP\nDESCRIPTION: This snippet shows how to delete records in SleekDB based on specified criteria. This example deletes all users where the 'active' field is set to 'false' and returns a boolean.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: getQuery() method in PHP\nDESCRIPTION: This snippet shows the signature of the `getQuery()` method within the QueryBuilder class.  The method returns a Query object, which is then used to execute the query and retrieve data from the SleekDB store. The Query object provides fetch, first, exists, delete, and update methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Initializing a Query Object - PHP\nDESCRIPTION: This snippet showcases the constructor for creating a new Query object. It requires a QueryBuilder object as a parameter. Internally it also creates a new Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Delete Store\nDESCRIPTION: Deletes a store and wipes all the data and cache it contains. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Filtering Users Using in() - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `in()` method in SleekDB to retrieve users from specific countries. It filters the results based on the 'country' field matching any of the values provided in the array.  It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Search QueryBuilder\nDESCRIPTION: Do a fulltext like search against one or more fields. Accepts a string or array of fields, a query string, and optional search options. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Finding All Documents in SleekDB\nDESCRIPTION: This PHP function retrieves all documents from the store. It accepts optional parameters for ordering, limiting the number of results, and offsetting the starting point. It returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store in PHP\nDESCRIPTION: This snippet shows how to create a new SleekDB store instance, named 'news', which will store its data in the 'database' directory within the current script's directory. The Store object is initialized with the store name and the path to the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files for SleekDB Store (PHP)\nDESCRIPTION: Deletes all cache files associated with the current data store.  This method is useful when a large-scale data update occurs and all cached data needs to be refreshed to reflect the changes. It clears all existing cached data for the given store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Data Objects - SleekDB\nDESCRIPTION: Inserts multiple data objects into a SleekDB store using the `insertMany()` method.  The data objects are prepared as an array of PHP arrays and then inserted. The method returns the inserted objects each with the `_id` property generated by SleekDB. Requires SleekDB store instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n        'totalSaved' => 5,\n        'totalBought' => 3\n        ],\n        'location' => [\n        'town' => 'Andreas Ave',\n        'city' => 'Maasdriel',\n        'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n        'totalSaved' => 172,\n        'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$usersDB->insertMany( $users );\n```\n\n----------------------------------------\n\nTITLE: Distinct Method Signature PHP\nDESCRIPTION: Defines the signature of the `distinct` method in the SleekDB QueryBuilder. This method retrieves unique values from the store. It accepts an array or a string of field names as input and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ndistinct( array|string $fields ): QueryBuilder;\n```\n\n----------------------------------------\n\nTITLE: Reusing Query Object in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to keep the Query object in SleekDB to perform additional operations on the discovered documents.  It avoids running additional queries. The example fetches data, updates matched documents with some random data, and then fetches the data again to reflect the changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limit Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `limit` method within the SleekDB QueryBuilder, which limits the number of documents returned in the result set. It takes an integer representing the maximum number of documents to return and returns the QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction limit($limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Query-specific Search Configuration in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to configure search options on a query-by-query basis in SleekDB. It allows you to override the store-wide search settings for a particular search operation. It shows how to set the minimum length, mode, score key, and search algorithm within an array of options that are passed to the search() method of the QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document Example SleekDB PHP\nDESCRIPTION: This code snippet demonstrates how to use the `insert()` function to insert a single user document into a SleekDB store. It prepares a PHP array containing user data, then calls `$userStore->insert($user)` to insert the data into the store. The resulting `$user` variable will contain the inserted document, including the automatically generated `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration (PHP)\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configuration options. It sets the 'auto_cache' option to true, 'cache_lifetime' to null, and 'timeout' to 120. The configuration array is passed as the third parameter to the SleekDB\\Store constructor.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Order By PHP\nDESCRIPTION: This method sets the sort order of the query results. It takes an array of criteria as input, where each criterion specifies a field and the sort direction, and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Use Cache PHP\nDESCRIPTION: Enables caching for the current query.  Takes an optional lifetime parameter for the cache. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Find All Documents\nDESCRIPTION: Retrieves all documents of that store. Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Search Documents\nDESCRIPTION: Performs a full-text like search against one or multiple fields. Supports ordering, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties with SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents stored in SleekDB. It uses the `where()` method to specify the path to the nested property and the condition to match.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Using useCache() with Infinite Lifetime PHP\nDESCRIPTION: This snippet demonstrates how to use the useCache() method with an infinite lifetime (0 seconds). The query retrieves 20 active users, and the results are cached indefinitely until the cache is manually invalidated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer\nDESCRIPTION: This shell command installs SleekDB using Composer, a dependency manager for PHP. It adds SleekDB to your project's dependencies, allowing you to use it in your application. The command assumes that you have Composer installed and a composer.json file in your project root.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/installation.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Group By\nDESCRIPTION: Groups documents using one or multiple fields.  Accepts an array of fields to group by, an optional counter key name, and an optional flag to allow empty groups.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date and Time in SleekDB\nDESCRIPTION: This snippet shows two ways to store the current date and time in SleekDB.  The first option stores it as a formatted string, and the second stores it as a timestamp.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Check Existence with Query PHP\nDESCRIPTION: This code demonstrates how to use the `exists()` method of the Query object to check if a document exists that matches a specific condition.  It checks if a user with the username 'foobar' exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Skip Method Example in SleekDB (PHP)\nDESCRIPTION: Demonstrates using the `skip` method to retrieve all users except the first 10 found. The example chains `skip` with `getQuery` and `fetch` to execute the query, skipping the first 10 documents and returning the remaining results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching document by ID in SleekDB\nDESCRIPTION: This function retrieves a single document from the SleekDB store based on its unique ID. It directly accesses the file using the ID, making it a fast retrieval method. The function returns the document as an array or null if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Update multiple users in SleekDB using PHP\nDESCRIPTION: This snippet illustrates how to update multiple users in SleekDB. It retrieves users by name, iterates through the results, modifies the 'name' property of each user, and then uses the `update()` method to apply these changes to the database. The `_id` of each user is used to update the specific records.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Join Stores with SleekDB (PHP)\nDESCRIPTION: This code snippet shows the signature for joining two or more stores in SleekDB using the `join()` method. This method uses a closure to define the joined store and a string to define the property name. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using the orWhere() Method (PHP)\nDESCRIPTION: Explains how to use the `orWhere()` method to add OR conditions to the query. Multiple `orWhere()` calls can be chained.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Select Functions (SUM, AVG) - PHP\nDESCRIPTION: Uses select functions `SUM` and `AVG` to calculate the sum and average of the 'follower' field.  Demonstrates how to use these functions within the `select` method of the SleekDB QueryBuilder. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"followerSum\" => [\"SUM\" => \"follower\"],\n    \"followerAvg\" => [\"AVG\" => \"follower\"]\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"followerSum\" => 81482, \"followerAvg\" => 501.319205]\n]\n```\n\n----------------------------------------\n\nTITLE: Or Where Condition PHP\nDESCRIPTION: This method adds \"or-where\" conditions to filter data. It takes an array of conditions as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties with where() - PHP\nDESCRIPTION: Demonstrates how to query nested properties within JSON documents using the `where()` method in SleekDB.  This allows filtering data based on conditions applied to specific nested fields. This function helps filter based on a specific condition that is nested within the JSON structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/features.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: orWhere() Method Example 2 PHP\nDESCRIPTION: This code snippet demonstrates using multiple `orWhere()` calls to build a complex query. It retrieves users that have `products.totalSaved > 10 OR (products.totalBought > 20 AND products.shipped = 1) OR totalBought = 0`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store using PHP\nDESCRIPTION: This snippet inserts a new news article into the \"news\" store. The article data is provided as an associative array. The `insert` method returns the inserted data, including a unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Update Documents (Query)\nDESCRIPTION: Updates one or multiple documents based on the current query criteria. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Using Cache in SleekDB QueryBuilder\nDESCRIPTION: This PHP function enables caching for the current query. It takes an optional cache lifetime in seconds. Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetching document by ID with findById in PHP\nDESCRIPTION: This code demonstrates how to fetch a single document from a SleekDB store using its `_id` with the `findById()` method.  The `$id` parameter can be either an integer or a string. It returns a single document or `null` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Limiting the number of documents using SleekDB limit() with integer\nDESCRIPTION: This PHP snippet demonstrates how to limit the result set to the first 10 documents using the `limit()` method with an integer value. The query builder uses the `limit()` method to restrict the number of documents returned.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete All Caches in PHP\nDESCRIPTION: This function deletes all cache files of the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Get Query Object PHP\nDESCRIPTION: This code snippet demonstrates how to obtain a Query object from a QueryBuilder instance in SleekDB. The Query object is essential for executing database queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Fetching First Document in PHP with SleekDB\nDESCRIPTION: This snippet shows how to retrieve the first document that matches a specific condition using the first() method of the Query object in PHP. The code filters users by email address and retrieves the first match using the first() method. Note that orderBy will not work.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Update One User PHP\nDESCRIPTION: Demonstrates how to update a single user.  It first inserts a new user, retrieves it using findById, updates the name field, and then updates the user in the store using the update method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$userStore->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: OrderBy example\nDESCRIPTION: Shows how to order results by name in ascending order.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Use Cache QueryBuilder\nDESCRIPTION: Enables caching for the current query with an optional lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: where Example 2 - Single where call with array of conditions in PHP\nDESCRIPTION: This snippet demonstrates how to use a single `where` call with an array of conditions to filter users based on `products.totalSaved` and `products.totalBought`, showing QueryBuilder usage.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB PHP\nDESCRIPTION: This code snippet inserts a new news article into the SleekDB store. The article data is provided as an associative array containing fields such as title, about, and author. The insert method returns the inserted data, including a unique \"_id\" property that is automatically generated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to query nested properties within JSON documents stored in SleekDB. It uses the `where` clause to filter data based on a nested property's value. The example shows how to target the 'role' property within the 'post.author' nested structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Skip Method Usage - PHP\nDESCRIPTION: Demonstrates using the `skip()` method to skip a specified number of documents in the result set, effectively implementing an OFFSET.  The example skips the first 10 documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limit Records PHP\nDESCRIPTION: Sets the maximum number of data records to return in the result set. limit (int, optional): The maximum number of records to return. Defaults to 0 (no limit).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert New Document PHP\nDESCRIPTION: Inserts a user with no `_id`, and the `updateOrInsert()` method will auto-generate an id. This uses the default `$autoGenerateIdOnInsert` value of `true`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: SQL SUM with GROUP BY Example\nDESCRIPTION: This SQL statement shows how to get the SUM of a column and group by another.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nSELECT age, SUM(follower) as followerSum GROUP BY age;\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to delete a SleekDB store and its associated data using the `deleteStore()` method.  It is called on an existing `Store` object (e.g., `$userStore`). This operation permanently removes the store directory and all data within it, including any cached data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Initialize SleekDB Store PHP\nDESCRIPTION: This code initializes a SleekDB store named 'news' within the specified database directory.  If the store doesn't exist, it will be created automatically. A configuration array can be passed as a third parameter (not shown here).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: Deleting User by ID in SleekDB (PHP)\nDESCRIPTION: This example demonstrates deleting a user by their `_id` using the `deleteById()` method. It assumes `$userStore` is an instance of a SleekDB Store object and that an ID of 12 exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Find All Documents\nDESCRIPTION: Retrieves all documents from the store.  Returns an array containing all the documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Getting the Last Inserted ID - PHP\nDESCRIPTION: This code snippet shows the method to retrieve the ID of the last inserted document. It does not take any parameters and returns the last inserted ID as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Inserting a New User in PHP\nDESCRIPTION: This snippet demonstrates how to insert a new user record into the 'users' store using the `insert()` method. The data is passed as an associative array containing user details like name, email, and avatar URLs. The `$userStore` object must be initialized before using this method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/managing-store.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a specific document from a SleekDB store using its unique ID. The `deleteById()` method provides a fast and efficient way to remove a document when its ID is known. It returns `true` if the deletion was successful or the document did not exist, and `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Sorting documents using SleekDB orderBy() with multiple fields\nDESCRIPTION: This PHP snippet demonstrates how to sort the result set by multiple fields ('name' and 'age') in ascending order using the `orderBy()` method. The query builder sorts the documents first by 'name' and then by 'age', both in ascending order.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: getLifetime() Method in PHP\nDESCRIPTION: This code shows the `getLifetime` method, which retrieves the configured lifetime for the current query/token. The method returns either an integer representing the lifetime in seconds (0 for infinite), or `null` if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Not In Clause with SleekDB (PHP)\nDESCRIPTION: This code snippet shows the signature for using the deprecated `notIn()` method, which is the opposite of `in()`. It filters out documents where a field's value exists in the given array.  Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Query Constructor\nDESCRIPTION: Creates a new Query object, which handles query execution. It requires a QueryBuilder object and internally creates a Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Single Document PHP\nDESCRIPTION: This example shows how to update or insert a single document using the `updateOrInsert()` method. It requires an array representing the document, including the '_id' field if updating. The second parameter `autoGenerateIdOnInsert` controls whether to generate an ID if inserting and no '_id' is provided.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Distinct Usage Example (PHP)\nDESCRIPTION: This PHP code demonstrates using the `distinct()` method of the SleekDB Query Builder to retrieve unique users based on the 'name' field. It shows usage with both a string and an array for the field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Sorting documents using SleekDB orderBy() with ascending order\nDESCRIPTION: This PHP snippet demonstrates how to sort the result set by the 'name' field in ascending order using the `orderBy()` method. The query builder sorts the documents by 'name' using the 'asc' parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Multiple Documents (no auto-generated _id) PHP\nDESCRIPTION: This example demonstrates updating or inserting multiple documents at once using the `updateOrInsertMany()` method, disabling automatic `_id` generation. If a document does not have an `_id`, it will be assigned a new one automatically.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: get Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `get` method within the Cache class. This method retrieves the content of the cache file for the current query/token. It returns an array if the cache file exists or null if it doesn't.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Joining Stores Quick Example - SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to join the 'users' store with the 'comments' store to fetch users along with their corresponding comments. It utilizes the `join` method to create a 'comments' property for each user containing their comments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/join-stores.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Multiple where() conditions (PHP)\nDESCRIPTION: Demonstrates using multiple `where()` conditions to filter users based on product information. It showcases both chained `where()` calls and a single `where()` with nested conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n\n```\n\n----------------------------------------\n\nTITLE: In Condition\nDESCRIPTION: Add \"in\" condition to filter data. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Nested Join - Users, Articles and Comments (Example 3)\nDESCRIPTION: This code demonstrates a nested `join()` within a join sub-query to retrieve all users with their created articles containing their comments.  It initializes three SleekDB stores: 'users', 'comments', and 'articles'. The outer join retrieves articles for each user, and the inner join retrieves comments for each article.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID PHP\nDESCRIPTION: Removes specified fields from a document using its ID.  The `removeFieldsById()` method takes the document's ID and an array of field names to remove. Returns the updated document on success, or `false` if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById(int|string $id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join with findBy - Example 1\nDESCRIPTION: This example demonstrates joining the 'users' and 'comments' stores to retrieve users with their associated comments. Two approaches are shown, one returning a result and the other returning a QueryBuilder object from the join function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Count Documents\nDESCRIPTION: Returns the amount of documents in the store. Does not require any parameters. Returns an integer representing the number of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users\nDESCRIPTION: Illustrates updating multiple users' names using the `update()` method after retrieving them based on a specific criteria. The code iterates through the retrieved users, modifies their names, and then updates all modified users at once in the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store in PHP\nDESCRIPTION: This snippet demonstrates how to delete a SleekDB store using the `deleteStore()` method. It deletes the specified store and removes all associated data and cache. Ensure you have a valid `$userStore` object before calling this method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Set Cache\nDESCRIPTION: Save content for current query as a cache file. Accepts an array of content to be cached. Void return.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Finding All Documents - PHP\nDESCRIPTION: This code snippet shows the method to retrieve all documents from the store. It doesn't take any parameters and returns an array containing all the documents in the store. The function iterates over all data files and returns each object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Delete\nDESCRIPTION: Deletes matched documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB Manually (PHP)\nDESCRIPTION: Imports the SleekDB Store class into a PHP file, allowing you to use SleekDB's functionalities. This method is used when Composer is not employed for dependency management.  It assumes the SleekDB directory is located one level above the current file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Usage PHP\nDESCRIPTION: Demonstrates how to use the `orderBy` method to retrieve all users sorted by their name in ascending order. The example shows how to chain the `orderBy` method with `getQuery()` and `fetch()` to retrieve the desired data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Except method definition\nDESCRIPTION: This is the function definition for the `except` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction except(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Multiple where Conditions using a single array in PHP\nDESCRIPTION: This snippet demonstrates using a single call to the `where()` method with an array of conditions.  This also combines the conditions using `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: orWhere() Method Example 1 PHP\nDESCRIPTION: This code demonstrates using `where()` and `orWhere()` to combine conditions.  It retrieves users that have `(products.totalSaved > 10 AND products.totalBought > 20) OR products.shipped = 1`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Fields - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `except()` method to exclude the '_id' and 'name' fields from the query results. The output only includes the 'age' field. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\": 28], [\"age\": 18]]\n```\n\n----------------------------------------\n\nTITLE: NestedWhere status/city/age PHP\nDESCRIPTION: An example of the deprecated nestedWhere method to retrieve users based on status, city, and age conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Ordering results with 'orderBy' (Example 1) PHP\nDESCRIPTION: Demonstrates how to sort the result set by a single field using the SleekDB query builder's `orderBy` method. Retrieves all users sorted by their 'name' in ascending order.  Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the Store Object\nDESCRIPTION: This snippet demonstrates how to retrieve the Store object used to create the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: Nested Join Example (SleekDB, PHP)\nDESCRIPTION: This example demonstrates a nested join, where a `join()` call is made within the closure of another `join()`. It retrieves users with their articles, and each article contains the comments. Requires SleekDB store instances for 'users', 'comments', and 'articles'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating documents with a Query in PHP\nDESCRIPTION: This code demonstrates how to update documents based on the current query. The `update` method accepts an array of fields to update and an optional boolean to return the updated documents. It returns either an array of updated documents or a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Not In Clause Example with SleekDB (PHP)\nDESCRIPTION: This code demonstrates how to use the deprecated `notIn()` method to retrieve users who are *not* from certain countries and whose products don't have specific total saved values. It shows how to chain multiple `notIn()` calls. Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Store (Internal)\nDESCRIPTION: This method is used internally. Returns the Store object used to create the QueryBuilder object. Returns a Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: useCache() Infinite Lifetime PHP\nDESCRIPTION: This example shows how to configure the cache to have an infinite lifetime by passing `0` to the `useCache()` method. Data will be cached until explicitly removed or updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving content from cache in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve content from a cache file. The `get` method returns an array containing the cached content, or `null` if the cache file does not exist or is invalid.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nget(): array|null\n```\n\n----------------------------------------\n\nTITLE: In Condition PHP\nDESCRIPTION: This method adds an \"in\" condition to filter data. It checks if a field's value is within a specified array of values. It takes a field name and an array of values as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Multiple notin() Usage Example PHP\nDESCRIPTION: This example demonstrates using multiple `notIn()` methods chained together. It retrieves users who are not from 'IN', 'KE', or 'OP', and whose `products.totalSaved` values are not 100, 150, or 200. The example illustrates how to filter data based on multiple conditions using the `notIn()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Distinct Query with SleekDB (PHP)\nDESCRIPTION: This code demonstrates how to retrieve distinct records from a SleekDB store using the `distinct()` method. It shows how to specify the field(s) for distinct selection, both as a string and as an array. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Nested Property Query in SleekDB\nDESCRIPTION: This JSON snippet illustrates the data structure that the SleekDB `where` clause example targets. It shows a JSON document with a nested `post.author.role` property. The `where` clause in PHP will look for this exact structure to match the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with OrWhere Clause in PHP\nDESCRIPTION: This snippet demonstrates how to use the `orWhere()` method to filter data based on OR conditions.  It showcases multiple `orWhere` clauses, combining conditions with `AND` within each `orWhere`, and chaining `orWhere` methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating Post Store in SleekDB with PHP\nDESCRIPTION: This code snippet demonstrates the creation of a 'posts' store in SleekDB. Similar to the previous examples, it relies on the `SleekDB\\Store` class and a defined `$dataDir`. This store is intended for storing post data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Finding a Record by Author in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to find a single record in a SleekDB store based on the author's name. It uses the `findOneBy` method to search for a news article authored by \"Mike\". Requires a SleekDB store instance named `$newsStore`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\n----------------------------------------\n\nTITLE: Inserting a new document into a Store in PHP\nDESCRIPTION: This code snippet demonstrates how to insert a new document into the store. The `insert` function accepts an associative array of data, inserts it into the store, and returns the inserted document with a new, unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Search Documents\nDESCRIPTION: Performs a full-text like search against one or multiple fields. Accepts an array of fields to search, the search query string, and optional order by, limit, and offset parameters.  Returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Checking Existence\nDESCRIPTION: Demonstrates how to check if any documents exist that match the query criteria using the `exists()` method of the SleekDB Query object. It efficiently determines whether data matching specified conditions is present in the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with skip()\nDESCRIPTION: This PHP code uses the `skip` method to skip the first 10 users found. The result set will start from the 11th user onwards.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Join PHP\nDESCRIPTION: This method joins the current store with another one. It can be used multiple times to join multiple stores. It takes a Closure function and a data property name as input. The Closure should define the join logic. It returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields in a query\nDESCRIPTION: This snippet shows how to specify which fields to select in a query. It takes an array of field names as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users PHP\nDESCRIPTION: Demonstrates updating multiple users in a loop. First, users are retrieved based on a condition (name = 'Josh'). Then, each user's 'name' is updated to 'Luke Bowman', and the updated user objects are stored back into an array. Finally, the `update()` method is called with the array of updated users to persist the changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Multiple notIn() Operations - PHP\nDESCRIPTION: This PHP code snippet showcases the use of multiple `notIn()` methods chained together to filter users based on both 'country' and 'products.totalSaved'. It retrieves users who are NOT from the specified countries AND do NOT have the specified total saved product values.  It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search with QueryBuilder: Simple Example (PHP)\nDESCRIPTION: Demonstrates a basic usage of the `search()` method in the QueryBuilder to search through multiple fields, order results by relevance using the searchScore and exclude the searchScore from the final result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Grouping Products with SleekDB\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to group active products by category and count the number of products in each group, aliasing the count as 'productAmount'. The result is then fetched.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Content in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `set(array $content)`. It sets and caches the provided content for the current query or token. The `$content` parameter, an array, represents the data to be cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Using Cache PHP\nDESCRIPTION: This code snippet shows how to activate caching for a query with a default (null) lifetime. Caching is enabled using the useCache() method of the QueryBuilder class. The cache will be deleted upon updates, deletes, or inserts.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get First Document PHP\nDESCRIPTION: This method returns the first document that matches the query criteria. It is more efficient than `fetch` but `orderBy` does not work. It returns the document as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Query Object in PHP\nDESCRIPTION: This code snippet shows the function signature of the `getQuery` method, which retrieves the `Query` object. This object is then used to execute the prepared query using methods like `fetch()`, `first()`, `exists()`, `delete()`, and `update()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Example in SleekDB (PHP)\nDESCRIPTION: Demonstrates using the `orderBy` method to retrieve all users sorted by their name in ascending order. The example chains `orderBy` with `getQuery` and `fetch` to execute the query and retrieve the sorted results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: setLifetime() - Set Cache Lifetime - PHP\nDESCRIPTION: Sets the lifetime for the current query's cache. The $lifetime parameter is an integer representing the number of seconds the cache should be valid, or null for no lifetime. Returns a `Cache` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Fields from Documents PHP\nDESCRIPTION: This snippet demonstrates removing nested fields from documents using the `removeFields` method, specifically targeting the 'address.street' field for users in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: search() Function Definition PHP\nDESCRIPTION: Defines the `search()` method within the SleekDB QueryBuilder.  This method allows performing a full-text search across one or more fields, similar to a LIKE operator in SQL.  The method takes the fields to search and the keyword to search for as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Checking Existence with SleekDB in PHP\nDESCRIPTION: This snippet shows how to use the `exists()` method to check if any documents match the query criteria. The example checks if a user with the username 'foobar' exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Remove User Status Field\nDESCRIPTION: Example of removing the 'status' field from all users located in London. Requires a QueryBuilder instance, a 'city' field for filtering, and a 'status' field to remove.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache for Query - PHP\nDESCRIPTION: This code snippet demonstrates the method for enabling caching for the current query. It takes an optional lifetime parameter and returns the QueryBuilder object. If no lifetime is specified, the store's default lifetime is used.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SleekDB Store\nDESCRIPTION: This code snippet retrieves documents from a SleekDB store using the findBy() method of the Store object. It defines a where condition to filter the results based on location and age, applies pagination, and orders the results by _id in descending order. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder search() Example 2 - PHP\nDESCRIPTION: Demonstrates using the `search()` method of the `QueryBuilder` class with search options. It searches through nested fields ('title.mainTitle') and a regular field ('content'), sorts the results by relevance, excludes the searchScore, limits the result to 20, and sets the search algorithm to 'prioritize'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find Documents by Criteria\nDESCRIPTION: Retrieves one or multiple documents from the store based on the provided criteria. Parameters: `$criteria` (array) - an associative array specifying the search criteria, `$orderBy` (array, optional) - an array specifying the order of the results, `$limit` (int, optional) - the maximum number of documents to return, `$offset` (int, optional) - the number of documents to skip. Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Fetching Document by ID in PHP\nDESCRIPTION: This code snippet retrieves a single document from the 'newsStore' based on its '_id' using the `findById()` method. It returns the document as an array if found, or null if not found. This method directly accesses the file, improving speed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Using useCache() with SleekDB in PHP\nDESCRIPTION: This function enables caching for a specific query. The lifetime of the cache can be specified. If no lifetime is specified, the cache will persist until data is updated in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: String Function LENGTH in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `LENGTH` string function within the `select()` method of the QueryBuilder. It is used to get the length of a field and can also get the length of an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"LENGTH\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Deleting cache files in PHP\nDESCRIPTION: This code snippet demonstrates how to delete cache files for the current query. The `delete` method removes the cache file(s) associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\ndelete()\n```\n\n----------------------------------------\n\nTITLE: Fetching documents using criteria in SleekDB\nDESCRIPTION: The `findBy()` method fetches documents from a SleekDB store based on specified criteria, ordering, limit, and offset. It allows for complex queries with nested conditions and supports various comparison operators. It returns an array of matching documents or null if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Store Class Constructor\nDESCRIPTION: Creates a new Store object, representing a database store.  Internally, it creates a new store folder if it doesn't exist.  Parameters: `$storeName` (string) - the name of the store, `$databasePath` (string) - the path to the database folder, `$configuration` (array) - an optional configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination - SleekDB PHP\nDESCRIPTION: Demonstrates how to change the store destination using the `changeStore()` method of the `Store` class in SleekDB. This allows a single Store object to manage multiple stores by dynamically switching the underlying data directory. Parameters include the new store name, the optional data directory, and optional configuration settings.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Deprecated nestedWhere Method Signature (PHP)\nDESCRIPTION: Defines the signature for the deprecated `nestedWhere` method. This method allowed for complex, nested where statements.  The documentation recommends using `where` and `orWhere` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: GroupBy Method Usage - PHP\nDESCRIPTION: Groups active products by 'category' and counts the number of products in each category. Shows how to use the `groupBy` method with a counter. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"category\" => \"pants\", \"productAmount\" => 200],\n  [\"category\" => \"shirts\", \"productAmount\" => 29],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with SleekDB QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to limit the number of results returned by a SleekDB query using the `limit()` method. It retrieves the first 10 users from the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation in SleekDB PHP\nDESCRIPTION: Demonstrates the creation of a `Store` object in SleekDB. This object is used to interact with a specific data store (e.g., 'users') within a specified directory.  It requires the SleekDB library to be included and defines the store name and the directory path where the database is stored.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Checking if data is found\nDESCRIPTION: This snippet demonstrates how to check if any data is found based on the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to count the number of documents stored in a SleekDB store. It uses the `count()` method to efficiently retrieve the document count. Requires a SleekDB store instance named `$newsStore`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents and Returning Results with SleekDB in PHP\nDESCRIPTION: This snippet demonstrates how to use the `delete()` method with the `Query::DELETE_RETURN_RESULT` option to delete documents and retrieve the deleted documents. The example deletes all inactive users and returns an array of the deleted users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Changing the store destination in PHP\nDESCRIPTION: This code demonstrates how to change the destination of a `Store` object. It takes the new store name, optionally a new database path, and an optional configuration array as parameters. The method returns the updated `Store` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Timestamps in SleekDB\nDESCRIPTION: This snippet shows how to filter data in SleekDB using timestamps instead of DateTime objects. It initializes a SleekDB store, inserts an article with a timestamp as the `createdAt` value and then retrieves articles using `findBy` with the `IN` condition to filter based on a range of timestamps. Requires the SleekDB library and assumes `vendor/autoload.php` is properly configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/dates.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: Storing Date as String in SleekDB\nDESCRIPTION: This snippet demonstrates storing a date as a string in a SleekDB document. It creates an array representing a news article, including a 'releaseDate' formatted as a string.  The `insert()` method of the SleekDB store is then used to add this article to the database. This assumes a 'newsStore' object is already initialized as shown in the previous snippet.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/dates.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Numeric Function MAX in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `MAX` numeric function within the `select()` method of the QueryBuilder. It is used to retrieve the max value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"MAX\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: SleekDB Store Change Example (PHP)\nDESCRIPTION: This code demonstrates changing the store destination using the `changeStore()` method.  It initializes a `Store` object, inserts data into the initial store, changes the store to \"alerts\", and inserts new data into the \"alerts\" store. The `$storeName` parameter specifies the new store name. The `$dataDir` and `$configuration` parameters are optional; if null, previous values are used.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/advanced.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder in SleekDB (PHP)\nDESCRIPTION: Shows how to reuse the QueryBuilder object to add multiple conditions to a SleekDB query without resetting the previously added conditions. This example fetches users based on multiple product statistics and then filters based on activation status, reusing the same QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with Closures and Conditions in SleekDB\nDESCRIPTION: These examples demonstrate using closures to filter data in conjunction with normal conditions. They find news articles where the author is \"John\" or \"Smith\", and the title contains \"cat\".  It shows different ways to declare and use the closure, including extracting it into a variable and using external variables with the `use` keyword.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/criteria.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  function($article){\n    return ($article['author'] === 'John' || $article['author'] === 'Smith');\n  },\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Extracted the closure from the criteria array\n$johnOrSmithCondition = function($article){\n  return ($article['author'] === 'John' || $article['author'] === 'Smith')\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$wantedAuthors = ['John', 'Smith'];\n\n$johnOrSmithCondition = function($article) use ($wantedAuthors){\n  return in_array($article['author'], $wantedAuthors, true);\n};\n\n// A closure in conjunction with a normal condition\n$news = $newsStore->findBy([\n  $johnOrSmithCondition,\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime (PHP)\nDESCRIPTION: Sets the lifetime for the current query. The lifetime determines how long the cache remains valid before being refreshed. The cache lifetime can be set in seconds, with 0 meaning infinite and null meaning no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Complex WHERE Clause in SQL\nDESCRIPTION: This snippet represents a complex WHERE clause in SQL. It shows how to combine multiple conditions using OR and AND operators with LIKE operator.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWHERE ( author = \"John\" OR author = \"Mark\" ) AND ( topic like \"School%\" OR topic like \"Work%\" )\n```\n\n----------------------------------------\n\nTITLE: Getting First Document in SleekDB\nDESCRIPTION: This PHP function returns the first document matching the query criteria.  It is more efficient than `fetch` but `orderBy` does not work.  Returns the first document or null if no document matched.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a QueryBuilder instance using the `createQueryBuilder()` method of a SleekDB `Store` object. The `$userStore` variable is assumed to be an instance of the `Store` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Numeric function AVG in PHP\nDESCRIPTION: Demonstrates how to use the `AVG` numeric function within the `select` method to retrieve the average value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"AVG\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Directory in PHP\nDESCRIPTION: This snippet initializes the data directory where SleekDB will store its data. It uses the `__DIR__` magic constant to create a directory named 'mydb' in the current directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder in SleekDB (PHP)\nDESCRIPTION: This example shows how to reuse a QueryBuilder object in SleekDB to add multiple conditions sequentially. This avoids resetting the conditions to default and allows building complex queries incrementally. The code demonstrates adding two 'where' conditions and then fetching data, followed by adding another condition and fetching again.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents (Query) PHP\nDESCRIPTION: Deletes matched documents based on the current query. returnOption (int, optional):  Specifies what to return after deletion. Can be Query::DELETE_RETURN_BOOL, Query::DELETE_RETURN_ARRAY, or Query::DELETE_RETURN_INT.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: GroupBy Method Usage - PHP\nDESCRIPTION: Demonstrates using the `groupBy()` method to group documents based on a specified field. This example groups active products by 'category' and counts the number of products in each category using the 'productAmount' counter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"category\" => \"pants\", \"productAmount\" => 200],\n  [\"category\" => \"shirts\", \"productAmount\" => 29],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting all cache files for a store in PHP\nDESCRIPTION: This code snippet demonstrates how to delete all cache files for the current store. The `deleteAll` method removes all cache files associated with the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\ndeleteAll()\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents and Returning Count with PHP\nDESCRIPTION: This example shows how to delete documents based on a query condition and retrieve the number of deleted documents. It uses the `Query::DELETE_RETURN_COUNT` constant for the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store in SleekDB\nDESCRIPTION: This snippet shows how to delete a SleekDB store using the `deleteStore()` method. Calling this method on a store object, such as `$userStore`, will delete the store directory and all data it contains. This also removes any cached data associated with the store, therefore this action is irreversible.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Using in for filtering in PHP\nDESCRIPTION: This snippet shows an example of using the `in()` method to retrieve users from specific countries.  Demonstrates filtering based on membership in an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Storing date as a timestamp in SleekDB\nDESCRIPTION: This example demonstrates storing a date as a timestamp in SleekDB. It creates a DateTime object and retrieves its timestamp using the `getTimestamp()` method.  This timestamp is then stored in the `releaseDate` field of the article array, which is then inserted into the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Status, City, and Age - PHP\nDESCRIPTION: This PHP code snippet demonstrates filtering users based on their status, city, and age using SleekDB's query builder. It utilizes nested WHERE conditions to combine multiple criteria.  It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Finding Documents by Criteria - PHP\nDESCRIPTION: This code snippet demonstrates the method for finding documents based on specified criteria. It takes an array of criteria as input, along with optional parameters for ordering, limiting, and offsetting the results. Returns an array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Add Join\nDESCRIPTION: Joins the current store with another store. Requires a Closure function to define the join conditions and a data property name for the joined data. Returns the QueryBuilder object. Can be used multiple times.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Query\nDESCRIPTION: Returns a new Query object, which can be used to execute the query built by the QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: SQL WHERE clause example\nDESCRIPTION: Shows an equivalent SQL WHERE clause corresponding to the previous PHP code.  This helps to understand the filtering logic.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  status = \"premium\" \n  OR \n  (\n    (\n      city = \"london\" OR city = \"new york\" \n    )\n    AND \n    (\n      (age >= 16 AND age < 20) OR age > 30 \n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Query-Specific Search Configuration in SleekDB (PHP)\nDESCRIPTION: Configures search behavior for a specific query, overriding store-wide settings. It sets minimum word length, search mode, score key name, and search algorithm.  The search options are passed as an associative array to the `search()` method of the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties with SleekDB in PHP\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents using SleekDB's `where` clause. It shows how to target a specific value within a nested structure, allowing for flexible data filtering. The snippet is written in PHP and assumes the use of the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Check Existence with Query PHP\nDESCRIPTION: This snippet shows how to check if any document exists that matches a specified query criteria using the `exists()` method. It checks if a user with the username 'foobar' exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Finding All Data in SleekDB PHP\nDESCRIPTION: This code fetches all news articles from the 'news' store using the `findAll()` method. The returned data is then printed using `print_r()`. This function does not require any parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Numeric Function MIN in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `MIN` numeric function within the `select()` method of the QueryBuilder. It is used to retrieve the min value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"MIN\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: SleekDB Store Join with Subquery\nDESCRIPTION: This example showcases joining 'users' and 'comments' stores. It retrieves users along with their comments by using a subquery to find comments associated with each user. The function can return either a result or a querybuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Numeric function SUM in PHP\nDESCRIPTION: Demonstrates how to use the `SUM` numeric function within the `select` method to retrieve the sum of a field's values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"SUM\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Distinct Values PHP\nDESCRIPTION: This method returns distinct values for the specified fields. It takes a field name (or an array of field names) as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 2 in PHP\nDESCRIPTION: This example retrieves and caches 20 active users, specifying a cache lifetime of 120 seconds (2 minutes).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Criteria - Implicit AND PHP\nDESCRIPTION: This snippet is similar to the previous one but omits the explicit 'AND' operator. SleekDB implicitly uses 'AND' if no operator is specified between the conditions in the criteria array. The $newsStore object is an instance of the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/criteria.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n    [\"author\", \"=\", \"John\"], \n    [\"title\", \"LIKE\", \"%cat%\"]\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Setting the sort order\nDESCRIPTION: This snippet shows how to set the sort order for the query results. It takes an array of criteria specifying the fields and directions to sort by.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using 'select' with aggregation and 'groupBy' PHP\nDESCRIPTION: Illustrates how to use the `select` method in conjunction with `groupBy` to perform aggregation operations in SleekDB.  Selects the 'age' and the sum of 'follower' aliased as 'followerSum', grouped by 'age'. Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: where() Example 2: Multiple Conditions in PHP\nDESCRIPTION: This example demonstrates using the `where()` method with multiple conditions to retrieve users with `products.totalSaved > 10` and `products.totalBought > 20`. It showcases both inline and multi-step query building.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n\n```\n\n----------------------------------------\n\nTITLE: Deleting documents by criteria\nDESCRIPTION: This snippet shows how to delete documents based on specified criteria. You can control what is returned after deleting.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 3 PHP\nDESCRIPTION: Shows how to enable infinite caching using `useCache(0)`. The cached results will remain valid indefinitely until manually invalidated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Object in PHP\nDESCRIPTION: This code snippet shows how to retrieve the `Query` object from a `QueryBuilder` instance using the `getQuery()` method. The `Query` object is then used to execute the prepared query using methods like `fetch()`, `first()`, `exists()`, `delete()`, and `update()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with NotIn Clause in PHP\nDESCRIPTION: This snippet shows how to use the `notIn()` method to filter data based on whether a field's value is NOT within a specified array of values.  It provides examples of using multiple `notIn` clauses.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Signature PHP\nDESCRIPTION: Defines the signature of the `orderBy` method in the SleekDB QueryBuilder. This method sorts the results. It accepts an array containing the field name and order (`asc` or `desc`) as input and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy( array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Select Clause Example in PHP\nDESCRIPTION: Demonstrates how to use the select clause in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: set() method in PHP\nDESCRIPTION: Describes the `set()` method of the Cache class, which sets and caches content for the current query. It takes an array as a parameter, representing the content to be cached. This method is used to store the results of a query in the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Getting the Query object in SleekDB\nDESCRIPTION: This snippet demonstrates how to obtain a Query object from a QueryBuilder instance in SleekDB. The Query object is then used to execute database queries. The `$userQueryBuilder` variable is assumed to be a pre-configured QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Example - PHP\nDESCRIPTION: Illustrates how to use the `orderBy()` method to sort the results by the 'name' field in ascending order ('asc').\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[[\"_id\" => 13, \"name\" => \"Anton\"], [\"_id\" => 2, \"name\" => \"Berta\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithms Constants in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to access the predefined search algorithm constants within the `Query` class in SleekDB. These constants represent different scoring methods used during search operations, such as calculating scores based on hit counts or prioritizing field order. Accessing these constants ensures that the correct algorithm is selected for a given search operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithms - PHP\nDESCRIPTION: Shows how to access the search algorithms provided by SleekDB using the `Query::SEARCH_ALGORITHM` constant array.  This demonstrates the default 'hits' algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Search (Fulltext)\nDESCRIPTION: Do a fulltext like search against one or more fields. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $field, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering Data by Author (OR) and Title in SleekDB\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method in SleekDB to filter news articles by author either John or Smith and title which contains 'cat'. It uses the `$criteria` argument with an array of conditions to specify the complex author condition (OR) and title filter using AND operator implicitly.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/criteria.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"],\n    \"OR\",\n    [\"author\", \"=\", \"Smith\"],\n  ],\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\n  [\n    [\"author\", \"=\", \"John\"],\n    \"OR\",\n    [\"author\", \"=\", \"Smith\"],\n  ],\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: NestedWhere complex example SQL\nDESCRIPTION: An example of a complex SQL WHERE clause for filtering users based on product totals, name patterns, and age ranges.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Specific Lifetime in PHP\nDESCRIPTION: This snippet shows how to use caching with a specific lifetime (120 seconds) in PHP.  The `useCache()` method is called with the desired lifetime in seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: This code initializes a new SleekDB store named \"news\" within the specified database directory. If the store does not exist, it is created automatically. The third parameter is an optional configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to delete a user from the `$userStore` whose name is \"Joshua Edwards\" using the `deleteBy()` method. The `deleteBy()` method deletes documents that match the provided criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Returning distinct values in PHP\nDESCRIPTION: This code demonstrates how to retrieve only distinct values from the query results. The `distinct` method accepts a string or array of fields and returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Distinct Method Signature (PHP)\nDESCRIPTION: Defines the signature for the distinct method in the SleekDB QueryBuilder. This method is used to retrieve unique values based on specified fields, removing duplicate documents from the result set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(array|string $fields): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a Posts Store in SleekDB with PHP\nDESCRIPTION: This code creates a 'posts' store to keep posts shared by users. It uses the same `$dataDir` variable as the other examples, pointing to the SleekDB data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance (PHP)\nDESCRIPTION: Demonstrates how to create a QueryBuilder instance using the `createQueryBuilder()` method of a Store object. This is the starting point for building a complex query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Update Documents\nDESCRIPTION: Updates one or multiple documents based on the current query. Parameters: `$updatable` (array) - an associative array containing the fields to update and their new values. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Using select() method in PHP\nDESCRIPTION: This code shows the declaration of the `select()` function for the QueryBuilder object.  It allows the specification of specific fields to output, similar to the SELECT keyword in SQL. Supports object chain for multiple fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Country and Total Saved (notIn) in PHP\nDESCRIPTION: This code snippet shows how to chain multiple `notIn()` calls to filter users based on multiple criteria. It excludes users from specific countries (IN, KE, OP) and also excludes users whose `products.totalSaved` field has certain values (100, 150, 200). This example demonstrates filtering using nested properties with dot notation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 3 PHP\nDESCRIPTION: This example demonstrates how to use the `useCache()` method with a lifetime of 0, resulting in infinite caching.  It retrieves a list of 20 active users and caches the result indefinitely.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: where() method with separate query builder in PHP\nDESCRIPTION: This example shows how to use the `where()` method to filter data and then fetch the results using `getQuery()` and `fetch()`. It retrieves users whose name is \"Joshua Edwards\" by first creating a QueryBuilder, then applying the `where` clause, and finally executing the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `delete()`. It deletes the cache file associated with the current query. This function doesn't take any parameters and doesn't return any value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration PHP\nDESCRIPTION: Initializes a SleekDB Store instance with a custom configuration array. The configuration array allows you to override default settings such as auto-caching, cache lifetime, timeout, primary key, and search options. The search configuration includes settings for minimum word length, search mode (OR/AND), score key, and the search algorithm to use. This example demonstrates how to set up a Store with specific options that apply to all queries performed on the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// default configurations\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Join Stores\nDESCRIPTION: Joins the current store with another one. Can be used multiple times to join multiple stores. Accepts a closure for the join function and the property name. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Search Example 1 - PHP\nDESCRIPTION: This example demonstrates how to use the `search()` method of the `QueryBuilder` class to search through multiple fields of news articles. It also shows how to sort the results by relevance using the 'searchScore' and exclude the 'searchScore' from results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->createQueryBuilder()\n  ->search([\"title\", \"description\", \"content\"], $searchQuery)\n  ->orderBy([\"searchScore\" => \"DESC\"]) // sort result\n  ->except([\"searchScore\"]) // exclude field from result\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Query PHP\nDESCRIPTION: This method returns a new `Query` object. The `Query` object is used to execute the constructed query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Find One Document by Criteria\nDESCRIPTION: Retrieves one document based on the provided criteria. Returns the document array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with Store - SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to retrieve documents from a SleekDB store using the `findBy()` method of the Store object. It demonstrates setting up the store configuration, creating a Store instance, defining a where condition, setting pagination parameters, executing the query, and outputting the results as JSON. The example uses a where condition with `IN` and `OR` operators, orders by `_id` in descending order, and limits the result set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Infinite Lifetime in PHP\nDESCRIPTION: This example demonstrates how to set an infinite cache lifetime using `useCache(0)`.  The cached result will persist indefinitely until explicitly invalidated or the store is cleared.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Except with Nested Field - PHP\nDESCRIPTION: Excludes the 'name' and 'address.streetNumber' fields from the result. Demonstrates how to exclude nested fields using the `except` method. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[ [\"_id\" => 2, \"address\" => [ \"street\" => \"Firststreet\" ]], ... ]\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in SleekDB\nDESCRIPTION: This PHP function updates one or multiple documents in the store.  It takes an associative array `$updatable` containing the fields to update and their new values. It returns a boolean value indicating success or failure of the operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Select Fields PHP\nDESCRIPTION: This method selects specific fields to be included in the query results. It accepts an array of field names as input and returns the `QueryBuilder` object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a Posts Store in SleekDB with PHP\nDESCRIPTION: This snippet creates a 'posts' store using the `SleekDB\\Store` class. It also assumes the `$dataDir` variable is predefined.  The purpose of this store is to manage post data within the SleekDB instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Method Signature PHP\nDESCRIPTION: This snippet shows the signature of the `regenerateCache()` method within the QueryBuilder class. It forces the cache to be refreshed, regardless of its current lifetime. The method returns the QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder Object - PHP\nDESCRIPTION: This example demonstrates how to keep and reuse a QueryBuilder object in SleekDB to add multiple conditions. It shows how to fetch users with `totalBought` and `totalSaved` greater than 0, then add a condition to filter only active users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Query Builder Join Function (PHP)\nDESCRIPTION: This PHP code snippet showcases the `join()` method within the SleekDB Query Builder.  It is used for joining two or more stores together and accepts a closure and a property name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Multiple Joins: Users, Comments, Articles (SleekDB PHP)\nDESCRIPTION: Demonstrates the use of multiple join() methods to retrieve data from three different stores: 'users', 'comments', and 'articles'.  It retrieves all users, their comments, and their articles by chaining the join() method twice, linking users to comments based on 'userId' and users to articles based on 'author'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Distinct Method Example in SleekDB (PHP)\nDESCRIPTION: Shows how to use the `distinct` method with both a string and an array to retrieve unique user entries based on the `name` field.  The example chains `distinct` with `getQuery` and `fetch` to execute the query and get the distinct user data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Join Method Signature PHP\nDESCRIPTION: Defines the signature of the `join` method in the SleekDB QueryBuilder. This method joins two or more stores together. It accepts a callable function and a data property name as input, and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction join(callable $joinedStore, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Example: Deleting User by ID - PHP\nDESCRIPTION: Demonstrates how to delete a user with the ID 12 using the `deleteById()` method. The function returns `true` if the deletion was successful or the document didn't exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Grouping Data with groupBy - PHP\nDESCRIPTION: This PHP code demonstrates how to use the SleekDB Query Builder to group data based on a specified field and apply a counter. It filters 'active' products, groups them by 'category', and adds a 'productAmount' counter representing the number of products in each category.  Dependencies include the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID Example 1 in SleekDB PHP\nDESCRIPTION: Removes the 'status' field from a user document with a specific ID. It requires the `$userStore` object to be initialized and an existing document with the given ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(23, [ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Join function definition PHP\nDESCRIPTION: Defines the signature of the join function within the QueryBuilder.  It takes a closure for the joined store and a property name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Object in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the Query object from the QueryBuilder using the `getQuery()` method. The Query object is then used to execute the query, for example, using `fetch()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Storing current date and time\nDESCRIPTION: Shows how to store the current date and time, using both a formatted string and a timestamp. This example illustrates using `DateTime` to get current datetime and format it for storage, and alternatively using `getTimestamp` to store it as a UNIX timestamp.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/dates.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Add Where Condition PHP\nDESCRIPTION: Adds a \"where\" condition to filter data.  Can be used multiple times; additional uses add an \"and where\" condition. Takes an array of conditions to apply. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: Quick Example (SleekDB PHP)\nDESCRIPTION: This example demonstrates a basic join operation in SleekDB, retrieving users from the 'users' store and joining them with their corresponding comments from the 'comments' store based on the user ID. The result includes a 'comments' property for each user containing their comments. This uses a callable function that directly returns the result of a subquery.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration (PHP)\nDESCRIPTION: This snippet demonstrates how to initialize a SleekDB Store object with a custom configuration array. The configuration array includes options for `auto_cache`, `cache_lifetime`, `timeout`, and `primary_key`.  The snippet creates a new Store instance named `$newsStore` using the provided configuration.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\"\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by ID in SleekDB (PHP)\nDESCRIPTION: The `deleteById()` method deletes a single document using its unique `_id`. This method is optimized for speed as it directly targets the document. It returns `true` if the document doesn't exist or deletion was successful, and `false` otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Example of useCache() with Null Lifetime in PHP\nDESCRIPTION: This example demonstrates enabling caching without a specific lifetime. The query results for active users will be cached until any user document is updated, deleted, or a new user is inserted.  Requires an existing QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer\nDESCRIPTION: This command installs the latest stable version of SleekDB using Composer. It adds SleekDB as a dependency to your project and updates the composer.json file. Requires Composer to be installed and configured in your project.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining Users with Comments (Quick Example)\nDESCRIPTION: This code snippet demonstrates how to join the 'users' store with the 'comments' store to fetch all users along with their associated comments.  It uses a closure to perform a sub-query on the commentStore to find comments related to a specific user ID. The result is an array of users, each with a 'comments' property containing their comments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/join-stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersWithComments = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    return $commentStore->findBy([\"user\", \"=\", $user[\"_id\"]]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from SleekDB PHP\nDESCRIPTION: This snippet fetches all news articles from the 'news' store using the `findAll` method and prints the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining Users with Comments (Example 1)\nDESCRIPTION: This code snippet shows how to join the 'users' store with the 'comments' store to retrieve users along with their associated comments. It demonstrates two different approaches: one where the closure returns the result of an executed sub-query, and another where the closure returns a QueryBuilder object to prepare a sub-query.  It initializes two SleekDB stores, 'users' and 'comments'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to create a QueryBuilder instance from a SleekDB store object. The QueryBuilder is used to construct and execute queries on the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to regenerate the cache for a query using the `regenerateCache()` method.  It forces a fresh query to be executed and the results to be stored in the cache, regardless of the cache's current lifetime. First example caches with infinite lifetime. The second example caches with a defined lifetime (20 seconds) and then regenerates the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Documents in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to update multiple documents in SleekDB using the `update()` method. It retrieves users with the name 'Josh', changes their names to 'Luke Bowman', and then updates all the modified users in the store. The `$userStore` object needs to be initialized and contain data with name 'Josh'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Hits Algorithm Constant in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to use the `hits` search algorithm. It represents the default search algorithm, where the score is based on the amount of search hits. It shows the constant defined within the `Query` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"]\n```\n\n----------------------------------------\n\nTITLE: Fetching all data from SleekDB Store PHP\nDESCRIPTION: This snippet retrieves all news articles from the 'news' store using the findAll method. The results are then printed to the console using print_r.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search with Store Class: Example (PHP)\nDESCRIPTION: Demonstrates a simple usage of the `search()` method of the Store class to search through multiple fields and order the result by relevance. This example showcases how to directly perform a search operation on a store instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: Get all documents with findAll in SleekDB (PHP)\nDESCRIPTION: The `findAll()` method retrieves all documents from a SleekDB store. It returns an array containing all documents or an empty array if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: get Method in PHP\nDESCRIPTION: This code defines the `get()` method of the Cache class. It retrieves the content of the cache file associated with the current query's token.  It returns an array containing the cached content, or null if no cache file is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Checking If Data Is Found - PHP\nDESCRIPTION: This code snippet defines the method for checking if any data is found based on the query. It takes no parameters and returns a boolean indicating whether any data matches the query conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: FindBy with Compound Criteria in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method with a compound criteria array to find news articles by \"John\" that contain \"cat\" in their title. It shows the use of the `AND` operator (optional) and the `LIKE` condition with wildcards.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/criteria.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"],\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"],\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Storing date as a string\nDESCRIPTION: Illustrates how to store a date as a string when inserting data into SleekDB.  This example shows inserting a new article with the releaseDate stored as a string in 'YYYY-MM-DD' format. The SleekDB store object is used to insert the record.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/dates.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Limit Method Example - PHP\nDESCRIPTION: Shows how to use the `limit()` method to limit the result set to the first 10 documents. This is equivalent to the LIMIT clause in SQL.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get First Document\nDESCRIPTION: Returns the first document that matches the query. More efficient than `fetch` but `orderBy` does not work.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Select Functions (SUM, AVG) - SQL\nDESCRIPTION: SQL equivalent of the PHP code below, showing how to SUM the follower column and alias it as followerSum.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(follower) as followerSum;\n```\n\n----------------------------------------\n\nTITLE: Skip Method Usage PHP\nDESCRIPTION: Demonstrates how to use the `skip` method to retrieve all users except the first 10 found. The example shows how to chain the `skip` method with `getQuery()` and `fetch()` to retrieve the desired data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Example in PHP\nDESCRIPTION: This example first caches the result with an infinite lifetime, then regenerates the cache with a 20-second lifetime, ensuring fresh data is cached after the initial infinite cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Joining Stores with SleekDB QueryBuilder in PHP\nDESCRIPTION: This code snippet illustrates the usage of the `join()` method in SleekDB to combine data from multiple stores.  The `$joinedStore` parameter accepts a Closure that defines how to access related data. The `$dataPropertyName` specifies the name to give to the joined data within the original dataset. Requires a valid `Closure` function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: disableCache() Example PHP\nDESCRIPTION: This snippet shows how to disable caching for a query using the `disableCache()` method. Even if store-wide caching is enabled, this particular query will bypass the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Select and OrderBy - PHP\nDESCRIPTION: Groups products by 'category' and 'subcategory', calculates the sum of 'views', and orders the result. Demonstrates a more complex `groupBy` example with `select` and `orderBy`. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([\n    \"Category\" => \"category\",\n    \"subcategory\",\n    \"productAmount\",\n    \"views\" => [\"SUM\" => \"views\"]\n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"Category\" => \"pants\", \"subcategory\" => \"shorts\", \"productAmount\" => 20, \"views\" => 212],\n  [\"Category\" => \"pants\", \"subcategory\" => \"jeans\", \"productAmount\" => 83, \"views\" => 331],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Limit example\nDESCRIPTION: Example showing how to limit the number of results to 10.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using where with inline QueryBuilder in PHP\nDESCRIPTION: This snippet shows an example of using the `where()` method with an inline QueryBuilder to filter users based on their name. It demonstrates building and executing the query in a single line.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Or Insert Document with Provided ID (PHP)\nDESCRIPTION: This snippet demonstrates how to update or insert a document in SleekDB using the `updateOrInsert()` method with `$autoGenerateIdOnInsert` set to `false`. It attempts to update or insert a user with _id 23, using the provided ID if it's an insert operation. The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\n----------------------------------------\n\nTITLE: Update data method signature in SleekDB using PHP\nDESCRIPTION: Defines the signature of the `update()` method in the `Store` class of SleekDB. The method takes an array of updatable documents as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with SleekDB in PHP\nDESCRIPTION: This snippet demonstrates how to use the `update()` method to update documents that match the query criteria. The example sets the status of all users in London to 'VIP'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering with DateTime objects in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to filter data in SleekDB using DateTime objects. It creates a SleekDB store, converts date strings to DateTime objects, and uses the findBy method with the BETWEEN condition to retrieve news articles within a specified date range. Requires the SleekDB library and autoloading.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Select Fields\nDESCRIPTION: Select specific fields. Only the specified fields will be returned in the query results. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Results Return in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates deleting documents based on a query and retrieving the deleted documents themselves as an array. It deletes all inactive users and returns an array of the deleted user objects, utilizing the `Query::DELETE_RETURN_RESULT` return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Join Store\nDESCRIPTION: Joins the current store with another one. Can be used multiple times to join multiple stores.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Except Method with Nested Fields - PHP\nDESCRIPTION: Shows how to exclude nested fields (address.streetNumber) using the `except()` method. This will remove the specified field from the output.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"_id\" => 2, \"address\" => [ \"street\" => \"Firststreet\" ]], ...\n]\n```\n\n----------------------------------------\n\nTITLE: Excluding specific fields in PHP\nDESCRIPTION: This code demonstrates how to exclude specific fields from the query result. The `except` method accepts an array of field names (strings) that should not be included in the results, and returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Find One Document by Criteria PHP\nDESCRIPTION: Retrieves one document based on the given criteria. Returns an array containing the document if found, or null otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Set Limit Amount\nDESCRIPTION: Sets the maximum number of records to return in the result set. Takes an integer representing the limit amount and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update Documents PHP\nDESCRIPTION: Updates one or multiple documents based on the provided updatable data.  Returns a boolean indicating the success of the update operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Joining Stores: `join()` Method Definition (SleekDB, PHP)\nDESCRIPTION: This snippet shows the function definition of the `join()` method.  It highlights the parameters required: a Closure $joinFunction and a string $propertyName.  The method returns a QueryBuilder object, allowing for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example with Complex Conditions\nDESCRIPTION: This SQL query demonstrates how to retrieve users based on multiple conditions including status, city, age ranges. It uses OR, AND, >=, <, and > operators to filter the data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  status = \"premium\" \n  OR \n  (\n    (\n      city = \"london\" OR city = \"new york\"\n    )\n    AND\n    (\n      (age >= 16 AND age < 20) OR age > 30\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Regenerate the cache for the query\nDESCRIPTION: This snippet demonstrates how to re-generate the cache for the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties with SleekDB in PHP\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents using SleekDB's `where` clause. It shows how to specify a path to a nested property (e.g., 'post.author.role') and apply a condition to it. No external dependencies are required, other than the SleekDB library itself.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Prioritize Algorithm in SleekDB\nDESCRIPTION: Illustrates the 'prioritize' search algorithm. The order of fields has a significant impact on the score, giving higher weight to earlier fields in the search array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: deleteById() Method Definition PHP\nDESCRIPTION: This snippet defines the signature of the `deleteById()` method of the `Store` class in SleekDB. It takes an integer or string representing the `_id` of the document to delete and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination in SleekDB (PHP)\nDESCRIPTION: This code demonstrates how to change the destination of a SleekDB store object using the `changeStore()` method. It allows you to manage multiple stores with a single store object. The function takes the new store name, data directory (optional), and configuration (optional) as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Example 2: Multiple Joins (PHP)\nDESCRIPTION: Demonstrates using multiple `join()` calls to retrieve users along with their comments and articles. This snippet showcases joining the 'users' store with both the 'comments' and 'articles' stores.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Distinct Values\nDESCRIPTION: Return distinct values. Parameters: `$fields` (string|array, optional) - the field(s) for which to return distinct values. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Distinct Values\nDESCRIPTION: Return distinct values for specified fields. Accepts a string or array of field names. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Store Path\nDESCRIPTION: Returns the complete path to the store, including the store name.  Returns a string representing the store path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Updating Documents - PHP\nDESCRIPTION: This code snippet shows the method for updating one or more documents.  It takes an array representing the fields to update as input. It returns a boolean indicating whether the update was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to search documents in a SleekDB store using the `search()` method of the `Store` object.  It searches for documents within the 'title' and 'content' fields of the 'news' store using the provided search query, orders the results by 'scoreKey', applies pagination, and then outputs the results as JSON.  It requires SleekDB to be included and accessible through the autoload.php.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"], \n    $searchQuery, \n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: orWhere Example 2 - Multiple orWhere calls in PHP\nDESCRIPTION: This example uses multiple `orWhere` calls to create a query with multiple OR conditions related to product totals and shipping status.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Storing Dates as Timestamps in SleekDB\nDESCRIPTION: Demonstrates how to store dates as timestamps in SleekDB using the `insert()` method.  The example shows how to convert a date string to a timestamp using DateTime::getTimestamp() before inserting the new article into the database. Requires SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Grouping and Summing - SQL\nDESCRIPTION: SQL example for grouping by age and summing follower amounts\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT age, SUM(follower) as followerSum GROUP BY age;\n```\n\n----------------------------------------\n\nTITLE: Select function with groupBy\nDESCRIPTION: Illustrates using a select function (SUM) in conjunction with groupBy to calculate the sum of 'follower' values for each 'age' group. This returns an array of documents, each with 'age' and 'followerSum'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"followerSum\" => 901],\n  [\"age\" => 20, \"followerSum\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: orWhere() Example 1: Combined AND/OR Condition in PHP\nDESCRIPTION: This example shows how to use `orWhere()` in conjunction with `where()` to retrieve users based on a combined AND/OR condition: `(products.totalSaved > 10 AND products.totalBought > 20) OR products.shipped = 1`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Join Stores PHP\nDESCRIPTION: Joins the current store with another one.  Can be used multiple times to join multiple stores. joinFunction (callable): A callable (function or method) that defines how to join the data. dataPropertyName (string): The name of the property in the joined data where the data from the joined store will be placed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nfunction join(callable $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping with HAVING Clause SQL\nDESCRIPTION: This SQL snippet groups active products by category and retrieves categories with total views between 500 and 1000. It selects the category and the sum of views as totalViews, filtering for active products.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: Join Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `join` method within the SleekDB QueryBuilder, which is used to join two or multiple stores together. It takes a callable $joinedStore function that specifies the store to join and a string $dataPropertyName that defines a property for the result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction join(callable $joinedStore, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Search QueryBuilder\nDESCRIPTION: Performs a full-text like search against one or more fields within the QueryBuilder.  Parameters: `$fields` (string|array) - the field(s) to search within, `$query` (string) - the search query, `$options` (array, optional) - additional search options. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder\nDESCRIPTION: Returns a new QueryBuilder object associated with the current store.  The QueryBuilder is used to construct complex queries with filtering, sorting, and joining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting User by ID - SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to delete a user using their unique ID. It calls `deleteById()` with the user's ID (12) and expects the method to return `true` upon successful deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/delete-data.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Excluding specific fields in a query\nDESCRIPTION: This snippet demonstrates how to exclude specific fields from the results of a query. It takes an array of field names to exclude.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Limiting Results - PHP\nDESCRIPTION: This PHP code snippet demonstrates the use of the `limit()` method to retrieve only the first 10 users. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using select for field selection in PHP\nDESCRIPTION: This snippet shows how to use `select()` to retrieve only the `name` field of all users. The output shows that only `_id` and `name` are returned.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Search (Query-Specific) - PHP\nDESCRIPTION: Demonstrates how to configure SleekDB's search behavior on a per-query basis using the `searchOptions` array. This example shows setting the minimum word length, search mode, score key, and algorithm for a specific search query. The options are passed to the `search()` method of the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: useCache() Method Signature PHP\nDESCRIPTION: This snippet shows the signature of the `useCache()` method within the QueryBuilder class. It accepts an optional integer argument representing the cache lifetime in seconds. The method returns the QueryBuilder instance, allowing for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with Complex Criteria using deleteBy() PHP\nDESCRIPTION: This snippet showcases a more complex example of using `deleteBy()` with nested conditions, simulating a SQL WHERE clause with AND and OR operators. It deletes users matching the specified name and age criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy(\n    [\n      [\n        [\"name\", \"=\", \"Joshua Edwards\"],\n        \"OR\",\n        [\"name\", \"=\", \"Mark Shiffer\"],\n      ],\n      \"AND\", // <-- Optional\n      [\n        [\"age\", \">\", 30],\n        \"OR\",\n        [\"age\", \"<\", 10]\n      ]\n    ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder Object (PHP)\nDESCRIPTION: This snippet shows how to keep and reuse a QueryBuilder object to add new conditions incrementally. By reusing the QueryBuilder, conditions are not reset, allowing for the creation of complex queries by adding multiple `where` clauses. This improves efficiency by avoiding redundant query builder initializations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Store\nDESCRIPTION: Deletes the entire store, including all data and cached files.  Returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Order By\nDESCRIPTION: Sets the sort order for the query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Ordering By Multiple Fields with SleekDB in PHP\nDESCRIPTION: This code snippet shows how to order results by multiple fields using the `orderBy()` method of the SleekDB QueryBuilder. It sorts users first by name in ascending order, then by age, also in ascending order.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join with findBy PHP\nDESCRIPTION: This example showcases joining the 'users' store with the 'comments' store using the `findBy` method within the `join` closure.  It demonstrates retrieving user comments based on the user's ID. The code initializes `userStore` and `commentStore` using the `Store` class from the `SleekDB` namespace, referencing database files in the `$dataDir`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/join-stores.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limiting Data Records in SleekDB\nDESCRIPTION: This PHP function sets the maximum number of data records to return. It accepts an integer or string as input. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int|string $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Criteria - SleekDB (PHP)\nDESCRIPTION: This snippet showcases the `deleteBy()` function in SleekDB for deleting documents that match specified criteria. It accepts an array of conditions and an optional return option to control the method's return value. It returns a boolean, integer, or array based on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/delete-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Using where() method in PHP\nDESCRIPTION: This code shows the declaration of the `where()` function for the QueryBuilder object. It's used to filter data based on provided criteria with the parameters being connected with an `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function Usage\nDESCRIPTION: Demonstrates the usage of custom select functions (closures) in SleekDB to manipulate data during retrieval.  The closure receives a document as parameter. When using a custom select function you always have to provide an alias.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => CLOSURE, ...]\n```\n\n----------------------------------------\n\nTITLE: Excluding fields with `except` in PHP\nDESCRIPTION: This PHP snippet uses the `except` method to retrieve all user information except the '_id' and 'name' fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\": 28], [\"age\": 18]]\n```\n\n----------------------------------------\n\nTITLE: orWhere() Method Example 3 PHP\nDESCRIPTION: This code shows how to use `orWhere` with nested conditions including `AND` and `OR` operators. It retrieves users that have a status of \"premium\" OR (live in \"london\" OR \"new york\" AND are between the age of 16 and 20 OR older than 30).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Join Method Signature (PHP)\nDESCRIPTION: Defines the signature for the join method in the SleekDB QueryBuilder. This method is used to join two or more stores together based on a provided closure and property name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Token in SleekDB with PHP\nDESCRIPTION: This PHP code snippet defines the `getToken()` function within the SleekDB Cache class. This function returns the unique token used to identify and access the cache file associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with Query - PHP\nDESCRIPTION: This code snippet defines the method for updating one or more documents based on the current query conditions. It takes an array of updatable fields and their new values as input. It returns a boolean indicating the success of the update operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Where Condition PHP\nDESCRIPTION: This method adds a \"where\" condition to filter data. It can be used multiple times, with each additional use adding an \"and where\" condition. It takes an array of conditions as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents and Returning Count with SleekDB in PHP\nDESCRIPTION: This snippet shows how to use the `delete()` method with the `Query::DELETE_RETURN_COUNT` option to delete documents and retrieve the number of deleted documents. The example deletes all inactive users and returns the count.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: Fetching First Document PHP\nDESCRIPTION: This snippet illustrates how to retrieve the first document that matches a specified query using the `first()` method. The example targets a user with a specific email address and retrieves their document. This method is more efficient than fetching all but `orderBy` is not supported.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Adding Or Where Condition in SleekDB\nDESCRIPTION: This PHP function adds an \"or where\" condition to filter data. It takes an array of conditions for the or where clause. Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Record with PHP\nDESCRIPTION: This example illustrates how to retrieve the first document matching a given condition using the `first()` method of the Query object. Note that `orderBy` will not work when using `first()` to get the very first item. The example retrieves the first user with the email \"foo@bar.com\".\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Country and Total Savings PHP\nDESCRIPTION: This example shows how to use chained notIn() methods to filter users based on multiple criteria. It filters users who are not from the specified countries ('IN', 'KE', 'OP') and whose total savings are not within the specified values (100, 150, 200). The result is then retrieved using getQuery() and fetch().\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Query Object (PHP)\nDESCRIPTION: Shows how to retrieve the Query object from the QueryBuilder using the `getQuery()` method. The Query object is then used to execute the query using methods like `fetch()`, `first()`, `exists()`, `delete()`, and `update()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: where Example 3 - Complex conditions using arrays in PHP\nDESCRIPTION: This code shows a complex `where` clause example with nested arrays to represent AND/OR conditions, filtering users based on status, city, and age. Demonstrates how to structure complex criteria within the `where` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"], // <-- If no operation is provided, \"AND\" is used.\n      [ \n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"] \n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents by Criteria\nDESCRIPTION: Deletes one or multiple documents based on the provided criteria. Returns a boolean, array or null depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Join Function Definition - SleekDB (PHP)\nDESCRIPTION: Defines the signature of the `join` method, showing its parameters: a Closure that returns either a query result or a QueryBuilder object, and a string defining the name of the new property to add.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/join-stores.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Token PHP\nDESCRIPTION: This code snippet shows the definition of the `getToken()` method. It returns the unique token (string) for the current query, which is used for saving and retrieving the corresponding cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 1 PHP\nDESCRIPTION: PHP implementation of the complex nested where statement example using SleekDB's query builder. It retrieves users based on product saves/bought counts and age, combined with name like conditions, demonstrating how to structure nested conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents by Criteria\nDESCRIPTION: Deletes one or multiple documents from the store based on the provided criteria.  Parameters: `$criteria` (array) - an associative array specifying the deletion criteria, `$returnOption` (int, optional) - specifies what should be returned after deleting. Returns a boolean, array or null based on `$returnOption`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Update Documents\nDESCRIPTION: Updates one or multiple documents based on the criteria defined in a previous query. Accepts an array of updatable key-value pairs. Returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: setLifetime Method in PHP\nDESCRIPTION: This code defines the `setLifetime()` method of the Cache class. It sets the lifetime for the cache file associated with the current query, specifying how long the cache should be considered valid. It accepts an integer (in seconds) or null for no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Except Method Usage - PHP\nDESCRIPTION: Excludes the '_id' and 'name' fields from the result set. The `except` method allows specifying fields that should *not* be included in the retrieved data. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store\nDESCRIPTION: This snippet shows how to delete a SleekDB store using the `deleteStore()` method. This method permanently deletes the store and all its data, including any cached data. It's a destructive operation and should be used with caution.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/managing-store.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Cache Object in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the Cache object from a Query object using the `getCache()` method. The Cache object allows for deeper control over caching.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Options Per Query - PHP\nDESCRIPTION: This snippet demonstrates how to configure search options on a per-query basis using the `search()` method of the `QueryBuilder` class. It sets options such as minimum length, search mode, score key, and search algorithm for a specific search query. These options override store-wide configurations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// On a query by query bases\n\n$searchOptions = [\n  \"minLength\" => 2,\n  \"mode\" => \"or\",\n  \"scoreKey\" => \"scoreKey\",\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n];\n\n$userStore = new Store(\"users\", __DIR__ . \"/database\");\n\n$userStore->createQueryBuilder()\n  ->search([\"profileDescription\"], \"SleekDB\", $searchOptions)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many Documents\nDESCRIPTION: Creates/Inserts many documents in the store or updates existing ones. Returns the inserted/updated documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Initializing a SleekDB Store in PHP\nDESCRIPTION: This snippet initializes a SleekDB store named 'news'. It requires the data directory to be initialized beforehand. If the store doesn't exist, it will be automatically created.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: distinct() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `distinct()` method within the SleekDB QueryBuilder.  It accepts a string or an array of strings indicating the field(s) that should be distinct.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndistinct( array|string $fields ): QueryBuilder;\n```\n\n----------------------------------------\n\nTITLE: Finding a Document by ID - PHP\nDESCRIPTION: This code snippet defines the method for finding a specific document by its _id. It takes the _id as an integer parameter and returns the document as an array or null if not found.  The retrieval is fast, as it utilizes the file path based on the id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Delete Documents by Criteria\nDESCRIPTION: Deletes one or more documents from the store based on the specified criteria. The `returnOption` parameter controls what is returned after deletion.  Returns a boolean, an array, or null, depending on the `returnOption`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name PHP\nDESCRIPTION: This snippet deletes users whose name is 'Joshua Edwards' using the `deleteBy()` method with the default boolean return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Selecting aliased nested fields with 'select' PHP\nDESCRIPTION: Demonstrates how to select a nested field with an alias using the SleekDB query builder's `select` method.  Retrieves the 'age' field nested under 'userBiography' and aliases it as 'age'. Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: Deleting documents with a Query in PHP\nDESCRIPTION: This code demonstrates how to delete documents based on the current query. The `delete` method accepts an optional return option and returns a boolean, an array, or an integer depending on the return option specified. \nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Setting the Data Directory Path in PHP\nDESCRIPTION: This code snippet sets the data directory path where SleekDB will store its data.  It uses the `__DIR__` magic constant to create an absolute path to a directory named \"mydb\" within the current directory. This path is required to initialize a SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties with SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents stored in SleekDB.  It uses the `where` clause to specify a condition on a nested field. It assumes that the SleekDB library is already installed and configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Using select() method in PHP\nDESCRIPTION: This code snippet shows the signature of the `select()` method of the QueryBuilder object. This method is used to specify the fields to include in the output. The returned value is a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet retrieves documents from a SleekDB store using the QueryBuilder. It demonstrates how to define where conditions, apply ordering, limit the number of results, and skip a certain number of results for pagination using the QueryBuilder's methods. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users - SleekDB - PHP\nDESCRIPTION: Demonstrates updating multiple users in SleekDB. It retrieves users based on a condition, modifies their properties, and then updates all the modified users using the `update()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Search Function Definition PHP\nDESCRIPTION: Defines the `search` function in the SleekDB QueryBuilder. This function performs a full-text like search against one or multiple fields, accepting an array or string of fields, a query string, and optional configuration options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting Distinct Values in SleekDB\nDESCRIPTION: This PHP function retrieves distinct values for specified fields. It takes an array of field names, or a single field name. It returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetch Documents with Query PHP\nDESCRIPTION: This code snippet shows how to use the `fetch()` method of the Query object to retrieve all documents that match a specific condition. It retrieves all users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Object in SleekDB with PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the Cache object using the `getCache` method of the `Query` class in SleekDB. The Cache object allows for deeper control over caching mechanisms within the SleekDB database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users - SleekDB - PHP\nDESCRIPTION: This snippet shows how to update multiple users' data in SleekDB. It retrieves users with a specific name using `findBy()`, iterates through the results, modifies each user's name, and then updates all modified users in a single call to the `update()` method. It relies on each user object containing a valid `_id` for identification.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Nested Where Clauses with nestedWhere - PHP (Deprecated)\nDESCRIPTION: This PHP code demonstrates how to make complex nested where statements using the deprecated `nestedWhere` method. This method is deprecated since version 2.3; use `where` and `orWhere` instead. See documentation for details about the `nestedWhere` method and its parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Getting the primary key field name in PHP\nDESCRIPTION: This code snippet retrieves the name of the field used as the primary key for the store. The `getPrimaryKey` method returns a string representing the primary key field name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: Get Store Name\nDESCRIPTION: Get the name of the store. Returns the store name as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Example PHP\nDESCRIPTION: This example demonstrates how to use the `regenerateCache()` method. It first caches a query with infinite lifetime, then regenerates the cache with a 20-second lifetime, effectively updating the cache and its lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor PHP\nDESCRIPTION: Creates a new Cache object. Takes a Query object and the store path as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(Query $query, string $storePath)\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation in PHP\nDESCRIPTION: This snippet demonstrates how to create a `Store` object in PHP, which is essential for interacting with SleekDB. It initializes a store named 'users' within a specified database directory. This is a prerequisite for performing any CRUD operations on the 'users' data store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Remove Fields Query\nDESCRIPTION: Remove fields of one or multiple documents based on current query. Accepts an array of field names to remove. Returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Count Return in PHP with SleekDB\nDESCRIPTION: This snippet shows how to delete documents based on a query and retrieve the number of deleted documents. It deletes all inactive users and returns the count of the deleted records using the `Query::DELETE_RETURN_COUNT` option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Function Definition (PHP)\nDESCRIPTION: Defines the signature of the join() method in SleekDB's QueryBuilder.  It takes a callable function and a string as arguments, where the callable function is used to perform the join logic and the string specifies the name of the property where the joined data will be stored.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(callable $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Remove Status Field by ID PHP\nDESCRIPTION: Removes the 'status' field from the user document with ID 23 using the `removeFieldsById` function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Remove Multiple Fields By ID in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to remove multiple fields from a document in SleekDB using its ID with the `updateById()` method and providing an array of field names to be removed. It removes the 'name' and 'age' fields of the user with the ID 24. The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\", \"age\" ]);\n```\n\n----------------------------------------\n\nTITLE: Add Search\nDESCRIPTION: Performs a fulltext-like search against one or more fields. Takes a field (string or array) and a keyword as input and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $field, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Disable Cache PHP\nDESCRIPTION: This method disables caching for the current query. It returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Users and Retrieving Deleted Documents in SleekDB (PHP)\nDESCRIPTION: This example demonstrates deleting users with the name \"Joshua Edwards\" and retrieving the deleted documents using `Query::DELETE_RETURN_RESULTS`.  It uses the `deleteBy()` method and requires the `SleekDB/Query` namespace to be imported.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Setting Data Directory Path PHP\nDESCRIPTION: Sets the data directory path for SleekDB. This directory will be used to store the database files.  The `$dataDir` variable holds the path to the directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$dataDir = \"/Users/username/documents/mydb\";\n```\n\n----------------------------------------\n\nTITLE: In Function Definition PHP\nDESCRIPTION: Defines the deprecated `in` function in SleekDB. It works like the IN clause in SQL, supporting multiple IN clauses for different fields. It checks if a field's value is within a given array of values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using disableCache() PHP\nDESCRIPTION: This snippet demonstrates how to disable caching for a specific query using the disableCache() method. The query retrieves 20 active users without using the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 2 PHP\nDESCRIPTION: Demonstrates another use case of the `nestedWhere` method in PHP with SleekDB, fetching users based on status, city, and age ranges using complex nested conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Reusing SleekDB QueryBuilder (PHP)\nDESCRIPTION: Shows how to reuse a QueryBuilder object to add multiple conditions to a query. The `createQueryBuilder()` method is called once, and subsequent `where()` calls add additional conditions. The `getQuery()->fetch()` method is then called multiple times to execute the query with different conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Add OrWhere Condition\nDESCRIPTION: Adds an `or where` condition to the query, filtering the data based on specified criteria. Parameters: `$conditions` (array) - an associative array representing the or where conditions. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Lifetime in SleekDB\nDESCRIPTION: This snippet shows the function definition for `setLifetime()`, which sets the lifetime for the current query's token. The lifetime is specified in seconds, with 0 representing infinite lifetime, and null indicating no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent for complex where() (SQL)\nDESCRIPTION: Presents the SQL equivalent of the complex `where()` condition example for better understanding and comparison.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n// example in sql\nWHERE \n  status = \"premium\" \n  AND \n  (\n    (\n city = \"london\" OR city = \"new york\" )\n    AND \n    ( (age >= 16 AND age < 20) OR age > 30 )\n  )\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Field with Query PHP\nDESCRIPTION: This code snippet demonstrates how to remove a nested field (address.street) from documents using the `removeFields` method. It removes the 'address.street' field of users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store Object PHP\nDESCRIPTION: This snippet demonstrates how to create a new SleekDB `Store` object, which is necessary for performing database operations like deleting data. It initializes a store named 'users' within the specified directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Fields - PHP\nDESCRIPTION: This code snippet defines the method for excluding specific fields from the query results. It takes an array of field names to exclude as input and returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Limit Amount PHP\nDESCRIPTION: Sets the amount of data records to limit.  Used for pagination. Takes an integer representing the number of records to limit. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting documents with SleekDB (Example 1)\nDESCRIPTION: Deletes documents in SleekDB that match a given query (active equals false) and returns a boolean indicating success or failure. It assumes `$userStore` object is an instance that provides `createQueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store Object in PHP\nDESCRIPTION: Demonstrates how to create a `Store` object in SleekDB, specifying the store name ('users') and the directory for the database files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Excluding fields with 'except' PHP\nDESCRIPTION: Demonstrates how to exclude specific fields from the result set using the SleekDB query builder's `except` method.  Retrieves all information of a user except '_id' and 'name'. Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: Delete Documents (Query) PHP\nDESCRIPTION: This method deletes matched documents based on the query criteria. It supports different return options to specify the type of data returned after deletion. It returns a boolean, array, or integer depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Store in PHP\nDESCRIPTION: This snippet illustrates creating a 'posts' store using SleekDB. The store is instantiated with the name 'posts' and the data directory `$dataDir`. This store can be used to manage user-generated content within SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Search Algorithm Constant in SleekDB (PHP)\nDESCRIPTION: This code shows how to access the search algorithm constants within the `Query` class in SleekDB. These constants are used to specify the desired search algorithm when configuring search options, either store-wide or on a query-by-query basis. It demonstrates how to retrieve the default 'hits' algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Get Search Options (Internal)\nDESCRIPTION: This method is used internally. Returns the search options of the store. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Null Lifetime in PHP\nDESCRIPTION: This snippet demonstrates how to use caching with a null lifetime in PHP. A null lifetime means the cache will be invalidated on updates, deletes, or inserts.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents using Store - SleekDB (PHP)\nDESCRIPTION: This example demonstrates retrieving documents from a SleekDB store using the findBy() method of the Store object. It sets up a store and then defines a $whereCondition array to filter the results. The results are paginated and ordered by _id. The retrieved documents are then outputted as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with notIn()\nDESCRIPTION: This PHP code demonstrates the use of the `notIn` method to retrieve users who are NOT from specific countries.  The result includes users from any country other than IN, KE, or OP.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Add Where Condition\nDESCRIPTION: Adds a `where` condition to the query, filtering the data based on specified criteria.  Can be used multiple times to add multiple `and where` conditions. Parameters: `$conditions` (array) - an associative array representing the where conditions. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding a where condition in PHP\nDESCRIPTION: This code demonstrates how to add a 'where' condition to filter data in the query. The `where` method accepts an array of conditions and returns the modified `QueryBuilder`. Multiple calls to `where` add an 'and where' condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Finding All Data in SleekDB Store\nDESCRIPTION: This PHP snippet retrieves all news articles from the 'news' store using the `findAll` method. The results are stored in the `$allNews` variable and then printed using `print_r` for inspection.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Search QueryBuilder\nDESCRIPTION: Performs a full-text like search against one or more fields using QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: NestedWhere definition PHP\nDESCRIPTION: Defines the signature of the deprecated nestedWhere function. It takes an array of conditions as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer\nDESCRIPTION: Installs the SleekDB package using Composer. This command should be run in the project's root directory where the composer.json file resides. The command adds SleekDB as a dependency to the project and configures autoloading.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Lifetime in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `getLifetime(): int|null`. It retrieves the configured lifetime for the current query's cache. It returns an integer representing the lifetime in seconds, where 0 means infinite, or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Store Constructor\nDESCRIPTION: Creates a new Store object. Internally it creates a new store folder if it doesn't exist. It accepts the store name, database path, and an optional configuration array as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Delete Document by ID\nDESCRIPTION: Deletes one document by its _id. Very fast because it deletes the document by its file path. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Update Or Insert Document with Auto ID (PHP)\nDESCRIPTION: This snippet demonstrates how to update or insert a document in SleekDB using the `updateOrInsert()` method. It updates/inserts a user with _id 23, and if it's an insert operation, it applies an auto-generated _id.  The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Get Cache\nDESCRIPTION: Returns the Cache object associated with the current query. Allows access to caching functionalities.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Getting Store Name in SleekDB\nDESCRIPTION: This PHP function retrieves the name of the store. It does not take any parameters. The function returns the store name as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Rounding price with HAVING condition PHP\nDESCRIPTION: This PHP snippet uses SleekDB's QueryBuilder to select product names and their rounded prices (rounded to 0 decimal places) where the products are active and the rounded price is between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"name\", \"roundedPrice\" => [\"ROUND\" => [\"price\", 0]] ])\n  ->where([\"active\", \"=\", true])\n  ->having([ \n    [\"roundedPrice\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"roundedPrice\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many in SleekDB PHP\nDESCRIPTION: Demonstrates how to update or insert multiple documents using `updateOrInsertMany()` in SleekDB.  It requires an array of associative arrays representing the documents to update or insert. Returns the updated or inserted documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\npublic function updateOrInsertMany(array $data, bool $autoGenerateIdOnInsert = true): array\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance in PHP\nDESCRIPTION: This code snippet demonstrates how to create a QueryBuilder instance using the `createQueryBuilder()` method of a SleekDB `Store` class.  It initializes the query builder for a specific store (e.g., `$userStore`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Fetching One Document with Complex Criteria in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch a single document from a SleekDB store using complex criteria with `findOneBy()`. It finds a news article where the author is 'John' OR 'Mark' AND the topic is LIKE 'School%' OR 'Work%'. Returns the first matching document or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store\nDESCRIPTION: This code snippet shows how to insert data into a SleekDB store. It uses the `insert()` method of the `SleekDB\\Store` class to add a new user with name, email, and avatar information. The data is provided as an associative array, which SleekDB will serialize as a JSON document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Use Cache\nDESCRIPTION: Enables caching for the current query.  Accepts an optional cache lifetime in seconds.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the last inserted ID in PHP\nDESCRIPTION: This code snippet retrieves the ID of the last document that was inserted into the store. The `getLastInsertedId` method returns an integer representing the last inserted ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Getting SleekDB Query Object PHP\nDESCRIPTION: This snippet shows how to obtain a Query object from a QueryBuilder instance. This is a prerequisite for performing any query operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Fetch Users in London\nDESCRIPTION: Example of fetching all users located in London using the `fetch()` method. Requires an instance of a QueryBuilder and a city field in the user documents. Returns an array of user documents matching the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: JSON data example for nested property query (JSON)\nDESCRIPTION: This JSON data structure shows how SleekDB stores data, enabling queries on nested properties like 'post.author.role'. This illustrates the data structure targeted by the PHP query example. Requires a basic understanding of JSON.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Method Signature (PHP)\nDESCRIPTION: Defines the signature for the search method in the SleekDB QueryBuilder. This method performs a full-text-like search against one or more specified fields using a provided query string and optional configuration options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting and Rounding with SleekDB Query Builder (PHP)\nDESCRIPTION: This PHP snippet uses the SleekDB query builder to select the name and rounded price of active products, filtering results where the rounded price is between 500 and 1000. It uses the `select`, `where`, and `having` methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"name\", \"roundedPrice\" => [\"ROUND\" => [\"price\", 0]] ])\n  ->where([\"active\", \"=\", true])\n  ->having([ \n    [\"roundedPrice\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"roundedPrice\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Query Nested Properties in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents stored in SleekDB. It shows the `where` clause syntax for accessing nested fields like `post.author.role`. SleekDB allows you to filter data based on values within these nested structures without requiring a predefined schema.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Except Fields\nDESCRIPTION: Exclude specific fields from the query results. Accepts an array of field names to exclude. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Multiple orWhere() Conditions in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates using multiple `orWhere()` clauses in SleekDB. It retrieves users where 'products.totalSaved' is greater than 10, OR 'products.totalBought' is greater than 20, OR 'products.shipped' is equal to 1.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB->where( 'products.totalSaved', '>', 10 )\n    ->orWhere( 'products.totalBought', '>', 20 )\n    ->orWhere( 'products.shipped', '=', 1 )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limit Method Usage - PHP\nDESCRIPTION: Demonstrates using the `limit()` method to restrict the number of documents returned in the result set, similar to a LIMIT clause in SQL.  The example limits the result to the first 10 documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Custom select function - external variable\nDESCRIPTION: This example uses external variables in custom select function\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// Extract the custom function from the select array\n$fullNameSelectFunction = function($user){\n  return $user['forename'] . ', ' . $user['surname'];\n}\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Exists Check PHP\nDESCRIPTION: This snippet checks if any document exists that matches the specified conditions. This method is more efficient than using `fetch()` to check if some data exists or not.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Numeric Function AVG in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `AVG` numeric function within the `select()` method of the QueryBuilder. It is used to retrieve the average value of a field (sum / amount).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"AVG\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: orWhere Method Signature in PHP\nDESCRIPTION: This code snippet displays the function signature for the orWhere method of the QueryBuilder class in PHP. It accepts an array of criteria to filter data, similar to the where method, but the conditions are logically ORed together.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining stores - Example 2\nDESCRIPTION: This example demonstrates how to use multiple `join()` calls to retrieve users along with their comments and articles. It joins the 'users' store with both 'comments' and 'articles' stores based on the respective relationships.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Object with getCache() in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve the Cache object from a Query object in PHP.  It shows the usage of the `getCache()` method which allows further customization of caching for a given query. The cache object provides methods for manipulating cache files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by Query\nDESCRIPTION: Removes specified fields from documents matching the current query.  Accepts an array of field names to remove.  Returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date/Time in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to store the current date and time in SleekDB, either formatted as a string or as a timestamp. It uses the DateTime class to get the current date/time and then either formats it as 'Y-m-d H:i:s' string or retrieves the timestamp. Requires SleekDB library and PHP's DateTime class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: where Method Signature in PHP\nDESCRIPTION: This code snippet displays the function signature for the where method of the QueryBuilder class in PHP. It accepts an array of criteria to filter data. Multiple conditions provided within the array are connected with an AND.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File\nDESCRIPTION: Deletes the cache file(s) for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: deleteAllWithNoLifetime() Method in PHP\nDESCRIPTION: This code defines the `deleteAllWithNoLifetime` method, which deletes all cache files without a specified lifetime (i.e., those with a `null` lifetime) from the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Complex grouping and aggregation with SQL\nDESCRIPTION: This SQL query selects category, subcategory, the count of products (aliased as productAmount), and the sum of views (aliased as views). It filters for active products, groups the results by category and subcategory, and orders the results by category (ascending) and subcategory (descending).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: Having Condition\nDESCRIPTION: Filters grouped documents based on specified criteria. Accepts an array of conditions for filtering the grouped data. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: First Query Result\nDESCRIPTION: Return the first document. (More efficient than `fetch` but `orderBy` does not work). Returns the first document found, or null if no document matches the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Search Fulltext PHP\nDESCRIPTION: Performs a fulltext-like search against one or more fields. field (string|array): The field(s) to search in. Can be a single field name (string) or an array of field names. keyword (string): The search keyword.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(string|array $field, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path\nDESCRIPTION: Get the path to the cache folder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Setting the Cache Content - PHP\nDESCRIPTION: This code snippet demonstrates the method for setting/caching the content for the current query. It takes an array representing the content to be cached as input and returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Use Cache PHP\nDESCRIPTION: Enables caching for the current query. lifetime (int, optional): The cache lifetime in seconds. If null, the store's default cache lifetime is used.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using disableCache() to Disable Caching in PHP\nDESCRIPTION: Disables caching for a specific query.  This overrides the store-wide caching configuration. The function returns the QueryBuilder object, allowing method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the cache lifetime in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the cache lifetime for the current query. The `getLifetime` method returns an integer representing the cache lifetime in seconds, or `null` if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version (Shell)\nDESCRIPTION: This command installs the development version of SleekDB using Composer.  Use this version only if you are willing to work with experimental features. It may contain bugs or inconsistencies and is not recommended for production environments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Numeric Function SUM in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `SUM` numeric function within the `select()` method of the QueryBuilder. It is used to retrieve the sum of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"SUM\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache with useCache() in PHP\nDESCRIPTION: Illustrates how to enable caching for a specific query using the useCache() method of the QueryBuilder. The lifetime of the cache can be specified in seconds, with null indicating no lifetime, and 0 for infinite lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Query - PHP\nDESCRIPTION: This code snippet defines the method for disabling caching for the current query. It takes no parameters and returns the QueryBuilder object for method chaining. This ensures that the query is executed and data is retrieved from the data store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting with Aggregation Functions - PHP\nDESCRIPTION: Shows how to use select functions like SUM and AVG to aggregate data in SleekDB. The snippet retrieves the sum and average of the 'follower' field, aliased as 'followerSum' and 'followerAvg', respectively.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"followerSum\" => [\"SUM\" => \"follower\"],\n    \"followerAvg\" => [\"AVG\" => \"follower\"]\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"followerSum\" => 81482, \"followerAvg\" => 501.319205]\n]\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime in PHP\nDESCRIPTION: This code illustrates the signature of `setLifetime()` in PHP, part of SleekDB Cache class. This method sets the lifetime for the current query's cache. It takes an integer (seconds) or null as input, representing the cache duration. It returns the Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents in SleekDB\nDESCRIPTION: This code snippet demonstrates how to insert multiple documents into a SleekDB store. It initializes a new Store object, defines an array of new users, inserts the users into the store using the insertMany() method, and outputs the new user data as a JSON string. Requires autoload.php and SleekDB\\Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/complete-examples.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$newUsers = [\n  [\n    \"username\" => \"Lisa\",\n    \"age\" => 17,\n    \"address\" => [\n      \"street\" => \"up street\"\n      \"streetNumber\" => 48,\n      \"postalCode\" => \"1822\",\n    ],\n  ],\n  [\n    \"username\" => \"Bob\",\n    \"age\" => 20,\n    \"address\" => [\n      \"street\" => \"down street\"\n      \"streetNumber\" => 12,\n      \"postalCode\" => \"8174\",\n    ],\n  ]\n];\n\n$newUsers = $userStore->insertMany($newUsers);\n\n// Output users with their unique id.\nheader(\"Content-Type: application/json\");\n\necho json_encode($newUsers);\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with SleekDB Store\nDESCRIPTION: This code demonstrates searching documents in a SleekDB store using the `search` method of the `Store` class. It initializes the SleekDB environment, defines a search query, and executes the search on specified fields with optional ordering and pagination. It requires the SleekDB library and autoloads dependencies.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"], \n    $searchQuery, \n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Object with getCache() in PHP\nDESCRIPTION: Demonstrates how to retrieve the Cache object using the `getCache()` method of the Query class. This allows for deeper control over caching behavior for specific queries. Requires an existing Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Method Signature PHP\nDESCRIPTION: This code shows the signature of the `regenerateCache` method in the QueryBuilder class. It forces a cache regeneration for the given query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID\nDESCRIPTION: Returns the last created store object ID. Does not require any parameters. Returns an integer representing the ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: OrderBy Method Usage - PHP\nDESCRIPTION: Demonstrates using the `orderBy()` method to sort the result set based on a specified field.  The example sorts users by their 'name' in ascending order.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[[\"_id\" => 13, \"name\" => \"Anton\"], [\"_id\" => 2, \"name\" => \"Berta\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many with Existing IDs PHP\nDESCRIPTION: Updates or inserts multiple users using `updateOrInsertMany()` with `$autoGenerateIdOnInsert = false`. This example demonstrates what happens when `autoGenerateIdOnInsert` is `false`.  If a user lacks an `_id` (e.g., Lisa), then an id will be auto-generated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\", // <-- will get auto-generated _id\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users, false);\n// Lisa will get a auto-generated _id, because there is no _id in the document!\n```\n\n----------------------------------------\n\nTITLE: Fetching one document by criteria in SleekDB\nDESCRIPTION: This function retrieves a single document from the SleekDB store that matches the specified criteria. It returns only the first matching document.  The function returns the document as an array or null if no document matches the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/fetch-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: disableCache() function definition PHP\nDESCRIPTION: Defines the disableCache function within the QueryBuilder class, allowing the built-in caching solution to be disabled on a per-query basis. It returns the QueryBuilder instance for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Skip Records\nDESCRIPTION: Sets the number of data records to skip (offset).  Accepts an integer representing the number of records to skip.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB dev version\nDESCRIPTION: This command installs the development version of SleekDB using Composer. This version is not recommended for production use, as it may contain undocumented features and API inconsistencies.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Get Cached Result PHP\nDESCRIPTION: Returns cached result for current query if found, else null. Returns an array containing the cached result or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Getting the Query Object in PHP\nDESCRIPTION: Demonstrates how to obtain the Query object from the QueryBuilder in SleekDB. This is a prerequisite for performing any query operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Reusing Query Object - PHP\nDESCRIPTION: This example shows how to keep and reuse a Query object in SleekDB to fetch data and update documents. It fetches users with `totalBought` and `totalSaved` greater than 0, updates the matched documents with `someRandomData`, and then fetches the updated data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 1 in PHP\nDESCRIPTION: This example fetches and caches 20 active users. The cache will be invalidated upon any updates, deletions, or insertions of data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Adding a 'where' condition to the query\nDESCRIPTION: This snippet shows how to add a 'where' condition to filter the data.  It takes an array of conditions.  Multiple calls add 'and' conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields - PHP\nDESCRIPTION: This code snippet demonstrates the method for selecting specific fields to include in the query results. It takes an array of field names as input and returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with in()\nDESCRIPTION: This PHP code demonstrates how to use the `in` method to retrieve users from specific countries.  It retrieves users whose country is one of the values in the array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Store PHP\nDESCRIPTION: Gets the store object used to create the query builder. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in SleekDB\nDESCRIPTION: This PHP function returns the total number of documents in the store. It doesn't require any parameters. Returns an integer representing document count.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Where Condition PHP\nDESCRIPTION: Adds a \"where\" condition to filter the data. Can be used multiple times to add multiple \"and where\" conditions. conditions (array): An associative array where the key is the field name and the value is the condition to apply.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the cache path in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the path to the cache folder of the current store. The `getCachePath` method returns a string representing the path to the cache folder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Example of useCache() with Infinite Lifetime in PHP\nDESCRIPTION: Demonstrates enabling caching with an infinite lifetime (0 seconds). The query results will be cached indefinitely until explicitly invalidated.  Requires an existing QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache with disableCache() in PHP\nDESCRIPTION: Demonstrates how to disable caching for a query using the disableCache() method. This overrides the store-wide caching configuration for the specific query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content\nDESCRIPTION: Retrieve content of cache file. Returns the cached content as an array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Get First Document with Query\nDESCRIPTION: This snippet retrieves the first document matching a specified query using the `first()` method in SleekDB. Requires an existing Query object. Returns an array containing the first matched document or an empty array if no document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Deleting User and Retrieving Deleted Documents - SleekDB (PHP)\nDESCRIPTION: This snippet deletes all users whose name is \"Joshua Edwards\" and retrieves the deleted documents using the `Query::DELETE_RETURN_RESULTS` return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/delete-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB/Query;\n$userStore->deleteBy(['name', '=', 'Joshua Edwards'], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration (PHP)\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB Store object with custom configuration options. It creates a configuration array with settings for auto_cache, cache_lifetime, timeout, primary_key, and search, and then passes this array as the third parameter to the Store constructor. It requires the SleekDB library to be installed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// default configurations\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Creating a new QueryBuilder object in PHP\nDESCRIPTION: This snippet showcases how to create a new `QueryBuilder` object from a `Store` object. The `createQueryBuilder` method is used to instantiate the `QueryBuilder`, which is then used for constructing database queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation PHP\nDESCRIPTION: This code snippet demonstrates how to create a SleekDB Store object using the `SleekDB\\Store` class. It requires the `SleekDB` namespace and specifies the store name and database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: OrderBy method definition\nDESCRIPTION: Shows the function definition for the orderBy method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Document PHP\nDESCRIPTION: Inserts a new document into the store. This function accepts an associative array representing the document data and returns the inserted document with a newly generated unique '_id' field. The input is an array representing the document data, and the output is an array containing the inserted document with the assigned '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Algorithm Hits - PHP\nDESCRIPTION: Shows how to set the search algorithm to 'hits' using the `Query::SEARCH_ALGORITHM` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"]\n```\n\n----------------------------------------\n\nTITLE: Find Document by ID PHP\nDESCRIPTION: Retrieves one document by its _id. Very fast because it finds the document by its file path. Returns an array containing the document if found, or null otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Group By\nDESCRIPTION: Groups documents using one or multiple fields. Parameters: `$groupByFields` (array) - an array of field names to group by, `$counterKeyName` (string, optional) - the name of the key to store the count in, `$allowEmpty` (bool, optional) - allows empty groups. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting and Retrieving Deleted Documents PHP\nDESCRIPTION: This snippet deletes users named \"Joshua Edwards\" and retrieves the deleted documents using `Query::DELETE_RETURN_RESULTS`. The `$deletedUsers` variable will contain an array of the deleted user documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache in SleekDB using PHP\nDESCRIPTION: This PHP code snippet defines the `delete()` function, which removes the cache file associated with the current query in SleekDB.  No parameters are needed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in SleekDB\nDESCRIPTION: This code retrieves all documents from the 'news' store. It optionally allows sorting, limiting, and offsetting the results. The function returns an array of documents or an empty array if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB Manually (PHP)\nDESCRIPTION: This PHP code snippet includes the SleekDB Store class in your PHP script.  It requires that you have manually downloaded and extracted the SleekDB library into your project directory.  The path to `Store.php` should reflect the location of the SleekDB files within your project.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with limit()\nDESCRIPTION: This PHP code uses the `limit` method to retrieve only the first 10 users.  Regardless of how many users match the query, the result will contain a maximum of 10 documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Set Skip Amount\nDESCRIPTION: Sets the number of records to skip at the beginning of the result set. Takes an integer representing the skip amount and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: select Method Definition PHP\nDESCRIPTION: This code snippet defines the `select` method, which allows specifying which fields to retrieve from the database, similar to the SELECT clause in SQL.  It supports multiple `select()` calls as an object chain.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID Example 3 in SleekDB PHP\nDESCRIPTION: Removes a nested field ('address.street') from a user document with a specific ID. It requires the `$userStore` object to be initialized and an existing document with the given ID. The 'address' field must exist as an array or object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Exists\nDESCRIPTION: Check if data is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Joining stores - Example 1\nDESCRIPTION: This example demonstrates how to join 'users' and 'comments' stores using the `join()` method.  It shows two ways to define the join function: one that returns the result of a sub-query directly, and another that returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n\n$users = $usersStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n\n// or\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore){\n    // returns Querybuilder\n    return $commentStore\n      ->createQueryBuilder()\n      ->where([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: disableCache() Method Definition in PHP\nDESCRIPTION: This snippet displays the function definition for the `disableCache` method in PHP. Calling this method on a query builder instance will disable caching for that specific query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Query Constructor PHP\nDESCRIPTION: Creates a new Query object. (Internally it creates a new Cache object). queryBuilder (QueryBuilder):  The QueryBuilder object that defines the query to be executed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: orWhere() Example 3: Complex Nested Conditions in PHP\nDESCRIPTION: This example shows complex, nested conditions using `orWhere()`, similar to Example 3 for `where()`. The structure allows defining intricate query logic based on combinations of AND and OR operators, filtering users based on status, location, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Skip Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `skip` method within the SleekDB QueryBuilder, which skips a specified number of documents from the beginning of the result set. It takes an integer representing the number of documents to skip and returns the QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Saving content to the cache\nDESCRIPTION: This snippet demonstrates how to save content to the cache file for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache With No Lifetime in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `deleteAllWithNoLifetime()`. It deletes all cache files that have no specified lifetime (null) within the current store. This is useful for clearing caches that should be invalidated on updates.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token PHP\nDESCRIPTION: This method retrieves the cache token. It returns the token as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Or Where Condition\nDESCRIPTION: Add or-where conditions to filter data. Accepts an array of conditions. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: limit() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `limit()` method within the SleekDB QueryBuilder. It limits the number of documents returned.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction limit($limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Limit Records\nDESCRIPTION: Sets the maximum number of data records to return (limit).  Accepts an integer representing the maximum number of records. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Check Exists PHP\nDESCRIPTION: Checks if any data is found matching the query criteria. Returns true if at least one document matches, false otherwise.  No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Or Where Condition PHP\nDESCRIPTION: Adds \"or where\" conditions to filter data. $conditions: An array of conditions for the or where clause.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer (Shell)\nDESCRIPTION: This command installs the latest stable version of SleekDB using Composer, a dependency manager for PHP. It adds SleekDB to your project's dependencies and automatically updates the `composer.json` file.  Make sure composer is installed and configured to be used in your system.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Get Query PHP\nDESCRIPTION: Returns a new `Query` object which can be used to execute the built query. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache for a Query in PHP\nDESCRIPTION: This snippet demonstrates how to regenerate the cache for a query in PHP using the `regenerateCache()` method. This forces a fresh query execution and updates the cache, regardless of its current lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Add Not In Condition\nDESCRIPTION: Adds a 'not in' condition to the query, filtering data where a specified field's value is not within a provided set of values. Takes a field name and an array of values as input, and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Query Object\nDESCRIPTION: Returns a new `Query` object based on the current state of the QueryBuilder.  This `Query` object can then be used to execute the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Example JSON Document Structure for SleekDB\nDESCRIPTION: This JSON snippet illustrates the structure of a document that SleekDB can query based on nested properties, as demonstrated in the PHP example.  It shows how data is organized within a nested structure, enabling queries to target specific values within the nested objects. No external dependencies are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Builder Search Function (PHP)\nDESCRIPTION: This PHP code snippet shows the signature of the `search()` method for the SleekDB Query Builder. It takes an array or string of fields to search, a query string, and an optional array of options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Setting Data Directory Path in SleekDB\nDESCRIPTION: This PHP snippet defines the data directory path where SleekDB will store its data. It uses the `__DIR__` magic constant to create an absolute path relative to the current file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This snippet shows how to create a QueryBuilder instance using the `createQueryBuilder()` method of the `Store` class. The QueryBuilder is used to prepare queries before execution.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Getting the First Record with SleekDB Query\nDESCRIPTION: This code shows how to retrieve the first document that matches a specified criteria using the `first()` method of the SleekDB Query object. This is more efficient than fetching all records when only one is needed. The `orderBy` function is not supported using this method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID\nDESCRIPTION: Removes specified fields from one document in the store by its `_id`.  Parameters: `$id` - the ID of the document to modify, `$fieldsToRemove` (array) - an array of field names to remove. Returns the updated document as an array, or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Getting the cache path\nDESCRIPTION: This snippet shows how to retrieve the path to the cache folder for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache\nDESCRIPTION: Re-generates the cache for the current query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet demonstrates how to group documents in a SleekDB store using the QueryBuilder. It initializes the SleekDB environment and sets up a query to group documents by age and peopleCount, applying a having clause and ordering. It requires the SleekDB library and autoloads dependencies.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents with QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This code snippet retrieves documents from a SleekDB store using the QueryBuilder. It demonstrates setting up the store configuration, creating a Store instance, building the query with `where()`, `orderBy()`, `limit()`, and `skip()` methods, and then fetching the results.  The output is then encoded to json.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n\n```\n\n----------------------------------------\n\nTITLE: Nested Join: Users, Articles, Comments (SleekDB PHP)\nDESCRIPTION: This code snippet showcases a nested join operation in SleekDB. It retrieves users along with their created articles, and each article is joined with its comments.  It demonstrates how to use the join() method within another join's subquery. It initializes three stores ('users', 'articles', 'comments') and creates a nested join structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache PHP\nDESCRIPTION: This code snippet shows how to force a cache regeneration for a specific query using the regenerateCache() method. This ensures the latest data is fetched and cached, regardless of the cache's current lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using the orWhere() Method in PHP\nDESCRIPTION: This snippet shows the function signature of the `orWhere()` method, used to add `OR` conditions to the query.  Like `where()`, multiple conditions within `orWhere()` are connected with an `AND` operator.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to create a new store in SleekDB using the `store` static method. It requires the SleekDB library and a data directory to be defined. The `$newsStore` variable will hold an object that can be used to interact with the 'news' store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/stores.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = \\SleekDB\\SleekDB::store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Multiple orWhere() conditions in PHP\nDESCRIPTION: This example retrieves all users that have `products.totalSaved > 10 OR (products.totalBought > 20 AND products.shipped = 1) OR totalBought = 0`. It demonstrates chaining `orWhere` with a combination of single conditions and AND grouped conditions using `where`\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Users in PHP with SleekDB\nDESCRIPTION: This example shows how to update multiple users using the `update()` method. It retrieves users with the name 'Josh', changes their names to 'Luke Bowman', and then updates all the modified users in a single operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: getCachePath() Method in PHP\nDESCRIPTION: This code snippet represents the `getCachePath` method, which returns the path to the cache directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Delete Document by ID PHP\nDESCRIPTION: Deletes one document by its _id. Very fast because it deletes the document by its file path. Returns a boolean indicating the success of the deletion operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Defining Database Directory Path in PHP\nDESCRIPTION: This code snippet defines the path to the database directory using the __DIR__ constant to get the current directory and concatenating it with '/myDatabase'. This path will be used to store SleekDB data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor\nDESCRIPTION: Creates a new Cache object, which manages caching for queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Lifetime - PHP\nDESCRIPTION: This code snippet defines the method for setting the cache lifetime. It takes an integer representing the lifetime in seconds or null to specify no lifetime. It returns the Cache object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime\nDESCRIPTION: Retrieves the cache lifetime for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Query Offset with Skip and Limit in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to use `skip()` and `limit()` together to achieve query offset, which can be useful for pagination. It filters users based on age, skips the first 15 records, and limits the result to the next 5 records. Requires a SleekDB database instance `$usersDB`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/skip-limit.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $usersDB\n    ->where( 'age', '>=' , 18 )\n    ->skip( 15 )\n    ->limit( 5 )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Lifetime = Null in PHP\nDESCRIPTION: This code demonstrates using the `useCache()` method to enable caching with a `null` lifetime. This means the cache will be invalidated upon any document update, deletion, or insertion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 1 PHP\nDESCRIPTION: This example demonstrates how to use the `useCache()` method without specifying a lifetime, resulting in caching until the data is modified. It retrieves a list of active users, caches the result, inserts a new user, invalidating the cache, and then retrieves the list again.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents by Criteria\nDESCRIPTION: Deletes one or multiple documents based on specified criteria. The `$returnOption` parameter controls what is returned after deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Get Token Method PHP\nDESCRIPTION: This snippet shows the definition of the `getToken` method in PHP.  It returns the unique token that identifies the query for caching purposes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: getQuery Method Definition PHP\nDESCRIPTION: This code snippet defines the `getQuery` method, which is used to retrieve the Query object from the QueryBuilder. The Query object is then used to execute the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Select with GroupBy - SQL\nDESCRIPTION: SQL statement selecting age, and the SUM of follower aliased as followerSum, then grouping by age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT age, SUM(follower) as followerSum GROUP BY age;\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token PHP\nDESCRIPTION: Gets the cache token for the current query. This token is used to identify the cache file. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_49\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Skipping Data Records in SleekDB\nDESCRIPTION: This PHP function sets the number of data records to skip (offset).  It takes an integer or string as input. Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int|string $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the cache token\nDESCRIPTION: This snippet demonstrates how to retrieve the cache token used as the filename to store the cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: where Example 2 - Single where call with array of conditions inline in PHP\nDESCRIPTION: This snippet shows how to use a single `where` call with an array of conditions to filter users based on `products.totalSaved` and `products.totalBought`.  This is an inline example.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache Token in SleekDB\nDESCRIPTION: This snippet shows the function definition for `getToken()`, which returns the unique token for the current query. This token is used to save and retrieve the associated cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Saving content to cache in PHP\nDESCRIPTION: This code snippet demonstrates how to save content for the current query as a cache file. The `set` method accepts an array of content to be saved in the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nset(array $content)\n```\n\n----------------------------------------\n\nTITLE: notIn Method Definition in PHP\nDESCRIPTION: This snippet shows the method signature for `notIn()`, used to filter data based on whether a field's value is NOT present in a given array of values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document by ID - PHP\nDESCRIPTION: This code snippet demonstrates the method for deleting a document based on its unique _id.  The function takes the ID of the document to be deleted as an integer and returns a boolean indicating success or failure. Very fast due to direct file deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Having Condition\nDESCRIPTION: Adds a \"having\" condition to filter grouped data. Used after `join()`, `search()`, `select()` and `groupBy()` is applied.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Ordering Results with SleekDB QueryBuilder in PHP\nDESCRIPTION: This code snippet sorts the results of a SleekDB query using the `orderBy()` method. It sorts users by their name in ascending order. The `$criteria` parameter is an array where keys are field names and values are sort orders (`asc` or `desc`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: OrderBy Result Example in SleekDB (PHP)\nDESCRIPTION: Provides an example result of using the `orderBy` method, showing a sorted array of users with their `_id` and `name` fields. This illustrates the output structure after applying the `orderBy` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n[[\"_id\" => 13, \"name\" => \"Anton\"], [\"_id\" => 2, \"name\" => \"Berta\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Country and Total Saved (notIn) in PHP\nDESCRIPTION: This code snippet extends the previous example by adding another `notIn()` condition. It retrieves users whose country is not in [\"IN\", \"KE\", \"OP\"] AND whose `products.totalSaved` is not in [100, 150, 200]. It demonstrates how to chain multiple `notIn()` calls for different fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_76\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Complex grouping and aggregation with SleekDB\nDESCRIPTION: This PHP snippet demonstrates complex grouping and aggregation using `select`, `where`, `groupBy`, and `orderBy` methods. It selects category, subcategory, productAmount, and the sum of views (aliased as views), groups the results by category and subcategory, orders the results by category (ascending) and subcategory (descending), and returns document data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \n    \"Category\" => \"category\", \n    \"subcategory\", \n    \"productAmount\", \n    \"views\" => [\"SUM\" => \"views\"] \n  ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy(\n    [\"category\", \"subcategory\"],\n    \"productAmount\"\n  )\n  ->orderBy([\"category\" => \"ASC\", \"subcategory\" => \"DESC\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering grouped documents in PHP\nDESCRIPTION: This code demonstrates how to filter grouped documents. The `having` method accepts an array of criteria and returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Nested Query (JSON)\nDESCRIPTION: This JSON snippet illustrates the data structure that the SleekDB query targets. It shows how the nested 'post.author.role' property is accessed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with QueryBuilder in SleekDB\nDESCRIPTION: This PHP function performs a full-text search against one or more fields using the QueryBuilder. It accepts the field(s) to search, the query string, and search options. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Token in SleekDB\nDESCRIPTION: This PHP function retrieves the cache token used as the filename for the cache file. It uniquely identifies the cached data for the query. It returns the cache token as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Remove Fields from Documents\nDESCRIPTION: Removes specified fields from one or multiple documents in a SleekDB database based on a given query using the `removeFields()` method.  Requires an existing Query object and an array of field names to remove. Returns updated documents on success or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Getting a Query object from QueryBuilder in PHP\nDESCRIPTION: This code demonstrates how to retrieve a `Query` object from a `QueryBuilder` instance. The `getQuery` method returns a new `Query` object that can be used to execute the query built using the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Create Query Builder PHP\nDESCRIPTION: This method returns a new `QueryBuilder` object, which is used to construct database queries. It is part of the `Store` class and is the starting point for building complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Keeping Query Object in SleekDB (PHP)\nDESCRIPTION: This example demonstrates how to keep a `Query` object to perform multiple operations on the same set of conditions. It creates a `QueryBuilder`, adds `where` clauses, gets the `Query` object, fetches data, updates the matched documents using the same `Query` object, and then fetches the updated data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/advanced.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching all documents from SleekDB\nDESCRIPTION: The `findAll()` method retrieves all documents from a specified SleekDB store. It returns an array containing all documents if any exist, otherwise, it returns an empty array. The method requires no parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: notin() Method Signature in PHP\nDESCRIPTION: This code snippet shows the function signature of the `notIn()` method in PHP.  It accepts a string `$fieldName` representing the field to check and an array `$values` containing the values to exclude. It returns a `QueryBuilder` instance, enabling method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_74\n\nLANGUAGE: PHP\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with multiple in()\nDESCRIPTION: This PHP code demonstrates using multiple `in` methods chained together to retrieve users based on both country and age. It effectively filters users whose country is in the first array AND whose age is in the second array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Removing fields from documents\nDESCRIPTION: This snippet shows how to remove specified fields from documents that match the current query. It takes an array of field names to remove.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Getting the database path in PHP\nDESCRIPTION: This code snippet retrieves the path to the database folder. The `getDatabasePath` method returns a string representing the path to the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID\nDESCRIPTION: Returns the ID of the last inserted document in the store. Returns an integer representing the last inserted ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Numeric function MIN in PHP\nDESCRIPTION: Demonstrates how to use the `MIN` numeric function within the `select` method to retrieve the minimum value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"MIN\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache\nDESCRIPTION: Re-generate the cache for the query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search with search - PHP\nDESCRIPTION: This PHP code demonstrates how to perform a full-text like search on a specific field using the SleekDB Query Builder. It searches the 'content' field for the keyword \"SleekDB\" in the 'articleQueryBuilder'. Dependencies include the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$articles = $articleQueryBuilder\n  ->search(\"content\", \"SleekDB\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Cache\nDESCRIPTION: Delete cache file/s for current query. Void return.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to disable caching for a specific query using the `disableCache()` method. This is useful when you want to bypass the cache and retrieve the latest data from the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Store PHP\nDESCRIPTION: This method deletes the entire store and wipes all data and cache associated with it. It returns a boolean indicating whether the deletion was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: deleteAllWithNoLifetime() method in PHP\nDESCRIPTION: Describes the `deleteAllWithNoLifetime()` method of the Cache class. It deletes all cache files within the current store that have no specified lifetime (i.e., a null lifetime). It takes no parameters and has no return value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Delete Cache Method PHP\nDESCRIPTION: This snippet shows the definition of the `delete` method in PHP. It deletes the cache file associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor\nDESCRIPTION: Creates a new QueryBuilder object, which is used for constructing complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Find Document By ID PHP\nDESCRIPTION: This method retrieves a document by its unique ID (_id). It is optimized for speed because it directly accesses the document by its file path. It returns the document as an array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\n----------------------------------------\n\nTITLE: useCache() Function Definition PHP\nDESCRIPTION: Defines the `useCache` function, which activates caching for a specific query. It accepts an optional integer parameter `$lifetime` to define the cache lifetime in seconds. Returns the QueryBuilder instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content PHP\nDESCRIPTION: Caches content for the current query. Takes the content as an array. Returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Using useCache() with Infinite Lifetime in PHP\nDESCRIPTION: This snippet illustrates the usage of `useCache()` with a lifetime of 0, representing infinite caching.  The results will be cached indefinitely until the cache is manually cleared or regenerated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SQL GroupBy Example\nDESCRIPTION: Example SQL statement with `GROUP BY` clause.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: Filtering with `nestedWhere` (deprecated) in PHP\nDESCRIPTION: This PHP snippet uses the deprecated `nestedWhere` method to filter users based on product totals, name, and age. It demonstrates how to construct complex queries using nested arrays to define AND and OR conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content PHP\nDESCRIPTION: Caches content for the current query. content (array): The data to cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Set Order By\nDESCRIPTION: Sets the sort order for the result set. Parameters: `$criteria` (array) - an array specifying the fields and directions to sort by. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: notIn() Method Signature PHP\nDESCRIPTION: Defines the signature of the notIn() method in PHP. It takes a field name (string) and an array of values as input, and returns a QueryBuilder object. This method is used to filter out documents where the specified field's value is present in the provided array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using notIn() Clause - PHP\nDESCRIPTION: Shows the usage of the `notIn()` clause method in SleekDB. This method is the opposite of `in()`, filtering out documents where a field's value is present in the given array. Multiple `notIn()` calls can be chained for different fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/release-notes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->notIn('country', ['IN', 'KE', 'OP'])\n    ->notIn('products.totalSaved', [100, 150, 200])\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: get() Method in PHP\nDESCRIPTION: This code shows the `get` method, which retrieves the content of the cache file associated with the current query's token. It returns either an array containing the cached content, or `null` if no cache file is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Getting the cache token in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the cache token used as the filename to store the cache file. The `getToken` method returns a string representing the cache token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache\nDESCRIPTION: Delete all cache files for current store. Void return.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in SleekDB\nDESCRIPTION: This PHP function constructs a new QueryBuilder object.  It requires a Store object as a parameter, which the QueryBuilder will operate on.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Nested Property Query\nDESCRIPTION: Illustrates the JSON structure that corresponds to the `where()` clause example, showing how SleekDB accesses nested data. This is the example nested JSON structure that would trigger the above query to work correctly.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/features.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Join Function Definition (SleekDB, PHP)\nDESCRIPTION: This snippet illustrates the signature of the `join()` method in SleekDB's QueryBuilder, which accepts a Closure and a string. The Closure `$joinFunction` is responsible for preparing and executing a subquery, while the string `$dataPropertyName` defines the name of the new property added to each document in the main query's result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token\nDESCRIPTION: Retrieves the cache token used as the filename to store the cache file. Returns a string representing the cache token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Prioritize Position Algorithm Constant in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to use the `prioritize_position` search algorithm. It is similar to the prioritize algorithm, but also considers the position of the first search hit when generating a score. It shows the constant defined within the `Query` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize_position\"]\n```\n\n----------------------------------------\n\nTITLE: Selecting and Rounding with SleekDB Query Builder (SQL)\nDESCRIPTION: This SQL query selects the name and rounded price of active products, filtering results where the rounded price is between 500 and 1000. It uses the `ROUND` function and `HAVING` clause for filtering.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  name, \n  ROUND(price, 0) AS roundedPrice\nWHERE \n  active = true \nHAVING\n  roundedPrice > 500 AND roundedPrice < 1000;\n```\n\n----------------------------------------\n\nTITLE: Deleting the cache file(s)\nDESCRIPTION: This snippet demonstrates how to delete the cache file(s) for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Get Database Path\nDESCRIPTION: Gets the path to the database folder. Returns a string representing the database path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: Update Single User in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to update a single user in SleekDB. It first inserts a user, retrieves it by ID, modifies a property, and then updates the user in the store using the `update()` method. The `update()` method uses the `_id` to locate and update the correct document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/edit-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    'name' => 'Willard Bowman',\n    'products' => [\n        'totalSaved' => 0,\n        'totalBought' => 0\n    ],\n];\n\n//store the user\n$store->insert($user); // has _id = 1\n\n// retrieve a user\n$user = $userStore->findById(1);\n\n// update user\n$user[\"name\"] = \"Luke Bowman\";\n\n$userStore->update( $user ); // updates the user by using his _id\n```\n\n----------------------------------------\n\nTITLE: Updating User Status by ID PHP\nDESCRIPTION: Updates the status of a user with a specific ID. It calls `$userStore->updateById()` with the user ID and an array containing the 'status' field to be updated to 'active'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Defined Lifetime in PHP\nDESCRIPTION: This code shows how to use the `useCache()` method with a specified lifetime in seconds. In this example, the cache lifetime is set to 120 seconds (2 minutes).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Checking Existence with SleekDB Query\nDESCRIPTION: This snippet illustrates how to check if a document exists based on a specific condition using the `exists()` method of the SleekDB Query object.  This is more efficient than using `fetch` to verify existence.  It returns a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Delete Store\nDESCRIPTION: Deletes a store and wipes all the data and cache it contains. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Disabling caching for a query in PHP\nDESCRIPTION: This code snippet disables caching for the current query. The `disableCache` method returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in PHP\nDESCRIPTION: This snippet shows how to disable caching for a specific query using the `disableCache()` method. Even if store-wide caching is enabled, this query will bypass the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance in PHP\nDESCRIPTION: Creates an instance of the QueryBuilder class, which is used to construct queries against a SleekDB store.  This is the first step in performing any database operation. It requires an existing $userStore object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Prioritize Position Algorithm (PHP)\nDESCRIPTION: Defines the 'prioritize_position' search algorithm in SleekDB.  This algorithm also considers the position of the first search hit when generating a score.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize_position\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing a new QueryBuilder object\nDESCRIPTION: This snippet shows how to create a new QueryBuilder object, associated with a specific Store. The QueryBuilder is used to construct queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Example of useCache() with a Specific Lifetime in PHP\nDESCRIPTION: This example shows how to enable caching with a specific lifetime of 120 seconds (2 minutes). The query results will be cached for this duration.  Requires an existing QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Executing the query and fetching results\nDESCRIPTION: This snippet shows how to execute the query and retrieve the results as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Get Store (Internal)\nDESCRIPTION: Get the store object used to create the query builder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Delete Store\nDESCRIPTION: Deletes the entire store, including all data and cache. Returns true on success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: In Usage Example 2 PHP\nDESCRIPTION: Demonstrates using multiple `in` methods chained together in SleekDB to retrieve users who are from specific countries and also have specific ages.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store\nDESCRIPTION: This snippet shows how to delete a SleekDB store using the `deleteStore()` method. It removes the store and all its data and cache. It assumes that `$userStore` has been initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Method PHP\nDESCRIPTION: This snippet shows the definition of the `deleteAll` method in PHP. It deletes all cache files associated with the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Cache object\nDESCRIPTION: This snippet shows how to create a new Cache object, associated with a specific Query. It takes a Query object, a cache token array, and a cache lifetime as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content\nDESCRIPTION: Retrieves the content of the cache file. Returns the cached content as an array or null if the cache file does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Set Order By PHP\nDESCRIPTION: Sets the sort order. Takes an array of criteria to sort by. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache object from Query in PHP\nDESCRIPTION: This code demonstrates how to retrieve the `Cache` object associated with the `Query` object.  The `getCache` method returns the `Cache` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: get() - Get Cache Content - PHP\nDESCRIPTION: Retrieves the cached content for the current query based on its unique token.  Returns an array containing the cached content if found, or null if no cache file exists.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for a Query in PHP\nDESCRIPTION: This snippet shows how to disable caching for a specific query in PHP using the `disableCache()` method. This is useful when caching is enabled globally but should be bypassed for certain queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Single Document in SleekDB\nDESCRIPTION: This PHP snippet demonstrates how to update or insert a single document into a SleekDB store using the `updateOrInsert` method. It includes examples with and without specifying an `_id`, and with the `$autoGenerateIdOnInsert` parameter set to `true` and `false` to control the auto-generation of the `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Get Store Name PHP\nDESCRIPTION: Retrieves the name of the store. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Update Documents (Query)\nDESCRIPTION: Updates one or multiple documents based on the current query.  The `$returnUpdatedDocuments` parameter specifies whether to return the updated documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Excluding fields from the result in SleekDB PHP\nDESCRIPTION: Demonstrates how to use the `except()` method to exclude specific fields from the result.  This is useful for hiding sensitive data or reducing the size of the response. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: get() method in PHP\nDESCRIPTION: Describes the `get()` method of the Cache class, which retrieves the content of the cache file for the current query. The method takes no parameters and returns either an array containing the cached content, or null if no cache file is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Update Documents PHP\nDESCRIPTION: Updates one or more documents in the store. This function accepts an array of updatable data, usually including the '_id' for identifying the documents to update. updatable (array): An array containing the data to update. It should include the '_id' of the document(s) to be updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Initializing a Query object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new `Query` object. The constructor accepts a `QueryBuilder` object as a dependency. Internally it creates a new `Cache` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: SleekDB Delete By ID Function Signature\nDESCRIPTION: This snippet showcases the `deleteById()` function definition in SleekDB. It takes either an integer or a string as the ID and returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Document\nDESCRIPTION: Creates/Inserts a new document in the store or updates an existing one. Returns the inserted/updated document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction updateOrInsert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Field (address.street)\nDESCRIPTION: Example of removing a nested field ('address.street') from documents. Requires a QueryBuilder instance and assumes the existence of an 'address' field containing a 'street' subfield.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Find Documents by Criteria\nDESCRIPTION: Retrieves one or multiple documents based on the provided criteria. Allows ordering, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: notin() Function Signature PHP\nDESCRIPTION: This code snippet shows the function signature for the `notIn()` method in SleekDB. It takes a field name (string) and an array of values as input and returns a QueryBuilder instance, enabling method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents with SleekDB QueryBuilder\nDESCRIPTION: This code snippet demonstrates how to group documents in a SleekDB store using the `QueryBuilder` class. It filters documents by location, selects specific fields (age, peopleCount) and calculates the sum of followers, groups the results by age and peopleCount, applies a having condition, orders the groups, applies pagination (limit, skip), and then fetches the grouped results, outputting them as JSON. The SleekDB library must be available.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Find All Documents\nDESCRIPTION: Retrieves all documents from the store.  Parameters: `$orderBy` (array, optional) - an array specifying the order of the results, `$limit` (int, optional) - the maximum number of documents to return, `$offset` (int, optional) - the number of documents to skip. Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Get Store Name\nDESCRIPTION: Gets the name of the store. Returns a string representing the store's name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB Store object in PHP. It requires the SleekDB library to be installed and autoloaded. The constructor takes the store name ('users' in this case) and the path to the database directory as arguments. This store object will be used for performing delete operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Search Method Usage PHP\nDESCRIPTION: Demonstrates how to use the `search` method to find all articles that include the word \"SleekDB\" in their content. The example shows how to chain the `search` method with `getQuery()` and `fetch()` to retrieve the desired data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$articles = $articleQueryBuilder\n  ->search(\"content\", \"SleekDB\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Distinct Values\nDESCRIPTION: Returns distinct values for the specified fields. Accepts a string or array of field names. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Example JSON Document for SleekDB (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of a document that can be queried using the PHP code provided. The JSON structure contains nested 'post', 'author', and 'role' properties. This shows the schema-free nature of SleekDB, where data can be stored with nested attributes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents using QueryBuilder - SleekDB (PHP)\nDESCRIPTION: This code shows how to retrieve documents from SleekDB using the QueryBuilder. It configures the store, creates a QueryBuilder instance, applies a where condition, orders the results, and applies pagination. Finally, the resulting documents are outputted as a JSON response.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields in SleekDB QueryBuilder\nDESCRIPTION: This PHP function specifies which fields to exclude from the query results. It takes an array of field names to exclude. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Check if Data Exists\nDESCRIPTION: Checks if any data matching the query criteria exists. Returns a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Delete Store PHP\nDESCRIPTION: Deletes the entire store, including all data and cache files. This is a destructive operation. No input parameters are needed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: This code snippet initializes a new SleekDB store named \"news\" within the specified data directory. If the store doesn't already exist, it will be created automatically. An optional configuration array can be passed as a third parameter to customize the store's behavior.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: disableCache() Function Definition PHP\nDESCRIPTION: The disableCache method disables the built-in caching solution on a query by query basis. By default, caching is enabled store-wide.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version\nDESCRIPTION: This command installs the development version of SleekDB using Composer. Use with caution as the API may not be consistent and documentation may be lacking. Only install this if you have a specific reason for using the dev branch.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache in SleekDB\nDESCRIPTION: This PHP function deletes all cache files for the current store. Use it carefully to avoid performance issues.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Counting documents in the store\nDESCRIPTION: This snippet demonstrates how to get the total number of documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Getting the Search Options\nDESCRIPTION: This snippet demonstrates how to retrieve the store's search options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: disableCache() Example PHP\nDESCRIPTION: This example demonstrates how to use the `disableCache()` method. It retrieves a list of 20 active users without using the cache, regardless of store-wide caching settings.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: deleteAll() Method in PHP\nDESCRIPTION: This snippet represents the `deleteAll` method, responsible for deleting all cache files within the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Querying with complex 'where' conditions (Example 3) PHP\nDESCRIPTION: Demonstrates complex nested 'where' conditions using 'AND' and 'OR' operations to filter data. Retrieves users with status 'premium' OR (city is 'london' OR 'new york') AND (age is between 16 and 20 OR age is greater than 30).  Requires the SleekDB library and an initialized `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Document with Criteria using findOneBy in PHP\nDESCRIPTION: The `findOneBy` method fetches a single document from a SleekDB store based on specified criteria. This method returns the first document that matches the criteria, or null if no documents match.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents Using QueryBuilder in SleekDB\nDESCRIPTION: This snippet demonstrates how to group documents in SleekDB using the QueryBuilder. It initializes a store, creates a query with a `where` clause for filtering, selects specific fields, groups the results by age, defines a having clause and returns the grouped results.  Requires the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([ \"location\", \"IN\", [\"new york\", \"london\"] ])\n  ->select([ \"age\", \"peopleCount\", \"followerAmount\" => [\"SUM\" => \"followers\"] ])\n  ->groupBy([\"age\"], \"peopleCount\", true)\n  ->having([ [\"followerAmount\", \">\", 100], \"OR\", [\"age\", \"<\", 16] ])\n  ->orderBy([\"followerAmount\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache File in SleekDB\nDESCRIPTION: This snippet shows the function definition for `delete()`, which deletes the cache file associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor\nDESCRIPTION: Create a new Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $query, string $storePath)\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Object in SleekDB\nDESCRIPTION: This PHP function returns the Cache object associated with the Query object. This function provides access to the cache functionality for the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Document by Criteria with findOneBy in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a single document from the 'news' store based on specified criteria. It uses the `findOneBy()` method, which returns one document that matches the criteria or null if no document matches.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/fetch-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content in PHP\nDESCRIPTION: Retrieves the content of the cache file associated with the current query. Returns the cached data as an array, or null if no cache file is found.  No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in PHP\nDESCRIPTION: This code snippet demonstrates how to fetch all documents from a SleekDB store using the `findAll()` method. It retrieves all news articles from the `$newsStore` store. It returns an array of documents or an empty array if no documents are found. The method supports optional parameters for ordering, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object\nDESCRIPTION: Returns the `Cache` object associated with the query. Returns a Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_52\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Cache\nDESCRIPTION: Get the `Cache` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Retrieve Documents - SleekDB Store (PHP)\nDESCRIPTION: This snippet shows how to retrieve documents from a SleekDB store using the findBy() method. It defines a where condition, pagination parameters, and orders the results by _id in descending order. The retrieved documents are then outputted as a JSON object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents Example PHP\nDESCRIPTION: Shows how to insert multiple documents into a SleekDB store using the `insertMany` method. It prepares an array of user arrays and then inserts them into the `$userStore`. The returned array, which contains all the inserted user arrays with their generated `_id`s, is assigned back to the `$users` variable.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Prepare users data.\n$users = [\n    [\n        'name' => 'Russell Newman',\n        'products' => [\n            'totalSaved' => 5,\n            'totalBought' => 3\n        ],\n        'location' => [\n            'town' => 'Andreas Ave',\n            'city' => 'Maasdriel',\n            'country' => 'England'\n        ]\n    ],\n    [\n        'name' => 'Willard Bowman',\n        'products' => [\n            'totalSaved' => 0,\n            'totalBought' => 0\n        ],\n    ],\n    [\n        'name' => 'Tommy Mendoza',\n        'products' => [\n            'totalSaved' => 172,\n            'totalBought' => 54\n        ],\n    ],\n    [\n        'name' => 'Joshua Edwards',\n        'phone' => '(382)-450-8197'\n    ]\n];\n// Insert all data.\n$users = $userStore->insertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Lifetime in SleekDB with PHP\nDESCRIPTION: This PHP code snippet demonstrates the `setLifetime()` function for setting the lifetime of a cache in SleekDB.  The lifetime can be an integer representing seconds, 0 for infinite lifetime, or null for no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Primary Key\nDESCRIPTION: Returns the name of the field used as the primary key. Returns a string representing the primary key field name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: Update Method Signature in SleekDB (PHP)\nDESCRIPTION: This snippet shows the signature of the `update()` method in the `Store` class. It takes an array of updatable documents as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/edit-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Storing Date as String in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to store a date as a string when inserting data into a SleekDB store. It creates a new article array with a 'releaseDate' field formatted as a string and inserts it into the 'news' store. Requires SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function with External Variable - PHP\nDESCRIPTION: Demonstrates using external variables within a custom select function (closure) in SleekDB. This example uses the `use` keyword to access the `$nameSeparator` variable within the closure to concatenate 'forename' and 'surname'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$nameSeparator = ', ';\n\n$fullNameSelectFunction = function($user) use ($nameSeparator){\n  return $user['forename'] . $nameSeparator . $user['surname'];\n};\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: getCachePath Method in PHP\nDESCRIPTION: This code defines the `getCachePath()` method of the Cache class. It returns the absolute path to the cache directory used by SleekDB for storing cache files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by Criteria in PHP\nDESCRIPTION: This code demonstrates how to delete documents from a SleekDB store based on specified criteria using the `deleteBy()` method. The `$criteria` parameter defines the conditions for deletion. It also shows how to specify the return option using constants from the `Query` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: getQuery() Method Definition PHP\nDESCRIPTION: This code snippet shows the method signature for `getQuery()`.  It is used to retrieve the `Query` object from the `QueryBuilder` so that the query can be executed. The function returns a `Query` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Find Document by Criteria\nDESCRIPTION: Retrieves one or multiple documents based on specified criteria. Supports ordering, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path\nDESCRIPTION: Retrieves the path to the cache folder of the current store. Returns a string representing the cache path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Object using getCache() - PHP\nDESCRIPTION: Retrieves the Cache object associated with a query. This is the starting point for interacting with the cache functionality for a specific query. It's important to note that the Cache class is primarily intended for internal use.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB using Composer (Shell)\nDESCRIPTION: This command installs SleekDB using Composer. It adds SleekDB as a dependency to your project, making it available for use. Make sure to run this command from the root directory of your project where the composer.json file is located.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Keeping Query Object - PHP\nDESCRIPTION: This example demonstrates how to keep a `Query` object to perform multiple operations on the same query results.  It fetches data, updates the matched documents, and then fetches the data again, all using the same `Query` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetch Results PHP\nDESCRIPTION: This method executes the query and retrieves the results. It returns an array of documents that match the query criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB Store\nDESCRIPTION: This PHP snippet inserts a news article (represented as an associative array) into the 'news' store.  The `$article` array contains the data to be inserted, and the `insert` method of the `SleekDB\\Store` object is used to perform the insertion. The returned `$results` variable contains the inserted data, including a unique `_id` property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime (Internal)\nDESCRIPTION: This method is used internally. Returns the store wide default cache lifetime. Returns an integer or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: String Function POSITION in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `POSITION` string function within the `select()` method of the QueryBuilder. It is used to get the position of a sub string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"POSITION\" => [SUBSTRING, \"fieldName\"]], ...]\n```\n\n----------------------------------------\n\nTITLE: Delete Documents (Query)\nDESCRIPTION: Deletes matched documents based on the current query. The `$returnOption` parameter controls what is returned after deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Select and OrderBy - SQL\nDESCRIPTION: SQL equivalent for next code snippet, using GROUP BY statement, aggregation SUM function and ORDER BY statement.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: Delete Documents by Criteria PHP\nDESCRIPTION: Deletes one or multiple documents based on the provided criteria.  The return option determines whether a boolean, an array, or null is returned indicating the success or affected documents.  Requires `Query::DELETE_RETURN_BOOL` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder PHP\nDESCRIPTION: Returns a new `QueryBuilder` object.  This object is used to construct complex queries with filtering, sorting, and joining capabilities for the data store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime PHP\nDESCRIPTION: Returns the store-wide default cache lifetime in seconds. Returns null if no default lifetime is set. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID\nDESCRIPTION: Returns the ID of the last document inserted into the store as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Hits Prioritize Algorithm Constant in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to use the `hits_prioritize` search algorithm. The score is based on the amount of search hits, but if multiple documents have the same amount of hits, the order of the given fields is taken into consideration. It shows the constant defined within the `Query` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits_prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: Get Store Path\nDESCRIPTION: Gets the path to the store (including store name). Returns a string representing the store path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: useCache() with Infinite Lifetime PHP\nDESCRIPTION: Retrieves and caches the result forever, for 20 active users. A lifetime of 0 indicates infinite caching.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching all documents in SleekDB\nDESCRIPTION: This function retrieves all documents from the specified SleekDB store. It accepts optional parameters for ordering, limiting, and offsetting the results. The function returns an array containing all documents or an empty array if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Cache - PHP\nDESCRIPTION: This code snippet demonstrates the method for regenerating the cache for the current query. This is useful when data has changed and the cache needs to be refreshed. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Reusing Query Object in SleekDB (PHP)\nDESCRIPTION: This example demonstrates how to reuse a Query object in SleekDB to perform multiple operations on the same query result. After defining the query with 'where' conditions, the code fetches data, updates the matched documents, and then fetches the data again. This avoids redundant queries when updating and retrieving data based on the same criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Lifetime in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to enable caching for a specific query using the `useCache()` method. It shows how to specify a cache lifetime (in seconds) or use the default behavior where the cache is invalidated on updates, deletes, and inserts. It showcases the use of caching with no lifetime specified, with a defined lifetime (120 seconds), and with infinite lifetime (0 seconds).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching One Document with Criteria in PHP\nDESCRIPTION: This code snippet retrieves a single document from the 'newsStore' based on the given criteria using the `findOneBy()` method. It returns the first document that matches the criteria, or null if no matching document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Multiple where Conditions with separate steps in PHP\nDESCRIPTION: This snippet shows multiple `where` conditions using separate steps for QueryBuilder creation, query preparation, and execution, using a single array for the where clause.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store Object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new `Store` object in SleekDB. It initializes a store named 'users' within a specified database directory.  The `use SleekDB\\Store;` statement imports the necessary class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder Object\nDESCRIPTION: Returns a new `QueryBuilder` object associated with the current store.  This allows for building complex queries using a fluent interface.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Query\nDESCRIPTION: Returns a new Query object. This object represents the built query and can be used to execute it.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder PHP\nDESCRIPTION: Creates a QueryBuilder instance from a user store. This is a prerequisite for the following examples.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() with SleekDB in PHP\nDESCRIPTION: This function regenerates the cache for a query, regardless of its lifetime. It fetches the data and updates the cache with the latest results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 2 (PHP)\nDESCRIPTION: This PHP code uses the deprecated `nestedWhere()` method to retrieve users who have \"premium\" status, live in \"london\", and are either between 16 and 20 or older than 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limit Method Usage PHP\nDESCRIPTION: Demonstrates how to use the `limit` method to retrieve just the first ten users. The example shows how to chain the `limit` method with `getQuery()` and `fetch()` to retrieve the desired data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find One Document By Criteria\nDESCRIPTION: Retrieves one document based on provided criteria. Accepts an array of criteria for filtering. Returns the document as an array, or `null` if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache PHP\nDESCRIPTION: This code snippet shows the definition of the `deleteAll()` method.  It deletes all cache files associated with the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Getting the Query Object in SleekDB\nDESCRIPTION: This snippet shows how to obtain a Query object from a QueryBuilder object using the `getQuery` method. The Query object is then used to execute database queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/query.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Content in SleekDB\nDESCRIPTION: This PHP function saves the provided content as a cache file for the current query. It takes an array `$content` to be cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents Using Store in SleekDB\nDESCRIPTION: This snippet shows how to retrieve documents from a SleekDB store using the `findBy()` method of the Store class. It sets up a store, defines a where condition to filter the results, and applies pagination. The resulting documents are then output as JSON. Requires the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$whereCondition = [\n  [\"location\", \"IN\", [\"new york\", \"london\"]],\n  \"OR\",\n  [\"age\", \">\", 29]\n];\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n// order by _id and limit result to 10\n$result = $userStore->findBy($whereCondition, [\"_id\" => \"DESC\"], $limit, $skip);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating documents with SleekDB (Example 2)\nDESCRIPTION: Updates a nested field (address.street) in SleekDB for documents where city equals london. It assumes `$userStore` object is an instance that provides `createQueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->update([ \"address.street\" => \"first street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Use Cache\nDESCRIPTION: Use caching for current query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Exclude Fields\nDESCRIPTION: Specifies the fields to exclude from the query result. Takes an array of field names as input and returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Updating Documents Using QueryBuilder in SleekDB\nDESCRIPTION: This code shows how to update documents in SleekDB using the QueryBuilder. It initializes a store, builds a query with a `where` clause and then updates all matching documents with a new value for the `status` field.  Requires the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->getQuery()\n  ->update([\"status\" => \"VIP\"]);\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n?>\n```\n\n----------------------------------------\n\nTITLE: Nested Join Example - SleekDB PHP\nDESCRIPTION: This example demonstrates a nested `join()` within a join sub-query to retrieve users, their created articles, and the comments on those articles.  The outer join retrieves articles written by the user, while the inner join (within the article join) fetches comments for each article using articleId. It utilizes `SleekDB\\Store` and expects `$dataDir` to be defined.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/join-stores.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Documents (Query)\nDESCRIPTION: Deletes matched documents. Parameters: `$returnOption` (int, optional) - specifies what to return after deleting documents. Returns a boolean, an array or an integer depending on the value of `$returnOption`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime PHP\nDESCRIPTION: This method retrieves the cache lifetime. It returns the lifetime in seconds as an integer, or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Skip Records\nDESCRIPTION: Sets the number of data records to skip (offset).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int|string $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using orWhere() Clause - PHP\nDESCRIPTION: Demonstrates the usage of the `orWhere()` clause method in SleekDB. This method allows for OR conditions in queries, similar to SQL. Multiple `orWhere()` calls can be chained together.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/release-notes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB->where( 'products.totalSaved', '>', 10 )\n    ->orWhere( 'products.totalBought', '>', 20 )\n    ->orWhere( 'products.shipped', '=', 1 )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer (Shell)\nDESCRIPTION: This command installs SleekDB as a dependency using Composer. It adds SleekDB to your project and configures autoloading. Ensure you are in your project's root directory where `composer.json` resides.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Setting the Sort Order - PHP\nDESCRIPTION: This code snippet demonstrates the method for setting the sort order of the query results. It takes an array of criteria, where keys are field names and values are the sort direction, as input. It returns the QueryBuilder for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cache Object - PHP\nDESCRIPTION: This code snippet showcases the constructor for creating a new Cache object. It requires a Query object and a store path as parameters. The constructor initializes the Cache object with the query and store path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $query, string $storePath)\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 1 SQL\nDESCRIPTION: SQL representation of the complex nested where statement example, filtering users based on product saves/bought counts and age, combined with name like conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object PHP\nDESCRIPTION: Gets the `Cache` object. Returns the `Cache` object associated with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store instance named 'newsStore'. It initializes the Store object with the store name 'news' and the directory path where the database files are stored.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Using regenerateCache() in PHP\nDESCRIPTION: This example shows how to use the `regenerateCache()` method to force a cache refresh. It first caches the result indefinitely, then regenerates the cache with a lifetime of 20 seconds, ensuring the latest data is fetched and cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Token\nDESCRIPTION: Retrieves the cache token used as the filename to store the cache file.  Returns a string representing the cache token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Prioritize Algorithm Constant in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to use the `prioritize` search algorithm. The order of the fields is a big part of the score. It shows the constant defined within the `Query` class.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime\nDESCRIPTION: Retrieve the cache lifetime for current query. Returns the cache lifetime as an integer or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Change Store Destination\nDESCRIPTION: Changes the destination of the store object to a new store name and database path.  Accepts an optional configuration array.  Returns the modified Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Limit Records PHP\nDESCRIPTION: This method sets the amount of data records to limit. It takes an integer representing the maximum number of records to return as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache with deleteAllCache() in PHP\nDESCRIPTION: This code snippet shows how to delete all cached data in SleekDB using the deleteAllCache() method.  It requires an instance of the SleekDB database object. The method does not take any arguments and removes all existing cached data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/delete-all-cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersDB->deleteAllCache();\n```\n\n----------------------------------------\n\nTITLE: notIn() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `notIn()` method within the SleekDB QueryBuilder. It takes a field name and an array of values as input and returns the QueryBuilder instance for chaining. This method excludes documents where the field matches any value in provided array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents PHP\nDESCRIPTION: Inserts multiple documents into the store at once. This function accepts an array of associative arrays, where each inner array represents a document to be inserted. It returns an array containing the inserted documents, each with their newly generated unique '_id' field. The input is an array of document arrays, and the output is an array of inserted document arrays, each containing its assigned '_id'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor PHP\nDESCRIPTION: Creates a new QueryBuilder object. This class is used for constructing queries.  $store (Store): The Store object to which the query will be applied.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache\nDESCRIPTION: Returns whether caching is enabled store-wide. This method is used internally. Returns a boolean.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Searching Documents Using Store in SleekDB\nDESCRIPTION: This code shows how to search for documents in SleekDB using the `search` method of the Store object.  It initializes a store, defines a search query, specifies fields to search in, applies pagination and returns the search results. Requires the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$newsStore = new Store(\"news\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$searchQuery = \"SleekDB best database\";\n\n$result = $newsStore->search(\n    [\"title\", \"content\"],\n    $searchQuery,\n    [\"scoreKey\" => \"DESC\"],\n    $limit,\n    $skip\n  );\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n?>\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Infinite Lifetime in PHP\nDESCRIPTION: This snippet demonstrates how to use caching with an infinite lifetime in PHP by passing 0 to the `useCache()` method.  This means the cache will only be refreshed when explicitly regenerated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: PHP select() Method Definition\nDESCRIPTION: This PHP code defines the `select` method signature.  It takes an array of field names as input and returns a QueryBuilder object.  This method is used to specify which fields should be included in the output.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Distinct Values - PHP\nDESCRIPTION: This PHP code snippet shows how to use the `distinct()` method to retrieve unique users based on their 'name'.  The method is called twice using string and array syntax. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: getCachePath() - Get Cache Path - PHP\nDESCRIPTION: Returns the path to the cache directory as a string.  This function provides the location where cache files are stored.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Find Documents by Criteria PHP\nDESCRIPTION: Retrieves one or multiple documents based on the given criteria. It supports ordering, limiting, and offsetting the results.  Returns an array of documents that match the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Join Method Definition - SleekDB PHP\nDESCRIPTION: Defines the signature of the join method in the QueryBuilder class. It takes a closure `$joinFunction` and a string `$propertyName` as parameters and returns a `QueryBuilder` object.  The `$joinFunction` should return the result of an executed sub-query or a prepared sub-query as a `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/join-stores.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Change Store Destination\nDESCRIPTION: Changes the destination of the store object. It takes the new store name, database path, and configuration as parameters. Returns the modified Store object. `databasePath` defaults to the current database path if not specified.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: useCache() Method Definition in PHP\nDESCRIPTION: This snippet shows the method signature for the `useCache` function, which allows enabling caching and defining the cache lifetime for a specific query. The `$lifetime` parameter specifies the cache lifetime in seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Store Name\nDESCRIPTION: Returns the name of the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: OrderBy Multiple Fields - PHP\nDESCRIPTION: Illustrates sorting the result set by multiple fields using the `orderBy()` method. The snippet sorts users first by 'name' in ascending order and then by 'age' in ascending order.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"_id\" => 13, \"name\" => \"Anton\", \"age\" => 20],\n  [\"_id\" => 4, \"name\" => \"Aragon\", \"age\" => 16], \n  [\"_id\" => 2, \"name\" => \"Aragon\", \"age\" => 17], \n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB using Composer\nDESCRIPTION: This command installs SleekDB using Composer, a dependency management tool for PHP. It adds SleekDB as a dependency to your project, allowing you to easily manage and update the library. Make sure you are in your project root directory where `composer.json` lives before running this command.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder PHP\nDESCRIPTION: Returns a new `QueryBuilder` object. This is the starting point for building complex queries on the data stored in the current store. No specific input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Query Object from QueryBuilder PHP\nDESCRIPTION: This code snippet demonstrates how to obtain a Query object from a QueryBuilder instance in SleekDB.  The Query object is essential for executing database queries. It requires an instance of QueryBuilder to be created first.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Or Where Condition\nDESCRIPTION: Adds or-where conditions to filter data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Storing date as a timestamp\nDESCRIPTION: Demonstrates storing the date as a timestamp, first converting it from a DateTime object.  This shows creating a DateTime object, retrieving the timestamp via `getTimestamp()` and then inserting into SleekDB using the store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/dates.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Object in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the Cache object from a SleekDB Query object using the `getCache()` method. The Cache object provides methods for managing the cache associated with the query, such as deleting or modifying its contents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Distinct Values\nDESCRIPTION: Returns distinct values for the specified fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with where() in PHP with SleekDB\nDESCRIPTION: This snippet shows how to filter data using the `where()` method in SleekDB. It retrieves a user from the 'users' store whose 'name' field is equal to 'Joshua Edwards'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB->where( 'name', '=', 'Joshua Edwards' )->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache Object - PHP\nDESCRIPTION: This code snippet defines the method to retrieve the Cache object associated with the current Query. It takes no parameters and returns the Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: select() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `select()` method within the SleekDB QueryBuilder.  It accepts an array of field names that should be included in the query result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Lifetime\nDESCRIPTION: Get the cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Remove Fields (Query)\nDESCRIPTION: Removes specified fields from documents matching the current query. Parameters: `$fieldsToRemove` (array) - an array of field names to remove. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path\nDESCRIPTION: Returns the path to the cache folder as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Single Where Condition in PHP\nDESCRIPTION: Illustrates applying a simple `where` condition to filter users whose name is \"Joshua Edwards\" using method chaining. It constructs a query using `createQueryBuilder`, sets the condition, retrieves the query object using `getQuery`, and executes it to fetch matching users with `fetch`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Document by ID in SleekDB\nDESCRIPTION: This code retrieves a single document from the 'news' store using its unique ID. This method directly accesses the file and is optimized for speed. It returns a document or null if the document is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB using Composer\nDESCRIPTION: This command installs SleekDB using Composer.  It requires Composer to be installed and configured in your project. It adds SleekDB as a dependency to your project, which can then be auto-loaded.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Disable cache for current query\nDESCRIPTION: This snippet demonstrates how to disable caching for current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB using Composer\nDESCRIPTION: This command installs the SleekDB package using Composer, a PHP dependency manager. It adds SleekDB as a dependency to your project and updates the `composer.json` file. Requires Composer to be installed and configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder PHP\nDESCRIPTION: This code snippet shows how to create a QueryBuilder instance using a store object in PHP. The QueryBuilder is essential for constructing database queries in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder PHP\nDESCRIPTION: This snippet shows how to create a QueryBuilder instance from a SleekDB store object. The resulting `$userQueryBuilder` object is used to construct queries against the user store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Query Builder Distinct Function (PHP)\nDESCRIPTION: This PHP code snippet displays the signature of the `distinct()` method within the SleekDB Query Builder, designed to fetch unique values. It accepts a single field or an array of fields to use in determining distinctness.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(array|string $fields): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Single Document PHP\nDESCRIPTION: This snippet shows how to update or insert a single document into the SleekDB store using the `updateOrInsert()` method.  It uses the `_id` field to determine whether to update an existing document or insert a new one.  The `autoGenerateIdOnInsert` parameter controls whether a new `_id` is automatically generated if the document doesn't have one.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/insert-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Regenerating cache for the query in PHP\nDESCRIPTION: This code snippet forces the re-generation of the cache for the query. The `regenerateCache` method returns the modified `QueryBuilder` instance.  This ensures that the cached data is up-to-date.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache\nDESCRIPTION: Deletes all cache files for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Content in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `get()`. It retrieves the cached content for the current query or token. It returns the content as an array if found, otherwise it returns null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Getting the default cache lifetime in PHP\nDESCRIPTION: This method is used internally to retrieve the default cache lifetime for the store. The `_getDefaultCacheLifetime` function returns an integer representing the default cache lifetime, or null if no default is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Fetching Documents with Criteria using findBy in PHP\nDESCRIPTION: The `findBy` method fetches documents from a SleekDB store based on specified criteria, order, limit, and offset. It allows complex queries using conditions, sorting, pagination. The method returns an array of documents that match the criteria or null if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ],\n      [\"title\" => \"asc\"],\n      10,\n      20\n   );\n```\n\n----------------------------------------\n\nTITLE: Using groupBy with SUM - PHP\nDESCRIPTION: Illustrates how to combine the `groupBy()` and `select()` methods to group data by 'age' and calculate the sum of 'follower' for each group. The sum is aliased as 'followerSum'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"followerSum\" => 901],\n  [\"age\" => 20, \"followerSum\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Reusing QueryBuilder Object in SleekDB PHP\nDESCRIPTION: This snippet demonstrates how to reuse a QueryBuilder object in SleekDB to add multiple conditions. The QueryBuilder object is initialized, conditions are added using the `where()` method, and the query is executed using `getQuery()->fetch()`.  This avoids resetting the conditions with each new query. This is useful when chaining multiple filters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Not In Condition\nDESCRIPTION: Add \"not in\" condition to filter data. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using useCache() with Null Lifetime in PHP\nDESCRIPTION: This code shows the usage of the `useCache()` method without specifying a lifetime, which means the cache will be regenerated on every update, delete, and insert operation. It fetches users, inserts a new user, and fetches users again to demonstrate cache invalidation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: orderBy() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `orderBy()` method within the SleekDB QueryBuilder. It sorts the documents based on provided criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy( array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache Files in SleekDB\nDESCRIPTION: This snippet shows the function definition for `deleteAll()`, which deletes all cache files of the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Using regenerateCache() PHP\nDESCRIPTION: This snippet demonstrates how to use the regenerateCache() method to force a cache refresh. First a query with infinite caching is performed, then a query to get active users will be made, where the cache is regenerated and set to a lifetime of 20 seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Store Name\nDESCRIPTION: Returns the name of the store as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version with Composer\nDESCRIPTION: This command installs the development version of SleekDB using Composer. This is intended for experimental purposes and is not recommended for production environments due to potential instability and undocumented API changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime in PHP\nDESCRIPTION: Sets the lifetime for the current query's cache. The `$lifetime` parameter specifies the duration in seconds.  `0` means infinite lifetime, while `null` means no lifetime (deleted on update/delete/insert).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB Store Class (PHP)\nDESCRIPTION: This PHP code includes the `Store.php` file, which contains the SleekDB store class. This allows you to use SleekDB's functionality in your PHP script. Ensure the path to `Store.php` is correct relative to your script's location.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Excluding nested fields using SleekDB except()\nDESCRIPTION: This PHP snippet demonstrates how to exclude a nested field ('address.streetNumber') along with a top-level field ('name') using the `except()` method.  This enables retrieving documents without specific data points, even when nested.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor\nDESCRIPTION: Creates a new Cache object, which handles caching operations. Requires a Query object and a store path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $query, string $storePath)\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Lifetime in SleekDB\nDESCRIPTION: This snippet shows the function definition for `getLifetime()`, which retrieves the configured lifetime for the current query's token.  It returns the lifetime in seconds (int), or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB Manually\nDESCRIPTION: This PHP code snippet imports the SleekDB store class, which allows you to use SleekDB features in your project. It assumes you have downloaded and extracted the SleekDB library into your project directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Find All Documents PHP\nDESCRIPTION: Retrieves all documents from the store. This function fetches all available data without any filtering or ordering. It returns an array containing all documents within the store. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Getting the store name in PHP\nDESCRIPTION: This code snippet retrieves the name of the store. The `getStoreName` method returns a string representing the store's name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Setting Database Directory PHP\nDESCRIPTION: This snippet initializes a variable to hold the path to the database directory.  Both absolute and relative paths are supported.  This path will be used to initialize the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: Delete Cache PHP\nDESCRIPTION: Deletes cache file(s) for the current query. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Creating a Store in SleekDB with PHP\nDESCRIPTION: This code snippet demonstrates how to create a new store in SleekDB using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace to be imported and a data directory (`$dataDir`) to be defined. The store is named 'news' and will store its data within the specified data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() function definition PHP\nDESCRIPTION: Defines the regenerateCache function within the QueryBuilder class, allowing the cache of a query to be regenerated regardless of its lifetime. It returns the QueryBuilder instance for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store instance using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace and specifies the store name ('news') and the directory for the database files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/fetch-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Directory in PHP\nDESCRIPTION: This snippet initializes the data directory where SleekDB will store its data. It uses the __DIR__ constant to create an absolute path to a directory named \"mydb\" in the current directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Criteria - Multiple Conditions with AND PHP\nDESCRIPTION: This snippet illustrates how to use the $criteria argument to find news articles authored by \"John\" that also contain \"cat\" in the title. It demonstrates how to use multiple conditions connected by the \"AND\" operator within the criteria array for filtering data. The $newsStore object is an instance of the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/criteria.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n    [\"author\", \"=\", \"John\"], \n    \"AND\", // <-- Optional\n    [\"title\", \"LIKE\", \"%cat%\"]\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Fetching the First Document in SleekDB\nDESCRIPTION: This snippet showcases the `first()` method to retrieve the first document that matches the query. It is more efficient than `fetch()` but `orderBy` will not work.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/query.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction first(): array\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Adding a Fulltext Search - PHP\nDESCRIPTION: This code snippet defines the method for performing a fulltext-like search against one or more fields. It takes the field or an array of fields to search, and a keyword to search for. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $field, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder\nDESCRIPTION: Returns a new `QueryBuilder` object. This object is used to construct complex queries for the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content\nDESCRIPTION: Saves content for the current query as a cache file. Parameters: `$content` (array) - the content to save in the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_65\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Get Primary Key\nDESCRIPTION: Returns the name of the field used as the primary key.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Values with distinct - PHP (String)\nDESCRIPTION: This PHP code demonstrates how to retrieve distinct values from a store using the SleekDB Query Builder. It fetches distinct 'name' values from the 'userQueryBuilder'.  Dependencies include the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache\nDESCRIPTION: Re-generate the cache for the query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Lifetime in PHP\nDESCRIPTION: This snippet demonstrates how to use caching with a specific lifetime (in seconds) using the `useCache()` method on a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing Query Object in SleekDB\nDESCRIPTION: This PHP function constructs a new Query object. Internally, it also creates a new Cache object associated with the query. It takes a QueryBuilder object as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Filtering with WHERE clause in SQL\nDESCRIPTION: This SQL snippet demonstrates a complex WHERE clause with nested conditions using AND and OR operators to filter data based on status, city, age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  status = \"premium\" \n  OR \n  (\n    (\n      city = \"london\" OR city = \"new york\" \n    )\n    AND \n    (\n      (age >= 16 AND age < 20) OR age > 30 \n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing SleekDB Search Algorithm Constants PHP\nDESCRIPTION: Demonstrates how to access the predefined search algorithm constants within the `Query` class. These constants represent different search algorithms that can be used to influence the score generation during search operations in SleekDB. The example shows accessing the 'hits' algorithm, which is the default.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/configurations.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache in SleekDB QueryBuilder\nDESCRIPTION: This PHP function forces re-generation of the cache for the current query. This is useful when the underlying data has changed and the cache needs to be updated. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Multiple Documents PHP\nDESCRIPTION: This example demonstrates updating or inserting multiple documents at once using the `updateOrInsertMany()` method. Documents with an existing `_id` are updated, and new documents are inserted. The `autoGenerateIdOnInsert` parameter enables or disables automatic ID generation for new documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\n----------------------------------------\n\nTITLE: set Method in PHP\nDESCRIPTION: This code defines the `set()` method of the Cache class. It sets and caches the provided content for the current query, using the query's token to uniquely identify the cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Deleting all cache files with no lifetime in PHP\nDESCRIPTION: This code snippet demonstrates how to delete all cache files with no specified lifetime in the current store. The `deleteAllWithNoLifetime` method removes all cache files that have a `null` lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\ndeleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content\nDESCRIPTION: Returns the cached result for the current query, if found. Otherwise, returns null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Getting Use Cache Flag in SleekDB\nDESCRIPTION: This is an internal PHP function used to determine if caching is enabled store-wide. It doesn't take any parameters. Returns a boolean.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Remove Fields By ID\nDESCRIPTION: Removes specified fields from one document identified by its primary key. Accepts the document ID and an array of field names to remove. Returns the modified document or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: SleekDB: deleteBy() Method Signature\nDESCRIPTION: This snippet shows the signature of the deleteBy() method in SleekDB's Store class. It takes an array of criteria and an optional return option as parameters. The method returns a boolean, integer, or array depending on the chosen return option, reflecting the success, count, or results of the deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Querying with 'where' conditions (Example 2) PHP\nDESCRIPTION: Illustrates retrieving data using 'where' and 'orWhere' conditions with the SleekDB query builder. Retrieves users where 'products.totalSaved' is greater than 10, OR ('products.totalBought' is greater than 20 AND 'products.shipped' equals 1), OR 'totalBought' equals 0. Depends on the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the data directory in PHP (Deprecated)\nDESCRIPTION: This method is deprecated. It retrieves the location (directory path) of the store. The `getDataDirectory` function returns a string representing the data directory path.  Use `getDatabasePath` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder in PHP\nDESCRIPTION: This snippet demonstrates how to create a QueryBuilder instance from a store. It's the starting point for constructing queries in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache\nDESCRIPTION: Re-generate the cache for the query. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace to be imported and a data directory (`$dataDir`) to be defined. The first argument to the `Store` constructor is the name of the store, which will be used as the directory name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID\nDESCRIPTION: Returns the _id of the last document inserted into the store.  Returns an integer representing the last inserted _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Deleting a store and its data in PHP\nDESCRIPTION: This code snippet deletes the entire store and all the data it contains. The `deleteStore` method removes the store directory and clears any cached data. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: SleekDB Multiple Store Joins\nDESCRIPTION: This snippet demonstrates how to join multiple stores. It retrieves users, their comments, and their articles by using multiple `join()` calls. This example extends the single join example by also getting the user's articles.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/join-stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This snippet shows how to create a QueryBuilder instance using the `createQueryBuilder()` method of the `Store` class. This is the first step in building a query using SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Fetch\nDESCRIPTION: Execute Query and get Results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: disableCache() Example PHP\nDESCRIPTION: Demonstrates how to use the `disableCache()` method to prevent caching for a particular query. This ensures that the query always fetches data directly from the data store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find Documents By Criteria\nDESCRIPTION: Retrieves one or multiple documents based on the provided criteria.  Accepts an array of criteria for filtering, an optional array for ordering, and optional limit and offset values.  Returns an array of documents that match the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: orderBy() Multiple Fields Example PHP\nDESCRIPTION: This example demonstrates how to use the `orderBy()` method to sort the users first by name and then by age, both in ascending order. This is useful when you need to apply a secondary sorting criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Store Path\nDESCRIPTION: Get the path to the store, including store name. Returns the full path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime PHP\nDESCRIPTION: This method sets the cache lifetime. It takes the lifetime in seconds as an integer or null to use the default store lifetime. It returns the `Cache` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Select Fields\nDESCRIPTION: Selects specific fields to include in the query results. Accepts an array of field names.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Except Example 2 Result\nDESCRIPTION: The result of example 2.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n[ [\"_id\" => 2, \"address\" => [ \"street\" => \"Firststreet\" ]], ... ]\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache\nDESCRIPTION: Re-generates the cache for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Multiple Where Conditions - Separate Steps in PHP\nDESCRIPTION: Illustrates a multi-step approach to building and executing a query with multiple `where` conditions.  It retrieves users meeting the criteria `products.totalSaved > 10` AND `products.totalBought > 20`. It shows how to prepare the query separately before execution for better readability and maintainability.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing a QueryBuilder Object - PHP\nDESCRIPTION: This snippet showcases the constructor for creating a new QueryBuilder object. It requires a Store object as a parameter. This constructor sets up the QueryBuilder to operate on the provided Store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Skipping Documents - PHP\nDESCRIPTION: This PHP code snippet demonstrates the use of the `skip()` method to skip the first 10 users. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array (Internal)\nDESCRIPTION: This method is used internally. It returns an array containing all properties that are used for the cache token generation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Changing Store Example (PHP)\nDESCRIPTION: This example shows how to change the store destination using the `changeStore()` method. First, a store named \"users\" is created and a new user is inserted. Then the store is changed to \"alerts\" and a new alert is inserted into the alerts store, demonstrating the dynamic switching of stores.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache PHP\nDESCRIPTION: Re-generates the cache for the query.  Useful for updating cached results. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Values with distinct - PHP (Array)\nDESCRIPTION: This PHP code demonstrates how to retrieve distinct values from a store using the SleekDB Query Builder. It fetches distinct 'name' values from the 'userQueryBuilder' using an array. Dependencies include the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with Timestamps in SleekDB (PHP)\nDESCRIPTION: Illustrates filtering data using timestamps instead of DateTime objects in SleekDB. It inserts a date as a timestamp and then filters by converting dates to timestamps using `getTimestamp()` and using the `IN` operator.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Example PHP\nDESCRIPTION: Demonstrates how to regenerate the cache for a query. The first query caches with infinite lifetime, while the second query regenerates the cache and sets a 20-second lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: GroupBy method definition\nDESCRIPTION: This is the function definition for the groupBy method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Regenerating Cache Example in PHP\nDESCRIPTION: Example that demonstrates how to regenerate the cache, overriding any previous cache configurations for the query. Useful for forcing a cache update even if the data hasn't expired yet.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date/Time in SleekDB\nDESCRIPTION: This code shows two ways to store the current date and time: as a formatted string or as a timestamp. The first uses `format(\"Y-m-d H:i:s\")` to create a string, while the second uses `getTimestamp()` to store the value as a timestamp.  Both are valid ways to store the current date and time in SleekDB. This example assumes you have already initialized the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Filtering with `where` and `nestedWhere` in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `where` and `nestedWhere` methods in SleekDB's query builder to create complex filtering conditions.  It combines multiple conditions using AND and OR operators to retrieve users based on their product totals, name, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Store-wide Search Configuration in SleekDB (PHP)\nDESCRIPTION: This code configures SleekDB's search behavior at the store level. It sets options such as the minimum length of a word to be considered in the search query, the search mode (OR or AND), the name of the score key field, and the search algorithm to use. This configuration is applied when a new store instance is created.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: Getting the store path\nDESCRIPTION: This snippet shows how to retrieve the full path to the store, including the store name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Fetching the first document with SleekDB\nDESCRIPTION: Executes a SleekDB query to retrieve the first document that matches a given criteria (email equals foo@bar.com) and returns it as an array. `orderBy` will not work with `first()`\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: delete Method in PHP\nDESCRIPTION: This code defines the `delete()` method of the Cache class. It deletes the cache file associated with the current query, effectively invalidating the cached data for that query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files PHP\nDESCRIPTION: Deletes all cache files for the current store. Returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Chaining `in` methods (deprecated) in PHP\nDESCRIPTION: This PHP snippet chains two deprecated `in` methods to retrieve users who are from specific countries (BD, CA, SE, NA) and are of specific ages (18, 20, 23, 30).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Nested Query (JSON)\nDESCRIPTION: This JSON snippet represents the structure of a document that can be queried using SleekDB's nested property filtering.  The query will look into a 'post' object, inside that an 'author' object, and finally match a 'role' property against the value 'admin'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Example 2 in SleekDB PHP\nDESCRIPTION: Updates or inserts a user document with a specific ID (23), and prevents the auto-generation of an ID if inserting.  It requires the `$userStore` object to be initialized. If no _id 23 exists, it will create a new user with the provided _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\n----------------------------------------\n\nTITLE: Getting the Query Object in PHP\nDESCRIPTION: This snippet demonstrates how to obtain a Query object instance from a QueryBuilder instance using the `getQuery()` method. This is the initial step to performing database queries using SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Selecting aggregated data with groupBy in SQL\nDESCRIPTION: This SQL snippet illustrates using the `SUM` function in conjunction with `GROUP BY` to calculate the total number of followers for each age group. It selects the 'age' and the sum of the 'follower' column, aliasing the sum as 'followerSum', and then groups the results by 'age'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT age, SUM(follower) as followerSum GROUP BY age;\n```\n\n----------------------------------------\n\nTITLE: Using cache for current query\nDESCRIPTION: This snippet demonstrates how to use caching for current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using `notIn` method (deprecated) in PHP\nDESCRIPTION: This PHP snippet uses the deprecated `notIn` method to retrieve users who are not from the specified countries (IN, KE, OP).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder PHP\nDESCRIPTION: This code snippet shows how to create a QueryBuilder instance from a SleekDB store. The QueryBuilder is used to construct and execute queries against the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Getting Store Object in SleekDB\nDESCRIPTION: This is an internal PHP function. It returns the Store object used to create the QueryBuilder object.  This allows access to the store's configuration and data. Returns the Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Join method definition\nDESCRIPTION: This snippet shows the function signature for the `join` method of the QueryBuilder object in SleekDB. It takes a Closure and a string as arguments.  The closure defines how to fetch related data, and the string is the name of the property to add to each document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: String function LOWER in PHP\nDESCRIPTION: Demonstrates how to use the `LOWER` string function within the `select` method to convert a field to lowercase.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"LOWER\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token PHP\nDESCRIPTION: Gets the cache token. Returns the cache token as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_49\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Fetching a Document by ID with findById in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a single document from the 'news' store using its unique ID with the `findById()` method. The method directly accesses the file, making it a fast way to retrieve a specific document. It returns a single document or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with where and orWhere\nDESCRIPTION: This PHP code demonstrates how to build a query using SleekDB's query builder to retrieve users based on status, city, and age. It uses the `where` and `orWhere` methods to create complex conditions similar to the SQL example. The code shows how to chain these methods together to filter the data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where([\"status\", \"=\", \"premium\"])\n  ->orWhere(\n    [\n      [\n        [ \"city\", \"=\", \"london\" ], \"OR\", [\"city\", \"=\", \"new york\"]\n      ],\n      \"AND\",\n      [\n        [\n          [ \"age\", \">=\", 16 ], // <-- If no operation is provided, \"AND\" is used.\n          [ \"age\", \"<\", 20 ]\n        ],\n        \"OR\",\n        [ \"age\", \">\", 30 ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance in PHP\nDESCRIPTION: This snippet demonstrates how to create a QueryBuilder instance from a store object in PHP.  The QueryBuilder is then used for managing cache settings and executing queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Example PHP\nDESCRIPTION: Illustrates the usage of `regenerateCache()` in conjunction with `useCache()`. The first query caches the results indefinitely. The second query, using `regenerateCache()`, fetches fresh data from the store and caches it with a 20-second lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Use Cache\nDESCRIPTION: Enable caching for the current query. Parameters: `$lifetime` (int, optional) - the cache lifetime in seconds. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in Store with count in PHP\nDESCRIPTION: This snippet shows how to get the total number of documents in the 'news' store using the `count()` method. The method is optimized for speed by simply counting the number of files in the store's directory. It returns the count as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/fetch-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\nLANGUAGE: php\nCODE:\n```\n$newsCount = $newsStore->count();\n// Returns: 27 \n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder in PHP\nDESCRIPTION: Demonstrates how to create a QueryBuilder instance from a SleekDB store. This is the starting point for constructing queries and applying cache management.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Deprecated nestedWhere Function Definition\nDESCRIPTION: This PHP code defines the `nestedWhere` function signature, which is deprecated since version 2.3.  It takes an array of conditions and returns a QueryBuilder object. It's important to note its deprecation and use `where` and `orWhere` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 1 PHP\nDESCRIPTION: Demonstrates how to use the `useCache()` method to enable caching without a specific lifetime. The cache will be invalidated whenever a document is updated, deleted, or inserted in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Using Infinite Cache in PHP\nDESCRIPTION: This snippet demonstrates how to use infinite caching using the `useCache(0)` method. A lifetime of 0 seconds represents infinite caching.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find Document by ID PHP\nDESCRIPTION: Retrieves a single document from the store based on its unique '_id'. This is a fast operation as it directly uses the file path for retrieval. It accepts an integer '_id' and returns the corresponding document as an array or null if not found.  _id (int): The unique identifier of the document to retrieve. Returns: array|null\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many with Auto ID PHP\nDESCRIPTION: Updates or inserts multiple users using `updateOrInsertMany()` and applies auto-generated `_id`s on inserts when `$autoGenerateIdOnInsert` is set to true (default).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance in PHP\nDESCRIPTION: This code snippet shows how to create an instance of the `QueryBuilder` class using the `createQueryBuilder()` method of the `Store` class. This allows for constructing complex queries in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Re-generating Cache in SleekDB with makeCache() in PHP\nDESCRIPTION: This code snippet demonstrates how to use the `makeCache()` method to re-generate the cache data for a SleekDB query. It first searches for users with 'SleekDB' in their bio, orders the results by rank in descending order, skips 80 records, limits the result to 20 records, and then re-generates the cache before fetching the data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/regenerate-cache.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $usersDB\n    ->search( 'bio', 'SleekDB' )\n    ->orderBy( 'desc', 'rank' )\n    ->skip( 80 )\n    ->limit( 20 )\n    ->makeCache() // Re-generate the cache data.\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: In Condition PHP\nDESCRIPTION: Adds an \"in\" condition to filter data based on whether a field's value is present in a given array of values. fieldName (string): The name of the field to check. values (array, optional): An array of values to check against.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Store\nDESCRIPTION: Deletes the entire store and wipes all data and cache it contains.  Use with caution! Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Except Method Usage - PHP\nDESCRIPTION: Illustrates using the `except()` method to exclude specific fields from the result set in SleekDB. This snippet excludes the '_id' and 'name' fields, returning only the remaining fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: Check if Exists PHP\nDESCRIPTION: This method checks if any data is found based on the query criteria. It returns a boolean value indicating whether any matching documents exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithms Constant (PHP)\nDESCRIPTION: This example shows how to access the predefined search algorithm constants within the SleekDB Query class. These constants represent different algorithms for generating search scores.  It requires the SleekDB library to be installed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/configurations.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Token Array - PHP\nDESCRIPTION: This code snippet shows the method (used internally) that returns an array containing all properties used for cache token generation. It takes no parameters and returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: set() - Set Cache Content - PHP\nDESCRIPTION: Sets and caches the provided content for the current query using the associated token. It accepts an array as input, which represents the content to be cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Get Database Path\nDESCRIPTION: Returns the path to the database folder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: Adding nested where conditions in PHP (Deprecated)\nDESCRIPTION: This method is deprecated.  Adds nested where conditions to filter data. The `nestedWhere` method accepts an array of conditions and returns the modified `QueryBuilder`. Use `where` and `orWhere` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Removing fields from a document by ID\nDESCRIPTION: This snippet shows how to remove specific fields from a document identified by its ID. It takes the ID and an array of field names to remove.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Skipping documents using SleekDB skip() with integer\nDESCRIPTION: This PHP snippet demonstrates how to skip the first 10 documents using the `skip()` method with an integer value. The query builder is used to skip the specified number of documents, effectively implementing an offset.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Object - PHP\nDESCRIPTION: This code snippet defines the method to create a new QueryBuilder object in SleekDB. The QueryBuilder is used for building queries to retrieve data from the store.  It doesn't take any parameters and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search with QueryBuilder: Advanced Example (PHP)\nDESCRIPTION: Demonstrates a more advanced usage of the `search()` method, including searching through nested fields, setting search options (algorithm), ordering, excluding the searchScore and limiting results.  It assumes the existence of nested data structures in the documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Primary Key\nDESCRIPTION: Returns the name of the field used as the primary key for the store.  Returns a string representing the primary key field name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example for nestedWhere Usage\nDESCRIPTION: This SQL query shows an example of how a complex query with AND and OR operations is constructed. This mirrors the logic implemented in the PHP `nestedWhere` example, filtering based on products, name, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  (\n    (name like 'a%' OR name like 'b%') \n    AND\n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28))\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting Condition Properties - PHP\nDESCRIPTION: This code snippet defines the method (used internally) that returns an array containing all information needed to execute a query. It takes no parameters and returns an array of condition properties.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Getting the database path\nDESCRIPTION: This snippet demonstrates how to retrieve the path to the database folder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: Configuring SleekDB Store in PHP\nDESCRIPTION: This code snippet shows how to configure a SleekDB store using an array passed as the second parameter to the `SleekDB::store()` method. It demonstrates setting the `auto_cache` option to `true` and the `timeout` option to `120` seconds. This configuration applies to all stores created from this SleekDB object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/configurations.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = \\SleekDB\\SleekDB::store('news', $dataDir, [\n  'auto_cache' => true,\n  'timeout' => 120\n]);\n```\n\n----------------------------------------\n\nTITLE: useCache() Method Signature PHP\nDESCRIPTION: This code shows the signature of the `useCache` method in the QueryBuilder class.  It accepts an optional integer representing the cache lifetime in seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File in PHP\nDESCRIPTION: Deletes the cache file associated with the current query. This function removes the cached data, forcing a fresh query execution on the next request. No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Specified Lifetime in PHP\nDESCRIPTION: Example showing how to set a cache lifetime using the useCache() method.  In this instance, a 2-minute (120 second) lifetime is defined. Cache will be active until lifetime is reached, or documents are updated, deleted or inserted in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Do Fulltext Search PHP\nDESCRIPTION: Does a fulltext like search against one or more fields.  Takes the field(s) and a keyword as parameters. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(string|array $field, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Numeric Function ROUND in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `ROUND` numeric function within the `select()` method of the QueryBuilder. It is used to round the value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"ROUND\" => [\"fieldName\", PRECISION]], ...]\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array\nDESCRIPTION: Returns an array used to generate a unique token for the current query. This method is used internally. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Retrieve Cache Content for SleekDB Query (PHP)\nDESCRIPTION: Retrieves the cached content for the current query, using the query's unique token to locate the cache file. If no cache file is found, it returns null. The returned value is either an array containing the cached data or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Filtering with Timestamps in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to filter data in SleekDB using timestamps instead of DateTime objects. It inserts an article with a timestamp for 'createdAt'.  It then creates an array of timestamps and uses the `findBy` method with an `IN` condition to find data within those timestamps. Requires the SleekDB library and autoloading.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: PHP distinct() Method Definition\nDESCRIPTION: This PHP code defines the `distinct` method signature. It removes duplicate documents based on the specified fields. It takes either a string or an array of strings specifying the fields for uniqueness.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndistinct( array|string $fields ): QueryBuilder;\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path\nDESCRIPTION: Retrieves the path to the cache folder for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Querying with 'where' conditions (Example 1) PHP\nDESCRIPTION: Demonstrates how to retrieve data based on multiple nested 'where' conditions using the SleekDB query builder. Retrieves users where 'products.totalSaved' is greater than 10 AND 'products.totalBought' is greater than 20, OR 'products.shipped' equals 1.  Requires the SleekDB library and an initialized `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache PHP\nDESCRIPTION: This code snippet shows how to disable caching for a particular query using the disableCache() method of the QueryBuilder class. This overrides the store-wide caching configuration for this specific query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: delete() - Delete Cache File - PHP\nDESCRIPTION: Deletes the cache file associated with the current query.  This function does not take any parameters and does not return any value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Removing fields with SleekDB (Example 1)\nDESCRIPTION: Removes the 'status' field from documents in SleekDB that match the given query (city equals london). It assumes `$userStore` object is an instance that provides `createQueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache PHP\nDESCRIPTION: Returns a boolean indicating whether caching is enabled store-wide. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 2 (PHP)\nDESCRIPTION: This PHP code uses the deprecated `nestedWhere` method to retrieve users with a \"premium\" status, living in \"london\", and either between 16 and 20 years old or older than 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Count Documents\nDESCRIPTION: Returns the total number of documents in the store. Returns an integer representing the document count.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Join Function Definition PHP\nDESCRIPTION: Defines the `join` function in the SleekDB QueryBuilder. This method is used to join two or multiple stores together, accepting a Closure for the joined store and a property name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: deleteAll() - Delete All Cache Files - PHP\nDESCRIPTION: Deletes all cache files within the current store. This function does not take any parameters and does not return any value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: select() Method Definition PHP\nDESCRIPTION: This code snippet shows the method signature for the `select()` method of the `QueryBuilder` class. This method allows to specify which fields should be included in the result set, akin to the `SELECT` clause in SQL. It accepts an array `$fieldNames` and returns the QueryBuilder instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering with Timestamps in SleekDB\nDESCRIPTION: Demonstrates how to filter data in SleekDB using timestamps instead of DateTime objects.  It inserts a new article with the createdAt field as a timestamp, then queries for articles where the releaseDate is within a range of timestamps. Requires SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: Find One Document By Criteria PHP\nDESCRIPTION: This method retrieves a single document based on the provided criteria. It returns the first document found that matches the criteria, or null if no document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Or Where Condition\nDESCRIPTION: Adds \"or where\" conditions to filter the data.  Accepts an array of conditions.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: deleteAll Method in PHP\nDESCRIPTION: This code defines the `deleteAll()` method of the Cache class.  It deletes all cache files belonging to the current store, clearing the entire cache for that store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Grouping and Filtering with SleekDB Query Builder (SQL)\nDESCRIPTION: This SQL query groups active products by category and retrieves categories with total views between 500 and 1000. It demonstrates the use of `GROUP BY` and `HAVING` clauses for filtering grouped data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from SleekDB Store using PHP\nDESCRIPTION: This code snippet shows how to retrieve all news articles from the 'news' store using the 'findAll' method. The returned data is then printed using 'print_r'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties\nDESCRIPTION: Returns an array containing all information needed to execute a query. This method is used internally. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Add Or Where Condition\nDESCRIPTION: Adds an 'or where' condition to the query, allowing for alternative filtering criteria. Takes an array of conditions and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Search Example 2 - PHP\nDESCRIPTION: This example demonstrates using the `search()` method of `QueryBuilder` to search through nested fields and limit results. It shows how to configure search options for a specific query, including specifying the search algorithm and limiting the result set. It searches for 'SleekDB is the best database solution' in the 'title.mainTitle' and 'content' fields, ordering by search score, excluding the score from the result, setting algorithm as 'prioritize' and limits the result to 20.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/searching.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: where() method with inline query in PHP\nDESCRIPTION: This example shows how to use the `where()` method to filter data and then fetch the results using `getQuery()` and `fetch()`. It retrieves users whose name is \"Joshua Edwards\" using an inline approach, chaining the `where`, `getQuery`, and `fetch` methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Add Or Where Condition PHP\nDESCRIPTION: Adds or-where conditions to filter data.  Takes the conditions as an array. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Hits Prioritize Algorithm in SleekDB\nDESCRIPTION: Demonstrates the usage of the 'hits_prioritize' search algorithm in SleekDB, which prioritizes fields based on their order when multiple documents have the same amount of search hits.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits_prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: SleekDB Query with nestedWhere\nDESCRIPTION: This PHP snippet demonstrates how to construct a complex query using the `where` and `nestedWhere` methods in SleekDB.  It retrieves users based on multiple conditions related to products and age, using AND and OR operations for nesting.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating Documents in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to update documents that match a specific condition using the update() method of the Query object in PHP. It sets the status of all users located in London to \"VIP\" by providing an array of properties to update.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Query Cache in SleekDB (PHP)\nDESCRIPTION: This code snippet shows how to delete the cache associated with a SleekDB query using the `deleteCache()` method. This is useful when the data in the database has changed, and you need to ensure the query returns the most up-to-date results. The example demonstrates a query that searches, orders, skips, and limits results before deleting its cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/delete-cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->search( 'bio', 'SleekDB' )\n    ->orderBy( 'desc', 'rank' )\n    ->skip( 80 )\n    ->limit( 20 )\n    ->deleteCache();\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory\nDESCRIPTION: Returns the directory path where the store's data is located as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File\nDESCRIPTION: Deletes the cache file(s) for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_67\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Grouping documents\nDESCRIPTION: This snippet demonstrates how to group documents based on one or multiple fields.  It allows specifying a counter key name and whether to allow empty groups.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Nested Where Conditions Structure (PHP)\nDESCRIPTION: This PHP code illustrates the structure of the conditions array used with the deprecated `nestedWhere()` method. It shows the outermost operation and nested conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path\nDESCRIPTION: Retrieves the path to the cache folder for the current store. Returns a string representing the cache path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Finding a document by its ID\nDESCRIPTION: This snippet demonstrates how to find a specific document in the store using its unique ID. It returns the document if found, or null otherwise. It's very fast because it directly accesses the file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Limit method definition\nDESCRIPTION: Shows the function definition for the limit method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int|string $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting Data Directory in SleekDB (Deprecated)\nDESCRIPTION: This PHP function retrieves the location (directory path) of the store. This function is deprecated since version 2.7 and `getDatabasePath` should be used instead. Returns the directory path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache Files in SleekDB with PHP\nDESCRIPTION: This PHP code snippet shows the `deleteAll()` function which is used to delete all cache files within the current store in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Filtering grouped data with SQL having()\nDESCRIPTION: This SQL query selects category and the sum of views (aliased as totalViews), filters for active products, groups the results by category, and then filters the grouped data to include only categories with totalViews between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: where Method Example 3 in SQL\nDESCRIPTION: This SQL example illustrates a complex WHERE clause with AND, OR, and nested conditions. It retrieves records where status is \"premium\", the city is either \"london\" or \"new york\", and either the age is between 16 and 20 or the age is greater than 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n// example in sql\nWHERE \n  status = \"premium\" \n  AND \n  (\n    (\n city = \"london\" OR city = \"new york\" )\n    AND \n    ( (age >= 16 AND age < 20) OR age > 30 )\n  )\n```\n\n----------------------------------------\n\nTITLE: Reusing SleekDB QueryBuilder Object (PHP)\nDESCRIPTION: Shows how to reuse a `QueryBuilder` object to add multiple conditions to a query without resetting it. This avoids creating a new `QueryBuilder` for each condition. The snippet demonstrates adding multiple `where` clauses and executing them separately.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Keeping Query State - PHP\nDESCRIPTION: Demonstrates how to use the `keepConditions()` method in SleekDB to preserve the query state after fetching data. This allows for subsequent operations, like updates, on the matched documents without re-running the initial query. It includes finding, fetching, and updating documents based on the kept conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/release-notes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Find documents.\n$result = $usersDB\n    ->keepConditions() // Won't reset the active query state.\n    ->where('products.totalBought', '>', 0)\n    ->where('products.totalSaved', '>', 0);\n\n// Fetch data.\n$result->fetch();\n\n// Update matched documents.\n$result->update([\n    'someRandomData' => '123',\n]);\n```\n\n----------------------------------------\n\nTITLE: Multiple Where Conditions - PHP\nDESCRIPTION: This example demonstrates how to use multiple `where` conditions to retrieve users with `products.totalSaved > 10` AND `products.totalBought > 20`.  The code shows three different ways of achieving the same result: using the where method multiple times inline, using the where method once inline with nested conditions, and preparing the query in multiple lines.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Except example\nDESCRIPTION: This example shows how to exclude the `_id` and `name` fields from the returned result set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: Group By\nDESCRIPTION: Group documents using one or multiple fields. Accepts an array of fields to group by, an optional counter key name, and a boolean to allow empty groups. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using where() method in PHP\nDESCRIPTION: This code snippet demonstrates the usage of the `where()` method of the QueryBuilder object.  The method takes an array of criteria as input. The returned value is a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache Path - PHP\nDESCRIPTION: This code snippet defines the method for retrieving the path to the cache folder. It takes no parameters and returns the cache path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: orWhere() Example 2: Multiple orWhere() Calls in PHP\nDESCRIPTION: This example demonstrates using multiple `orWhere()` calls to retrieve users based on the condition: `products.totalSaved > 10 OR (products.totalBought > 20 AND products.shipped = 1) OR totalBought = 0`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files with No Lifetime in PHP\nDESCRIPTION: Deletes all cache files within the current store that have no lifetime defined (null lifetime). This targets cached data that is intended to be invalidated on every update, delete, or insert operation. No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Find Document by ID\nDESCRIPTION: Retrieves a single document from the store based on its unique '_id'. This is optimized for speed because it uses the file path directly. Returns the document as an array, or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\n----------------------------------------\n\nTITLE: Skip Records PHP\nDESCRIPTION: This method sets the amount of data records to skip. It takes an integer representing the number of records to skip as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: getLifetime() method in PHP\nDESCRIPTION: Describes the `getLifetime()` method of the Cache class, which retrieves the currently set lifetime for a query's cache. The method returns either an integer (representing seconds, where 0 signifies infinite lifetime) or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Adding Where Condition in SleekDB\nDESCRIPTION: This PHP function adds a \"where\" condition to the query.  It takes an associative array `$conditions` representing the where clause. Can be used multiple times to add multiple 'and where' conditions. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing a SleekDB Store in PHP\nDESCRIPTION: This code snippet initializes a new SleekDB store named 'news' in the specified database directory. If the store does not exist, it will be created automatically. The second parameter is the path to the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: disableCache() Example PHP\nDESCRIPTION: Retrieves 20 active users without using caching.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents Using QueryBuilder in SleekDB\nDESCRIPTION: This example shows how to retrieve documents from SleekDB using the QueryBuilder. It defines a store object, constructs a query with a where clause, ordering, pagination and returns the resulting documents. Requires the SleekDB library to be installed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/complete-examples.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"./vendor/autoload.php\";\n\nuse SleekDB\\Store;\nuse SleekDB\\Query;\n\n$databaseDirectory = __DIR__.\"/database\";\n\n// applying the store configuration is optional\n$storeConfiguration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n// creating a new store object\n$userStore = new Store(\"users\", $databaseDirectory, $storeConfiguration);\n\n// Pagination\n$page = 1;\n$limit = 10;\n$skip = ($page - 1) * $limit;\n\n$result = $userStore->createQueryBuilder()\n  ->where([\n    [\"location\", \"IN\", [\"new york\", \"london\"]],\n    \"OR\",\n    [\"age\", \">\", 29]\n  ])\n  ->orderBy([\"_id\" => \"DESC\"])\n  ->limit($limit)\n  ->skip($skip)\n  ->getQuery()\n  ->fetch();\n\n// Output\nheader(\"Content-Type: application/json\");\n\necho json_encode($result);\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Store Path\nDESCRIPTION: Returns the full path to the store, including the store name. Returns a string representing the store path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Selecting with Aggregation Functions - SQL\nDESCRIPTION: SQL equivalent for next code snippet using SUM aggregation function\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(follower) as followerSum;\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content in PHP\nDESCRIPTION: This code presents the function signature for the `set()` method in the SleekDB Cache class, written in PHP.  It's used to cache data for the current query. It takes an array of content as input and stores this content in the cache file associated with the current query. It returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Simple Delete by Condition in PHP\nDESCRIPTION: This example demonstrates how to delete documents based on a simple condition using the deleteBy() method.  It deletes all users whose name is \"Joshua Edwards\". The default return option (Query::DELETE_RETURN_BOOL) is used, which returns true on success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/delete-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: GroupBy example result\nDESCRIPTION: Result of the groupBy example.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"category\" => \"pants\", \"productAmount\" => 200],\n  [\"category\" => \"shirts\", \"productAmount\" => 29],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting the amount of data to limit in PHP\nDESCRIPTION: This code demonstrates how to limit the number of data records returned by the query. The `limit` method accepts an integer representing the maximum number of records to return, defaulting to 0 if no argument is provided, and returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Having method definition\nDESCRIPTION: Shows the function definition for the `having` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Multiple where() conditions using method chaining in PHP\nDESCRIPTION: This snippet demonstrates how to use method chaining and multiple `where()` calls to apply multiple conditions (`products.totalSaved > 10 AND products.totalBought > 20`). It fetches users who meet both conditions by using `where` multiple times in a row.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by ID in SleekDB (PHP)\nDESCRIPTION: This code snippet presents the function signature of `deleteById` that deletes a document directly by its `_id`.  It is optimized for speed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/delete-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: getLifetime Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `getLifetime` method within the Cache class. This method retrieves the lifetime set for the current query/token. It returns an integer representing the lifetime in seconds, where 0 means infinite, or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation PHP\nDESCRIPTION: Demonstrates how to create a new SleekDB Store object.  The Store constructor takes two parameters: the name of the store (e.g., 'users') and the directory where the database files will be stored. This store object is used in the subsequent examples for performing CRUD operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Updating Data with Where Condition (PHP)\nDESCRIPTION: This snippet demonstrates how to update a specific data object in SleekDB using the `update()` method along with a `where` condition. It first defines an array `$updateable` containing the data to be updated. Then, it uses the `where()` method to filter the documents and `update()` to modify the 'totalBought' value within the 'products' array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/edit-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$updateable = [\n    'products' => [\n        'totalBought' => 1\n    ]\n];\n$usersDB->where( 'name', '=', 'Joshua Edwards' )->update( $updateable );\n```\n\n----------------------------------------\n\nTITLE: Getting the data directory\nDESCRIPTION: This snippet demonstrates how to retrieve the location of the store's directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Filtering Data by Author and Title in SleekDB\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method in SleekDB to filter news articles by a specific author and title. It uses the `$criteria` argument with an array of conditions to specify both the author and title filters using AND operator implicitly.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/criteria.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"],\n  \"AND\", // <-- Optional\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\n  [\"author\", \"=\", \"John\"],\n  [\"title\", \"LIKE\", \"%cat%\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Deleting documents using SleekDB (Boolean Return)\nDESCRIPTION: This snippet demonstrates how to delete documents based on a query using SleekDB and receive a boolean result. It deletes all users that are not active and returns true or false based on the success of the deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Posts Store in SleekDB\nDESCRIPTION: This snippet creates a 'posts' store in SleekDB. It is similar to the previous examples, instantiating a `SleekDB\\Store` object with the store name 'posts' and the data directory `$dataDir`. This assumes you need to separate data about user posts from other data like users or news.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Content in SleekDB with PHP\nDESCRIPTION: This PHP code snippet demonstrates the `set()` function for caching content in SleekDB. It takes an array as input (`$content`) which is the data to be cached for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a Store\nDESCRIPTION: This snippet demonstrates inserting a new user into the 'userStore'. It uses the `insert()` method of the `Store` object, passing an associative array containing user data such as name, email, and avatar information. This assumes the `$userStore` object has already been instantiated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token in PHP\nDESCRIPTION: Retrieves the unique token for the current query, which is used to save and retrieve a cache file. This token is a string that uniquely identifies the query's cache.  No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Store-Wide Search Configuration in SleekDB (PHP)\nDESCRIPTION: Configures search behavior at the store level, setting minimum word length, search mode, score key name, and search algorithm. This configuration applies to all queries executed against the store. The search settings are defined in an associative array assigned to the 'search' key within the configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Store wide configuration when creating a store\n\n$configuration = [\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n\n$store = new Store(\"users\", __DIR__ . \"/database\", $configuration);\n```\n\n----------------------------------------\n\nTITLE: Search Documents\nDESCRIPTION: Performs a full-text like search against one or multiple fields.  Parameters: `$fields` (array) - an array of field names to search within, `$query` (string) - the search query, `$orderBy` (array, optional) - an array specifying the order of the results, `$limit` (int, optional) - the maximum number of documents to return, `$offset` (int, optional) - the number of documents to skip. Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: orderBy() Result Example PHP\nDESCRIPTION: This example shows the structure of the expected output array when using the orderBy function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n[[\"_id\" => 13, \"name\" => \"Anton\"], [\"_id\" => 2, \"name\" => \"Berta\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Example in PHP\nDESCRIPTION: Example that shows the usage of the disableCache() function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB Store Class\nDESCRIPTION: This PHP code snippet shows how to include the SleekDB Store class in your PHP script. This is necessary when installing SleekDB manually (without Composer). It uses `require_once` to include the Store.php file, ensuring it's only included once to avoid conflicts.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/installation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Store with Custom Configuration - PHP\nDESCRIPTION: This snippet demonstrates how to initialize a SleekDB Store object with a custom configuration array. The configuration array allows you to specify settings such as auto_cache, cache_lifetime, timeout, and primary_key. This configuration will be applied to all queries executed on the store unless overridden at the query level. Required dependency: SleekDB Library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/configurations.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\"\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Update Method Signature - SleekDB - PHP\nDESCRIPTION: Defines the signature of the `update()` method in the `Store` class, which accepts an array representing the data to be updated and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Store Constructor\nDESCRIPTION: Creates a new Store object and the store folder if it doesn't exist.  Requires the store name and database path.  Accepts an optional configuration array for store settings.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store in SleekDB\nDESCRIPTION: This PHP function deletes a store and wipes all its data and cache. It returns a boolean indicating success or failure.  Use with caution.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: String Function UPPER in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `UPPER` string function within the `select()` method of the QueryBuilder. It is used to make a field uppercase.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"UPPER\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store with Custom Configuration - PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a SleekDB store with custom configuration options in PHP. It shows how to set auto_cache, cache_lifetime, timeout, primary_key, and search parameters when creating a new SleekDB store instance. The snippet requires the SleekDB library to be installed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/configurations.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// default configurations\n$configuration = [\n  \"auto_cache\" => true,\n  \"cache_lifetime\" => null,\n  \"timeout\" => 120,\n  \"primary_key\" => \"_id\",\n  \"search\" => [\n    \"min_length\" => 2,\n    \"mode\" => \"or\",\n    \"score_key\" => \"scoreKey\",\n    \"algorithm\" => Query::SEARCH_ALGORITHM[\"hits\"]\n  ]\n];\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir, $configuration);\n```\n\n----------------------------------------\n\nTITLE: Getting Store Path in SleekDB\nDESCRIPTION: This PHP function retrieves the full path to the store, including the store name. It takes no parameters. Returns the path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Update Documents\nDESCRIPTION: Updates one or multiple documents. Takes an array of updatable data. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with SleekDB in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a data object in SleekDB using the `delete()` method after applying a `where` condition. The `where` method filters the data based on the provided criteria ('name' equals 'Joshua Edwards'), and the `delete()` method removes the matching data object from the database.  It assumes that `$usersDB` is an existing SleekDB object initialized elsewhere in the code.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersDB->where( 'name', '=', 'Joshua Edwards' )->delete();\n```\n\n----------------------------------------\n\nTITLE: Using orWhere() method in PHP\nDESCRIPTION: This code shows the declaration of the `orWhere()` function for the QueryBuilder object.  It works as the OR condition of SQL. If you provide multiple conditions they are connected with an `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get one document with findOneBy in SleekDB (PHP)\nDESCRIPTION: The `findOneBy()` method retrieves a single document from a SleekDB store based on specified criteria.  It supports complex nested conditions using AND/OR operators. It returns one document or `null` if nothing is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Example JSON data structure for SleekDB\nDESCRIPTION: This JSON snippet illustrates the data structure that the SleekDB `where` query targets. The structure contains nested objects representing a post with an author and their role.  SleekDB can filter by these nested properties. Note that SleekDB does not require a predefined schema, but this example shows the format for which the example PHP query is designed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Results\nDESCRIPTION: Executes the query and returns the results as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in SleekDB\nDESCRIPTION: This code snippet demonstrates how to retrieve all documents from a SleekDB store using the `findAll()` method. It returns an array containing all documents or an empty array if no documents exist in the store. No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: orWhere Method Definition PHP\nDESCRIPTION: This code snippet defines the `orWhere` method, which allows adding OR conditions to the query. Multiple orWhere calls are chained.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: orWhere Method Definition in PHP\nDESCRIPTION: This snippet shows the method signature for `orWhere()`, used to add an OR condition to the query.  Multiple `orWhere` calls are combined with `OR`, while conditions within each `orWhere` are combined with `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Skip Method Usage - PHP\nDESCRIPTION: Skips the first 10 documents in the result set. The `skip` method allows for pagination or retrieving data from a specific offset. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Not In Condition (Deprecated)\nDESCRIPTION: Add \"not in\" condition to filter data. Deprecated since version 2.4, use \"not in\" condition instead. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Find All Documents\nDESCRIPTION: Retrieves all documents from the store. Supports ordering, limiting, and offsetting the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Inserting multiple documents into a Store in PHP\nDESCRIPTION: This code snippet demonstrates how to insert multiple documents into the store at once. The `insertMany` function accepts an array of associative arrays of data, inserts them into the store, and returns the inserted documents with their new, unique `_id` values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Initializing Store Object PHP\nDESCRIPTION: Creates a new SleekDB Store object. Requires the `SleekDB\\Store` class. The constructor takes the store name ('users') and the directory path for the database files as arguments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Content in SleekDB with PHP\nDESCRIPTION: This PHP code snippet shows the `get()` function in SleekDB, which retrieves the cached content associated with the current query. It returns an array containing the cached data or `null` if the cache file is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Getting the store name\nDESCRIPTION: This snippet shows how to retrieve the name of the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Find Document By ID\nDESCRIPTION: Retrieves a single document by its _id. This is a fast operation because it finds the document directly by its file path. Returns the document as an array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int|string $id): array|null\n```\n\n----------------------------------------\n\nTITLE: getLifetime() - Get Cache Lifetime - PHP\nDESCRIPTION: Retrieves the configured lifetime for the current query's cache. The return value is either an integer representing the lifetime in seconds (where 0 means infinite), or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Distinct Usage Example (PHP)\nDESCRIPTION: Demonstrates how to use the `distinct` method of the SleekDB QueryBuilder to retrieve unique users based on their names.  The example shows using both a string and an array to specify the field for which distinct values are retrieved.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with except()\nDESCRIPTION: This PHP code uses the `except` method to exclude the '_id' and 'name' fields from the output when retrieving user information. The result will only include the 'age' field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\": 28], [\"age\": 18]]\n```\n\n----------------------------------------\n\nTITLE: Advanced `search()` with options - PHP\nDESCRIPTION: This snippet shows an advanced example of using the `search()` method with search options to prioritize certain fields and limit the results. It uses a nested field (`title.mainTitle`) and sets the search algorithm to 'prioritize'.  Requires a pre-existing 'news' store in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content PHP\nDESCRIPTION: This method caches content for the current query. It takes an array of content as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Deleting the entire store\nDESCRIPTION: This snippet demonstrates how to delete the entire store, including all data and cache. Use with caution!\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store\nDESCRIPTION: This snippet demonstrates inserting a new document into the 'users' store. It assumes that `$userStore` has been initialized previously. It shows how to add a user with a name, email, and avatar information to the store as a JSON document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Storing Current Date and Time in SleekDB\nDESCRIPTION: Shows storing the current date and time in SleekDB using `DateTime` objects. Demonstrates formatting the date as a string or storing it as a timestamp before inserting it into the database. Requires SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/dates.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime();\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->format(\"Y-m-d H:i:s\")\n];\n\n// OR\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID\nDESCRIPTION: Returns the last created store object ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB Manually in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to import the SleekDB Store class manually after downloading and extracting the SleekDB library without using Composer. This require_once statement makes the Store class available for use.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Add In Condition PHP\nDESCRIPTION: Adds an \"in\" condition to filter data. Takes the field name and an array of values to check against. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: OrWhere Clause - PHP\nDESCRIPTION: This example shows the use of the `orWhere` method to add an OR condition to the query. It retrieves users that have `(products.totalSaved > 10 AND products.totalBought > 20) OR products.shipped = 1`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: JSON Document Structure Example\nDESCRIPTION: This JSON snippet illustrates the structure of a document that can be queried using the previous PHP code. It shows a nested structure containing a 'post' object, an 'author' object within it, and a 'role' property within the 'author'. This structure aligns with the `where` clause targeting 'post.author.role'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OrderBy Multiple Fields - PHP\nDESCRIPTION: Sorts the result set by 'name' and then 'age', both in ascending order. Demonstrates sorting by multiple fields with the `orderBy` method. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"_id\" => 13, \"name\" => \"Anton\", \"age\" => 20],\n  [\"_id\" => 4, \"name\" => \"Aragon\", \"age\" => 16], \n  [\"_id\" => 2, \"name\" => \"Aragon\", \"age\" => 17], \n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Token in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `getToken()`. It returns the unique token for the current query, used for saving and retrieving cache files. The token is returned as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Using Cache with No Lifetime in PHP\nDESCRIPTION: Example demonstrating how to use caching without a specific lifetime. The cache is invalidated when any documents are updated, deleted, or inserted in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document - PHP\nDESCRIPTION: This snippet demonstrates how to insert a single document (PHP array) into a SleekDB store using the `insert()` method. The method takes a PHP array as input and returns the inserted document including the automatically generated `_id`. The input array represents the data to be inserted.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/insert-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $userStore->insert($user);\n```\n\n----------------------------------------\n\nTITLE: Joining another store\nDESCRIPTION: This snippet demonstrates how to join the current store with another store using a Closure. It can be used multiple times to join multiple stores.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering with DateTime Objects in SleekDB (PHP)\nDESCRIPTION: Demonstrates how to filter data in SleekDB using PHP DateTime objects with the `findBy` method and the `BETWEEN` condition. Requires `SleekDB\\Store` and converts date strings to DateTime objects for comparison.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/dates.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Getting the use cache\nDESCRIPTION: This snippet demonstrates how to retrieve if the caching is enabled.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Get Token in PHP\nDESCRIPTION: This function returns the unique token for the current query, used to save and retrieve a cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Getting the Default Cache Lifetime - PHP\nDESCRIPTION: This code snippet defines the method for retrieving the store-wide default cache lifetime. It takes no parameters and returns the cache lifetime as an integer or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from Store PHP\nDESCRIPTION: Retrieves all documents from the 'news' store using the `findAll` method. The `findAll` method returns an array containing all the documents in the store, each document represented as an associative array. The results are printed to the console using the `print_r` function. No specific input is needed and the output is an array of associative arrays representing the documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Update Or Insert Many Documents with Auto ID (PHP)\nDESCRIPTION: This snippet demonstrates how to update or insert multiple documents in SleekDB using the `updateOrInsertMany()` method. If a document does not have an `_id` one will be generated automatically during the insertion.  The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = [\n    [\n        \"_id\" => 23,\n        \"name\" => \"John\",\n        ...\n    ],\n    [\n        \"_id\" => 25,\n        \"name\" => \"Max\",\n        ...\n    ],\n    [\n        \"name\" => \"Lisa\",\n        ...\n    ]\n    ...\n];\n$userStore->updateOrInsertMany($users);\n```\n\n----------------------------------------\n\nTITLE: Selecting nested fields with SleekDB aliases\nDESCRIPTION: This PHP snippet showcases how to retrieve a nested field ('userBiography.age') and assign an alias ('age') to it using the `select()` method. The query builder is used to select the nested field with the alias, and the fetched result includes the '_id' and 'age' fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Method Definition (PHP)\nDESCRIPTION: Defines the signature of the `join()` method in SleekDB's QueryBuilder, showcasing the parameters it accepts: a Closure for defining the join logic and a string for specifying the name of the new property to add to each document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Setting the Limit Amount - PHP\nDESCRIPTION: This code snippet defines the method for setting the maximum number of data records to return. It takes an integer representing the limit as input and returns the QueryBuilder object, enabling query chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Join Method Definition\nDESCRIPTION: This code snippet defines the signature of the `join()` method used in SleekDB's QueryBuilder. It takes a Closure and a string as arguments. The Closure represents the function that performs the sub-query to retrieve related data, and the string specifies the name of the property to store the joined data in.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content in PHP\nDESCRIPTION: Sets and caches the provided content for the current query, identified by its token. The `$content` parameter, an array, is the data to be stored in the cache file. This method is crucial for persisting query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Store search() Method Signature in SleekDB (PHP)\nDESCRIPTION: This snippet shows the function signature of the `search()` method of the `Store` class in SleekDB. It accepts an array of fields to search, a search query string, an optional array for ordering results, an optional limit for the maximum number of results, and an optional offset for pagination. It returns an array of documents that match the search criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(array $fields, string $query, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Getting Database Path in SleekDB\nDESCRIPTION: This PHP function returns the path to the database folder.  It doesn't accept any parameters. Returns the path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: Example JSON Document for SleekDB (JSON)\nDESCRIPTION: This JSON snippet represents the structure of a data document that can be stored and queried in SleekDB. It showcases the nested structure that the `where` clause in the PHP example targets. This illustrates schema-free nature of the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Store (Internal)\nDESCRIPTION: This method is used internally. Returns the Store object used to create the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Where Example (SQL)\nDESCRIPTION: This SQL query demonstrates a complex `WHERE` clause with nested conditions, including `AND` and `OR` operators, along with `LIKE` and comparison operators.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB with PHP\nDESCRIPTION: This code snippet shows how to query nested properties within JSON documents using SleekDB's `where` clause. The example demonstrates filtering data based on the 'role' property nested under 'post' and 'author'. This functionality is particularly useful given SleekDB's schema-free nature.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 2 PHP\nDESCRIPTION: Illustrates how to use the `useCache()` method with a specific lifetime (120 seconds). The cached results will be valid for 2 minutes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Path in SleekDB\nDESCRIPTION: This snippet shows the function definition for `getCachePath()`, which returns the path to the cache directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Query Class Constructor\nDESCRIPTION: Creates a new Query object.  Internally, it creates a new Cache object. Parameters: `$queryBuilder` (QueryBuilder) - the QueryBuilder object to associate with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Delete Documents (Query) PHP\nDESCRIPTION: Deletes matched documents based on the current query. Takes a return option to specify the return type. Returns a boolean, array, or integer depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: In Clause Example with SleekDB (PHP)\nDESCRIPTION: This code demonstrates how to use the deprecated `in()` method to retrieve users from specific countries. It shows the usage with a single field and with multiple chained `in()` calls. Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB Store PHP\nDESCRIPTION: This snippet inserts a new article into the 'news' store. The article data is provided as an associative array. The insert method automatically adds a unique '_id' property to the inserted data. The result variable will contain all of the inserted data including the unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Multiple in() Operations - PHP\nDESCRIPTION: This PHP code snippet showcases the use of multiple `in()` methods chained together to filter users based on both 'country' and 'age'. It retrieves users who are from the specified countries AND are of the specified ages. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SQL Filtering with complex WHERE clause\nDESCRIPTION: Demonstrates a complex SQL WHERE clause using `like` operator and combined with `AND` and `OR` operators for advanced filtering based on product totals, name, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n```\n\n----------------------------------------\n\nTITLE: SleekDB Delete by ID Example\nDESCRIPTION: This example shows how to delete a document by its `_id`. It deletes the document with `_id` equal to 12 and returns `true` if successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder search() Method Signature in SleekDB (PHP)\nDESCRIPTION: This code shows the function signature of the `search()` method of the `QueryBuilder` class in SleekDB. It accepts an array or string of fields to search, a search query string, and an optional array of search options. It returns the QueryBuilder instance, allowing for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/searching.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using Cache with Infinite Lifetime in PHP\nDESCRIPTION: Example demonstrating how to set an infinite cache lifetime.  It's achieved by setting lifetime to 0 using useCache(0).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with Timestamps in SleekDB\nDESCRIPTION: This snippet showcases filtering SleekDB data by storing dates as timestamps. It inserts an article with a timestamp and then retrieves articles where the `releaseDate` is within a range of specified timestamps using the `IN` operator. It highlights an approach that avoids direct DateTime comparison during retrieval.  It also assumes SleekDB is installed and autoloaded, and a 'news' store is already created.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/dates.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: setLifetime() Method in PHP\nDESCRIPTION: This snippet shows the `setLifetime` method, used to set the lifetime for the current query/token. It accepts an integer (in seconds, where 0 is infinite) or null (no lifetime).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime in PHP\nDESCRIPTION: This function sets the lifetime for the current query's cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: Initializes a SleekDB store named 'news' within the specified database directory.  It creates a new instance of the `\\SleekDB\\Store` class, passing the store name and database directory as arguments. The store is created automatically if it doesn't already exist. The function requires the SleekDB library to be included. The output is a `Store` object representing the newly initialized store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: Store Constructor\nDESCRIPTION: Creates a new Store object. This internally creates a new store folder if it doesn't exist. Requires the store name, data directory, and an optional configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $dataDir, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: PHP notIn() Method Definition\nDESCRIPTION: This PHP code defines the `notIn` method signature. It takes the field name and an array of values. This method retrieves records where the field does NOT contain any of the values in the array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Store Path\nDESCRIPTION: Returns the full path to the store, including the store name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Getting the store path in PHP\nDESCRIPTION: This code snippet retrieves the full path to the store, including the store name. The `getStorePath` method returns a string representing the complete path to the store directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Removing Fields from Documents PHP\nDESCRIPTION: These snippets demonstrate how to remove fields from documents that match a query using the `removeFields()` method. The first example removes the 'status' field from users in London. The second example removes a nested field ('address.street').\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where(\"city\", \"=\", \"london\")\n  ->removeFields([ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store Object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB Store object, specifying the store name ('users') and the directory where the database files will be stored. This is a prerequisite for performing any data editing operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Executing a query and getting results in PHP\nDESCRIPTION: This code demonstrates how to execute a query and retrieve the results. The `fetch` method returns an array containing the results of the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Excluding fields using SleekDB except()\nDESCRIPTION: This PHP snippet demonstrates how to use the `except()` method to exclude specific fields ('_id' and 'name') from the result set. The query builder is initialized, the fields to exclude are specified using `except()`, and the resulting query will return all fields except those excluded.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: Grouping and Filtering with Rounding (PHP)\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to retrieve the name and rounded price of active products, filtering for products with a rounded price between 500 and 1000. It uses the `ROUND` function within the `select` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"name\", \"roundedPrice\" => [\"ROUND\" => [\"price\", 0]] ])\n  ->where([\"active\", \"=\", true])\n  ->having([ \n    [\"roundedPrice\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"roundedPrice\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: in() function definition PHP\nDESCRIPTION: Defines the signature of the deprecated in function. It takes a field name and an array of values as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Join Function Signature in SleekDB\nDESCRIPTION: This PHP code shows the function signature of the `join` method in the SleekDB QueryBuilder class. This method is used to join two or multiple stores together.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: where() Example 1: Single Condition in PHP\nDESCRIPTION: This example shows how to use the `where()` method with a single condition to filter users whose name is \"Joshua Edwards\". It demonstrates both inline and multi-step approaches to building and executing the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// inline\n$users = $userStore\n  ->createQueryBuilder()\n  ->where( [ \"name\", \"=\", \"Joshua Edwards\" ] )\n  ->getQuery()\n  ->fetch();\n\n// creating the QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n// preparing the query with the QueryBuilder\n$userQueryBuilder->where( [ \"name\", \"=\", \"Joshua Edwards\" ] );\n\n// executing the query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime\nDESCRIPTION: Returns the cache lifetime for the current query, which can be null (no lifetime) or an integer representing the lifetime in seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Filtering with `in` (Deprecated) in SleekDB (PHP)\nDESCRIPTION: This code snippet showcases the usage of the deprecated `in` method in SleekDB for filtering data. It demonstrates how to retrieve users based on their country being one of the specified values in the given array. This method has been deprecated in favor of `where` and `orWhere`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache with QueryBuilder in PHP\nDESCRIPTION: This snippet shows how to regenerate the cache for a specific query using the `regenerateCache()` method.  The first example shows setting up an infinite lifetime cache and the second shows using the regenerateCache after setting a 20 second lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Multiple Where Conditions - Single Call in PHP\nDESCRIPTION: Demonstrates how to use a single `where` call with an array of conditions to filter data.  It retrieves users with `products.totalSaved > 10` AND `products.totalBought > 20`. This example showcases an alternative syntax to achieve the same result as multiple `where` calls.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Documents (Query)\nDESCRIPTION: Updates one or multiple documents based on the current query. Parameters: `$updatable` (array) - an associative array containing the fields to update and their new values, `$returnUpdatedDocuments` (bool, optional) - whether to return the updated documents. Returns an array or a boolean depending on the value of `$returnUpdatedDocuments`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_56\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable, bool $returnUpdatedDocuments = false): array|bool\n```\n\n----------------------------------------\n\nTITLE: Simple orWhere() condition in PHP\nDESCRIPTION: This code snippet demonstrates using `orWhere()` in conjunction with `where()` to filter data based on combined `AND` and `OR` conditions. It retrieves users where `(products.totalSaved > 10 AND products.totalBought > 20) OR products.shipped = 1`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Document for Nested Query (JSON)\nDESCRIPTION: This JSON structure illustrates the data format that the SleekDB query targets. The query attempts to find documents where the 'role' field within the nested 'post.author' object is equal to 'admin'.  This demonstrates SleekDB's ability to handle schema-free data and query deeply nested structures.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Directory PHP\nDESCRIPTION: Defines the directory where SleekDB will store its data.  It uses the `__DIR__` magic constant to create an absolute path to a directory named 'myDatabase' within the current directory. This path is then used to initialize the database store. No dependencies are required. The output is a string representing the path to the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: First\nDESCRIPTION: Return the first document. (More efficient than `fetch` but `orderBy` does not work)\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents\nDESCRIPTION: Illustrates how to delete documents that match the query criteria using the `delete()` method of the SleekDB Query object. The `$returnOption` parameter allows specifying different return types after the deletion operation (boolean, count, or deleted documents).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL)\n```\n\nLANGUAGE: php\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_COUNT);\n// output: 14\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor\nDESCRIPTION: Creates a new Cache object. Accepts a Query object, a cache token array, and a cache lifetime as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Join Stores PHP\nDESCRIPTION: Joins the current store with another one.  Can be used multiple times to join multiple stores. Takes a callable join function and a data property name.  Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nfunction join(callable $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve all documents from the 'newsStore' using the `findAll()` method. It returns an array containing all documents or an empty array if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content for SleekDB Query (PHP)\nDESCRIPTION: Sets and caches the provided content for the current query using the query's token. This allows storing query results for faster retrieval on subsequent requests. The cached data is stored as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Grouping Products with SQL\nDESCRIPTION: This SQL query groups active products by category and counts the number of products in each category, aliasing the count as 'productAmount'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: In Condition (Deprecated)\nDESCRIPTION: Adds an \"in\" condition to filter data. Deprecated since version 2.4, use \"in\" condition instead. Accepts the field name and an array of values. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: setLifetime() method in PHP\nDESCRIPTION: Describes the `setLifetime()` method of the Cache class. This method sets the lifetime for the current query's cache. It accepts an integer (in seconds, where 0 means infinite) or null (no lifetime) as the `$lifetime` parameter.  Returns the `Cache` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: String Function LOWER in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `LOWER` string function within the `select()` method of the QueryBuilder. It is used to make a field lowercase.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"LOWER\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Retrieving distinct values with `distinct` in PHP\nDESCRIPTION: This PHP snippet uses the `distinct` method to retrieve unique users based on their 'name'. It demonstrates both string and array usage for specifying fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Prioritize Position Algorithm in SleekDB\nDESCRIPTION: Demonstrates the 'prioritize_position' algorithm, which considers the position of the first search hit in addition to prioritizing fields like the 'prioritize' algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize_position\"]\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory PHP\nDESCRIPTION: This method retrieves the location (directory path) of the store. It returns the directory path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Limit Records\nDESCRIPTION: Set the amount of data record to limit. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping Products with SQL and SUM\nDESCRIPTION: This SQL query groups active products by category and subcategory, counts the products, sums the views, and orders the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: Update Documents (Query) PHP\nDESCRIPTION: Updates one or multiple documents based on the current query. updatable (array): An array containing the data to update.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Skipping documents with `skip` in PHP\nDESCRIPTION: This PHP snippet uses the `skip` method to retrieve all users except the first 10 found in the dataset, similar to the OFFSET clause in SQL.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example\nDESCRIPTION: This is an example of an SQL query demonstrating complex conditions using AND, OR, LIKE, and BETWEEN operators. It targets fields like products.totalSaved, products.totalBought, name, and age to retrieve specific user data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  (\n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28))\n    )\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path Method PHP\nDESCRIPTION: This snippet shows the definition of the `getCachePath` method in PHP. It returns the path to the cache directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Complex WHERE Clause in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates a complex WHERE clause equivalent in SleekDB using PHP. It shows how to combine multiple conditions using OR and AND operators within the `findOneBy` method. Requires a SleekDB store instance named `$newsStore`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime PHP\nDESCRIPTION: This code snippet shows the definition of the `setLifetime()` method. It sets the lifetime for the current query's cache.  The lifetime is specified in seconds (int or null). 0 indicates infinite lifetime, and null indicates no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor PHP\nDESCRIPTION: Creates a new QueryBuilder object.  Requires a `Store` object to be passed in as a dependency to operate on. Used for building complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Content in SleekDB\nDESCRIPTION: This snippet shows the function definition for `set()`, which sets and caches the provided content for the current query's token. It accepts an array as the content to be cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Token Array in SleekDB\nDESCRIPTION: This is an internal PHP function. It returns an array used to generate a unique token for the current query.  This token is used for caching. Returns an array of cache token elements.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: SleekDB deleteById() Function Signature in PHP\nDESCRIPTION: Shows the signature of the `deleteById()` function in SleekDB, which allows deleting a single document based on its `_id`. It takes the document's `_id` (integer or string) as a parameter and returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Returning the first document in PHP\nDESCRIPTION: This code demonstrates how to retrieve the first document matching the query criteria. The `first` method returns the first document as an array.  It is more efficient than `fetch` but does not work with `orderBy`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Grouping and Filtering with Rounding (SQL)\nDESCRIPTION: This SQL query retrieves the name and rounded price of active products, filtering for products with a rounded price between 500 and 1000.  It uses the `ROUND` function for price manipulation and `HAVING` for filtering.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  name, \n  ROUND(price, 0) AS roundedPrice\nWHERE \n  active = true \nHAVING\n  roundedPrice > 500 AND roundedPrice < 1000;\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path PHP\nDESCRIPTION: This method retrieves the path to the cache folder. It returns the path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Add Nested Where Condition\nDESCRIPTION: Adds nested 'where' conditions to the query. Deprecated since version 2.3, use 'where' and 'orWhere' instead. Takes an array of conditions and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder\nDESCRIPTION: Returns a new `QueryBuilder` object. This object is used to build complex queries with conditions, ordering, and other constraints. No specific dependencies beyond the Store class itself.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Nested Where (Deprecated)\nDESCRIPTION: Adds nested where conditions to filter data. Deprecated since version 2.3, use `where` and `orWhere` instead. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: getQuery Method in PHP\nDESCRIPTION: This code snippet shows the signature of the getQuery method of the QueryBuilder class in PHP. It retrieves the Query object which is then used to execute the prepared query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Many Documents PHP\nDESCRIPTION: Updates or inserts multiple documents using the `updateOrInsertMany()` method.  If a document with the specified `_id` exists, it's updated; otherwise, a new document is inserted. The `$autoGenerateIdOnInsert` parameter controls whether new `_id`s are automatically generated for documents without an `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function updateOrInsertMany(array $data, bool $autoGenerateIdOnInsert = true): array\n```\n\n----------------------------------------\n\nTITLE: Using `search()` method of `Store` - PHP\nDESCRIPTION: This snippet demonstrates using the `search()` method directly on the `Store` class to perform a full-text search. It shows how to specify the fields to search, the query, and the order in which to sort the results. Requires a SleekDB store named 'news'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a SleekDB Store\nDESCRIPTION: This code snippet shows how to insert a new document into a SleekDB store using the `insert` method. It assumes that the `$userStore` object has been previously created. The snippet inserts a user with a name and email into the 'users' store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/stores.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com'\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Selecting fields with aggregation functions using groupBy in SleekDB PHP\nDESCRIPTION: Shows how to use `select()` in conjunction with `groupBy()` to perform aggregations like SUM.  It demonstrates selecting the age and the sum of followers grouped by age. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Store Class Search with Ordering (PHP)\nDESCRIPTION: This example shows how to use the `search()` method of the `Store` class to perform a full-text search in SleekDB. The search is performed against the \"title\", \"description\", and \"content\" fields of the documents, and the results are sorted by relevance using the \"searchScore\" field in descending order. This is a simpler approach compared to using the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/searching.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: Update Documents\nDESCRIPTION: Updates one or more documents in the store based on the data provided in the `updatable` array. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Matched Documents - PHP\nDESCRIPTION: This code snippet demonstrates the method for deleting documents that match the criteria defined in the current query. It takes an optional return option as input to control what is returned after the deletion and returns a boolean, array, or integer depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Get Query Token in PHP\nDESCRIPTION: This snippet displays the signature for the `getToken()` method, part of SleekDB's Cache class, written in PHP. This function is responsible for generating the unique token associated with a query, which is later used to identify and retrieve the cached data. It returns the token as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Deleting Data and Retrieving Results in PHP\nDESCRIPTION: This code shows how to delete documents from a SleekDB store based on criteria and retrieve the deleted documents. It imports the Query class to specify the `DELETE_RETURN_RESULTS` option, which causes the `deleteBy()` method to return the deleted documents as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Changing SleekDB Store Destination (PHP)\nDESCRIPTION: Demonstrates how to dynamically change the store destination using the `changeStore()` method. This allows a single Store object to manage multiple data stores by changing the `$storeName` and `$dataDir` parameters, if needed.  Configurations persist if the `$configuration` parameter is empty.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Inserting a User into SleekDB in PHP\nDESCRIPTION: This code snippet demonstrates inserting a new user into the 'users' store. It inserts a document with 'name', 'email', and 'avatar' fields. The 'avatar' field is an associative array containing small and large avatar URLs.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/managing-store.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->insert([\n    'name' => 'Mike Doe',\n    'email' => 'miked@example.com',\n    'avatar' => [\n      'sm' => \"/img-sm.jpg\",\n      'lg' => \"/img-lg.jpg\"\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Get Primary Key\nDESCRIPTION: Gets the name of the field used as the primary key. Returns a string representing the primary key field name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: disableCache() with SleekDB in PHP\nDESCRIPTION: This function disables caching for a specific query, overriding the store-wide caching setting. This ensures that the query always fetches the latest data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Directory Path (PHP)\nDESCRIPTION: Returns the file system path to the cache directory used by SleekDB.  This path indicates where the cache files are stored. This allows to check where cache files are stored, or to implement custom cache management operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Store Constructor PHP\nDESCRIPTION: Creates a new Store object. This function initializes a new store with a given name, data directory, and optional configuration. It handles the creation of a new store folder if it doesn't exist. The parameters are the store name (string), the data directory path (string), and an optional configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(string $storeName, string $dataDir, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version with Composer\nDESCRIPTION: This command installs the development version of SleekDB using Composer. Use this only if you are experimenting or have a specific reason, as the API might be inconsistent.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: SleekDB Nested Joins PHP\nDESCRIPTION: This example demonstrates a nested join in SleekDB, joining 'users' with 'articles', and then joining each 'article' with 'comments'.  It retrieves users, their articles, and the comments associated with each article. `userStore`, `commentStore`, and `articleStore` are initialized using `SleekDB\\Store`, each representing a database file in the `$dataDir`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/join-stores.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Storing Date as a String in SleekDB\nDESCRIPTION: This snippet illustrates how to store a date as a string when inserting data into a SleekDB store.  The `releaseDate` field is assigned a string value representing the date. This example assumes you have already initialized the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB Store using PHP\nDESCRIPTION: This code snippet demonstrates how to insert an array of data representing a news article into the 'news' store. The 'insert' method automatically adds a unique '_id' property to the data. The inserted data is then stored in the $results variable.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: delete Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `delete` method within the Cache class. This method is used to delete the cache file associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Getting a SleekDB Query Object\nDESCRIPTION: This snippet shows how to obtain a Query object from a QueryBuilder instance in SleekDB.  The Query object is then used to execute database queries.  The QueryBuilder must be initialized before calling `getQuery()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Adding a 'having' condition to the query\nDESCRIPTION: This snippet shows how to add a 'having' condition to filter the results after operations like join(), search(), select(), and groupBy().\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get First Document\nDESCRIPTION: Returns the first document that matches the query criteria. This is more efficient than `fetch` but `orderBy` does not work. Returns the document as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Data in SleekDB\nDESCRIPTION: This PHP function checks if any data is found matching the query criteria. It returns a boolean value: `true` if data is found, `false` otherwise.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Find Documents by Criteria\nDESCRIPTION: Retrieves documents from the store based on specified criteria. Supports ordering, limiting, and offsetting the results. Returns an array of documents that match the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array\n```\n\n----------------------------------------\n\nTITLE: Getting the Query object\nDESCRIPTION: This snippet demonstrates how to retrieve a Query object from the QueryBuilder. The Query object is used to execute the built query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: in Method Definition in PHP\nDESCRIPTION: This snippet shows the method signature for `in()`, used to filter data based on whether a field's value is present in a given array of values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Data with having - PHP\nDESCRIPTION: This PHP code demonstrates how to use the `having` method in SleekDB to filter grouped data based on aggregated values. It selects the 'category' and the sum of 'views' (aliased as 'totalViews'), filters for 'active' products, groups by 'category', and filters the groups to only include those with 'totalViews' greater than 500 and less than 1000. Dependencies include the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"category\", \"totalViews\" => [\"SUM\" => \"views\"] ])\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"])\n  ->having([ \n    [\"totalViews\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"totalViews\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: where Method Example 2 in PHP\nDESCRIPTION: This code shows using the where method with multiple conditions to retrieve users based on product data. It includes an example of using the where method multiple times as well as a single where method using a nested array. Both approaches retrieve users with products.totalSaved > 10 AND products.totalBought > 20.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Path in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `getCachePath()`. It returns the file system path to the cache directory as a string. This allows for direct interaction with the cache files if needed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Filtering with multiple conditions using where in SleekDB PHP\nDESCRIPTION: Demonstrates another example of using `where` and `orWhere` to create filters.  It shows chaining the `where` and `orWhere` methods and nesting conditions. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document in SleekDB\nDESCRIPTION: This PHP function inserts a new document into the store. It takes an associative array `$data` representing the document to be inserted as input.  It returns the inserted document with its new unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Using useCache() without Lifetime PHP\nDESCRIPTION: This snippet demonstrates how to use the useCache() method without specifying a lifetime, which results in the cache being regenerated on every update, delete, or insert operation. The query retrieves 20 active users and caches the results. Subsequent calls will retrieve the data from the cache until the data changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache() // Use caching with lifetime = null\n    ->getQuery()\n    ->fetch();\n\n// retrieve from cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n\n// insert a new user (cache with no lifetime will be deleted)\n$newUser = [\"name\" => \"Max\", \"active\" => 0];\n$userStore->insert($newUser);\n\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Cache Files with No Lifetime in PHP\nDESCRIPTION: This code defines the `deleteAllWithNoLifetime()` method in the SleekDB Cache class, written in PHP. It deletes all cache files in the current store that have no defined lifetime (null), meaning caches that should be aggressively invalidated. It returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB manually (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to include the SleekDB `Store.php` file in your project when installing SleekDB manually. This assumes you have extracted the downloaded SleekDB archive into a directory named `SleekDB` relative to your current file. It is crucial that the path to the `Store.php` matches your directory structure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: String Function CONCAT in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `CONCAT` string function within the `select()` method of the QueryBuilder. It is used to concatenate multiple fields with a glue between each.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"CONCAT\" => [GLUE, \"fieldName1\", \"fieldName2\", ...]], ...]\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path in PHP\nDESCRIPTION: This code shows the function signature for `getCachePath()` in PHP, belonging to the SleekDB Cache class. This method returns the file path to the directory where cache files are stored. It returns the cache path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: useCache() Function Definition PHP\nDESCRIPTION: The useCache method activates caching and defines the cache lifetime on a query by query basis.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: This snippet initializes a SleekDB store. If the store does not exist, it will be created automatically.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $databaseDirectory);\n```\n\n----------------------------------------\n\nTITLE: Join Store\nDESCRIPTION: Join current store with another one. Can be used multiple times to join multiple stores. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Finding News Articles by Author in SleekDB (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `findBy()` method to find all news articles where the author is \"John\". It showcases the basic usage of the `$criteria` argument with a simple equality condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/criteria.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"]);\n```\n\n----------------------------------------\n\nTITLE: Get document by ID with findById in SleekDB (PHP)\nDESCRIPTION: The `findById()` method retrieves a single document from a SleekDB store based on its unique ID. It accesses the file directly, making it a fast method. It requires an integer ID as input and returns the document as an array or `null` if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/fetch-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction findById(int $id): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findById(12);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Criteria - PHP\nDESCRIPTION: This code snippet defines the method for deleting documents that match the provided criteria. It takes an array of criteria and an optional return option as input. The return option controls what is returned after deletion (boolean, deleted array, or null).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: SleekDB Change Store Example\nDESCRIPTION: This code demonstrates how to change the active store in SleekDB using the `changeStore()` method. It first creates a store, inserts a user, then changes the store to 'alerts' and inserts an alert message.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* create store */\n$store = new Store(\"users\", __DIR__ . \"/database\");\n\n/* insert new user */\n$store->insert([\"username\" => \"admin\"]);\n\n/* change store destination */\n$store->changeStore(\"alerts\");\n\n/* insert a new alert into the alerts store */\n$store->insert([\"content\" => \"new user with username admin added.\"]);\n```\n\n----------------------------------------\n\nTITLE: Finding All Data in SleekDB Store using PHP\nDESCRIPTION: This code snippet retrieves all news articles from the 'news' store using the `findAll()` method.  The results are then printed to the console using `print_r()`.  The result of `findAll()` is an array containing all documents within the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Changing Store Destination in SleekDB (PHP)\nDESCRIPTION: The `changeStore()` method allows you to dynamically change the store destination of a SleekDB `Store` object. This example demonstrates how to create a store, insert data, change the store's destination, and insert more data into the new store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/advanced.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction changeStore(string $storeName, string $dataDir = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Delete Cache PHP\nDESCRIPTION: This code snippet shows the definition of the `delete()` method. It deletes the cache file associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB (PHP)\nDESCRIPTION: This PHP code demonstrates how to query nested properties within JSON documents stored in SleekDB. The `where` clause targets the 'post.author.role' property to filter data based on the author's role.  It requires SleekDB to be properly installed and configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Creating SleekDB Store PHP\nDESCRIPTION: Creates a SleekDB store, which is similar to a table in SQL databases or a collection in MongoDB. The `store()` method is used to create the store, and if it doesn't exist, it will be created automatically. Requires a valid data directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = \\SleekDB\\SleekDB::store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Multiple where Conditions using multiple calls in PHP\nDESCRIPTION: This snippet demonstrates how to use the `where()` method multiple times to apply multiple filter conditions connected with `AND`. Each `where` call adds a new `AND` condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update or Insert a User with ID No Auto-Generate in PHP\nDESCRIPTION: This example shows how to use the `updateOrInsert()` method to update or insert a user with _id = 23. This example specifically sets the `$autoGenerateIdOnInsert` parameter to false, telling the function to not autogenerate the id on inserts.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    \"_id\" => 23,\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user, false);\n```\n\n----------------------------------------\n\nTITLE: orWhere Example 1 - Chained orWhere with where in PHP\nDESCRIPTION: This code snippet demonstrates using `orWhere` in conjunction with `where` to create a query with OR conditions. Users will be filtered based on total saved, total bought and shipped.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Multiple where() Conditions in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to use multiple `where()` conditions to filter data. It retrieves users from the 'users' store where 'products.totalSaved' is greater than 10 and 'products.totalBought' is greater than 20.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->where( 'products.totalSaved', '>', 10 )\n    ->where( 'products.totalBought', '>', 20 )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB Store class (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to manually import the SleekDB Store class into your project. It uses the `require_once` statement to include the `Store.php` file, making the SleekDB functionalities accessible within your script.  This is an alternative to Composer-based autoloading.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Checking Document Existence in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to check if a document exists based on a given query using the exists() method of the Query object in PHP. The code checks if a username exists by specifying a condition and calling the exists() method on the resulting query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userNameExists = $userQueryBuilder\n  ->where([ \"username\", \"=\", \"foobar\" ])\n  ->getQuery()\n  ->exists();\n```\n\n----------------------------------------\n\nTITLE: Update a Document in SleekDB PHP\nDESCRIPTION: Demonstrates how to update an entire document using `update()` in SleekDB. It requires an associative array representing the updated document, including the '_id' field. Returns true on success and false if the document with the specified _id does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files in PHP\nDESCRIPTION: Deletes all cache files within the current store. This clears the entire cache for the store, forcing fresh data retrieval for all queries.  No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Path in SleekDB with PHP\nDESCRIPTION: This PHP code snippet shows the `getCachePath()` function in SleekDB, which returns the file system path to the cache directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Having Function Signature in SleekDB\nDESCRIPTION: This PHP code shows the function signature of the `having` method in the SleekDB QueryBuilder class.  This method is used to filter grouped documents based on specified criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update\nDESCRIPTION: Update one or multiple documents, based on the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Adding a Where Condition - PHP\nDESCRIPTION: This code snippet shows the method to add a 'where' condition to the query. It takes an array of conditions as input and returns the QueryBuilder object. Multiple calls add 'and where' conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store\nDESCRIPTION: This code initializes a SleekDB store named 'news' within a specified database directory. It uses the SleekDB\\Store class to create a new store instance, which is a prerequisite for performing any database operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithm Constants - PHP\nDESCRIPTION: This snippet demonstrates how to access the available search algorithms defined as constants within the `Query` class. These constants are used to specify the algorithm to be used during a search operation in SleekDB. The example shows accessing the 'hits' algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/searching.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path\nDESCRIPTION: Retrieve the path to cache folder of current store. Returns a string representing the cache path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Use Cache PHP\nDESCRIPTION: This method enables caching for the current query. It accepts an optional cache lifetime in seconds. If no lifetime is specified, the store's default cache lifetime is used. It returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID PHP\nDESCRIPTION: This method returns the ID of the last created store object. It returns the ID as an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Example 3 in SleekDB PHP\nDESCRIPTION: Inserts a new user document without a specific ID, allowing SleekDB to auto-generate one. It requires the `$userStore` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Query object\nDESCRIPTION: This snippet shows how to create a new Query object from a QueryBuilder object. Internally it creates a new Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: where() Method Example 2 PHP\nDESCRIPTION: This code demonstrates using multiple `where` conditions, both using method chaining and passing an array of conditions to a single `where` call. The example retrieves users where `products.totalSaved > 10` AND `products.totalBought > 20`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// inline & using where method multiple times\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->where( [\"products.totalBought\", \">\", 20] )\n  ->getQuery()\n  ->fetch();\n\n// inline & using where method once\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Skipping data records\nDESCRIPTION: This snippet shows how to skip a specified number of data records in the query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int|string $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Accessing SleekDB Search Algorithms in PHP\nDESCRIPTION: This snippet shows how to access the available search algorithms within the SleekDB Query class.  The SEARCH_ALGORITHM constant is an array that contains the available algorithms, and this example accesses the 'hits' algorithm. This algorithm affects how search scores are generated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/configurations.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Method Definition in PHP\nDESCRIPTION: This snippet presents the method signature of the `regenerateCache` function. This function allows forcing the cache to be refreshed even if it's still valid based on its lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Check Query Existence\nDESCRIPTION: Checks if any data is found based on the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Delete All Caches with No Lifetime in PHP\nDESCRIPTION: This function deletes all cache files without a defined lifetime (null) in the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Numeric function ABS in PHP\nDESCRIPTION: Demonstrates how to use the `ABS` numeric function within the `select` method to get the absolute value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"ABS\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: getCachePath Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `getCachePath` method within the Cache class. This method returns the path to the cache directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: SleekDB Query with nestedWhere and city\nDESCRIPTION: This PHP snippet demonstrates a SleekDB query using `where` and `nestedWhere` to retrieve users with a specific status and residing in 'london', while also filtering based on age ranges. The outermost operation defaults to 'AND'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the condition properties in PHP\nDESCRIPTION: This method is used internally to retrieve an array containing all information needed to execute a query. The `_getConditionProperties` function returns an array with all the query conditions and properties.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 2 PHP\nDESCRIPTION: This example demonstrates how to use the `useCache()` method with a specified lifetime (120 seconds = 2 minutes).  It retrieves a list of 20 active users and caches the result for the specified duration.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with `where` and `nestedWhere` based on status, city and age in SleekDB (PHP)\nDESCRIPTION: This example illustrates the use of `where` and `nestedWhere` to filter users based on their status, city, and age. It demonstrates how to combine equality checks with range conditions to create more refined queries. The outermost operation defaults to AND if not specified.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find All Data in Store PHP\nDESCRIPTION: Retrieves all news articles from the 'news' store using the `findAll` method. The method returns an array containing all documents in the store. The `print_r` function is then used to output the retrieved data to the console for inspection.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Selecting nested fields with alias\nDESCRIPTION: Demonstrates selecting a field ('age') from a nested array ('userBiography.age') and assigning it an alias ('age'). This example shows how to access data within nested structures in SleekDB documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: SleekDB Query using notIn()\nDESCRIPTION: This PHP snippet uses the deprecated `notIn()` method to retrieve users who are NOT from specific countries. It's noted that this method is deprecated and `where` or `orWhere` should be used instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update User Name and Age by ID in PHP\nDESCRIPTION: This example demonstrates updating multiple fields ('name' and 'age') of a user with a specific ID using the `updateById()` method in SleekDB. It updates the user with _id = 24 to have the name 'Georg' and age 22.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Join - PHP\nDESCRIPTION: This code snippet shows the method to join the current store with another one. It takes a callable function and the data property name as input. Can be used multiple times to join multiple stores and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction join(callable $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data Structure for SleekDB Query\nDESCRIPTION: This JSON snippet demonstrates the data structure that the SleekDB query targets. The `where` clause in the previous PHP example queries the 'role' property nested within the 'post.author' object.  SleekDB accesses this nested structure to evaluate the query condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Document\nDESCRIPTION: Illustrates how to retrieve the first document that matches the query criteria using the `first()` method of the SleekDB Query object.  This method is optimized for retrieving a single result and is more efficient than `fetch()` when only one record is needed.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"email\", \"=\", \"foo@bar.com\" ])\n  ->getQuery()\n  ->first();\n```\n\n----------------------------------------\n\nTITLE: Getting a Query Object - PHP\nDESCRIPTION: This snippet defines the method to retrieve a `Query` object from the `QueryBuilder`.  The `Query` object is then used to execute the query that has been constructed by the builder. It does not take any parameters and returns a new Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Object in SleekDB (PHP)\nDESCRIPTION: Retrieves the Cache object associated with a Query object in SleekDB. This allows for fine-grained control over caching behavior for specific queries. The example demonstrates how to access the cache object using the `getCache()` method of a `Query` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: deleteBy() Method Definition PHP\nDESCRIPTION: This snippet defines the signature of the `deleteBy()` method of the `Store` class in SleekDB. It takes an array of criteria and an optional return option as parameters and returns an array, boolean, or integer depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): array|bool|int\n```\n\n----------------------------------------\n\nTITLE: Removing fields from documents with a Query in PHP\nDESCRIPTION: This code demonstrates how to remove fields from one or more documents based on the current query. The `removeFields` method accepts an array of field names to remove and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Using caching for a query in PHP\nDESCRIPTION: This code snippet enables caching for the current query. The `useCache` method accepts an optional cache lifetime (in seconds) and returns the modified `QueryBuilder` instance. If no lifetime is specified, the store's default lifetime is used.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Removing Fields with SleekDB Query\nDESCRIPTION: This code shows how to remove specific fields from documents matching a given query using the `removeFields()` method of the SleekDB Query object.  It removes the status field from users in London. Requires an initialized Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/query.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->removeFields([ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: Store search() Example 1 - PHP\nDESCRIPTION: Demonstrates using the `search()` method of the `Store` class to search through multiple fields. This method simplifies the search process by directly returning the results, allowing sorting by relevance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$result = $newsStore->search([\"title\", \"description\", \"content\"], $searchQuery, [\"searchScore\" => \"DESC\"]);\n```\n\n----------------------------------------\n\nTITLE: nestedWhere array structure in PHP\nDESCRIPTION: Illustrates the basic array structure for the `nestedWhere` method, indicating the `OUTERMOST_OPERATION` key that determines how the nested conditions are connected to other conditions. This structure allows for constructing complex and nested conditional queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple in calls for filtering in PHP\nDESCRIPTION: This snippet shows an example of using the `in()` method multiple times to filter users based on both their country and age. Demonstrates chaining `in()` calls.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content in PHP\nDESCRIPTION: This code displays the method definition for `get()` function in PHP, part of the SleekDB Cache class. This method retrieves content from the cache file, associated with the current query. It returns the content as an array if the cache file is found; otherwise, it returns null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with notIn() in PHP with SleekDB\nDESCRIPTION: This snippet shows how to use the `notIn()` method in SleekDB. It retrieves users whose 'country' field is NOT one of the values in the provided array: 'IN', 'KE', or 'OP'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB->notIn('country', ['IN', 'KE', 'OP'])->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Cache Object using getCache() in PHP\nDESCRIPTION: This code snippet shows how to retrieve the `Cache` object using the `getCache` method of the `Query` class. The `Cache` object allows for deeper control over caching.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Custom select function (closure)\nDESCRIPTION: Demonstrates using a custom select function (closure) to create a 'fullName' field by concatenating 'forename' and 'surname'.  Multiple code blocks show equivalent ways to implement the custom select function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => function($user){\n      return $user['forename'] . ', ' . $user['surname'];\n    },\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Select Fields\nDESCRIPTION: Specifies the fields to include in the query result. Takes an array of field names as input and returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Not In Condition PHP\nDESCRIPTION: Adds a \"not in\" condition to filter data based on whether a field's value is not present in a given array of values. fieldName (string): The name of the field to check. values (array, optional): An array of values to check against.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Method Definition (PHP)\nDESCRIPTION: This snippet shows the definition of the `join()` method in SleekDB's QueryBuilder.  It takes a Closure as the join function and a string as the property name.  The Closure returns either a result set from a subquery or a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with PHP\nDESCRIPTION: This code snippet shows how to fetch all documents that match a specified condition using the `fetch()` method of the Query object in SleekDB. The example retrieves all users located in London.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store instance named 'news' within a 'database' directory. It requires the SleekDB library to be included. The store object is then used for subsequent data fetching operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version (Shell)\nDESCRIPTION: This command installs the development version of SleekDB using Composer. The `dev-dev` tag specifies that you want to install the latest code from the `dev` branch. This version is not recommended for production use.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Using regenerateCache() to Force Cache Regeneration in PHP\nDESCRIPTION: Forces the cache to be regenerated for a specific query, regardless of its current lifetime.  This ensures that the query returns the most up-to-date data. The function returns the QueryBuilder object, allowing method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a User Store in PHP\nDESCRIPTION: This snippet shows how to create a 'users' store using SleekDB. The store is initialized with the name 'users' and the data directory specified by `$dataDir`. This is useful for storing user-related data within the SleekDB database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store\nDESCRIPTION: This code snippet demonstrates how to delete a SleekDB store using the `deleteStore()` method. This will remove the store directory and all data and cache associated with it. It assumes that the `$userStore` object is available.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: orWhere() method usage in PHP\nDESCRIPTION: This snippet shows the signature of the `orWhere()` method within the QueryBuilder class.  The method accepts an array of criteria and returns a QueryBuilder object. It represents an OR condition, allowing for multiple, alternative conditions to be specified in the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields in PHP\nDESCRIPTION: This code demonstrates how to select specific fields to be returned in the query result. The `select` method accepts an array of field names (strings) and returns the modified `QueryBuilder` instance, allowing for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Default Hits Algorithm (PHP)\nDESCRIPTION: Defines the 'hits' search algorithm in SleekDB.  This algorithm calculates the search score based on the number of times search terms appear in the specified fields. This is the default search algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File for SleekDB Query (PHP)\nDESCRIPTION: Deletes the cache file associated with the current query. This is useful for invalidating the cache when the underlying data changes. This ensures that subsequent queries will fetch the latest data and update the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Deleting Document by ID - deleteById() - PHP\nDESCRIPTION: Deletes a single document using its unique `_id` using the `deleteById()` method. This method is highly efficient as it directly accesses the document using its ID. It returns `true` if the deletion was successful or the document did not exist, and `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int $id): bool\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime\nDESCRIPTION: Sets the cache lifetime for the current query. Takes an integer or null as input and returns the Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Cache\nDESCRIPTION: Gets the `Cache` object associated with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Fetch Query Results\nDESCRIPTION: Executes the query and retrieves the results. Returns an array of documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Reusing Query object in SleekDB (PHP)\nDESCRIPTION: Demonstrates how to keep the Query object in SleekDB to perform multiple operations like fetching and updating documents based on initial conditions. This allows for efficient data manipulation without running separate queries for fetching and updating.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID PHP\nDESCRIPTION: Returns the last created store object ID. This is an autoincrementing integer.  Returns an integer representing the last inserted ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Content in SleekDB\nDESCRIPTION: This snippet shows the function definition for `get()`, which retrieves the content of the cache file for the current query's token.  It returns an array if the cache file is found, otherwise it returns null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Get Cache object from Query\nDESCRIPTION: Retrieves the Cache object associated with a Query object. This allows for deeper control over caching behavior for specific queries. It requires an existing Query object ($userQuery).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to create a QueryBuilder instance from a SleekDB store. The QueryBuilder is used to construct queries for interacting with the data in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache-management.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache\nDESCRIPTION: Returns if caching is enabled store wide. Returns a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Grouping documents with SQL\nDESCRIPTION: This SQL query groups active products by category and counts the number of products in each category, aliasing the count as 'productAmount'. It filters for active products and groups the result by the category column.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: Fetch Query Results\nDESCRIPTION: Execute Query and get Results. Executes the query built by the QueryBuilder and returns the results as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Criteria - OR and Implicit AND PHP\nDESCRIPTION: This snippet simplifies the previous example by implicitly using 'AND' between the OR condition and the title condition. It finds news articles where the author is either \"John\" or \"Smith\", and the title contains \"cat\". The $newsStore object is an instance of the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/criteria.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n    [\n      [\"author\", \"=\", \"John\"], \n      \"OR\",\n      [\"author\", \"=\", \"Smith\"], \n    ],\n    [\"title\", \"LIKE\", \"%cat%\"]\n  ]);\n```\n\n----------------------------------------\n\nTITLE: String function POSITION in PHP\nDESCRIPTION: Demonstrates how to use the `POSITION` string function within the `select` method to get the position of a substring within a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"POSITION\" => [SUBSTRING, \"fieldName\"]], ...]\n```\n\n----------------------------------------\n\nTITLE: Multiple orWhere with where conditions in PHP\nDESCRIPTION: This snippet illustrates combining `where()` with multiple `orWhere()` calls, each potentially containing multiple `AND` conditions. Demonstrates complex logical filtering.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: disableCache() Function Definition PHP\nDESCRIPTION: Defines the `disableCache` function, which disables caching for a specific query. It returns the QueryBuilder instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Skip Method Signature PHP\nDESCRIPTION: Defines the signature of the `skip` method in the SleekDB QueryBuilder. This method allows skipping a specific number of documents. It accepts an integer representing the number of documents to skip as input and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Example of Counting Documents in SleekDB (PHP)\nDESCRIPTION: This snippet shows an example usage of the `count()` method to efficiently retrieve the document count. Requires a SleekDB store instance named `$newsStore`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/fetch-data.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$newsCount = $newsStore->count();\n// Returns: 27 \n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store PHP\nDESCRIPTION: This snippet initializes a new SleekDB store named 'news' in the specified data directory. If the store does not exist, it will be created automatically. The Store class is instantiated with the store name and data directory as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Distinct Usage Example PHP\nDESCRIPTION: Demonstrates how to use the `distinct` method to retrieve unique users based on the 'name' field, showcasing both string and array field specification.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents by Criteria and Retrieving Results (PHP)\nDESCRIPTION: This snippet shows how to delete documents based on criteria and retrieve the deleted documents as an array using the `Query::DELETE_RETURN_RESULTS` option.  It requires importing the `SleekDB/Query` namespace.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/delete-data.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$userStore->deleteBy(['name', '=', 'Joshua Edwards'], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime in PHP\nDESCRIPTION: This function retrieves the lifetime of the current query's cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Except Method Example - PHP\nDESCRIPTION: Demonstrates how to use the `except()` method to exclude specific fields ('_id' and 'name') from the result set. This is the opposite of the `select()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\" => 28], [\"age\" => 18]]\n```\n\n----------------------------------------\n\nTITLE: join() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `join()` method within the SleekDB QueryBuilder.  It joins the current store with another one using a callable function. It requires the `$joinedStore` callable to be defined.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction join(callable $joinedStore, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Remove Nested Street Field PHP\nDESCRIPTION: Removes the 'street' field within the 'address' array of the user with _id = 24 using the `removeFieldsById()` method and dot notation.  This example demonstrates how to remove a nested field from a document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"address.street\" ]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Products with SQL\nDESCRIPTION: This SQL query groups active products by category, sums the views, and filters the results to only include categories with total views between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This snippet demonstrates how to initialize a QueryBuilder instance using the `createQueryBuilder()` method of a SleekDB Store object. The `$userStore` variable represents an instance of the SleekDB Store class, and this initializes a query builder associated with that store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Deleting a SleekDB Store with PHP\nDESCRIPTION: This code snippet demonstrates how to delete a store and all its contents using the `deleteStore()` method. It removes the store and all data and cache associated with it.  This operation is performed on the `$userStore` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/managing-store.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteStore();\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Where Condition in SleekDB (Deprecated)\nDESCRIPTION: This PHP function adds nested where conditions to filter data.  Deprecated since version 2.3, use `where` and `orWhere` instead. Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initialize Database Directory PHP\nDESCRIPTION: Initializes the database directory path. This path is used to store the SleekDB data. Both absolute and relative paths are supported. It uses the `__DIR__` magic constant to create an absolute path to a directory named `myDatabase`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files in PHP\nDESCRIPTION: This snippet illustrates the declaration of the `deleteAll()` method in PHP, belonging to the SleekDB Cache class. This method removes all cache files within the current store, effectively clearing the entire cache associated with that store. It returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Store Constructor Definition PHP\nDESCRIPTION: This is the constructor for the `Store` class. It initializes a new `Store` object and creates the store directory if it doesn't exist. The constructor takes the store name, data directory, and an optional configuration array as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $dataDir, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Join Stores\nDESCRIPTION: Join current store with another one. Can be used multiple times to join multiple stores. Accepts a Closure for the join logic and a property name for the join. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content PHP\nDESCRIPTION: Returns cached result for the current query if found; otherwise, returns null. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_53\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Insert Many Documents\nDESCRIPTION: Inserts multiple documents into the store.  Accepts an array of data arrays, where each inner array represents a document.  Returns the inserted documents with their new and unique _id values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Fetch One Document with Criteria using findOneBy() in SleekDB\nDESCRIPTION: Retrieves a single document from the SleekDB store that matches the specified criteria. It supports complex nested where clauses.  It returns the first matching document as an array, or null if no document matches the criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy([\"author\", \"=\", \"Mike\"]);\n// Returns one news article of the author called Mike\n```\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findOneBy(\n      [\n         [\n            [\"author\", \"=\", \"John\"], \"OR\", [\"author\", \"=\", \"Mark\"],\n         ],\n         \"AND\", // <-- Optional\n         [\n            [\"topic\", \"like\", \"School%\"], \"OR\", [\"topic\", \"like\", \"Work%\"]\n         ]\n      ]\n   );\n```\n\n----------------------------------------\n\nTITLE: Skipping documents using skip in SleekDB PHP\nDESCRIPTION: Shows how to use the `skip()` method to skip a specified number of documents. This is equivalent to the OFFSET clause in SQL. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Excluding nested fields using except in SleekDB PHP\nDESCRIPTION: Illustrates excluding nested fields using `except()`. It shows how to exclude `name` and `address.streetNumber` from the result set. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Example 1: Delete user by name and retrieve deleted documents\nDESCRIPTION: This example demonstrates deleting users by name and retrieving the deleted documents by setting the return option to `Query::DELETE_RETURN_RESULTS`. It showcases how to access the deleted data after the operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path PHP\nDESCRIPTION: This code snippet shows the definition of the `getCachePath()` method. It returns the path to the cache directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Get First Document PHP\nDESCRIPTION: Returns the first document matching the query criteria. It is more efficient than `fetch` but `orderBy` does not work. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Nested Property Querying\nDESCRIPTION: This JSON snippet illustrates the data structure required for the nested property query example. SleekDB traverses this structure to locate the specified nested property. This demonstrates how the schema-free nature of SleekDB allows you to query complex nested properties within your data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Hits Prioritize Algorithm (PHP)\nDESCRIPTION: Defines the 'hits_prioritize' search algorithm in SleekDB. The score is based on the amount of search hits, but prioritizes the order of the fields to search through if documents have the same amount of search hits.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/searching.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits_prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content\nDESCRIPTION: Saves content for the current query as a cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Skipping documents with 'skip' PHP\nDESCRIPTION: Demonstrates how to skip a specified number of documents using the SleekDB query builder's `skip` method, similar to SQL's OFFSET clause.  Retrieves all users except the first 10 found. Requires the SleekDB library and a pre-configured `$userQueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB: orderBy() method usage\nDESCRIPTION: This snippet demonstrates the syntax for using the `orderBy()` method in SleekDB. It takes two arguments: `$order` and `$orderBy`, which define the sorting order and the field to sort by, respectively.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/sort-data.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\norderBy($order, $orderBy);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Cache Object PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the Cache object from a Query object using the `getCache()` method. The Cache object allows for deeper control over caching behavior within SleekDB. Be cautious when using the Cache object directly.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Object in SleekDB using PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the Cache object associated with a query using the `getCache()` method of the `Query` class in SleekDB. This allows for direct manipulation of the cache settings for that particular query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Nested Where Condition PHP\nDESCRIPTION: This method adds nested \"where\" conditions to filter data.  Deprecated since version 2.3, use `where` and `orWhere` instead. It takes an array of conditions as input and returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: getToken() - Get Cache Token - PHP\nDESCRIPTION: Returns the unique token associated with the current query. This token is used to identify and retrieve the corresponding cache file. The return value is a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array PHP\nDESCRIPTION: This method is used internally. It returns an array containing all properties that are used for cache token generation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Having Condition\nDESCRIPTION: Add a `having()` condition to filter data, considering select functions and grouped documents. Accepts an array of criteria. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional SleekDB Store\nDESCRIPTION: This example shows how to create another SleekDB store. Similar to the previous example, it utilizes the `SleekDB\\Store` class and requires a data directory (`$dataDir`). This example creates a 'users' store, useful in a community platform scenario.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Selecting nested fields with alias in SleekDB PHP\nDESCRIPTION: Illustrates how to select nested fields and assign aliases to them using the `select()` method.  It assumes that user data is nested under `userBiography`. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\" => \"userBiography.age\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"age\" => 20], [\"_id\" => 2, \"age\" => 17]]\n```\n\n----------------------------------------\n\nTITLE: Search function definition PHP\nDESCRIPTION: Defines the signature of the search function within the QueryBuilder.  It takes fields to search, a query string, and optional options as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfunction search(array|string $fields, string $query, array $options = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content PHP\nDESCRIPTION: This code snippet shows the definition of the `set()` method. It sets and caches the provided content (array) for the current query using its unique token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search - PHP\nDESCRIPTION: This PHP code snippet demonstrates the use of the `search()` method to find articles that contain the word 'SleekDB' in their 'content'. It requires the `articleQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$articles = $articleQueryBuilder\n  ->search(\"content\", \"SleekDB\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Numeric function MAX in PHP\nDESCRIPTION: Demonstrates how to use the `MAX` numeric function within the `select` method to retrieve the maximum value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"MAX\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Select with GroupBy - PHP\nDESCRIPTION: Combines the `select` and `groupBy` methods to calculate the sum of 'follower' for each distinct 'age'.  Shows how to use these methods in conjunction to perform aggregate queries. Requires SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select([\"age\", \"followerSum\" => [\"SUM\" => \"follower\"]])\n  ->groupBy([\"age\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"followerSum\" => 901],\n  [\"age\" => 20, \"followerSum\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content\nDESCRIPTION: Retrieves the content of the cache file. Returns an array representing the cached content, or null if the cache file does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_66\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 2 with SleekDB (PHP)\nDESCRIPTION: This code demonstrates another example of using the deprecated `nestedWhere()` method alongside `where()` to build a query with multiple conditions. It filters users based on status, city, and age criteria. Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initializing a QueryBuilder object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new `QueryBuilder` object. The constructor accepts a `Store` object as a dependency, which is used to interact with the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Getting the cache usage status in PHP\nDESCRIPTION: This method is used internally to determine if caching is enabled for the store.  The `_getUseCache` function returns a boolean value indicating whether caching is enabled.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: in() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `in()` method within the SleekDB QueryBuilder. It takes a field name and an array of values as input and returns the QueryBuilder instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID in PHP\nDESCRIPTION: This code snippet demonstrates how to remove specified fields from a document using the `removeFieldsById()` method in SleekDB. The method takes the ID of the document and an array of field names to remove.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/edit-data.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nfunction removeFieldsById(int|string $id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Using disableCache() in PHP\nDESCRIPTION: This example demonstrates how to use the `disableCache()` method to prevent caching for a specific query. It fetches active users without using the cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limit Method Signature PHP\nDESCRIPTION: Defines the signature of the `limit` method in the SleekDB QueryBuilder. This method limits the number of results returned by the query. It accepts an integer representing the maximum number of results to return as input and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction limit($limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Remove Fields By ID\nDESCRIPTION: Removes specific fields from a document identified by its _id.  Accepts the document's _id and an array of field names to remove.  Returns the modified document as an array or false on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Returning Distinct Values - PHP\nDESCRIPTION: This code snippet defines the method for returning distinct values for the specified fields. It takes a string or array of field names as input and returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cache object in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new `Cache` object. The constructor accepts a `Query` object, a cache token array, and an optional cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Initializing Store Object PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB Store object in PHP. It requires the SleekDB\\Store class and specifies the store name ('users') and the database directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Search PHP\nDESCRIPTION: This method performs a fulltext-like search against one or more fields. It takes a field name (or an array of field names) and a keyword as input. It returns the `QueryBuilder` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $field, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance in SleekDB\nDESCRIPTION: This PHP code snippet details the method for creating a QueryBuilder object from a Store object.  It returns a new QueryBuilder instance which can then be used to construct complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Documents By Criteria\nDESCRIPTION: Deletes one or multiple documents based on the provided criteria. Accepts an array of criteria and an optional return option.  Returns a boolean, array, or null depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteBy(array $criteria, int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|null\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content in PHP\nDESCRIPTION: This function retrieves the content of the cache file for the current query, using its token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Getting the Store Path - PHP\nDESCRIPTION: This code snippet defines the method for retrieving the full path to the store, including the store name. It does not take any parameters and returns the full store path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Adding an Or Where Condition - PHP\nDESCRIPTION: This code snippet defines the method for adding an 'or where' condition to the query. It takes the conditions as an array and returns the QueryBuilder object, enabling query chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update Documents (Query) PHP\nDESCRIPTION: This method updates one or multiple documents based on the current query. It takes an array of updatable data as input. It returns a boolean indicating whether the update was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Insert a New Document\nDESCRIPTION: Creates and inserts a new document into the store.  Parameters: `$data` (array) - an associative array representing the document data. Returns the inserted document with its new and unique `_id`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Getting Condition Properties in SleekDB\nDESCRIPTION: This is an internal PHP function. It returns an array containing all information needed to execute a query. It is primarily used for internal processing within the SleekDB library. Returns an array of condition properties.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Removing Fields in SleekDB Query\nDESCRIPTION: This PHP function removes specified fields from documents matching the current query. It takes an array of field names to remove. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFields(array $fieldsToRemove): bool\n```\n\n----------------------------------------\n\nTITLE: Updating Documents\nDESCRIPTION: Shows how to update documents that match the query criteria using the `update()` method of the SleekDB Query object. The `$updatable` parameter specifies the fields and their new values to be updated.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\nLANGUAGE: php\nCODE:\n```\n$userStore\n  ->createQueryBuilder()\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->update([ \"status\" => \"VIP\" ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with SleekDB in PHP\nDESCRIPTION: This snippet shows how to use the `delete()` method to delete documents that match the query criteria. The example deletes all inactive users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete();\n// output: true\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryBuilder in PHP\nDESCRIPTION: This snippet demonstrates how to create an instance of the QueryBuilder class using the `createQueryBuilder()` method of a `Store` object in PHP. The resulting QueryBuilder object can then be used to define complex queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n```\n\n----------------------------------------\n\nTITLE: Get Query Object in PHP\nDESCRIPTION: This code snippet showcases the `getQuery` method of the `QueryBuilder` class to retrieve the `Query` object.  The `Query` object is then used to execute the query. The return type is `Query` class object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Deleting matched documents\nDESCRIPTION: This snippet demonstrates how to delete documents that match the current query. It allows specifying a return option to control what is returned after deleting.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Joining Stores with join - PHP\nDESCRIPTION: This PHP code declares a join function but without providing the implementation. See documentation for details about the `join` method and its parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB Delete and Retrieve Deleted Documents\nDESCRIPTION: This example demonstrates deleting documents and retrieving the deleted documents. It sets the return option to `Query::DELETE_RETURN_RESULTS` to get deleted files as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/delete-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object from Query PHP\nDESCRIPTION: This snippet shows how to retrieve the Cache object from a Query object using the `getCache()` method. The Cache object can then be used to manage the caching behavior of the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Update Method Signature\nDESCRIPTION: Defines the signature of the `update` method within the `Store` class in SleekDB. It accepts an array of updatable documents and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Update by ID Example 2 in SleekDB PHP\nDESCRIPTION: Updates the 'name' and 'age' fields of a user document with a specific ID. It requires the `$userStore` object to be initialized and an existing document with the given ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Files for Current Query - PHP\nDESCRIPTION: This code snippet demonstrates the method for deleting the cache file(s) associated with the current query. It takes no parameters and returns void. It removes the cached data from the cache directory, forcing a refresh on the next request.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Files with No Lifetime in SleekDB using PHP\nDESCRIPTION: This PHP code snippet shows the `deleteAllWithNoLifetime()` function which is used to delete all cache files with no defined lifetime (null) within the current store in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Country (notIn) in PHP\nDESCRIPTION: This code snippet demonstrates how to use the deprecated `notIn()` method to retrieve users whose country is not one of the specified values (IN, KE, OP). It constructs a query using the `userQueryBuilder` object, calls `notIn()` with the \"country\" field and the array of countries to exclude, and then retrieves the results using `getQuery()` and `fetch()`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Country (notIn) in PHP\nDESCRIPTION: This code snippet demonstrates how to use the `notIn()` method in PHP to retrieve users whose country is not in the list of \"IN\", \"KE\", or \"OP\". It chains the `notIn()` method with `getQuery()` and `fetch()` to execute the query and retrieve the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_75\n\nLANGUAGE: PHP\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Skip Records\nDESCRIPTION: Set the amount of data record to skip. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using useCache() with Lifetime PHP\nDESCRIPTION: This snippet shows how to use the useCache() method with a specified lifetime of 120 seconds (2 minutes). The query retrieves 20 active users, and the results are cached for the defined duration.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Skip Records PHP\nDESCRIPTION: Sets the number of data records to skip from the beginning of the result set. skip (int, optional): The number of records to skip. Defaults to 0.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Document\nDESCRIPTION: Inserts a new document (represented as an associative array) into the store. The function returns the inserted document, which now includes a unique '_id' generated during insertion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Data with having - SQL\nDESCRIPTION: This SQL snippet demonstrates how to filter grouped data based on aggregated values using the HAVING clause.  It selects 'category' and sums 'views' as 'totalViews', filters for 'active' products, groups by 'category', and then filters the groups to include only those where totalViews is greater than 500 and less than 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Content in SleekDB\nDESCRIPTION: This PHP function retrieves the content from the cache file associated with the current query. It returns the content as an array, or `null` if the cache file does not exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Example Result of Nested Address Update\nDESCRIPTION: Shows the expected structure of the data after updating a nested array with `updateById` to provide an example.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[\n    \"_id\" => 24,\n    \"address\" => [\n        \"street\" => \"first street\",\n        \"postalCode\" => \"47129\"\n    ],\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Not In Condition (Deprecated)\nDESCRIPTION: Adds a \"not in\" condition to filter data. Deprecated since version 2.4, use \"not in\" condition instead. Accepts the field name and an array of values. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the `select()` method to retrieve only the 'name' field for all users. The output includes the '_id' field by default. It requires the `userQueryBuilder` object to be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Delete Cache Files with No Lifetime (PHP)\nDESCRIPTION: Deletes all cache files for the current store that have no specified lifetime (null). This is useful for cleaning up temporary cache entries that are invalidated upon data updates.  It targets and removes all cache entries that are meant for short-term caching.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Creating Another SleekDB Store in PHP\nDESCRIPTION: This snippet shows how to create yet another SleekDB store, 'posts', within the same `$dataDir`. This illustrates the ability to create multiple, independent stores for different types of data in a SleekDB application.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache Status - PHP\nDESCRIPTION: This code snippet demonstrates the method for checking if caching is enabled for the store. It takes no parameters and returns a boolean indicating whether caching is enabled store-wide.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB manually in PHP\nDESCRIPTION: This code snippet includes the SleekDB Store class in your PHP script. It assumes that you have downloaded and extracted the SleekDB library into your project directory. It's essential for using SleekDB's functionalities within the script.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Getting the Store object from QueryBuilder in PHP\nDESCRIPTION: This method is used internally to retrieve the `Store` object used to create the `QueryBuilder` object. The `_getStore` function returns the `Store` object associated with the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Store Constructor\nDESCRIPTION: Creates a new Store object, representing a database store. It initializes the store with a name, data directory, and optional configuration. Internally, it creates a new store folder if it doesn't already exist.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $dataDir, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Criteria - OR and AND PHP\nDESCRIPTION: This code demonstrates how to use nested arrays within the $criteria argument to combine \"OR\" and \"AND\" conditions. It finds news articles where the author is either \"John\" or \"Smith\", and the title contains \"cat\". The $newsStore object is an instance of the SleekDB store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/criteria.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$news = $newsStore->findBy([\n    [\n      [\"author\", \"=\", \"John\"], \n      \"OR\",\n      [\"author\", \"=\", \"Smith\"], \n    ],\n    \"AND\", // <-- Optional\n    [\"title\", \"LIKE\", \"%cat%\"]\n  ]);\n```\n\n----------------------------------------\n\nTITLE: SleekDB Join Method Signature PHP\nDESCRIPTION: This snippet shows the signature for the `join()` method.  It takes a closure as its first parameter, which is a function that executes the sub-query for the join.  The second parameter is a string representing the name of the property that will be added to each document in the main store with the data from the joined store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $propertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Storing Date as String in SleekDB (PHP)\nDESCRIPTION: Illustrates storing a date as a string when inserting data into a SleekDB store.  The 'releaseDate' field is directly assigned a string value representing the date.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Delete by Query\nDESCRIPTION: Deletes documents matching the current query.  Accepts an integer return option specifying what to return.  Returns a boolean, an array or an integer based on the `returnOption`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token\nDESCRIPTION: Retrieves the cache token used as the filename for storing the cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Except Method Signature PHP\nDESCRIPTION: Defines the signature of the `except` method in the SleekDB QueryBuilder. This method allows excluding specific fields from the query results. It accepts an array of field names as input and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction except(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetch Query Results PHP\nDESCRIPTION: Executes the query and gets the results. Returns an array containing the query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Nested Join - SleekDB (PHP)\nDESCRIPTION: This example showcases a nested `join()` operation. It retrieves users with their created articles, and each article includes its comments. It initializes 'users', 'comments', and 'articles' stores, then uses a nested join to associate comments with articles before associating articles with users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/join-stores.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Store\nDESCRIPTION: Gets the Store object used to create the QueryBuilder. Returns the Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime\nDESCRIPTION: Returns the store-wide default cache lifetime. This method is used internally. Returns an integer or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Getting the Cached Result - PHP\nDESCRIPTION: This code snippet defines the method for retrieving the cached result for the current query, if found. It takes no parameters and returns the cached result as an array or null if not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name in SleekDB with PHP\nDESCRIPTION: Demonstrates how to delete all users with the name \"Joshua Edwards\" using the `deleteBy()` method, which returns true upon successful deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"]);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Select Fields PHP\nDESCRIPTION: Selects specific fields to include in the result set. Only the specified fields will be returned in the fetched documents. fieldNames (string[]): An array of field names to select.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Store Constructor\nDESCRIPTION: Creates a new Store object. Internally, it creates a new store folder if it doesn't exist. Parameters include the store name, database path, and an optional configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(string $storeName, string $databasePath, array $configuration = [])\n```\n\n----------------------------------------\n\nTITLE: Using orWhere() method in PHP\nDESCRIPTION: This code snippet shows the signature of the `orWhere()` method of the QueryBuilder object. The method takes an array of criteria as input, representing an OR condition. The returned value is a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting Data by ID PHP\nDESCRIPTION: This code demonstrates how to delete a single document using its `_id` with the `deleteById()` method. This is a faster method because SleekDB directly deletes using the ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Except Fields PHP\nDESCRIPTION: This method excludes specific fields from the query results. It takes an array of field names as input and returns the `QueryBuilder` object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get First Document\nDESCRIPTION: Returns the first document that matches the query criteria. More efficient than `fetch` but `orderBy` does not work. Returns an array representing the document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Remove Status Field Example PHP\nDESCRIPTION: Removes the 'status' field from the user with _id = 23 using the `removeFieldsById()` method. This example shows how to remove a single field from a document.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/edit-data.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(23, [ \"status\" ]);\n```\n\n----------------------------------------\n\nTITLE: String function CONCAT in PHP\nDESCRIPTION: Demonstrates how to use the `CONCAT` string function within the `select` method to concatenate multiple fields with a specified glue string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"CONCAT\" => [GLUE, \"fieldName1\", \"fieldName2\", ...]], ...]\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory (Deprecated)\nDESCRIPTION: Deprecated since version 2.7, use `getDatabasePath` instead. Returns the location (directory path) of the store. Returns a string representing the data directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Get Token for SleekDB Query (PHP)\nDESCRIPTION: Returns the unique token for the current query, that will be used to save and retrieve a cache file. The token is a string which represents the current state of the query. This enables SleekDB to properly identify and retrieve cached results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: getQuery Method in PHP\nDESCRIPTION: This snippet shows the signature of the `getQuery()` method, which retrieves the `Query` object from the `QueryBuilder`. This Query object is then used to execute the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Update by ID Example 1 in SleekDB PHP\nDESCRIPTION: Updates the 'status' field of a user document with a specific ID.  It requires the `$userStore` object to be initialized and an existing document with the given ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/edit-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(23, [ \"status\" => \"active\" ]);\n```\n\n----------------------------------------\n\nTITLE: Numeric Function ABS in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the `ABS` numeric function within the `select()` method of the QueryBuilder. It is used to get the absolute value of a field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => [\"ABS\" => \"fieldName\"], ...]\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array PHP\nDESCRIPTION: This method is used internally. It returns an array containing all properties that are used for the cache token generation. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Delete Document By ID\nDESCRIPTION: Deletes a single document identified by its _id. This is a fast operation because it directly deletes the document by its file path. Returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: nestedWhere Small Example in PHP\nDESCRIPTION: This example shows a small example of using nestedWhere.  The OUTERMOST_OPERATION connects with the where, orWhere in, or notIn methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[ \n  \"OUTERMOST_OPERATION\" => [\n    [$fieldName, $condition, $value],\n    \"OPERATION\",\n    [$fieldName, $condition, $value]\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Get\nDESCRIPTION: Returns cached result for current query if found, else null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Set Lifetime Method PHP\nDESCRIPTION: This snippet shows the definition of the `setLifetime` method in PHP. It sets the lifetime for the current query.  The lifetime is in seconds; 0 means infinite, null means no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Except Example 2\nDESCRIPTION: Shows how to exclude a nested field from the result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Set Cache\nDESCRIPTION: Saves content for the current query as a cache file. Accepts an array of content to be cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Order By\nDESCRIPTION: Sets the sort order of the query results.  Accepts an array of criteria for sorting.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: search() Usage Example PHP\nDESCRIPTION: This example demonstrates how to use the `search()` method to find all articles where the word \"SleekDB\" appears in the content field. It chains the `search()` method with `getQuery()` and `fetch()` to execute the search and retrieve the results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$articles = $articleQueryBuilder\n  ->search(\"content\", \"SleekDB\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Limit Method Example in SleekDB (PHP)\nDESCRIPTION: Shows how to use the `limit` method to retrieve just the first ten users. The example chains `limit` with `getQuery` and `fetch` to limit the result set to the first 10 matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->limit(10)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: skip() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `skip()` method within the SleekDB QueryBuilder.  It skips over a given number of documents, similar to OFFSET in SQL.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Nested Where Condition (Deprecated)\nDESCRIPTION: Add nested where conditions to filter data. Deprecated since version 2.3, use `where` and `orWhere` instead. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: orWhere() Method Definition PHP\nDESCRIPTION: This code snippet shows the method signature for the `orWhere()` method of the `QueryBuilder` class. It's used to add `or` conditions to the query being built. It accepts an array `$criteria` and returns the `$this` QueryBuilder object to allow method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token\nDESCRIPTION: Returns the cache token (unique identifier) for the current query as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Get Store PHP\nDESCRIPTION: This method retrieves the `Store` object used to create the query builder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Update Document By ID\nDESCRIPTION: Updates parts of one document identified by its `_id`. Accepts the document ID (integer or string) and an array of updatable fields. Returns the updated document as an array or `false` on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction updateById(int|string $id, array $updatable): array|false\n```\n\n----------------------------------------\n\nTITLE: Updating Name and Age by ID PHP\nDESCRIPTION: Updates the name and age of a user with a specific ID. It calls `$userStore->updateById()` with the user ID and an array containing the 'name' and 'age' fields with their new values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\" => \"Georg\", \"age\" => 22 ]);\n```\n\n----------------------------------------\n\nTITLE: Disable Cache with QueryBuilder in PHP\nDESCRIPTION: This snippet shows how to disable caching for a specific query using the `disableCache()` method of the QueryBuilder class. This overrides the store-wide caching configuration.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store using the `SleekDB\\Store` class. It requires the `SleekDB\\Store` namespace to be imported. The store is initialized with a name ('news') and a data directory (`$dataDir`).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/managing-store.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB.php Manually\nDESCRIPTION: This code snippet demonstrates how to include the SleekDB library in your PHP project when not using Composer. It assumes that you have downloaded and extracted the SleekDB library into a directory named 'SleekDB' relative to your PHP file. This require_once statement includes the main SleekDB class file, making its functionalities available within your PHP script.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/installation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"../SleekDB/SleekDB.php\";\n```\n\n----------------------------------------\n\nTITLE: Complex GroupBy and Sum - SQL\nDESCRIPTION: SQL example for grouping by category and subcategory, calculating sum of views and the number of products\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: Limit Records\nDESCRIPTION: Set the amount of data record to limit. Accepts an integer or string representing the maximum number of records to return. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int|string $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to fetch all documents that match a specific condition using the fetch() method of the Query object in PHP. It retrieves all users located in London by chaining the where() method on a QueryBuilder instance, then calling getQuery() to obtain the Query object, and finally executing the fetch() method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor\nDESCRIPTION: Creates a new QueryBuilder object. Accepts a `Store` object as a dependency, enabling it to build queries against that specific store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Get Store Path\nDESCRIPTION: Returns the full path to the store, including the store name, as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: PHP skip() Method Definition\nDESCRIPTION: This PHP code defines the `skip` method signature. This method is used to skip a specific number of documents from the result set, acting as an offset.  It takes an integer as input, defaulting to 0.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: getToken Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `getToken` method within the Cache class. This method returns the unique token for the current query, which is used to identify and manage the associated cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Accessing the Cache Object in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the Cache object from a Query object in PHP. The Cache object allows for deeper control over caching mechanisms within SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: useCache() function definition PHP\nDESCRIPTION: Defines the useCache function within the QueryBuilder class, allowing the activation of caching and definition of the cache lifetime on a per-query basis.  It accepts an optional integer argument representing the cache lifetime in seconds.  By default, cache will not have a lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache-management.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime\nDESCRIPTION: Returns the store wide default cache lifetime. Returns an integer or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Set Limit\nDESCRIPTION: Sets the maximum number of data records to return (limit). Parameters: `$limit` (int|string) - the maximum number of records to return. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nfunction limit(int|string $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SQL GROUP BY with SUM example\nDESCRIPTION: Shows an equivalent SQL statement corresponding to the previous PHP code, selecting age and the sum of followers grouped by age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT age, SUM(follower) as followerSum GROUP BY age;\n```\n\n----------------------------------------\n\nTITLE: Delete Documents Query\nDESCRIPTION: Deletes matched documents. Accepts an optional `returnOption` parameter. Returns a boolean, array, or integer depending on the `returnOption`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Update Document Method Signature\nDESCRIPTION: Shows the method signature for the `update` method, which takes an array of updatable document data and returns a boolean indicating success.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Get Query Object\nDESCRIPTION: Returns a new `Query` object which can be used to execute the query build. Uses the current state of the QueryBuilder to construct the Query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Nested Where Function Definition PHP\nDESCRIPTION: Defines the deprecated `nestedWhere` function in SleekDB. It enables complex nested where statements, accepting an array of conditions to build the nested logic.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content Method PHP\nDESCRIPTION: This snippet shows the definition of the `set` method in PHP. It sets and caches the provided content for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Fetch All Documents with findAll() in SleekDB\nDESCRIPTION: Retrieves all documents from the specified SleekDB store. It returns an array containing all documents or an empty array if no documents exist. The function has no parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n```\n\n----------------------------------------\n\nTITLE: Remove Name and Age Fields by ID PHP\nDESCRIPTION: Removes the 'name' and 'age' fields from the user document with ID 24 using the `removeFieldsById` function.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/edit-data.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$userStore->updateById(24, [ \"name\", \"age\" ]);\n```\n\n----------------------------------------\n\nTITLE: Getting the Store Name - PHP\nDESCRIPTION: This code snippet shows the method to retrieve the name of the store. It does not take any parameters and returns the store's name as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: GroupBy example\nDESCRIPTION: Shows how to group active products based on category and count the number of products in each category.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating documents based on a Query\nDESCRIPTION: This snippet demonstrates how to update multiple documents based on criteria of a Query. It takes an array of updatable fields as input.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Set Skip\nDESCRIPTION: Sets the number of data records to skip (offset).  Parameters: `$skip` (int|string) - the number of records to skip.  Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nfunction skip(int|string $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor PHP\nDESCRIPTION: Creates a new Cache object. query (Query): The Query object associated with the cache. storePath (string): The path to the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(Query $query, string $storePath)\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor Definition PHP\nDESCRIPTION: This is the constructor for the `QueryBuilder` class. It initializes a new `QueryBuilder` object and requires a `Store` object instance as a dependency.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: search() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `search()` method within the SleekDB QueryBuilder.  It searches for a specific keyword within the specified fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties (Internal)\nDESCRIPTION: This method is used internally. Returns an array containing all information needed to execute an query. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: GroupBy Method Usage - SQL\nDESCRIPTION: SQL equivalent for grouping products by category, counting the product amount, and filtering for active products.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Class Constructor\nDESCRIPTION: Creates a new QueryBuilder object.  Parameters: `$store` (Store) - the Store object to associate with the query builder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function Usage - PHP\nDESCRIPTION: Demonstrates the syntax for using custom select functions (closures) in SleekDB to process document fields. An alias must be provided when using a custom select function. The closure receives a document as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => CLOSURE, ...]\n```\n\n----------------------------------------\n\nTITLE: Except with Nested Field - PHP\nDESCRIPTION: Demonstrates using the `except()` method to exclude a nested field from the result set.  This snippet excludes 'name' and 'address.streetNumber', showing how to handle nested fields within the except clause.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"name\", \"address.streetNumber\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[ [\"_id\" => 2, \"address\" => [ \"street\" => \"Firststreet\" ]], ... ]\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Function Definition PHP\nDESCRIPTION: Defines the `regenerateCache` function, which forces the cache to be regenerated for a specific query, regardless of its current lifetime. It returns the QueryBuilder instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users\nDESCRIPTION: Demonstrates how to update multiple users in SleekDB. It retrieves users based on a condition, iterates through the results, modifies a property for each user, and then uses the `update` method to persist the changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/edit-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent for where example 3\nDESCRIPTION: SQL representation of the where conditions in example 3\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n// example in sql\nWHERE \n  status = \"premium\" \n  AND \n  (\n    ( city = \"london\" OR city = \"new york\" )\n    AND \n    ( (age >= 16 AND age < 20) OR age > 30 )\n  )\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties (Internal)\nDESCRIPTION: This method is used internally. It returns an array that contains all information needed to execute an query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Set Lifetime (Cache) PHP\nDESCRIPTION: Sets the cache lifetime for the current cache object. lifetime (int|null): The cache lifetime in seconds, or null for no lifetime (cache persists indefinitely).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields in SleekDB QueryBuilder\nDESCRIPTION: This PHP function specifies which fields to select in the query. It takes an array of field names as input. It returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction select(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding a Not In Condition - PHP\nDESCRIPTION: This code snippet defines the method for adding a 'not in' condition to the query. It takes the field name and an array of values as input, filtering results where the field's value is not in the provided array. It returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Query\nDESCRIPTION: Returns a new `Query` object which can be used to execute the query build.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Get Store\nDESCRIPTION: Returns the Store object used to create the QueryBuilder object. This method is used internally. Returns a Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Retrieving content from the cache\nDESCRIPTION: This snippet shows how to retrieve content from the cache file. It returns the content as an array, or null if the cache is not found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files No Lifetime\nDESCRIPTION: Deletes all cache files with no lifetime (null) in the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache PHP\nDESCRIPTION: Re-generates the cache for the current query.  Useful for updating the cache with fresh data. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Distinct Function Definition PHP\nDESCRIPTION: Defines the `distinct` function in the SleekDB QueryBuilder. It retrieves unique values from the store, removing duplicate documents while fetching data. It accepts an array or string specifying the fields to be distinct.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(array|string $fields): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Users (SleekDB)\nDESCRIPTION: Demonstrates how to update multiple user documents in SleekDB. It retrieves users with a specific name, modifies their 'name' field, and then updates all the modified documents using the `update` method.  It requires the `$userStore` to be initialized and connected to the database.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/edit-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// retrieve users\n$users = $userStore->findBy([\"name\", \"=\", \"Josh\"]);\n\nforeach($users as $key => $user){\n    // change the properties of the users\n    $user[\"name\"] = \"Luke Bowman\";\n\n    // push changed user back to the users array\n    $users[$key] = $user;\n}\n\n// update all users that had the name Josh\n$userStore->update( $users );\n```\n\n----------------------------------------\n\nTITLE: Filtering with timestamps\nDESCRIPTION: Demonstrates filtering data using timestamps instead of DateTime objects. It creates an article, stores the date as timestamp, and then filters using the `findBy()` method with the `IN` operator against a list of pre-computed timestamps.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/dates.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Insert an article\n$releaseDate = new \\DateTime(\"2021-01-17\");\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"createdAt\" => $releaseDate->getTimestamp()\n];\n$newArticle = $newsStore->insert($newArticle);\n\n// retrieve articles\n$datesToFilter = [\n  (new \\DateTime(\"2020-12-01\"))->getTimestamp(),\n  (new \\DateTime(\"2021-01-04\"))->getTimestamp()\n  (new \\DateTime(\"2021-01-19\"))->getTimestamp()\n];\n$news = $newsStore->findBy([ \"releaseDate\", \"IN\", $datesToFilter ] );\n// WHERE releaseDate IN (\"2020-12-01\", \"2021-01-04\", \"2021-01-19\")\n```\n\n----------------------------------------\n\nTITLE: SleekDB Search Method Signature\nDESCRIPTION: This code snippet shows the method signature for the search function in SleekDB.  It takes two arguments: `$field`, which specifies the property to search within, and `$keyword`, which is the search term.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/search-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsearch($field, $keyword);\n```\n\n----------------------------------------\n\nTITLE: Delete Store\nDESCRIPTION: Deletes the entire store, including all data and cache files. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: PHP except() Method Definition\nDESCRIPTION: This PHP code defines the `except` method signature. This method is used to exclude specific fields from being included in the output. It accepts an array of field names to exclude.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction except(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: nestedWhere Conditions Array Structure (PHP)\nDESCRIPTION: Illustrates the required structure of the conditions array used by the `nestedWhere` method in SleekDB.  The outermost key is the operation to perform, and the value is an array of conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: deleteAll() method in PHP\nDESCRIPTION: Describes the `deleteAll()` method of the Cache class, which deletes all cache files for the current store. This method requires no parameters and has no return value. Use with caution as it removes all cached query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Example PHP\nDESCRIPTION: This snippet demonstrates how to use the `regenerateCache()` method in conjunction with `useCache()`. The first query sets an infinite lifetime, while the second query retrieves documents not from cache and caches the results for 20 seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// cache with infinite lifetime\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0)\n    ->getQuery()\n    ->fetch();\n\n// returns documents not from cache and caches results for 20 seconds\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(20)\n    ->regenerateCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents in SleekDB Query\nDESCRIPTION: This PHP function deletes documents matching the current query. It takes a return option to specify what to return. It returns a boolean, an array, or an integer depending on the return option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nfunction delete(int $returnOption = Query::DELETE_RETURN_BOOL): bool|array|int\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache Files\nDESCRIPTION: Deletes all cache files for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Deleting Document by ID in SleekDB with PHP\nDESCRIPTION: Demonstrates how to delete a document with the ID 12 using the `deleteById()` method, which returns true upon successful deletion.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/delete-data.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$userStore->deleteById(12);\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Getting Default Cache Lifetime in SleekDB\nDESCRIPTION: This is an internal PHP function to get the store-wide default cache lifetime.  Returns the lifetime in seconds or `null` if no default lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Multiple notIn calls for filtering in PHP\nDESCRIPTION: This snippet showcases filtering with multiple `notIn()` calls to exclude users based on country and `products.totalSaved`. Demonstrates excluding based on multiple criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Lifetime in SleekDB\nDESCRIPTION: This PHP function retrieves the cache lifetime for the current query. It returns the lifetime in seconds, or `null` if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content PHP\nDESCRIPTION: This method returns cached results for the current query if found; otherwise, it returns null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in SleekDB Query\nDESCRIPTION: This PHP function executes the query and retrieves the results as an array of documents.  Returns the array of matching documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Query Constructor\nDESCRIPTION: Creates a new Query object. Internally, it creates a new Cache object for caching query results. Requires a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Create QueryBuilder\nDESCRIPTION: Returns a new QueryBuilder object. This object is used to construct complex queries for the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Fetch Results\nDESCRIPTION: Executes the query and returns the results as an array of documents. Represents the core functionality of retrieving data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Grouping Documents in SleekDB\nDESCRIPTION: This PHP function groups documents using one or multiple fields. It takes an array of fields to group by, a counter key name, and a boolean indicating whether to allow empty groups. It returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Query Constructor\nDESCRIPTION: Creates a new Query object, which is responsible for executing queries. Internally, it creates a new Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: useCache() with Specific Lifetime PHP\nDESCRIPTION: Retrieves and caches the result for 2 minutes (120 seconds), for 20 active users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(120) // 2 minutes = 120 seconds\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Distinct Function Signature in SleekDB\nDESCRIPTION: This PHP code shows the function signature of the `distinct` method in the SleekDB QueryBuilder class. This method is used to retrieve unique values from the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(array|string $fields): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: getQuery method in PHP\nDESCRIPTION: This code shows the signature of the `getQuery` method within the QueryBuilder class in PHP.  The method returns a `Query` object which is then used to execute the actual database query.  It has no parameters and is used to finalize the query construction.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime in PHP\nDESCRIPTION: This code snippet reveals the `getLifetime()` method definition in PHP, belonging to the SleekDB Cache class. This function returns the currently configured lifetime of the cache associated with the query, in seconds. It can return an integer greater than or equal to 0 or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB using Composer\nDESCRIPTION: This command installs SleekDB as a dependency in your PHP project using Composer. It adds the `rakibtg/sleekdb` package to your project's `composer.json` file and downloads the necessary files. Requires Composer to be installed and configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Object in PHP\nDESCRIPTION: This code snippet shows the signature of the `getQuery()` method of the QueryBuilder class. This method is used to retrieve the Query object, which can then be executed to perform database operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: nestedWhere method in PHP\nDESCRIPTION: Shows the signature of the `nestedWhere` method in the QueryBuilder class in PHP. The `nestedWhere` method lets you create more complex nested `where` statements, useful for handling intricate conditional logic.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Insert Document\nDESCRIPTION: Creates/Inserts a new document in the store. Returns the inserted document with its new and unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction insert(array $data): array\n```\n\n----------------------------------------\n\nTITLE: In Condition (Deprecated)\nDESCRIPTION: Adds an \"in\" condition to filter data. Deprecated since version 2.4, use \"in\" condition instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining deleteById() Function Signature PHP\nDESCRIPTION: This snippet defines the signature of the `deleteById()` function in SleekDB. It is used to delete a document based on its unique `_id` and returns a boolean indicating if the deletion was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/delete-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteById(int|string $id): bool\n```\n\n----------------------------------------\n\nTITLE: Create Query Builder\nDESCRIPTION: Returns a new `QueryBuilder` object, which is used for constructing queries on the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction createQueryBuilder(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: findBy Method in SleekDB\nDESCRIPTION: The `findBy` method retrieves documents from the SleekDB store based on specified criteria, ordering, limit, and offset. It takes an array of criteria `$criteria`, an optional array for ordering `$orderBy`, an optional integer for the limit `$limit`, and an optional integer for the offset `$offset`. It returns an array of documents that match the criteria or null if no documents are found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/fetch-data.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findBy(array $criteria, array $orderBy = null, int $limit = null, int $offset = null): array|null\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$news = $newsStore->findBy([\"author\", \"=\", \"John\"], [\"title\" => \"asc\"], 10, 20);\n// First 20 documents skipped, limited to 10 and ascending sort by title where author is John.\n```\n\n----------------------------------------\n\nTITLE: Initializing Cache Object in SleekDB\nDESCRIPTION: This PHP function constructs a new Cache object. It handles everything related to caching.  It takes the parent query, a reference to the cache token array, and the cache lifetime as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Distinct Values PHP\nDESCRIPTION: Returns distinct values for the specified field(s). fields (string|array, optional): The field(s) for which to return distinct values. Can be a single field name (string) or an array of field names.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Except Fields\nDESCRIPTION: Excludes specific fields from the query results. Accepts an array of field names. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using the select() Method in PHP\nDESCRIPTION: This code shows the function signature for the `select()` method, which allows specifying specific fields to be included in the output, similar to the `SELECT` keyword in SQL.  SleekDB supports multiple `select()` calls as an object chain.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Documents and Return Results with Query PHP\nDESCRIPTION: This snippet demonstrates how to delete documents that match the query and return the deleted documents using the `delete()` method and `Query::DELETE_RETURN_RESULT` option.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data from Store PHP\nDESCRIPTION: This code snippet retrieves all documents from the 'news' store using the `findAll()` method. The results are then printed to the console using `print_r()`. It showcases how to fetch all data stored in a SleekDB store without any filtering or conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$allNews = $newsStore->findAll();\n\nprint_r($allNews);\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache With No Lifetime\nDESCRIPTION: Deletes all cache files with no lifetime (null) in current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_64\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: disableCache() Method Signature PHP\nDESCRIPTION: This snippet displays the signature of the `disableCache()` method within the QueryBuilder class. It disables caching for a specific query. It returns the QueryBuilder instance, allowing for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Updating multiple documents in PHP\nDESCRIPTION: This code snippet demonstrates how to update multiple documents in the store based on current query parameters. The `update` method accepts an array of fields to update.  It returns a boolean indicating if the update was successful.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting all cache files with no lifetime\nDESCRIPTION: This snippet shows how to delete all cache files with no lifetime (null) in the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime\nDESCRIPTION: Retrieves the cache lifetime for the current query. Returns an integer or null representing the cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_60\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent for orWhere example 3\nDESCRIPTION: SQL representation of the orWhere conditions in example 3\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n// example in sql\nWHERE \n  status = \"premium\" \n  OR \n  (\n    ( city = \"london\" OR city = \"new york\" )\n    AND \n    ( (age >= 16 AND age < 20) OR age > 30 )\n  )\n```\n\n----------------------------------------\n\nTITLE: Query Constructor PHP\nDESCRIPTION: Creates a new Query object. (Internally it creates a new Cache object). Takes a QueryBuilder object as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Get Lifetime (Cache) PHP\nDESCRIPTION: Gets the cache lifetime for the current cache object. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Get Database Path\nDESCRIPTION: Returns the path to the database folder where the store is located. Returns a string representing the database path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor\nDESCRIPTION: Creates a new QueryBuilder object.  Requires a Store object as a dependency for database interaction.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Get Search Options (Internal)\nDESCRIPTION: This method is used internally. Returns the search options of the store. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: Getting the Default Cache Lifetime\nDESCRIPTION: This snippet demonstrates how to retrieve the store's default cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Algorithm Prioritize - PHP\nDESCRIPTION: Shows how to set the search algorithm to 'prioritize' using the `Query::SEARCH_ALGORITHM` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize\"]\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache PHP\nDESCRIPTION: This method returns whether caching is enabled store-wide. It returns a boolean value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Disable Cache\nDESCRIPTION: Disables caching for the current query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache PHP\nDESCRIPTION: Returns if caching is enabled store wide. Returns a boolean indicating whether caching is enabled.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object PHP\nDESCRIPTION: This method retrieves the `Cache` object associated with the `Query` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object PHP\nDESCRIPTION: Gets the Cache object associated with the query. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Fetch Results PHP\nDESCRIPTION: Executes the query and retrieves the results. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Query Constructor\nDESCRIPTION: Creates a new Query object. Internally it creates a new Cache object. Accepts a QueryBuilder object as a dependency.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 1 (PHP)\nDESCRIPTION: This PHP code uses the deprecated `nestedWhere()` method of SleekDB to replicate the complex SQL `WHERE` clause. It filters users based on their product savings, purchases, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor\nDESCRIPTION: Creates a new Cache object.  Requires a Query object, a reference to the cache token array, and a cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Get Search Options (Internal)\nDESCRIPTION: This method is used internally. Returns the search options of the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: Delete All\nDESCRIPTION: Delete all cache files for current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Disable Cache QueryBuilder\nDESCRIPTION: Disable caching for current query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory PHP\nDESCRIPTION: Retrieves the data directory path of the store. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: setLifetime Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `setLifetime` method within the Cache class. This method sets the lifetime for the current query/token. It accepts an integer representing the lifetime in seconds or null for no lifetime, and returns the Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Getting the cache token array\nDESCRIPTION: This snippet demonstrates how to retrieve an array used to generate a unique token for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Find All Documents PHP\nDESCRIPTION: This method retrieves all documents from the store. It returns an array containing all documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Find All Documents\nDESCRIPTION: Retrieves all documents stored within the store. Returns an array containing all documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: except() Method Signature - PHP\nDESCRIPTION: This PHP code defines the signature of the `except()` method within the SleekDB QueryBuilder.  It accepts an array of field names that should be excluded from the query result.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction except(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: GroupBy Method Usage - SQL\nDESCRIPTION: SQL equivalent of next code snippet, using GROUP BY statement.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: Group By\nDESCRIPTION: Groups documents using one or multiple fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor\nDESCRIPTION: Creates a new QueryBuilder object, which is used for constructing database queries. It requires a Store object as a dependency.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Getting the primary key field\nDESCRIPTION: This snippet demonstrates how to retrieve the name of the field used as the primary key.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction getPrimaryKey(): string\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token\nDESCRIPTION: Retrieve the cache token used as filename to store cache file. Returns a string representing the cache token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Delete All No Lifetime Cache PHP\nDESCRIPTION: This code snippet shows the definition of the `deleteAllWithNoLifetime()` method. It deletes all cache files with no lifetime (null) associated with the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Algorithms\nDESCRIPTION: This code snippet demonstrates how to access the available search algorithms in SleekDB using the `Query::SEARCH_ALGORITHM` constant. It shows an example of accessing the 'hits' algorithm, which is the default search algorithm.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/configurations.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"hits\"] // default\n```\n\n----------------------------------------\n\nTITLE: Getting the cache token array in PHP\nDESCRIPTION: This method is used internally to retrieve an array used to generate a unique token for the current query. The `_getCacheTokenArray` function returns an array containing the components used to generate the cache token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with orWhere() in PHP with SleekDB\nDESCRIPTION: This snippet shows how to use the `orWhere()` method in SleekDB. It fetches users where 'products.totalSaved' is greater than 10 OR 'products.totalBought' is greater than 20.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->where( 'products.totalSaved', '>', 10 )\n    ->orWhere( 'products.totalBought', '>', 20 )\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime (PHP)\nDESCRIPTION: Retrieves the configured lifetime for the current query's cache. The return value represents the cache duration in seconds, where 0 indicates infinite lifetime and null indicates no lifetime. Returns an integer greater or equal to 0 or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties (Internal)\nDESCRIPTION: This method is used internally. Returns an array containing all information needed to execute an query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime PHP\nDESCRIPTION: Returns the store wide default cache lifetime. Returns an integer representing the default cache lifetime, or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Disable Cache\nDESCRIPTION: Disable caching for current query. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content\nDESCRIPTION: Caches the provided content (array) for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID\nDESCRIPTION: Return the last created store object ID. Returns an integer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache PHP\nDESCRIPTION: This method deletes all cache files for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Get Store Name PHP\nDESCRIPTION: This method retrieves the name of the store. It returns the store name as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object\nDESCRIPTION: Get the `Cache` object. Returns the Cache object associated with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Database Path\nDESCRIPTION: Returns the path to the database folder. Returns a string representing the database path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getDatabasePath(): string\n```\n\n----------------------------------------\n\nTITLE: Get Store Name\nDESCRIPTION: Returns the name of the store.  Returns a string representing the store name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File PHP\nDESCRIPTION: Deletes cache file/s for current query. Returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path PHP\nDESCRIPTION: Gets the path to the cache folder. Returns the cache path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory (Deprecated)\nDESCRIPTION: Gets the location (directory path) of the store. Deprecated since version 2.7, use `getDatabasePath` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory PHP\nDESCRIPTION: Gets the location (directory path) of the store. Returns a string representing the store's data directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory\nDESCRIPTION: Get the location (directory path) of the store. Returns the data directory as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Lifetime in SleekDB with PHP\nDESCRIPTION: This PHP code snippet shows the `getLifetime()` function in SleekDB, which retrieves the configured lifetime for the current cache.  It returns an integer representing the lifetime in seconds, 0 for infinite, or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/cache.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Install Development Version with Composer\nDESCRIPTION: Installs the development version of SleekDB using Composer. This version is not recommended for production use because it's unstable and has undocumented features. The `dev-dev` suffix specifies to download the `dev` branch.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Remove Fields by ID\nDESCRIPTION: Removes specified fields from one document based on its primary key. Returns the modified document or false on failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction removeFieldsById($id, array $fieldsToRemove): array|false\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime in PHP\nDESCRIPTION: Retrieves the configured lifetime for the current query's cache. The return value is either an integer representing seconds (>= 0, where 0 means infinite) or null, indicating no lifetime.  No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Search Method Example in SleekDB (PHP)\nDESCRIPTION: Shows how to use the `search` method to find all articles that include the word \"SleekDB\" in their content. The example chains `search` with `getQuery` and `fetch` to execute the query and retrieve the search results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$articles = $articleQueryBuilder\n  ->search(\"content\", \"SleekDB\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Last Inserted ID PHP\nDESCRIPTION: Returns the ID of the last inserted document.  No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLastInsertedId(): int\n```\n\n----------------------------------------\n\nTITLE: Filtering with rounded prices using SleekDB having()\nDESCRIPTION: This PHP snippet demonstrates using the `having()` method to filter results based on a rounded price. It selects the name and the rounded price (aliased as roundedPrice), filters for active products, and then filters the results to include only products with roundedPrice between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->select([ \"name\", \"roundedPrice\" => [\"ROUND\" => [\"price\", 0]] ])\n  ->where([\"active\", \"=\", true])\n  ->having([ \n    [\"roundedPrice\", \">\", 500], \n    \"AND\", // <- Optional\n    [\"roundedPrice\", \"<\", 1000] \n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Find One Document by Criteria\nDESCRIPTION: Retrieves one document based on specified criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with nestedWhere and AND (Deprecated)\nDESCRIPTION: This PHP code shows another example of using the deprecated `nestedWhere` function. The Outermost operation is optional and will default to an AND operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: In Example 2 (PHP)\nDESCRIPTION: This PHP code uses the deprecated `in()` method twice in a chain.  It retrieves users whose country is one of BD, CA, SE, or NA and whose age is 18, 20, 23, or 30.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Deprecated Nested Where Function (PHP)\nDESCRIPTION: This PHP code demonstrates the deprecated `nestedWhere()` function of the SleekDB QueryBuilder.  It accepts an array of conditions for creating complex nested where statements; however, this method is deprecated in favor of using `where` and `orWhere`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using notIn for filtering in PHP\nDESCRIPTION: This snippet demonstrates filtering users to exclude those from specific countries using the `notIn()` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Use Cache\nDESCRIPTION: Enables caching for the current query. Takes an optional lifetime in seconds. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction useCache(int $lifetime = null): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields with `select` in PHP\nDESCRIPTION: This PHP snippet uses the `select` method to retrieve only the 'name' field for all users.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->select(['name'])\n  ->getQuery()\n  ->fetch();\n// output: [[\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 2, \"name\" => \"Hasan\"]]\n```\n\n----------------------------------------\n\nTITLE: Getting Query Object with QueryBuilder in PHP\nDESCRIPTION: This snippet shows how to obtain the Query object from a QueryBuilder instance in PHP. It assumes that a QueryBuilder object is already instantiated and calls the getQuery() method to retrieve the Query object, which can then be used to execute the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userQueryBuilder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Check If Data Exists PHP\nDESCRIPTION: Checks if data is found for the query. Returns a boolean indicating whether any data was found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\nfunction exists(): bool\n```\n\n----------------------------------------\n\nTITLE: Find One Document by Criteria PHP\nDESCRIPTION: Retrieves a single document from the store based on specified criteria. This function returns only the first matching document. criteria (array): An array of conditions to filter the documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Creating a SleekDB Store in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new SleekDB store object. It requires the `SleekDB\\Store` class and a data directory path (`$dataDir`). The store is named 'news'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/managing-store.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$newsStore = new Store('news', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Creating a User Store in SleekDB\nDESCRIPTION: This code snippet shows how to create another store named 'users' in SleekDB. It assumes a community platform context where user data needs to be stored. Similar to the previous example, it initializes a `Store` object with the store name ('users') and the data directory ($dataDir).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Limiting the number of data records\nDESCRIPTION: This snippet demonstrates how to limit the number of data records returned by the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction limit(int|string $limit = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path in PHP\nDESCRIPTION: This function returns the path to the cache directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Finding a single document by criteria in PHP\nDESCRIPTION: This code snippet retrieves a single document from the store based on specified criteria. The `findOneBy` method accepts an array of criteria and returns the first matching document as an array, or `null` if no match is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Get First Document\nDESCRIPTION: Returns the first document that matches the query criteria. More efficient than `fetch` but `orderBy` does not work. Returns the document as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Grouping Data with groupBy - SQL\nDESCRIPTION: This SQL snippet demonstrates how to group data based on a specified field and count the number of items in each group.  It selects the 'category' and counts the occurrences of each category, aliasing the count as 'productAmount'.  The 'active' products are selected and grouped by 'category'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File PHP\nDESCRIPTION: This method deletes cache files for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Disable Cache PHP\nDESCRIPTION: Disables caching for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Disable Cache\nDESCRIPTION: Disables caching for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Cache Constructor Definition PHP\nDESCRIPTION: This is the constructor for the `Cache` class. It initializes a new `Cache` object and requires a `Query` object and store path as dependencies.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Query $query, string $storePath)\n```\n\n----------------------------------------\n\nTITLE: Having Method Definition - PHP\nDESCRIPTION: Definition of the `having` method in PHP\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: in() example PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the deprecated in method to retrieve users from specific countries and with specific ages.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Store Name PHP\nDESCRIPTION: Gets the name of the store. Returns a string representing the store's name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: Get Store Path PHP\nDESCRIPTION: This method returns the full path to the store, including the store name. It returns the path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Count Documents\nDESCRIPTION: Returns the number of documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction count(): int\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache No Lifetime\nDESCRIPTION: Deletes all cache files with no lifetime (null) in the current store. Targets cached data that does not expire.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Disable Cache\nDESCRIPTION: Disable caching for the current query. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Users with SleekDB (String)\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to retrieve distinct users based on the 'name' field, providing the field as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// providing a string\n$distinctUsers = $userQueryBuilder\n  ->distinct(\"name\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Grouping documents in PHP\nDESCRIPTION: This code snippet shows how to group documents using one or multiple fields. The `groupBy` method accepts an array of fields to group by, an optional counter key name, and a boolean indicating whether to allow empty groups. It returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction groupBy(array $groupByFields, string $counterKeyName = null, bool $allowEmpty = false): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping with HAVING condition SQL\nDESCRIPTION: This SQL snippet groups active products by category and retrieves categories with total views between 500 and 1000. It selects the category and the sum of views as totalViews.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category, \n  SUM(views) AS totalViews\nWHERE \n  active = true \nGROUP BY \n  category \nHAVING\n  totalViews > 500 AND totalViews < 1000;\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime\nDESCRIPTION: Returns the default cache lifetime for the store, which can be null (no lifetime) or an integer representing the lifetime in seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Using orWhere with where in PHP\nDESCRIPTION: This snippet shows an example of using both `where()` and `orWhere()` to create a query with `AND` and `OR` conditions.  Demonstrates combining where conditions with an OR condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Keeping SleekDB Query Object\nDESCRIPTION: This example demonstrates how to keep and reuse the Query object to perform multiple operations on the same query result. It fetches data, updates the matched documents, and then fetches the updated data, all using the same Query object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$userQuery = $userStore->createQueryBuilder()\n  ->where('products.totalBought', '>', 0)\n  ->where('products.totalSaved', '>', 0)\n  ->getQuery();\n\n// Fetch data.\n$users = $userQuery->fetch();\n\n// Update matched documents.\n$userQuery->update([\n  'someRandomData' => '123',\n]);\n\n// Fetch data again.\n$usersUpdated = $userQuery->fetch();\n```\n\n----------------------------------------\n\nTITLE: Initialize Database Directory PHP\nDESCRIPTION: This code initializes the database directory where SleekDB will store its data. It uses the `__DIR__` magic constant to create a relative path to a directory named 'myDatabase'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$databaseDirectory = __DIR__ . \"/myDatabase\";\n```\n\n----------------------------------------\n\nTITLE: Add Having Condition\nDESCRIPTION: Adds a `having` condition to the query, filtering the grouped documents. Parameters: `$criteria` (array) - an associative array representing the having conditions. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Nested Search with QueryBuilder and Options in SleekDB\nDESCRIPTION: Demonstrates how to search within nested properties using the `QueryBuilder` in SleekDB, configuring search options such as the algorithm and limiting the number of results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/searching.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Example article:\n// [\n//   \"_id\" => 1,\n//   \"title\" => [\n//     \"mainTitle\" => \"SleekDB is the best database!\"\n//   ],\n//   \"content\" => \"A NoSQL dabase completely made with PHP.\",\n// ]\n\n$newsStore = new Store(\"news\", __DIR__ . \"/database\");\n\n$searchQuery = \"SleekDB is the best database solution\";\n\n$searchOptions = [\n  \"algorithm\" => Query::SEARCH_ALGORITHM[\"prioritize\"]\n];\n\n$result = $newsStore\n  ->search([\"title.mainTitle\", \"content\"], $searchQuery, $searchOptions)\n  ->orderBy([\"searchScore\" => \"DESC\"])\n  ->except([\"searchScore\"])\n  ->limit(20)\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating User Store in SleekDB with PHP\nDESCRIPTION: This code snippet shows how to create a 'users' store in SleekDB. It assumes you have already set up the `SleekDB\\Store` class and defined the `$dataDir`.  The 'users' store can then be used to store user-related data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Order By\nDESCRIPTION: Set the sort order for the query results. Accepts an array of criteria. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Fields By ID in PHP with SleekDB\nDESCRIPTION: This snippet shows how to remove multiple fields from a document using the `updateById()` method. It removes the 'name' and 'age' fields from the document with the ID 24.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/edit-data.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$userStore->updateById(24, [ \"name\", \"age\" ]);\n```\n\n----------------------------------------\n\nTITLE: Delete All With No Lifetime\nDESCRIPTION: Delete all cache files with no lifetime (null) in current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array\nDESCRIPTION: This method is used internally to return an array containing all properties used for cache token generation. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Adding nested 'where' conditions (Deprecated)\nDESCRIPTION: This snippet shows how to add nested 'where' conditions to filter the data.  Deprecated since v2.3, use where and orWhere instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregating Data with groupBy - SQL\nDESCRIPTION: This SQL snippet demonstrates how to group data based on multiple fields, aggregate data using SUM, and rename fields with aliases.  It selects the 'category' (aliased as 'Category'), 'subcategory', and aggregates the 'views' column with a SUM, aliasing it as 'views'.  It also counts the grouped products as productAmount, filtering for active products and sorting the output.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB Store.php manually\nDESCRIPTION: This code snippet includes the SleekDB Store.php file manually in your PHP project. It's used when SleekDB is installed without Composer.  It assumes that the Store.php file is located in the specified relative path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/installation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache in SleekDB\nDESCRIPTION: This PHP function deletes the cache file(s) associated with the current query. It removes the cached data, forcing a refresh from the underlying data source on the next request. No parameters. No return value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache with No Lifetime\nDESCRIPTION: Deletes all cache files with no lifetime (null) in the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Fetching Data\nDESCRIPTION: Shows how to fetch all documents that match the defined query criteria using the `fetch()` method of the SleekDB Query object.  It retrieves all documents from the database that satisfy the defined conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = $userQueryBuilder\n  ->where([ \"city\", \"=\", \"london\" ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Users with SleekDB (Array)\nDESCRIPTION: This PHP code uses the SleekDB Query Builder to retrieve distinct users based on the 'name' field, providing the field within an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// providing an array\n$distinctUsers = $userQueryBuilder\n  ->distinct([\"name\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Having Method Definition - PHP\nDESCRIPTION: The definition of the having function that takes an array of criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction having(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in SleekDB QueryBuilder\nDESCRIPTION: This PHP function disables caching for the current query.  Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Except Method Usage PHP\nDESCRIPTION: Demonstrates how to use the `except` method to retrieve all information of a user except for their `_id` and `name` fields. The example shows how to chain the `except` method with `getQuery()` and `fetch()` to retrieve the desired data.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->except([\"_id\", \"name\"])\n  ->getQuery()\n  ->fetch();\n// output: [[\"age\": 28], [\"age\": 18]]\n```\n\n----------------------------------------\n\nTITLE: Getting the Condition Properties\nDESCRIPTION: This snippet demonstrates how to retrieve an array containing all information needed to execute an query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Nested Query in SleekDB\nDESCRIPTION: This JSON snippet shows the data structure that SleekDB's query for nested properties targets. The `where` clause in the PHP code example searches for documents where the 'post.author.role' field is equal to 'admin'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NotIn Clause Examples in PHP\nDESCRIPTION: Demonstrates different ways to use the NotIn clause in SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example with SleekDB (PHP)\nDESCRIPTION: This code demonstrates the usage of the deprecated `nestedWhere()` method with the `where()` method to construct a complex query. The goal is to retrieve users based on multiple nested conditions related to products, names, and ages. Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Properties in SleekDB with PHP\nDESCRIPTION: This code snippet demonstrates how to query nested properties within JSON documents using SleekDB's `where` clause in PHP. It shows how to specify the path to the nested property, the comparison operator, and the value to match. It uses dot notation to traverse the JSON structure. Requires PHP and the SleekDB library.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/features.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwhere( 'post.author.role', '=', 'admin' )\n```\n\n----------------------------------------\n\nTITLE: Regenerate Cache\nDESCRIPTION: Re-generates the cache for the current query. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB using Composer (Shell)\nDESCRIPTION: This command installs SleekDB using Composer, a dependency manager for PHP.  It adds the SleekDB package to your project and automatically updates the composer.json and composer.lock files. Requires Composer to be installed and configured.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Adding an In Condition - PHP\nDESCRIPTION: This code snippet demonstrates the method for adding an 'in' condition to the query. It takes the field name and an array of values as input, filtering results where the field's value is in the provided array. It returns the QueryBuilder for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Distinct Values\nDESCRIPTION: Return distinct values. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete All No Lifetime Cache PHP\nDESCRIPTION: Deletes all cache files with no lifetime (null) in the current store. This removes caches that persist indefinitely. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Multiple orWhere() Conditions in PHP\nDESCRIPTION: This example shows chaining multiple `orWhere()` calls.  The query retrieves users where either `products.totalSaved` is greater than 10, or both `products.totalBought` is greater than 20 AND `products.shipped` equals 1, or `products.totalBought` equals 0.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Returning the first document\nDESCRIPTION: This snippet shows how to retrieve the first document that matches the query. It's more efficient than `fetch` but `orderBy` does not work.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Change Store Destination\nDESCRIPTION: Changes the destination of the store object, allowing you to switch to a different store. Parameters include the new store name, database path, and an optional configuration array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: disableCache() Method Signature PHP\nDESCRIPTION: This code shows the signature of the `disableCache` method in the QueryBuilder class.  It disables caching for the specific query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache-management.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Cache\nDESCRIPTION: Deletes cache file(s) for the current query. Removes the cached data associated with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content Method PHP\nDESCRIPTION: This snippet shows the definition of the `get` method in PHP. It retrieves the content of the cache file for the current query. Returns an array or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Using the where() Method in PHP\nDESCRIPTION: This code shows the function signature for the `where()` method, used for filtering data based on specified criteria.  Multiple conditions are connected with an `AND` operator. The criteria is passed as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Grouping with HAVING Clause SQL - Rounded Price\nDESCRIPTION: This SQL snippet selects the name and rounded price of active products, rounding the price to zero decimal places. It filters results to only include products with a rounded price between 500 and 1000.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  name, \n  ROUND(price, 0) AS roundedPrice\nWHERE \n  active = true \nHAVING\n  roundedPrice > 500 AND roundedPrice < 1000;\n```\n\n----------------------------------------\n\nTITLE: Disable Cache\nDESCRIPTION: Disables caching for the current query. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Nested Join (Users, Articles, Comments)\nDESCRIPTION: This PHP snippet demonstrates a nested `join()` operation in SleekDB to retrieve users, their articles, and the comments associated with each article.  The outer join fetches articles created by the user, and the inner join, within the articles join closure, fetches comments for each retrieved article.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/join-stores.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($articleStore, $commentStore){\n    // returns QueryBuilder\n    return $articleStore\n      ->createQueryBuilder()\n      ->where([ \"author\", \"=\", $user[\"_id\"] ])\n      ->join(function($article) use ($commentStore){\n        // returns result\n        return $commentStore->findBy(\"articleId\", \"=\", $article[\"_id\"]);\n      }, \"comments\");\n\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the cache lifetime\nDESCRIPTION: This snippet demonstrates how to retrieve the cache lifetime for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Deleting the Store - PHP\nDESCRIPTION: This code snippet defines the method for deleting the entire store and all data it contains. It doesn't take any parameters and returns a boolean indicating whether the deletion was successful. It clears the data directory, cache, and all files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Files with No Lifetime in SleekDB\nDESCRIPTION: This snippet shows the function definition for `deleteAllWithNoLifetime()`, which deletes all cache files that have no lifetime defined (null) for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Complex Where Clause - SQL\nDESCRIPTION: This snippet shows a SQL WHERE clause with multiple conditions joined by AND and OR operators. It filters data based on author and topic, using both equality and LIKE operators. It serves as a reference for the equivalent SleekDB query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/fetch-data.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nWHERE ( author = \"John\" OR author = \"Mark\" ) AND ( topic like \"School%\" OR topic like \"Work%\" )\n```\n\n----------------------------------------\n\nTITLE: Search Method Signature PHP\nDESCRIPTION: Defines the signature of the `search` method in the SleekDB QueryBuilder. This method performs a full-text-like search against one or more fields. It accepts the field(s) to search and the keyword to search for as input, and returns a QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction search(string|array $fields, string $keyword): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache object\nDESCRIPTION: This snippet demonstrates how to retrieve the Cache object associated with the Query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Setting the amount of data to skip in PHP\nDESCRIPTION: This code demonstrates how to set the number of data records to skip.  The `skip` method accepts an integer representing the number of records to skip, defaulting to 0 if no argument is provided, and returns the modified `QueryBuilder` instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Keeping SleekDB QueryBuilder Object\nDESCRIPTION: This example shows how to keep and reuse the QueryBuilder object to add multiple conditions to a query. By reusing the same QueryBuilder instance, you can chain `where` clauses and execute different queries with incremental conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$userQueryBuilder = $userStore->createQueryBuilder();\n\n$userQueryBuilder->where([ 'products.totalBought', '>', 0 ]);\n\n$userQueryBuilder->where([ 'products.totalSaved', '>', 0 ]);\n\n// fetch all users that have totalBought > 0 and totalSaved > 0\n$users = $userQueryBuilder->getQuery()->fetch();\n\n// add new condition\n$userQueryBuilder->where([ 'active', '=', true ]);\n\n// fetch all users that have totalBought > 0, totalSaved > 0 and are active\n$usersActive = $userQueryBuilder->getQuery()->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete Store PHP\nDESCRIPTION: Deletes the store and wipes all the data and cache it contains. Returns a boolean indicating the success of the deletion operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteStore(): bool\n```\n\n----------------------------------------\n\nTITLE: Adding an 'orWhere' condition to the query\nDESCRIPTION: This snippet demonstrates how to add 'orWhere' conditions to filter data. It takes conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache with No Lifetime PHP\nDESCRIPTION: This method deletes all cache files with no lifetime (null) in the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB Store.php manually\nDESCRIPTION: This line includes the `Store.php` file, which is the main entry point for SleekDB functionality, in your PHP script. This is required when installing SleekDB manually (without Composer) to make the SleekDB classes available for use. Requires that you have downloaded and extracted SleekDB to your project.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: orderBy() Multiple Fields Result Example PHP\nDESCRIPTION: This example shows the structure of the expected output array when using the orderBy function with multiple fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"_id\" => 13, \"name\" => \"Anton\", \"age\" => 20],\n  [\"_id\" => 4, \"name\" => \"Aragon\", \"age\" => 16], \n  [\"_id\" => 2, \"name\" => \"Aragon\", \"age\" => 17], \n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Add Not In Condition PHP\nDESCRIPTION: Adds a \"not in\" condition to filter data.  Takes the field name and an array of values to check against. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Distinct method definition PHP\nDESCRIPTION: Defines the signature of the distinct function within the QueryBuilder. It takes a field or an array of fields as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(array|string $fields): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache Files - PHP\nDESCRIPTION: This code snippet defines the method for deleting all cache files for the current store. It takes no parameters and returns void.  The function clears out all cache files regardless of their lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Set Cache Content in PHP\nDESCRIPTION: This function sets and caches the content for the current query, associating it with a token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: orWhere() with AND conditions in PHP\nDESCRIPTION: This example retrieves all users that have `(products.totalSaved > 10 AND products.totalBought > 20) OR products.shipped = 1`. It uses the `where` method for the AND condition and the `orWhere` method for the OR condition.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->orWhere( [\"products.shipped\", \"=\", 1] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Order By\nDESCRIPTION: Set the sort order. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete Cache in PHP\nDESCRIPTION: This function deletes the cache file for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/cache.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Lifetime in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `setLifetime(int|null $lifetime): Cache`. It sets the lifetime for the current query or token. The `$lifetime` parameter is an integer representing the lifetime in seconds, or null for no lifetime.  It returns the Cache object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Lifetime Method PHP\nDESCRIPTION: This snippet shows the definition of the `getLifetime` method in PHP. It retrieves the configured lifetime for the current query. The lifetime is in seconds, 0 means infinite, null means no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Except Fields\nDESCRIPTION: Exclude specific fields from the query results. All fields except the specified ones will be returned.  Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer\nDESCRIPTION: This command installs SleekDB as a dependency in your PHP project using Composer. It fetches the package from Packagist and adds it to your composer.json file, enabling autoloading.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Delete Cache File in PHP\nDESCRIPTION: This code shows the function signature for the `delete()` method in the SleekDB Cache class, written in PHP. It deletes the cache file specifically associated with the current query based on its token. It returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: deleteAllWithNoLifetime() - Delete Cache Files with No Lifetime - PHP\nDESCRIPTION: Deletes all cache files within the current store that do not have a specified lifetime (i.e., their lifetime is null). This function does not take any parameters and does not return any value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Defining Data Directory Path in PHP\nDESCRIPTION: This code snippet defines the path where SleekDB will store its data. It uses the __DIR__ magic constant to create a relative path within the project directory. The data directory can be an absolute or relative path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/getting-started.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$dataDir = __DIR__ . \"/mydb\";\n```\n\n----------------------------------------\n\nTITLE: Get Query\nDESCRIPTION: Returns a new `Query` object which can be used to execute the query build.  The Query object is responsible for running the built query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: Retrieving all documents from a Store in PHP\nDESCRIPTION: This code snippet retrieves all documents from the store. The `findAll` function returns an array containing all documents in the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction findAll(): array\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime (Internal)\nDESCRIPTION: This method is used internally. Returns the store wide default cache lifetime. Returns an integer or null.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Update Method Signature (PHP)\nDESCRIPTION: This snippet shows the method signature for the `update()` method in SleekDB.  It takes an array as input, which contains the data to be updated in the selected documents.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nupdate($updateable);\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime PHP\nDESCRIPTION: This method retrieves the store-wide default cache lifetime. It returns the lifetime in seconds as an integer, or null if no default lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Get Default Cache Lifetime (Internal)\nDESCRIPTION: This method is used internally. Returns the store-wide default cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction _getDefaultCacheLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache with No Lifetime in SleekDB\nDESCRIPTION: This PHP function deletes all cache files with no lifetime (null) for the current store. These are typically caches that persist indefinitely unless explicitly cleared.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Update Method Signature - SleekDB - PHP\nDESCRIPTION: Defines the signature of the `update()` method within the `Store` class. This method is used for updating documents within SleekDB. It takes an array of updatable documents as input and returns a boolean indicating the success of the operation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: Getting the Store Object - PHP\nDESCRIPTION: This code snippet defines the method to get the Store object used to create the query builder. It takes no parameters and returns the Store object.  It is used internally to access information about the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Order By Criteria PHP\nDESCRIPTION: Sets the sort order for the result set. criteria (array): An associative array where the key is the field name and the value is the sort direction (e.g., 'asc' or 'desc').\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nfunction orderBy(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Skip method definition\nDESCRIPTION: Shows the function definition for the skip method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int|string $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content PHP\nDESCRIPTION: This code snippet shows the definition of the `get()` method. It retrieves the cached content (array) for the current query, returning `null` if no cache file is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Change Store Destination\nDESCRIPTION: Changes the destination of the store object.  Parameters: `$storeName` (string) - the new name of the store, `$databasePath` (string, optional) - the new path to the database folder, `$configuration` (array, optional) - an optional configuration array. Returns the Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Insert Single Data Object - SleekDB\nDESCRIPTION: Inserts a single data object into a SleekDB store using the `insert()` method. The data object is prepared as a PHP array and then inserted. The method returns the inserted object with the `_id` property generated by SleekDB. Requires SleekDB store instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/insert-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Prepare a PHP array to insert.\n$user = [\n    'name' => 'Kazi Hasan',\n    'products' => [\n        'totalSaved' => 19,\n        'totalBought' => 27\n    ],\n    'location' => [\n        'town' => 'Nagar',\n        'city' => 'Dhaka',\n        'country' => 'Bangladesh'\n    ]\n];\n// Insert the data.\n$user = $usersDB->insert( $user );\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with in() in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to use the `in()` method to filter data in SleekDB. It fetches users whose 'country' field is one of the values in the provided array: 'BD', 'CA', 'SE', or 'NA'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB->in('country', ['BD', 'CA', 'SE', 'NA'])->fetch();\n```\n\n----------------------------------------\n\nTITLE: getToken() method in PHP\nDESCRIPTION: Describes the `getToken()` method of the Cache class, which returns the unique token for the current query. This token is used for saving and retrieving the cache file. The method takes no parameters and returns a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Example of disableCache() in PHP\nDESCRIPTION: Illustrates how to disable caching for a query to retrieve active users.  This ensures that the query always fetches the latest data from the database, bypassing the cache. Requires an existing QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache-management.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->disableCache()\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Nested Where Example 1 (SQL)\nDESCRIPTION: This SQL query demonstrates a complex `WHERE` clause with nested conditions, combining `AND` and `OR` operators. It filters users based on their product savings, purchases, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n```\n\n----------------------------------------\n\nTITLE: Except Method Definition in SleekDB (PHP)\nDESCRIPTION: Defines the `except` method within the SleekDB QueryBuilder, which excludes specified fields from the query result.  It takes an array of field names as input and returns the QueryBuilder instance. This allows for chaining of other methods.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction except(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache Status\nDESCRIPTION: Returns a boolean indicating whether caching is enabled for the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: useCache() Example 3 in PHP\nDESCRIPTION: This example fetches and caches 20 active users with an infinite cache lifetime (0 seconds).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache-management.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// fetch and insert in cache\n$users = $userQueryBuilder\n    ->where( ['active', '=', 1] )\n    ->limit( 20 )\n    ->useCache(0) // 0 means infinite caching\n    ->getQuery()\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Search Options\nDESCRIPTION: Returns the search options of the store. This method is used internally. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: Adding a \"not in\" condition in PHP (Deprecated)\nDESCRIPTION: This method is deprecated. Adds a \"not in\" condition to filter data. The `notIn` method accepts a field name and an array of values, returning the modified `QueryBuilder`. Use the 'not in' condition directly in the `where` method instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Sorting by multiple fields using orderBy in SleekDB PHP\nDESCRIPTION: Illustrates sorting by multiple fields using the `orderBy()` method.  In this example, results are sorted by name and then by age. The code assumes `$userQueryBuilder` is an instance of the SleekDB QueryBuilder.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->orderBy([\"name\" => \"asc\", \"age\" => \"asc\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Update Method Definition\nDESCRIPTION: Defines the `update()` method signature within the SleekDB `Store` class. This method accepts an array of updatable documents and returns a boolean indicating success or failure.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/edit-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction update(array $updatable): bool;\n```\n\n----------------------------------------\n\nTITLE: getCachePath() method in PHP\nDESCRIPTION: Describes the `getCachePath()` method of the Cache class, which returns the path to the cache directory as a string. This method takes no arguments and provides the location where cache files are stored.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Not In Condition (Deprecated)\nDESCRIPTION: Adds a \"not in\" condition to filter data. Deprecated since version 2.4, use \"not in\" condition instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Store Name\nDESCRIPTION: Returns the name of the store. Returns a string representing the store name.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getStoreName(): string\n```\n\n----------------------------------------\n\nTITLE: delete() method in PHP\nDESCRIPTION: Describes the `delete()` method of the Cache class, which deletes the cache file for the current query. This method requires no parameters and has no return value. Use it to explicitly remove a query's cache.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/cache.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: Get Store (Internal)\nDESCRIPTION: This method is used internally. Returns the Store object used to create the QueryBuilder object. Returns a Store object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_47\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getStore(): Store\n```\n\n----------------------------------------\n\nTITLE: Get Distinct Values\nDESCRIPTION: Returns distinct values for specified fields. Takes a field (string or array) as input and returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: orWhere method in PHP\nDESCRIPTION: Presents the signature of the `orWhere` method within the QueryBuilder class in PHP. This method allows you to specify OR conditions to broaden the search. Like the `where` method, it accepts an array of criteria.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Executing a Query and Getting Results - PHP\nDESCRIPTION: This code snippet demonstrates the method for executing the query and retrieving the results. It takes no parameters and returns an array containing the query results. The function handles querying the store, applying filters, ordering, and applying limits.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction fetch(): array\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SleekDB Store using PHP\nDESCRIPTION: This code demonstrates how to insert a new news article (represented as an associative array) into the 'news' store using the `insert()` method.  The inserted data will automatically have a unique `_id` property added to it. The `$article` variable holds an array of data to be inserted.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$article = [\n  \"title\" => \"Google Pixel XL\",\n  \"about\" => \"Google announced a new Pixel!\",\n  \"author\" => [\n    \"avatar\" => \"profile-12.jpg\",\n    \"name\" => \"Foo Bar\"\n  ]\n];\n$results = $newsStore->insert($article);\n```\n\n----------------------------------------\n\nTITLE: Changing the Store\nDESCRIPTION: This snippet demonstrates how to change the store object. It takes the store name, database path, and an optional configuration array as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction changeStore(string $storeName, string $databasePath = null, array $configuration = []): Store\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache\nDESCRIPTION: Deletes all cache files for the current store. Invalidates all cached query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Filtering with multiple `in` (Deprecated) in SleekDB (PHP)\nDESCRIPTION: This example shows how to use multiple `in` methods (deprecated) in SleekDB to filter data based on multiple fields. It retrieves users who are from the specified countries and are of the specified ages.  This method has been deprecated in favor of `where` and `orWhere`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Query Constructor\nDESCRIPTION: Create a new Query object. (Internally it creates a new Cache object)\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path PHP\nDESCRIPTION: Gets the path to the cache folder for the current store. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB via Composer (Shell)\nDESCRIPTION: This command installs SleekDB as a dependency to your PHP project using Composer. It adds the `rakibtg/sleekdb` package to your project's `composer.json` file and downloads the necessary files.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties\nDESCRIPTION: This method is used internally to return an array that contains all information needed to execute a query. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version (Shell)\nDESCRIPTION: This command installs the development version of SleekDB using Composer.  The `dev-dev` flag specifies that the latest code from the `dev` branch should be installed. This version is not recommended for production due to potential instability and API changes.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Multiple orWhere with where in PHP\nDESCRIPTION: Illustrates combining `where` with multiple `orWhere` calls. The query retrieves all users matching the condition `products.totalSaved > 10 OR (products.totalBought > 20 AND products.shipped = 1) OR totalBought = 0`. This code shows the nesting and precedence when using multiple `orWhere` conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where( [\"products.totalSaved\", \">\", 10] )\n  ->orWhere(\n    [\n      [ \"products.totalBought\", \">\", 20 ],\n      [ \"products.shipped\", \"=\", 1 ]\n    ]\n  )\n  ->orWhere( [\"products.totalBought\", \"=\", 0] )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Skipping documents using SleekDB skip() with string\nDESCRIPTION: This PHP snippet demonstrates how to skip the first 10 documents using the `skip()` method with a string value. The `skip()` method accepts both integers and strings as input for the number of documents to skip.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Cache Object in SleekDB\nDESCRIPTION: This snippet shows how to retrieve the Cache object from a Query object using the `getCache()` method. The Cache object allows deeper control over caching functionality within SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/cache.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cache = $userQuery->getCache();\n```\n\n----------------------------------------\n\nTITLE: Deprecated in() Method Signature (PHP)\nDESCRIPTION: Defines the method signature of the deprecated `in()` method, which behaves like the SQL `IN` clause. It allows specifying an array of values to match against a given field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array (Internal)\nDESCRIPTION: This method is used internally. Returns a an array used to generate a unique token for the current query. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Except Fields PHP\nDESCRIPTION: Excludes specific fields from the result set. The specified fields will not be returned in the fetched documents. fieldNames (string[]): An array of field names to exclude.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Import SleekDB (PHP)\nDESCRIPTION: This line imports the `Store.php` file, which is the main entry point for using SleekDB. It is necessary when installing SleekDB manually without using Composer.  It assumes the file is located in the `SleekDB` directory relative to your script.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: Algorithm Prioritize Position - PHP\nDESCRIPTION: Shows how to set the search algorithm to 'prioritize_position' using the `Query::SEARCH_ALGORITHM` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/searching.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nQuery::SEARCH_ALGORITHM[\"prioritize_position\"]\n```\n\n----------------------------------------\n\nTITLE: Adding an orWhere condition in PHP\nDESCRIPTION: This code demonstrates how to add 'orWhere' conditions to filter data in the query. The `orWhere` method accepts an array of conditions and returns the modified `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nfunction orWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version with Composer\nDESCRIPTION: This command installs the development version of SleekDB using Composer. Use this only if you want to test new features and understand that API may change without notice.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/installation.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Multiple where() conditions with separate query builder in PHP\nDESCRIPTION: This example retrieves users with `products.totalSaved > 10` AND `products.totalBought > 20` by first creating a QueryBuilder, then preparing the query with the where conditions in a single array, and finally executing the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// retrieve QueryBuilder\n$userQueryBuilder = $userStore->createQueryBuilder()\n\n// prepare query\n$userQueryBuilder->where(\n  [\n    [\"products.totalSaved\", \">\", 10],\n    [\"products.totalBought\", \">\", 20]\n  ]\n);\n\n// execute query\n$users = $userQueryBuilder->getQuery()->fetch();\n\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache\nDESCRIPTION: Deletes all cache files for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Get Store Path PHP\nDESCRIPTION: Retrieves the full path to the store, including the store name. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Custom Select Function Usage - PHP\nDESCRIPTION: Demonstrates how to use a custom select function (closure) to define a complex selection logic.  This allows for customized data transformation during the retrieval process.  Requires PHP 7.0 or higher for closure support and SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[\"ALIAS\" => CLOSURE, ...]\n```\n\n----------------------------------------\n\nTITLE: getLifetime Method in PHP\nDESCRIPTION: This code defines the `getLifetime()` method of the Cache class. It returns the configured lifetime for the cache file associated with the current query. The return value is either an integer representing the lifetime in seconds (0 meaning infinite), or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties PHP\nDESCRIPTION: This method is used internally. It returns an array that contains all information needed to execute a query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Multiple Joins - SleekDB (PHP)\nDESCRIPTION: This example demonstrates how to use multiple `join()` calls to retrieve users with both their comments and articles.  It retrieves all users, their comments (where 'userId' matches the user's '_id'), and their articles (where 'author' matches the user's '_id').\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/join-stores.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting the Cache Token - PHP\nDESCRIPTION: This code snippet demonstrates the method for retrieving the cache token, which is a unique identifier for the cached data. It takes no parameters and returns the cache token as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer\nDESCRIPTION: This command installs SleekDB using Composer, the recommended installation method. It adds SleekDB as a dependency to your project, and composer handles autoloading.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/installation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Fetching All Data in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates how to fetch all data from a SleekDB store using the `fetch()` method. It queries the 'users' store and retrieves all documents without any filtering conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$usersDB->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Join Method Definition\nDESCRIPTION: This PHP snippet shows the method signature of the `join()` method in SleekDB's QueryBuilder. It takes a Closure (join function) and a string (data property name) as arguments and returns a QueryBuilder instance, allowing for chained queries.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/join-stores.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinFunction, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Storing Date as Timestamp in SleekDB (PHP)\nDESCRIPTION: Shows how to store a date as a timestamp when inserting data into a SleekDB store. A DateTime object is created, and its timestamp is extracted using `getTimestamp()` before being stored in the 'releaseDate' field.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/dates.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$releaseDate = new \\DateTime(\"2021-01-17\");\n\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => $releaseDate->getTimestamp()\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Deleting User by Name and Retrieving Results in SleekDB (PHP)\nDESCRIPTION: This code demonstrates deleting a user by name using `deleteBy()` and retrieving the deleted user documents. It sets the `$returnOption` to `Query::DELETE_RETURN_RESULTS` to receive the deleted users as an array. Make sure to include `use SleekDB/Query;`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/delete-data.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB/Query;\n$deletedUsers = $userStore->deleteBy([\"name\", \"=\", \"Joshua Edwards\"], Query::DELETE_RETURN_RESULTS);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Lifetime PHP\nDESCRIPTION: This code snippet shows the definition of the `getLifetime()` method. It returns the lifetime in seconds (int or null) of the cache associated with the current query. 0 indicates infinite lifetime, and null indicates no lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/cache.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getLifetime(): int|null\n```\n\n----------------------------------------\n\nTITLE: Get Token\nDESCRIPTION: Get the cache token.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache Files With No Lifetime - PHP\nDESCRIPTION: This code snippet defines the method for deleting all cache files with no lifetime (null) in the current store. It takes no parameters and returns void. This is useful for clearing out cache files that never expire.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Getting Query Object in SleekDB\nDESCRIPTION: This PHP function returns a new `Query` object. The `Query` object is used to execute the query build by the `QueryBuilder`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nfunction getQuery(): Query\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Constructor\nDESCRIPTION: Creates a new QueryBuilder object. This class handles everything regarding query creation. It requires a `Store` object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(Store $store)\n```\n\n----------------------------------------\n\nTITLE: Get Cache Path in PHP\nDESCRIPTION: Returns the path to the cache directory as a string. This allows access to the location where cache files are stored. No parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cache in SleekDB with PHP\nDESCRIPTION: This snippet shows the function definition for `deleteAll()`. It deletes all cache files belonging to the current store. This function doesn't take any parameters and doesn't return any value.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Set\nDESCRIPTION: Cache content for current query\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version using Composer (Shell)\nDESCRIPTION: This command installs the development version of SleekDB using Composer. This version is not recommended for production use as it may contain undocumented features and unstable APIs. It's intended for experimentation and testing.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: SleekDB: Multiple Joins (Users, Comments, Articles)\nDESCRIPTION: This PHP snippet illustrates how to perform multiple `join()` operations in SleekDB to fetch users, their comments, and their articles in a single query. It chains `join()` calls, each with a closure that defines the join condition for comments and articles based on the user ID.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/join-stores.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n\n$userStore = new Store(\"users\", $dataDir);\n$commentStore = new Store(\"comments\", $dataDir);\n$articleStore = new Store(\"articles\", $dataDir);\n\n$users = $userStore\n  ->createQueryBuilder()\n  ->join(function($user) use ($commentStore) {\n    // returns result\n    return $commentStore->findBy([ \"userId\", \"=\", $user[\"_id\"] ]);\n  }, \"comments\")\n  ->join(function($user) use ($articleStore) {\n    // returns result\n    return $articleStore->findBy([ \"author\", \"=\", $user[\"_id\"] ]);\n  }, \"articles\")\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: PHP in() Method Definition\nDESCRIPTION: This PHP code defines the `in` method signature of the QueryBuilder. It takes the field name and an array of values as parameters. It's used to check if the field's value is present in the given array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: deleteAllWithNoLifetime Method in PHP\nDESCRIPTION: This code defines the `deleteAllWithNoLifetime()` method of the Cache class. It deletes all cache files in the current store that have no defined lifetime (i.e., their lifetime is set to null).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Getting the Data Directory - PHP\nDESCRIPTION: This code snippet defines the method for retrieving the location (directory path) of the store's data. It takes no parameters and returns the data directory path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties PHP\nDESCRIPTION: This method is used internally. It returns an array that contains all information needed to execute a query. No input parameters are required.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/reference.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB Store class\nDESCRIPTION: This line includes the `Store.php` file, which contains the `Store` class, enabling you to use SleekDB's storage functionalities in your PHP script. It assumes that the `SleekDB` directory is located one level above the current script's directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: SleekDB Multiple notIn() Queries\nDESCRIPTION: This PHP snippet demonstrates chaining the deprecated `notIn()` method to filter users who are NOT from certain countries and whose `products.totalSaved` is NOT in a given set of values. It's noted that this method is deprecated and `where` or `orWhere` should be used instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Lifetime\nDESCRIPTION: Retrieves the cache lifetime for the current query. Returns the lifetime as an integer or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Getting the search options in PHP\nDESCRIPTION: This method is used internally to retrieve the search options for the store. The `_getSearchOptions` function returns an array containing the search options.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version (Shell)\nDESCRIPTION: This command installs the development version of SleekDB using Composer. This version is not recommended for production environments as it may contain unstable features and undocumented API changes. Use with caution and for experimental purposes only.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents - PHP\nDESCRIPTION: This code snippet defines the function to insert multiple documents into the store. It takes an array of associative arrays as input, where each inner array represents a document. The function returns an array containing the inserted documents, each with its unique _id.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction insertMany(array $data): array\n```\n\n----------------------------------------\n\nTITLE: Limiting Records in SleekDB (PHP)\nDESCRIPTION: This snippet shows how to limit the number of records returned when fetching data from a SleekDB database. The `limit()` method is used to fetch only 5 users. Requires a SleekDB database instance `$usersDB`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/skip-limit.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Fetch only 5 users.\n$users = $usersDB->limit( 5 )->fetch();\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Lifetime - PHP\nDESCRIPTION: This code snippet demonstrates the method for retrieving the cache lifetime. It takes no parameters and returns the cache lifetime as an integer or null if no lifetime is set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction getLifetime(): null|int\n```\n\n----------------------------------------\n\nTITLE: Creating Another SleekDB Store\nDESCRIPTION: This snippet illustrates creating a third SleekDB store using the `SleekDB\\Store` class. It assumes a data directory (`$dataDir`) is defined.  This creates a 'posts' store which is used to store user posts.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/managing-store.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Multiple in() Method Usage Example (PHP)\nDESCRIPTION: Demonstrates chaining the deprecated `in()` method to retrieve users from specific countries (BD, CA, SE, NA) and of specific ages (18, 20, 23, 30).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array PHP\nDESCRIPTION: This method is used internally. It returns an array containing all properties that are used for the cache token generation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: GroupBy with Counter - PHP\nDESCRIPTION: Shows how to use the `groupBy()` method to group products by 'category' and add a counter ('productAmount') to each group, representing the number of products in that category.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$productQueryBuilder\n  ->where([\"active\", \"=\", true])\n  ->groupBy([\"category\"], \"productAmount\")\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"category\" => \"pants\", \"productAmount\" => 200],\n  [\"category\" => \"shirts\", \"productAmount\" => 29],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Skip Records\nDESCRIPTION: Set the amount of data record to skip. Accepts an integer or string representing the number of records to skip. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int|string $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Selecting with Aggregation and GroupBy - SQL\nDESCRIPTION: SQL equivalent for next code snippet, using SUM aggregation and GROUP BY statement.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT age, SUM(follower) as followerSum GROUP BY age;\n```\n\n----------------------------------------\n\nTITLE: Skipping Records in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates how to skip a specified number of records when fetching data from a SleekDB database. The `skip()` method is used to skip the first 5 users, and then the `fetch()` method retrieves the remaining records. Requires a SleekDB database instance `$usersDB`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/skip-limit.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Skip the first 5 users.\n$users = $usersDB->skip( 5 )->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache (Internal)\nDESCRIPTION: This method is used internally. Returns if caching is enabled store wide. Returns a boolean.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Multiple notIn() Conditions in PHP with SleekDB\nDESCRIPTION: This snippet demonstrates using multiple `notIn()` clauses with nested properties in SleekDB. It filters users where 'country' is not in ['IN', 'KE', 'OP'] AND 'products.totalSaved' is not in [100, 150, 200].\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/fetch-data.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->notIn('country', ['IN', 'KE', 'OP'])\n    ->notIn('products.totalSaved', [100, 150, 200])\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: where Method Definition in PHP\nDESCRIPTION: This snippet shows the method signature for `where()`, used to filter data based on specified criteria. Multiple conditions provided to `where` are combined using `AND`.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction where(array $criteria): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Exclude Fields PHP\nDESCRIPTION: Exclude specific fields from the query results. Takes an array of field names to exclude. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nfunction except(string[] $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Filtering with multiple `notIn` (Deprecated) in SleekDB (PHP)\nDESCRIPTION: This example demonstrates the usage of multiple `notIn` methods (deprecated) to filter data. It filters users based on both their country and the `products.totalSaved` value. This approach is discouraged, and `where` or `orWhere` are the preferred alternatives.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: in() Method Usage Example (PHP)\nDESCRIPTION: Demonstrates using the deprecated `in()` method to retrieve users from specific countries: BD, CA, SE, or NA.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Return Distinct Values PHP\nDESCRIPTION: Returns distinct values.  Takes the field(s) to get distinct values from.  Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding In Condition in SleekDB (Deprecated)\nDESCRIPTION: This PHP function adds an \"in\" condition to filter data.  Deprecated since version 2.4, use \"in\" condition directly in `where` clause instead. Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: select Method Definition in PHP\nDESCRIPTION: This snippet shows the method signature for `select()`, which allows specifying which fields to retrieve in the query results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/query-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction select(array $fieldNames): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Setting the Skip Amount - PHP\nDESCRIPTION: This code snippet shows the method for setting the number of data records to skip. It takes an integer representing the number of records to skip as input and returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction skip(int $skip = 0): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding Not In Condition in SleekDB (Deprecated)\nDESCRIPTION: This PHP function adds a \"not in\" condition to filter data.  Deprecated since version 2.4, use \"not in\" condition directly in `where` clause instead. Returns the QueryBuilder object for method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory (Deprecated)\nDESCRIPTION: Returns the location (directory path) of the store. Deprecated since version 2.7, use `getDatabasePath` instead. Returns a string representing the data directory path.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.8/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Custom select function result\nDESCRIPTION: This is the result of the query of the custom select function examples.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"age\" => 18, \"fullName\" => \"Tom, Great\", \"follower\" => 901],\n  [\"age\" => 20, \"fullName\" => \"John, West\", \"follower\" => 435],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Store in PHP\nDESCRIPTION: This code creates a store named 'posts' for storing post data. It initializes a `SleekDB\\Store` object named `$postStore` with the store name 'posts' and a data directory `$dataDir`. This assumes `$dataDir` has already been defined.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/managing-store.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: GroupBy and Count - SQL\nDESCRIPTION: SQL example for grouping by category and counting the number of products where active is true.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category, COUNT(*) AS productAmount WHERE active = true GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Where Example (PHP)\nDESCRIPTION: This PHP code uses the deprecated `nestedWhere` method of SleekDB's query builder to construct a complex query with nested `AND` and `OR` conditions for filtering user data based on product savings, purchases, name, and age. It demonstrates how to translate a complex SQL `WHERE` clause into SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with DateTime objects\nDESCRIPTION: Demonstrates how to use PHP's DateTime objects to filter data in SleekDB using the `findBy()` method. It converts date strings to DateTime objects and uses the BETWEEN condition to retrieve records within a specified date range.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/dates.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse SleekDB\\Store;\n\n// create store\n$databaseDirectory = __DIR__ . \"/database\";\n$newsStore = new Store(\"news\", $databaseDirectory);\n\n// Convert the date-strings to timestamps\n$startDate = new \\DateTime(\"2020-12-01\");\n$endDate = new \\DateTime(\"2021-01-04\");\n\n// Get result\n// WHERE releaseDate >= \"2020-12-01\" AND releaseDate <= \"2021-01-04\"\n$news = $newsStore->findBy([ \"releaseDate\", \"BETWEEN\", [ $startDate, $endDate ] ] );\n```\n\n----------------------------------------\n\nTITLE: Returning distinct values\nDESCRIPTION: This snippet demonstrates how to return distinct values.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction distinct(string|array $fields = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: GroupBy example with SUM result\nDESCRIPTION: Result of the GroupBy example with SUM.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n[\n  [\"Category\" => \"pants\", \"subcategory\" => \"shorts\", \"productAmount\" => 20, \"views\" => 212],\n  [\"Category\" => \"pants\", \"subcategory\" => \"jeans\", \"productAmount\" => 83, \"views\" => 331],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: NestedWhere complex example PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the deprecated nestedWhere method to create a complex query with multiple AND and OR conditions, filtering users based on product totals, name patterns, and age ranges.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete\nDESCRIPTION: Delete cache file/s for current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: deleteAll Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `deleteAll` method within the Cache class. This method is used to delete all cache files associated with the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: Select Functions (SUM, AVG) - SQL\nDESCRIPTION: Example of SQL syntax using SUM aggregation function with alias followerSum.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(follower) as followerSum;\n```\n\n----------------------------------------\n\nTITLE: Creating Additional SleekDB Stores\nDESCRIPTION: These code snippets demonstrate the creation of additional SleekDB stores for a community platform. Each store is initialized using the `SleekDB\\Store` class and assigned a name ('users', 'posts') and a data directory (`$dataDir`). These names correspond to the data that will be stored in the corresponding directories.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\nLANGUAGE: php\nCODE:\n```\n$postStore = new Store('posts', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Nested Querying (JSON)\nDESCRIPTION: This snippet illustrates the JSON structure that the SleekDB query example targets. It shows a document with a nested 'post' object containing an 'author' object, which in turn contains a 'role' property.  The 'where' clause in the PHP snippet searches for documents where the 'role' is 'admin'.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/features.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post\": {\n    \"author\": {\n      \"role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting all cache files for the store\nDESCRIPTION: This snippet demonstrates how to delete all cache files for the current store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAll()\n```\n\n----------------------------------------\n\nTITLE: deleteAllWithNoLifetime Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `deleteAllWithNoLifetime` method within the Cache class. This method is used to delete all cache files of the current store that have no lifetime set (null).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Skip Example\nDESCRIPTION: Example showing how to use skip to skip the first 10 results.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip(10)\n  ->getQuery()\n  ->fetch();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->skip('10')\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Delete All with No Lifetime Method PHP\nDESCRIPTION: This snippet shows the definition of the `deleteAllWithNoLifetime` method in PHP. It deletes all cache files associated with the current store that have no lifetime set.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/cache.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Cache Class Constructor\nDESCRIPTION: Creates a new Cache object. Parameters: `$storePath` (Query) - the Query object associated with the cache, `&$cacheTokenArray` (array) - the cache token array, `$cacheLifetime` (int|null) - the cache lifetime in seconds.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_59\n\nLANGUAGE: PHP\nCODE:\n```\nfunction __construct(Query $storePath, array &$cacheTokenArray, int|null $cacheLifetime)\n```\n\n----------------------------------------\n\nTITLE: Creating Another SleekDB Store in PHP\nDESCRIPTION: This snippet creates another SleekDB store. It assumes a community platform scenario where a 'users' store is needed. It instantiates the `Store` class with 'users' as the store name and `$dataDir` as the data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/managing-store.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$userStore = new Store('users', $dataDir);\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties PHP\nDESCRIPTION: This method is used internally. It returns an array that contains all information needed to execute a query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: Nested Where Conditions Array Structure (PHP)\nDESCRIPTION: This code snippet shows the structure of the conditions array used in the deprecated `nestedWhere()` method in SleekDB. It demonstrates how to nest conditions and specify the outermost operation (AND or OR). Note: This method is deprecated and `where` and `orWhere` should be used instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: In Clause with SleekDB (PHP)\nDESCRIPTION: This code snippet shows the signature for using the deprecated `in()` method to check if a field's value is present in a given array. It takes the field name and an array of values as input. Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding an \"in\" condition in PHP (Deprecated)\nDESCRIPTION: This method is deprecated.  Adds an \"in\" condition to filter data. The `in` method accepts a field name and an array of values, returning the modified `QueryBuilder`.  Use the 'in' condition directly in the `where` method instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Deprecated In Function (PHP)\nDESCRIPTION: This PHP code shows the signature of the deprecated `in()` method of the SleekDB QueryBuilder. The method takes a field name and an array of values, filtering results where the specified field's value is in the given array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nin(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Query Constructor Definition PHP\nDESCRIPTION: This is the constructor for the `Query` class. It initializes a new `Query` object and creates a new `Cache` object internally. It requires a `QueryBuilder` object instance as a dependency.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/reference.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct(QueryBuilder $queryBuilder)\n```\n\n----------------------------------------\n\nTITLE: join() Function Definition PHP\nDESCRIPTION: Defines the `join()` method within the SleekDB QueryBuilder. This method enables joining two or more stores together. It takes a Closure that defines the joined store and a string that specifies the name of the data property.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nfunction join(Closure $joinedStore, string $dataPropertyName): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: set Method in PHP\nDESCRIPTION: This code snippet shows the signature of the `set` method within the Cache class. This method is used to set and cache the content for the current query/token. It takes an array as input which represents the content to be cached.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.0/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: Finding One Document by Criteria - PHP\nDESCRIPTION: This code snippet defines the method for retrieving a single document based on the given criteria. It takes an array of criteria as input and returns the first matching document as an array or null if no match is found.  It is similar to `findBy` but returns only one.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/reference.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction findOneBy(array $criteria): array|null\n```\n\n----------------------------------------\n\nTITLE: Not In (Deprecated)\nDESCRIPTION: Deprecated since version 2.4, use \"not in\" condition instead. Add \"not in\" condition to filter data. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_50\n\nLANGUAGE: PHP\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: SQL WHERE Clause Example\nDESCRIPTION: This SQL snippet demonstrates a complex WHERE clause with nested AND/OR conditions, using LIKE operator and range checks on numeric fields. It retrieves records that satisfy multiple criteria on products, name, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/query-builder.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n```\n\n----------------------------------------\n\nTITLE: Filtering with nestedWhere and implicit AND (deprecated) in PHP\nDESCRIPTION: This PHP snippet demonstrates the use of the deprecated `nestedWhere` method with an implicit AND operation as the outermost condition. It retrieves users based on status, city, and age.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"status\", \"=\", \"premium\"]\n    ]\n  )\n  ->nestedWhere(\n    [\n      [ // <- Outermost operation is optional (Default: \"AND\")\n        [ \"city\", \"=\", \"london\" ]\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [ \"age\", \">\", 30 ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: SleekDB Multiple in() Queries\nDESCRIPTION: This PHP snippet shows how to chain multiple deprecated `in()` calls to filter users based on both country and age. It's noted that this method is deprecated and `where` or `orWhere` should be used instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->in(\"age\", [18, 20, 23, 30])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering with `notIn` (Deprecated) in SleekDB (PHP)\nDESCRIPTION: This snippet demonstrates the use of the deprecated `notIn` method in SleekDB. It filters out users based on whether their country matches any of the values in the provided array. This method is no longer recommended and `where` or `orWhere` should be used instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Condition Properties (Internal)\nDESCRIPTION: This method is used internally. Returns an array containing all information needed to execute an query. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nfunction _getConditionProperties(): array\n```\n\n----------------------------------------\n\nTITLE: SleekDB Query using in()\nDESCRIPTION: This PHP snippet demonstrates the usage of the deprecated `in()` method in SleekDB to retrieve users from specific countries.  It's noted that this method is deprecated and `where` or `orWhere` should be used instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Cache Content\nDESCRIPTION: Retrieves content from the cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nfunction get(): array|null\n```\n\n----------------------------------------\n\nTITLE: Return First Document PHP\nDESCRIPTION: Returns the first document. (More efficient than `fetch` but `orderBy` does not work). Returns an array containing the first document, or null if no document is found.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\nfunction first(): array\n```\n\n----------------------------------------\n\nTITLE: Get Cache Object\nDESCRIPTION: Returns the Cache object associated with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/reference.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nfunction getCache(): Cache\n```\n\n----------------------------------------\n\nTITLE: Storing Dates as Strings in SleekDB\nDESCRIPTION: Illustrates storing dates as strings in SleekDB using the `insert()` method.  The example shows how to create a new article array with a releaseDate as a string, then insert it into the database. Requires SleekDB.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/dates.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newArticle = [\n  \"author\" => \"John\",\n  \"title\" => \"Why everybody love SleekDB\",\n  \"content\" => \"Because it's the best!\",\n  \"releaseDate\" => \"2021-01-17\"\n];\n\n$newArticle = $newsStore->insert($newArticle);\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache (Internal)\nDESCRIPTION: This method is used internally. Returns if caching is enabled store wide.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Nested Where Condition (Deprecated)\nDESCRIPTION: Add nested where conditions to filter data. Deprecated since version 2.3, use `where` and `orWhere` instead. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Get Use Cache (Internal)\nDESCRIPTION: This method is used internally. Returns if caching is enabled store wide. Returns a boolean.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nfunction _getUseCache(): bool\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache No Lifetime\nDESCRIPTION: Delete all cache files with no lifetime (null) in current store. Void return.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Insert Document with Auto ID (PHP)\nDESCRIPTION: This snippet demonstrates how to insert a new document in SleekDB using the `updateOrInsert()` method without providing an `_id`. SleekDB will automatically generate an `_id` for the new document. The `$userStore` object must be initialized.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/edit-data.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$user = [\n    \"name\" => \"John\",\n    ...\n];\n$userStore->updateOrInsert($user);\n```\n\n----------------------------------------\n\nTITLE: In Example 1 (PHP)\nDESCRIPTION: This PHP code uses the deprecated `in()` method to retrieve users whose country is one of BD, CA, SE, or NA.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Nested Where Clause with SleekDB (PHP)\nDESCRIPTION: This code snippet shows the signature for using the deprecated `nestedWhere()` method to create complex nested where statements. It takes an array of conditions as input.  Note: This method is deprecated and `where` and `orWhere` should be used instead. Dependencies: SleekDB QueryBuilder instance.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Set Cache Lifetime PHP\nDESCRIPTION: Sets the cache lifetime. Takes an integer or null as the lifetime. Returns the `Cache` object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Store Path PHP\nDESCRIPTION: Gets the path to the store, including the store name. Returns a string representing the complete path to the store.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getStorePath(): string\n```\n\n----------------------------------------\n\nTITLE: Using in() Clause - PHP\nDESCRIPTION: Illustrates the usage of the `in()` clause method in SleekDB. This method functions like the IN clause in SQL, allowing you to filter documents where a field's value is within a specified array.  Multiple `in()` calls can be chained for different fields.\nSOURCE: https://github.com/sleekdb/docs/blob/master/1.5/release-notes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $usersDB\n    ->in('country', ['BD', 'CA', 'SE', 'NA'])\n    ->in('products.totalSaved', [100, 150, 200])\n    ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Get Data Directory (Deprecated)\nDESCRIPTION: Gets the location (directory path) of the store. Deprecated since version 2.7, use `getDatabasePath` instead. Returns a string representing the data directory.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nfunction getDataDirectory(): string\n```\n\n----------------------------------------\n\nTITLE: Nested Where (Deprecated)\nDESCRIPTION: Deprecated since version 2.3, use `where` and `orWhere` instead. Add nested where conditions to filter data. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_48\n\nLANGUAGE: PHP\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: NestedWhere Conditions Array Structure\nDESCRIPTION: This PHP code shows the structure of the conditions array required by the deprecated `nestedWhere` method.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Disable Cache PHP\nDESCRIPTION: Disables caching for the current query. Returns the `QueryBuilder` instance for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nfunction disableCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Delete All Cache (No Lifetime) PHP\nDESCRIPTION: Deletes all cache files with no lifetime (null) in the current store. Returns void.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.1/reference.md#_snippet_51\n\nLANGUAGE: PHP\nCODE:\n```\nfunction deleteAllWithNoLifetime()\n```\n\n----------------------------------------\n\nTITLE: Initializing SleekDB Store in PHP\nDESCRIPTION: This snippet initializes a new SleekDB store named 'news' using the defined data directory path. If the store does not exist, it will be created automatically.  Optionally, a configuration array can be passed as a third parameter to customize the store's behavior.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.2/getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newsStore = new \\SleekDB\\Store(\"news\", $dataDir);\n```\n\n----------------------------------------\n\nTITLE: In Condition (Deprecated)\nDESCRIPTION: Add \"in\" condition to filter data. Deprecated since version 2.4, use \"in\" condition instead. Returns the QueryBuilder object for chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: delete() Method in PHP\nDESCRIPTION: This code snippet shows the `delete` method, which deletes the cache file associated with the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction delete()\n```\n\n----------------------------------------\n\nTITLE: SQL GroupBy with SUM Example\nDESCRIPTION: SQL example with SUM and GroupBy.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  category AS Category,\n  subcategory, \n  COUNT(*) AS productAmount,\n  SUM(views) AS views \nWHERE \n  active = true \nGROUP BY \n  category, subcategory\nORDER BY\n  category ASC, subcategory DESC;\n```\n\n----------------------------------------\n\nTITLE: getToken Method in PHP\nDESCRIPTION: This code defines the `getToken()` method of the Cache class. It returns a unique string that serves as the token for the current query. This token is used to identify and manage the cache file associated with the query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Adding a 'not in' condition (Deprecated)\nDESCRIPTION: This snippet shows how to add a 'not in' condition to filter data. Deprecated since v2.4, use 'not in' condition instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding an 'in' condition (Deprecated)\nDESCRIPTION: This snippet demonstrates how to add an 'in' condition to filter data. Deprecated since v2.4, use 'in' condition instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/reference.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB dev version using Composer\nDESCRIPTION: This command installs the development version of SleekDB using Composer. It retrieves the `dev-dev` branch, which may contain unstable or undocumented features. Not recommended for production environments.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Nested Where (Deprecated)\nDESCRIPTION: Adds nested where conditions to filter data. Deprecated since version 2.3, use `where` and `orWhere` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere($conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Using `in` method (deprecated) in PHP\nDESCRIPTION: This PHP snippet uses the deprecated `in` method to retrieve users whose country is one of the specified values (BD, CA, SE, NA).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->in(\"country\", [\"BD\", \"CA\", \"SE\", \"NA\"])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version with Composer\nDESCRIPTION: This shell command installs the development version of SleekDB using Composer. It specifies the `dev-dev` stability flag to fetch the latest code from the `dev` branch. This is not recommended for production environments due to potential instability and lack of documentation.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.9/installation.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Chaining `notIn` methods (deprecated) in PHP\nDESCRIPTION: This PHP snippet chains two deprecated `notIn` methods to retrieve users who are not from specific countries (IN, KE, OP) and do not have specific total saved product counts (100, 150, 200).\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->notIn(\"country\", [\"IN\", \"KE\", \"OP\"])\n  ->notIn(\"products.totalSaved\", [100, 150, 200])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: set() Method in PHP\nDESCRIPTION: This snippet represents the `set` method, which is used to set and cache the content for the current query, associating it with a token. It takes an array of content as a parameter.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction set(array $content)\n```\n\n----------------------------------------\n\nTITLE: getToken() Method in PHP\nDESCRIPTION: This code shows the `getToken` method of the `Cache` class, which returns a unique token for the current query. This token is used to save and retrieve the corresponding cache file.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/cache.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction getToken(): string\n```\n\n----------------------------------------\n\nTITLE: Custom select function - use keyword\nDESCRIPTION: This example shows how to use `use` keyword to inject an external variable.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/query-builder.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n// Use external variables\n$nameSeparator = ', ';\n\n$fullNameSelectFunction = function($user) use ($nameSeparator){\n  return $user['forename'] . $nameSeparator . $user['surname'];\n};\n\n$users = $userQueryBuilder\n  ->select([\n    \"age\", \n    \"fullName\" => $fullNameSelectFunction,\n    \"follower\"\n  ])\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Include SleekDB File Manually\nDESCRIPTION: This PHP code includes the SleekDB Store.php file, allowing you to use SleekDB in your project. It assumes that you have downloaded and extracted the SleekDB library into the appropriate directory and that the path to Store.php is correct.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/installation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once \"../SleekDB/Store.php\";\n```\n\n----------------------------------------\n\nTITLE: In (Deprecated)\nDESCRIPTION: Deprecated since version 2.4, use \"in\" condition instead. Add \"in\" condition to filter data. Returns the QueryBuilder object.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_49\n\nLANGUAGE: PHP\nCODE:\n```\nfunction in(string $fieldName, array $values = []): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: Nested Where Conditions Array Structure PHP\nDESCRIPTION: Illustrates the structure of the conditions array required by the `nestedWhere` function, detailing the outermost operation and nested conditions.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/query-builder.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Search Options in SleekDB\nDESCRIPTION: This is an internal PHP function used to retrieve the search options of the store. It doesn't accept any parameters. The function returns the search options as an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nfunction _getSearchOptions(): array\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Path in SleekDB\nDESCRIPTION: This PHP function retrieves the path to the cache folder for the current store.  It returns the cache path as a string.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.11/reference.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nfunction getCachePath(): string\n```\n\n----------------------------------------\n\nTITLE: Deprecated NestedWhere Function Signature\nDESCRIPTION: This PHP code shows the function signature of the deprecated `nestedWhere` method in the SleekDB QueryBuilder class. Use `where` and `orWhere` instead.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.7/query-builder.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nfunction nestedWhere(array $conditions): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: PHP Query Builder Example with nestedWhere (Deprecated)\nDESCRIPTION: This PHP code demonstrates how to use the deprecated `nestedWhere` method to build a complex query to retrieve users based on product totals, name, and age ranges. It shows the structure of the conditions array and the use of AND and OR operations.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = $userQueryBuilder\n  ->where(\n    [\n      [\"products.totalSaved\", \">\", 10],\n      [\"products.totalBought\", \">\", 20]\n    ]\n  )\n  ->nestedWhere(\n    [\n      \"AND\" => [ // <- Outermost operation\n        [\n          [ \"name\", \"like\", \"a%\" ], \"OR\", [ \"name\", \"like\", \"b%\" ]\n        ],\n        \"AND\",\n        [\n          [\n            [ \"age\", \">=\", 16 ], \"AND\", [ \"age\", \"<\", 20 ]\n          ],\n          \"OR\",\n          [\n            [ \"age\", \">=\", 24 ], \"AND\", [ \"age\", \"<\", 28 ]\n          ]\n        ]\n      ]\n    ]\n  )\n  ->getQuery()\n  ->fetch();\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB Dev Version with Composer\nDESCRIPTION: This command installs the development version of SleekDB using Composer. It's intended for experimental purposes and is not recommended for production use due to potential instability and undocumented features. Requires Composer.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/installation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require rakibtg/sleekdb dev-dev\n```\n\n----------------------------------------\n\nTITLE: Install SleekDB with Composer\nDESCRIPTION: This command installs SleekDB as a dependency using Composer.  It requires Composer to be installed and configured in the project.  The command adds SleekDB to the 'vendor' directory and updates the autoloader.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/installation.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require rakibtg/sleekdb\n```\n\n----------------------------------------\n\nTITLE: Set Lifetime\nDESCRIPTION: Set the cache lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/reference.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nfunction setLifetime(int|null $lifetime): Cache\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array (Internal)\nDESCRIPTION: This method is used internally. Returns an array used to generate a unique token for the current query. Returns an array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/reference.md#_snippet_45\n\nLANGUAGE: PHP\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: Get Cache Token Array (Internal)\nDESCRIPTION: This method is used internally. Returns an array used to generate a unique token for the current query.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.10/reference.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction _getCacheTokenArray(): array\n```\n\n----------------------------------------\n\nTITLE: regenerateCache() Function Definition PHP\nDESCRIPTION: The regenerateCache method regenerates the cache of a query regardless of its lifetime.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.5/cache-management.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction regenerateCache(): QueryBuilder\n```\n\n----------------------------------------\n\nTITLE: nestedWhere Conditions Array Structure\nDESCRIPTION: This PHP code shows the structure of the conditions array used with the deprecated `nestedWhere` function. The outermost operation is specified as a key in the array.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.3/query-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[\n  \"OUTERMOST_OPERATION\" => [\n    // conditions\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: SQL WHERE Clause Example\nDESCRIPTION: This is an example of a complex SQL WHERE clause, demonstrating how to combine multiple conditions with AND and OR operators to filter data based on various criteria such as product totals and age ranges.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.6/query-builder.md#_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nWHERE \n  (products.totalSaved > 10 AND products.totalBought > 20) \n  AND // <- Outermost Operation\n  ( \n    (name like 'a%' OR name like 'b%') \n    AND \n    (\n      (age >= 16 AND age < 20) \n      OR \n      (age >= 24 AND age < 28)) \n    )\n```\n\n----------------------------------------\n\nTITLE: Store Object Creation PHP\nDESCRIPTION: This snippet demonstrates how to create a new `Store` object in SleekDB.  It requires the `SleekDB\\Store` namespace and takes the store name and database directory as parameters.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.12/delete-data.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Store;\n$userStore = new Store('users', __DIR__ . \"/database\");\n```\n\n----------------------------------------\n\nTITLE: Deleting documents using SleekDB (Result Return)\nDESCRIPTION: This snippet demonstrates how to delete documents and retrieve the deleted documents as an array. It configures the `delete()` method to return the deleted records using the `Query::DELETE_RETURN_RESULT` constant.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.4/query.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SleekDB\\Query;\n\n$result = $userStore\n  ->createQueryBuilder()\n  ->where([ \"active\", \"=\", false ])\n  ->getQuery()\n  ->delete(Query::DELETE_RETURN_RESULT);\n// output: [ [\"_id\" => 1, \"name\" => \"Max\"], [\"_id\" => 4, \"name\" => \"John\"], ... ]\n```\n\n----------------------------------------\n\nTITLE: notIn() Method Signature in PHP\nDESCRIPTION: Defines the method signature for the deprecated `notIn()` method within the SleekDB QueryBuilder class.  It accepts a field name (string) and an array of values as input.  It returns the QueryBuilder object, enabling method chaining.\nSOURCE: https://github.com/sleekdb/docs/blob/master/2.13/query-builder.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nfunction notIn(string $fieldName, array $values = []): QueryBuilder\n```"
  }
]