[
  {
    "owner": "unovue",
    "repo": "reka-ui",
    "content": "TITLE: Rendering Props Table with Declarative Data in Vue\nDESCRIPTION: Demonstrates how to use the <PropsTable> component in Vue by passing a list of prop definitions via the 'data' prop. Each object defines the available props including their name, description, type, required state, and default value (if any). Dependencies include the custom PropsTable component, and each parameter documents key interface aspects for a given Reka-UI component. The expected input is an array of prop definition objects; the output is a rendered table summarizing component prop usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Property Definitions in JSON format\nDESCRIPTION: Provides a structured list of the properties that the PropsTable component accepts, detailing their names, descriptions, data types, default values, and whether they are required. This metadata facilitates understanding of the component's configurable options.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerArrow.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"name\": \"as\", \"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\", \"type\": \"AsTag | Component\", \"required\": false, \"default\": \"'div'\"}, {\"name\": \"asChild\", \"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\", \"type\": \"boolean\", \"required\": false}, {\"name\": \"height\", \"description\": \"<p>The height of the arrow in pixels.</p>\\n\", \"type\": \"number\", \"required\": false}, {\"name\": \"rounded\", \"description\": \"<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\\n\", \"type\": \"boolean\", \"required\": false}, {\"name\": \"width\", \"description\": \"<p>The width of the arrow in pixels.</p>\\n\", \"type\": \"number\", \"required\": false}]\n```\n\n----------------------------------------\n\nTITLE: Props Table Definition for UI Layer Configuration\nDESCRIPTION: This snippet defines a comprehensive set of properties ('props') for configuring the behavior and appearance of a UI overlay component, including alignment options, collision handling, rendering strategy, positioning, and visibility controls. It enables flexible customization by accepting different data types and default values, facilitating advanced positioning and rendering behaviors in Vue.js components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverContent.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'align',\n    'description': '<p>The preferred alignment against the trigger.\\nMay change when collisions occur.</p>\\n',\n    'type': '\\'start\\' | \\'center\\' | \\'end\\'',\n    'required': false\n  },\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\ 'right\\' | \\ 'bottom\\' | \\ 'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableOutsidePointerEvents',\n    'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\ 'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'side',\n    'description': '<p>The preferred side of the trigger to render against when open.\\nWill be reversed when collisions occur and avoidCollisions\\nis enabled.</p>\\n',\n    'type': '\\'top\\' | \\ 'right\\' | \\ 'bottom\\' | \\ 'left\\'',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\\ regardless.</p>\\n',\n    'type': '\\'partial\\' | \\ 'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\ 'optimized\\'',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Composing Basic Time Field in Vue\nDESCRIPTION: This snippet demonstrates the fundamental structure for integrating the Reka UI Time Field component into a Vue application. It shows how to import the necessary `TimeFieldRoot` and `TimeFieldInput` components from the `reka-ui` library and compose them within a template to create a basic time input field.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/time-field.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  TimeFieldInput,\n  TimeFieldRoot,\n} from 'reka-ui'\n</script>\n\n<template>\n  <TimeFieldRoot>\n    <TimeFieldInput />\n  </TimeFieldRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Building a Virtualized Combobox with Working Filtering in Vue\nDESCRIPTION: This code demonstrates rendering a virtualized combobox with reactive filtering for large lists. The filter logic is handled manually using the useFilter composable and computed properties, then passed to ComboboxVirtualizer for efficient rendering. Designed for large datasets, like 100,000+ items, this approach minimizes rendering overhead and can be customized for performance as needed. Dependencies: Reka-UI, Vue, and optionally supporting utility libraries.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot, ComboboxViewport, ComboboxVirtualizer, useFilter } from 'reka-ui'\nimport { computed, ref } from 'vue'\n\nconst people = Array.from({ length: 100000 }).map((_, id) => ({ id, name: `Person #${id}` }))\nconst selectedPeople = ref(people[0])\nconst searchTerm = ref('')\n\nconst { contains } = useFilter({ sensitivity: 'base' })\nconst filteredPeople = computed(() => people.filter(p => contains(p.name, searchTerm.value)))\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <ComboboxInput v-model=\"searchTerm\" />\n    <ComboboxPortal>\n      <ComboboxContent class=\"max-h-[40vh] overflow-hidden\">\n        <ComboboxViewport>\n          <ComboboxVirtualizer\n            v-slot=\"{ option }\"\n            :options=\"filteredPeople\"\n            :text-content=\"(x) => x.name\"\n            :estimate-size=\"24\"\n          >\n            <ComboboxItem :value=\"option\">\n              {{ option.name }}\n            </ComboboxItem>\n          </ComboboxVirtualizer>\n        </ComboboxViewport>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Documenting Slots for Time Field in Vue (HTML/Javascript)\nDESCRIPTION: Uses the <SlotsTable> Vue component to detail the slots supported by the Time Field component, with their respective names, descriptions, and types. The \":data\" array specifies each slot, explaining what data is available when the slot is used. Relies on Vue and the SlotsTable doc component. Input is a static array of slot descriptors; output is a tabular documentation view.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TimeFieldRoot.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>The current time of the field</p>\\n',\n    'type': 'TimeValue | undefined'\n  },\n  {\n    'name': 'segments',\n    'description': '<p>The time field segment contents</p>\\n',\n    'type': '{ part: SegmentPart; value: string; }[]'\n  },\n  {\n    'name': 'isInvalid',\n    'description': '<p>Value if the input is invalid</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table Documentation - Vue\nDESCRIPTION: This snippet defines a data structure containing information about the props of a Vue component. This data is then used to render a table-like documentation using a component named 'PropsTable'. The provided data includes the prop's name, description (in HTML), data type, requirement status, and default value. This approach allows for automatic documentation generation by iterating through the provided array.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogCancel.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Objects as Values - Vue\nDESCRIPTION: This example demonstrates how to bind complex objects as values to the Combobox component. It showcases the usage of `v-model` to bind the selected object and the `displayValue` prop to specify how the object's value is displayed in the input field.  The script defines a list of people and uses it to populate the combobox items, enabling selection of individual person objects.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <ComboboxInput :display-value=\"(v) => v.name\" />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in people\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Props Table in Vue\nDESCRIPTION: This snippet uses a `PropsTable` component and defines its `data` prop to describe component props. The data consists of an array of objects, each representing a prop with attributes like `name`, `description`, `type`, `required`, and `default`. The `description` field contains HTML formatted text for describing the prop.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuRadioGroup.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The value of the selected item in the group.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable component props data array in Vue.js\nDESCRIPTION: Defines the data array for the PropsTable component, specifying each property with its name, description, type, whether required, and default value. This array drives the rendering of the table rows explaining component properties.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuList.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'ul\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualization with Combobox in Vue\nDESCRIPTION: Shows a complete example of setting up a virtualized combobox using `reka-ui` components. It demonstrates importing components, binding a large `items` array, wrapping the `ComboboxVirtualizer` in a height-constrained `ComboboxViewport`, and configuring `estimate-size` and `text-content` props for efficient rendering and type-ahead.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/virtualization.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { ComboboxContent, ComboboxItem, ComboboxRoot, ComboboxViewport, ComboboxVirtualizer } from 'reka-ui'\n\nconst items = [\n  // … large array of items\n]\n</script>\n\n<template>\n  <ComboboxRoot>\n    …\n    <ComboboxContent>\n      <!-- Make sure to set a height for Virtualizer's parent element -->\n      <ComboboxViewport class=\"max-h-80 overflow-y-auto\">\n        <ComboboxVirtualizer\n          v-slot=\"{ option }\"\n          :options=\"items\"\n          :estimate-size=\"25\"\n          :text-content=\"(opt) => opt.label\"\n        >\n          <ComboboxItem :value=\"option\">\n            {{ option.label }}\n          </ComboboxItem>\n        </ComboboxVirtualizer>\n      </ComboboxViewport>\n    </ComboboxContent>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Composing a Date Picker Interface with Reka UI Components in Vue\nDESCRIPTION: This Vue single-file component example demonstrates how to assemble a feature-rich Date Picker UI by combining imported parts from the 'reka-ui' library. The snippet imports each subcomponent in a <script setup> and then shows the recommended composition in the <template>, including input, trigger, popover content, calendar grid, and navigation. Dependencies: 'reka-ui' and '@internationalized/date' (install both in your project). Major elements like DatePickerRoot, DatePickerField, DatePickerInput, and all calendar controls are included. Expected input/output is user interaction with input and calendar, emitting selected date as a value. Requires proper context setup and reactivity for full functionality.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/date-picker.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  DatePickerAnchor,\n  DatePickerArrow,\n  DatePickerCalendar,\n  DatePickerCell,\n  DatePickerCellTrigger,\n  DatePickerClose,\n  DatePickerContent,\n  DatePickerField,\n  DatePickerGrid,\n  DatePickerGridBody,\n  DatePickerGridHead,\n  DatePickerGridRow,\n  DatePickerHeadCell,\n  DatePickerHeader,\n  DatePickerHeading,\n  DatePickerInput,\n  DatePickerNext,\n  DatePickerPrev,\n  DatePickerRoot,\n  DatePickerTrigger\n} from 'reka-ui'\n</script>\n\n<template>\n  <DatePickerRoot>\n    <DatePickerField>\n      <DatePickerInput />\n      <DatePickerTrigger />\n    </DatePickerField>\n\n    <DatePickerAnchor />\n    <DatePickerContent>\n      <DatePickerClose />\n      <DatePickerArrow />\n\n      <DatePickerCalendar>\n        <DatePickerHeader>\n          <DatePickerPrev />\n          <DatePickerHeading />\n          <DatePickerNext />\n        </DatePickerHeader>\n\n        <DatePickerGrid>\n          <DatePickerGridHead>\n            <DatePickerGridRow>\n              <DatePickerHeadCell />\n            </DatePickerGridRow>\n          </DatePickerGridHead>\n\n          <DatePickerGridBody>\n            <DatePickerGridRow>\n              <DatePickerCell>\n                <DatePickerCellTrigger />\n              </DatePickerCell>\n            </DatePickerGridRow>\n          </DatePickerGridBody>\n        </DatePickerGrid>\n      </DatePickerCalendar>\n    </DatePickerContent>\n  </DatePickerRoot>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data for PropsTable - JavaScript\nDESCRIPTION: This JavaScript array literal provides the data structure consumed by the `<PropsTable>` component to render documentation for a set of component props. Each object in the array represents a single prop, specifying its name, detailed description (including HTML tags and references), data type, and whether it is required.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverPortal.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Collision-aware Animation Styles\nDESCRIPTION: This CSS code provides the animation styles for a collision-aware tooltip. It first defines general animation properties for the `TooltipContent`. Then it defines animation name based on the `data-side` attribute. Finally, it defines keyframes for `slideDown` and `slideUp` animations.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.TooltipContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.TooltipContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.TooltipContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Properties with Getter and Setter for Controlled State in Vue with TypeScript\nDESCRIPTION: Explains how to properly create a computed property with both a getter and setter to serve as a controlled state proxy linked to external store (like Vuex). Shows bad practice of omitting setter causing inability to update computed state. Dependencies include Vue's computed API and a store implementation. Input is store state; output is a computed ref that can be read and updated correctly, enabling two-way binding with controlled components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/controlled-state.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Incorrect:\\nconst isActive = computed(() => store.state.toggleState)\\n\\n// ✅ Correct:\\nconst isActive = computed({\\n  get: () => store.state.toggleState,\\n  set: val => store.commit('setToggleState', val)\\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component in Vue\nDESCRIPTION: A Vue template that renders a PropsTable component with documentation for two props: 'as' and 'asChild'. The props data includes name, description, type, required status, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TabsIndicator.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Labeling Select Components for Accessibility (Reka-UI, Vue)\nDESCRIPTION: Illustrates two methods for providing accessible labeling to select components: wrapping SelectRoot with a <Label>, or using a 'for/id' pairing. Depends on '@iconify/vue' for icons and 'reka-ui' for core components, and uses Vue's ref API. Ensures select dropdowns are visually and programmatically labeled according to accessibility standards.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  Label,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <Label>\n    Country\n    <SelectRoot>…</SelectRoot>\n  </Label>\n\n  <!-- or -->\n\n  <Label for=\"country\">Country</Label>\n  <SelectRoot>\n    <SelectTrigger id=\"country\">\n      …\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>…</SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Virtualization: Missing Parent Height in Vue\nDESCRIPTION: Illustrates a common issue where virtualization fails because the parent element of `ComboboxVirtualizer` (the `ComboboxViewport`) does not have a defined height or maximum height. The code highlights the specific line where the height style is missing.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/virtualization.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n  <ComboboxRoot>\n    …\n    <ComboboxContent>\n      <!-- Height must be defined -->\n      <ComboboxViewport class=\"max-h-80 overflow-y-auto\">\n        <ComboboxVirtualizer>\n          …\n        </ComboboxVirtualizer>\n      </ComboboxViewport>\n    </ComboboxContent>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring Component Props for Vue PropsTable Documentation in Vue\nDESCRIPTION: This Vue template snippet uses a PropsTable component and passes an inline array of objects to its 'data' prop, each describing a Vue component property. Each prop object contains the property's name, detailed HTML description, type information, required status, and default value. It is designed to automatically generate a documentation table for component properties and assumes the presence of a PropsTable component that can interpret this data structure.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSeparator.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Component Data\nDESCRIPTION: This snippet defines the data structure used by the PropsTable component to display property information. It includes the property name, description (rendered as HTML), type, whether it is required, and its default value. The 'as' property allows rendering the component as a different HTML element or component. The 'asChild' property enables composition patterns.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TagsInputItemDelete.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[{\"name\": \"as\",\"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\",\"type\": \"AsTag | Component\",\"required\": false,\"default\": \"'button'\"},{\"name\": \"asChild\",\"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\",\"type\": \"boolean\",\"required\": false}]\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for Reka UI Combobox Component in Vue\nDESCRIPTION: A Vue SlotsTable component showing the available slot properties that can be used in the Combobox component for custom rendering and state access.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxRoot.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>Current active value</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Combobox Items with Custom Content in Vue\nDESCRIPTION: This sample illustrates the use of custom content inside a ComboboxItem in Vue, like including an image, text, and an indicator for selection state. It demonstrates how to further customize Reka-UI comboboxes for user avatars, icons, or other rich content. The ComboboxItemIndicator can be used to visually mark currently selected items. Requires Reka-UI and Vue.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot\n} from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem>\n          <img src=\"…\">\n          Adolfo Hess\n          <ComboboxItemIndicator />\n        </ComboboxItem>\n        …\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Panel Component Events Documentation in Vue\nDESCRIPTION: A table component that documents all events emitted by the Panel component, including collapse, expand, and resize events with their respective payload types.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SplitterPanel.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'collapse',\n    'description': '<p>Event handler called when panel is collapsed.</p>\\n',\n    'type': '[]'\n  },\n  {\n    'name': 'expand',\n    'description': '<p>Event handler called when panel is expanded.</p>\\n',\n    'type': '[]'\n  },\n  {\n    'name': 'resize',\n    'description': '<p>Event handler called when panel is resized; size parameter is a numeric value between 1-100.</p>\\n',\n    'type': '[size: number, prevSize: number]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DropdownMenuCheckboxItem Wrapper in Vue\nDESCRIPTION: Shows the implementation of a custom Vue wrapper component (`DropdownMenuCheckboxItem.vue`) for `reka-ui`'s `DropdownMenuCheckboxItem`. It abstracts the inclusion of the check indicator by embedding `DropdownMenuItemIndicator` with a `CheckIcon` (from `@radix-icons/vue`) and uses `useForwardPropsEmits` to handle props and events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<!-- DropdownMenuCheckboxItem.vue -->\n<script setup lang=\"ts\">\nimport type { DropdownMenuCheckboxItemEmits, DropdownMenuCheckboxItemProps } from 'reka-ui'\nimport { CheckIcon } from '@radix-icons/vue'\nimport { DropdownMenuCheckboxItem, DropdownMenuItemIndicator, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<DropdownMenuCheckboxItemProps>()\nconst emits = defineEmits<DropdownMenuCheckboxItemEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuCheckboxItem v-bind=\"forwarded\">\n    <span>\n      <DropdownMenuItemIndicator>\n        <CheckIcon />\n      </DropdownMenuItemIndicator>\n    </span>\n    <slot />\n  </DropdownMenuCheckboxItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Interaction Mappings for Dialog Accessibility\nDESCRIPTION: Provides a table mapping key presses to dialog behaviors such as opening, closing, and focus management, ensuring comprehensive keyboard accessibility in line with WAI-ARIA guidelines.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_5\n\nLANGUAGE: Vue\nCODE:\n```\n<KeyboardTable\n  :data=\"[\n    {\n      keys: ['Space'],\n      description: 'Opens/closes the dialog',\n    },\n    {\n      keys: ['Enter'],\n      description: 'Opens/closes the dialog',\n    },\n    {\n      keys: ['Tab'],\n      description: 'Moves focus to the next focusable element.',\n    },\n    {\n      keys: ['Shift + Tab'],\n      description: 'Moves focus to the previous focusable element.',\n    },\n    {\n      keys: ['Esc'],\n      description: '<span>Closes the dialog and moves focus to <Code>DialogTrigger</Code>.</span>',\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Vue Props Table Component Usage for UI Component Documentation\nDESCRIPTION: A Vue component that displays a table of available props for a UI component, including their names, descriptions, types, and whether they're required. The data is passed as a prop containing an array of property definitions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipContent.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'align',\n    'description': '<p>The preferred alignment against the trigger.\\nMay change when collisions occur.</p>\\n',\n    'type': '\\'start\\' | \\'center\\' | \\'end\\'',\n    'required': false\n  },\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'ariaLabel',\n    'description': '<p>By default, screenreaders will announce the content inside\\nthe component. If this is not descriptive enough, or you have\\ncontent that cannot be announced, use aria-label as a more\\ndescriptive label.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'side',\n    'description': '<p>The preferred side of the trigger to render against when open.\\nWill be reversed when collisions occur and avoidCollisions\\nis enabled.</p>\\n',\n    'type': '\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\'',\n    'required': false,\n    'default': '\\'top\\''\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst \"always\" will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Anatomy of the Reka UI Checkbox Component in Vue\nDESCRIPTION: Demonstrates how to import and structure the `CheckboxRoot`, `CheckboxIndicator`, and `CheckboxGroupRoot` components from 'reka-ui' to create single checkboxes or groups of checkboxes within a Vue template. The `<script setup>` block shows the necessary imports, and the `<template>` shows the basic component composition.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/checkbox.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { CheckboxGroupRoot, CheckboxIndicator, CheckboxRoot } from 'reka-ui'\n</script>\n\n<template>\n  <CheckboxRoot>\n    <CheckboxIndicator />\n  </CheckboxRoot>\n\n  <!-- or with array support -->\n  <CheckboxGroupRoot>\n    <CheckboxRoot>\n      <CheckboxIndicator />\n    </CheckboxRoot>\n  </CheckboxGroupRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of @update:modelValue Event for Controlled SwitchRoot Component in Vue\nDESCRIPTION: Highlights the common mistake of omitting the @update:modelValue event listener in controlled components and provides the correct pattern. Shows the importance of event binding for two-way data flow, where failing to provide an update handler prevents state synchronization. Requires Vue reactive data for the modelValue prop and the update event callback. Inputs are the prop and event; output is state properly synchronized with parent.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/controlled-state.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- ❌ Incorrect: -->\\n<SwitchRoot :modelValue=\"isActive\" />\\n\\n<!-- ✅ Correct: -->\\n<SwitchRoot :modelValue=\"isActive\" @update:modelValue=\"(val) => isActive = val\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Dialog Open State with Vue.js\nDESCRIPTION: Illustrates how to control the dialog's open state programmatically to close it after an asynchronous form submission. Utilizes Vue's ref to manage visibility and demonstrates handling form submission to close the dialog upon completion of an async process.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'\n\nconst wait = () => new Promise(resolve => setTimeout(resolve, 1000))\nconst open = ref(false)\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>Open</DialogTrigger>\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <form\n          @submit.prevent=\"(event) => {\n            wait().then(() => (open = false));\n          }\"\n        >\n          <!-- some inputs -->\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TagsInput Component Events Documentation in Vue\nDESCRIPTION: Documentation for events emitted by the TagsInput component using EmitsTable, covering events like addTag, removeTag, invalid, and v-model update events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TagsInputRoot.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'addTag',\n    'description': '<p>Event handler called when tag is added</p>\\n',\n    'type': '[payload: AcceptableInputValue]'\n  },\n  {\n    'name': 'invalid',\n    'description': '<p>Event handler called when the value is invalid</p>\\n',\n    'type': '[payload: AcceptableInputValue]'\n  },\n  {\n    'name': 'removeTag',\n    'description': '<p>Event handler called when tag is removed</p>\\n',\n    'type': '[payload: AcceptableInputValue]'\n  },\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes</p>\\n',\n    'type': '[payload: AcceptableInputValue[]]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Property Definitions in Vue\nDESCRIPTION: A Vue component for displaying a table of component properties. This example shows documentation for 'as' and 'asChild' props, including their descriptions, types, requirements, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxContent.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: TagsInput Component Slots Documentation in Vue\nDESCRIPTION: Documentation of available slots for the TagsInput component using SlotsTable, showing the modelValue slot that provides access to current input values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TagsInputRoot.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current input values</p>\\n',\n    'type': 'string | Record<string, any>'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Scrollable Dialog Overlay with Custom Styles\nDESCRIPTION: Provides a pattern to render a dialog with content overflowing and scrollable overlay. Includes CSS styles for overlay background, centering, and overflow handling, along with an example of preventing accidental closure when clicking on the scrollbar through a pointer-down event handler.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'\nimport './styles.css'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay class=\"DialogOverlay\">\n        <DialogContent class=\"DialogContent\">\n          ...\n        </DialogContent>\n      </DialogOverlay>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n\n/* styles.css */\n.DialogOverlay {\n  background: rgba(0 0 0 / 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: grid;\n  place-items: center;\n  overflow-y: auto;\n}\n\n.DialogContent {\n  min-width: 300px;\n  background: white;\n  padding: 30px;\n  border-radius: 4px;\n}\n\n<!-- Handling scrollbar click to prevent accidental close -->\n<DialogContent\n  @pointer-down-outside=\"(event) => {\n    const originalEvent = event.detail.originalEvent;\n    const target = originalEvent.target as HTMLElement;\n    if (originalEvent.offsetX > target.clientWidth || originalEvent.offsetY > target.clientHeight) {\n      event.preventDefault();\n    }\n  }\"\n>\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Anatomy with Vue.js\nDESCRIPTION: Demonstrates how to assemble the Dialog component using reka-ui primitives in Vue.js. It imports all modal parts, arranges them within a `DialogRoot`, and establishes a functional dialog with trigger, overlay, content, title, description, and close button. This structure serves as the foundational setup for creating accessible and modular dialogs.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <DialogTitle />\n        <DialogDescription />\n        <DialogClose />\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Primitives with asChild in Reka UI (Vue)\nDESCRIPTION: Illustrates how to compose multiple Reka UI primitives (`TooltipTrigger` and `DialogTrigger`) together with a custom Vue component (`MyButton`) using nested `asChild` props. This allows the custom button to trigger both the tooltip and the dialog. Requires importing relevant Reka UI components and the custom `MyButton` component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/composition.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TooltipRoot, TooltipTrigger, TooltipPortal, DialogRoot, DialogTrigger, DialogPortal } from \"reka-ui\";\nimport MyButton from from \"@/components/MyButton.vue\"\n</script>\n\n<template>\n  <DialogRoot>\n    <TooltipRoot>\n      <TooltipTrigger asChild>\n        <DialogTrigger asChild>\n          <MyButton>Open dialog</MyButton>\n        </DialogTrigger>\n      </TooltipTrigger>\n      <TooltipPortal>…</TooltipPortal>\n    </TooltipRoot>\n\n    <DialogPortal>...</DialogPortal>\n  </DialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Assembling HoverCard Components from Reka-UI in Vue\nDESCRIPTION: This snippet demonstrates the importation of core HoverCard components (HoverCardRoot, HoverCardTrigger, HoverCardPortal, HoverCardContent, HoverCardArrow) from 'reka-ui' and how to compose them inside a Vue template to build the complete hover card structure. It shows the nested hierarchy required to enable the trigger, portal rendering, content display, and optional arrow rendering within the card. Dependencies include the 'reka-ui' package with these components exported.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/hover-card.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'\\n</script>\\n\\n<template>\\n  <HoverCardRoot>\\n    <HoverCardTrigger />\\n    <HoverCardPortal>\\n      <HoverCardContent>\\n        <HoverCardArrow />\\n      </HoverCardContent>\\n    </HoverCardPortal>\\n  </HoverCardRoot>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Grouping Combobox Items Using Group and Label in Vue with Reka-UI\nDESCRIPTION: This snippet demonstrates how to create grouped sections within a combobox by utilizing the ComboboxGroup and ComboboxLabel components, facilitating clearer UI structure in large option sets. It leverages Reka-UI components in a Vue 3 setup. No special input is required; simply wrap related ComboboxItem components in ComboboxGroup and use ComboboxLabel for group headers.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot\n} from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxGroup>\n          <ComboboxLabel>Label</ComboboxLabel>\n          <ComboboxItem>…</ComboboxItem>\n          <ComboboxItem>…</ComboboxItem>\n          <ComboboxItem>…</ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data - JavaScript Array\nDESCRIPTION: This JavaScript array defines the properties (props) accepted by a component. Each object in the array represents a single prop, specifying its name, description (which includes HTML tags for formatting), type, required status, and default value. This data is designed to be consumed by a documentation component like `<PropsTable>` to render a structured table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerClose.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Horizontal Orientation Example\nDESCRIPTION: Shows how to set the Accordion to a horizontal layout by setting the 'orientation' prop to 'horizontal'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/accordion.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AccordionRoot orientation=\"horizontal\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled ToggleGroup in Vue\nDESCRIPTION: This example illustrates how to control the ToggleGroup component to ensure a value is always selected. It demonstrates the use of the `:model-value` prop to bind the selected value and `@update:model-value` event to handle changes. It requires the `reka-ui` library and the `ref` function from Vue.  The expected input is a string value for each `ToggleGroupItem`, and the output is the ability to select a ToggleGroupItem from the pre-defined values (left, center and right) which updates the `value` ref.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toggle-group.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ToggleGroupItem, ToggleGroupRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst value = ref('left')\n</script>\n\n<template>\n  <ToggleGroupRoot\n    :model-value=\"value\"\n    @update:model-value=\"(val) => {\n      if (val) value = val\n    }\"\n  >\n    <ToggleGroupItem value=\"left\">\n      <TextAlignLeftIcon />\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"center\">\n      <TextAlignCenterIcon />\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"right\">\n      <TextAlignRightIcon />\n    </ToggleGroupItem>\n  </ToggleGroupRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Controlling Pagination Page Programmatically in Vue\nDESCRIPTION: This Vue.js example demonstrates how to programmatically control the current page of the pagination component, using a reactive variable. It imports `PaginationRoot` from 'reka-ui' and `ref` from 'vue'. It also imports and uses a custom select component. The `currentPage` is a reactive variable initialized to 1 and passed to the PaginationRoot component via `v-model:page` and the custom select component using `v-model` to facilitate synchronization of the selected page.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pagination.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { PaginationRoot } from 'reka-ui'\nimport { ref } from 'vue'\nimport { Select } from './custom-select'\n\nconst currentPage = ref(1)\n</script>\n\n<template>\n  <Select v-model=\"currentPage\" />\n  <PaginationRoot v-model:page=\"currentPage\">\n    ...\n  </PaginationRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Reka UI Components Using Tailwind CSS in Vue (TypeScript)\nDESCRIPTION: Provides examples of applying Tailwind CSS utility classes directly on Reka UI components for styling parts and states. Demonstrates adding standard Tailwind classes for borders and rounding, as well as conditional styling based on the `data-state` attribute using Tailwind's variant selectors (e.g., `data-[state=open]:...`). Requires Vue 3 with TypeScript, Reka UI, and Tailwind CSS configured in the project. Inputs are the class strings for visual styling; outputs are components rendered with Tailwind-driven appearance changes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/styling.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"reka-ui\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem class=\"border border-gray-400 rounded-2xl\" value=\"item-1\" />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"reka-ui\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem\n      class=\"\n        border border-gray-400 rounded-2xl\n        data-[state=open]:border-b-2 data-[state=open]:border-gray-800\n      \"\n      value=\"item-1\"\n    />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Submenus (Vue)\nDESCRIPTION: This Vue.js snippet demonstrates how to create a dropdown menu with nested submenus using Reka UI components. It utilizes components like `DropdownMenuSub`, `DropdownMenuSubTrigger`, and `DropdownMenuSubContent` to achieve the submenu functionality. The snippet showcases the structure and organization of a dropdown menu with multiple levels.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuArrow,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Sub menu →</DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n              <DropdownMenuItem>Sub menu item</DropdownMenuItem>\n              <DropdownMenuItem>Sub menu item</DropdownMenuItem>\n              <DropdownMenuArrow />\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Structuring a Basic Context Menu in Vue\nDESCRIPTION: Imports and demonstrates the basic structure for assembling a Reka UI Context Menu. It shows the required imports for various menu parts like Root, Trigger, Portal, Content, Item, Group, Label, CheckboxItem, RadioGroup, RadioItem, Submenu components, and how they nest within the template.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger />\n\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuLabel />\n        <ContextMenuItem />\n\n        <ContextMenuGroup>\n          <ContextMenuItem />\n        </ContextMenuGroup>\n\n        <ContextMenuCheckboxItem>\n          <ContextMenuItemIndicator />\n        </ContextMenuCheckboxItem>\n\n        <ContextMenuRadioGroup>\n          <ContextMenuRadioItem>\n            <ContextMenuItemIndicator />\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n\n        <ContextMenuSub>\n          <ContextMenuSubTrigger />\n          <ContextMenuPortal>\n            <ContextMenuSubContent />\n          </ContextMenuPortal>\n        </ContextMenuSub>\n\n        <ContextMenuSeparator />\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Focus Looping and Trapping with FocusScope in Vue\nDESCRIPTION: This example demonstrates focus trapping and looping.  The `trapped` prop is set to `true`, ensuring focus remains within the FocusScope. The `loop` prop set to `true` enables focus to loop back to the beginning when the end is reached, and vice versa.  It uses a `v-for` directive to render multiple buttons from an array of `items`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/focus-scope.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <FocusScope :trapped=\"true\" :loop=\"true\">\n    <div>\n      <button v-for=\"item in items\" :key=\"item.id\">\n        {{ item.label }}\n      </button>\n    </div>\n  </FocusScope>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tree Nodes Component - Reka UI Tree - Vue\nDESCRIPTION: This snippet shows the implementation of a recursive Vue component named `Tree.vue` that renders a nested DOM structure for tree items. It uses the `TreeItem` component within a `<li>` element and recursively renders itself for children lists (`<ul>`) when the item is expanded.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TreeItem } from 'reka-ui'\n\ninterface TreeNode {\n  title: string\n  icon: string\n  children?: TreeNode[]\n}\n\nwithDefaults(defineProps<{\n  treeItems: TreeNode[]\n  level?: number\n}>(), { level: 0 })\n</script>\n\n<template>\n  <li\n    v-for=\" tree in treeItems\"\n    :key=\"tree.title\"\n  >\n    <TreeItem\n      v-slot=\"{ isExpanded }\"\n      as-child\n      :level=\"level\"\n      :value=\"tree\"\n    >\n      <button>…</button>\n\n      <ul v-if=\"isExpanded && tree.children\">\n        <Tree\n          :tree-items=\"tree.children\"\n          :level=\"level + 1\"\n        />\n      </ul>\n    </TreeItem>\n  </li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Emits table detailing event handlers for model and open state updates\nDESCRIPTION: This snippet presents the data for events emitted by the Select component, including 'update:modelValue' which is triggered when the selected value changes, and 'update:open' which is emitted when the open state of the dropdown menu changes. Both event handlers pass relevant data structures indicating the new state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectRoot.md#_snippet_1\n\nLANGUAGE: Vue.js\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[value: AcceptableValue]'\n  },\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the context menu changes.</p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Building Command Menu API Usage with Custom Combobox Components in Vue\nDESCRIPTION: This Vue snippet shows how to use custom Command and CommandItem components (built atop Reka-UI combobox primitives) to build a command menu interface. Usage is concise and interchangeable with combobox patterns. The CommandItem expects a value prop and slot content. Requires prior implementation of Command and CommandItem components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Command, CommandItem } from './your-command'\n</script>\n\n<template>\n  <Command>\n    <CommandItem value=\"1\">\n      Item 1\n    </CommandItem>\n    <CommandItem value=\"2\">\n      Item 2\n    </CommandItem>\n    <CommandItem value=\"3\">\n      Item 3\n    </CommandItem>\n  </Command>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Ellipsis in Vue\nDESCRIPTION: This Vue.js code demonstrates how to use the 'PaginationEllipsis' component to indicate more previous or after items in a pagination control.  It imports  `PaginationEllipsis`, `PaginationList`, `PaginationListItem`, and `PaginationRoot` from the 'reka-ui' library. It iterates through the `items` using a `v-for` loop and renders the `PaginationEllipsis` component with a specific key and index, inserting the ellipsis character (&#8230;), providing a visual cue to indicate additional pages when the page list is long.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pagination.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { PaginationEllipsis, PaginationList, PaginationListItem, PaginationRoot } from 'reka-ui'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList v-slot=\"{ items }\">\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem\n          v-if=\"page.type === 'page'\"\n          :key=\"index\"\n        />\n        <PaginationEllipsis\n          v-else\n          :key=\"page.type\"\n          :index=\"index\"\n        >\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n    </PaginationList>\n  </PaginationRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Composing the Select Component in Vue.js with TypeScript\nDESCRIPTION: Imports all subcomponents of Reka-UI's Select and demonstrates their composition in a Vue single-file component template. This snippet shows usage of components like SelectRoot, SelectTrigger, SelectContent, SelectItem, among others, arranged to form a fully structured accessible Select dropdown. Dependencies include Reka-UI library with TypeScript support. Inputs include the selected values managed internally or externally, and output is the rendered accessible dropdown list triggered by user interaction.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>\n      <SelectValue />\n      <SelectIcon />\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent>\n        <SelectScrollUpButton />\n        <SelectViewport>\n          <SelectItem>\n            <SelectItemText />\n            <SelectItemIndicator />\n          </SelectItem>\n          <SelectGroup>\n            <SelectLabel />\n            <SelectItem>\n              <SelectItemText />\n              <SelectItemIndicator />\n            </SelectItem>\n          </SelectGroup>\n          <SelectSeparator />\n        </SelectViewport>\n        <SelectScrollDownButton />\n        <SelectArrow />\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Tooltip API - Implementation\nDESCRIPTION: This code implements the custom `Tooltip` component. It uses the `useForwardPropsEmits` utility to forward props and emits to the underlying `TooltipRoot` component. The custom component accepts a `content` prop and renders the content within the `TooltipContent` along with the `TooltipArrow`. It uses `as-child` prop on the `TooltipTrigger` component to replace its trigger slot content with the provided content via the `<slot />` directive.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<!-- your-tooltip.vue  -->\n<script setup lang=\"ts\">\nimport type { TooltipRootEmits, TooltipRootProps } from 'reka-ui'\nimport { TooltipArrow, TooltipContent, TooltipRoot, TooltipTrigger, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<TooltipRootProps & { content?: string }>()\nconst emits = defineEmits<TooltipRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <TooltipRoot v-bind=\"forward\">\n    <TooltipTrigger as-child>\n      <slot />\n    </TooltipTrigger>\n    <TooltipContent\n      side=\"top\"\n      align=\"center\"\n    >\n      {{ content }}\n      <TooltipArrow\n        :width=\"11\"\n        :height=\"5\"\n      />\n    </TooltipContent>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic Structure of a Navigation Menu in Vue\nDESCRIPTION: Imports necessary components from 'reka-ui' (TypeScript setup script) and demonstrates the basic hierarchical structure using NavigationMenuRoot, NavigationMenuList, NavigationMenuItem, NavigationMenuTrigger, NavigationMenuContent, NavigationMenuLink, NavigationMenuSub, and NavigationMenuViewport within a Vue template. This showcases how to piece together the components for a functional navigation menu, including nested submenus.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger />\n        <NavigationMenuContent>\n          <NavigationMenuLink />\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuLink />\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuTrigger />\n        <NavigationMenuContent>\n          <NavigationMenuSub>\n            <NavigationMenuList />\n            <NavigationMenuViewport />\n          </NavigationMenuSub>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator />\n    </NavigationMenuList>\n\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: React PropsTable Component Props Definition\nDESCRIPTION: This code snippet defines the props for the PropsTable React component, specifying data types, default values, and descriptions for each prop. It supports rendering a table of properties with customizable tags, handling composition with 'asChild', managing disabled state, and binding a value. Dependencies include a Vue or React environment that supports component props, and it is intended for use within UI documentation or configuration interfaces.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TagsInputItem.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the tags input.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>Value associated with the tags</p>\\n',\n    'type': 'string | Record<\\'string\\', any>',\n    'required': true\n  }\n]' />\n```\n\n----------------------------------------\n\nTITLE: Adding Separators Between Combobox Items in Vue with Reka-UI\nDESCRIPTION: This Vue and TypeScript snippet demonstrates the use of the ComboboxSeparator component to visually divide groups of items within a Reka-UI Combobox. This is helpful for organizing long or logically grouped option lists. Dependencies include Reka-UI and Vue. The ComboboxSeparator is inserted among ComboboxItem components in ComboboxContent, with no special configuration required.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ComboboxContent,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxPortal,\n  ComboboxRoot,\n  ComboboxSeparator\n} from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxSeparator />\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessible Dialog Close Button with Label\nDESCRIPTION: Demonstrates how to implement a close button with an aria-label for screen readers, including an icon (×). Ensures accessibility compliance by correctly labeling icon-only buttons within the dialog.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_4\n\nLANGUAGE: Vue\nCODE:\n```\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <DialogTitle />\n        <DialogDescription />\n        <DialogClose aria-label=\"Close\">\n          <span aria-hidden=\"true\">×</span>\n        </DialogClose>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component EmitsTable in Vue\nDESCRIPTION: Displays a table of events emitted by the Radio Group component, including the event name, description, and type information.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupRoot.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the radio group value changes</p>\\n',\n    'type': '[payload: string]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component Props (JavaScript)\nDESCRIPTION: Documents the available props for the Accordion component. Lists properties like `as`, `asChild`, `collapsible`, `defaultValue`, `dir`, `disabled`, `modelValue`, `orientation`, `type`, and `unmountOnHide`, detailing their type, requirement status, and default values. This data is used by the `PropsTable` component to render a documentation table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionRoot.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collapsible',\n    'description': '<p>When type is &quot;single&quot;, allows closing content when clicking trigger for an open item.\\nWhen type is &quot;multiple&quot;, this prop has no effect.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The default active value of the item(s).</p>\\n<p>Use when you do not need to control the state of the item(s).</p>\\n',\n    'type': 'string | string[]',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the accordion and all its items</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the active item(s).</p>\\n<p>Use this when you need to control the state of the items. Can be binded with <code>v-model</code></p>\\n',\n    'type': 'string | string[]',\n    'required': false\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>The orientation of the accordion.</p>\\n',\n    'type': '\\'vertical\\' | \\'horizontal\\'',\n    'required': false,\n    'default': '\\'vertical\\''\n  },\n  {\n    'name': 'type',\n    'description': '<p>Determines whether a &quot;single&quot; or &quot;multiple&quot; items can be selected at a time.</p>\\n<p>This prop will overwrite the inferred type from <code>modelValue</code> and <code>defaultValue</code>.</p>\\n',\n    'type': '\\'single\\' | \\'multiple\\'',\n    'required': false\n  },\n  {\n    'name': 'unmountOnHide',\n    'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Composing Listbox Components - Vue\nDESCRIPTION: Illustrates the basic structure of the `reka-ui` Listbox component by importing and composing its core parts: `ListboxRoot`, `ListboxFilter`, `ListboxContent`, `ListboxItem`, `ListboxItemIndicator`, `ListboxGroup`, `ListboxGroupLabel`, and `ListboxVirtualizer`. Shows how to structure the component using a `<template>` block. Requires importing components from `reka-ui`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/listbox.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ListboxContent, ListboxFilter, ListboxGroup, ListboxGroupLabel, ListboxItem, ListboxItemIndicator, ListboxRoot, ListboxVirtualizer } from 'reka-ui'\n</script>\n\n<template>\n  <ListboxRoot>\n    <ListboxFilter />\n\n    <ListboxContent>\n      <ListboxItem>\n        <ListboxItemIndicator />\n      </ListboxItem>\n\n      <!-- or with group -->\n      <ListboxGroup>\n        <ListboxGroupLabel />\n        <ListboxItem>\n          <ListboxItemIndicator />\n        </ListboxItem>\n      </ListboxGroup>\n\n      <!-- or with virtual -->\n      <ListboxVirtualizer>\n        <ListboxItem>\n          <ListboxItemIndicator />\n        </ListboxItem>\n      </ListboxVirtualizer>\n    </ListboxContent>\n  </ListboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Stepper in Vue\nDESCRIPTION: Demonstrates how to create a vertical orientation of the Stepper component using the orientation prop. It shows a basic implementation with multiple step items each containing indicators, titles, and descriptions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/stepper.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { StepperDescription, StepperIndicator, StepperItem, StepperRoot, StepperTitle } from 'reka-ui'\n</script>\n\n<template>\n  <StepperRoot\n    :default-value=\"1\"\n    orientation=\"vertical\"\n  >\n    <StepperItem>\n      <StepperIndicator />\n      <StepperTitle />\n      <StepperDescription />\n    </StepperItem>\n    <StepperItem>\n      <StepperIndicator />\n      <StepperTitle />\n      <StepperDescription />\n    </StepperItem>\n  </StepperRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Anatomy - Reka UI Tree - Vue\nDESCRIPTION: This snippet demonstrates the basic structure of the Reka UI Tree component, showing how to import and use the `TreeRoot`, `TreeItem`, and optional `TreeVirtualizer` components. It provides the minimal setup for rendering a tree structure.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TreeItem, TreeRoot, TreeVirtualizer } from 'reka-ui'\n</script>\n\n<template>\n  <TreeRoot>\n    <TreeItem />\n\n    <!-- or with virtual -->\n    <TreeVirtualizer>\n      <TreeItem />\n    </TreeVirtualizer>\n  </TreeRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Collapse/Expand SplitterPanel programmatically in Vue with Typescript\nDESCRIPTION: This example showcases collapsing and expanding a SplitterPanel programmatically using methods exposed by the component. It uses a ref to access the panel instance and toggles its collapsed state based on user interaction with a button.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst panelRef = ref<InstanceType<typeof SplitterPanel>>()\n</script>\n\n<template>\n  <button\n    @click=\"panelRef?.isCollapsed ? panelRef?.expand() : panelRef?.collapse() \"\n  >\n    {{ panelRef?.isCollapsed ? 'Expand' : 'Collapse' }}\n  </button>\n\n  <SplitterGroup>\n    <SplitterPanel\n      ref=\"panelRef\"\n      collapsible\n      :collapsed-size=\"10\"\n      :min-size=\"35\"\n    >\n      …\n    </SplitterPanel>\n    <SplitterResizeHandle />\n    <SplitterPanel>\n      …\n    </SplitterPanel>\n  </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Binding Objects as Values in Listbox - Vue\nDESCRIPTION: Demonstrates how to use non-string JavaScript objects as values for Listbox items. It defines an array of objects (`people`), uses `ref` to manage a selected object, and binds it to `ListboxRoot` using `v-model`. Items are rendered using `v-for`, binding the `person` object to the `:value` prop. Requires importing components from `reka-ui` and `ref` from `vue`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/listbox.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ListboxContent, ListboxFilter, ListboxItem, ListboxRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\n</script>\n\n<template>\n  <ListboxRoot v-model=\"selectedPeople\">\n    <ListboxContent>\n      <ListboxItem\n        v-for=\"person in people\"\n        :key=\"person.id\"\n        :value=\"person\"\n        :disabled=\"person.unavailable\"\n      >\n        {{ person.name }}\n      </ListboxItem>\n    </ListboxContent>\n  </ListboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue implementation of Popover component structure\nDESCRIPTION: Demonstrates the modular import and composition of Popover parts such as trigger, anchor, portal, content, arrow, and close button, illustrating how to assemble the Popover component in Vue using reka-ui components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger />\n    <PopoverAnchor />\n    <PopoverPortal>\n      <PopoverContent>\n        <PopoverClose />\n        <PopoverArrow />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue example of Popover with custom anchor element\nDESCRIPTION: Demonstrates how to use the 'PopoverAnchor' with an 'as-child' prop to anchor the Popover to an arbitrary DOM element, here a div styled as a row, instead of the default trigger.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_4\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { PopoverAnchor, PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverAnchor as-child>\n      <div class=\"Row\">\n        Row as anchor <PopoverTrigger>Trigger</PopoverTrigger>\n      </div>\n    </PopoverAnchor>\n\n    <PopoverPortal>\n      <PopoverContent>…</PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Table for Reka-UI Date Field (Vue/JSON)\nDESCRIPTION: This Vue code snippet uses the PropsTable component to describe all available properties for the Date Field component in Reka-UI. Each property is defined in a JSON array specifying its name, description, type, requirement status, and default value where applicable. Dependencies include the PropsTable component and proper JSON formatting; expected input is an array of property descriptor objects, and output is a rendered documentation table. This snippet should be used within Vue documentation pages and is not directly executable at runtime.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateFieldRoot.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultPlaceholder',\n    'description': '<p>The default placeholder date</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The default value for the calendar</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the date field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Whether or not the date field is disabled</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'granularity',\n    'description': '<p>The granularity to use for formatting times. Defaults to day if a CalendarDate is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\\n',\n    'type': '\\'day\\' | \\'hour\\' | \\'minute\\' | \\'second\\'',\n    'required': false\n  },\n  {\n    'name': 'hideTimeZone',\n    'description': '<p>Whether or not to hide the time zone segment of the field</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hourCycle',\n    'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\\n',\n    'type': '12 | 24',\n    'required': false\n  },\n  {\n    'name': 'id',\n    'description': '<p>Id of the element</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'isDateUnavailable',\n    'description': '<p>A function that returns whether or not a date is unavailable</p>\\n',\n    'type': 'Matcher',\n    'required': false\n  },\n  {\n    'name': 'locale',\n    'description': '<p>The locale to use for formatting dates</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'maxValue',\n    'description': '<p>The maximum date that can be selected</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'minValue',\n    'description': '<p>The minimum date that can be selected</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\\n',\n    'type': 'DateValue | null',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'placeholder',\n    'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'readonly',\n    'description': '<p>Whether or not the date field is readonly</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Emitting update:modelValue event in Vue.js (JavaScript/JSON)\nDESCRIPTION: Defines the 'update:modelValue' event emitted by the menu component to notify parent components when the menu's open state changes. The event passes a boolean indicating the new value. This emit enables two-way binding and reactive updates when using v-model to control the menu component externally.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRoot.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.<\\/p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Props Table in Reka UI (Vue)\nDESCRIPTION: This snippet displays a table containing information about the props of a Reka UI component. It uses the `PropsTable` component and passes a data array containing prop details such as name, description, type, requirement status and default value. The data includes the `as`, `asChild`, `defaultOpen`, `disabled`, `open` and `unmountOnHide` props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CollapsibleRoot.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the collapsible when it is initially rendered. &lt;br&gt; Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the collapsible.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the collapsible. Can be binded with <code>v-model</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'unmountOnHide',\n    'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props Metadata for PropsTable Component in Vue\nDESCRIPTION: This snippet provides the prop metadata to the PropsTable Vue component, describing two props: 'as' which controls the rendered element or component with a default of 'button', and 'asChild' which allows the replacement of the default element with a child component for composition. It includes detailed HTML descriptions, type definitions, default values, and requirement status. Intended to be used for generating documentation or prop tables dynamically.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CollapsibleTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[  {    'name': 'as',    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',    'type': 'AsTag | Component',    'required': false,    'default': '\\'button\\''  },  {    'name': 'asChild',    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',    'type': 'boolean',    'required': false  }]\" />\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled SwitchRoot Component with Internal State in Reka UI (Vue)\nDESCRIPTION: Shows an uncontrolled SwitchRoot component that manages state internally using the defaultValue prop for initial state. No external reactive props or event listeners are required. Dependencies are Reka UI components. Input is the default-value string, indicating the initial on/off state. State changes happen inside the component without notifying upstream. Suitable for isolated, local state scenarios where external synchronization is unnecessary.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/controlled-state.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\\n  <SwitchRoot default-value=\"true\">\\n    <SwitchThumb />\\n  </SwitchRoot>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Avatar with Tooltip Example (Vue)\nDESCRIPTION: This Vue snippet demonstrates how to integrate the Avatar component with a Tooltip component from the same library. It imports `AvatarImage`, `AvatarRoot`, `TooltipArrow`, `TooltipRoot`, and `TooltipTrigger`.  The Avatar component is used within a tooltip's trigger, and the tooltip content is defined inside the `TooltipRoot`. The `TooltipArrow` component is used to indicate the tooltip's direction. \nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/avatar.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { AvatarImage, AvatarRoot, TooltipArrow, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>\n      <AvatarRoot>…</AvatarRoot>\n    </TooltipTrigger>\n\n    <TooltipContent side=\"top\">\n      Tooltip content\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining slots for current input value in Vue.js (JavaScript/JSON)\nDESCRIPTION: Documents the 'modelValue' slot provided by the menu component, which exposes the current input value of the menu. This slot allows consuming components to customize rendering or insert additional UI elements based on the current open menu value string provided by the component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRoot.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current input values<\\/p>\\n',\n    'type': 'string'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing useFilter with options - TypeScript\nDESCRIPTION: Initializes the useFilter utility with specific Intl.CollatorOptions. This allows customization of the filtering behavior, such as case-insensitivity.  It uses the 'base' sensitivity for case-insensitive comparison. The startsWith function is then used to check if 'Résumé' starts with 'resume'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-filter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { startsWith } = useFilter({ sensitivity: 'base' })\nconsole.log(startsWith('Résumé', 'resume')) // true (case-insensitive)\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Command Component Based on Combobox in Vue\nDESCRIPTION: This Vue file implements a Command component wrapping ComboboxRoot and related primitives from Reka-UI for the purpose of building a command palette modal. It supports forwarding props and emits, receives slot content, and offers keyboard event handling to capture focus, escape, and pointer events. Prerequisites: Reka-UI, Radix Vue icons, and optionally custom slot content. Key parameters include forwarded props, open state, and inner ComboboxInput placeholder configuration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { ComboboxRootEmits, ComboboxRootProps } from 'reka-ui'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'\nimport { ComboboxContent, ComboboxInput, ComboboxPortal, ComboboxRoot, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<ComboboxRootProps>()\nconst emits = defineEmits<ComboboxRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <ComboboxRoot\n    v-bind=\"forward\"\n    :open=\"true\"\n    model-value=\"\"\n  >\n    <ComboboxInput placeholder=\"Type a command or search…\" />\n\n    <ComboboxPortal>\n      <ComboboxContent\n        @escape-key-down.prevent\n        @focus-outside.prevent\n        @interact-outside.prevent\n        @pointer-down-outside.prevent\n      >\n        <ComboboxViewport>\n          <slot />\n        </ComboboxViewport>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring PropsTable Data for a Reka UI Component\nDESCRIPTION: This snippet demonstrates binding a JavaScript array of objects to the `:data` prop of a `PropsTable` component (likely in Vue/Reka UI). Each object in the array defines a component property, specifying its `name`, HTML `description`, `type`, `required` status, and optional `default` value. These props configure aspects like initial focus state, shift-key navigation, rendering element/composition, focusability, and tab stop linking.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RovingFocusItem.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'active',\n    'description': '<p>When <code>true</code>, item will be initially focused.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'allowShiftKey',\n    'description': '<p>When <code>true</code>, shift + arrow key will allow focusing on next/previous item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'focusable',\n    'description': '<p>When <code>false</code>, item will not be focusable.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'tabStopId',\n    'description': '',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'active',\n    'description': '<p>When <code>true</code>, item will be initially focused.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'allowShiftKey',\n    'description': '<p>When <code>true</code>, shift + arrow key will allow focusing on next/previous item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'focusable',\n    'description': '<p>When <code>false</code>, item will not be focusable.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'tabStopId',\n    'description': '',\n    'type': 'string',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Styling Reka UI Component States Using CSS Attributes\nDESCRIPTION: Shows how to style the visual state of Reka UI components by targeting their `data-state` attribute using plain CSS. This snippet styles the AccordionItem's border and adjusts the style when the `data-state` equals \"open\". It requires no additional dependencies aside from CSS and standard DOM attribute selectors. Input is the rendered component bearing data-state attributes, and output is dynamic style changes reflecting those states.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/styling.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.AccordionItem {\n  border-bottom: 1px solid gainsboro;\n}\n\n.AccordionItem[data-state=\"open\"] {\n  border-bottom-width: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Toast Usage - Vue\nDESCRIPTION: This code snippet shows how to use the custom Toast component created in the previous snippet. It demonstrates how to pass props like title and content, as well as using a slot for custom button implementation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Toast from './your-toast.vue'\n</script>\n\n<template>\n  <Toast\n    title=\"Upgrade available\"\n    content=\"We've just released Radix 3.0!\"\n  >\n    <button @click=\"handleUpgrade\">\n      Upgrade\n    </button>\n  </Toast>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Imperative API for Toast - Vue.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the custom toast component. It sets up a reference to the toast component using `ref` and then calls the `publish` function from the toast component to trigger the toast notification. The form's submit event is bound to the `publish` function.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Toast from './your-toast.vue'\n\nconst savedRef = ref<InstanceType<typeof Toast>>()\n</script>\n\n<template>\n  <div>\n    <form @submit=\"savedRef.publish()\">\n      ...\n    </form>\n    <Toast ref=\"savedRef\">\n      Saved successfully!\n    </Toast>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering for Listbox Items - Vue\nDESCRIPTION: Illustrates how to use the `ListboxFilter` component and implement custom filtering logic for the list items. It binds the filter input value to a `searchTerm` ref, uses a `computed` property with a `useFilter` helper to create `filteredPeople`, and renders `ListboxItem` components from this filtered list. Requires importing components from `reka-ui`, `ref` and `computed` from `vue`, and `useFilter` from `reka-ui`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/listbox.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ListboxContent, ListboxFilter, ListboxItem, ListboxRoot, useFilter } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\nconst searchTerm = ref('')\n\nconst { startsWith } = useFilter({ sensitivity: 'base' })\nconst filteredPeople = computed(() => people.filter(p => startsWith(p.name, searchTerm.value)))\n</script>\n\n<template>\n  <ListboxRoot v-model=\"selectedPeople\">\n    <ListboxFilter v-model=\"searchTerm\" />\n    <ListboxContent>\n      <ListboxItem\n        v-for=\"person in filteredPeople\"\n        :key=\"person.id\"\n        :value=\"person\"\n      >\n        {{ person.name }}\n      </ListboxItem>\n    </ListboxContent>\n  </ListboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Emits with EmitsTable in Vue\nDESCRIPTION: Uses the `<EmitsTable>` Vue component to document events emitted by a component. It takes a `data` prop which is an array of objects, each defining an event's name, description (HTML content), and type signature. This example documents the `update:modelValue` event, commonly used for `v-model` binding in Vue.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxInput.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[string]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Structure\nDESCRIPTION: This snippet demonstrates the basic structure of a tooltip using the imported components. It uses `TooltipProvider` to provide global functionality and wraps the `TooltipRoot`, which contains `TooltipTrigger`, `TooltipPortal` and `TooltipContent`. `TooltipContent` renders the tooltip's content, and `TooltipArrow` provides an optional visual link.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <TooltipProvider>\n    <TooltipRoot>\n      <TooltipTrigger />\n      <TooltipPortal>\n        <TooltipContent>\n          <TooltipArrow />\n        </TooltipContent>\n      </TooltipPortal>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring the Alert Dialog in Vue\nDESCRIPTION: This snippet demonstrates how to import all necessary parts of the Alert Dialog component from 'reka-ui' and assemble them within a Vue template to create a modal dialog with trigger, overlay, content, title, description, cancel, and action buttons. It serves as the foundational setup for the Alert Dialog component, emphasizing modularity and composability.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <AlertDialogRoot>\n    <AlertDialogTrigger />\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogContent>\n        <AlertDialogTitle />\n        <AlertDialogDescription />\n        <AlertDialogCancel />\n        <AlertDialogAction />\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Converting Emits to Props using useEmitAsProps in Vue/TypeScript\nDESCRIPTION: The code demonstrates how to convert the emitted events from a component into a format that is acceptable by Vue components using the `useEmitAsProps` composable.  It takes the `emits` array, defined with `defineEmits`, as input and returns an object that can be bound using `v-bind`. The `CompEmitType` represents the type of the emitted events. This allows the parent component to listen to the child component's events seamlessly.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-emit-as-props.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEmitAsProps } from 'reka-ui'\n\nconst emits = defineEmits<CompEmitType>()\nconst emitsAsProps = useEmitAsProps(emits)\n</script>\n\n<template>\n  <Comp v-bind=\"emitsAsProps\">\n    ...\n  </Comp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable with Data in Vue\nDESCRIPTION: This snippet renders a PropsTable component and passes it a data array containing prop information. The data includes properties like 'name', 'description', 'type', 'required', and 'default'. This data drives the dynamic generation of a props table in the UI. It's used to document component properties.  No dependencies outside of Vue are apparent.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateFieldInput.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'part',\n    'description': '<p>The part of the date to render</p>\\n',\n    'type': '\\'day\\' | \\'month\\' | \\'year\\' | \\'hour\\' | \\'minute\\' | \\'second\\' | \\'dayPeriod\\' | \\'literal\\' | \\'timeZoneName\\'',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining EmitsTable Data Structure\nDESCRIPTION: This snippet defines an array of objects, each of which represents an event emitted by the Vue component. Each object contains details such as the event's name, description, and the expected type of the emitted data. This information is used by the `EmitsTable` component to display information about emitted events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerRoot.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called whenever the model value changes</p>\\n',\n    'type': '[date: DateRange]'\n  }\n```\n\n----------------------------------------\n\nTITLE: Panel Component Props Documentation in Vue\nDESCRIPTION: A table component that lists all available props for the Panel component including rendering options, size controls, and collapsibility settings.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SplitterPanel.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collapsedSize',\n    'description': '<p>The size of panel when it is collapsed.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'collapsible',\n    'description': '<p>Should panel collapse when resized beyond its <code>minSize</code>. When <code>true</code>, it will be collapsed to <code>collapsedSize</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultSize',\n    'description': '<p>Initial size of panel (numeric value between 1-100)</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'id',\n    'description': '<p>Panel id (unique within group); falls back to <code>useId</code> when not provided</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'maxSize',\n    'description': '<p>The maximum allowable size of panel (numeric value between 1-100); defaults to <code>100</code></p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'minSize',\n    'description': '<p>The minimum allowable size of panel (numeric value between 1-100); defaults to <code>10</code></p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'order',\n    'description': '<p>The order of panel within group; required for groups with conditionally rendered panels</p>\\n',\n    'type': 'number',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Tabs - Vue\nDESCRIPTION: This example demonstrates how to create vertical tabs using the Reka UI Tabs component.  It utilizes the `orientation` prop on the TabsRoot component to set the tabs to a vertical layout. It also defines tab triggers and corresponding content.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tabs.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TabsContent, TabsList, TabsRoot, TabsTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TabsRoot\n    default-value=\"tab1\"\n    orientation=\"vertical\"\n  >\n    <TabsList aria-label=\"tabs example\">\n      <TabsTrigger value=\"tab1\">\n        One\n      </TabsTrigger>\n      <TabsTrigger value=\"tab2\">\n        Two\n      </TabsTrigger>\n      <TabsTrigger value=\"tab3\">\n        Three\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent value=\"tab1\">\n      Tab one content\n    </TabsContent>\n    <TabsContent value=\"tab2\">\n      Tab two content\n    </TabsContent>\n    <TabsContent value=\"tab3\">\n      Tab three content\n    </TabsContent>\n  </TabsRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Close Icon Button - Vue\nDESCRIPTION: This code snippet demonstrates how to properly label a close icon button for screen reader users using the `aria-label` attribute on the ToastClose component. The `aria-hidden` attribute is used on the span element containing the icon to prevent it from being read by screen readers.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ToastRoot type=\"foreground\">\n    <ToastDescription>Saved!</ToastDescription>\n    <ToastClose aria-label=\"Close\">\n      <span aria-hidden=\"true\">×</span>\n    </ToastClose>\n  </ToastRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Component Anatomy Implementation in Vue\nDESCRIPTION: Shows how to import and assemble all parts of the Range Calendar component in a Vue.js application. Demonstrates the proper nesting structure for building a complete and functional date range selection calendar.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/range-calendar.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  RangeCalendarCell,\n  RangeCalendarCellTrigger,\n  RangeCalendarGrid,\n  RangeCalendarGridBody,\n  RangeCalendarGridHead,\n  RangeCalendarGridRow,\n  RangeCalendarHeadCell,\n  RangeCalendarHeader,\n  RangeCalendarHeading,\n  RangeCalendarNext,\n  RangeCalendarPrev,\n  RangeCalendarRoot\n} from 'reka-ui'\n</script>\n\n<template>\n  <RangeCalendarRoot>\n    <RangeCalendarHeader>\n      <RangeCalendarPrev />\n      <RangeCalendarHeading />\n      <RangeCalendarNext />\n    </RangeCalendarHeader>\n    <RangeCalendarGrid>\n      <RangeCalendarGridHead>\n        <RangeCalendarGridRow>\n          <RangeCalendarHeadCell />\n        </RangeCalendarGridRow>\n      </RangeCalendarGridHead>\n      <RangeCalendarGridBody>\n        <RangeCalendarGridRow>\n          <RangeCalendarCell>\n            <RangeCalendarCellTrigger />\n          </RangeCalendarCell>\n        </RangeCalendarGridRow>\n      </RangeCalendarGridBody>\n    </RangeCalendarGrid>\n  </RangeCalendarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom CommandItem Component Using ComboboxItem in Vue\nDESCRIPTION: This snippet defines a CommandItem Vue component that wraps Reka-UI's ComboboxItem, forwarding all props, exposes a slot, and leverages the @select.prevent handler to stop default combobox selection behavior. This facilitates advanced menu interactions in a command palette. Dependencies: Reka-UI, required prop types, and Radix Vue icons for further composability.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { ComboboxItemProps } from 'reka-ui'\nimport { CheckIcon } from '@radix-icons/vue'\nimport { ComboboxItem } from 'reka-ui'\n\nconst props = defineProps<ComboboxItemProps>()\n</script>\n\n<template>\n  <ComboboxItem\n    v-bind=\"props\"\n    @select.prevent\n  >\n    <slot />\n  </ComboboxItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Listing Emitted Events for Time Field in Vue (HTML/Javascript)\nDESCRIPTION: Presents the events emitted by the Time Field component using the <EmitsTable> Vue component. The \":data\" array enumerates each event, providing name, description, and parameter types. Requires Vue and the prebuilt EmitsTable component. Inputs are events metadata; outputs are formatted documentation tables. Purely declarative for documentation with no runtime effects.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TimeFieldRoot.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called whenever the model value changes</p>\\n',\n    'type': '[date: TimeValue]'\n  },\n  {\n    'name': 'update:placeholder',\n    'description': '<p>Event handler called whenever the placeholder value changes</p>\\n',\n    'type': '[date: TimeValue]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Delegating Mount/Unmount Control to VueUse Motion for Animated Reka UI Dialog (Vue/TypeScript)\nDESCRIPTION: Shows usage of the @vueuse/motion composable useSpring to create reactive styles for opacity, scale, and position to animate Reka UI dialog components. The forceMount prop keeps DialogOverlay and DialogContent mounted while their styles transition according to animation state. The open reactive variable toggles animation stages triggering reactive spring updates. This pattern delegates control of mounting timing to the animation library's state for smooth enter and exit transitions without premature unmounting. Requires Vue 3, reka-ui, and @vueuse/motion.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/animation.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSpring } from '@vueuse/motion'\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'reka-ui'\nimport { reactive, ref, watch } from 'vue'\n\nconst stages = {\n  initial: { opacity: 0, scale: 0, top: 0, },\n  enter: { opacity: 1, scale: 1, top: 50, },\n  leave: { opacity: 0, scale: 0.6, top: 30, },\n}\n\nconst styles = reactive(stages.initial)\nconst { set } = useSpring(styles, {\n  damping: 8,\n  stiffness: 200,\n})\n\nconst open = ref(false)\nwatch(open, () => {\n  if (open.value)\n    set(stages.enter)\n  else\n    set(stages.leave)\n})\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal v-if=\"styles.opacity !== 0\">\n      <DialogOverlay\n        force-mount\n        :style=\"{\n          opacity: styles.opacity,\n          transform: `scale(${styles.scale})`,\n        }\"\n      />\n      <DialogContent\n        force-mount\n        :style=\"{\n          opacity: styles.opacity,\n          top: `${styles.top}%`,\n        }\"\n      >\n        <h1>Hello from inside the Dialog!</h1>\n        <DialogClose>Close</DialogClose>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Anatomy of the Vue DateRangeField Component\nDESCRIPTION: Demonstrates the minimal setup for the `DateRangeField` component using `DateRangeFieldRoot` and `DateRangeFieldInput` from the `reka-ui` library. It shows how to import these components and structure them within a Vue template to create a basic date range input field.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/date-range-field.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  DateRangeFieldInput,\n  DateRangeFieldRoot,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DateRangeFieldRoot>\n    <DateRangeFieldInput />\n  </DateRangeFieldRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to Reka UI Menubar (Vue)\nDESCRIPTION: Shows how to use the `MenubarSeparator` component from `reka-ui` to visually separate groups of `MenubarItem` components within a `MenubarContent` section.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components\nDESCRIPTION: This snippet imports the necessary components from the Reka-UI library to create a basic tooltip structure. The components are `TooltipArrow`, `TooltipContent`, `TooltipPortal`, `TooltipProvider`, `TooltipRoot`, and `TooltipTrigger`.  These are the building blocks of a tooltip in Reka-UI.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipPortal, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Understanding the PropsTable component rendering Vue Teleport props\nDESCRIPTION: This code defines a PropsTable component that displays the props available for a Vue Teleport component. It helps developers understand which props are configurable, their types, and descriptions, with references to official Vue documentation. No actual functional code or snippets are included beyond this configuration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuPortal.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Values - Vue\nDESCRIPTION: This example demonstrates how to enable multiple selection in the Combobox component. By using an array as the `v-model` value and setting the `multiple` prop to `true`, the component allows the user to select multiple items from the list.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ComboboxRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref([people[0], people[1]])\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"selectedPeople\"\n    multiple\n  >\n    …\n  </ComboboxRoot>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Props Table With Detailed Component Configuration - Vue\nDESCRIPTION: This code snippet defines a <PropsTable> component instance, receiving a comprehensive list of prop definitions for a Vue component as a JSON array. Each entry details the prop's name, type, whether it is required, its default value if any, and an HTML-formatted description. The snippet documents how consumers can customize rendered elements, control selection and expansion, manage directionality, and handle key behaviors. To use, include <PropsTable> in a Vue component file, supplying a matching data array as shown. Dependencies: Vue, a registered PropsTable component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TreeRoot.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'ul\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultExpanded',\n    'description': '<p>The value of the expanded tree when initially rendered. Use when you do not need to control the state of the expanded tree</p>\\n',\n    'type': 'string[]',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the tree when initially rendered. Use when you do not need to control the state of the tree</p>\\n',\n    'type': 'Record<string, any> | Record<string, any>[]',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the listbox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with tree</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'expanded',\n    'description': '<p>The controlled value of the expanded item. Can be binded with with <code>v-model</code>.</p>\\n',\n    'type': 'string[]',\n    'required': false\n  },\n  {\n    'name': 'getChildren',\n    'description': '<p>This function is passed the index of each item and should return a list of children for that item</p>\\n',\n    'type': '((val: Record<string, any>) => Record<string, any>[])',\n    'required': false,\n    'default': 'val.children'\n  },\n  {\n    'name': 'getKey',\n    'description': '<p>This function is passed the index of each item and should return a unique key for that item</p>\\n',\n    'type': '(val: Record<string, any>) => string',\n    'required': true\n  },\n  {\n    'name': 'items',\n    'description': '<p>List of items</p>\\n',\n    'type': 'Record<string, any>[]',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the tree. Can be binded with with <code>v-model</code>.</p>\\n',\n    'type': 'Record<string, any> | Record<string, any>[]',\n    'required': false\n  },\n  {\n    'name': 'multiple',\n    'description': '<p>Whether multiple options can be selected or not.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'propagateSelect',\n    'description': '<p>When <code>true</code>, selecting parent will select the descendants.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'selectionBehavior',\n    'description': '<p>How multiple selection should behave in the collection.</p>\\n',\n    'type': '\\'toggle\\' | \\'replace\\'',\n    'required': false,\n    'default': '\\'toggle\\''\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Reka UI AccordionItem Component in Vue with TypeScript\nDESCRIPTION: Shows how to extend the AccordionItem primitive component from Reka UI in a Vue single file component using TypeScript. It defines a new interface that extends AccordionItemProps to include additional prop(s), demonstrates usage of `defineProps` to type props, and renders AccordionItem with slot content and inherited props. Dependencies are the Reka UI AccordionItem component and Vue 3 Composition API with TypeScript support. Inputs are additional props and slots, outputs are custom extended components preserving Reka UI functionality.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/styling.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AccordionItem, type AccordionItemProps } from \"reka-ui\";\n\ninterface Props extends AccordionItemProps {\n  foo: string;\n}\n\ndefineProps<Props>();\n</script>\n\n<template>\n  <AccordionItem v-bind=\"$props\"><slot /></AccordionItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Abstracting Select API to Custom Components (Reka-UI, Vue)\nDESCRIPTION: Shows how to encapsulate the select primitive into a higher level Select component, exposing only Select and SelectItem, thus simplifying usage for consumers. The example assumes the presence of a user-defined './your-select' module that handles internal wiring. Allows passing a default-value and custom option values directly; requires appropriate abstraction logic.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Select, SelectItem } from './your-select'\n</script>\n\n<template>\n  <Select default-value=\"2\">\n    <SelectItem value=\"1\">\n      Item 1\n    </SelectItem>\n    <SelectItem value=\"2\">\n      Item 2\n    </SelectItem>\n    <SelectItem value=\"3\">\n      Item 3\n    </SelectItem>\n  </Select>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API reference for ToolbarRoot component\nDESCRIPTION: Provides documentation for the ToolbarRoot, which contains all parts of the toolbar, and details the supported data attributes for orientation. Includes an imported meta file for additional details.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-orientation]',\n      values: ['vertical', 'horizontal'],\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Items with Arbitrary Content (Reka-UI, Vue)\nDESCRIPTION: Demonstrates placing custom content, such as an image and text, within a select item using <SelectItemText> in Vue with Reka-UI. Shows use of <SelectItemIndicator> for highlighting the selected item. Customization is open-ended but requires Reka-UI for base structure.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem>\n            <SelectItemText>\n              <img src=\"…\">\n              Adolfo Hess\n            </SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem>…</SelectItem> <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Populating PropsTable with Component Property Definitions\nDESCRIPTION: This Vue snippet utilizes the `PropsTable` component, binding a JavaScript array to its `:data` prop. The array contains objects defining component properties: `as` (element/component rendering), `asChild` (composition behavior), and `forceMount` (controlled mounting). Each definition includes name, description (HTML allowed), type, requirement status, and default value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogOverlay.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Component Props Table for Reka-UI Accordion Component\nDESCRIPTION: Defines the properties for the accordion component, including options for customizing rendering, interaction, and behavior. It details parameters such as 'as', 'asChild', 'disabled', 'unmountOnHide', and 'value', along with their types, descriptions, and default values. Dependencies include Vue to enable dynamic rendering and prop handling.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionItem.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Whether or not an accordion item is disabled from user interaction.\\nWhen <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'unmountOnHide',\n    'description': '<p>When <code>true</code>, the element will be unmounted on closed state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>A string value for the accordion item. All items within an accordion should use a unique value.</p>\\n',\n    'type': 'string',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a PropsTable Component in Vue\nDESCRIPTION: Renders a PropsTable component that displays documentation for component props. The component takes a data array containing prop definitions including name, description, type, required status, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxEmpty.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: ContextMenu with Checkbox Items - Vue\nDESCRIPTION: This Vue component demonstrates how to incorporate checkbox items into a ContextMenu using ContextMenuCheckboxItem and ContextMenuItemIndicator. It uses @iconify/vue for icons and manages the checked state with a ref.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'reka-ui'\n\nconst checked = ref(true)\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem v-model=\"checked\">\n          <ContextMenuItemIndicator>\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator>\n          Checkbox item\n        </ContextMenuCheckboxItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled SwitchRoot Component in Reka UI Using Vue\nDESCRIPTION: Demonstrates a controlled SwitchRoot component that receives its state via a reactive ref and updates the state through an event handler. Dependencies include Reka UI components (SwitchRoot, SwitchThumb) and Vue's ref for reactivity. The key prop is model-value for the controlled state, with @update:model-value event ensuring state changes flow from child to parent. Input is the isActive ref indicating the switch state; output is synchronized updated value. This pattern suits scenarios requiring external state synchronization, such as Vuex or Pinia integration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/controlled-state.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport { SwitchRoot, SwitchThumb } from 'reka-ui'\\nimport { ref } from 'vue'\\n\\nconst isActive = ref(false)\\n\\nfunction handleUpdate(value) {\\n  isActive.value = value\\n}\\n</script>\\n\\n<template>\\n  <SwitchRoot :model-value=\"isActive\" @update:model-value=\"handleUpdate\">\\n    <SwitchThumb />\\n  </SwitchRoot>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DropdownMenuContent Wrapper in Vue\nDESCRIPTION: Illustrates the implementation of a custom Vue wrapper component (`DropdownMenuContent.vue`) for `reka-ui`'s `DropdownMenuContent`. It uses `DropdownMenuPortal` for correct DOM placement and leverages `useForwardPropsEmits` from `reka-ui` to pass down props and handle events, encapsulating the portal logic.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<!-- DropdownMenuContent.vue -->\n<script setup lang=\"ts\">\nimport type { DropdownMenuContentEmits, DropdownMenuContentProps } from 'reka-ui'\nimport { DropdownMenuContent, DropdownMenuPortal, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<DropdownMenuContentProps>()\nconst emits = defineEmits<DropdownMenuContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuPortal>\n    <DropdownMenuContent v-bind=\"forwarded\">\n      <slot />\n    </DropdownMenuContent>\n  </DropdownMenuPortal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Indeterminate Checkbox State in Vue with Reka UI\nDESCRIPTION: Provides an example of creating a checkbox with an indeterminate state using Reka UI components in Vue. It uses `v-model` bound to a reactive variable `checked` to control the state ('checked', 'unchecked', 'indeterminate'). Icons from '@iconify/vue' are conditionally rendered within `CheckboxIndicator` based on the state. A button is included to demonstrate toggling between the indeterminate and unchecked states.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/checkbox.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Icon } from '@iconify/vue'\nimport { CheckboxIndicator, CheckboxRoot } from 'reka-ui'\n\nconst checked = ref('indeterminate')\n</script>\n\n<template>\n  <CheckboxRoot v-model=\"checked\">\n    <CheckboxIndicator>\n      <Icon\n        v-if=\"checked === 'indeterminate'\"\n        icon=\"radix-icons:divider-horizontal\"\n      />\n      <Icon\n        v-if=\"checked\"\n        icon=\"radix-icons:check\"\n      />\n    </CheckboxIndicator>\n  </CheckboxRoot>\n\n  <button\n    type=\"button\"\n    @click=\"() => (checked === 'indeterminate' ? (checked = false) : (checked = 'indeterminate'))\"\n  >\n    Toggle indeterminate\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Component Documentation in Vue\nDESCRIPTION: A Vue component that displays a table of props documentation for a UI component. The props include configuration for element rendering ('as'), child composition ('asChild'), and positioning reference ('reference').\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerAnchor.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Collision- and Direction-Aware Animations for HoverCardContent Using CSS and Vue\nDESCRIPTION: This example demonstrates how HoverCardContent can respond to runtime changes in placement due to collisions by animating differently based on the 'data-side' attribute. The Vue snippet displays the standard component structure, while the CSS applies specific animation names ('slideUp' or 'slideDown') depending on whether the content is positioned on top or bottom. Animations use cubic-bezier timing and translate on the Y axis with opacity changes to create smooth slide effects aligned with direction and collision states.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/hover-card.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'\\n</script>\\n\\n<template>\\n  <HoverCardRoot>\\n    <HoverCardTrigger>…</HoverCardTrigger>\\n    <HoverCardContent class=\"HoverCardContent\">\\n      …\\n    </HoverCardContent>\\n  </HoverCardRoot>\\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\\n.HoverCardContent {\\n  animation-duration: 0.6s;\\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\\n}\\n.HoverCardContent[data-side=\"top\"] {\\n  animation-name: slideUp;\\n}\\n.HoverCardContent[data-side=\"bottom\"] {\\n  animation-name: slideDown;\\n}\\n\\n@keyframes slideUp {\\n  from {\\n    opacity: 0;\\n    transform: translateY(10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n\\n@keyframes slideDown {\\n  from {\\n    opacity: 0;\\n    transform: translateY(-10px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Slots in JSON Format\nDESCRIPTION: This snippet defines the slots available in the Vue component using a JSON array passed to a SlotsTable component. Slots include \"option\" which can accept various types including null, string, number, or an arbitrary object; \"virtualizer\" representing a Virtualizer instance managing virtualization; and \"virtualItem\" representing an individual virtualized item. These slots allow parent components to customize the UI rendering of list items and the virtualization mechanism. Dependencies include appropriate typings for Virtualizer and VirtualItem. Inputs are the slot props, and outputs are the rendered slot content.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxVirtualizer.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'option',\n    'description': '',\n    'type': 'null | string | number | Record<string, any>'\n  },\n  {\n    'name': 'virtualizer',\n    'description': '',\n    'type': 'Virtualizer<HTMLElement, Element>'\n  },\n  {\n    'name': 'virtualItem',\n    'description': '',\n    'type': 'VirtualItem'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Table with Descriptions in Vue\nDESCRIPTION: Illustrates the declaration of component props inside a Vue template using a PropsTable component. Each prop object includes 'name', 'description' with HTML content, data 'type', 'required' flag, and 'default' values where applicable. This snippet facilitates documentation and type-checking for UI components, aiding developer understanding and usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarCell.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'td\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'date',\n    'description': '<p>The date value for the cell</p>\\n',\n    'type': 'DateValue',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Slots Table for Reka-UI Date Field (Vue/JSON)\nDESCRIPTION: This code snippet documents the available slots for the Date Field component using the SlotsTable Vue component, presenting each slot's name, description, and type as part of a JSON array. Inputs are arrays of slot descriptors for documentation only; outputs are the rendered slot tables for developer reference. This is not meant to be executed in application runtime but assists users integrating and customizing the component in Vue.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateFieldRoot.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>The current date of the field</p>\\n',\n    'type': 'DateValue | undefined'\n  },\n  {\n    'name': 'segments',\n    'description': '<p>The date field segment contents</p>\\n',\n    'type': '{ part: SegmentPart; value: string; }[]'\n  },\n  {\n    'name': 'isInvalid',\n    'description': '<p>Value if the input is invalid</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Children Schema - Reka UI Tree - Vue\nDESCRIPTION: This example shows how to use the `:get-children` prop on the `TreeRoot` component to define a custom function for extracting child nodes from an item. This is useful when your data structure doesn't use the default `children` property, allowing you to combine different types of nested items like directories and files.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TreeRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\ninterface FileNode {\n  title: string\n  icon: string\n}\n\ninterface DirectoryNode {\n  title: string\n  icon: string\n  directories?: DirectoryNode[]\n  files?: FileNode[]\n}\n</script>\n\n<template>\n  <TreeRoot\n    :items=\"items\"\n    :get-key=\"(item) => item.title\"\n    :get-children=\"(item) => (!item.files) ? item.directories : (!item.directories) ? item.files : [...item.directories, ...item.files]\"\n  >\n    ...\n  </TreeRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Decimal Number Formatting in Vue NumberField\nDESCRIPTION: Shows how to configure the `NumberFieldRoot` component to format numbers as decimals using the `format-options` prop. It sets a default value (`default-value`) and specifies formatting details like `signDisplay` and `minimumFractionDigits`, leveraging `Intl.NumberFormat` options.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/number-field.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NumberFieldRoot\n    :default-value=\"5\"\n    :format-options=\"{\n      signDisplay: 'exceptZero',\n      minimumFractionDigits: 1,\n    }\"\n  >\n    …\n  </NumberFieldRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable for Tooltip Component in Vue\nDESCRIPTION: Vue component rendering a PropsTable with tooltip configuration options including defaultOpen, delayDuration, disableClosingTrigger, disabled, disableHoverableContent, ignoreNonKeyboardFocus, and open state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipRoot.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the tooltip when it is initially rendered.\\nUse when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'delayDuration',\n    'description': '<p>Override the duration given to the <code>Provider</code> to customise\\nthe open delay for a specific tooltip.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'disableClosingTrigger',\n    'description': '<p>When <code>true</code>, clicking on trigger will not close the content.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, disable tooltip</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disableHoverableContent',\n    'description': '<p>Prevents Tooltip.Content from remaining open when hovering.\\nDisabling this has accessibility consequences. Inherits\\nfrom Tooltip.Provider.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'ignoreNonKeyboardFocus',\n    'description': '<p>Prevent the tooltip from opening if the focus did not come from\\nthe keyboard by matching against the <code>:focus-visible</code> selector.\\nThis is useful if you want to avoid opening it when switching\\nbrowser tabs or closing a dialog.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the tooltip.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using NavigationMenuViewport for Flexible Layouts in Vue\nDESCRIPTION: Illustrates using the `NavigationMenuViewport` component placed outside the `NavigationMenuList` to render active `NavigationMenuContent`. This approach provides enhanced control over the Document Object Model (DOM) structure, facilitating advanced animations while automatically maintaining tab focus. The example imports necessary components from 'reka-ui' via a TypeScript setup script and shows the viewport placement in the Vue template.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item two content</NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n\n    <!-- NavigationMenuContent will be rendered here when active  -->\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Define step size - Vue\nDESCRIPTION: Sets a custom step size for the slider using the `step` prop.  This dictates the increment the slider increases/decreases with.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'\n</script>\n\n<template>\n  <SliderRoot\n    :default-value=\"[50]\"\n    :step=\"10\"\n  >\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Styles with Deep Selectors for Teleported Reka UI Components in Vue (TypeScript)\nDESCRIPTION: Illustrates applying scoped CSS in Vue Single File Components to style teleported elements like dropdowns by using deep selectors. It imports dropdown menu components from Reka UI and shows how to style parts inside teleported portal sections with the `:deep()` selector, preserving scoping integrity. Dependencies include Vue 3 setup syntax with TypeScript and Reka UI library. Input consists of the component template and scoped styles, output is correctly scoped styling applied to teleported DOM nodes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/styling.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { DropdownMenuRoot, DropdownMenuItem, ... } from \"reka-ui\";\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <!-- ... -->\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        <DropdownMenuItem class=\"DropdownMenuItem\">An item</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n\n<style scoped>\n:deep(.DropdownMenuContent) {\n  /* ... */\n}\n\n.DropdownMenuItem {\n  /* ... */\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dropdown API Entry Point in TypeScript\nDESCRIPTION: Defines the entry point (`your-dropdown-menu.ts`) for a custom dropdown menu API abstraction. It exports custom wrapper components (`DropdownMenuCheckboxItem.vue`, `DropdownMenuContent.vue`, `DropdownMenuRadioItem.vue`) alongside re-exported primitive components from `reka-ui`, providing a curated interface for the application.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default as DropdownMenuCheckboxItem } from 'DropdownMenuCheckboxItem.vue'\n// your-dropdown-menu.ts\nexport { default as DropdownMenuContent } from 'DropdownMenuContent.vue'\nexport { default as DropdownMenuRadioItem } from 'DropdownMenuRadioItem.vue'\n\nexport {\n  DropdownMenuRoot as DropdownMenu,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from 'reka-ui'\n```\n\n----------------------------------------\n\nTITLE: Switch Component Anatomy in Vue\nDESCRIPTION: This code snippet demonstrates the basic structure of the Switch component in Vue. It imports SwitchRoot and SwitchThumb from the reka-ui library and arranges them within a template to create a functional switch.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/switch.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SwitchRoot, SwitchThumb } from 'reka-ui'\n</script>\n\n<template>\n  <SwitchRoot>\n    <SwitchThumb />\n  </SwitchRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generating Props Table in Vue\nDESCRIPTION: This snippet utilizes the PropsTable component and passes a data prop to it. The data prop is an array of objects, where each object represents a prop and contains its name, description, type, whether it's required, and its default value. The PropsTable component then dynamically renders the table based on the provided data.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionContent.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Using Nested Tree Node Component - Reka UI Tree - Vue\nDESCRIPTION: This snippet demonstrates how to use the custom recursive `Tree.vue` component within the `TreeRoot`. It passes the nested data structure (`items`) to both the `TreeRoot` and the custom `Tree` component to render the hierarchical view.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <TreeRoot\n    :items=\"items\"\n    :get-key=\"(item) => item.title\"\n  >\n    <Tree :tree-items=\"items\" />\n  </TreeRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Number Field Anatomy using Vue Components\nDESCRIPTION: Demonstrates the basic structure of the `NumberField` component by importing and arranging its core parts (`NumberFieldRoot`, `NumberFieldDecrement`, `NumberFieldInput`, `NumberFieldIncrement`) within a Vue template using `<script setup>`. This sets up the fundamental layout for the number input.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/number-field.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { NumberFieldDecrement, NumberFieldIncrement, NumberFieldInput, NumberFieldRoot } from 'reka-ui'\n</script>\n\n<template>\n  <NumberFieldRoot>\n    <NumberFieldDecrement />\n    <NumberFieldInput />\n    <NumberFieldIncrement />\n  </NumberFieldRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider orientation - Vue\nDESCRIPTION: Creates a vertical slider using the `orientation` prop. Sets the default value and applies custom classes for styling.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'\n</script>\n\n<template>\n  <SliderRoot\n    class=\"SliderRoot\"\n    :default-value=\"[50]\"\n    orientation=\"vertical\"\n  >\n    <SliderTrack class=\"SliderTrack\">\n      <SliderRange class=\"SliderRange\" />\n    </SliderTrack>\n    <SliderThumb class=\"SliderThumb\" />\n  </SliderRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pin Input for OTP Mode in Vue\nDESCRIPTION: Shows how to enable One-Time Password (OTP) behavior for the Pin Input component by setting the boolean `otp` prop to true on the `PinInputRoot` element. Requires importing necessary components from 'reka-ui'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pin-input.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Label, PinInputInput, PinInputRoot } from 'reka-ui'\n</script>\n\n<template>\n  <PinInputRoot v-model=\"value\" otp>\n    …\n  </PinInputRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Data for PropsTable Component (JavaScript)\nDESCRIPTION: This JavaScript array provides the data structure required by the PropsTable component. It defines two properties, 'as' and 'asChild', including their names, HTML-formatted descriptions, types ('AsTag | Component' and 'boolean'), requirement status, and a default value for 'as'. This structure configures the rows displayed in the property table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToastClose.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component Props Table with Vue and reka-ui - Vue\nDESCRIPTION: This snippet demonstrates how to use the <PropsTable> component in a Vue file to display documentation for component props. It provides an array to the data prop containing objects with name, description, type, requirement, and default value of each prop. Dependencies include the 'PropsTable' component from the reka-ui UI system, and the snippet assumes it is used within a valid Vue template or SFC context. Inputs are the prop definitions array; outputs are a presentation table suitable for documentation sites. Limitations include the static nature of the props data unless dynamically generated.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverClose.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using Labels in Reka UI Menubar (Vue)\nDESCRIPTION: Illustrates how to add a `MenubarLabel` component within the `MenubarContent` to provide descriptive text for a section or group of menu items in a `reka-ui` Menubar.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarLabel>Label</MenubarLabel>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Button Props Configuration in Vue\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component to display documentation for a button component. The table shows properties including 'as' for element customization and 'asChild' for component composition.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxCancel.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props Table in Vue/Reka UI\nDESCRIPTION: Vue component that renders a table of component properties including 'dir' for reading direction and 'modal' for dropdown menu modality. The PropsTable component receives data as a prop containing property definitions with name, description, type, required status, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuRoot.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable.</p>\\n<p>If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'modal',\n    'description': '<p>The modality of the dropdown menu.</p>\\n<p>When set to <code>true</code>, interaction with outside elements will be disabled and only menu content will be visible to screen readers.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic DropdownMenu Structure in Vue\nDESCRIPTION: Demonstrates the fundamental setup for a dropdown menu using core components (`DropdownMenuRoot`, `DropdownMenuTrigger`, `DropdownMenuPortal`, `DropdownMenuContent`) from the `reka-ui` library within a Vue 3 `<script setup>` block. This structure forms the basis for adding menu items and functionality.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Constraining Reka UI Menubar Content Size (Vue/CSS)\nDESCRIPTION: Demonstrates how to limit the width and height of the `MenubarContent` area. The Vue snippet shows the basic structure and applying a CSS class, while the CSS snippet utilizes the `--reka-menubar-trigger-width` and `--reka-menubar-content-available-height` custom properties to set `width` and `max-height`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger> Trigger </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"MenubarContent\"\n          :side-offset=\"5\"\n          :align-offset=\"-3\"\n        >\n          <MenubarItem> New Tab </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarContent {\n  width: var(--reka-menubar-trigger-width);\n  max-height: var(--reka-menubar-content-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Import Toast Components - Vue\nDESCRIPTION: This code snippet shows how to import the Toast components from the reka-ui library in a Vue component. It imports ToastAction, ToastClose, ToastDescription, ToastProvider, ToastRoot, ToastTitle, and ToastViewport. This is the basic setup needed to use the Toast component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ToastAction, ToastClose, ToastDescription, ToastProvider, ToastRoot, ToastTitle, ToastViewport } from 'reka-ui'\n</script>\n\n<template>\n  <ToastProvider>\n    <ToastRoot>\n      <ToastTitle />\n      <ToastDescription />\n      <ToastAction />\n      <ToastClose />\n    </ToastRoot>\n\n    <ToastViewport />\n  </ToastProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Avatar Component\nDESCRIPTION: This snippet demonstrates how to import and use the Avatar component. It imports `AvatarImage` and `AvatarRoot` from the 'reka-ui' library.  The `AvatarRoot` acts as a container, and `AvatarImage` is nested inside it. This structure represents the basic setup for rendering an avatar with an image.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/avatar.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { AvatarImage, AvatarRoot } from 'reka-ui'\n</script>\n\n<template>\n  <AvatarRoot>\n    <AvatarImage />\n    <AvatarFallback />\n  </AvatarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Origin-Aware Animations for Reka UI Menubar (Vue/CSS)\nDESCRIPTION: Shows how to create animations for the `MenubarContent` that originate from the correct position based on component props and potential collisions. The CSS uses the `--reka-menubar-content-transform-origin` custom property provided by `reka-ui` to set the `transform-origin` for a scale animation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\">\n          …\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarContent {\n  transform-origin: var(--reka-menubar-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Dialog API in Vue.js\nDESCRIPTION: Shows how to abstract dialog primitives into reusable components, allowing developers to create customized dialog APIs. Demonstrates importing custom components and wiring up content with close functionality.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_6\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { Dialog, DialogContent, DialogTrigger } from './your-dialog'\n</script>\n\n<template>\n  <Dialog>\n    <DialogTrigger>Dialog trigger</DialogTrigger>\n    <DialogContent>Dialog Content</DialogContent>\n  </Dialog>\n</template>\n\n// your-dialog.ts\nexport { default as DialogContent } from 'DialogContent.vue'\nexport { DialogRoot as Dialog, DialogTrigger } from 'reka-ui'\n\n<!-- DialogContent.vue -->\n<script setup lang=\"ts\">\nimport type { DialogContentEmits, DialogContentProps } from 'reka-ui'\nimport { Cross2Icon } from '@radix-icons/vue'\nimport { DialogClose, DialogContent, DialogOverlay, DialogPortal, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<DialogContentProps>()\nconst emits = defineEmits<DialogContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogContent v-bind=\"forwarded\">\n      <slot />\n\n      <DialogClose>\n        <Cross2Icon />\n        <span class=\"sr-only\">Close</span>\n      </DialogClose>\n    </DialogContent>\n  </DialogPortal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu with Client-Side Routing Integration in Vue\nDESCRIPTION: Demonstrates how to integrate Vue Router's RouterLink with NavigationMenuLink by using the asChild property or as prop to maintain accessibility and keyboard control.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { NavigationMenuItem, NavigationMenuList, NavigationMenuRoot } from 'reka-ui'\n\n// RouterLink should be injected by default if using `vue-router`\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuLink as-child>\n          <RouterLink to=\"/\">\n            Home\n          </RouterLink>\n          <NavigationMenuLink />\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuLink\n          :as=\"RouterLink\"\n          to=\"/about\"\n        >\n          About\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Currency Input with Vue NumberField\nDESCRIPTION: Provides an example of configuring `NumberFieldRoot` for currency input using the `format-options` prop. It demonstrates setting the `style` to 'currency', specifying the `currency` code (e.g., 'EUR'), and optionally controlling display formats like `currencyDisplay` and `currencySign`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/number-field.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NumberFieldRoot\n    :default-value=\"5\"\n    :format-options=\"{\n      style: 'currency',\n      currency: 'EUR',\n      currencyDisplay: 'code',\n      currencySign: 'accounting',\n    }\"\n  >\n    …\n  </NumberFieldRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Integrating Checkboxes - Reka UI Tree - Vue\nDESCRIPTION: This example shows how to add custom checkbox behavior to tree items. It uses the `multiple` and `propagate-select` props on `TreeRoot`. Inside the `TreeItem` slot, it uses `handleSelect`, `isSelected`, and `isIndeterminate` to manage checkbox state and explicitly calls `event.preventDefault()` on `select` and `toggle` events to take control of selection logic via a custom button.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TreeItem, TreeRoot } from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <TreeRoot\n    v-slot=\"{ flattenItems }\"\n    :items\n    multiple\n    propagate-select\n  >\n    <TreeItem\n      v-for=\"item in flattenItems\"\n      :key=\"item._id\"\n      v-bind=\"item.bind\"\n      v-slot=\"{ handleSelect, isSelected, isIndeterminate }\"\n      @select=\"(event) => {\n        if (event.detail.originalEvent.type === 'click')\n          event.preventDefault()\n      }\"\n      @toggle=\"(event) => {\n        if (event.detail.originalEvent.type === 'keydown')\n          event.preventDefault()\n      }\"\n    >\n      <Icon\n        v-if=\"item.hasChildren\"\n        icon=\"radix-icons:chevron-down\"\n      />\n\n      <button\n        tabindex=\"-1\"\n        @click.stop\n        @change=\"handleSelect\"\n      >\n        <Icon\n          v-if=\"isSelected\"\n          icon=\"radix-icons:check\"\n        />\n        <Icon\n          v-else-if=\"isIndeterminate\"\n          icon=\"radix-icons:dash\"\n        />\n        <Icon\n          v-else\n          icon=\"radix-icons:box\"\n        />\n      </button>\n\n      <div class=\"pl-2\">\n        {{ item.value.title }}\n      </div>\n    </TreeItem>\n  </TreeRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage Input with Vue NumberField\nDESCRIPTION: Illustrates setting up the `NumberFieldRoot` component to handle percentage values. This involves setting the `format-options.style` prop to 'percent' and adjusting the `step` prop (e.g., to 0.01) for appropriate increments/decrements in percentage mode.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/number-field.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NumberFieldRoot\n    :default-value=\"0.05\"\n    :step=\"0.01\"\n    :format-options=\"{\n      style: 'percent',\n    }\"\n  >\n    …\n  </NumberFieldRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props in Vue (JavaScript)\nDESCRIPTION: This snippet defines the properties (props) accepted by a Vue UI component. The 'props' include 'as' to determine the rendered element or component, 'asChild' for rendering the child element with merged props/behavior, 'disabled' to prevent user interaction, and 'textValue' to specify custom text for typeahead behavior. Each prop has a defined type, optional required status, and default values where applicable. Dependencies include Vue's props handling mechanism and an understanding of composition patterns.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarItem.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'textValue',\n    'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\\nUse this when the content is complex, or you have non-textual content inside.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Menu Items in Reka UI Menubar (Vue/CSS)\nDESCRIPTION: Demonstrates how to disable a specific menu item using the `disabled` prop on the `MenubarItem` component in Vue. Corresponding CSS shows how to style the disabled item using the `data-disabled` attribute selector.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem\n            class=\"MenubarItem\"\n            disabled\n          >\n            …\n          </MenubarItem>\n          <MenubarItem class=\"MenubarItem\">\n            …\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarItem[data-disabled] {\n  color: gainsboro;\n}\n```\n\n----------------------------------------\n\nTITLE: Slider Component Implementation - Vue\nDESCRIPTION: Implements a custom slider component in Vue, utilizing `SliderRoot`, `SliderTrack`, `SliderRange`, and `SliderThumb` from `reka-ui`. It forwards props and emits events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n <!-- Slider.vue -->\n<script setup lang=\"ts\">\nimport type { SliderRootEmits, SliderRootProps } from 'reka-ui'\nimport { SlideRoot, SliderRange, SliderThumb, SliderTrack, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<SliderRootProps>()\nconst emits = defineEmits<SliderRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <SliderRoot v-slot=\"{ modelValue }\" v-bind=\"forward\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n\n    <SliderThumb\n      v-for=\"(_, i) in modelValue\"\n      :key=\"i\"\n    />\n  </SliderRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pagination Components in Vue\nDESCRIPTION: This snippet imports and sets up the fundamental pagination components from the 'reka-ui' library within a Vue.js component's setup section. It imports components like PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, and PaginationRoot. These components are essential for rendering the pagination structure, including the root container, list of pages, page items, ellipsis, and navigation buttons.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pagination.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, PaginationRoot } from 'reka-ui'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList v-slot=\"{ items }\">\n      <PaginationFirst />\n      <PaginationPrev />\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem\n          v-if=\"page.type === 'page'\"\n          :key=\"index\"\n        />\n        <PaginationEllipsis\n          v-else\n          :key=\"page.type\"\n          :index=\"index\"\n        >\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n      <PaginationNext />\n      <PaginationLast />\n    </PaginationList>\n  </PaginationRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollArea Anatomy in Vue\nDESCRIPTION: Demonstrates the basic structure of the reka-ui ScrollArea component in a Vue template. It imports necessary sub-components (Root, Viewport, Scrollbar, Thumb, Corner) and arranges them within the template to create a scrollable area with both vertical and horizontal custom scrollbars.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/scroll-area.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from 'reka-ui'\n</script>\n\n<template>\n  <ScrollAreaRoot>\n    <ScrollAreaViewport />\n    <ScrollAreaScrollbar orientation=\"horizontal\">\n      <ScrollAreaThumb />\n    </ScrollAreaScrollbar>\n    <ScrollAreaScrollbar orientation=\"vertical\">\n      <ScrollAreaThumb />\n    </ScrollAreaScrollbar>\n    <ScrollAreaCorner />\n  </ScrollAreaRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Rendering Props for Vue Component in JavaScript\nDESCRIPTION: This snippet defines a JavaScript array used as Vue component props data. It includes metadata for two props: 'as', which determines the tag or component to render, defaulting to 'div', and 'asChild', a boolean that overrides the default element with the child component's element for composition patterns. The snippet supplies descriptions in HTML format, as well as prop types and requirement status.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToastTitle.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Animating Accordion Content Size with CSS Variables\nDESCRIPTION: Demonstrates the use of '--reka-accordion-content-width' and '--reka-accordion-content-height' CSS variables to animate size transitions when AccordionContent opens or closes, with associated keyframes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/accordion.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.AccordionContent {\n  overflow: hidden;\n}\n.AccordionContent[data-state=\"open\"] {\n  animation: slideDown 300ms ease-out;\n}\n.AccordionContent[data-state=\"closed\"] {\n  animation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--reka-accordion-content-height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--reka-accordion-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Combobox Items with Custom Styles in Vue\nDESCRIPTION: This Vue and TypeScript snippet demonstrates rendering a combobox with disabled items using Reka-UI components. The item is marked with the disabled attribute, and can be styled using CSS targeting the data-disabled attribute. Dependencies include Reka-UI, Vue, and a CSS stylesheet. No props are configured; the ComboboxItem component is rendered in a disabled state, which impacts interaction and appearance.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ComboboxContent,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxPortal,\n  ComboboxRoot,\n} from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          class=\"ComboboxItem\"\n          disabled\n        >\n          …\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Origin-aware Animations to Dropdown (CSS)\nDESCRIPTION: This CSS snippet shows how to add an animation to the dropdown menu content, origin-aware using CSS custom property `--reka-dropdown-menu-content-transform-origin`.  It defines a `transform-origin` and applies a `scaleIn` animation. This results in the dropdown menu appearing with a scaling animation. Dependencies: Reka-ui library components and the preceding Vue example.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuContent {\n  transform-origin: var(--reka-dropdown-menu-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Teleport Component Props Documentation Table in Vue\nDESCRIPTION: This snippet renders a PropsTable component that displays documentation for Vue Teleport component props. The table includes information about defer, disabled, forceMount, and to props with their descriptions, types, and required status.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogPortal.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision-Aware Animations with CSS\nDESCRIPTION: Provides CSS rules to create animations for the `DropdownMenuContent` that respond to its position relative to the trigger. It utilizes `data-side` attributes (e.g., `data-side=\"top\"`, `data-side=\"bottom\"`) updated by `reka-ui` at runtime to apply different keyframe animations (`slideUp`, `slideDown`) for a direction-aware visual effect.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.DropdownMenuContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.DropdownMenuContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Accordion Component Structure\nDESCRIPTION: Defines the composition of the Accordion by importing and assembling core parts: AccordionRoot, AccordionItem, AccordionHeader, AccordionTrigger, and AccordionContent. Provides a basic template for using these components in Vue single-file component syntax.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/accordion.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem>\n      <AccordionHeader>\n        <AccordionTrigger />\n      </AccordionHeader>\n      <AccordionContent />\n    </AccordionItem>\n  </AccordionRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Editable\nDESCRIPTION: This snippet demonstrates how to import all parts of the 'Editable' component from 'reka-ui' and assemble them within a Vue template. It forms the core structure of the editable input interface, integrating root, area, triggers, and input elements to enable inline editing.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/editable.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  EditableArea,\n  EditableCancelTrigger,\n  EditableEditTrigger,\n  EditableInput,\n  EditablePreview,\n  EditableRoot,\n  EditableSubmitTrigger\n} from 'reka-ui'\n</script>\n\n<template>\n  <EditableRoot>\n    <EditableArea>\n      <EditablePreview />\n      <EditableInput />\n    </EditableArea>\n    <EditableEditTrigger />\n    <EditableSubmitTrigger />\n    <EditableCancelTrigger />\n  </EditableRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props with PropsTable in Vue\nDESCRIPTION: Renders a PropsTable component that displays documentation for two component properties: 'as' for specifying the rendered element type, and 'asChild' for component composition functionality. The table includes prop names, descriptions, types, required status, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SliderThumb.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Configure Tooltip Globally\nDESCRIPTION: This snippet shows how to use `TooltipProvider` to control the global settings of the tooltip, specifically `delay-duration` and `skip-delay-duration`.  Setting these props on the `TooltipProvider` applies the delays to all tooltips within the provider.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipProvider\n    :delay-duration=\"800\"\n    :skip-delay-duration=\"500\"\n  >\n    <TooltipRoot>\n      <TooltipTrigger>…</TooltipTrigger>\n      <TooltipContent>…</TooltipContent>\n    </TooltipRoot>\n    <TooltipRoot>\n      <TooltipTrigger>…</TooltipTrigger>\n      <TooltipContent>…</TooltipContent>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SSR Splitter with Unique IDs in Vue\nDESCRIPTION: This example highlights the importance of providing unique IDs for Splitter components when using server-side rendering (SSR) frameworks like Nuxt, especially for Vue versions prior to 3.4. Manually adding `id` attributes to each component is necessary for proper SSR functionality.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SplitterGroup id=\"group-1\">\n    <SplitterPanel id=\"group-1-panel-1\">\n      …\n    </SplitterPanel>\n    <SplitterResizeHandle id=\"group-1-resize-1\">\n      <Icon icon=\"radix-icons-drag-handle-dots-2\" />\n    </SplitterResizeHandle>\n    <SplitterPanel id=\"group-1-panel-2\">\n      …\n    </SplitterPanel>\n  </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Splitter Handle in Vue\nDESCRIPTION: This example demonstrates customizing the SplitterResizeHandle by using a slot. In this case, an Icon component is used within the handle to provide a custom visual.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n   <SplitterGroup>\n     <SplitterPanel>\n       …\n     </SplitterPanel>\n     <SplitterResizeHandle>\n       <Icon icon=\"radix-icons-drag-handle-dots-2\" />\n     </SplitterResizeHandle>\n     <SplitterPanel>\n       …\n     </SplitterPanel>\n   </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Interaction Pattern for Accordion Accessibility\nDESCRIPTION: Provides a table detailing keyboard controls such as Space, Enter, Arrow keys, Home, and End, which enable full keyboard navigation according to the WAI-ARIA design pattern for Accordion.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/accordion.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\"Space\"],\n  \"description\": \"When focus is on an <code>AccordionTrigger</code> of a collapsed section, expands the section.\"\n},\n{\n  \"keys\": [\"Enter\"],\n  \"description\": \"When focus is on an <code>AccordionTrigger</code> of a collapsed section, expands the section.\"\n},\n{\n  \"keys\": [\"Tab\"],\n  \"description\": \"Moves focus to the next focusable element.\"\n},\n{\n  \"keys\": [\"Shift + Tab\"],\n  \"description\": \"Moves focus to the previous focusable element.\"\n},\n{\n  \"keys\": [\"ArrowDown\"],\n  \"description\": \"Moves focus to the next <code>AccordionTrigger</code> when <code>orientation</code> is <code>vertical</code>.\"\n},\n{\n  \"keys\": [\"ArrowUp\"],\n  \"description\": \"Moves focus to the previous <code>AccordionTrigger</code> when <code>orientation</code> is <code>vertical</code>.\"\n},\n{\n  \"keys\": [\"ArrowRight\"],\n  \"description\": \"Moves focus to the next <code>AccordionTrigger</code> when <code>orientation</code> is <code>horizontal</code>.\"\n},\n{\n  \"keys\": [\"ArrowLeft\"],\n  \"description\": \"Moves focus to the previous <code>AccordionTrigger</code> when <code>orientation</code> is <code>horizontal</code>.\"\n},\n{\n  \"keys\": [\"Home\"],\n  \"description\": \"When focus is on an <code>AccordionTrigger</code>, moves focus to the start <code>AccordionTrigger</code>.\"\n},\n{\n  \"keys\": [\"End\"],\n  \"description\": \"When focus is on an <code>AccordionTrigger</code>, moves focus to the last <code>AccordionTrigger</code>.\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Menu Props in Vue Component (JavaScript/JSON)\nDESCRIPTION: Defines component properties that configure the dropdown menu's initial or controlled open state, reading direction, modality, and accessibility features. The props include 'defaultOpen' for initial open state without control, 'dir' to set text directionality inheriting from global config or defaulting to LTR, 'modal' to toggle outside interaction blocking with a default true, and 'open' for controlled open state with v-model binding. This snippet forms the basis for component behavior customization.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuRoot.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable.</p>\\n<p>If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'modal',\n    'description': '<p>The modality of the dropdown menu.</p>\\n<p>When set to <code>true</code>, interaction with outside elements will be disabled and only menu content will be visible to screen readers.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: ContextMenu with Disabled Items - Vue\nDESCRIPTION: This snippet demonstrates how to add special styles to disabled ContextMenuItem components using the `data-disabled` attribute in a Vue component. It imports necessary Reka-UI components like ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, and ContextMenuTrigger.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem\n          class=\"ContextMenuItem\"\n          disabled\n        >\n          …\n        </ContextMenuItem>\n        <ContextMenuItem class=\"ContextMenuItem\">\n          …\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: ContextMenu with Separators - Vue\nDESCRIPTION: This Vue component demonstrates how to include separators between ContextMenuItem components within a ContextMenu. It imports necessary Reka-UI components, including ContextMenuSeparator.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Emits for Documentation\nDESCRIPTION: Defines the custom events (emits) exposed by a Reka UI component using a structured JSON array. Each object in the array represents a single event, detailing its name, description, and the type of arguments it passes. This data is consumed by an `EmitsTable` component for documentation display.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarSubContent.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'entryFocus',\n    'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'openAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on open.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Origin-Aware Animation to HoverCardContent with CSS and Vue\nDESCRIPTION: This example details animation techniques to animate the HoverCardContent from its computed transform origin. The Vue snippet shows the basic composition of HoverCardRoot, HoverCardTrigger, and HoverCardContent with a CSS class. The CSS snippet applies the '--reka-hover-card-content-transform-origin' custom property to 'transform-origin' and defines a 'scaleIn' keyframes animation that scales the content from 0 to full size with opacity transition over 0.5 seconds, using an ease-out timing function.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/hover-card.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'\\n</script>\\n\\n<template>\\n  <HoverCardRoot>\\n    <HoverCardTrigger>…</HoverCardTrigger>\\n    <HoverCardContent class=\"HoverCardContent\">\\n      …\\n    </HoverCardContent>\\n  </HoverCardRoot>\\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\\n.HoverCardContent {\\n  transform-origin: var(--reka-hover-card-content-transform-origin);\\n  animation: scaleIn 0.5s ease-out;\\n}\\n\\n@keyframes scaleIn {\\n  from {\\n    opacity: 0;\\n    transform: scale(0);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data for PropsTable\nDESCRIPTION: This JavaScript array defines properties for a Reka UI component. It includes the 'as' prop to specify the rendering element (defaulting to 'span') and the 'asChild' prop for enabling composition by merging props with a child element. This data structure is passed to a PropsTable component for display.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SliderTrack.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Changing Element Type with asChild in Reka UI (Vue)\nDESCRIPTION: Demonstrates using the `asChild` prop on the `TooltipTrigger` component to render an anchor tag (`<a>`) instead of the default button, while inheriting the trigger's behavior. Requires importing `TooltipRoot`, `TooltipTrigger`, and `TooltipPortal` from `reka-ui`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/composition.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TooltipRoot, TooltipTrigger, TooltipPortal } from \"reka-ui\";\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger asChild>\n      <a href=\"https://reka-ui.com/\">Reka UI</a>\n    </TooltipTrigger>\n    <TooltipPortal>…</TooltipPortal>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Composing Select with Custom Scrollbar using ScrollArea (Reka-UI, Vue)\nDESCRIPTION: Integrates a custom scrollbar into the select dropdown by composing it with Reka-UI's ScrollArea primitives. The ScrollAreaRoot, ScrollAreaViewport, ScrollAreaScrollbar, and ScrollAreaThumb are used to replace the native scrollbar for better user experience. This example requires Reka-UI with ScrollArea components and uses custom CSS for styling.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  ScrollAreaRoot,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaViewport,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <ScrollAreaRoot\n          class=\"ScrollAreaRoot\"\n          type=\"auto\"\n        >\n          <SelectViewport as-child>\n            <ScrollAreaViewport class=\"ScrollAreaViewport\">\n              <StyledItem>…</StyledItem> <StyledItem>…</StyledItem>\n              <StyledItem>…</StyledItem>\n            </ScrollAreaViewport>\n          </SelectViewport>\n          <ScrollAreaScrollbar\n            class=\"ScrollAreaScrollbar\"\n            orientation=\"vertical\"\n          >\n            <ScrollAreaThumb class=\"ScrollAreaThumb\" />\n          </ScrollAreaScrollbar>\n        </ScrollAreaRoot>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Props in Vue\nDESCRIPTION: This Vue.js code snippet demonstrates the usage of the `useForwardProps` composable. It imports the composable, defines component props, and then uses `useForwardProps` to forward props to another component. The primary functionality is to forward component props without boolean casting. The expected input is component props and the output is a forwarded prop object. This is crucial when building wrappers around other components to preserve the original data types.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-forward-props.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForwardProps } from 'reka-ui'\n\nconst props = defineProps<CompEmitProps>()\nconst forwarded = useForwardProps(props)\n</script>\n\n<template>\n  <Comp v-bind=\"forwarded\">\n    ...\n  </Comp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabs Component - Vue\nDESCRIPTION: This code snippet demonstrates how to import and use the Tabs component from the 'reka-ui' library in a Vue component. It showcases the basic structure of the Tabs component, including TabsRoot, TabsList, TabsIndicator, TabsTrigger, and TabsContent. This sets up a basic tab structure.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tabs.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TabsContent, TabsIndicator, TabsList, TabsRoot, TabsTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TabsRoot>\n    <TabsList>\n      <TabsIndicator />\n      <TabsTrigger />\n    </TabsList>\n    <TabsContent />\n  </TabsRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in Listbox - Vue\nDESCRIPTION: Shows how to configure the `ListboxRoot` component to allow multiple selections. This is achieved by providing an array to `v-model` and adding the `multiple` boolean prop. The example initializes the selection with an array of two objects. Requires importing `ListboxRoot` from `reka-ui` and `ref` from `vue`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/listbox.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ListboxRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref([people[0], people[1]])\n</script>\n\n<template>\n  <ListboxRoot\n    v-model=\"selectedPeople\"\n    multiple\n  >\n    ...\n  </ListboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dropdown Menu for Animation (Vue)\nDESCRIPTION: This Vue.js snippet provides the setup for the dropdown menu component needed to apply the animation described in the next CSS snippet. It shows the structure of a basic dropdown with the content container to be animated. Dependencies: Reka-ui library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue PropsTable Component with Component Properties\nDESCRIPTION: A Vue component that renders a table of properties for documentation. It displays property names, descriptions, types, requirements, and default values for a UI component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverAnchor.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using useForwardExpose in Vue (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `useForwardExpose` composable in a Vue component using TypeScript. It imports the composable, initializes a ref, and uses the `forwardRef` function to expose a specific div element as the template ref's element. This allows access to the DOM element via `$el` when the component has a non-single root node.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-forward-expose.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForwardExpose } from 'reka-ui'\n\nconst selectedElementId = ref(1)\nconst { forwardRef } = useForwardExpose()\n</script>\n\n<template>\n  <span>\n    <!-- We want to expose div as the template ref's element -->\n    <div :ref=\"forwardRef\">\n      ...\n    </div>\n  </span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table with data in HTML\nDESCRIPTION: This HTML snippet uses the `PropsTable` component and passes it data to render a table of properties. The `:data` prop receives an array of objects, each representing a property with attributes like name, description, type, required status, and default value. This data defines the information displayed in the props table.  The provided data includes descriptions using HTML formatting (p tags and a link).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TimeFieldInput.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'part',\n    'description': '<p>The part of the date to render</p>\\n',\n    'type': '\\'day\\' | \\'month\\' | \\'year\\' | \\'hour\\' | \\'minute\\' | \\'second\\' | \\'dayPeriod\\' | \\'literal\\' | \\'timeZoneName\\'',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: ContextMenu with Complex Items - Vue\nDESCRIPTION: This Vue component demonstrates how to add complex items with decorative elements (images in this case) to ContextMenuItem components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>\n          <img src=\"…\">\n          Adolfo Hess\n        </ContextMenuItem>\n        <ContextMenuItem>\n          <img src=\"…\">\n          Miyah Myles\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API reference for ToolbarToggleGroup component\nDESCRIPTION: Defines a set of toggle items functioning as two-state buttons that can be individually toggled. Supports vertical and horizontal orientation via data attributes and links to meta documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-orientation]',\n      values: ['vertical', 'horizontal'],\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js Component Props Using JSON in Template\nDESCRIPTION: This snippet declares the component's input properties (props) in a JSON array assigned to a <PropsTable> component. It specifies three props: 'as' which controls the rendered tag or component with an optional default of 'div'; 'asChild' which merges child's props and behavior to change the rendered element dynamically; and 'modelValue' which represents the selected item's value. Each prop includes detailed HTML-formatted descriptions, types, and requirement indicators. It is useful for generating prop tables or dynamic documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRadioGroup.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The value of the selected item in the group.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Vue Teleport Component Props (JavaScript/HTML)\nDESCRIPTION: Defines a data-driven props table for a Vue component that wraps the native Teleport functionality. Props include 'defer' to postpone teleport mounting, 'disabled' to render inline, 'forceMount' for controlling mount timing (helpful with animations), and 'to' specifying the teleport target. Descriptions incorporate HTML for rich formatting and links to Vue official guide references. The snippet requires Vue 3.5.0 or later for some props like 'defer'. Inputs are prop names, types, and requirement flags; outputs are structured data used by a PropsTable component to render documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarPortal.md#_snippet_0\n\nLANGUAGE: JavaScript/HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table for Reka UI in Vue\nDESCRIPTION: This Vue snippet utilizes a `PropsTable` component to display properties of a Reka UI component. It takes an array of objects, where each object describes a property, including name, description (potentially with HTML), type, whether it's required, and a default value. It merges the props and behavior of any components passed as children. The output is an HTML table displaying the properties and their details.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarHeadCell.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'th\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Menubar Structure\nDESCRIPTION: Defines the main structure of the Menubar component in Vue using setup script with TypeScript, importing all subcomponents necessary to construct a menubar with nested submenus. The template describes the hierarchical arrangement of `MenubarRoot`, `MenubarMenu`, `MenubarTrigger`, `MenubarContent`, and nested submenu components, illustrating a typical Menubar layout with submenu support.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  MenubarArrow,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from './'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger />\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarLabel />\n          <MenubarItem />\n\n          <MenubarGroup>\n            <MenubarItem />\n          </MenubarGroup>\n\n          <MenubarCheckboxItem>\n            <MenubarItemIndicator />\n          </MenubarCheckboxItem>\n\n          <MenubarRadioGroup>\n            <MenubarRadioItem>\n              <MenubarItemIndicator />\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n\n          <MenubarSub>\n            <MenubarSubTrigger />\n            <MenubarPortal>\n              <MenubarSubContent />\n            </MenubarPortal>\n          </MenubarSub>\n\n          <MenubarSeparator />\n          <MenubarArrow />\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Complex Items (Vue)\nDESCRIPTION: This Vue.js snippet shows how to include additional decorative elements, such as images, within the dropdown menu items. It provides a simple example by using an image tag inside of a `DropdownMenuItem`. The snippet depends on Reka-ui library components and assumes images are available to be displayed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>\n          <img src=\"…\">\n          Adolfo Hess\n        </DropdownMenuItem>\n        <DropdownMenuItem>\n          <img src=\"…\">\n          Miyah Myles\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining PropsTable Data for Reka UI Component in Vue\nDESCRIPTION: This snippet defines the 'data' prop passed to the PropsTable component in Vue, specifying an array of prop definitions. Each prop entry includes the prop name, detailed HTML-formatted description, type, whether it is required, and its default value where applicable. It is used to document or configure component props dynamically within the Reka UI framework.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ScrollAreaViewport.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'nonce',\n    'description': '<p>Will add <code>nonce</code> attribute to the style tag which can be used by Content Security Policy. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code>.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Dropdown Menu Event Emitters\nDESCRIPTION: Defines the events emitted by the dropdown menu component, specifically the update:open event which is triggered when the open state changes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSub.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the submenu changes.</p>\\n',\n    'type': '[payload: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Component Events Configuration\nDESCRIPTION: Defines the events emitted by the selectable item component, specifically the 'select' event that fires when a user interacts with the item.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRadioItem.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'select',\n    'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\\n',\n    'type': '[event: Event]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Events Documentation with EmitsTable in Vue\nDESCRIPTION: Uses the EmitsTable component to document the events emitted by a UI component, including the event name, description, and parameter types. The documentation covers the select event which is triggered when a user interacts with the component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuRadioItem.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'select',\n    'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\\n',\n    'type': '[event: Event]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ConfigProvider Props in Vue\nDESCRIPTION: Illustrates how to configure the `ConfigProvider` using props. Specifically, it sets the global text direction to right-to-left (`dir=\"rtl\"`) and disables padding/margin adjustments for the scroll body when locked (`:scroll-body=\"false\"`). This allows customizing global behaviors for primitives and layout handling.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/config-provider.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'reka-ui'\n</script>\n\n<template>\n  <ConfigProvider\n    dir=\"rtl\"\n    :scroll-body=\"false\"\n  >\n    <slot />\n  </ConfigProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Prop Documentation Data - JavaScript\nDESCRIPTION: This JavaScript array literal provides the structured data required by the `<PropsTable>` component to render comprehensive documentation for specific component props. Each object within the array represents a single prop and includes properties like its name, a detailed HTML description, data type, required status, and default value if applicable. This data is intended to be directly bound to the `:data` attribute of the `<PropsTable>` component within a Vue template.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarGridHead.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': \"'thead'\"\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props for Positioning and Behavior Control\nDESCRIPTION: This snippet declares a list of props for a Vue component that control alignment, positioning, collision boundaries, rendering elements, and behavioral flags. Each prop includes its name, a detailed description supporting HTML markup, type definitions, requirements, and default values where applicable. This structure enables robust configuration of component display logic and interaction with the DOM, leveraging types such as strings, numbers, booleans, and complex objects. It requires Vue's props system and an environment supporting typed declarations for effective usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectContent.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'align',\n    'description': '<p>The preferred alignment against the trigger.\\nMay change when collisions occur.</p>\\n',\n    'type': '\\'start\\' | \\'center\\' | \\'end\\'',\n    'required': false\n  },\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'bodyLock',\n    'description': '<p>The document.body will be lock, and scrolling will be disabled.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'position',\n    'description': '<p>The positioning mode to use</p>\\n<p><code>item-aligned (default)</code> - behaves similarly to a native MacOS menu by positioning content relative to the active item. &lt;br&gt;\\n<code>popper</code> - positions content in the same way as our other primitives, for example <code>Popover</code> or <code>DropdownMenu</code>.</p>\\n',\n    'type': '\\'popper\\' | \\'item-aligned\\'',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'side',\n    'description': '<p>The preferred side of the trigger to render against when open.\\nWill be reversed when collisions occur and avoidCollisions\\nis enabled.</p>\\n',\n    'type': '\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\'',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with First/Last Buttons in Vue\nDESCRIPTION: This Vue.js code implements pagination functionality with 'first' and 'last' page navigation buttons, using components from the 'reka-ui' library. It imports and integrates `PaginationFirst` and `PaginationLast` along with `PaginationList`, `PaginationListItem`, and `PaginationRoot`. This allows users to jump to the beginning or the end of the available pages directly.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pagination.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationRoot } from 'reka-ui'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList>\n      <PaginationFirst />\n      ...\n      <PaginationLast />\n    </PaginationList>\n  </PaginationRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of Reka-UI Label (Vue)\nDESCRIPTION: This snippet demonstrates how to import the `Label` component from the `reka-ui` library using Vue 3's `<script setup>` and how to render it in the template. It shows the basic structure required to use the component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/label.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Label } from 'reka-ui'\n</script>\n\n<template>\n  <Label />\n</template>\n```\n\n----------------------------------------\n\nTITLE: PropsTable Component Usage in Vue for Button Props Documentation\nDESCRIPTION: A Vue component that displays a table of props for the Button component. The table shows prop names, descriptions, types, required status, and default values for the 'as', 'asChild', and 'disabled' props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NumberFieldDecrement.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Origin-Aware Animations - Vue\nDESCRIPTION: This Vue component sets up a basic ContextMenu structure for implementing origin-aware animations.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Namespaced Components from Reka UI in Vue with TypeScript\nDESCRIPTION: This snippet shows how to import specific components, such as Dialog and DropdownMenu, from the reka-ui/namespaced module using TypeScript in the <script setup> block of a Vue component. The required dependency is 'reka-ui', and the code assumes the project is configured for TypeScript and Vue 3 single-file components. The main parameters are the component names to import; this approach simplifies management of dependencies by grouping them under one import.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/namespaced-components.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Dialog, DropdownMenu } from 'reka-ui/namespaced'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Anatomy of Pin Input in Vue\nDESCRIPTION: Demonstrates the fundamental structure for using the Reka UI Pin Input. It involves importing the `PinInputInput` and `PinInputRoot` components from 'reka-ui' and nesting the input(s) within the root element in the template.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pin-input.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { PinInputInput, PinInputRoot } from 'reka-ui'\n</script>\n\n<template>\n  <PinInputRoot>\n    <PinInputInput />\n  </PinInputRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Property Documentation Data in JavaScript\nDESCRIPTION: This JavaScript array literal serves as the data source for the PropsTable component. Each object within the array defines a component property ('as' and 'asChild') including its name, description (using HTML markup), data type, requirement status, and default value. This structure facilitates the dynamic generation of property documentation tables.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ScrollAreaCorner.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[{\n  'name': 'as',\n  'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n  'type': 'AsTag | Component',\n  'required': false,\n  'default': '\\'div\\''\n}, {\n  'name': 'asChild',\n  'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n  'type': 'boolean',\n  'required': false\n}]\n```\n\n----------------------------------------\n\nTITLE: Rendering Stepper Slots Table with Vue SlotsTable Component - Vue\nDESCRIPTION: This snippet uses the <SlotsTable> Vue component to display documentation for slots used by the stepper component. It lists the slot's name, description, and expected type, informing developers about available slot-based extension points. It requires the SlotsTable utility from the documentation component suite.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/StepperItem.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'state',\n    'description': '<p>The current state of the stepper item</p>\\n',\n    'type': '\\'active\\' | \\'completed\\' | \\'inactive\\''\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Duration - Vue\nDESCRIPTION: This code snippet shows how to customize the duration of a ToastRoot component.  The `duration` prop is used to set the toast's display time in milliseconds. This overrides the default duration set in the ToastProvider.  In this example, the toast will be displayed for 3000 milliseconds (3 seconds).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ToastRoot :duration=\"3000\">\n    <ToastDescription>Saved!</ToastDescription>\n  </ToastRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Exporting Select Components (TypeScript)\nDESCRIPTION: This TypeScript snippet serves as an index file, exporting the main Select and SelectItem Vue components from their respective files. This makes them easily importable under a single module path.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// your-select.ts\nexport { default as Select } from 'Select.vue'\nexport { default as SelectItem } from 'SelectItem.vue'\n```\n\n----------------------------------------\n\nTITLE: Vue Import and Usage of Progress ProgressIndicator and ProgressRoot\nDESCRIPTION: This code demonstrates how to import the Progress components from reka-ui and assemble them into a functional progress indicator using Vue's script setup syntax. It shows the nesting of ProgressIndicator inside ProgressRoot to create the complete progress bar component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/progress.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ProgressIndicator, ProgressRoot } from 'reka-ui'\n</script>\n\n<template>\n  <ProgressRoot>\n    <ProgressIndicator />\n  </ProgressRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: TagsInput Component Documentation with Props Table in Vue\nDESCRIPTION: A Vue component documentation utilizing PropsTable to display TagsInput component properties, including behavior controls, styling options, and value handling settings.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TagsInputRoot.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'addOnBlur',\n    'description': '<p>When <code>true</code> allow adding tags blur input</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'addOnPaste',\n    'description': '<p>When <code>true</code>, allow adding tags on paste. Work in conjunction with delimiter prop.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'addOnTab',\n    'description': '<p>When <code>true</code> allow adding tags on tab keydown</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'convertValue',\n    'description': '<p>Convert the input value to the desired type. Mandatory when using objects as values and using <code>TagsInputInput</code></p>\\n',\n    'type': '((value: string) => AcceptableInputValue)',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the tags that should be added. Use when you do not need to control the state of the tags input</p>\\n',\n    'type': 'AcceptableInputValue[]',\n    'required': false,\n    'default': '[]'\n  },\n  {\n    'name': 'delimiter',\n    'description': '<p>The character or regular expression to trigger the addition of a new tag. Also used to split tags for <code>@paste</code> event</p>\\n',\n    'type': 'string | RegExp',\n    'required': false,\n    'default': '\\',\\''\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the tags input.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'displayValue',\n    'description': '<p>Display the value of the tag. Useful when you want to apply modifications to the value like adding a suffix or when using object as values</p>\\n',\n    'type': '((value: AcceptableInputValue) => string)',\n    'required': false,\n    'default': 'value.toString()'\n  },\n  {\n    'name': 'duplicate',\n    'description': '<p>When <code>true</code>, allow duplicated tags.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'id',\n    'description': '',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'max',\n    'description': '<p>Maximum number of tags.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '0'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the tags input. Can be bind as <code>v-model</code>.</p>\\n',\n    'type': 'AcceptableInputValue[] | null',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using HoverCardRoot with Zero Open Delay in Vue\nDESCRIPTION: This Vue snippet illustrates configuring the HoverCardRoot component with the 'openDelay' prop set to 0 to make the hover card open instantly upon hovering the trigger element. It shows the minimal example with a HoverCardTrigger and HoverCardContent as children. This enables users to preview the content behind the link without any delay.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/hover-card.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport {\\n  HoverCardArrow,\\n  HoverCardContent,\\n  HoverCardPortal,\\n  HoverCardRoot,\\n  HoverCardTrigger,\\n} from 'reka-ui'\\n</script>\\n\\n<template>\\n  <HoverCardRoot :open-delay=\"0\">\\n    <HoverCardTrigger>…</HoverCardTrigger>\\n    <HoverCardContent>…</HoverCardContent>\\n  </HoverCardRoot>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfigProvider in Vue\nDESCRIPTION: Demonstrates the basic import and usage of the `ConfigProvider` component in a Vue application. It shows how to wrap the main application content (`<slot />`) to make the provider's configurations available globally. This is the standard way to enable the provider's features.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/config-provider.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'reka-ui'\n</script>\n\n<template>\n  <ConfigProvider>\n    <slot />\n  </ConfigProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table in Vue\nDESCRIPTION: This snippet renders a PropsTable component and passes data to it. The data array contains objects, each representing a prop with its name, description, type, required status, and default value. The `as` prop allows specifying the HTML element or component to render as, and `asChild` merges props and behavior of child components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectItemIndicator.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props with PropsTable in Vue\nDESCRIPTION: Utilizes the `<PropsTable>` Vue component to display documentation for component properties. The `data` prop accepts an array of objects, each describing a prop's name, description (HTML content), type, requirement status, and default value. This specific instance defines props like `as`, `asChild`, `autoFocus`, `disabled`, `displayValue`, and `modelValue`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxInput.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'input\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'autoFocus',\n    'description': '<p>Focus on element when mounted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'displayValue',\n    'description': '<p>The display value of input for selected item. Does not work with <code>multiple</code>.</p>\\n',\n    'type': '((val: any) => string)',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the filter. Can be binded with with v-model.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Toast Implementation - Vue\nDESCRIPTION: This code snippet shows how to create a custom Toast component by abstracting the primitive parts from `reka-ui`. This allows developers to create a more specific and reusable Toast component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n// your-toast.vue\n<script setup lang=\"ts\">\nimport { ToastAction, ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'reka-ui'\n\ndefineProps<{ \n  title: string\n  content: string\n}>()\n</script>\n\n<template>\n  <ToastRoot>\n    <ToastTitle v-if=\"title\">\n      {{ title }}\n    </ToastTitle>\n    <ToastDescription v-if=\"content\">\n      {{ content }}\n    </ToastDescription>\n    <ToastAction\n      as-child\n      alt-text=\"toast\"\n    >\n      <slot />\n    </ToastAction>\n    <ToastClose aria-label=\"Close\">\n      <span aria-hidden=\"true\">×</span>\n    </ToastClose>\n  </ToastRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Toast Sensitivity - Vue\nDESCRIPTION: This code snippet showcases the usage of the `type` prop on the ToastRoot component to control the sensitivity of the toast for screen readers. Foreground toasts are announced immediately, while background toasts are announced at the next graceful opportunity.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ToastRoot type=\"foreground\">\n    <ToastDescription>File removed successfully.</ToastDescription>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n\n  <ToastRoot type=\"background\">\n    <ToastDescription>We've just released Reka UI 2.0.</ToastDescription>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Emits Data for Reka UI Component (JavaScript)\nDESCRIPTION: This JavaScript array defines the custom events (emits) that the Reka UI component can emit. Each object details the event's name, a description of when it is emitted, and the type signature of the payload data passed with the event. This data is used by a documentation component like `<EmitsTable>` to document the component's emitted events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/StepperRoot.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes</p>\\n',\n    'type': '[payload: number]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props\nDESCRIPTION: This code snippet defines the properties of a Vue component using a data structure. The `data` array contains objects, each representing a component prop.  Each prop definition includes 'name', 'description', 'type', 'required', and 'default' keys, providing information about how to use the component. The `PropsTable` component likely utilizes this data to render a table of available props and their descriptions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxGroupLabel.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n[{ \"name\": \"as\", \"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\", \"type\": \"AsTag | Component\", \"required\": false, \"default\": \"'div'\" }, { \"name\": \"asChild\", \"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\", \"type\": \"boolean\", \"required\": false }, { \"name\": \"for\", \"description\": \"\", \"type\": \"string\", \"required\": false }]\n```\n\n----------------------------------------\n\nTITLE: Focus Trapping with FocusScope in Vue\nDESCRIPTION: This example demonstrates how to use the FocusScope component to trap focus within a specific section of the UI. The `trapped` prop is set to `true`, ensuring that focus remains within the FocusScope's children when navigating with the keyboard. This is useful for modal windows or other interactive components where focus should be contained.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/focus-scope.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <FocusScope :trapped=\"true\">\n    <div>\n      <button>Action 1</button>\n      <button>Action 2</button>\n      <button>Close</button>\n    </div>\n  </FocusScope>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Event Handlers for Dismissable Layer Interactions in Vue.js\nDESCRIPTION: This snippet details various event handlers associated with a dismissable overlay layer component, handling focus management, keyboard interactions, outside clicks, and pointer events. These handlers enable developers to respond to and customize user interactions such as closing, focus shifts, and outside interactions, enhancing accessibility and control in Vue.js components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverContent.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'openAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on open.\\nCan be prevented.</p>',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable component definition in Vue.js\nDESCRIPTION: Defines a PropsTable component that takes a data array to display property information in a tabular format. It manages properties such as name, description, type, and required status for each item. This data prop enables the component to dynamically render property details, facilitating documentation and UI display. Dependencies include Vue.js and a supporting table rendering mechanism.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarMenu.md#_snippet_0\n\nLANGUAGE: HTML/Template\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'value',\n    'description': '<p>A unique value that associates the item with an active value when the navigation menu is controlled.</p>\\n<p>This prop is managed automatically when uncontrolled.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Constraining HoverCardContent Size Using CSS and Vue Structure\nDESCRIPTION: This example shows how to wrap HoverCard components to constrain the width and maximum height of the HoverCardContent to match the trigger's width and viewport height, respectively. The Vue snippet arranges the components with HoverCardPortal for portal-based content rendering and applies a side offset. The accompanying CSS uses custom properties '--reka-hover-card-trigger-width' and '--reka-hover-card-content-available-height' to limit the content dimensions dynamically based on trigger size and available viewport space.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/hover-card.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n// index.vue\\n<script setup>\\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'reka-ui'\\n</script>\\n\\n<template>\\n  <HoverCardRoot>\\n    <HoverCardTrigger>…</HoverCardTrigger>\\n    <HoverCardPortal>\\n      <HoverCardContent\\n        class=\"HoverCardContent\"\\n        :side-offset=\"5\"\\n      >\\n        …\\n      </HoverCardContent>\\n    </HoverCardPortal>\\n  </HoverCardRoot>\\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\\n.HoverCardContent {\\n  width: var(--reka-hover-card-trigger-width);\\n  max-height: var(--reka-hover-card-content-available-height);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Emits Table for Reka-UI Date Field (Vue/JSON)\nDESCRIPTION: This Vue snippet displays an EmitsTable that lists all emitted events for the Date Field component by referencing a JSON array of event descriptors. Each event includes its name, description, and payload type for developer clarity and is intended solely for documentation rendering. Dependencies include the EmitsTable Vue component; expected input is an array of event descriptor objects, and no direct code execution is performed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateFieldRoot.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called whenever the model value changes</p>\\n',\n    'type': '[date: DateValue]'\n  },\n  {\n    'name': 'update:placeholder',\n    'description': '<p>Event handler called whenever the placeholder value changes</p>\\n',\n    'type': '[date: DateValue]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Focus Events with FocusScope in Vue\nDESCRIPTION: This example demonstrates how to handle focus events emitted by the FocusScope component, specifically `mount-auto-focus` and `unmount-auto-focus`.  The `handleMountFocus` function is called when the FocusScope is mounted and attempts to automatically focus an element within its scope. This can be used to prevent default auto-focus behavior if needed. The event object includes a `preventDefault` method to stop the default focus behavior.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/focus-scope.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nfunction handleMountFocus(event) {\n  // Prevent default auto-focus behavior if needed\n  event.preventDefault()\n}\n</script>\n\n<template>\n  <FocusScope\n    @mount-auto-focus=\"handleMountFocus\"\n    @unmount-auto-focus=\"handleUnmountFocus\"\n  >\n    <div>\n      …\n    </div>\n  </FocusScope>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties in PropsTable data - JavaScript\nDESCRIPTION: This snippet defines the array of objects used as the `data` prop for the `PropsTable` component. Each object within the array represents a single component property, specifying its name, description (often containing HTML tags), data type, whether it's required, and its default value if applicable.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuGroup.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props in JSON Format\nDESCRIPTION: This snippet defines the props for a Vue component using a JSON array passed to a PropsTable component. The props include attributes like \"estimateSize\" (number), \"options\" (an array of acceptable values), \"overscan\" (number), and \"textContent\" (a function accepting an option and returning a string). These props facilitate list rendering and optimization features such as virtualization and type-ahead search. Dependencies include proper definitions for AcceptableValue and functional support for the textContent callback. Inputs are the props passed from parent components, and outputs influence the rendered UI behavior and performance.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxVirtualizer.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'estimateSize',\n    'description': '<p>Estimated size (in px) of each item<\\/p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'options',\n    'description': '<p>List of items<\\/p>\\n',\n    'type': 'AcceptableValue[]',\n    'required': true\n  },\n  {\n    'name': 'overscan',\n    'description': '<p>Number of items rendered outside the visible area<\\/p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'textContent',\n    'description': '<p>Text content for each item to achieve type-ahead feature<\\/p>\\n',\n    'type': '((option: AcceptableValue) => string)',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Separators (Vue)\nDESCRIPTION: This Vue.js snippet demonstrates how to add separators to a dropdown menu. It uses the `DropdownMenuSeparator` component from the Reka UI library to visually separate menu items. The separators improve the organization and readability of the dropdown menu. The component is added between the `DropdownMenuItem` components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Animating Reka UI Components with CSS Keyframes Animation (CSS)\nDESCRIPTION: Defines fadeIn and fadeOut keyframe animations to smoothly animate mounting and unmounting of Reka UI Dialog components using CSS. The animations are applied conditionally based on component data attributes indicating open or closed state. This approach utilizes CSS animation properties and leverages Reka UI's suspension of unmount to allow exit animations to complete before removal from the DOM. No additional dependencies are required besides standard CSS support.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/animation.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.DialogOverlay[data-state=\"open\"],\n.DialogContent[data-state=\"open\"] {\n  animation: fadeIn 300ms ease-out;\n}\n\n.DialogOverlay[data-state=\"closed\"],\n.DialogContent[data-state=\"closed\"] {\n  animation: fadeOut 300ms ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Combobox Selection Behavior in Vue Using Event Modifiers\nDESCRIPTION: This snippet demonstrates how to prevent a combobox item selection from closing the content and updating the model value by using the @select.prevent modifier on ComboboxItem. This is useful for custom logic or conditional selection. The pattern relies on Vue's event modifiers and Reka-UI component behavior.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ComboboxContent, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxPortal, ComboboxRoot } from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem @select.prevent>\n          Item A\n        </ComboboxItem>\n        …\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Emitting Vue Component Event for Submenu Open State Changes in JSON\nDESCRIPTION: This snippet documents the 'update:open' emit event of the Vue submenu component in JSON, describing an event payload of boolean that is triggered when the submenu open state changes. It facilitates controlled open state updates by propagating the open boolean value to parent components or v-model bindings.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSub.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the submenu changes.</p>\\n',\n    'type': '[payload: boolean]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering DismissableLayer PropsTable with Prop Metadata in Vue\nDESCRIPTION: This snippet uses the <PropsTable> Vue component to display a list of documented props for the DismissableLayer component, including name, description, type, 'required' status, and default value. It expects a JavaScript array of prop descriptor objects as input, with HTML in the description fields for rich formatting. No external dependencies are required aside from the Vue component itself. The primary output is a rendered props table for reference in documentation or style guides.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DialogContent.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disableOutsidePointerEvents',\n    'description': '<p>When <code>true</code>, hover/focus/click interactions will be disabled on elements outside\\nthe <code>DismissableLayer</code>. Users will need to click twice on outside elements to\\ninteract with them: once to close the <code>DismissableLayer</code>, and again to trigger the element.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'trapFocus',\n    'description': '<p>When <code>true</code>, focus cannot escape the <code>Content</code> via keyboard,\\npointer, or a programmatic focus.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Slot Table (Vue)\nDESCRIPTION: This snippet generates a table documenting the slots of a Vue component. It uses a `SlotsTable` component, receiving data in a JSON-like format. Each entry describes a slot and includes `name`, `description`, and `type`. The resulting output is a table that presents a clear description of available slots, their purposes, and input types. The `SlotsTable` component is required to be accessible.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuSub.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current input values</p>\\n',\n    'type': 'string'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Props table describing Select component properties and their types\nDESCRIPTION: This snippet declares the data for the properties that can be passed to the Select component, including optional parameters such as 'autocomplete', 'by', 'defaultOpen', 'defaultValue', 'dir', 'disabled', 'modelValue', 'multiple', 'name', 'open', and 'required'. Each property includes its data type and a brief description of its purpose and usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectRoot.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'autocomplete',\n    'description': '<p>Native html input <code>autocomplete</code> attribute.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'by',\n    'description': '<p>Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.</p>\\n',\n    'type': 'string | ((a: AcceptableValue, b: AcceptableValue) => boolean)',\n    'required': false\n  },\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the select when it is initially rendered. Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the select when initially rendered. Use when you do not need to control the state of the Select</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[]',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with Select</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the Select. Can be bind as <code>v-model</code>.</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[]',\n    'required': false\n  },\n  {\n    'name': 'multiple',\n    'description': '<p>Whether multiple options can be selected or not.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the Select. Can be bind as <code>v-model:open</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props Metadata for Reka-UI - Vue\nDESCRIPTION: This snippet defines a data array of prop objects passed to a Vue PropsTable component, enumerating component properties such as 'as', 'asChild', 'dir', 'loop', and 'orientation'. Each prop includes details on its purpose, type, required status, and default value where applicable. It enables documentation and type checking of the component's API, and some descriptions include HTML and links for enhanced documentation UI. The input is a structured JSON-like array but inside a Vue template syntax. No external dependencies beyond Vue and the PropsTable component are required.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToolbarRoot.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last tab to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>The orientation of the toolbar</p>\\n',\n    'type': '\\'vertical\\' | \\'horizontal\\'',\n    'required': false,\n    'default': '\\'horizontal\\''\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Random ID with useId in Vue TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the useId function from the reka-ui library to generate a random, unique ID in a Vue.js TypeScript project. No parameters are required for random generation. The generated ID, here exemplified as 'reka-1', can be used to uniquely identify elements, especially in SSR/CSR environments. Dependency: reka-ui library. Input: None; Output: string ID.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-id.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useId } from 'reka-ui'\n\nconst buttonId = useId() // reka-1\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props for Arrow Rendering in JSON\nDESCRIPTION: This snippet declares a JSON array as a prop data object for a Vue PropsTable component, specifying properties used to configure the arrow component's rendering. The props include 'as' to customize the rendered tag or component, 'asChild' to enable rendering the child element while merging props, 'height' and 'width' to specify arrow dimensions in pixels, and 'rounded' to optionally render a rounded arrow shape. Dependencies include Vue.js and the PropsTable component. Expected inputs are property values that control the arrow's structure and style, and output is used to render an arrow component accordingly. Constraints include the note that the rounded prop is incompatible with as/asChild usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerArrow.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'height',\n    'description': '<p>The height of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'rounded',\n    'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'width',\n    'description': '<p>The width of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Tooltip API - Usage\nDESCRIPTION: This snippet demonstrates how to use a custom `Tooltip` component that abstracts the primitives and introduces a `content` prop. The `content` prop is used to pass in the text content to display inside the tooltip.  This usage example highlights the flexibility of abstracting the primitive parts.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Tooltip } from './your-tooltip'\n</script>\n\n<template>\n  <Tooltip content=\"Tooltip content\">\n    <button>Tooltip trigger</button>\n  </Tooltip>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tags Input Component Anatomy - Vue\nDESCRIPTION: This code snippet demonstrates the basic structure of the Tags Input component using Vue. It imports necessary components and arranges them within the TagsInputRoot component to render tags, input, and clear button.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tags-input.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TagsInputClear, TagsInputDelete, TagsInputInput, TagsInputItem, TagsInputRoot, TagsInputText } from 'reka-ui'\n</script>\n\n<template>\n  <TagsInputRoot>\n    <TagsInputItem>\n      <TagsInputItemText />\n      <TagsInputItemDelete />\n    </TagsInputItem>\n\n    <TagsInputInput />\n    <TagsInputClear />\n  </TagsInputRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Props Table Definition - Reka UI\nDESCRIPTION: This snippet defines a table of properties (props) for a Reka UI component. Each prop entry includes the prop's name, description, type, required status, and default value (if applicable). The props control the component's appearance, behavior, and interaction with other elements.  The table is rendered using the `<PropsTable>` component, passing the prop data as an array of objects.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSubContent.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\''',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\''',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\''',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties with PropsTable\nDESCRIPTION: This HTML snippet demonstrates using a Vue component named `PropsTable` to render a table of properties for another component. The `:data` prop accepts an array of objects, where each object defines a property with its name, description (can include HTML), type, requirement status, and default value. This specific example defines `as` (for element rendering), `asChild` (for composition), and `value` (a required number).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationListItem.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>Value for the page</p>\\n',\n    'type': 'number',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Render Props in Vue.js Template (HTML)\nDESCRIPTION: This snippet defines prop metadata for a Vue component inside a PropsTable component. It details two properties: 'as', specifying the HTML element or component to render, with a default of 'div'; and 'asChild', a boolean to override rendering behavior by merging child component props. Dependencies include a Vue environment and the PropsTable component. Inputs are the prop definitions, while outputs are the rendered prop documentation table. The configuration promotes component composition and flexible element rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectSeparator.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating PropsTable with Data - Vue\nDESCRIPTION: This code snippet defines the data used to populate the PropsTable component. The data is structured as an array of objects, where each object represents a property. Each property object includes details like the property name, description (formatted with HTML for display purposes), type, a flag if the property is required or not, and its default value. This data structure is used to drive the dynamic rendering of a table in the UI, providing documentation for available props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, the context menu would not open when right-clicking.</p>\\n<p>Note that this will also restore the native context menu.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props Metadata Table with PropsTable in Vue - JavaScript\nDESCRIPTION: This snippet passes a JSON-formatted array to the PropsTable component, listing prop names, descriptions (including HTML markup), types, requirements, and defaults. It documents 'as' (for custom rendered elements or components) and 'asChild' (for replacing the root element with a child while merging props). No external dependencies beyond Vue and Reka UI are required. Inputs: property metadata as an array; Output: a rendered table in documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationEllipsis.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Emits Table in HTML\nDESCRIPTION: This snippet renders a table describing events emitted by a UI component using the EmitsTable component. The data includes the event name, description, and type. This table details the events that the component triggers and provides information to developers on how to handle those events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/Toggle.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value of the toggle changes.</p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Abstracted DropdownMenu API in Vue\nDESCRIPTION: Shows how to consume a custom-built dropdown menu API within a Vue application. Instead of importing directly from `reka-ui`, it imports components like `DropdownMenu`, `DropdownMenuContent`, `DropdownMenuItem`, etc., from a local abstraction layer (`./your-dropdown-menu`), simplifying usage in the application.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from './your-dropdown-menu'\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>\n    <DropdownMenuContent>\n      <DropdownMenuItem>Item</DropdownMenuItem>\n      <DropdownMenuLabel>Label</DropdownMenuLabel>\n      <DropdownMenuGroup>Group</DropdownMenuGroup>\n      <DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>\n      <DropdownMenuSeparator>Separator</DropdownMenuSeparator>\n      <DropdownMenuRadioGroup>\n        <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n        <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n      </DropdownMenuRadioGroup>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DropdownMenuRadioItem Wrapper in Vue\nDESCRIPTION: Presents the implementation of a custom Vue wrapper component (`DropdownMenuRadioItem.vue`) for `reka-ui`'s `DropdownMenuRadioItem`. This component includes the `DropdownMenuItemIndicator` with a `DotFilledIcon` (from `@radix-icons/vue`) automatically and uses `useForwardPropsEmits` to manage properties and events, simplifying radio item usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<!-- DropdownMenuRadioItem.vue -->\n<script setup lang=\"ts\">\nimport type { DropdownMenuRadioItemEmits, DropdownMenuRadioItemProps } from 'reka-ui'\nimport { DotFilledIcon } from '@radix-icons/vue'\nimport { DropdownMenuItemIndicator, DropdownMenuRadioItem, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<DropdownMenuRadioItemProps>()\nconst emits = defineEmits<DropdownMenuRadioItemEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuRadioItem v-bind=\"forwarded\">\n    <span>\n      <DropdownMenuItemIndicator>\n        <DotFilledIcon />\n      </DropdownMenuItemIndicator>\n    </span>\n    <slot />\n  </DropdownMenuRadioItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI using Yarn (Bash)\nDESCRIPTION: Installs the Reka UI library as a project dependency using the Yarn package manager. This command adds the latest version of `reka-ui` to the `dependencies` section of the project's `package.json` and installs it into `node_modules`. Requires Yarn to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add reka-ui\n```\n\n----------------------------------------\n\nTITLE: API Reference: Title Element for Accessibility\nDESCRIPTION: Provides an accessible name for the alert dialog, announced when the dialog opens. Alternatively, developers can use aria-label or aria-labelledby on the content container for accessibility without this component. It plays a key role in screen reader accessibility.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_8\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogTitle.md -->\n```\n\n----------------------------------------\n\nTITLE: API Reference: Description Element for Accessibility\nDESCRIPTION: Offers an accessible description for the alert dialog, announced to assistive technologies at dialog open. It can be replaced by aria-describedby on the content container for simpler setups. Ensures the dialog provides context to screen readers.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_9\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogDescription.md -->\n```\n\n----------------------------------------\n\nTITLE: Rendering a PropsTable Component in Vue - Vue\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component in Vue by passing a static array of prop definitions via the :data binding. The PropsTable expects an array of objects, each describing a prop's name, description (with optional HTML content), type, requirement status, and default value. Requires Vue.js and the PropsTable component to be registered/imported; the description fields may contain HTML and links. Input is a hardcoded array, output is the rendered prop documentation table; customizable for different components by adjusting the data array.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerCell.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild<\\/code>.<\\/p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.<\\/p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition<\\/a> guide for more details.<\\/p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'date',\n    'description': '',\n    'type': 'DateValue',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component in Vue to Display Component Props Documentation\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component to display documentation for a Vue component's props. The component receives a data array containing detailed information about each prop, including name, description, type, whether it's required, and default value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TabsList.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last tab to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Vue Component Implementation\nDESCRIPTION: This snippet defines a Vue component that displays a table of properties (props) for a UI component, including name, description, type, required status, and default value. It leverages the PropsTable component, passing data as a JSON array describing each prop and its attributes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DialogOverlay.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Chevron Rotation\nDESCRIPTION: Provides CSS rules for rotating the chevron icon when the AccordionItem is open, creating a visual cue for expanded state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/accordion.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.AccordionChevron {\n  transition: transform 300ms;\n}\n.AccordionTrigger[data-state=\"open\"] > .AccordionChevron {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SelectContent Position to Popper with Offset in Vue.js (TypeScript)\nDESCRIPTION: Demonstrates configuring SelectContent's positioning mode to \"popper\" with a side offset for precise placement relative to the trigger button. Imports necessary Reka-UI Select components, uses the SelectRoot, SelectTrigger, and SelectPortal wrappers, and adjusts the SelectContent props. Shows how to customize the popup positioning in a Vue.js component leveraging TypeScript, useful for dropdowns needing advanced alignment options.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent\n        position=\"popper\"\n        :side-offset=\"5\"\n      >\n        …\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Animating Collapsible Content Size in Vue and CSS\nDESCRIPTION: Shows how to implement animations for the Collapsible component. Uses CSS variables to animate content height when opening and closing the collapsible panel.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/collapsible.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n// index.vue\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'reka-ui'\nimport './styles.css'\n</script>\n\n<template>\n  <CollapsibleRoot>\n    <CollapsibleTrigger>…</CollapsibleTrigger>\n    <CollapsibleContent class=\"CollapsibleContent\">\n      …\n    </CollapsibleContent>\n  </CollapsibleRoot>\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.CollapsibleContent {\n  overflow: hidden;\n}\n.CollapsibleContent[data-state=\"open\"] {\n  animation: slideDown 300ms ease-out;\n}\n.CollapsibleContent[data-state=\"closed\"] {\n  animation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--reka-collapsible-content-height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--reka-collapsible-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI using pnpm (Bash)\nDESCRIPTION: Installs the Reka UI library as a project dependency using the pnpm package manager. This command adds the latest version of `reka-ui` to the `dependencies` section of the project's `package.json` and installs it into `node_modules`. Requires pnpm to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add reka-ui\n```\n\n----------------------------------------\n\nTITLE: Configuration Data for Props Table (JSON)\nDESCRIPTION: A JSON array representing the properties of a UI component. Each object in the array defines a single prop with fields for <code>name</code>, <code>description</code> (including HTML markup), <code>type</code>, <code>required</code> status, and <code>default</code> value. This data is intended for consumption by a documentation component like <code>PropsTable</code>.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarCell.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"name\": \"as\",\n    \"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\",\n    \"type\": \"AsTag | Component\",\n    \"required\": false,\n    \"default\": \"'td'\"\n  },\n  {\n    \"name\": \"asChild\",\n    \"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\",\n    \"type\": \"boolean\",\n    \"required\": false\n  },\n  {\n    \"name\": \"date\",\n    \"description\": \"\",\n    \"type\": \"DateValue\",\n    \"required\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Building Reka UI Locally using pnpm (Bash)\nDESCRIPTION: Executes the build script defined in `package.json` using pnpm. This command compiles or processes the source code of the `reka-ui` package for local testing or development purposes. Requires pnpm and project dependencies to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Props Definitions in Vue\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component in a Vue.js application to render a structured table describing component properties. It passes an array of prop definitions, detailing their name, description (with HTML markup), type, whether they are required, and default value. The component expects the data prop to be an array of objects matching a standardized schema. Inputs include JavaScript objects for each prop, and output is a rendered table in the UI. This is designed for documentation purposes, not runtime logic, and may require the parent project’s documentation tooling.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarHeader.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Emitted Events for Reka UI (JavaScript)\nDESCRIPTION: Provides a JavaScript array of objects defining the events emitted by a Reka UI component. Each object details the event's name, description (in HTML), and the type signature of its payload. This data is passed to an `<EmitsTable>` component for display.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuContent.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Props Definition in HTML Template\nDESCRIPTION: A PropsTable component displaying all available props for the DateRangePicker component, including their names, descriptions, types, and default values where applicable.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangeFieldRoot.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultPlaceholder',\n    'description': '<p>The default placeholder date</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The default value for the calendar</p>\\n',\n    'type': 'DateRange',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the date field when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Whether or not the date field is disabled</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'granularity',\n    'description': '<p>The granularity to use for formatting times. Defaults to day if a CalendarDate is provided, otherwise defaults to minute. The field will render segments for each part of the date up to and including the specified granularity</p>\\n',\n    'type': '\\'day\\' | \\'hour\\' | \\'minute\\' | \\'second\\'',\n    'required': false\n  },\n  {\n    'name': 'hideTimeZone',\n    'description': '<p>Whether or not to hide the time zone segment of the field</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hourCycle',\n    'description': '<p>The hour cycle used for formatting times. Defaults to the local preference</p>\\n',\n    'type': '12 | 24',\n    'required': false\n  },\n  {\n    'name': 'id',\n    'description': '<p>Id of the element</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'isDateUnavailable',\n    'description': '<p>A function that returns whether or not a date is unavailable</p>\\n',\n    'type': 'Matcher',\n    'required': false\n  },\n  {\n    'name': 'locale',\n    'description': '<p>The locale to use for formatting dates</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'maxValue',\n    'description': '<p>The maximum date that can be selected</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'minValue',\n    'description': '<p>The minimum date that can be selected</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled checked state of the calendar. Can be bound as <code>v-model</code>.</p>\\n',\n    'type': 'DateRange | null',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'placeholder',\n    'description': '<p>The placeholder date, which is used to determine what month to display when no date is selected. This updates as the user navigates the calendar and can be used to programmatically control the calendar view</p>\\n',\n    'type': 'DateValue',\n    'required': false\n  },\n  {\n    'name': 'readonly',\n    'description': '<p>Whether or not the date field is readonly</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties (Props) in Reka UI (Vue/JavaScript)\nDESCRIPTION: Provides an array of JavaScript objects defining the properties (props) accepted by a Reka UI component. Each object details a prop's name, description (including HTML formatting), type signature, requirement status, and default value if applicable. Props cover aspects like alignment, offset, collision handling, rendering options (`as`, `asChild`), positioning strategies, and forced mounting.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/HoverCardContent.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[{\n    'name': 'align',\n    'description': '<p>The preferred alignment against the trigger.\\nMay change when collisions occur.</p>\\n',\n    'type': '\\'start\\' | \\'center\\' | \\'end\\'',\n    'required': false\n  },\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'side',\n    'description': '<p>The preferred side of the trigger to render against when open.\\nWill be reversed when collisions occur and avoidCollisions\\nis enabled.</p>\\n',\n    'type': '\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\'',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst \\\"always\\\" will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Reka UI Combobox Component in Vue\nDESCRIPTION: A Vue EmitsTable component showing the available events that can be emitted by the Combobox component, including their payload types and descriptions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxRoot.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'highlight',\n    'description': '<p>Event handler when highlighted element changes.</p>\\n',\n    'type': '[payload: { ref: HTMLElement; value: AcceptableValue; }]'\n  },\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[value: AcceptableValue]'\n  },\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the combobox changes.</p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Structuring reka-ui Calendar Component (Vue)\nDESCRIPTION: This snippet demonstrates the basic structure of the reka-ui Calendar component in Vue. It shows how to import the necessary sub-components like `CalendarRoot`, `CalendarHeader`, `CalendarGrid`, etc., and arrange them in the template to form the standard calendar layout. This requires installing the `reka-ui` library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/calendar.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport {\n  CalendarCell,\n  CalendarCellTrigger,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHead,\n  CalendarGridRow,\n  CalendarHeadCell,\n  CalendarHeader,\n  CalendarHeading,\n  CalendarNext,\n  CalendarPrev,\n  CalendarRoot\n} from 'reka-ui'\n</script>\n\n<template>\n  <CalendarRoot>\n    <CalendarHeader>\n      <CalendarPrev />\n      <CalendarHeading />\n      <CalendarNext />\n    </CalendarHeader>\n    <CalendarGrid>\n      <CalendarGridHead>\n        <CalendarGridRow>\n          <CalendarHeadCell />\n        </CalendarGridRow>\n      </CalendarGridHead>\n      <CalendarGridBody>\n        <CalendarGridRow>\n          <CalendarCell>\n            <CalendarCellTrigger />\n          </CalendarCell>\n        </CalendarGridRow>\n      </CalendarGridBody>\n    </CalendarGrid>\n  </CalendarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table in HTML\nDESCRIPTION: This snippet renders a table that describes the props of a UI component. It takes a JSON array as input (data) and uses a component named PropsTable to display the prop information. The data includes prop name, description, type, requirement, and default value, providing a comprehensive overview of the component's properties.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/Toggle.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The pressed state of the toggle when it is initially rendered. Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled pressed state of the toggle. Can be bind as <code>v-model</code>.</p>\\n',\n    'type': 'boolean | null',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Slots Metadata for Vue Component - Vue\nDESCRIPTION: This snippet passes a structured array of slot definitions, with names and types, to a <SlotsTable> Vue component for automatic documentation or rendering. It does not contain any business logic and assumes the presence of a <SlotsTable> component that understands the 'data' prop structure. The snippet expects the user to have Vue and the relevant documentation or display component installed. Inputs are slot descriptors (name, description, type); output is a rendered table or documentation entry representing slot types for the date component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerCalendar.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'date',\n    'description': '',\n    'type': 'DateValue'\n  },\n  {\n    'name': 'grid',\n    'description': '',\n    'type': 'Grid<DateValue>[]'\n  },\n  {\n    'name': 'weekDays',\n    'description': '',\n    'type': 'string[]'\n  },\n  {\n    'name': 'weekStartsOn',\n    'description': '',\n    'type': '0 | 1 | 2 | 3 | 4 | 5 | 6'\n  },\n  {\n    'name': 'locale',\n    'description': '',\n    'type': 'string'\n  },\n  {\n    'name': 'fixedWeeks',\n    'description': '',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a PropsTable Component in Vue\nDESCRIPTION: A Vue component that renders a properties table for documentation. It includes detailed information about the 'as' and 'asChild' props, their types, descriptions, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/EditableArea.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Reka UI with Nuxt\nDESCRIPTION: This snippet demonstrates how to add the `reka-ui/nuxt` module to the `modules` array in `nuxt.config.ts`. This setup enables automatic importing of Reka UI components within a Nuxt application.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/overview/installation.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['reka-ui/nuxt'],\n})\n```\n\n----------------------------------------\n\nTITLE: Documenting Emits Table in Vue\nDESCRIPTION: This snippet uses an `EmitsTable` component and defines its `data` prop to describe the component's emits. The `data` prop is an array of objects, each representing an emitted event with attributes like `name`, `description`, and `type`. The `description` field contains HTML for describing the emit.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuRadioGroup.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[payload: string]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Menu with Submenus in Vue\nDESCRIPTION: Shows how to create nested navigation menus using NavigationMenuSub component. Demonstrates setting up submenus with mandatory defaultValue property to ensure one item is always active.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <NavigationMenuSub default-value=\"sub1\">\n            <NavigationMenuList>\n              <NavigationMenuItem value=\"sub1\">\n                <NavigationMenuTrigger>Sub item one</NavigationMenuTrigger>\n                <NavigationMenuContent> Sub item one content </NavigationMenuContent>\n              </NavigationMenuItem>\n              <NavigationMenuItem value=\"sub2\">\n                <NavigationMenuTrigger>Sub item two</NavigationMenuTrigger>\n                <NavigationMenuContent> Sub item two content </NavigationMenuContent>\n              </NavigationMenuItem>\n            </NavigationMenuList>\n          </NavigationMenuSub>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Menu Content Size (CSS)\nDESCRIPTION: This CSS snippet provides styling for the dropdown menu content using CSS custom properties. It constrains the width using `--reka-dropdown-menu-trigger-width` and the maximum height using `--reka-dropdown-menu-content-available-height`. The effect of this styling is the control of the dropdown menu's dimensions in relation to the trigger and the viewport. Dependencies: Vue code from the previous snippet.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuContent {\n  width: var(--reka-dropdown-menu-trigger-width);\n  max-height: var(--reka-dropdown-menu-content-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference: Action Button to Submit or Close Dialog\nDESCRIPTION: Represents the button used to trigger closure of the dialog, typically after an action like submission. It is visually styled differently from cancel buttons and integrates with the dialog's controlled state. Metadata information is referenced for styling and behavior.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogAction.md -->\n```\n\n----------------------------------------\n\nTITLE: Generating PropsTable Documentation in Vue\nDESCRIPTION: This Vue code snippet uses the PropsTable component and passes an array of property definitions as the 'data' prop. This data includes each property's name, description (HTML formatted), type, whether it's required, and the default value. The component then renders this data in a tabular format. The component requires the PropsTable component and a correctly formatted data array.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToolbarButton.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Emits Data (JavaScript)\nDESCRIPTION: This JavaScript array defines the custom events (emits) emitted by a UI component. Each object in the array represents an event and includes its name, a description (which may contain HTML), and the type signature of the event payload. This data is consumed by a documentation component like <EmitsTable> to render a reference table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectItem.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'select',\n    'description': '<p>Event handler called when the selecting item. &lt;br&gt; It can be prevented by calling <code>event.preventDefault</code>.</p>\\n',\n    'type': '[event: SelectEvent<AcceptableValue>]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nuxt Module Configuration Update for Correct Module Imports\nDESCRIPTION: Adjusts Nuxt configuration to replace 'radix-vue/nuxt' with 'reka-ui/nuxt' in the modules array, ensuring the project imports the correct library version.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: [\n    'radix-vue/nuxt' <!-- [!code --] -->\n    'reka-ui/nuxt' <!-- [!code ++] -->\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Items in Select with SelectGroup and SelectLabel (Reka-UI, Vue)\nDESCRIPTION: Illustrates grouping related items in a select list using <SelectGroup> and labeling the group with <SelectLabel> in Vue and Reka-UI. Useful for semantic grouping of related options. Requires only Reka-UI as a dependency.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectGroup>\n            <SelectLabel>Label</SelectLabel>\n            <SelectItem>…</SelectItem>\n            <SelectItem>…</SelectItem>\n            <SelectItem>…</SelectItem>\n          </SelectGroup>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Reka UI Slot Component for Attribute Inheritance in Vue.js (TypeScript)\nDESCRIPTION: Shows usage of the 'Slot' component from the 'reka-ui' library which merges assigned attributes directly onto its immediate child element, bypassing the need for scoped slot binding. The example imports 'Slot' with TypeScript setup syntax and assigns an 'id' attribute to the Slot component inside 'Comp.vue'. In the parent template, child elements automatically inherit the 'id' attribute. This simplifies attribute passing but does not expose scoped slot props. Dependencies include Reka UI installation and Vue 3 with TypeScript support. Inputs are Slot component props; outputs are attributes merged onto children without manual binding.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/slot.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Reka UI Slot -->\n<script setup lang=\"ts\">\nimport { Slot } from 'reka-ui'\n</script>\n\n<!-- Comp.vue -->\n<template>\n  <Slot id=\"reka-01\">\n    ...\n  </Slot>\n</template>\n\n<!-- parent template -->\n<template>\n  <Comp>\n    <!-- id will be inherited -->\n    <button>...<button>\n  <Comp>\n<template>\n```\n\n----------------------------------------\n\nTITLE: PropsTable Component with PinInput Properties in Vue\nDESCRIPTION: A Vue component that displays a properties table for the PinInput component. The table contains detailed documentation for four properties with their names, descriptions, types, requirements, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PinInputInput.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'input\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the pin input</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'index',\n    'description': '<p>Position of the value this input binds to.</p>\\n',\n    'type': 'number',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component to Display Vue Teleport Props\nDESCRIPTION: Demonstrates how to use the `PropsTable` Vue component by passing an array of prop definitions via the `:data` prop. The data defines properties (`defer`, `disabled`, `forceMount`, `to`) relevant to Vue's Teleport functionality, including descriptions with HTML and external links, types (like 'boolean', 'string | HTMLElement'), and requirement status.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipPortal.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Component Definition\nDESCRIPTION: This code defines a PropsTable component in Vue.js. It utilizes a data prop to render a table based on the provided JSON-like structure. The 'data' prop contains information about component properties, including name, description, type, requirement status, and default value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ProgressIndicator.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': ''div''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=''https://www.reka-ui.com/docs/guides/composition''>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable component to display DateRangePicker Field properties in Vue\nDESCRIPTION: This snippet renders a PropsTable component that displays documentation for the DateRangePicker Field component's properties. The table includes property names, descriptions, types, required status, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangeFieldInput.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'part',\n    'description': '<p>The part of the date to render</p>\\n',\n    'type': '\\'day\\' | \\'month\\' | \\'year\\' | \\'hour\\' | \\'minute\\' | \\'second\\' | \\'dayPeriod\\' | \\'literal\\' | \\'timeZoneName\\'',\n    'required': true\n  },\n  {\n    'name': 'type',\n    'description': '<p>The type of field to render (start or end)</p>\\n',\n    'type': '\\'start\\' | \\'end\\'',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Component Properties in Vue\nDESCRIPTION: A Vue component that displays a props table with documentation for two properties: 'as' for controlling the rendered element type and 'asChild' for component composition. The data is passed as a structured array of prop definitions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarSeparator.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining menu component props in Vue.js (JavaScript/JSON)\nDESCRIPTION: Specifies the props accepted by the menu component, including 'defaultValue' for uncontrolled initial open menu state, 'dir' for reading direction (LTR or RTL), 'loop' boolean to enable keyboard navigation looping, and 'modelValue' for controlled menu state used with v-model. This prop definition enables component users to configure the menu's behavior and appearance with type safety and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRoot.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the menu that should be open when initially rendered. Use when you do not need to control the value state.<\\/p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable.<\\/p>\\n<p>If omitted, inherits globally from <code>ConfigProvider<\\/code> or assumes LTR (left-to-right) reading mode.<\\/p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true<\\/code>, keyboard navigation will loop from last item to first, and vice versa.<\\/p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the menu to open. Can be used as <code>v-model<\\/code>.<\\/p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Slots Data for Reka UI Component - JavaScript\nDESCRIPTION: This JavaScript array of objects defines the slots exposed by a Reka UI component and the data they provide. Each object specifies the slot's `name`, an HTML-formatted `description` of its purpose, and the `type` of the data available through the slot. This data structure is designed to be consumed by a documentation component like `<SlotsTable>` to generate a table documenting the component's slots.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerCellTrigger.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'dayValue',\n    'description': '<p>Current day</p>\\n',\n    'type': 'string'\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Current disable state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'selected',\n    'description': '<p>Current selected state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'today',\n    'description': '<p>Current today state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'outsideView',\n    'description': '<p>Current outside view state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'outsideVisibleView',\n    'description': '<p>Current outside visible view state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'unavailable',\n    'description': '<p>Current unavailable state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'highlighted',\n    'description': '<p>Current highlighted state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'highlightedStart',\n    'description': '<p>Current highlighted start state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'highlightedEnd',\n    'description': '<p>Current highlighted end state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'selectionStart',\n    'description': '<p>Current selection start state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'selectionEnd',\n    'description': '<p>Current selection end state</p>\\n',\n    'type': 'boolean'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Component Slots in Vue\nDESCRIPTION: This snippet defines the slots of a Vue component using the `SlotsTable` component. It specifies the name, description, and type for each slot. Here, the component has a slot named 'disabled' which indicates the current disabled state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerNext.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'disabled',\n    'description': '<p>Current disable state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Prop Table (Vue)\nDESCRIPTION: This snippet generates a table describing the props of a Vue component. It utilizes a `PropsTable` component and feeds it data in a JSON-like structure. The `data` prop contains an array of objects, each representing a prop with properties such as `name`, `description`, `type`, `required`, and `default`. The output is a table that provides a concise overview of the component's props and their attributes. It requires the `PropsTable` component to be available in the context, and the provided data must be valid JSON.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuSub.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the menu item that should be active when initially rendered.</p>\\n<p>Use when you do not need to control the value state.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the sub menu item to activate. Can be used as <code>v-model</code>.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>The orientation of the menu.</p>\\n',\n    'type': '\\'vertical\\' | \\'horizontal\\'',\n    'required': false,\n    'default': '\\'horizontal\\''\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Properties using PropsTable in Vue\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component in a Vue template to display documentation for component properties. It passes an array of property objects to the `:data` prop. Each object defines a property's name, description (as HTML), type, required status, and default value. The example specifically shows the configuration for the 'as' and 'asChild' properties, common in UI libraries for element/component rendering control.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationFirst.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Persistent Content in Collapsible Component\nDESCRIPTION: Demonstrates how to keep content in the DOM even when collapsed by setting the unmount-on-hide property to false. This enables browser text search functionality within hidden content.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/collapsible.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <CollapsibleRoot :unmount-on-hide=\"false\">\n    …\n  </CollapsibleRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Separator Component with Vue in reka-ui\nDESCRIPTION: Basic implementation example showing how to import and use the Separator component in a Vue application. The component is imported from reka-ui and then used in the template section.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/separator.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Separator } from 'reka-ui'\n</script>\n\n<template>\n  <Separator />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Emitted Events in Vue (JavaScript)\nDESCRIPTION: This snippet details the events emitted by the Vue component, specifically a 'select' event triggered when a user selects an item via mouse or keyboard. The event handler receives an Event object, and invoking 'event.preventDefault' inside the handler prevents the menu from closing after selection. This event emission pattern allows parent components to react to user interactions and optionally control default behaviors.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarItem.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'select',\n    'description': '<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\\n',\n    'type': '[event: Event]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Dropdown Menu Props Definition\nDESCRIPTION: Defines the properties available for the dropdown menu component, including defaultOpen for uncontrolled state and open for controlled state with v-model support.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSub.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the dropdown menu when it is initially rendered. Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Props Table in Vue\nDESCRIPTION: This snippet displays a table containing the props of a Vue component. It uses the `<PropsTable>` component and passes a data array containing property information such as name, description, type, and default value.  This facilitates automated documentation for the component's API.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSubContent.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Exposing Dropdown Menu Open State via Slot in Vue Component (JavaScript/JSON)\nDESCRIPTION: Defines a slot named 'open' that exposes the current open boolean state of the dropdown menu to scoped slot consumers. This allows parent components or templates to reactively render content based on the menu's visibility status.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuRoot.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements from Radix Vue to Reka UI in Vue Components\nDESCRIPTION: Showcases the change in import syntax, replacing imports from 'radix-vue' with 'reka-ui' in Vue's script setup block, enabling migration to the new UI library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TooltipPortal, TooltipRoot, TooltipTrigger } from 'radix-vue' // [!code --]\nimport { TooltipPortal, TooltipRoot, TooltipTrigger } from 'reka-ui' // [!code ++]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Slots Definition for Date Component\nDESCRIPTION: A SlotsTable component that documents available slots for a Vue date component, including various state properties like selected, disabled, highlighted, and various date-related states such as today, outsideView, and selectionStart/End.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarCellTrigger.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'dayValue',\n    'description': '<p>Current day</p>\\n',\n    'type': 'string'\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Current disable state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'selected',\n    'description': '<p>Current selected state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'today',\n    'description': '<p>Current today state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'outsideView',\n    'description': '<p>Current outside view state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'outsideVisibleView',\n    'description': '<p>Current outside visible view state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'unavailable',\n    'description': '<p>Current unavailable state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'highlighted',\n    'description': '<p>Current highlighted state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'highlightedStart',\n    'description': '<p>Current highlighted start state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'highlightedEnd',\n    'description': '<p>Current highlighted end state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'selectionStart',\n    'description': '<p>Current selection start state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'selectionEnd',\n    'description': '<p>Current selection end state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Composing Dialog Components from Reka UI in Vue Template with TypeScript\nDESCRIPTION: This snippet provides an example of composing and using the Dialog components imported from the reka-ui/namespaced namespace in a Vue single-file component. It utilizes both the <script setup> block for importing, and the <template> block for rendering Dialog subcomponents (Dialog.Root, Dialog.Trigger, Dialog.Portal, Dialog.Overlay, Dialog.Content). The required dependency is 'reka-ui'. The code demonstrates the structure needed to implement a modal dialog in a Vue application, with expected inputs being user interactions and the output being the rendered dialog UI. This pattern leverages the Reka UI design of composable primitives.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/namespaced-components.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Dialog } from 'reka-ui/namespaced'\n</script>\n\n<template>\n  <Dialog.Root>\n    <Dialog.Trigger>\n      Trigger\n    </Dialog.Trigger>\n  </Dialog.Root>\n\n  <Dialog.Portal>\n    <Dialog.Overlay />\n    <Dialog.Content>\n      …\n    </Dialog.Content>\n  </Dialog.Portal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining SlotsTable Data Prop for Vue.js Component\nDESCRIPTION: This code snippet defines the 'data' prop for a Vue.js SlotsTable component, which expects an array of slot objects. Each slot object includes a 'name', 'description', and 'type', allowing dynamic rendering of table columns based on slot metadata.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerCalendar.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'date',\n    'description': '',\n    'type': 'any'\n  },\n  {\n    'name': 'grid',\n    'description': '',\n    'type': 'any'\n  },\n  {\n    'name': 'weekDays',\n    'description': '',\n    'type': 'any'\n  },\n  {\n    'name': 'weekStartsOn',\n    'description': '',\n    'type': 'any'\n  },\n  {\n    'name': 'locale',\n    'description': '',\n    'type': 'any'\n  },\n  {\n    'name': 'fixedWeeks',\n    'description': '',\n    'type': 'any'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Show Tooltip Instantly\nDESCRIPTION: This snippet illustrates how to make a tooltip appear instantly by setting the `delay-duration` prop on the `TooltipRoot` component to `0`. This overrides any global delay settings defined in the provider.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipRoot :delay-duration=\"0\">\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent>…</TooltipContent>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuration of Submit Mode to Submit Only on Button Click\nDESCRIPTION: This code snippet shows how to configure the 'Editable' component to avoid submitting on blur and instead only submit when the user clicks the submit trigger. It sets the 'submit-mode' prop to 'none', controlling the submission behavior to enhance user interaction customization.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/editable.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <EditableRoot submit-mode=\"none\">\n    <EditableArea>\n      <EditablePreview />\n      <EditableInput />\n    </EditableArea>\n    <EditableEditTrigger />\n    <EditableSubmitTrigger />\n    <EditableCancelTrigger />\n  </EditableRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Props Table with Reka UI in Vue\nDESCRIPTION: This snippet uses the PropsTable component from Reka UI to render a table documenting props for a Vue component. It provides an array of prop objects, each specifying the name, description (with HTML formatting), type, requirement status, and any default value. The 'as' and 'asChild' props are included, facilitating advanced customization of component rendering and composition. Dependencies include Vue, Reka UI, and support for HTML prop descriptions; the component expects an array of prop definitions as input and outputs a formatted table for developer documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarGroup.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Emits Table Component Usage for UI Component Documentation\nDESCRIPTION: A Vue component that displays a table of events emitted by a UI component, including their names, descriptions, and parameter types. The data is passed as a prop containing an array of event definitions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipContent.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when focus moves to the destructive action after opening. It can be prevented by calling <code>event.preventDefault</code></p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling <code>event.preventDefault</code>.</p>\\n',\n    'type': '[event: Event]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Reka UI Popover in Vue\nDESCRIPTION: This code snippet shows how to add custom styles to the Reka UI Popover component using CSS within a Vue component.  It targets specific elements (PopoverTrigger, PopoverContent, PopoverArrow) with class names to customize their appearance. Styles include background color, border-radius, padding, and width to control the visual presentation of the Popover.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/overview/getting-started.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <PopoverRoot>\n    <PopoverTrigger class=\"PopoverTrigger\">\n      More info\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow class=\"PopoverArrow\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n\n<style>\n.PopoverTrigger {\n  background-color: white;\n  border-radius: 4px;\n}\n\n.PopoverContent {\n  border-radius: 4px;\n  padding: 20px;\n  width: 260px;\n  background-color: white;\n}\n\n.PopoverArrow {\n  background-color: white;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Disabled Items (Vue)\nDESCRIPTION: This Vue.js snippet shows how to create a dropdown menu and disable specific items. The `disabled` attribute is added to the `DropdownMenuItem` component, along with the `data-disabled` attribute for styling. This allows you to visually indicate that the item is not interactive. Dependencies: Reka-ui library is required for the dropdown menu components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem\n          class=\"DropdownMenuItem\"\n          disabled\n        >\n          …\n        </DropdownMenuItem>\n        <DropdownMenuItem class=\"DropdownMenuItem\">\n          …\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding an Active Item Indicator to the Navigation Menu in Vue\nDESCRIPTION: Shows how to include the optional `NavigationMenuIndicator` component within the `NavigationMenuList` to visually highlight the currently active `NavigationMenuTrigger`. This indicator often complements the `NavigationMenuViewport` by providing an animated visual cue. The example demonstrates the placement of the indicator in the Vue template after importing necessary components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item two content</NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator class=\"NavigationMenuIndicator\" />\n    </NavigationMenuList>\n\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Describing Available Slots for Custom Rendering - Vue\nDESCRIPTION: This code snippet instantiates a <SlotsTable> component with definitions for slots exposed by the tree component. Each slot entry provides the slot name, expected value types made available to the slot, and a short description (if provided). Slots enable consumers to inject custom rendering logic or access component state during template composition. Prerequisite: Vue, and the SlotsTable component must be available and registered in the consuming context.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TreeRoot.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'flattenItems',\n    'description': '',\n    'type': 'FlattenedItem<Record<string, any>>[]'\n  },\n  {\n    'name': 'modelValue',\n    'description': '',\n    'type': 'Record<string, any> | Record<string, any>[]'\n  },\n  {\n    'name': 'expanded',\n    'description': '',\n    'type': 'string[]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring RadioGroup Components in Vue\nDESCRIPTION: This snippet demonstrates how to import the necessary RadioGroup components (`RadioGroupIndicator`, `RadioGroupItem`, `RadioGroupRoot`) from the 'reka-ui' library within a Vue `<script setup>` block. It then shows the basic anatomical structure within the `<template>` section, nesting `RadioGroupItem` and `RadioGroupIndicator` inside `RadioGroupRoot` to create a functional radio button group.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/radio-group.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { RadioGroupIndicator, RadioGroupItem, RadioGroupRoot } from 'reka-ui'\n</script>\n\n<template>\n  <RadioGroupRoot>\n    <RadioGroupItem>\n      <RadioGroupIndicator />\n    </RadioGroupItem>\n  </RadioGroupRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable for Arrow Component in Vue\nDESCRIPTION: A Vue component that displays a table of props documentation for the Arrow component. It includes information about the as, asChild, height, rounded, and width props with their descriptions, types, requirements, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/HoverCardArrow.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'svg\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'height',\n    'description': '<p>The height of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '5'\n  },\n  {\n    'name': 'rounded',\n    'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'width',\n    'description': '<p>The width of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '10'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable with Component Data\nDESCRIPTION: This HTML snippet renders a `PropsTable` component, passing in an array of objects via the `:data` prop.  Each object represents a property, containing its name, description (HTML), type, requirement status, and default value. The `asChild` property is used to change the default rendered element.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationLast.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Animating Reka UI Components with Motion Vue Library (Vue/TypeScript)\nDESCRIPTION: Integrates Motion Vue animation library with Reka UI dialog components to provide flexible and performant animations using declarative initial, animate, and exit states. AnimatePresence manages presence animations for multiple elements while Motion provides animated transformations such as opacity, scale, and position. This approach requires installing the 'motion-v' library alongside reka-ui and Vue 3. It enables complex animated transitions including both enter and exit sequences responsive to component lifecycle.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/animation.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AnimatePresence, Motion } from 'motion-v'\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'reka-ui'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal>\n      <AnimatePresence multiple>\n        <DialogOverlay as-child>\n          <Motion\n            :initial=\"{ opacity: 0, scale: 0 }\"\n            :animate=\"{ opacity: 1, scale: 1 }\"\n            :exit=\"{ opacity: 0, scale: 0.6 }\"\n          />\n        </DialogOverlay>\n\n        <DialogContent as-child>\n          <Motion\n            :initial=\"{ opacity: 0, top: '0%' }\"\n            :animate=\"{ opacity: 1, top: '50%' }\"\n            :exit=\"{ opacity: 0, top: '30%' }\"\n          >\n            <h1>Hello from inside the Dialog!</h1>\n            <DialogClose>Close</DialogClose>\n          </Motion>\n        </DialogContent>\n      </AnimatePresence>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Content Transform Styles\nDESCRIPTION: This CSS code styles the `TooltipContent`, setting the `transform-origin` to a value calculated by the library.  It then defines a `scaleIn` animation that's applied to the tooltip content. The animation is composed of keyframes, which scales the content from 0 to 1 and adjusts opacity.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.TooltipContent {\n  transform-origin: var(--reka-tooltip-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PropsTable component with prop data array in Vue.js\nDESCRIPTION: This code snippet defines a PropsTable component in Vue.js that displays documentation for component properties. The data array contains objects describing each prop, including name, description, type, requirement status, and default value. The component leverages Vue's bind syntax to pass the data array as props for rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuItem.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'li\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>A unique value that associates the item with an active value when the navigation menu is controlled.</p>\\n<p>This prop is managed automatically when uncontrolled.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: MethodsTable Component Usage in Vue\nDESCRIPTION: A Vue component that renders a table of global methods for Reka UI. Currently, it only documents the useId method which generates unique IDs to prevent hydration issues in server-side rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ConfigProvider.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<MethodsTable :data=\"[\n  {\n    'name': 'useId',\n    'description': '<p>The global <code>useId</code> injection as a workaround for preventing hydration issue.</p>\\n',\n    'type': '() => string'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Methods Table for Reka-UI Date Field (Vue/JSON)\nDESCRIPTION: This Vue snippet uses the MethodsTable component to present all available public methods for the Date Field component. Each method descriptor in the JSON array details the method's name, description, and type signature, exclusively for documentation display. Dependencies include the MethodsTable component; intended input is a structured array of method descriptors, with no execution of method logic.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateFieldRoot.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<MethodsTable :data=\"[\n  {\n    'name': 'isDateUnavailable',\n    'description': '<p>A function that returns whether or not a date is unavailable</p>\\n',\n    'type': 'Matcher'\n  },\n  {\n    'name': 'setFocusedElement',\n    'description': '<p>Helper to set the focused element inside the DateField</p>\\n',\n    'type': '(el: HTMLElement) => void'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Animation for Navigation Menu in Vue and CSS\nDESCRIPTION: Shows how to create smooth overlapping animation effects when moving between navigation items by using custom CSS with data-motion attributes and CSS variables exposed by the component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent class=\"NavigationMenuContent\">\n          Item one content\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent class=\"NavigationMenuContent\">\n          Item two content\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n\n    <NavigationMenuViewport class=\"NavigationMenuViewport\" />\n  </NavigationMenuRoot>\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.NavigationMenuContent {\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation-duration: 250ms;\n  animation-timing-function: ease;\n}\n.NavigationMenuContent[data-motion=\"from-start\"] {\n  animation-name: enterFromLeft;\n}\n.NavigationMenuContent[data-motion=\"from-end\"] {\n  animation-name: enterFromRight;\n}\n.NavigationMenuContent[data-motion=\"to-start\"] {\n  animation-name: exitToLeft;\n}\n.NavigationMenuContent[data-motion=\"to-end\"] {\n  animation-name: exitToRight;\n}\n\n.NavigationMenuViewport {\n  position: relative;\n  width: var(--reka-navigation-menu-viewport-width);\n  height: var(--reka-navigation-menu-viewport-height);\n  transition: width, height, 250ms ease;\n}\n\n@keyframes enterFromRight {\n  from {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes enterFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes exitToRight {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n}\n\n@keyframes exitToLeft {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Methods Definition in HTML Template\nDESCRIPTION: A MethodsTable component listing the methods exposed by the DateRangePicker component, including their names, descriptions, and types.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangeFieldRoot.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<MethodsTable :data=\"[\n  {\n    'name': 'isDateUnavailable',\n    'description': '<p>A function that returns whether or not a date is unavailable</p>\\n',\n    'type': 'Matcher'\n  },\n  {\n    'name': 'setFocusedElement',\n    'description': '',\n    'type': '(el: HTMLElement) => void'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Date Field Component Props - JavaScript\nDESCRIPTION: This JavaScript array literal is used to define the properties ('props') for a Vue component, likely related to date input or display fields. Each object in the array represents a single prop and includes metadata like its name, a description (often containing HTML/markdown), its expected TypeScript type, whether it's required, and an optional default value. This data structure is typically consumed by a documentation generator or a component like `<PropsTable>` to render a user-friendly list of component properties.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerInput.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'part',\n    'description': '<p>The part of the date to render</p>\\n',\n    'type': '\\'day\\' | \\'month\\' | \\'year\\' | \\'hour\\' | \\'minute\\' | \\'second\\' | \\'dayPeriod\\' | \\'literal\\' | \\'timeZoneName\\'',\n    'required': true\n  },\n  {\n    'name': 'type',\n    'description': '<p>The type of field to render (start or end)</p>\\n',\n    'type': '\\'start\\' | \\'end\\'',\n    'required': true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Emitting Selection Event in Vue Radio Item Component (TypeScript Event Handler)\nDESCRIPTION: This snippet defines the 'select' event emitted by the Radio Item component when a user selects a link by mouse or keyboard. It outlines the event's type as '[event: SelectEvent]' and includes a usage note that calling event.preventDefault in the event handler prevents the navigation menu from closing. This emitted event allows parent components to respond to user interaction and control navigation behaviors accordingly. It depends on Vue's event emission system and integration with the component's interaction logic.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupItem.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n<EmitsTable :data=\"[  {    'name': 'select',    'description': '<p>Event handler called when the user selects a link (via mouse or keyboard).</p>\\n<p>Calling <code>event.preventDefault</code> in this handler will prevent the navigation menu from closing when selecting that link.</p>\\n',    'type': '[event: SelectEvent]'  }]\" />\n```\n\n----------------------------------------\n\nTITLE: Correct Prop Usage Between modelValue and defaultValue in Reka UI SwitchRoot Components (Vue)\nDESCRIPTION: Demonstrates the error of using modelValue prop on uncontrolled components and clarifies that defaultValue should be used to initialize state in uncontrolled components. Ensures that developers use the props consistent with the controlled/uncontrolled pattern. Inputs are boolean/string initial values for component state; outputs are components behaving as intended with controlled or internal state management. This prevents state management bugs and unexpected behaviors.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/controlled-state.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<!-- ❌ Incorrect: -->\\n<SwitchRoot :modelValue=\"true\" />\\n\\n<!-- ✅ Correct: -->\\n<SwitchRoot defaultValue=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties with PropsTable in Vue\nDESCRIPTION: Uses the Reka UI `<PropsTable>` component to display documentation for component properties. The `:data` prop is bound to a JavaScript array of objects, where each object defines a property's 'name', 'description' (can include HTML), 'type', 'required' status, and optional 'default' value. This example defines the 'as', 'asChild', 'disabled', and 'textValue' props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSubTrigger.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'textValue',\n    'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\\nUse this when the content is complex, or you have non-textual content inside.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Floating Component Events Table in Vue\nDESCRIPTION: This snippet demonstrates use of an <EmitsTable> Vue component to list events emitted by the floating UI component and their signature details. It supplies an array of emit objects, each describing an event name, description, and event parameter types, to aid implementers in wiring up custom handlers. The snippet relies on the <EmitsTable> component being present in the project, and does not execute any code outside the Vue template context.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarContent.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Slots Definition in HTML Template\nDESCRIPTION: A SlotsTable component showing the available slots for the DateRangePicker component, including their names and the type of data they receive.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangeFieldRoot.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '',\n    'type': 'DateRange | null'\n  },\n  {\n    'name': 'segments',\n    'description': '',\n    'type': '{ start: { part: SegmentPart; value: string; }[]; end: { part: SegmentPart; value: string; }[]; }'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Reka UI PropsTable in Vue\nDESCRIPTION: This snippet uses the PropsTable component in a Vue template to render an auto-generated table describing component properties for a button variant or similar Reka UI component. Dependencies include the PropsTable Vue component and relevant CSS. Each property—such as 'as', 'asChild', 'disabled', and 'value'—includes detailed type information, default values, and descriptions intended for developer documentation. Expected input is an array of property definition objects; output is a rendered table summarizing prop details for consumers, with no interactive behavior.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TabsTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the tab.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'value',\n    'description': '<p>A unique value that associates the trigger with a content.</p>\\n',\n    'type': 'string | number',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Basic useFilter example - TypeScript\nDESCRIPTION: Demonstrates the basic usage of the useFilter utility. Imports the useFilter function, initializes the startsWith, endsWith, and contains functions, and shows simple examples of their usage with console logs. This example shows the fundamental string filtering capabilities.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-filter.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useFilter } from 'reka-ui'\n\nconst { startsWith, endsWith, contains } = useFilter()\n\nconsole.log(startsWith('hello', 'he')) // true\nconsole.log(endsWith('hello', 'lo')) // true\nconsole.log(contains('hello', 'ell')) // true\n```\n\n----------------------------------------\n\nTITLE: PropsTable Component Usage in Vue\nDESCRIPTION: A Vue component that renders a table of global props for Reka UI. The data array contains configuration options including dir, locale, nonce, scrollBody, and useId, each with their descriptions, types, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ConfigProvider.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'dir',\n    'description': '<p>The global reading direction of your application. This will be inherited by all primitives.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false,\n    'default': '\\'ltr\\''\n  },\n  {\n    'name': 'locale',\n    'description': '<p>The global locale of your application. This will be inherited by all primitives.</p>\\n',\n    'type': 'string',\n    'required': false,\n    'default': '\\'en\\''\n  },\n  {\n    'name': 'nonce',\n    'description': '<p>The global <code>nonce</code> value of your application. This will be inherited by the related primitives.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'scrollBody',\n    'description': '<p>The global scroll body behavior of your application. This will be inherited by the related primitives.</p>\\n',\n    'type': 'boolean | ScrollBodyOption',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'useId',\n    'description': '<p>The global <code>useId</code> injection as a workaround for preventing hydration issue.</p>\\n',\n    'type': '(() => string)',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Combobox Anatomy - Vue\nDESCRIPTION: This code snippet demonstrates the basic structure and anatomy of the Combobox component using various sub-components like ComboboxRoot, ComboboxAnchor, ComboboxInput, ComboboxTrigger, ComboboxCancel, ComboboxPortal, ComboboxContent, ComboboxViewport, ComboboxItem, ComboboxItemIndicator, ComboboxGroup, ComboboxLabel, and ComboboxSeparator. It showcases how these components are pieced together to form a functional combobox.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ComboboxAnchor,\n  ComboboxArrow,\n  ComboboxCancel,\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot,\n  ComboboxSeparator,\n  ComboboxTrigger,\n  ComboboxViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxAnchor>\n      <ComboboxInput />\n      <ComboboxTrigger />\n      <ComboboxCancel />\n    </ComboboxAnchor>\n\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxViewport>\n          <ComboboxItem>\n            <ComboboxItemIndicator />\n          </ComboboxItem>\n\n          <ComboboxGroup>\n            <ComboboxLabel />\n            <ComboboxItem>\n              <ComboboxItemIndicator />\n            </ComboboxItem>\n          </ComboboxGroup>\n          <ComboboxSeparator />\n        </ComboboxViewport>\n\n        <ComboboxArrow />\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: API reference for ToolbarSeparator component\nDESCRIPTION: Explains the visual separator element used to distinguish items in the toolbar, supporting orientation through data attributes. References meta documentation for further details.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-orientation]',\n      values: ['vertical', 'horizontal'],\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder in Select (Reka-UI, Vue)\nDESCRIPTION: Demonstrates usage of the placeholder prop on SelectValue and the data-placeholder attribute for styling the trigger in a Vue select dropdown using Reka-UI. Requires the 'reka-ui' library and accompanying CSS for styles. Placeholder text appears when no value is selected, with custom styling possible through the data-placeholder attribute.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'reka-ui'\nimport './styles.css'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger class=\"SelectTrigger\">\n      <SelectValue placeholder=\"Pick an option\" />\n      <SelectIcon />\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>…</SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Duplicate Toasts - Vue\nDESCRIPTION: This code snippet demonstrates how to render multiple instances of the same toast using a `v-for` loop.  The `count` variable is incremented on form submission, creating a new ToastRoot element for each increment.  Each toast displays the 'Saved!' message.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <form @submit=\"count++\">\n      ...\n      <button>save</button>\n    </form>\n\n    <ToastRoot v-for=\"(_, index) in count\" :key=\"index\">\n      <ToastDescription>Saved!</ToastDescription>\n    </ToastRoot>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Teleport Props Table with Vue.js\nDESCRIPTION: This Vue.js snippet renders a table named 'PropsTable'.  It passes an array of prop definitions as data. Each object in the array defines a prop with properties such as 'name', 'description', 'type', and 'required'.  The 'description' field contains HTML formatted text and hyperlinks for referencing the Vue.js documentation. The component receives data using the `:data` prop.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectPortal.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Create a Range Slider - Vue\nDESCRIPTION: Creates a range slider by adding multiple thumbs and values.  Uses default values for the two thumbs to represent the range.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'\n</script>\n\n<template>\n  <SliderRoot :default-value=\"[25, 75]\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Props Table for Teleport in Vue - Vue\nDESCRIPTION: This snippet defines a PropsTable within a Vue template, passing a fixed dataset enumerating the available props on a custom or wrapped Teleport component. Each prop entry specifies its name, type, required status, and a description with embedded HTML, including references to the Vue.js docs. The PropsTable component expects the 'data' prop to be properly structured as an array of objects describing each prop; outputs are the rendered documentation table for developer consumption. There are no dynamic or reactive dependencies, and usage assumes Vue 3.x with support for JSX/HTML-like templates. Limitations: This code is meant for auto-generated documentation and should not be edited directly; customization may require updating the generation script.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/HoverCardPortal.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence for Conditional Rendering in Vue\nDESCRIPTION: Demonstrates the basic usage of the Presence component to conditionally render a child element based on the `present` prop. It shows how to wrap the element and use data attributes (`data-[state]`) to hook into CSS animations for transitions on enter and leave. Requires the Presence component definition and associated CSS animation classes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/presence.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Presence :present=\"isVisible\">\n    <div\n      :data-open=\"isVisible ? 'open' : 'close'\"\n      class=\"data-[state=open]:animate-fadeIn data-[state=closed]:animate-fadeOut\"\n    >\n      <slot />\n    </div>\n  </Presence>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component in Vue to Document Button Props\nDESCRIPTION: A Vue component that displays a table of props documentation. It includes details for the 'as' prop which allows changing the rendered element, and the 'asChild' prop which enables composition patterns.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationNext.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Vue Component for Props Documentation\nDESCRIPTION: A Vue component that displays a table listing prop details such as name, description, type, requirement status, and default value for a React component. Dependencies include Vue and a PropsTable component that accepts data as a prop.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NumberFieldInput.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'input\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Emitting Dropdown Menu State Change Events in Vue (JavaScript/JSON)\nDESCRIPTION: Defines an emitted event 'update:open' which notifies parent components when the dropdown menu's open state changes. The event handler receives a boolean payload indicating the new open state, enabling controlled two-way binding and reactivity in the Vue application.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuRoot.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the submenu changes.</p>\\n',\n    'type': '[payload: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Hydration Workaround with ConfigProvider in Vue/Nuxt\nDESCRIPTION: Shows a specific workaround for a hydration issue in Vue/Nuxt environments (especially Nuxt > 3.10 before Vue 3.5). It demonstrates passing a custom `useId` function (specifically Nuxt's `useId`) to the `ConfigProvider` via the `:use-id` prop to fix rendering inconsistencies related to IDs. This is a temporary fix inspired by Headless UI.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/config-provider.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n <!-- in Nuxt's app.vue -->\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'reka-ui'\n\nconst useIdFunction = () => useId()\n</script>\n\n<template>\n   <ConfigProvider :use-id=\"useIdFunction\">\n     …\n   </ConfigProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Presence Component with Force Mount in Vue\nDESCRIPTION: Illustrates how to use the `forceMount` prop to keep the component's main content rendered in the DOM at all times, regardless of the `present` prop's state. The example also shows how to use the scoped slot (`v-slot=\"{ present }\"`) to control the visibility of *internal* elements based on the component's actual `present` state. Requires the Presence component definition.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/presence.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Presence v-slot=\"{ present }\" :present=\"isVisible\" :force-mount=\"true\">\n    <div>\n      This content will always be rendered\n\n      <div v-if=\"present\">\n        This content is hidden\n      </div>\n    </div>\n  </Presence>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props with PropsTable in HTML\nDESCRIPTION: This snippet shows how to use the PropsTable component to document common component props in Reka UI. It passes a data array containing information about three common props: 'as' for element customization, 'asChild' for composition, and 'forceMount' for controlled mounting.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupIndicator.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Custom API creation for Popover with default arrow configuration\nDESCRIPTION: Shows how to abstract the primitive Popover parts into a custom component, setting default configurations such as arrow appearance, making it easier to reuse with consistent styling.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_7\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Popover, PopoverContent, PopoverTrigger } from './your-popover'\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger>Popover trigger</PopoverTrigger>\n    <PopoverContent>Popover content</PopoverContent>\n  </Popover>\n</template>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// your-popover.ts\nexport { default as PopoverContent } from 'PopoverContent.vue'\n\nexport { PopoverRoot as Popover, PopoverTrigger } from 'reka-ui'\n\n```\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { PopoverContentEmits, PopoverContentProps } from 'reka-ui'\nimport { PopoverContent, PopoverPortal, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<PopoverContentProps>()\nconst emits = defineEmits<PopoverContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <PopoverPortal>\n    <PopoverContent v-bind=\"{ ...forwarded, ...$attrs }\">\n      <slot />\n    </PopoverContent>\n  </PopoverPortal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table in Vue\nDESCRIPTION: This snippet uses the PropsTable component and passes it an array of data via the `:data` prop. This data represents the properties of another component. The provided data array consists of objects, each describing a prop with attributes such as name, description, type, whether it's required, and its default value. This example shows how to use PropsTable to showcase other component's configuration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/Separator.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'decorative',\n    'description': '<p>Whether or not the component is purely decorative. &lt;br&gt;When <code>true</code>, accessibility-related attributes\\nare updated so that that the rendered element is removed from the accessibility tree.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>Orientation of the component.</p>\\n<p>Either <code>vertical</code> or <code>horizontal</code>. Defaults to <code>horizontal</code>.</p>\\n',\n    'type': '\\'vertical\\' | \\'horizontal\\'',\n    'required': false,\n    'default': '\\'horizontal\\''\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data (JavaScript)\nDESCRIPTION: This JavaScript array defines the properties (props) accepted by a UI component. Each object in the array represents a single prop and includes details like its name, a description (which may contain HTML), data type, whether it's required, and a default value if applicable. This data is consumed by a documentation component like <PropsTable> to render a reference table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectItem.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'textValue',\n    'description': '<p>Optional text used for typeahead purposes.</p>\\n<p>By default the typeahead behavior will use the <code>.textContent</code> of the <code>SelectItemText</code> part.</p>\\n<p>Use this when the content is complex, or you have non-textual content inside.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\\n',\n    'type': 'AcceptableValue',\n    'required': true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Dropdown Menu Slots\nDESCRIPTION: Defines the slots available for the dropdown menu component, including the 'open' slot which provides access to the current open state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSub.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: API Reference: Overlay Layer of Alert Dialog\nDESCRIPTION: Provides details about the overlay layer component that covers the inert parts of the UI when the dialog is active. It ensures focus remains within the dialog and visually indicates modal activation. The DataAttributesTable mentions the styling attributes reflecting the dialog state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogOverlay.md -->\n\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-state]',\n      values: ['open', 'closed'],\n    }\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection - Reka UI Tree - Vue\nDESCRIPTION: This example shows how to enable multiple item selection in the Tree component. It uses `v-model` with an array to manage the selected items and sets the `multiple` prop to `true`. The script defines a list of items and a reactive array to hold selected items.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TreeRoot } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref([people[0], people[1]])\n</script>\n\n<template>\n  <TreeRoot\n    v-model=\"selectedPeople\"\n    multiple\n  >\n    ...\n  </TreeRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu Submenus in Vue\nDESCRIPTION: Provides an example of how to create nested submenus within a Reka UI Context Menu. It uses the `ContextMenuSub`, `ContextMenuSubTrigger`, `ContextMenuPortal`, and `ContextMenuSubContent` components to define the submenu structure and its content, including adding an optional `ContextMenuArrow` for visual connection.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuSub>\n          <ContextMenuSubTrigger>Sub menu →</ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent>\n              <ContextMenuItem>Sub menu item</ContextMenuItem>\n              <ContextMenuItem>Sub menu item</ContextMenuItem>\n              <ContextMenuArrow />\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling the Navigation Menu Indicator with CSS\nDESCRIPTION: Provides CSS rules to style the `NavigationMenuIndicator` component, identified by the `.NavigationMenuIndicator` class. It sets a background color, positions it absolutely, and defines CSS transitions for width and transform properties for smooth animation. The style specifically targets the horizontal orientation using the `[data-orientation=\"horizontal\"]` attribute selector and utilizes exposed CSS custom properties (`--reka-navigation-menu-indicator-position`, `--reka-navigation-menu-indicator-size`) for dynamic positioning and sizing based on the active item.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.NavigationMenuIndicator {\n  background-color: grey;\n  position: absolute;\n  transition: width, transform, 250ms ease;\n}\n\n.NavigationMenuIndicator[data-orientation=\"horizontal\"] {\n  left: 0;\n  height: 3px;\n  transform: translateX(var(--reka-navigation-menu-indicator-position));\n  width: var(--reka-navigation-menu-indicator-size);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties Data (JavaScript)\nDESCRIPTION: This JavaScript array defines properties for a Reka UI component, intended to be passed to a PropsTable component. It includes the 'as' prop for specifying the rendered element/component and the 'asChild' prop for composition, detailing their types, descriptions, defaults, and requirement status.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerHeader.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data for PropsTable\nDESCRIPTION: Provides a JavaScript array of objects defining the properties ('props') for a Reka UI component. This data structure is bound to the ':data' attribute of a 'PropsTable' component, likely within a Vue.js or similar framework context, to dynamically render a props documentation table. It details the 'as' prop for element rendering, 'asChild' for composition, and 'feature' for specific behavioral modes ('focusable', 'fully-hidden').\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/VisuallyHidden.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n:data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'feature',\n    'description': '',\n    'type': '\\'focusable\\' | \\'fully-hidden\\'',\n    'required': false,\n    'default': '\\'focusable\\''\n  }\n]\"\n```\n\n----------------------------------------\n\nTITLE: Collision-Aware Animations - Vue\nDESCRIPTION: This Vue component provides the basic structure for a ContextMenu designed to implement collision-aware animations.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API Reference: Portal for Overlay and Content\nDESCRIPTION: Describes the Portal component which renders overlay and content elements into the document body, facilitating modal display on top of other content. The documentation briefly explains the portal's rendering behavior and includes relevant external reference details.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogPortal.md -->\n```\n\n----------------------------------------\n\nTITLE: Generating Custom ID with useId in Vue TypeScript\nDESCRIPTION: This snippet shows how to use the useId function from reka-ui with a custom string argument to assign a specific ID, instead of an auto-generated one. Useful for cases where a deterministic or known ID is required, such as for accessibility or testing. Dependency: reka-ui library. Input: custom string ('test-id'); Output: the same string as the ID.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-id.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useId } from 'reka-ui'\n\nconst buttonId = useId('test-id') // test-id\n```\n\n----------------------------------------\n\nTITLE: Constraining Dropdown Menu Content Size (Vue, CSS)\nDESCRIPTION: This Vue.js and CSS snippet demonstrates how to constrain the width and height of the dropdown menu content. It uses CSS custom properties `--reka-dropdown-menu-trigger-width` and `--reka-dropdown-menu-content-available-height`. The Vue component defines the layout, while CSS uses these properties to style the dropdown content. This approach allows the menu to match the trigger width and avoid exceeding the viewport's height.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent\n        class=\"DropdownMenuContent\"\n        :side-offset=\"5\"\n      >\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table for Vue Teleport Component\nDESCRIPTION: This snippet defines and displays the props table for the Vue Teleport component.  It leverages a hypothetical PropsTable component, likely iterating through an array of prop definitions.  Each object in the array describes a prop with properties such as name, description, type, and whether it's required. It dynamically renders these properties in the table. The snippet depends on a PropsTable component and the Vue framework.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToastPortal.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js Component Props for Customizable Arrow Component\nDESCRIPTION: This snippet defines the prop interface for a Vue.js arrow component, detailing customizable attributes such as the rendered element type ('as'), compositional override ('asChild'), dimensions ('height' and 'width'), and style variations ('rounded'). Dependencies include a Vue.js environment and usage of the PropsTable component to declare props metadata. Key parameters include: 'as' (element or component type, default 'svg'), 'asChild' (boolean to enable composition override), 'height' and 'width' (numeric pixel sizes with defaults 5 and 10 respectively), and 'rounded' (boolean to enable a rounded arrow design). The expected input is an array of prop descriptors that control rendering behavior and stylings. Limitations noted include incompatibility of 'rounded' when 'as' or 'asChild' are utilized.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxArrow.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'svg\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'height',\n    'description': '<p>The height of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '5'\n  },\n  {\n    'name': 'rounded',\n    'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'width',\n    'description': '<p>The width of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '10'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Collision-Aware Animations for Reka UI Menubar (Vue/CSS)\nDESCRIPTION: Demonstrates how to apply different animations to the `MenubarContent` based on its calculated position relative to the viewport (collision detection). The CSS uses the `data-side` attribute (updated at runtime by `reka-ui`) to select and apply distinct slide-up or slide-down keyframe animations.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\">\n          …\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.MenubarContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.MenubarContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.MenubarContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Props Data for Reka UI Component (JavaScript)\nDESCRIPTION: This JavaScript array defines the properties (props) accepted by the Reka UI component. Each object in the array describes a single prop, detailing its name, HTML description (potentially including formatting tags), data type, whether it is required, and its default value if available. This data is intended to be processed by a documentation component like `<PropsTable>` to render a human-readable table of props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/StepperRoot.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': \"'div'\"\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the step that should be active when initially rendered. Use when you do not need to control the state of the steps.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': \"'1'\"\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable. <br> If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': \"'ltr' | 'rtl'\",\n    'required': false\n  },\n  {\n    'name': 'linear',\n    'description': '<p>Whether or not the steps must be completed in order.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': \"'true'\"\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the step to activate. Can be bound as <code>v-model</code>.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>The orientation the steps are laid out.\\nMainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down).</p>\\n',\n    'type': \"'vertical' | 'horizontal'\",\n    'required': false,\n    'default': \"'horizontal'\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties for PropsTable\nDESCRIPTION: This snippet shows data being passed to a PropsTable component, likely within a Vue or similar framework. It defines properties 'as' and 'asChild', including their descriptions, types, requirement status, and default values, intended for automatic documentation generation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarGrid.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'table\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using Native Vue Slot with Scoped Slots in Vue.js\nDESCRIPTION: Demonstrates the default behavior of Vue's native slot where attributes such as 'id' assigned to the slot element are exposed as scoped slot props. The parent template must explicitly bind these props to child elements to apply attributes. Shows a component 'Comp.vue' using a slot with an 'id' attribute and how the parent consumes this via 'v-slot'. Dependencies include Vue.js 3 and default slot usage. Inputs involve assigning attributes to the slot, outputs require manually passing scoped slot props to children. This pattern ensures explicit control but requires additional binding.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/slot.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Native Slot -->\n<!-- Comp.vue -->\n<template>\n  <slot id=\"reka-01\">\n    ...\n  </slot>\n</template>\n\n<!-- parent template -->\n<template>\n  <Comp v-slot=\"slotProps\">\n    <button :id=\"slotProps.id\">...<button>\n  <Comp>\n<template>\n```\n\n----------------------------------------\n\nTITLE: Using Date Utility Functions with @internationalized/date in Reka UI\nDESCRIPTION: Demonstrates how to use various utility functions from Reka UI for working with date objects. These functions handle operations like parsing dates, comparing dates, creating date ranges, and generating calendar structures. The example shows how to import and use these functions with DateValue objects from the @internationalized/date package.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/dates.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DateValue } from '@internationalized/date'\nimport { CalendarDate } from '@internationalized/date'\n\nimport {\n  createDateRange,\n  createDecade,\n  createMonth,\n  createYear,\n  createYearRange,\n  getDaysInMonth,\n  hasTime,\n  isAfter,\n  isAfterOrSame,\n  isBefore,\n  isBeforeOrSame,\n  isBetween,\n  isBetweenInclusive,\n  isCalendarDateTime,\n  isZonedDateTime,\n  parseStringToDateValue,\n  toDate,\n} from 'reka-ui/date'\n\nconst date = new CalendarDate(1995, 8, 18)\nconst minDate = new CalendarDate(1995, 8, 1)\nconst maxDate = new CalendarDate(1995, 8, 31)\n\nparseStringToDateValue('1995-08-18', date) // returns a DateValue object\ntoDate(date) // returns a Date object\nisCalendarDateTime(date) // returns false\nisZonedDateTime(date) // returns false\nhasTime(date) // returns false\ngetDaysInMonth(date) // returns 31\nisAfter(date, minDate) // returns true\nisBeforeOrSame(date, maxDate) // returns true\nisAfterOrSame(date, minDate) // returns true\nisBefore(date, maxDate) // returns true\nisBetweenInclusive(date, minDate, maxDate) // returns true\nisBetween(date, minDate, maxDate) // returns true\ncreateMonth({ dateObj: new CalendarDate(1995, 8, 18), weekStartsOn: 0, locale: 'en', fixedWeeks: true }) // returns a grid of days as DateValue for the month, also containing the dateObj, plus an array of days for the month\ncreateYear({ dateObj: new CalendarDate(1995, 8, 18), numberOfMonths: 2, pagedNavigation: true }) // returns an array of months as DateValue, centered around the dateObj taking into account the numberOfMonths and pagedNavigation when returning the months\ncreateDecade({ dateObj: new CalendarDate(1995, 8, 18), startIndex: -10, endIndex: 10 }) // returns a decade centered around the dateObj\ncreateDateRange({ start: new CalendarDate(1995, 8, 18), end: new CalendarDate(2005, 8, 18) }) // returns an array of dates as DateValue between the start and end date\ncreateYearRange({ start: new CalendarDate(1995, 8, 18), end: new CalendarDate(2005, 8, 18) }) // returns an array of years as DateValue between the start and end date\n```\n\n----------------------------------------\n\nTITLE: Using Vue Native Transition Component to Animate Reka UI Dialog (Vue/TypeScript)\nDESCRIPTION: Demonstrates usage of Vue's native <Transition> component to animate Reka UI DialogOverlay and DialogContent components. Wrapping these components inside <Transition> elements using the 'fade' transition class enables smooth opacity transitions during mount and unmount. The DialogRoot is bound with v-model:open to control visibility. This method requires defining CSS transition styles for fade-enter-active, fade-leave-active, fade-enter-from, and fade-leave-to. Dependencies include Vue 3 and the reka-ui library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/animation.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'reka-ui'\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal>\n      <Transition name=\"fade\">\n        <DialogOverlay />\n      </Transition>\n      <Transition name=\"fade\">\n        <DialogContent>\n          <h1>Hello from inside the Dialog!</h1>\n          <DialogClose>Close</DialogClose>\n        </DialogContent>\n      </Transition>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n\n<style>\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Rendering Prop Table with PropsTable Component in Vue\nDESCRIPTION: This snippet uses the PropsTable Vue component to render a table that documents the available props for a UI component. It passes an array of objects, each representing a prop with properties for its name, description (with possible HTML and links), type definitions, whether it's required, and default values. The table is auto-generated for internal documentation purposes, relies on PropsTable being available in the Vue project, and expects the prop data structure to match the depicted schema.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToastAction.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'altText',\n    'description': '<p>A short description for an alternate way to carry out the action. For screen reader users\\nwho will not be able to navigate to the button easily/quickly.</p>\\n',\n    'type': 'string',\n    'required': true\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Constrain Content Size\nDESCRIPTION: This code shows how to constrain the content width to match the trigger width, and the content height to fit within the viewport.  It utilizes CSS custom properties exposed by the library to set the width and max-height of the tooltip content.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipPortal>\n      <TooltipContent\n        class=\"TooltipContent\"\n        :side-offset=\"5\"\n      >\n        …\n      </TooltipContent>\n    </TooltipPortal>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Props Data for PropsTable - Reka-UI - JavaScript\nDESCRIPTION: This snippet defines the data structure used by the `PropsTable` component to render documentation for component properties. It is an array of objects, where each object describes a single prop, specifying its name, an HTML string for its description, data type, required status, and an optional default value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerGrid.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Vue.js Component Emitted Events Using JSON\nDESCRIPTION: This snippet defines the emitted events of a Vue.js component in JSON format. It describes the 'select' event emitted when a user selects an item via mouse or keyboard. It details the event's type and explains that preventing the default action will keep the menu open. This structured event declaration serves as a guide for consumers of the component to handle events properly.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuItem.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"select\",\n    \"description\": \"<p>Event handler called when the user selects an item (via mouse or keyboard). &lt;br&gt;\\nCalling <code>event.preventDefault</code> in this handler will prevent the menu from closing when selecting that item.</p>\\n\",\n    \"type\": \"[event: Event]\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using injectContext in Custom Accordion Content (Vue)\nDESCRIPTION: This snippet demonstrates how to use `injectContext` within a custom accordion content component in Reka UI. It imports `injectAccordionItemContext` and `injectAccordionRootContext` to access and utilize the internal state of the accordion component, such as `isSingleOpen`. The component computes a value based on the context provided by the parent accordion components. This usage allows to create custom UI logic based on existing component internal state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/inject-context.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- CustomAccordionContent.vue -->\n<script setup>\nimport { injectAccordionItemContext, injectAccordionRootContext } from 'reka-ui'\n\nconst accordionRootContext = injectAccordionRootContext()\nconst accordionItemContext = injectAccordionItemContext()\n\nconst isSingleOpen = computed(() =>\n  accordionRootContext.isSingle.value && accordionItemContext.open.value\n)\n</script>\n\n<template>\n  <div>\n    …\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Label - Vue\nDESCRIPTION: This example demonstrates how to use the Label component to provide a custom label for the Combobox input field, enhancing accessibility for screen readers. By associating the Label with the ComboboxInput via the `for` and `id` attributes, the component explicitly defines the input's purpose for assistive technologies.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ComboboxInput, ComboboxRoot, Label } from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <Label for=\"person\">Person: </Label>\n    <ComboboxInput\n      id=\"person\"\n      placeholder=\"Select a person\"\n    />\n    …\n  </ComboboxRoot>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Collision-Aware Animations - CSS\nDESCRIPTION: This CSS snippet uses `data-side` and `data-align` attributes to create different animations based on the collision direction of the ContextMenuContent.  It defines `slideUp` and `slideDown` animations.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.ContextMenuContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.ContextMenuContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VisuallyHidden Component (Vue)\nDESCRIPTION: Demonstrates the basic structure for using the `VisuallyHidden` component in a Vue setup script and template. It shows how to import the component and wrap content within its tags, making the wrapped content visually hidden but accessible to assistive technologies. Requires the `VisuallyHidden` component from 'reka-ui'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/visually-hidden.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { VisuallyHidden } from 'reka-ui'\n</script>\n\n<template>\n  <VisuallyHidden>\n    <slot />\n  </VisuallyHidden>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Props Table Using Reka UI PropsTable Component in Vue\nDESCRIPTION: This snippet utilizes the <PropsTable> component to render a documentation table for component props in Reka UI using Vue. The data prop is an array of objects, each describing a property with keys such as 'name', 'description' (supports HTML content), 'type', 'required', and 'default'. This approach depends on the Reka UI library, and assumes that <PropsTable> is globally or locally registered. Inputs include the props metadata array; outputs are a rendered table in the browser. No manual editing is recommended as the file is auto-generated.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerHeadCell.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Importing AspectRatio component in Vue 3 setup script\nDESCRIPTION: A Vue 3 script setup block importing the 'AspectRatio' component from the 'reka-ui' library, illustrating the process of including the component for use within a Vue component. This snippet is essential for integrating the feature into a Vue application, ensuring dependency on 'reka-ui' is met.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/aspect-ratio.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { AspectRatio } from 'reka-ui'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Documentation Using Vue Template\nDESCRIPTION: This Vue snippet defines a PropsTable component with a prop named \"data\" containing an array of objects. Each object details a specific property of a component, including its name, description formatted with HTML, type information, whether it is required, and its default value where applicable. The snippet is for documenting component usage and enhancing developer reference. Dependencies include Vue rendering and a PropsTable component that accepts the \"data\" prop as an array of prop definitions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerAnchor.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Providing Vue Component Slot Data for Current Submenu Open State in JSON\nDESCRIPTION: This snippet defines a slot named 'open' for the Vue submenu component that exposes the current open state as a boolean. It allows consumers of the component to access the submenu's open state reactively within slot scope for custom rendering or state-based logic.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSub.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessibility practices and keyboard interactions\nDESCRIPTION: Provides details on the accessibility features of the toolbar, including focus management via roving tabindex and keyboard controls such as Tab, Space, Enter, Arrow keys, Home, and End to facilitate keyboard navigation and activation of items.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<KeyboardTable\n  :data=\"[\n    {\n      keys: ['Tab'],\n      description: 'Moves focus to the first item in the group.',\n    },\n    {\n      keys: ['Space'],\n      description: 'Activates/deactivates the item.',\n    },\n    {\n      keys: ['Enter'],\n      description: 'Activates/deactivates the item.',\n    },\n    {\n      keys: ['ArrowDown'],\n      description: '<span> Moves focus to the next item depending on <Code>orientation</Code>.</span>',\n    },\n    {\n      keys: ['ArrowRight'],\n      description: '<span> Moves focus to the next item depending on <Code>orientation</Code>.</span>',\n    },\n    {\n      keys: ['ArrowUp'],\n      description: '<span> Moves focus to the previous item depending on <Code>orientation</Code> .</span>',\n    },\n    {\n      keys: ['ArrowLeft'],\n      description: '<span> Moves focus to the previous item depending on <Code>orientation</Code> .</span>',\n    },\n    {\n      keys: ['Home'],\n      description: '<span>Moves focus to the first item.</span>',\n    },\n    {\n      keys: ['End'],\n      description: '<span>Moves focus to the last item.</span>',\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Event Caveat - Vue\nDESCRIPTION: This code demonstrates a limitation where mouse events are not fired directly on the SliderRoot element, recommending the use of pointer events instead.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<SliderRoot\n  @mousedown=\"() => { console.log('onMouseDown')  }\"\n  @mouseup=\"() => { console.log('onMouseUp')  }\"\n>\n  …\n</SliderRoot>\n```\n\n----------------------------------------\n\nTITLE: Enhancing SSR Support with forceMount in Accordion, Collapsible, Tabs, NavigationMenu\nDESCRIPTION: Modifies these components to always render when 'forceMount' is set, even if inactive, requiring manual visibility control via 'hidden' attribute for SSR compatibility.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <TabsRoot\n    v-slot=\"{ modelValue }\"\n    default-value=\"tab1\"\n  >\n    <TabsContent\n      value=\"tab1\"\n      force-mount\n      :hidden=\"modelValue !== 'tab1'\"\n    >\n      …\n    </TabsContent>\n    <TabsContent\n      value=\"tab2\"\n      force-mount\n      :hidden=\"modelValue !== 'tab2'\"\n    >\n      …\n    </TabsContent>\n  </TabsRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Radio Items (Vue)\nDESCRIPTION: This Vue.js snippet demonstrates how to create a dropdown menu with radio items using `DropdownMenuRadioGroup` and `DropdownMenuRadioItem`. It also uses `DropdownMenuItemIndicator` and an `Icon` from `@iconify/vue` for the checkmark.  It binds the selected radio value to a reactive `color` variable using `v-model`.  Dependencies are the Reka-ui and iconify libraries, and Vue's reactivity system.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  DropdownMenuContent,\n  DropdownMenuItemIndicator,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'reka-ui'\nimport { ref } from 'vue'\n\nconst color = ref(false)\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuRadioGroup v-model=\"color\">\n          <DropdownMenuRadioItem value=\"red\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Red\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"blue\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Blue\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"green\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Green\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Structuring Stepper Components in Vue\nDESCRIPTION: Shows how to import all Stepper component parts from Reka UI and structure them in a Vue template. This demonstrates the basic anatomy of the Stepper component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/stepper.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { StepperDescription, StepperIndicator, StepperItem, StepperRoot, StepperTitle, StepperTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <StepperRoot>\n    <StepperItem>\n      <StepperTrigger />\n      <StepperIndicator />\n\n      <StepperTitle />\n      <StepperDescription />\n\n      <StepperSeparator />\n    </StepperItem>\n  </StepperRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Splitter Component Anatomy in Vue\nDESCRIPTION: This code demonstrates the basic structure of the Splitter component, including SplitterGroup, SplitterPanel, and SplitterResizeHandle. It shows how to import and assemble the components in a Vue template for a simple splitter layout.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SplitterGroup, SplitterPanel, SplitterResizeHandle } from 'reka-ui'\n</script>\n\n<template>\n  <SplitterGroup>\n    <SplitterPanel />\n    <SplitterResizeHandle />\n  </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props for Scroll Behavior in Vue.js\nDESCRIPTION: This snippet describes the props of a Vue.js scroll component, including customizable rendering tags, scrollbar visibility modes such as 'auto', 'always', 'scroll', and 'hover', reading direction options ('ltr' or 'rtl'), and delay for hiding scrollbars after interaction. Key props include 'as' to specify the rendered element/component, 'asChild' to enable rendering using a child element and merging props, and 'scrollHideDelay' for controlling scrollbars hide timing in milliseconds. These props collectively manage the visual and behavioral facets of scrollbars and element composition.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ScrollAreaRoot.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'scrollHideDelay',\n    'description': '<p>If type is set to either <code>scroll</code> or <code>hover</code>, this prop determines the length of time, in milliseconds, &lt;br&gt; before the scrollbars are hidden after the user stops interacting with scrollbars.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '600'\n  },\n  {\n    'name': 'type',\n    'description': '<p>Describes the nature of scrollbar visibility, similar to how the scrollbar preferences in MacOS control visibility of native scrollbars.</p>\\n<p><code>auto</code> - means that scrollbars are visible when content is overflowing on the corresponding orientation. &lt;br&gt;\\n<code>always</code> - means that scrollbars are always visible regardless of whether the content is overflowing.&lt;br&gt;\\n<code>scroll</code> - means that scrollbars are visible when the user is scrolling along its corresponding orientation.&lt;br&gt;\\n<code>hover</code> - when the user is scrolling along its corresponding orientation and when the user is hovering over the scroll area.</p>\\n',\n    'type': '\\'scroll\\' | \\'always\\' | \\'auto\\' | \\'hover\\'',\n    'required': false,\n    'default': '\\'hover\\''\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data - JavaScript\nDESCRIPTION: This JavaScript array literal defines the properties accepted by a UI component. Each object in the array represents a single prop with details such as its name, a description (which can include HTML tags), data type, whether it is required, and an optional default value. This data is designed to be consumed by a component that visualizes it as a documentation table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxSeparator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Styling Reka UI Components Using CSS Classes in Vue (TypeScript)\nDESCRIPTION: Demonstrates how to import Reka UI accordion components in a Vue 3 setup script with TypeScript and apply styling by assigning CSS classes to component parts. The example shows a basic AccordionRoot with AccordionItem components where the items receive a dedicated class for styling. This method requires adding CSS rules for the applied classes in a style block. Dependencies include Vue 3 setup syntax, TypeScript support, and Reka UI component library. Input includes components and assigned class names, output is styled accordion parts within the component's rendered DOM.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/styling.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"reka-ui\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem class=\"AccordionItem\" value=\"item-1\" />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\n\n<style>\n.AccordionItem {\n  /* ... */\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI using npm (Bash)\nDESCRIPTION: Installs the Reka UI library as a project dependency using the npm package manager. This command adds the latest version of `reka-ui` to the `dependencies` section of the project's `package.json` and installs it into `node_modules`. Requires npm to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Emits for Interaction Events\nDESCRIPTION: This snippet defines custom events emitted by the Vue component to handle user interactions such as auto-focusing behaviors on close, detecting escape key presses, and pointer down events occurring outside the dismissable layer. Each event is described with its name, purpose, ability to be prevented, and the type of event object passed to the handler. This setup enables controlled event-driven responses within parent components or frameworks using the Vue emits API.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectContent.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering - Vue\nDESCRIPTION: This example shows how to implement custom filtering logic in the Combobox component. It utilizes the `useFilter` composable to define a custom filtering function and applies it to the list of items based on the search term entered in the input field. Setting `ignoreFilter` to `true` disables the internal filtering mechanism of the `ComboboxRoot`, allowing for full control over the filtering process.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot, useFilter } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\nconst searchTerm = ref('')\n\nconst { startsWith } = useFilter({ sensitivity: 'base' })\nconst filteredPeople = computed(() => people.filter(p => startsWith(p.name, searchTerm.value)))\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"selectedPeople\"\n    :ignore-filter=\"true\"\n  >\n    <ComboboxInput v-model=\"searchTerm\" />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in filteredPeople\"\n          :key=\"person.id\"\n          :value=\"person\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Generating Props Table with data - Vue\nDESCRIPTION: This Vue component renders a table using the data prop to display component props. It takes an array of objects as input, where each object represents a prop and contains properties like 'name', 'description', 'type', 'required', and 'default'. The component iterates through the data and generates rows for each prop, rendering the prop details in the table cells. It leverages the PropsTable component for generating this table. The `data` prop is an array of prop definitions, each with details about the prop like its name, description, type, and whether it is required or not.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectItemText.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Stepper Props Table with Vue PropsTable Component - Vue\nDESCRIPTION: This snippet utilizes the custom <PropsTable> Vue component to render documentation for the stepper component's props. It passes an array of objects, each detailing the prop's name, description, type, required status, and default value. This aids developers in understanding the available configuration options, dependencies include PropsTable from the reka-ui documentation library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/StepperItem.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'completed',\n    'description': '<p>Shows whether the step is completed.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the step.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'step',\n    'description': '<p>A unique value that associates the stepper item with an index</p>\\n',\n    'type': 'number',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data for PropsTable (JavaScript Array)\nDESCRIPTION: Provides an array of JavaScript objects defining properties for a Reka UI component. Each object specifies the prop's 'name', 'description' (including HTML), 'type', 'required' status, and 'default' value. This array is intended to be passed as the ':data' prop to a PropsTable component (likely within a Vue environment) for rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CheckboxIndicator.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[{\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing PropsTable with Composition Props in Vue\nDESCRIPTION: This snippet initializes the PropsTable Vue component with an array of prop definitions related to rendering customization in Reka UI. It defines the 'as' prop for specifying rendered elements or components, and the 'asChild' boolean for merging props and behavior via composition. The component expects 'data' as a prop, and the default output is a rendered table of prop details suitable for documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectIcon.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering SlotsTable for Tooltip Component in Vue\nDESCRIPTION: Vue component rendering a SlotsTable documenting the 'open' slot available in the tooltip component, which provides the current open state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipRoot.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table with PropsTable Component in Vue\nDESCRIPTION: Renders the PropsTable component in a Vue template, passing in an array of prop definitions as the data. Each object in the array contains metadata for a prop, including name, description (which may contain embedded HTML), type, whether it is required, and its default value if applicable. There are no external dependencies beyond Vue and the existence of the PropsTable component. Expected input is an array of prop definition objects, and output is a rendered documentation table; no interactive functionality is provided.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarGrid.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'table\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Props Table for UI Component - Vue - JavaScript\nDESCRIPTION: This snippet uses the PropsTable component in Vue to document the available props for a UI component, such as 'as' and 'asChild'. It lists key details including description, type, required status, and default value in a structured array. The snippet is dependent on the PropsTable component, expects a 'data' prop formatted as an array of prop definition objects, and outputs a rendered documentation table in HTML. It is intended for use in component documentation sites such as reka-ui and may rely on the parent documentation layout for full context.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/EditableEditTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: CSS styling for custom anchor element layout\nDESCRIPTION: Provides styling for the custom anchor container element, setting background color and padding to visually distinguish it as an anchor point for the Popover.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.Row {\n  background-color: gainsboro;\n  padding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Props Table using Vue\nDESCRIPTION: This Vue component renders a table displaying properties (props) with their details. It receives an array of prop definitions via the `data` prop. Each element in `data` is an object representing a prop, containing its name, description, type, whether it's required, and its default value. The component iterates through this data to create table rows, presenting the prop's information in a formatted way. The component relies on the `PropsTable` component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DialogClose.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component (HTML/Vue)\nDESCRIPTION: Demonstrates the usage of a PropsTable component (likely within a Vue template) to display component properties. The properties data is passed dynamically via the ':data' prop, which binds to a JavaScript array.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CheckboxIndicator.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[...data...]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props Documentation with PropsTable in Vue\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component to document Vue component props. It defines two properties: 'as' for specifying the rendered element/component, and 'asChild' for component composition.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionHeader.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'h3\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands to install the required dependencies for a Nuxt 3 project using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/playground/nuxt/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Paste Behavior - Vue\nDESCRIPTION: This example shows how to enable paste behavior for adding tags automatically when text is pasted into the input field. The `add-on-paste` prop enables this feature. Requires `v-model` for value binding.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tags-input.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'reka-ui'\n</script>\n\n<template>\n  <TagsInputRoot\n    v-model=\"modelValue\"\n    add-on-paste\n  >\n    …\n  </TagsInputRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Teleport Component Props in Vue.js\nDESCRIPTION: This Vue snippet defines a PropsTable component with an array of Teleport-related props, including 'defer', 'disabled', 'forceMount', and 'to'. Each property entry includes its expected type, whether it is required, and detailed HTML-formatted descriptions with Vue documentation references. The snippet is intended for use in Vue 3.5.0+ applications to control teleport behavior such as deferred mounting, disabling teleport, forced mounting for animation control, and specifying a teleport target. It requires Vue.js and the PropsTable component to render prop metadata in UI.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DialogPortal.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props for PropsTable Component in Vue\nDESCRIPTION: Defines an array of property descriptor objects passed as the 'data' prop to a PropsTable Vue component. Each object specifies the prop's name, detailed HTML description, type, whether it is required, and default values if any. This enables automatic rendering of component prop documentation. The snippet requires Vue framework and a PropsTable component accepting a 'data' prop array. Key props include 'as' to specify the rendered element or component, 'asChild' to override rendering and merge child props, and 'date' as a required DateValue for the cell.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerCell.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'date',\n    'description': '<p>The date value for the cell</p>\\n',\n    'type': 'DateValue',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build Locally\nDESCRIPTION: Commands to locally preview the Nuxt 3 production build using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/playground/nuxt/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable with Data - HTML\nDESCRIPTION: This snippet renders a PropsTable component and passes a data array to it. The data array contains objects that define the properties of a component, including their names, descriptions, types, required status, and default values. This component is used to present the properties of a Reka UI component in a tabular format.  The component likely iterates through the data to create rows and columns for each property.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverArrow.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'svg\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'height',\n    'description': '<p>The height of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '5'\n  },\n  {\n    'name': 'rounded',\n    'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'width',\n    'description': '<p>The width of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '10'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props for Reka UI Combobox Component in Vue\nDESCRIPTION: A Vue PropsTable component displaying all available props for a Combobox component, including rendering options, state management, and functionality configuration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxRoot.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'by',\n    'description': '<p>Use this to compare objects by a particular field, or pass your own comparison function for complete control over how objects are compared.</p>\\n',\n    'type': 'string | ((a: AcceptableValue, b: AcceptableValue) => boolean)',\n    'required': false\n  },\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the combobox when it is initially rendered. &lt;br&gt; Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the listbox when initially rendered. Use when you do not need to control the state of the Listbox</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[]',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the listbox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with listbox</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'highlightOnHover',\n    'description': '<p>When <code>true</code>, hover over item will trigger highlight</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'ignoreFilter',\n    'description': '<p>When <code>true</code>, disable the default filters</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the listbox. Can be binded with with <code>v-model</code>.</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[]',\n    'required': false\n  },\n  {\n    'name': 'multiple',\n    'description': '<p>Whether multiple options can be selected or not.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the Combobox. Can be binded with with <code>v-model:open</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'resetSearchTermOnBlur',\n    'description': '<p>Whether to reset the searchTerm when the Combobox input blurred</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'resetSearchTermOnSelect',\n    'description': '<p>Whether to reset the searchTerm when the Combobox value is selected</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using pnpm (Bash)\nDESCRIPTION: Executes the `test` script defined in `package.json` using pnpm. This command runs the project's automated tests to verify code correctness and prevent regressions. Requires pnpm and project dependencies to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table for Reka UI (HTML)\nDESCRIPTION: This snippet defines a PropsTable component in HTML. It receives a `data` prop, which is an array of objects. Each object in the array represents a property and contains details like name, description, type, required status, and default value. The component then renders a table displaying these details. The component is crucial for documenting the available props of the reka-ui library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToolbarToggleItem.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>A string value for the toggle group item. All items within a toggle group should use a unique value.</p>\\n',\n    'type': 'AcceptableValue',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots Documentation Table in Vue (Vue + Markdown)\nDESCRIPTION: Displays a <SlotsTable> component with detailed definitions for each named slot available in the Vue component. Each slot entry includes its name, description, and supported types to guide users in customizing slot content. Requires the <SlotsTable> component and a Markdown or Vue context supporting component documentation. The example includes slots for option rendering, a virtualizer instance, and a virtual item descriptor; no business logic is performed. Useful for auto-generating slot documentation for component consumers.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxVirtualizer.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'option',\n    'description': '',\n    'type': 'null | string | number | Record<string, any>'\n  },\n  {\n    'name': 'virtualizer',\n    'description': '',\n    'type': 'Virtualizer<HTMLElement, Element>'\n  },\n  {\n    'name': 'virtualItem',\n    'description': '',\n    'type': 'VirtualItem'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Collision-aware animations for Popover based on data attributes\nDESCRIPTION: Implements animations that respond to collision detection, changing animation states based on 'data-side' (top/bottom) attributes to create dynamic, direction-specific slide animations with CSS keyframes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.PopoverContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.PopoverContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.PopoverContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props in JavaScript Array\nDESCRIPTION: This snippet defines an array of objects, where each object specifies the details of a component prop for documentation purposes. Each object includes the prop's name, description (potentially containing HTML), type, required status, and optionally a default value. This structure is consumed by a documentation component like `<PropsTable>`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuLabel.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Data - Vue.js\nDESCRIPTION: This snippet renders the PropsTable component and provides it with data through the `:data` prop. The data is an array of objects, each representing a prop with its details such as name, description, type, requirement status, and default value. The PropsTable component likely processes this data to generate a formatted table displaying the prop information. No specific dependencies are listed but assumes that the `PropsTable` component has been defined and imported in the appropriate context.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarTrigger.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Emit Events Table for Component Interaction - Vue\nDESCRIPTION: This snippet demonstrates usage of the <EmitsTable> component for listing event names, expected payload types, and documentation for events a Vue component can emit. The listed events allow for controlled manipulation of expanded items and model value changes, supporting two-way data binding via v-model. Consumers should use this to emit or listen to these events within parent components. Dependencies: Vue, a registered EmitsTable component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TreeRoot.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:expanded',\n    'description': '',\n    'type': '[val: string[]]'\n  },\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value of the toggle changes.</p>\\n',\n    'type': '[val: Record<string, any>]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Teleport PropsTable Component\nDESCRIPTION: A Vue component that displays a table of Teleport component properties. The component receives data about props including names, descriptions, types, and whether they're required, with links to official Vue documentation where applicable.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxPortal.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Render Content When Hidden Using unmountOnHide Prop\nDESCRIPTION: Shows how to keep AccordionContent mounted and accessible in the DOM even when collapsed by setting ':unmount-on-hide=\"false\"'. This enhances accessibility and searchability.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/accordion.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AccordionRoot :unmount-on-hide=\"false\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: CSS for constraining Popover content dimensions\nDESCRIPTION: Shows how to style the Popover content to match trigger width and limit maximum height, using CSS custom properties such as '--reka-popover-trigger-width' and '--reka-popover-content-available-height' for flexible sizing.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.PopoverContent {\n  width: var(--reka-popover-trigger-width);\n  max-height: var(--reka-popover-content-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining SelectContent Dimensions with CSS Custom Properties\nDESCRIPTION: Shows CSS rules to constrain the width and maximum height of the SelectContent popup based on CSS custom properties that Reka-UI exposes when using position \"popper\". This enables the content width to match the trigger width and prevents content from exceeding the viewport height. Intended to complement the Vue component example configuring the SelectContent positioning mode for controlled dropdown sizing.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.SelectContent {\n  width: var(--reka-select-trigger-width);\n  max-height: var(--reka-select-content-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Props Table in Vue\nDESCRIPTION: This code renders a table of properties (props) based on the provided data. The `PropsTable` component receives a data array through the `:data` prop.  Each item in the array represents a prop and includes properties such as name, description, type, required status, and default value.  The resulting table displays these properties with their respective values and descriptions.  The component also provides links to the Composition guide for more details.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/EditableCancelTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Vue Component Props Definition\nDESCRIPTION: This snippet defines the props for the PropsTable Vue component, specifying the data structure used for displaying component property details. It includes detailed descriptions for 'as' and 'asChild' props, their types, default values, and purpose, facilitating component customization and documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DialogTitle.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'h2\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js Component Emitted Events Using JSON in Template\nDESCRIPTION: This snippet defines the emitted events for the component using a JSON array passed to an <EmitsTable> component. It declares a single event 'update:modelValue' which triggers when the model value changes, carrying a string payload representing the new value. This structure is used to automatically document or register emitted events for reactive model binding in Vue 3.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRadioGroup.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[payload: string]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties\nDESCRIPTION: This snippet defines the properties of a component, including their names, descriptions, types, required status, and default values. The data is structured in a JSON-like format within a PropsTable component used for generating documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerClose.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Panel Component Slots Documentation in Vue\nDESCRIPTION: A table component that shows available slots for the Panel component, providing state information about whether the panel is collapsed or expanded.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SplitterPanel.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'isCollapsed',\n    'description': '<p>Is the panel collapsed</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'isExpanded',\n    'description': '<p>Is the panel expanded</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Slots Data - JavaScript\nDESCRIPTION: This JavaScript array literal defines the documentation data for a component's slots. Each object describes a slot, providing its name, HTML description, and data type, enabling users to understand the content they can project into the component. This data is typically consumed by a documentation component to render a table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToggleGroupItem.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current value</p>\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'state',\n    'description': '<p>Current state</p>\n',\n    'type': '\\'on\\' | \\'off\\''\n  },\n  {\n    'name': 'pressed',\n    'description': '<p>Current pressed state</p>\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Current disabled state</p>\n',\n    'type': 'boolean'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component PropsTable in Vue\nDESCRIPTION: Displays a table of available props for a Radio Group component including their names, descriptions, types, requirements, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupRoot.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'defaultValue',\n    'description': '<p>The value of the radio item that should be checked when initially rendered.</p>\\n<p>Use when you do not need to control the state of the radio items.</p>\\n',\n    'type': 'AcceptableValue',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The reading direction of the combobox when applicable. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code> or assumes LTR (left-to-right) reading mode.</p>\\n',\n    'type': '\\'ltr\\' | \\'rtl\\'',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with radio items.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the radio item to check. Can be binded as <code>v-model</code>.</p>\\n',\n    'type': 'AcceptableValue',\n    'required': false\n  },\n  {\n    'name': 'name',\n    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>The orientation of the component.</p>\\n',\n    'type': '\\'vertical\\' | \\'horizontal\\'',\n    'required': false\n  },\n  {\n    'name': 'required',\n    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Keyboard interaction mapping for Popover accessibility\nDESCRIPTION: Documents keyboard controls following ARIA dialog patterns, including activating, closing, and focus navigation with space, enter, tab, shift + tab, and escape keys.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n<KeyboardTable\n  :data=\"[\n    {\n      keys: [' Space'],\n      description: 'Opens/closes the popover.',\n    },\n    {\n      keys: ['Enter'],\n      description: 'Opens/closes the popover.',\n    },\n    {\n      keys: ['Tab'],\n      description: 'Moves focus to the next focusable element',\n    },\n    {\n      keys: ['Shift + Tab'],\n      description: 'Moves focus to the previous focusable element',\n    },\n    {\n      keys: ['Esc'],\n      description: '<span> Closes the popover and moves focus to <code>PopoverTrigger</code>.</span>',\n    },\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data - JavaScript\nDESCRIPTION: This JavaScript array literal defines the documentation data for a component's properties (props). Each object in the array describes a single prop, including its name, HTML description, data type, required status, and default value where applicable. This data is typically consumed by a documentation component to render a table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToggleGroupItem.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the toggle.</p>\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>A string value for the toggle group item. All items within a toggle group should use a unique value.</p>\n',\n    'type': 'AcceptableValue',\n    'required': true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Emit Table (Vue)\nDESCRIPTION: This snippet generates a table describing the emits (events) of a Vue component. It uses an `EmitsTable` component, passing it data structured as a JSON array. Each object in the array represents an emit and specifies `name`, `description`, and `type`.  The output is a table providing information about the events emitted by the component, their purpose, and expected arguments.  The `EmitsTable` component is a dependency.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuSub.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[value: string]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component Emits (JavaScript)\nDESCRIPTION: Documents the events emitted by the Accordion component. Currently lists the `update:modelValue` event, describing its purpose (handler for expanded state changes) and the type of the emitted value (`string | string[]`). This data is consumed by the `EmitsTable` component for documentation rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionRoot.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the expanded state of an item changes</p>\\n',\n    'type': '[value: string | string[]]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider styles - CSS\nDESCRIPTION: Defines CSS styles for the vertical slider, including positioning, sizing, and color. Includes style modifications based on the orientation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.SliderRoot {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n.SliderRoot[data-orientation=\"vertical\"] {\n  flex-direction: column;\n  width: 20px;\n  height: 100px;\n}\n\n.SliderTrack {\n  position: relative;\n  flex-grow: 1;\n  background-color: grey;\n}\n.SliderTrack[data-orientation=\"vertical\"] {\n  width: 3px;\n}\n\n.SliderRange {\n  position: absolute;\n  background-color: black;\n}\n.SliderRange[data-orientation=\"vertical\"] {\n  width: 100%;\n}\n\n.SliderThumb {\n  display: block;\n  width: 20px;\n  height: 20px;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Root Component (Vue)\nDESCRIPTION: This Vue component defines the main structure of the Select input. It utilizes various components and hooks from the reka-ui library (likely a wrapper around Radix Vue Select) and icons from @radix-icons/vue to build the trigger, content portal, viewport, and navigation buttons, forwarding props and emits.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Select.vue -->\n<script setup lang=\"ts\">\nimport type { SelectRootEmits, SelectRootProps } from 'reka-ui'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'\nimport { SelectContent, SelectIcon, SelectPortal, SelectRoot, SelectScrollDownButton, SelectScrollUpButton, SelectTrigger, SelectValue, SelectViewport, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<SelectRootProps>()\nconst emits = defineEmits<SelectRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <SelectRoot v-bind=\"forward\">\n    <SelectTrigger>\n      <SelectValue />\n      <SelectIcon>\n        <ChevronDownIcon />\n      </SelectIcon>\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent>\n        <SelectScrollUpButton>\n          <ChevronUpIcon />\n        </SelectScrollUpButton>\n        <SelectViewport>\n          <slot />\n        </SelectViewport>\n        <SelectScrollDownButton>\n          <ChevronDownIcon />\n        </SelectScrollDownButton>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable for Component Documentation in Vue\nDESCRIPTION: This snippet demonstrates the use of the <PropsTable /> component in Vue to display a structured table of a component's props. The props data array includes fields for name, description, type, required flag, and default value, supporting detailed documentation. No external dependencies are required outside of Vue and the PropsTable component itself, and the input is a serialized array of prop definitions rendered using v-bind.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxGroup.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining SlotsTable Data Structure\nDESCRIPTION: This snippet defines data for the Vue component's slots. It consists of an array where each object describes a slot, typically including its name and a brief description, which is rendered by the `SlotsTable` component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerRoot.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'modelValue',\n    'description': '',\n    'type': 'DateRange'\n  }\n```\n\n----------------------------------------\n\nTITLE: Changing Default Element Using 'as' Prop in Vue and TypeScript\nDESCRIPTION: This example demonstrates how to change the default rendered element of a Primitive component from 'div' to 'span' by setting the default value for the 'as' prop when defining component props. This allows customizing the underlying HTML element.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/primitive.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { PrimitiveProps } from 'reka-ui'\nimport { Primitive } from 'reka-ui'\n\nconst props = withDefaults(defineProps<PrimitiveProps>(), {\n  as: 'span'\n})\n</script>\n\n<template>\n  <!-- Now this element will be rendered as `span` by default -->\n  <Primitive v-bind=\"props\">\n    ...\n  </Primitive>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props Documentation with PropsTable in Vue\nDESCRIPTION: Uses the PropsTable component to document the available properties of a UI component, including their names, descriptions, types, and default values. The props include configuration for rendering, accessibility features, and component state management.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuRadioItem.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'textValue',\n    'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\\nUse this when the content is complex, or you have non-textual content inside.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>The unique value of the item.</p>\\n',\n    'type': 'string',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props for Reka UI Component (JSON)\nDESCRIPTION: This data structure defines the available props for the component. Each object in the array represents a prop, specifying its name, description (which may contain HTML), data type, whether it's required, and its default value if applicable. This data is used by a documentation component like `PropsTable` to render the prop documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerNext.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"as\",\n    \"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\",\n    \"type\": \"AsTag | Component\",\n    \"required\": false,\n    \"default\": \"'div'\"\n  },\n  {\n    \"name\": \"asChild\",\n    \"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\",\n    \"type\": \"boolean\",\n    \"required\": false\n  },\n  {\n    \"name\": \"nextPage\",\n    \"description\": \"<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>RangeCalendarRoot</code>.</p>\\n\",\n    \"type\": \"((placeholder: DateValue) => DateValue)\",\n    \"required\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Virtualization for Large Lists in Listbox - Vue\nDESCRIPTION: Shows how to utilize the `ListboxVirtualizer` component to improve performance when rendering a large number of items. It wraps the `ListboxItem` within `ListboxVirtualizer`, passing the full list of options and a function to extract text content for search/accessibility. Requires importing components from `reka-ui` and `ref` from `vue`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/listbox.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ListboxContent, ListboxFilter, ListboxItem, ListboxRoot, ListboxVirtualizer } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n  // and a lot more\n]\n</script>\n\n<template>\n  <ListboxRoot>\n    <ListboxContent>\n      <ListboxVirtualizer\n        v-slot=\"{ option }\"\n        :options=\"people\"\n        :text-content=\"(opt) => opt.name\"\n      >\n        <ListboxItem :value=\"option\">\n          {{ option.name }}\n        </ListboxItem>\n      </ListboxVirtualizer>\n    </ListboxContent>\n  </ListboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Select Items in Vue.js with Data Attribute Styling\nDESCRIPTION: Illustrates disabling specific SelectItem components in a Select dropdown, using the 'disabled' attribute and the 'data-disabled' attribute for styling. Imports the necessary Reka-UI components for the Select anatomy in Vue with TypeScript, then marks a SelectItem as disabled. Accompanied by CSS that targets the data attribute to style disabled items visually, e.g., with a muted color. Useful for rendering inaccessible choices in dropdown lists.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem\n            class=\"SelectItem\"\n            disabled\n          >\n            …\n          </SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tooltip on Disabled Button\nDESCRIPTION: This snippet demonstrates how to correctly display a tooltip on a disabled button. Since disabled buttons do not fire events, the trigger must be rendered as a `span` element and the button styled with `pointerEvents: 'none'`. This prevents the button from receiving pointer events.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger as-child>\n      <span tabindex=\"0\">\n        <button\n          disabled\n          style=\"{ pointerEvents: 'none' }\"\n        >…</button>\n      </span>\n    </TooltipTrigger>\n    <TooltipContent>…</TooltipContent>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Props for FocusScope Component in Vue.js\nDESCRIPTION: This snippet defines the declarative properties used to configure the FocusScope component's behavior, including which element to render as, whether to merge child props, focus loop and trapping settings. It includes details on default values, expected data types, and links to further composition guides. Key props include 'as' to specify the rendered element, 'asChild' for prop merging with child components, 'loop' to enable keyboard focus cycling, and 'trapped' to prevent focus from leaving the scope. This facilitates accessible keyboard navigation in Vue.js applications.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/FocusScope.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, tabbing from last item will focus first tabbable\\nand shift+tab from first item will focus last tababble.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'trapped',\n    'description': '<p>When <code>true</code>, focus cannot escape the focus scope via keyboard,\\npointer, or a programmatic focus.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for Reka UI Component (JSON)\nDESCRIPTION: This data structure defines the available slots for the component. Each object in the array represents a slot, specifying its name, description (which may contain HTML), and the type of data provided by the slot. This data is used by a documentation component like `SlotsTable` to render the slot documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerNext.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"disabled\",\n    \"description\": \"<p>Current disable state</p>\\n\",\n    \"type\": \"boolean\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props for Documentation\nDESCRIPTION: Defines the available properties (props) for a Reka UI component using a structured JSON array. Each object in the array represents a single prop, detailing its name, description (often including HTML markup), data type, required status, and default value if applicable. This data is passed to a `PropsTable` component for rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarSubContent.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering a PropsTable Component in Vue\nDESCRIPTION: A Vue component that displays a table of component properties. The component receives data about the 'as' and 'asChild' properties, including descriptions, types, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectScrollUpButton.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Custom ScrollArea for Select Dropdown (CSS)\nDESCRIPTION: Provides CSS for styling custom scroll area components including root, viewport, scrollbar, and thumb elements in a select dropdown. Used alongside the ScrollArea primitives from Reka-UI for consistent, visually appealing scrollbars. Adjusts width, height, padding, and thumb appearance for a modern look.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ScrollAreaRoot {\n  width: 100%;\n  height: 100%;\n}\n\n.ScrollAreaViewport {\n  width: 100%;\n  height: 100%;\n}\n\n.ScrollAreaScrollbar {\n  width: 4px;\n  padding: 5px 2px;\n}\n\n.ScrollAreaThumb {\n  background: rgba(0, 0, 0, 0.3);\n  borderradius: 3px;\n}\n```\n\n----------------------------------------\n\nTITLE: Origin-Aware Animations - CSS\nDESCRIPTION: This CSS snippet utilizes the `--reka-context-menu-content-transform-origin` custom property to define the transform origin for the ContextMenuContent and applies a scaling animation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuContent {\n  transform-origin: var(--reka-context-menu-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Props Definition for Date Component\nDESCRIPTION: A PropsTable component that displays the available properties for a Vue date component, including general component behavior props like 'as' and 'asChild', and date-specific props like 'day' and 'month'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarCellTrigger.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'day',\n    'description': '',\n    'type': 'DateValue',\n    'required': true\n  },\n  {\n    'name': 'month',\n    'description': '',\n    'type': 'DateValue',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Implementation for Arrow Component in HTML/Vue\nDESCRIPTION: A Vue component that displays a props table for the Arrow component. The table shows configuration options including element rendering, composition behavior, and arrow dimensions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipArrow.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'svg\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'height',\n    'description': '<p>The height of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '5'\n  },\n  {\n    'name': 'width',\n    'description': '<p>The width of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '10'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props Table Data Structure for Vue Component - JavaScript\nDESCRIPTION: This snippet defines a props table as a JavaScript array embedded in a PropsTable Vue component. It details several props including 'as', 'asChild', and 'nextPage' with their types, default values, and descriptions. This data drives the display of component API documentation in a structured format.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarNext.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'nextPage',\n    'description': '<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>CalendarRoot</code>.</p>\\n',\n    'type': '((placeholder: DateValue) => DateValue)',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component in Vue.js\nDESCRIPTION: This snippet demonstrates the usage of a PropsTable component to display documentation for Vue component props. The component receives a data array containing metadata about props including name, description, type, required status, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuIndicator.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Props Table with Reka UI\nDESCRIPTION: This snippet defines the configuration for the props table. It utilizes the `PropsTable` component and passes a `data` prop. The `data` prop is an array of objects, where each object defines a single prop with properties like 'name', 'description', 'type', 'required', and 'default'. This table is used to document the available props of a Reka UI component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AspectRatio.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'ratio',\n    'description': '<p>The desired ratio. Eg: 16/9</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '1'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Dropdown Menu in Vue with Reka UI\nDESCRIPTION: This snippet demonstrates how to import and structure all parts of a Dropdown Menu component using Reka UI. It shows the proper nesting and organization of different subcomponents to create a fully functional dropdown with groups, checkboxes, radio items, and submenus.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuArrow,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger />\n\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuLabel />\n        <DropdownMenuItem />\n\n        <DropdownMenuGroup>\n          <DropdownMenuItem />\n        </DropdownMenuGroup>\n\n        <DropdownMenuCheckboxItem>\n          <DropdownMenuItemIndicator />\n        </DropdownMenuCheckboxItem>\n\n        <DropdownMenuRadioGroup>\n          <DropdownMenuRadioItem>\n            <DropdownMenuItemIndicator />\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger />\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent />\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n\n        <DropdownMenuSeparator />\n        <DropdownMenuArrow />\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Items in Reka UI Menubar (Vue)\nDESCRIPTION: Shows how to create a group of mutually exclusive radio button items within a `reka-ui` Menubar using `MenubarRadioGroup` and `MenubarRadioItem`. `v-model` on the group manages the selected value, and `MenubarItemIndicator` (with an icon) displays the selection.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'reka-ui'\n\nconst color = ref('blue')\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarRadioGroup v-model=\"color\">\n            <MenubarRadioItem value=\"red\">\n              <MenubarItemIndicator>\n                <Icon icon=\"radix-icons:check\" />\n              </MenubarItemIndicator>\n              Red\n            </MenubarRadioItem>\n            <MenubarRadioItem value=\"blue\">\n              <MenubarItemIndicator>\n                <Icon icon=\"radix-icons:check\" />\n              </MenubarItemIndicator>\n              Blue\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Collision-aware Animations\nDESCRIPTION: This snippet illustrates how to create animations for the tooltip content that are aware of collisions by using `data-side` and `data-align` attributes. It demonstrates conditional animation based on `data-side` which changes at runtime to reflect the tooltip's side.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent class=\"TooltipContent\">\n      …\n    </TooltipContent>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Portal Container in Vue.js Dialog\nDESCRIPTION: Shows how to redirect the dialog's portal into a custom DOM element by passing a ref as the portal container. Useful for integrating dialogs into specific layout sections or modals outside the main app root.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dialog.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'reka-ui'\n\nconst container = ref(null)\n</script>\n\n<template>\n  <div>\n    <DialogRoot>\n      <DialogTrigger />\n      <DialogPortal to=\"container\">\n        <DialogOverlay />\n        <DialogContent>...</DialogContent>\n      </DialogPortal>\n    </DialogRoot>\n\n    <div ref=\"container\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Property Table with Reka-UI PropsTable in Vue\nDESCRIPTION: This Vue snippet uses the Reka-UI PropsTable component to render a documentation table for UI component properties. Required dependencies include a Vue environment and the Reka-UI library. The 'data' property is passed as an array of prop definitions, where each object describes a prop's name, detailed HTML-formatted description, type, whether it is required, and any default value. Inputs are the property definition objects; output is a rendered documentation table. Ensure that all prop information follows the prescribed schema for correct rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarLabel.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component in Vue\nDESCRIPTION: This snippet showcases the `<PropsTable>` component being used within a Vue template, likely part of the Reka UI documentation. It receives component property definitions via the `:data` prop, which is bound to a JavaScript array of objects. The data defines properties like `as` and `asChild`, detailing their purpose, type, required status, and default values for rendering in a documentation table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerHeader.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Components in Vue\nDESCRIPTION: This code snippet demonstrates how to import specific Popover components (PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger) from the 'reka-ui' library within a Vue component.  It is essential for using the Popover functionality. The imported components are then used within the template to structure the Popover.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/overview/getting-started.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Popover.vue -->\n<script setup lang=\"ts\">\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>More info</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent>\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props Documentation Table in Vue (Vue + Markdown)\nDESCRIPTION: Renders a <PropsTable> component, passing an array of prop definitions, each specifying its name, description, type, and required status. Designed for documenting a Vue component's API within a Markdown or Vue documentation file. Required dependencies: <PropsTable> component and support for array-object props; input values describe properties such as estimated size, available options, overscan, and type-ahead text content resolver. Outputs an interactive or static table for developer reference. No direct logic constraints, but data must be structured as shown.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxVirtualizer.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'estimateSize',\n    'description': '<p>Estimated size (in px) of each item</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'options',\n    'description': '<p>List of items</p>\\n',\n    'type': 'AcceptableValue[]',\n    'required': true\n  },\n  {\n    'name': 'overscan',\n    'description': '<p>Number of items rendered outside the visible area</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'textContent',\n    'description': '<p>Text content for each item to achieve type-ahead feature</p>\\n',\n    'type': '((option: AcceptableValue) => string)',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable for Component Documentation in Vue\nDESCRIPTION: This snippet renders a PropsTable Vue component and provides a structured array of prop objects as its data source. Dependencies include the PropsTable component, which expects an array of prop definitions with fields for name, description, type, required, and default. The input is a hardcoded JavaScript array; the output is a props documentation table rendered in the UI. No dynamic code execution occurs, as this is intended for auto-generated documentation pages.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/NavigationMenuTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data for PropsTable - JSON\nDESCRIPTION: This JSON array defines the properties (props) accepted by a UI component. Each object in the array represents a single prop, specifying its `name`, `description` (which includes HTML), `type`, `required` status, and optionally a `default` value. This data is used by the `<PropsTable>` component to render a formatted table of component props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectLabel.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"name\": \"as\",\n    \"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\",\n    \"type\": \"AsTag | Component\",\n    \"required\": false,\n    \"default\": \"'div'\"\n  },\n  {\n    \"name\": \"asChild\",\n    \"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\",\n    \"type\": \"boolean\",\n    \"required\": false\n  },\n  {\n    \"name\": \"for\",\n    \"description\": \"\",\n    \"type\": \"string\",\n    \"required\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js PropsTable Component Props as Data Array\nDESCRIPTION: This snippet defines the props metadata for a Vue.js PropsTable component using a data array. Each object describes a prop with its name, rich HTML description, type declaration, required flag, and default value if specified. This structure is used for generating dynamic prop tables in Vue UI documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxLabel.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'for',\n    'description': '',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Checkbox Items (Vue)\nDESCRIPTION: This Vue.js snippet shows how to create a dropdown menu with checkbox items.  It uses `DropdownMenuCheckboxItem` and `DropdownMenuItemIndicator` with an `Icon` from the `@iconify/vue` library.  It also utilizes `v-model` to bind the checked state. Dependencies include Reka-ui and iconify libraries.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from 'reka-ui'\nimport { ref } from 'vue'\n\nconst checked = ref(false)\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem v-model=\"checked\">\n          <DropdownMenuItemIndicator>\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Checkbox item\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Binding Controlled SwitchRoot Component Using Vue's v-model in Reka UI\nDESCRIPTION: Illustrates leveraging Vue’s v-model directive as syntactic sugar for two-way binding on the SwitchRoot component. It binds the isActive ref directly, abstracting the explicit event listener setup for @update:model-value. Requires Reka UI Switch components and Vue's ref for state. Inputs and outputs are handled automatically via v-model for reactive state synchronization. This simplifies controlled component implementation, maintaining synchronized state in parent contexts.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/controlled-state.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport { SwitchRoot, SwitchThumb } from 'reka-ui'\\nimport { ref } from 'vue'\\n\\nconst isActive = ref(false)\\n</script>\\n\\n<template>\\n  <SwitchRoot v-model=\"isActive\">\\n    <SwitchThumb />\\n  </SwitchRoot>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Example of Toolbar with dropdown menu primitive\nDESCRIPTION: Showcases how to compose toolbar items with other primitives like DropdownMenu, utilizing the `as-child` prop for integration. Demonstrates nested component structure with trigger and content within the toolbar.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_7\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ToolbarRoot>\n    <ToolbarButton>Action 1</ToolbarButton>\n    <ToolbarSeparator />\n    <DropdownMenuRoot>\n      <ToolbarButton as-child>\n        <DropdownMenuTrigger>Trigger</DropdownMenuTrigger>\n      </ToolbarButton>\n      <DropdownMenuContent>…</DropdownMenuContent>\n    </DropdownMenuRoot>\n  </ToolbarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props with Documentation in JSON Format\nDESCRIPTION: This snippet defines an array of objects representing Vue component props for documentation generation, each object detailing the prop's name, description with HTML formatting, type, whether it is required, and its default value if available. It supports props that govern rendering behavior ('as', 'asChild') and mounting control ('forceMount'). This data structure is typically consumed by documentation tooling or prop table components. It expects a Vue environment for integration and requires no runtime dependencies itself.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuItemIndicator.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Slots with SlotsTable in Reka UI (Vue)\nDESCRIPTION: Shows how to pass an array of slot definitions to the `<SlotsTable>` component within a Vue template. Each object specifies the slot's name, description (HTML allowed), and expected type or structure (using TypeScript-like syntax). This renders a table detailing the component's available slots for documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationList.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'items',\n    'description': '<p>Pages item</p>\\n',\n    'type': '{ type: \\'ellipsis\\'; } | { type: \\'page\\'; value: number; }'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props for Submenu Open State Control in JSON\nDESCRIPTION: This snippet defines the props of a Vue submenu component in JSON format, specifying options for uncontrolled default open state and controlled open state using v-model. Key props include 'defaultOpen' for the initial open state (boolean, optional) and 'open' as a controlled boolean that can be used with v-model:open. It requires integration with a Vue UI component to control rendering based on these props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSub.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the submenu when it is initially rendered. Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the menu. Can be used as <code>v-model:open</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Slots Data for Reka UI Component (JavaScript)\nDESCRIPTION: This JavaScript array defines the available slots and their exposed props (slot props) for the Reka UI component. Each object describes a slot prop, including its name, a description of its purpose, and its data type. This data is intended to be consumed by a documentation component like `<SlotsTable>` to inform users about the data they can access within the component's slots.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/StepperRoot.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current step</p>\\n',\n    'type': 'number | undefined'\n  },\n  {\n    'name': 'totalSteps',\n    'description': '<p>Total number of steps</p>\\n',\n    'type': 'number'\n  },\n  {\n    'name': 'isNextDisabled',\n    'description': '<p>Whether or not the next step is disabled</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'isPrevDisabled',\n    'description': '<p>Whether or not the previous step is disabled</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'isFirstStep',\n    'description': '<p>Whether or not the first step is active</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'isLastStep',\n    'description': '<p>Whether or not the last step is active</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'goToStep',\n    'description': '<p>Go to a specific step</p>\\n',\n    'type': ''\n  },\n  {\n    'name': 'nextStep',\n    'description': '<p>Go to the next step</p>\\n',\n    'type': ''\n  },\n  {\n    'name': 'prevStep',\n    'description': '<p>Go to the previous step</p>\\n',\n    'type': ''\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable for Arrow Component in HTML/Vue\nDESCRIPTION: A PropsTable component that displays documentation for all available props of an Arrow component including as, asChild, height, rounded, and width properties. It provides details on their types, requirements, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuArrow.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'svg\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'height',\n    'description': '<p>The height of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '5'\n  },\n  {\n    'name': 'rounded',\n    'description': '<p>When <code>true</code>, render the rounded version of arrow. Do not work with <code>as</code>/<code>asChild</code></p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'width',\n    'description': '<p>The width of the arrow in pixels.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '10'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using useDateFormatter for Date Formatting in Vue\nDESCRIPTION: This code snippet demonstrates how to use the `useDateFormatter` hook in a Vue component to format dates. It imports necessary dependencies from `@internationalized/date` and `reka-ui`, creates a reactive date value using `ref`, initializes the formatter with a locale, and then uses it within the template to display the month in a short format.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-date-formatter.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { DateValue } from '@internationalized/date'\nimport type { Ref } from 'vue'\nimport { CalendarDate, getLocalTimeZone } from '@internationalized/date'\nimport { toDate, useDateFormatter } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst value = ref(new CalendarDate(1995, 8, 18)) as Ref<DateValue>\n// provide the locale\nconst formatter = useDateFormatter('en')\n</script>\n\n<template>\n  <span>\n    <!-- output the month in short format. e.g.: Jan, Feb, etc. -->\n    {{ formatter.custom(value.toDate(getLocalTimeZone()), { month: 'short' }) }}\n  </span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Providing Component SlotsTable in Vue\nDESCRIPTION: This section presents the available slots of the Reka UI component via the SlotsTable Vue component. It documents each slot's name, description, and expected type, helping consumers understand slot usage and expected data types. The snippet depends on the 'SlotsTable' Vue component and receives a slot definition array as a prop. The primary input is a list of slot metadata; output is a table for documentation. Limitations are that only explicitly listed slots are displayed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxFilter.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current input values</p>\\n',\n    'type': 'string | undefined'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: API reference for ToolbarToggleItem component\nDESCRIPTION: Details individual toggle items within a toggle group, with data attributes indicating toggle state ('on'/'off'), disabled state, and orientation. Includes meta documentation for comprehensive context.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-state]',\n      values: ['on', 'off'],\n    },\n    {\n      attribute: '[data-disabled]',\n      values: 'Present when disabled',\n    },\n    {\n      attribute: '[data-orientation]',\n      values: ['vertical', 'horizontal'],\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component with Vue.js\nDESCRIPTION: This Vue.js snippet defines a PropsTable component that receives a data prop describing component properties for UI rendering. It lists two props: 'as', which determines the HTML element or component to render (defaulting to 'div'), and 'asChild', a boolean that allows overriding the rendered element by merging child props. The component is used to document or configure props in a user interface, requiring the 'PropsTable' component to be available and Vue.js framework.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectScrollDownButton.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Emitted Events (Emits) in Reka UI (Vue/JavaScript)\nDESCRIPTION: Provides an array of JavaScript objects defining the events emitted by a Reka UI component, intended for use with a documentation generation tool (like `<EmitsTable>`). Each object specifies the event name, description (including HTML formatting), and the expected type signature of the event payload. Events cover user interactions such as escape key presses and focus/pointer events occurring outside the component's layer.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/HoverCardContent.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[{\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Portal Container for Alert Dialog\nDESCRIPTION: Shows how to specify a custom container element into which the alert dialog portals are rendered, allowing for flexible positioning and styling of the modal overlay. Uses Vue's ref to target a DOM element for portal rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst container = ref(null)\n</script>\n\n<template>\n  <div>\n    <AlertDialogRoot>\n      <AlertDialogTrigger />\n      <AlertDialogPortal :to=\"container\">\n        <AlertDialogOverlay />\n        <AlertDialogContent>...</AlertDialogContent>\n      </AlertDialogPortal>\n    </AlertDialogRoot>\n\n    <div ref=\"container\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useFilter in a Vue Component for dynamic filtering\nDESCRIPTION: Demonstrates how to use useFilter within a Vue component to implement dynamic search filtering. It imports necessary modules, sets up reactive data for the search query and item list, and creates a computed property that filters the items based on the search query using the contains function. The filtered results are then displayed in a list.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-filter.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport { useFilter } from '@/composables/useFilter'\nimport { ref } from 'vue'\n\nconst { contains } = useFilter()\nconst searchQuery = ref('')\nconst items = ref(['Apple', 'Banana', 'Cherry', 'Date'])\n\nconst filteredItems = computed(() =>\n  items.value.filter(item => contains(item, searchQuery.value))\n)\n</script>\n\n<template>\n  <div>\n    <input v-model=\"searchQuery\" placeholder=\"Search...\">\n    <ul>\n      <li v-for=\"item in filteredItems\" :key=\"item\">\n        {{ item }}\n      </li>\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props with PropsTable in Reka UI (Vue)\nDESCRIPTION: Demonstrates passing an array of prop definitions to the `<PropsTable>` component in a Vue template. Each object in the array defines a prop's name, description (HTML allowed), type, requirement status, and default value. This is used to render a table of component properties in documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PaginationList.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining MethodsTable Data Structure\nDESCRIPTION: This snippet provides an array of objects, where each object represents a method or function available within the component.  The structure contains details like the method's name, description, and its type.  This data is intended for consumption by the `MethodsTable` component, probably to render information about the available methods and their usage.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerRoot.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'isDateDisabled',\n    'description': '<p>A function that returns whether or not a date is disabled</p>\\n',\n    'type': 'Matcher'\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering PropsTable Component in Vue\nDESCRIPTION: A Vue template that renders a PropsTable component with data for a Button component's props. The properties shown include 'as' for element customization and 'asChild' for composition with detailed descriptions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/PopoverTrigger.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Items in Reka UI Menubar (Vue)\nDESCRIPTION: Demonstrates adding a `MenubarCheckboxItem` to a `reka-ui` Menubar. It uses `v-model` for two-way data binding of the checked state and `MenubarItemIndicator` along with an icon (from `@iconify/vue`) to display the checkmark.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'reka-ui'\n\nconst checked = ref(true)\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarCheckboxItem v-model=\"checked\">\n            <MenubarItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Checkbox item\n          </MenubarCheckboxItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties for Reka UI (JavaScript)\nDESCRIPTION: Provides a JavaScript array of objects defining the properties (props) accepted by a Reka UI component. Each object details the prop's name, description (in HTML), type signature, requirement status, and optional default value. This data is passed to a `<PropsTable>` component for display.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuContent.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'align',\n    'description': '<p>The preferred alignment against the trigger.\\nMay change when collisions occur.</p>\\n',\n    'type': '\\'start\\' | \\'center\\' | \\'end\\'',\n    'required': false\n  },\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'side',\n    'description': '<p>The preferred side of the trigger to render against when open.\\nWill be reversed when collisions occur and avoidCollisions\\nis enabled.</p>\\n',\n    'type': '\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\'',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst \\\"always\\\" will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Table for Vue - JavaScript\nDESCRIPTION: This snippet defines a Vue PropsTable component prop 'data' that describes several configurable properties of a UI component. Dependencies include Vue and the PropsTable component. The 'as' prop controls the rendered element or component, defaulting to 'button' and allowing override by 'asChild'. The 'asChild' boolean prop enables using the passed child element instead, supporting composition patterns. The 'reference' prop allows specifying an anchor element for positioning; if omitted, the current component is used. Inputs are the internal props used by the component; no outputs are produced beyond PropTable visualization. The snippet includes HTML with Vue bindings and supports rendering documentation for UI props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DateField Component with Reka-UI in Vue\nDESCRIPTION: This Vue code snippet demonstrates how to import and compose the DateFieldRoot and DateFieldInput components from the reka-ui library to create a functional date input field. It uses the <script setup> syntax for importing components and combines them within the template section. The snippet assumes installation of the reka-ui library and its dependencies like @internationalized/date, which provides underlying date parsing and localization support.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/date-field.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\\nimport {\\n  DateFieldInput,\\n  DateFieldRoot,\\n} from 'reka-ui'\\n</script>\\n\\n<template>\\n  <DateFieldRoot>\\n    <DateFieldInput />\\n  </DateFieldRoot>\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Prevent thumb overlap - Vue\nDESCRIPTION: Prevents thumb overlap using the `minStepsBetweenThumbs` prop.  This prop ensures that the thumbs will always have at least the specified number of steps separating them.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'\n</script>\n\n<template>\n  <SliderRoot\n    :default-value=\"[25, 75]\"\n    :step=\"10\"\n    :min-steps-between-thumbs=\"1\"\n  >\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Combobox Component for Better Filtering and Binding\nDESCRIPTION: Highlights updates to the Combobox component: removal of 'filter-function', migration of 'searchTerm' from Root to Input's v-model, and 'displayValue' relocation for improved API consistency.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ComboboxRoot v-model:search-term=\"search\" :display-value=\"(v) => v.name\" /> <!-- [!code --] -->\n  <ComboboxRoot>\n    <ComboboxInput v-model=\"search\" :display-value=\"(v) => v.name\" /> <!-- [!code ++] -->\n  </ComboboxRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI with yarn\nDESCRIPTION: Command to install Reka UI package using yarn package manager.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add reka-ui\n```\n\n----------------------------------------\n\nTITLE: ContextMenu with Radio Items - Vue\nDESCRIPTION: This Vue component implements radio button functionality within a ContextMenu using ContextMenuRadioGroup and ContextMenuRadioItem.  It manages the selected color option using a ref.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'reka-ui'\n\nconst color = ref('blue')\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuRadioGroup v-model=\"color\">\n          <ContextMenuRadioItem value=\"red\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Red\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"blue\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Blue\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"green\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Green\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Close Example for Alert Dialog\nDESCRIPTION: Demonstrates how to programmatically close the alert dialog after an asynchronous operation, such as form submission. Utilizes Vue's reactive state (v-model) and a simulated wait function to close the dialog after a delay. Shows integration of async logic within the dialog workflow.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'reka-ui'\n\nconst wait = () => new Promise(resolve => setTimeout(resolve, 1000))\nconst open = ref(false)\n</script>\n\n<template>\n  <AlertDialogRoot v-model:open=\"open\">\n    <AlertDialogTrigger>Open</AlertDialogTrigger>\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogContent>\n        <form\n          @submit.prevent=\"\n            (event) => {\n              wait().then(() => open = false);\n            }\n          \"\n        >\n          <!-- some inputs -->\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast Component Props with PropsTable in Vue\nDESCRIPTION: A Vue component that renders a documentation table for Toast component props, including duration, label, swipe direction, and swipe threshold properties with their respective types, descriptions, and default values.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToastProvider.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'duration',\n    'description': '<p>Time in milliseconds that each toast should remain visible for.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '5000'\n  },\n  {\n    'name': 'label',\n    'description': '<p>An author-localized label for each toast. Used to help screen reader users\\nassociate the interruption with a toast.</p>\\n',\n    'type': 'string',\n    'required': false,\n    'default': '\\'Notification\\''\n  },\n  {\n    'name': 'swipeDirection',\n    'description': '<p>Direction of pointer swipe that should close the toast.</p>\\n',\n    'type': '\\'right\\' | \\'left\\' | \\'up\\' | \\'down\\'',\n    'required': false,\n    'default': '\\'right\\''\n  },\n  {\n    'name': 'swipeThreshold',\n    'description': '<p>Distance in pixels that the swipe must pass before a close is triggered.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '50'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Slots table defining dynamic data for component customization\nDESCRIPTION: This snippet specifies the data for slots available in the Select component, including 'modelValue' for current input values, which can be a single value or an array, and 'open' indicating the current open state of the dropdown menu. These slots allow for dynamic content rendering and state access within parent components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SelectRoot.md#_snippet_2\n\nLANGUAGE: Vue.js\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current input values</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[] | undefined'\n  },\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Navigation Menu in Vue\nDESCRIPTION: Demonstrates how to create a vertical navigation menu by setting the `orientation=\"vertical\"` prop on the `NavigationMenuRoot` component. Imports required components from 'reka-ui' using a TypeScript setup script and shows a simple two-item vertical menu structure within a Vue template.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/navigation-menu.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'reka-ui'\n</script>\n\n<template>\n  <NavigationMenuRoot orientation=\"vertical\">\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item Two content</NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Animating Swipe Gesture - CSS\nDESCRIPTION: This CSS snippet provides styles for animating the swipe gesture on the ToastRoot element. It uses CSS variables `--reka-toast-swipe-move-x`, `--reka-toast-swipe-end-x` and the `data-swipe` attribute to create a sliding animation when the toast is swiped horizontally. The animation is triggered when the `data-swipe` attribute changes its value among 'start', 'move', 'cancel', and 'end'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ToastRoot[data-swipe='move'] {\n  transform: translateX(var(--reka-toast-swipe-move-x));\n}\n.ToastRoot[data-swipe='cancel'] {\n  transform: translateX(0);\n  transition: transform 200ms ease-out;\n}\n.ToastRoot[data-swipe='end'] {\n  animation: slideRight 100ms ease-out;\n}\n\n@keyframes slideRight {\n  from {\n    transform: translateX(var(--reka-toast-swipe-end-x));\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Methods for Time Field in Vue (HTML/Javascript)\nDESCRIPTION: Leverages the <MethodsTable> Vue component to display public methods available on the Time Field instance, including helper functions like focus helpers. The \":data\" array lists each method with its signature and description. Requires Vue and a documentation infrastructure providing MethodsTable. Inputs are method descriptors; provides a static display with no behavioral code execution.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TimeFieldRoot.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<MethodsTable :data=\"[\n  {\n    'name': 'setFocusedElement',\n    'description': '<p>Helper to set the focused element inside the DateField</p>\\n',\n    'type': '(el: HTMLElement) => void'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Radio Item Component Props in Vue (TypeScript Annotations)\nDESCRIPTION: This snippet defines the props interface for a Radio Item Vue component, specifying each prop's name, type, default value, requirement status, and description. It supports customization of the rendered element or component ('as' and 'asChild'), disabling the item, setting identification attributes ('id', 'name'), validation constraints ('required'), and form submission data ('value'). The descriptions include HTML content for rich documentation generation. Dependencies include Vue's prop typing and integration within Reka-UI's component library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupItem.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n<PropsTable :data=\"[  {    'name': 'as',    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',    'type': 'AsTag | Component',    'required': false,    'default': '\\'button\\''  },  {    'name': 'asChild',    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',    'type': 'boolean',    'required': false  },  {    'name': 'disabled',    'description': '<p>When <code>true</code>, prevents the user from interacting with the radio item.</p>\\n',    'type': 'boolean',    'required': false,    'default': 'false'  },  {    'name': 'id',    'description': '',    'type': 'string',    'required': false  },  {    'name': 'name',    'description': '<p>The name of the field. Submitted with its owning form as part of a name/value pair.</p>\\n',    'type': 'string',    'required': false  },  {    'name': 'required',    'description': '<p>When <code>true</code>, indicates that the user must set the value before the owning form can be submitted.</p>\\n',    'type': 'boolean',    'required': false  },  {    'name': 'value',    'description': '<p>The value given as data when submitted with a <code>name</code>.</p>\\n',    'type': 'AcceptableValue',    'required': false  }]\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Hotkey - Vue\nDESCRIPTION: This code snippet demonstrates how to override the default hotkey for the ToastViewport component. It uses the `hotkey` prop to specify a custom key combination ('altKey', 'KeyT'). This allows users to focus on the toast viewport using a specific keyboard shortcut.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ToastProvider>\n    ...\n    <ToastViewport :hotkey=\"['altKey', 'KeyT']\" />\n  </ToastProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Menu CheckboxItem Binding API\nDESCRIPTION: Updates the binding API of DropdownMenuCheckboxItem from 'v-model:checked' to 'v-model' for consistency and SSR friendliness, also supports setting checked state inline.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <DropdownMenuCheckboxItem v-model=\"value\" /> <!-- [!code --] -->\n  <DropdownMenuCheckboxItem checked /> <!-- [!code --] -->\n  <DropdownMenuCheckboxItem :model-value=\"true\" /> <!-- [!code ++] -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Contributors Vue Component\nDESCRIPTION: This code snippet demonstrates how to import the Contributors component from a relative path within a Vue 3 <script setup> block, enabling the inclusion of contributor information into the UI.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/overview/introduction.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<script setup>\nimport Contributors from '../../../.vitepress/components/Contributors.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Making Pagination More Explicit with Required itemsPerPage Prop\nDESCRIPTION: Requires the 'items-per-page' prop to be explicitly passed, replacing default value, to clarify page size configuration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <PaginationRoot :items-per-page=\"10\" />  <!-- [!code ++] -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using VisuallyHidden for Screen Reader Labels (Vue)\nDESCRIPTION: Illustrates a practical application of `VisuallyHidden` within a button containing an icon. It shows how to provide a text label (\"Settings\") inside `VisuallyHidden` so that it is announced by screen readers for the button while remaining visually hidden on the screen, improving accessibility for icon-only buttons. Requires `VisuallyHidden` from 'reka-ui' and `GearIcon` from '@radix-icons/vue'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/visually-hidden.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { GearIcon } from '@radix-icons/vue'\nimport { VisuallyHidden } from 'reka-ui'\n</script>\n\n<template>\n  <button>\n    <GearIcon />\n    <VisuallyHidden>Settings</VisuallyHidden>\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualization - Reka UI Tree - Vue\nDESCRIPTION: This snippet demonstrates using the `TreeVirtualizer` component to handle large lists efficiently through virtualization. It wraps `TreeItem` within `TreeVirtualizer`, using a scoped slot to access item data and binding it to the `TreeItem` via `v-bind=\"item.bind\"`. The `text-content` prop is used to extract text for virtualization.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tree.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TreeItem, TreeRoot, TreeVirtualizer } from 'reka-ui'\nimport { ref } from 'vue'\n</script>\n\n<template>\n  <TreeRoot :items>\n    <TreeVirtualizer\n      v-slot=\"{ item }\"\n      :text-content=\"(opt) => opt.name\"\n    >\n      <TreeItem v-bind=\"item.bind\">\n        {{ person.name }}\n      </TreeItem>\n    </TreeVirtualizer>\n  </TreeRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reka UI Resolver with unplugin-vue-components in Vite\nDESCRIPTION: This snippet shows how to configure the Reka UI resolver for `unplugin-vue-components` in a Vite project (`vite.config.ts`). By importing `RekaResolver` from `reka-ui/resolver` and adding it to the `resolvers` array within the `Components` plugin, Reka UI components will be automatically imported. An optional `prefix` can be configured within the resolver.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/overview/installation.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Components from 'unplugin-vue-components/vite'\nimport RekaResolver from 'reka-ui/resolver'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Components({\n      dts: true,\n      resolvers: [\n        RekaResolver()\n\n        // RekaResolver({\n        //   prefix: '' // use the prefix option to add Prefix to the imported components\n        // })\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Documentation of 'as' Prop in Vue.js Component\nDESCRIPTION: This snippet documents the 'as' prop allowing customization of the element or component the parent component should render as, defaulting to 'a'. It clarifies optionality and default value, enabling developers to override the rendered tag or component as needed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ToolbarLink.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'a\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Roving Focus Group and Item in Vue\nDESCRIPTION: This code snippet demonstrates how to import and use the `RovingFocusGroup` and `RovingFocusItem` components from the `reka-ui` library within a Vue template. It sets up a basic roving focus group with a single item.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/roving-focus.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { RovingFocusGroup, RovingFocusItem } from 'reka-ui'\n</script>\n\n<template>\n  <RovingFocusGroup>\n    <RovingFocusItem />\n  </RovingFocusGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Form Components with v-model API and Style Repositioning\nDESCRIPTION: Changes in form components include replacing 'v-model:checked' with 'v-model' for CheckBox, repositioning VisuallyHidden element for scope styling, and general API standardization.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <CheckboxRoot v-model=\"value\" /> <!-- [!code --] -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Alternative Action - Vue\nDESCRIPTION: This code snippet demonstrates how to provide alternative actions for screen reader users using the `altText` prop on the ToastAction component. It also illustrates how to use a foreground toast with an increased duration for scenarios requiring user interaction.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ToastRoot type=\"background\">\n    <ToastTitle>Upgrade Available!</ToastTitle>\n    <ToastDescription>We've just released Reka UI 2.0.</ToastDescription>\n    <ToastAction alt-text=\"Goto account settings to upgrade\">\n      Upgrade\n    </ToastAction>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n\n  <ToastRoot type=\"foreground\" :duration=\"10000\">\n    <ToastDescription>File removed successfully.</ToastDescription>\n    <ToastAction alt-text=\"Undo (Alt+U)\">\n      Undo <kbd>Alt</kbd>+<kbd>U</kbd>\n    </ToastAction>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toast Component - Vue.js (TypeScript)\nDESCRIPTION: This snippet is the implementation of a custom toast component. It utilizes other `reka-ui` components to build the toast UI. A `count` ref is incremented each time the `publish` function is called which results in adding a new toast instance in the UI. The `defineExpose` function makes the `publish` function accessible externally.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n// your-toast.vue\n<script setup lang=\"ts\">\nimport { ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'reka-ui'\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction publish() {\n  count.value++\n}\n\ndefineExpose({\n  publish\n})\n</script>\n\n<template>\n  <ToastRoot\n    v-for=\"index in count\"\n    :key=\"index\"\n  >\n    <ToastDescription>\n      <slot />\n    </ToastDescription>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Focus Item in Roving Focus Group using Vue\nDESCRIPTION: This snippet shows how to set the initial focus item within a `RovingFocusGroup` using the `active` property on a `RovingFocusItem`. The item with the `active` property will be focused when the component is initially rendered.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/roving-focus.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <RovingFocusGroup>\n    <RovingFocusItem>1</RovingFocusItem>\n    <RovingFocusItem active>2</RovingFocusItem>\n    <RovingFocusItem>3</RovingFocusItem>\n  </RovingFocusGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining PropsTable Data Structure\nDESCRIPTION: This code defines an array of objects, where each object represents a prop for a Vue component. Each prop object contains details such as name, description, type, required status, and default value.  This data is consumed by the `PropsTable` component to render the table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerRoot.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'allowNonContiguousRanges',\n    'description': '<p>When combined with <code>isDateUnavailable</code>, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessibility: Keyboard Interactions for Alert Dialog\nDESCRIPTION: Enumerates the keyboard interactions supported within the alert dialog, such as opening/closing with Space or Enter, focus movement with Tab and Shift+Tab, and closing with Esc. Ensures the dialog is navigable and operable via keyboard, following WAI-ARIA best practices.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_12\n\nLANGUAGE: md\nCODE:\n```\n<KeyboardTable :data=\"[{ \nkeys: ['Space'], \ndescription: 'Opens/closes the dialog.', \n},{ \nkeys: ['Enter'], \ndescription: 'Opens/closes the dialog.', \n},{ \nkeys: ['Tab'], \ndescription: 'Moves focus to the next focusable element.', \n},{ \nkeys: ['Shift + Tab'], \ndescription: 'Moves focus to the previous focusable element.', \n},{ \nkeys: ['Esc'], \ndescription: 'Closes the dialog and moves focus to <Code>AlertDialogTrigger</code>.', \n}]\" />\n```\n\n----------------------------------------\n\nTITLE: Using SelectSeparator to Separate Items (Reka-UI, Vue)\nDESCRIPTION: Shows how to insert a separator between items within a select dropdown using <SelectSeparator> in Vue with Reka-UI. No additional dependencies beyond Reka-UI are required. Ideal for visually segmenting groups of options within the dropdown.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectSeparator />\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Stop Group Emits (JavaScript)\nDESCRIPTION: This JavaScript array defines the custom events (emits) that the Tab Stop Group component can trigger. It specifies the event name, description, and the type of the payload emitted with the event. Key emits include `entryFocus` and `update:currentTabStopId` for v-model support.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RovingFocusGroup.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'entryFocus',\n    'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'update:currentTabStopId',\n    'description': '',\n    'type': '[value: string | null]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar Component Properties Documentation in Vue\nDESCRIPTION: Vue component that renders a table of properties for a Calendar component, including details about the 'as', 'asChild', and 'prevPage' properties. The documentation is presented in a structured format using a PropsTable component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarPrev.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'prevPage',\n    'description': '<p>The function to be used for the prev page. Overwrites the <code>prevPage</code> function set on the <code>CalendarRoot</code>.</p>\\n',\n    'type': '((placeholder: DateValue) => DateValue)',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Labels (Vue)\nDESCRIPTION: This Vue.js snippet demonstrates how to add labels to a dropdown menu using the `DropdownMenuLabel` component. The label can be used to categorize items within the menu.  Dependencies: Reka-ui is needed for the necessary components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuLabel>Label</DropdownMenuLabel>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ContextMenuItem - CSS\nDESCRIPTION: This CSS snippet shows how to style a disabled ContextMenuItem element. It targets elements with the `ContextMenuItem` class that also have the `data-disabled` attribute, setting their text color to gainsboro.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuItem[data-disabled] {\n  color: gainsboro;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Teleport Component Properties in Vue\nDESCRIPTION: This snippet defines the data for the `PropsTable` component. It includes an array of objects, each representing a property of the Teleport component.  Each object has properties for name, description (HTML formatted, with links to Vue documentation), type, and a boolean indicating if the property is required.  This data is used to dynamically render a table of properties.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuPortal.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'defer',\n    'description': '<p>Defer the resolving of a Teleport target until other parts of the\\napplication have mounted (requires Vue 3.5.0+)</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#deferred-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n```\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'disabled',\n    'description': '<p>Disable teleport and render the component inline</p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#disabling-teleport\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n```\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n```\n\nLANGUAGE: Vue\nCODE:\n```\n{\n    'name': 'to',\n    'description': '<p>Vue native teleport component prop <code>:to</code></p>\\n<p><a href=\\'https://vuejs.org/guide/built-ins/teleport.html#basic-usage\\' target=\\'_blank\\'>reference</a></p>\\n',\n    'type': 'string | HTMLElement',\n    'required': false\n  }\n```\n\n----------------------------------------\n\nTITLE: Panel Component Methods Documentation in Vue\nDESCRIPTION: A table component that lists all available methods for programmatically controlling the Panel component, including functions to collapse, expand, get size, and resize the panel.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/SplitterPanel.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<MethodsTable :data=\"[\n  {\n    'name': 'collapse',\n    'description': '<p>If panel is <code>collapsible</code>, collapse it fully.</p>\\n',\n    'type': '() => void'\n  },\n  {\n    'name': 'expand',\n    'description': '<p>If panel is currently collapsed, expand it to its most recent size.</p>\\n',\n    'type': '() => void'\n  },\n  {\n    'name': 'getSize',\n    'description': '<p>Gets the current size of the panel as a percentage (1 - 100).</p>\\n',\n    'type': '() => number'\n  },\n  {\n    'name': 'resize',\n    'description': '<p>Resize panel to the specified percentage (1 - 100).</p>\\n',\n    'type': '(size: number) => void'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Complex Content to Reka UI Menubar Items (Vue)\nDESCRIPTION: Illustrates how to embed custom HTML elements, such as `<img>` tags, directly within `MenubarItem` components to create visually richer menu items in a `reka-ui` Menubar.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/menubar.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>\n            <img src=\"…\">\n            Adolfo Hess\n          </MenubarItem>\n          <MenubarItem>\n            <img src=\"…\">\n            Miyah Myles\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: CSS Variable and Data Attribute Naming Convention Changes\nDESCRIPTION: Demonstrates changing CSS variables and data attribute selectors from 'radix' prefix to 'reka' prefix to reflect the new library standards.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n  --radix-accordion-content-width: 300px; /* [!code --] */\n  --reka-accordion-content-width: 300px; /* [!code ++] */\n\n  [data-radix-collection-item] {} /* [!code --] */\n  [data-reka-collection-item] {} /* [!code ++] */\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Development using pnpm (Bash)\nDESCRIPTION: Installs all project dependencies specified in `package.json` using the pnpm package manager. This is typically the first step after cloning the repository to prepare the project for development. Requires pnpm to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Reka UI Toggle Component in Vue\nDESCRIPTION: This snippet demonstrates how to import the `Toggle` component from the 'reka-ui' library within a Vue Single File Component (SFC) using the `<script setup>` block. It then shows the basic usage by rendering the `<Toggle />` component directly in the template section. No props or event handling are shown in this basic example.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toggle.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Toggle } from 'reka-ui'\n</script>\n\n<template>\n  <Toggle />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Props for PropsTable Component in Vue.js\nDESCRIPTION: This snippet declares a PropsTable component with a 'data' prop that contains an array of property definitions. Each property definition includes the name, description (with HTML markup), type, requirement status, and a default value if applicable. The 'as' prop controls which element or component is rendered, defaulting to 'div'. The 'asChild' prop allows for replacing the default rendered element by merging with a child component, enabling composition patterns. There are no external dependencies besides the Vue.js framework itself.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerGridRow.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server using pnpm (Bash)\nDESCRIPTION: Executes the `docs:dev` script defined in `package.json` using pnpm. This command typically starts a local development server for the project's documentation (likely using VitePress, as mentioned in the text). Requires pnpm and project dependencies to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Abstracting Combobox Primitives to Command Menu Components in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to re-export Command and CommandItem components, based on Combobox primitives, for easier import and usage elsewhere in a Vue codebase. Useful for encapsulating complex combobox logic behind a simplified API. No major parameters or logic—serves as a module re-export.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// your-command.ts\nexport { default as Command } from 'Command.vue'\nexport { default as CommandItem } from 'CommandItem.vue'\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Vue.js Component using <script setup>\nDESCRIPTION: This snippet demonstrates importing a Vue component named 'Example' from a specified relative path and rendering it within the template. It utilizes Vue 3's <script setup> syntax for setup simplification, with dependencies including the 'ExampleHome.vue' component. The purpose is to include and display the component within the current Vue file.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/examples.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<script setup>\n  import Example from \"../.vitepress/components/ExampleHome.vue\"\n</script>\n\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Persisting Splitter Layout with SSR using Cookies in Vue with Typescript\nDESCRIPTION: This example demonstrates persisting the splitter layout using cookies for server-side rendering (SSR) in Nuxt to prevent flicker. It uses the `useCookie` composable to manage layout data and updates it on layout changes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- with Nuxt -->\n<script setup lang=\"ts\">\nconst layout = useCookie<number[]>('splitter:layout')\n</script>\n\n<template>\n  <SplitterGroup\n    direction=\"horizontal\"\n    @layout=\"layout = $event\"\n  >\n    <SplitterPanel :default-size=\"layout[0]\">\n      …\n    </SplitterPanel>\n    <SplitterResizeHandle />\n    <SplitterPanel :default-size=\"layout[1]\">\n      …\n    </SplitterPanel>\n  </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Slider Implementation - Typescript\nDESCRIPTION: Exports the slider component from a TypeScript file. This is part of creating a custom API for the slider.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// your-slider.ts\nexport { default as Slider } from 'Slider.vue'\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Combobox Items using CSS\nDESCRIPTION: This CSS snippet specifies the visual style for disabled combobox items by assigning a text color (gainsboro) to elements with the .ComboboxItem class and a data-disabled attribute. It is intended to be included in a stylesheet where ComboboxItem components are used. No variables are exposed and only simple styling is applied.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/combobox.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ComboboxItem[data-disabled] {\n  color: \"gainsboro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Placeholder with data-placeholder Attribute (CSS)\nDESCRIPTION: Provides a CSS rule to style the SelectTrigger element when it has the data-placeholder attribute, typically to visually indicate that no option is selected. Ensure this CSS is loaded wherever the select component is used. Alters text color to gainsboro for better visual cues.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.SelectTrigger[data-placeholder] {\n  color: \"gainsboro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Content Styles\nDESCRIPTION: This code defines CSS styles for the `.TooltipContent` class, setting its width to match the trigger and its maximum height. These styles are applied within a separate CSS file, demonstrating component styling. `--reka-tooltip-trigger-width` and `--reka-tooltip-content-available-height` are used to reference the trigger width and available height.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.TooltipContent {\n  width: var(--reka-tooltip-trigger-width);\n  max-height: var(--reka-tooltip-content-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Reka UI Home Page\nDESCRIPTION: This YAML frontmatter configuration sets up the home page layout and title for the Reka UI documentation. It specifies the layout template to use and defines a descriptive title for the UI library.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\ntitle: Reka UI - Unstyled, fully accessible UI library\n---\n```\n\n----------------------------------------\n\nTITLE: Origin-aware Animations\nDESCRIPTION: This code demonstrates how to create animations for the tooltip content using CSS custom properties, particularly `--reka-tooltip-content-transform-origin`. It sets the transform origin and applies a scale-in animation to the `TooltipContent`, creating a smooth visual effect.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tooltip.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent class=\"TooltipContent\">\n      …\n    </TooltipContent>\n  </TooltipRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue template demonstrating AspectRatio component usage\nDESCRIPTION: A Vue template section that renders the 'AspectRatio' component. It shows the component placed within the template, assuming it has been imported and registered as shown in the script setup. This snippet illustrates how to include the component in component markup, enabling aspect-ratio-controlled content display.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/aspect-ratio.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AspectRatio />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useForwardPropsEmits in a Vue Component\nDESCRIPTION: Example of how to use the useForwardPropsEmits composable in a Vue component to forward both props and emits to a child component. The function combines the results of useForwardProps and useEmitAsProps into a single object that can be used with v-bind.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/use-forward-props-emits.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<CompEmitProps>()\nconst emits = defineEmits<CompEmitEmits>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Comp v-bind=\"forwarded\">\n    ...\n  </Comp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Stop Group Methods (JavaScript)\nDESCRIPTION: This JavaScript array defines the public methods available on the Tab Stop Group component instance. It lists the method name, description (if provided), and the method signature including parameter types and return type. The `getItems` method is documented here.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RovingFocusGroup.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'getItems',\n    'description': '',\n    'type': '(includeDisabledItem?: boolean) => { ref: HTMLElement; value?: any; }[]'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Vue implementation of Toolbar component\nDESCRIPTION: Demonstrates importing and composing Toolbar components: ToolbarRoot, ToolbarButton, ToolbarSeparator, ToolbarLink, ToolbarToggleGroup, and ToolbarToggleItem, within a Vue `<script setup>` and `<template>`. Showcases the usage pattern and nesting of toolbar items.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ToolbarRoot>\n    <ToolbarButton />\n    <ToolbarSeparator />\n    <ToolbarLink />\n    <ToolbarToggleGroup>\n      <ToolbarToggleItem />\n    </ToolbarToggleGroup>\n  </ToolbarRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Events Table in Vue/Reka UI\nDESCRIPTION: Vue component that renders a table of emittable events for a component. The EmitsTable displays the 'update:open' event which is triggered when the open state of a submenu changes. The table provides event name, description, and payload type information.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuRoot.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the submenu changes.</p>\\n',\n    'type': '[payload: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: ContextMenu with Labels - Vue\nDESCRIPTION: This Vue component showcases how to use ContextMenuLabel to label a section within a ContextMenu. It imports necessary Reka-UI components, including ContextMenuLabel.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuTrigger,\n} from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuLabel>Label</ContextMenuLabel>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Slots for Vue Radio Item Component State Exposure\nDESCRIPTION: This snippet defines the slots exposed by the Radio Item component to represent and customize its internal state: 'checked' for current checked state, 'required' for validation requirement state, and 'disabled' for interaction disablement state. Each slot provides a boolean value indicating the corresponding state, allowing consumers to implement custom rendering or behaviors based on these states. This supports Vue's scoped slots pattern and component composition within the Reka-UI framework.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupItem.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n<SlotsTable :data=\"[  {    'name': 'checked',    'description': '<p>Current checked state</p>\\n',    'type': 'boolean'  },  {    'name': 'required',    'description': '<p>Required state</p>\\n',    'type': 'boolean'  },  {    'name': 'disabled',    'description': '<p>Disabled state</p>\\n',    'type': 'boolean'  }]\" />\n```\n\n----------------------------------------\n\nTITLE: Import Slider components - Vue\nDESCRIPTION: Imports necessary slider components from the `reka-ui` library. This is the basic setup required to use the slider component in a Vue application.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'reka-ui'\n</script>\n\n<template>\n  <SliderRoot>\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API Reference: AlertDialogRoot Component\nDESCRIPTION: This snippet provides details about the AlertDialogRoot component, which acts as the container for all parts of the alert dialog. It ensures the dialog's proper grouping and accessibility. Additional included documentation asserts the purpose of the Root component, with placeholders indicating external reference details.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogRoot.md -->\n```\n\n----------------------------------------\n\nTITLE: Importing ToggleGroup Components in Vue\nDESCRIPTION: This snippet demonstrates the import of `ToggleGroupItem` and `ToggleGroupRoot` components from the `reka-ui` library.  It is a prerequisite for using the ToggleGroup component. There are no required parameters. The output is the ability to use the imported components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toggle-group.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ToggleGroupItem, ToggleGroupRoot } from 'reka-ui'\n</script>\n\n<template>\n  <ToggleGroupRoot>\n    <ToggleGroupItem />\n  </ToggleGroupRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: CSS animation using transform origin for Popover content\nDESCRIPTION: Utilizes the '--reka-popover-content-transform-origin' CSS variable to animate the Popover content from its origin point, enabling smooth origin-based transition effects like scaling during appearance.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/popover.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.PopoverContent {\n  transform-origin: var(--reka-popover-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsible Splitter Panel in Vue\nDESCRIPTION: This example shows how to create a collapsible SplitterPanel using the `collapsible`, `collapsed-size`, and `min-size` props. When the panel reaches its `minSize`, it collapses to the specified `collapsedSize`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SplitterGroup>\n    <SplitterPanel\n      collapsible\n      :collapsed-size=\"10\"\n      :min-size=\"35\"\n    >\n      Panel A\n    </SplitterPanel>\n    <SplitterResizeHandle />\n    <SplitterPanel>\n      Panel B\n    </SplitterPanel>\n  </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Constraining ContextMenu Content Size - Vue\nDESCRIPTION: This Vue component demonstrates how to constrain the width and height of the ContextMenu content to match the trigger width and available viewport height. It relies on CSS custom properties.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Unfocusable Item in Roving Focus Group using Vue\nDESCRIPTION: This example demonstrates how to create an unfocusable item within a `RovingFocusGroup` by setting the `focusable` property to `false` on a `RovingFocusItem`. This prevents the item from receiving focus during navigation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/roving-focus.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <RovingFocusGroup>\n    <RovingFocusItem>1</RovingFocusItem>\n    <RovingFocusItem :focusable=\"false\">2</RovingFocusItem>\n    <RovingFocusItem>3</RovingFocusItem>\n  </RovingFocusGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pin Input for Numeric Mode in Vue\nDESCRIPTION: Illustrates how to restrict the Pin Input to accept only numeric characters by setting the `type` prop to `\"number\"` on the `PinInputRoot` element. Requires importing the relevant components from 'reka-ui'.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/pin-input.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Label, PinInputInput, PinInputRoot } from 'reka-ui'\n</script>\n\n<template>\n  <PinInputRoot v-model=\"value\" type=\"number\">\n    …\n  </PinInputRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Dropdown Items (CSS)\nDESCRIPTION: This CSS snippet provides styling for disabled dropdown menu items. It uses the `data-disabled` attribute to target and style disabled items, changing their color to `gainsboro`. This snippet depends on the preceding Vue.js code, specifically the usage of the `data-disabled` attribute.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/dropdown-menu.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.DropdownMenuItem[data-disabled] {\n  color: gainsboro;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Loop Behavior in Roving Focus Group using Vue\nDESCRIPTION: This code demonstrates how to enable looping behavior within a `RovingFocusGroup` using the `loop` property. When enabled, focus will move from the last item back to the first, and vice versa.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/roving-focus.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <RovingFocusGroup loop>\n    …\n  </RovingFocusGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Animating Swipe Gesture - Vue\nDESCRIPTION: This code snippet demonstrates how to configure the ToastProvider for swipe gestures. It sets the `swipe-direction` prop to 'right'. It enables swipe-to-dismiss functionality for toasts within the ToastProvider.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toast.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ToastProvider swipe-direction=\"right\">\n    <ToastRoot class=\"ToastRoot\">\n      ...\n    </ToastRoot>\n    <ToastViewport />\n  </ToastProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Multiple Delimiters - Vue\nDESCRIPTION: This code demonstrates how to use a regular expression as a delimiter to allow multiple characters (space, comma, semicolon, tab, or newline) to trigger the addition of a new tag.  Requires a regular expression defined in the script and passed as the delimiter prop. Affects both regular input and paste behavior when `add-on-paste` is enabled.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/tags-input.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'reka-ui'\n\n// split by space, comma, semicolon, tab, or newline\nconst delimiter = /[ ,;\\t\\n\\r]+/\n</script>\n\n<template>\n  <TagsInputRoot\n    v-model=\"modelValue\"\n    :delimiter=\"delimiter\"\n    add-on-paste\n  >\n    …\n  </TagsInputRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Orientation for Roving Focus Group in Vue\nDESCRIPTION: This snippet shows how to configure a `RovingFocusGroup` with a vertical orientation using the `orientation` property. This affects how focus moves between items when using arrow keys.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/utilities/roving-focus.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <RovingFocusGroup :orientation=\"'vertical'\">\n    …\n  </RovingFocusGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API Reference: Cancel Button Functionality\nDESCRIPTION: Defines a button that closes the alert dialog when clicked. This button is visually distinct from action buttons and maintains accessibility standards. The documentation includes a reference to additional component metadata.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_6\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogCancel.md -->\n```\n\n----------------------------------------\n\nTITLE: Refactoring SelectValue to Avoid Teleportation for SSR Optimization\nDESCRIPTION: Removes the teleporting behavior from SelectValue to prevent SSR flickering and reduce unnecessary DOM computations, encouraging inline rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SelectValue>\n    <!-- render the content similar to `SelectItem` --> <!-- [!code ++] -->\n  </SelectValue>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Constraining ContextMenu Content Size - CSS\nDESCRIPTION: This CSS snippet applies custom properties to constrain the width and max-height of the ContextMenuContent.  It uses `--reka-context-menu-trigger-width` and `--reka-context-menu-content-available-height`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/context-menu.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.ContextMenuContent {\n  width: var(--reka-context-menu-trigger-width);\n  max-height: var(--reka-context-menu-content-available-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Item Component (Vue)\nDESCRIPTION: This Vue component defines an individual selectable item within the Select dropdown. It wraps the item's content using SelectItemText, includes a SelectItemIndicator (typically a checkmark) using CheckIcon, and binds necessary properties from SelectItemProps.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<!-- SelectItem.vue -->\n<script setup lang=\"ts\">\nimport type { SelectItemProps } from 'reka-ui'\nimport { CheckIcon } from '@radix-icons/vue'\nimport { SelectItem, SelectItemIndicator, SelectItemText } from 'reka-ui'\n\nconst props = defineProps<SelectItemProps>()\n</script>\n\n<template>\n  <SelectItem v-bind=\"props\">\n    <SelectItemText>\n      <slot />\n    </SelectItemText>\n    <SelectItemIndicator>\n      <CheckIcon />\n    </SelectItemIndicator>\n  </SelectItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API reference for ToolbarButton component\nDESCRIPTION: Details about the ToolbarButton item, including its purpose, supported data attributes, and dependencies on the reka-ui package. Includes meta documentation for the button.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-orientation]',\n      values: ['vertical', 'horizontal'],\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Persisting Splitter Layout to localStorage in Vue\nDESCRIPTION: This code shows how to persist the splitter layout in `localStorage` using the `auto-save-id` prop. This allows the splitter layout to be saved and restored across browser sessions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/splitter.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SplitterGroup auto-save-id=\"any-id\">\n    …\n  </SplitterGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Disabled Select Items Using Data Attribute Selector\nDESCRIPTION: CSS snippet that styles disabled SelectItems by targeting the custom 'data-disabled' attribute. It changes the text color to 'gainsboro', visually distinguishing disabled options. This snippet pairs with Vue SelectItem elements having the 'disabled' attribute, relying on Reka-UI to reflect this state as a data attribute in the DOM, enabling facile styling based on state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n.SelectItem[data-disabled] {\n  color: \"gainsboro\";\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Control Methods for Scroll Component in JavaScript\nDESCRIPTION: This snippet documents two methods available on the scroll component for programmatically adjusting the scroll position. The method 'scrollTop' scrolls the viewport to the top, and 'scrollTopLeft' scrolls the viewport to the top-left corner. Both methods have no parameters and return void. These are utility methods intended to facilitate programmatic UI behavior requiring precise scroll positioning.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ScrollAreaRoot.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<MethodsTable :data=\"[\n  {\n    'name': 'scrollTop',\n    'description': '<p>Scroll viewport to top</p>\\n',\n    'type': '() => void'\n  },\n  {\n    'name': 'scrollTopLeft',\n    'description': '<p>Scroll viewport to top-left</p>\\n',\n    'type': '() => void'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Props Definition in Vue\nDESCRIPTION: Defines the available props for a dialog component including defaultOpen for uncontrolled state and open for controlled state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogRoot.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'defaultOpen',\n    'description': '<p>The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'open',\n    'description': '<p>The controlled open state of the dialog. Can be binded as <code>v-model:open</code>.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Component Structure in Vue\nDESCRIPTION: Demonstrates the basic structure of the Collapsible component, showing how to import and assemble the CollapsibleRoot, CollapsibleTrigger, and CollapsibleContent parts.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/collapsible.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'reka-ui'\n</script>\n\n<template>\n  <CollapsibleRoot>\n    <CollapsibleTrigger />\n    <CollapsibleContent />\n  </CollapsibleRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Commands to start the Nuxt 3 development server on http://localhost:3000 using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/playground/nuxt/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Slider Usage Example - Vue\nDESCRIPTION: Demonstrates how to use the abstract slider component in a Vue template. This shows a simple integration of the custom slider.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/slider.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Slider } from './your-slider'\n</script>\n\n<template>\n  <Slider :default-value=\"[25]\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Arrow Polygon for Improved Customization\nDESCRIPTION: Modifies the SVG polygon used in Arrow component for enhanced styling flexibility, improving visual customization capabilities.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Not provided, but implies modification to SVG polygon in Arrow component -->\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Application for Production\nDESCRIPTION: Commands to build the Nuxt 3 application for production using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/playground/nuxt/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Controlling Displayed Value and Icon in Select (Reka-UI, Vue)\nDESCRIPTION: Shows a controlled select dropdown where the selected value and corresponding icon or flag are displayed in the trigger. Uses v-model to bind value and passes slot content to SelectValue for custom display. 'reka-ui' library and Vue.js 'ref' are required. Allows for showing items such as flag emojis alongside accessible labels.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/select.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst countries = { 'france': '🇫🇷', 'united-kingdom': '🇬🇧', 'spain': '🇪🇸' }\n\nconst value = ref('france')\n</script>\n\n<template>\n  <SelectRoot v-model=\"value\">\n    <SelectTrigger>\n      <SelectValue :aria-label=\"value\">\n        {{ countries[value] }}\n      </SelectValue>\n      <SelectIcon />\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem value=\"france\">\n            <SelectItemText>France</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem value=\"united-kingdom\">\n            <SelectItemText>United Kingdom</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem value=\"spain\">\n            <SelectItemText>Spain</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Props Configuration\nDESCRIPTION: Defines the properties available for a selectable item component, including customization options for rendering, disabled state management, and required item value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarRadioItem.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'textValue',\n    'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\\nUse this when the content is complex, or you have non-textual content inside.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>The unique value of the item.</p>\\n',\n    'type': 'string',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Props Data for PropsTable Component\nDESCRIPTION: This snippet defines an array of JavaScript objects, where each object represents a prop for a UI component. The array is passed as the 'data' prop to a `PropsTable` Vue component. It includes props like 'as', 'asChild', 'disabled', and 'textValue', detailing their name, HTML description, type, requirement status, and default value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSubTrigger.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'textValue',\n    'description': '<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\\nUse this when the content is complex, or you have non-textual content inside.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining 'as' and 'asChild' Props in JavaScript for PropsTable\nDESCRIPTION: This JavaScript array defines configuration objects for two properties: 'as' and 'asChild'. Each object specifies the property's name, description (including HTML for formatting), type, requirement status, and default value (for 'as'). This data structure is intended as input for a component like 'PropsTable' in a Vue.js application, likely used to automatically generate documentation tables for component props.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerGrid.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI with pnpm\nDESCRIPTION: Command to install Reka UI package using pnpm package manager.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add reka-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI with npm\nDESCRIPTION: Command to install Reka UI package using npm package manager.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Using Vue.js and JavaScript\nDESCRIPTION: Defines the props for a Vue.js component including 'as' and 'asChild'. The 'as' prop accepts an HTML tag name or component and defaults to 'h2', allowing the component to render as a specified element. The 'asChild' boolean prop enables replacing the default rendered element with one passed as a child, merging their properties and behavior, supporting composition patterns. This prop data is passed as a JSON array to a PropsTable component for documentation or prop management. No external dependencies beyond Vue.js are required.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogTitle.md#_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'h2\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Slot Definition for Accordion Open State in Vue.js\nDESCRIPTION: Specifies the 'open' slot for managing and displaying the current open state of the accordion item. The slot provides a boolean indicating whether the item is open, supporting dynamic UI updates based on interaction state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionItem.md#_snippet_1\n\nLANGUAGE: Vue.js\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Events Definition in Vue\nDESCRIPTION: Defines the emitted events for the dialog component, specifically for updating the open state when it changes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogRoot.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the dialog changes.</p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SlotsTable Data for a Calendar Component (Vue/JavaScript)\nDESCRIPTION: This snippet demonstrates passing an array of slot definition objects to the ':data' prop of a 'SlotsTable' Vue component. Each object defines a slot with properties: 'name' (string identifier), 'description' (HTML string describing the slot), and 'type' (string representing the expected data type). This configuration is likely used to document the slots available for a calendar component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarRoot.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'date',\n    'description': '<p>The current date of the placeholder</p>\\n',\n    'type': 'DateValue'\n  },\n  {\n    'name': 'grid',\n    'description': '<p>The grid of dates</p>\\n',\n    'type': 'Grid<DateValue>[]'\n  },\n  {\n    'name': 'weekDays',\n    'description': '<p>The days of the week</p>\\n',\n    'type': 'string[]'\n  },\n  {\n    'name': 'weekStartsOn',\n    'description': '<p>The start of the week</p>\\n',\n    'type': '0 | 1 | 2 | 3 | 4 | 5 | 6'\n  },\n  {\n    'name': 'locale',\n    'description': '<p>The calendar locale</p>\\n',\n    'type': 'string'\n  },\n  {\n    'name': 'fixedWeeks',\n    'description': '<p>Whether or not to always display 6 weeks in the calendar</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The current date of the calendar</p>\\n',\n    'type': 'CalendarDate | CalendarDateTime | ZonedDateTime'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Accordion Component Slots (JavaScript)\nDESCRIPTION: Documents the slots available in the Accordion component. Lists the `modelValue` slot, describing its purpose (provides the current active value) and the type of the value available in the slot (`AcceptableValue | AcceptableValue[] | undefined`). This data is used by the `SlotsTable` component to display slot documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AccordionRoot.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current active value</p>\\n',\n    'type': 'AcceptableValue | AcceptableValue[] | undefined'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Emits Table in Reka UI (Vue)\nDESCRIPTION: This snippet displays a table containing information about the emits of a Reka UI component. It uses the `EmitsTable` component and passes a data array containing emit details such as name, description and type. In this instance, the emits is for the `update:open` event.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CollapsibleRoot.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the collapsible changes.</p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Events Table Definition - Reka UI\nDESCRIPTION: This snippet defines a table of events emitted by a Reka UI component. Each event entry includes the event's name, description, and the type of data passed with the event. These events allow developers to respond to various actions or state changes within the component. The table is rendered using the `<EmitsTable>` component, passing the event data as an array of objects.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSubContent.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'entryFocus',\n    'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'openAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on open.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Slots Table in Reka UI (Vue)\nDESCRIPTION: This snippet displays a table containing information about the slots of a Reka UI component. It uses the `SlotsTable` component and passes a data array containing slot details such as name, and description and type. The slot in this case, provides the current open state of the component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CollapsibleRoot.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog Component Slots Definition in Vue\nDESCRIPTION: Defines the available slots for the dialog component, providing access to the current open state.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogRoot.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'open',\n    'description': '<p>Current open state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar Component Slots Documentation in Vue\nDESCRIPTION: Vue component that renders information about available slots for the Calendar component. Currently documents a 'disabled' slot which provides access to the current disable state of the component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarPrev.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'disabled',\n    'description': '<p>Current disable state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Slots Table Data Structure for Vue Component - JavaScript\nDESCRIPTION: This snippet defines a slots table as a JavaScript array passed to a SlotsTable Vue component. It documents the 'disabled' slot for the component, describing its boolean type and indicating it reflects the current disabled state. This supports documentation generation for component slots.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/CalendarNext.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'disabled',\n    'description': '<p>Current disable state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component SlotsTable in Vue\nDESCRIPTION: Displays a table of available slots for the Radio Group component, showing the slot name, description, and type information.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RadioGroupRoot.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current input values</p>\\n',\n    'type': 'null | string | number | Record<string, any>'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Slots Table with Reka UI\nDESCRIPTION: This snippet defines the configuration for the slots table using the `SlotsTable` component. It receives a `data` prop, which is an array of objects. Each object within the data array represents a slot and has properties like 'name', 'description', and 'type'. This table provides documentation for the available slots of a Reka UI component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AspectRatio.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n  {\n    'name': 'aspect',\n    'description': '<p>Current aspect ratio (in %)</p>\\n',\n    'type': 'number'\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Step Prop in Calendar for Enhanced Control\nDESCRIPTION: Removes the deprecated step property, advocating the use of prevPage and nextPage functions for flexible navigation control in Calendar component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/guides/migration.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nfunction pagingFunc(date: DateValue, sign: -1 | 1) { // [!code ++]\n  if (sign === -1) // [!code ++]\n    return date.subtract({ years: 1 }) // [!code ++]\n  return date.add({ years: 1 }) // [!code ++]\n} // [!code ++]\n</script>\n\n<template>\n  <CalendarPrev step=\"year\" /> <!-- [!code --] -->\n  <CalendarPrev :prev-page=\"(date: DateValue) => pagingFunc(date, -1)\" /> <!-- [!code ++] -->\n\n  <CalendarNext step=\"year\" /> <!-- [!code --] -->\n  <CalendarNext :next-page=\"(date: DateValue) => pagingFunc(date, 1)\" /> <!-- [!code ++] -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties Using PropsTable in Vue\nDESCRIPTION: This snippet defines a Vue component PropsTable and passes an array of objects describing each component prop including its name, detailed HTML-formatted description, type, required flag, and default value if any. The properties configure rendering behavior (like 'as' for the rendered tag, 'asChild' to override element rendering with children, and 'reference' for positioning anchors). Dependencies include Vue framework and PropsTable component that supports a 'data' prop with this structure.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ComboboxAnchor.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table with Data in Vue\nDESCRIPTION: This code snippet renders a props table using the PropsTable component. It passes an array of data as the `data` prop. This data contains information about the component's properties, including their name, description (formatted as HTML), type, whether they are required, and their default values. The table is populated dynamically based on the provided data.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerTrigger.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Events Definition in HTML Template\nDESCRIPTION: An EmitsTable component listing the events emitted by the DateRangePicker component, including their names, descriptions, and parameter types.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangeFieldRoot.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called whenever the model value changes</p>\\n',\n    'type': '[DateRange]'\n  },\n  {\n    'name': 'update:placeholder',\n    'description': '<p>Event handler called whenever the placeholder value changes</p>\\n',\n    'type': '[date: DateValue]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Data - JavaScript\nDESCRIPTION: This JavaScript array literal defines the properties for a UI component. Each object within the array describes a single prop, specifying its name, a detailed HTML-formatted description, data type, required status, and an optional default value. This data structure is commonly used to programmatically generate documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerGridRow.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Time Field Props Table in Vue (HTML/Javascript)\nDESCRIPTION: Uses the <PropsTable> component in Vue to declare and document all configurable props for the Time Field component. Each object in the \":data\" array details a property with its name, description (supports HTML/Markdown), type, required status, and default value where applicable. Dependencies: Vue 3 or later, and the reusable PropsTable component. Inputs are property descriptors; output is a rendered documentation table. No logic is executed, and its scope is display-only.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TimeFieldRoot.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  ...\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props Data for Reka UI Component - JavaScript\nDESCRIPTION: This JavaScript array of objects defines the props accepted by a Reka UI component. Each object represents a single prop, specifying its `name`, HTML-formatted `description`, `type`, `required` status (boolean), and optional `default` value. This structured data is intended to be passed to a documentation component like `<PropsTable>` for rendering API documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerCellTrigger.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'day',\n    'description': '',\n    'type': 'DateValue',\n    'required': true\n  },\n  {\n    'name': 'month',\n    'description': '',\n    'type': 'DateValue',\n    'required': true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Component EmitsTable in Vue\nDESCRIPTION: This snippet uses the EmitsTable Vue component to document custom events that can be emitted by a Reka UI component. It details the event name, description, and type for events relevant to consumer applications. Dependencies include the 'EmitsTable' Vue component, and the JSON array provided as 'data' prop. Inputs are event definitions and outputs are a styled documentation table. Limitations include fixed event schema and correct emit naming.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxFilter.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:modelValue',\n    'description': '<p>Event handler called when the value changes.</p>\\n',\n    'type': '[string]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties (Props) in Vue.js Using JSON\nDESCRIPTION: This snippet declares the props of a Vue.js component in JSON format, describing each prop's name, type, default value, whether it is required, and its detailed behavior. The props include rendering control (as, asChild), disabled state, and text representation for typeahead functionality. This JSON structure is likely used to generate automated documentation or typed prop definitions.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuItem.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"as\",\n    \"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\",\n    \"type\": \"AsTag | Component\",\n    \"required\": false,\n    \"default\": \"'div'\"\n  },\n  {\n    \"name\": \"asChild\",\n    \"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\",\n    \"type\": \"boolean\",\n    \"required\": false\n  },\n  {\n    \"name\": \"disabled\",\n    \"description\": \"<p>When <code>true</code>, prevents the user from interacting with the item.</p>\\n\",\n    \"type\": \"boolean\",\n    \"required\": false\n  },\n  {\n    \"name\": \"textValue\",\n    \"description\": \"<p>Optional text used for typeahead purposes. By default the typeahead behavior will use the <code>.textContent</code> of the item. &lt;br&gt;\\nUse this when the content is complex, or you have non-textual content inside.</p>\\n\",\n    \"type\": \"string\",\n    \"required\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering DismissableLayer EmitsTable with Event Metadata in Vue\nDESCRIPTION: This code snippet renders an <EmitsTable> Vue component with an array describing the events emitted by the DismissableLayer component. Each object contains the event name, HTML description, and event type, fully detailing the behavioral contract for listeners. The input expects precise event descriptions helpful for integrators to handle events such as focus, pointer interaction outside the component, and lifecycle focus events. No additional dependencies are specified beyond the Vue component and valid data format.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DialogContent.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'openAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on open.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties Data (JavaScript)\nDESCRIPTION: This JavaScript array literal defines the properties ('props') for a UI component, intended for use with a documentation component like '<PropsTable>'. Each object describes a property, including its name, HTML-formatted description, type, required status, and optional default value.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuGroup.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Declaring Component PropsTable in Vue\nDESCRIPTION: This snippet uses a PropsTable component to document properties available for a Reka UI component in a Vue.js application. It outlines each prop's name, description, type, requirement status, and default value where relevant. To function, it requires the 'PropsTable' Vue component, with props passed as a JSON array containing each prop definition. Inputs are prop definitions and outputs are an HTML table for documentation. Limitations include data format constraints and a requirement for proper Vue component registration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ListboxFilter.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'input\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'autoFocus',\n    'description': '<p>Focus on element when mounted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, prevents the user from interacting with item</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'modelValue',\n    'description': '<p>The controlled value of the filter. Can be binded with with v-model.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Prop Table with PropsTable Component - Vue - JavaScript\nDESCRIPTION: This snippet uses the custom PropsTable component to render a table of props for a Vue component. The table data is passed as a static array of objects detailing each prop's name, description (including HTML formatting), type, required status, and default value. The component expects this array as the 'data' prop and renders the table accordingly. There are no additional dependencies beyond Vue and the PropsTable component itself. Inputs are the props array; output is the rendered documentation table.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AvatarRoot.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Floating Component Properties Table in Vue\nDESCRIPTION: This snippet uses a <PropsTable> Vue component, passing an array of property definitions as a prop with comprehensive metadata for each property. It documents all configurable props for the floating UI component, such as positioning, collision avoidance, and element composition. Intended for documentation purposes, it has no side effects and depends on the custom Vue component <PropsTable> being available in the project.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/MenubarContent.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'align',\n    'description': '<p>The preferred alignment against the trigger.\\nMay change when collisions occur.</p>\\n',\n    'type': '\\'start\\' | \\'center\\' | \\'end\\'',\n    'required': false,\n    'default': '\\'start\\''\n  },\n  {\n    'name': 'alignOffset',\n    'description': '<p>An offset in pixels from the <code>start</code> or <code>end</code> alignment options.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'arrowPadding',\n    'description': '<p>The padding between the arrow and the edges of the content.\\nIf your content has border-radius, this will prevent it from\\noverflowing the corners.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'avoidCollisions',\n    'description': '<p>When <code>true</code>, overrides the side and align preferences\\nto prevent collisions with boundary edges.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'collisionBoundary',\n    'description': '<p>The element used as the collision boundary. By default\\nthis is the viewport, though you can provide additional\\nelement(s) to be included in this check.</p>\\n',\n    'type': 'Element | (Element | null)[] | null',\n    'required': false\n  },\n  {\n    'name': 'collisionPadding',\n    'description': '<p>The distance in pixels from the boundary edges where collision\\ndetection should occur. Accepts a number (same for all sides),\\nor a partial padding object, for example: { top: 20, left: 20 }.</p>\\n',\n    'type': 'number | Partial<Record<\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\', number>>',\n    'required': false\n  },\n  {\n    'name': 'disableUpdateOnLayoutShift',\n    'description': '<p>Whether to disable the update position for the content when the layout shifted.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'hideWhenDetached',\n    'description': '<p>Whether to hide the content when the trigger becomes fully occluded.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>When <code>true</code>, keyboard navigation will loop from last item to first, and vice versa.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'positionStrategy',\n    'description': '<p>The type of CSS position property to use.</p>\\n',\n    'type': '\\'fixed\\' | \\'absolute\\'',\n    'required': false\n  },\n  {\n    'name': 'prioritizePosition',\n    'description': '<p>Force content to be position within the viewport.</p>\\n<p>Might overlap the reference element, which may not be desired.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The custom element or virtual element that will be set as the reference\\nto position the floating element.</p>\\n<p>If provided, it will replace the default anchor element.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  },\n  {\n    'name': 'side',\n    'description': '<p>The preferred side of the trigger to render against when open.\\nWill be reversed when collisions occur and avoidCollisions\\nis enabled.</p>\\n',\n    'type': '\\'top\\' | \\'right\\' | \\'bottom\\' | \\'left\\'',\n    'required': false\n  },\n  {\n    'name': 'sideOffset',\n    'description': '<p>The distance in pixels from the trigger.</p>\\n',\n    'type': 'number',\n    'required': false\n  },\n  {\n    'name': 'sticky',\n    'description': '<p>The sticky behavior on the align axis. <code>partial</code> will keep the\\ncontent in the boundary as long as the trigger is at least partially\\nin the boundary whilst &quot;always&quot; will keep the content in the boundary\\nregardless.</p>\\n',\n    'type': '\\'partial\\' | \\'always\\'',\n    'required': false\n  },\n  {\n    'name': 'updatePositionStrategy',\n    'description': '<p>Strategy to update the position of the floating element on every animation frame.</p>\\n',\n    'type': '\\'always\\' | \\'optimized\\'',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering EmitsTable for Tooltip Component in Vue\nDESCRIPTION: Vue component rendering an EmitsTable showing the update:open event emitted by the tooltip component when its open state changes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipRoot.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'update:open',\n    'description': '<p>Event handler called when the open state of the tooltip changes.</p>\\n',\n    'type': '[value: boolean]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Props Table (Vue)\nDESCRIPTION: This snippet defines a Vue.js component that renders a table displaying the properties (props) of another UI component.  It receives prop data in the form of a JSON array (`data`) and then iterates through the array to generate table rows. The `data` object contains information about each prop, including its name, description, type, required status, and default value. This approach facilitates dynamic documentation generation for UI components within the Vue application.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogAction.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Properties Table in Vue\nDESCRIPTION: This Vue component (`PropsTable`) renders a table to display properties of other components. It takes an array of property objects as the `data` prop, where each object contains information like 'name', 'description', 'type', 'required', and 'default'. It iterates through the `data` and dynamically generates table rows. No external dependencies are specified in the code.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/Label.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'label\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'for',\n    'description': '<p>The id of the element the label is associated with.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using PropsTable Component in Vue\nDESCRIPTION: This snippet demonstrates how to use the PropsTable component to display documentation for component props. It includes documentation for 'as' and 'asChild' props that control component rendering behavior.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogTrigger.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Reka UI Component Props Definition\nDESCRIPTION: This JSON defines the properties for a Reka UI component. It includes metadata such as the property name, a descriptive explanation, the data type of the property, whether the property is required, and a default value if applicable. The 'as' prop allows specifying which element or component the current component should render as and the 'asChild' prop enables changing the default rendered element to one passed as a child.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/EditableSubmitTrigger.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"name\": \"as\",\"description\": \"The element or component this component should render as. Can be overwritten by <code>asChild</code>.\",\"type\": \"AsTag | Component\",\"required\": false,\"default\": \"'button'\"},{\"name\": \"asChild\",\"description\": \"Change the default rendered element for the one passed as a child, merging their props and behavior.\\nRead our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.\",\"type\": \"boolean\",\"required\": false}]\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Stop Group Props (JavaScript)\nDESCRIPTION: This JavaScript array defines the configurable properties (props) for the Tab Stop Group component. It includes details such as the prop name, description, data type, whether it is required, and its default value. Props control rendering ('as', 'asChild'), focus management ('currentTabStopId', 'defaultCurrentTabStopId', 'preventScrollOnEntryFocus'), and navigation behavior ('dir', 'loop', 'orientation').\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RovingFocusGroup.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': \"'div'\"\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'currentTabStopId',\n    'description': '<p>The controlled value of the current stop item. Can be binded as <code>v-model</code>.</p>\\n',\n    'type': 'string | null',\n    'required': false\n  },\n  {\n    'name': 'defaultCurrentTabStopId',\n    'description': '<p>The value of the current stop item.</p>\\n<p>Use when you do not need to control the state of the stop item.</p>\\n',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'dir',\n    'description': '<p>The direction of navigation between items.</p>\\n',\n    'type': \"'ltr' | 'rtl'\",\n    'required': false\n  },\n  {\n    'name': 'loop',\n    'description': '<p>Whether keyboard navigation should loop around</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': \"'false'\"\n  },\n  {\n    'name': 'orientation',\n    'description': '<p>The orientation of the group.\\nMainly so arrow navigation is done accordingly (left &amp; right vs. up &amp; down)</p>\\n',\n    'type': \"'vertical' | 'horizontal'\",\n    'required': false\n  },\n  {\\n    'name': 'preventScrollOnEntryFocus',\n    'description': '<p>When <code>true</code>, will prevent scrolling to the focus item when focused.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': \"'false'\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Properties Table - Vue\nDESCRIPTION: This Vue.js snippet renders a properties table using the `<PropsTable>` component. The `:data` prop is bound to an array of objects, where each object defines a property with details such as name, description, type, required status, and default value.  The snippet is designed to provide a dynamically generated documentation of the component's properties.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuLabel.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Documentation for component props using PropsTable in Vue.js\nDESCRIPTION: This snippet renders a PropsTable component that displays the properties 'as' and 'asChild' for a React component in a Vue.js environment. It provides descriptions, types, default values, and links to further documentation, facilitating developer understanding of component customization options.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerGridBody.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Emitting Focus Lifecycle Events in Vue.js FocusScope Component\nDESCRIPTION: This snippet lists the event handlers emitted by the FocusScope component related to auto-focusing lifecycle events. The 'mountAutoFocus' event is emitted when the component auto-focuses on mount and can be canceled to prevent default behavior. Similarly, the 'unmountAutoFocus' event is emitted when auto-focusing on unmounting. Both events provide an event object for handlers and assist in managing custom focus control within the application lifecycle.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/FocusScope.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'mountAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on mount.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'unmountAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on unmount.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Emits Table in Vue\nDESCRIPTION: This snippet displays a table containing the emits of a Vue component. It utilizes the `<EmitsTable>` component and passes a data array containing the event names and descriptions, providing the information for documentation purposes. This approach automates the generation of component event documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuSubContent.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<EmitsTable :data=\"[\n  {\n    'name': 'closeAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on close.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'entryFocus',\n    'description': '<p>Event handler called when container is being focused. Can be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'escapeKeyDown',\n    'description': '<p>Event handler called when the escape key is down.\\nCan be prevented.</p>\\n',\n    'type': '[event: KeyboardEvent]'\n  },\n  {\n    'name': 'focusOutside',\n    'description': '<p>Event handler called when the focus moves outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: FocusOutsideEvent]'\n  },\n  {\n    'name': 'interactOutside',\n    'description': '<p>Event handler called when an interaction happens outside the <code>DismissableLayer</code>.\\nSpecifically, when a <code>pointerdown</code> event happens outside or focus moves outside of it.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent | FocusOutsideEvent]'\n  },\n  {\n    'name': 'openAutoFocus',\n    'description': '<p>Event handler called when auto-focusing on open.\\nCan be prevented.</p>\\n',\n    'type': '[event: Event]'\n  },\n  {\n    'name': 'pointerDownOutside',\n    'description': '<p>Event handler called when a <code>pointerdown</code> event happens outside of the <code>DismissableLayer</code>.\\nCan be prevented.</p>\\n',\n    'type': '[event: PointerDownOutsideEvent]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties via JavaScript Array\nDESCRIPTION: This JavaScript array literal defines the properties accepted by a Reka UI component. Each object in the array specifies a property's `name`, HTML `description`, `type`, `required` status, and optional `default` value. This data is structured for consumption by a documentation generation tool or component like `PropsTable`.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TabsContent.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'forceMount',\n    'description': '<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'value',\n    'description': '<p>A unique value that associates the content with a trigger.</p>\\n',\n    'type': 'string | number',\n    'required': true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vue PropsTable Component for Reka UI Documentation\nDESCRIPTION: A Vue PropsTable component that displays documentation for the 'as' and 'asChild' props. The 'as' prop allows specifying the element type or component to render as, while 'asChild' enables composition by merging props with a child element.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/EditablePreview.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'span\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Slots Table in HTML\nDESCRIPTION: This snippet renders a table that describes the available slots of a UI component using the SlotsTable component. The data contains the slot name, description, and type. This allows developers to know how to pass custom content or modify the behavior of a component through slots.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/Toggle.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'modelValue',\n    'description': '<p>Current value</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'state',\n    'description': '<p>Current state</p>\\n',\n    'type': '\\'on\\' | \\'off\\' '\n  },\n  {\n    'name': 'pressed',\n    'description': '<p>Current pressed state</p>\\n',\n    'type': 'boolean'\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>Current disabled state</p>\\n',\n    'type': 'boolean'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'PropsTable' Component Properties\nDESCRIPTION: This snippet details the properties available for the 'PropsTable' component, explaining their purpose, types, default values, and behavior. It includes the 'as' property to specify rendering tags or components and the 'asChild' property to override default rendering behavior for composition.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerHeading.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\\n  {\\n    'name': 'as',\\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\\n    'type': 'AsTag | Component',\\n    'required': false,\\n    'default': '\\'div\\''\\n  },\\n  {\\n    'name': 'asChild',\\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\\n    'type': 'boolean',\\n    'required': false\\n  }\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Component Props Table in Vue\nDESCRIPTION: A Vue.js component that displays a table of props for a tooltip component. The data passed to the PropsTable component includes props like delayDuration, disableClosingTrigger, disabled, disableHoverableContent, ignoreNonKeyboardFocus, and skipDelayDuration.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TooltipProvider.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'delayDuration',\n    'description': '<p>The duration from when the pointer enters the trigger until the tooltip gets opened.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '700'\n  },\n  {\n    'name': 'disableClosingTrigger',\n    'description': '<p>When <code>true</code>, clicking on trigger will not close the content.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disabled',\n    'description': '<p>When <code>true</code>, disable tooltip</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'disableHoverableContent',\n    'description': '<p>When <code>true</code>, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'ignoreNonKeyboardFocus',\n    'description': '<p>Prevent the tooltip from opening if the focus did not come from\\nthe keyboard by matching against the <code>:focus-visible</code> selector.\\nThis is useful if you want to avoid opening it when switching\\nbrowser tabs or closing a dialog.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'false'\n  },\n  {\n    'name': 'skipDelayDuration',\n    'description': '<p>How much time a user has to enter another trigger without incurring a delay again.</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '300'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props in Vue\nDESCRIPTION: This code snippet defines the props of a Vue component using the `PropsTable` component. It specifies the name, description, type, whether it is required, and the default value for each prop.  The props include 'as' to define the rendered element, 'asChild' for element composition, and 'nextPage' to override calendar navigation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerNext.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'nextPage',\n    'description': '<p>The function to be used for the next page. Overwrites the <code>nextPage</code> function set on the <code>CalendarRoot</code>.</p>\\n',\n    'type': '((placeholder: DateValue) => DateValue)',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: PropsTable Component Data\nDESCRIPTION: This snippet defines the data structure used to document the `PropsTable` component's properties. It includes details such as the prop's name, description, type, whether it's required, and its default value. The 'as' prop allows rendering the component as a different HTML element or component, while 'asChild' enables merging props and behavior with a child element.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/AlertDialogDescription.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'p\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props\nDESCRIPTION: This snippet defines the props for a Vue component using a data structure suitable for rendering a props table. It specifies the name, description, type, requirement status, and default value for each prop. The props include 'as', 'asChild', and 'forceMount', each with its own description and type information.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DropdownMenuItemIndicator.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n[{\"name\": \"as\",\"description\": \"<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n\",\"type\": \"AsTag | Component\",\"required\": false,\"default\": \"'div'\"},{\"name\": \"asChild\",\"description\": \"<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href='https://www.reka-ui.com/docs/guides/composition'>Composition</a> guide for more details.</p>\\n\",\"type\": \"boolean\",\"required\": false},{\"name\": \"forceMount\",\"description\": \"<p>Used to force mounting when more control is needed. Useful when\\ncontrolling animation with Vue animation libraries.</p>\\n\",\"type\": \"boolean\",\"required\": false}]\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties via JavaScript Array for PropsTable\nDESCRIPTION: A JavaScript array literal defining properties ('as', 'asChild') for a Reka UI component. Each object contains details like name, description (HTML allowed), type, required status, and default value, intended as input data for a PropsTable component.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ScrollAreaThumb.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining SlotsTable Vue Component Props for Slot Data and Model Value\nDESCRIPTION: This snippet configures the SlotsTable component with two props: 'data' (an array of objects each describing a slot with name, description, and type) and 'modelValue' (a DateValue or undefined). It sets the data types and structure expected, enabling dynamic rendering of slots information.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerField.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<SlotsTable :data=\"[\n  {\n    'name': 'segments',\n    'description': '',\n    'type': '{ part: SegmentPart; value: string; }[]'\n  },\n  {\n    'name': 'modelValue',\n    'description': '',\n    'type': 'DateValue | undefined'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Using PropsTable - Vue.js\nDESCRIPTION: This snippet defines a PropsTable component in Vue.js which specifies an array of properties that a UI component accepts. Each property object includes 'name', 'description' (with HTML content), 'type', 'required', and optionally a 'default' value. It describes 'as' for specifying the rendered element or component, 'asChild' to enable rendering with merged child props, and 'reference' for positioning related to an anchor element. The snippet assumes use within the Reka UI system, and relies on Vue.js bindings and components.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/HoverCardTrigger.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'a\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'reference',\n    'description': '<p>The reference (or anchor) element that is being referred to for positioning.</p>\\n<p>If not provided will use the current component as anchor.</p>\\n',\n    'type': 'ReferenceElement',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Table with Vue Template Syntax\nDESCRIPTION: This Vue template snippet uses a PropsTable component to declare the properties of a UI component, including 'as' to specify which element or component to render, 'asChild' to enable composition by merging child props, and 'nonce' for adding a security nonce to style tags. The data is passed as an inline array of prop descriptors with name, description (including HTML content), type, requirement status, and default value. It requires the PropsTable component to render these details for developer reference and documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/Viewport.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  },\n  {\n    'name': 'nonce',\n    'description': '<p>Will add <code>nonce</code> attribute to the style tag which can be used by Content Security Policy. &lt;br&gt; If omitted, inherits globally from <code>ConfigProvider</code>.</p>\\n',\n    'type': 'string',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Props Table with Vue Component\nDESCRIPTION: This Vue.js component, `<PropsTable>`, renders a table that displays the properties (props) of a UI component. It receives an array of objects (`data`) where each object describes a prop, including its name, description, type, requirement status, and default value. The component dynamically creates table rows for each prop, presenting the prop details in a user-friendly format. It leverages the provided data to render the table dynamically. The component's behavior is dependent on the data received via the `:data` prop. The output is a table element.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DateRangePickerHeadCell.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining component props for PropsTable in Vue\nDESCRIPTION: This snippet declares a PropsTable component in Vue with a prop 'data' containing an array of objects that describe component properties, including their name, description, type, whether they are required, and default values. The snippet focuses on the properties 'as' specifying the element/component to render, which defaults to 'tr', and 'asChild' to optionally override rendering by merging child props and behavior. No external dependencies are needed besides basic Vue setup. The input is an array of property objects, and there's no direct output beyond rendering the table. The file is auto-generated and should not be manually edited.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/RangeCalendarGridRow.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'tr\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Component Props Metadata for Reka UI - Vue\nDESCRIPTION: This snippet provides a structured metadata array for a Vue PropsTable component, describing the 'as' and 'asChild' props. The 'as' prop defines the element or component used for rendering, defaulting to 'div'. The 'asChild' prop is a boolean that enables replacing the default element with a child component, merging their properties and behaviors. This supports composition patterns recommended in the Reka UI documentation. It requires Vue and the PropsTable component to interpret the metadata correctly.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/ContextMenuSeparator.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'div\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Props Table in Vue for UI Component Properties\nDESCRIPTION: This snippet defines the prop metadata for a Vue PropsTable component, listing properties 'as' and 'asChild' with their descriptions, types, and configuration details. The 'as' prop controls the element or component to render, defaulting to 'button', while 'asChild' boolean enables replacing the rendered element with a child element merging behavior. It is intended to aid in documenting component APIs and requires a Vue environment set up to support component props and rendering.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/TagsInputClear.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<PropsTable :data=\"[\n  {\n    'name': 'as',\n    'description': '<p>The element or component this component should render as. Can be overwritten by <code>asChild</code>.</p>\\n',\n    'type': 'AsTag | Component',\n    'required': false,\n    'default': '\\'button\\''\n  },\n  {\n    'name': 'asChild',\n    'description': '<p>Change the default rendered element for the one passed as a child, merging their props and behavior.</p>\\n<p>Read our <a href=\\'https://www.reka-ui.com/docs/guides/composition\\'>Composition</a> guide for more details.</p>\\n',\n    'type': 'boolean',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: API Reference: Trigger Button for Alert Dialog\nDESCRIPTION: Defines the trigger button that opens the alert dialog. It is distinguishable visually and accessible, serving as the user interaction point to activate the modal. The accompanying DataAttributesTable displays attribute states for styling or scripting purposes.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogTrigger.md -->\n\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-state]',\n      values: ['open', 'closed'],\n    }\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: API reference for ToolbarLink component\nDESCRIPTION: Describes the link item within the toolbar, facilitating navigation or actions through hyperlink elements. Also references meta documentation.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/toolbar.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-orientation]',\n      values: ['vertical', 'horizontal'],\n    },\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: API Reference: Content Container of Alert Dialog\nDESCRIPTION: Details the component that wraps the main content of the dialog, which appears when the modal is open. It manages focus trapping and screen reader accessibility. The associated DataAttributesTable indicates different states for styling and scripting.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/docs/components/alert-dialog.md#_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n<!-- @include: @/meta/AlertDialogContent.md -->\n\n<DataAttributesTable\n  :data=\"[\n    {\n      attribute: '[data-state]',\n      values: ['open', 'closed'],\n    }\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'SlotsTable' Slot Definitions\nDESCRIPTION: This snippet describes the 'SlotsTable' component's 'headingValue' slot, used for displaying current month and year information. It specifies the slot's name, description, and data type.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/docs/content/meta/DatePickerHeading.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<SlotsTable :data=\"[\\n  {\\n    'name': 'headingValue',\\n    'description': '<p>Current month and year</p>\\n',\\n    'type': 'string'\\n  }\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Running Storybook/Histoire Server using pnpm (Bash)\nDESCRIPTION: Executes the `story:dev` script defined in `package.json` using pnpm. This command starts a local development server for the component storybook/histoire (as mentioned in the text), used for isolated component development and testing. Requires pnpm and project dependencies to be installed.\nSOURCE: https://github.com/unovue/reka-ui/blob/v2/packages/core/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm story:dev\n```"
  }
]