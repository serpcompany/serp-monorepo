[
  {
    "owner": "percona",
    "repo": "percona-toolkit",
    "content": "TITLE: Creating MySQL User Privileges Table in SQL\nDESCRIPTION: This SQL snippet creates the 'mysql.user' table, which defines MySQL user accounts and their global privileges. It specifies columns to store account identifiers, privilege flags, authentication mechanisms, resource limits, SSL options, password attributes, role management flags, and JSON attributes. This table is essential for MySQL security management; required dependencies are MySQL Server (or Percona variant), InnoDB engine, and appropriate database permissions. Inputs are implicit in RDBMS operations, outputs are managed through user authentication and authorization; modifications require root/DBA rights and schema extension constraints may apply.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-8.4.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int unsigned NOT NULL DEFAULT '0',\n  `max_updates` int unsigned NOT NULL DEFAULT '0',\n  `max_connections` int unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT 'caching_sha2_password',\n  `authentication_string` text COLLATE utf8mb3_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `password_last_changed` timestamp NULL DEFAULT NULL,\n  `password_lifetime` smallint unsigned DEFAULT NULL,\n  `account_locked` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Password_reuse_history` smallint unsigned DEFAULT NULL,\n  `Password_reuse_time` smallint unsigned DEFAULT NULL,\n  `Password_require_current` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `User_attributes` json DEFAULT NULL,\n  PRIMARY KEY (`Host`,`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Users and global privileges'\n\n```\n\n----------------------------------------\n\nTITLE: Creating the 'payment' Table in Sakila Schema using SQL\nDESCRIPTION: This SQL statement defines the structure of the `payment` table in the Sakila database. It includes columns for payment details like `payment_id`, `customer_id`, `staff_id`, `rental_id`, `amount`, and timestamps. It defines the primary key (`payment_id`), foreign key constraints referencing `customer`, `rental`, and `staff` tables (with cascading updates and set null on delete for rental), and indexes for efficient querying. The table uses the InnoDB engine and `utf8mb3` charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint unsigned NOT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `rental_id` int DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Example Query Results for Full Table Scans\nDESCRIPTION: Shows sample output from the statements_with_full_table_scans view, demonstrating how query metrics are displayed including latency, row counts, and timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_85\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_full_table_scans limit 1\\G\n*************************** 1. row ***************************\n                   query: SELECT * FROM `schema_tables_w ... ex_usage` . `COUNT_READ` DESC\n                      db: sys\n              exec_count: 1\n           total_latency: 88.20 ms\n     no_index_used_count: 1\nno_good_index_used_count: 0\n       no_index_used_pct: 100\n               rows_sent: 0\n           rows_examined: 1501\n           rows_sent_avg: 0\n       rows_examined_avg: 1501\n              first_seen: 2014-03-07 13:58:20\n               last_seen: 2014-03-07 13:58:20\n                  digest: 64baecd5c1e1e1651a6b92e55442a288\n```\n\n----------------------------------------\n\nTITLE: Creating the 'payment' Table in SQL\nDESCRIPTION: This SQL statement defines the `payment` table structure for the Sakila database. It includes columns for payment details like ID, customer ID, staff ID, rental ID, amount, and dates. It establishes a primary key on `payment_id` and sets up foreign key constraints linking to the `rental`, `customer`, and `staff` tables, ensuring referential integrity. Indexes are created on foreign key columns for performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL auto_increment,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) default NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Generating Thread Stack Trace in MySQL Performance Schema\nDESCRIPTION: Demonstrates how to use the sys.ps_thread_stack function to generate a JSON-formatted stack trace of all statements, stages, and events for a specified thread in Performance Schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_thread_stack(37, FALSE) AS thread_stack\\G\n*************************** 1. row ***************************\nthread_stack: {\"rankdir\": \"LR\",\"nodesep\": \"0.10\",\"stack_created\": \"2014-02-19 13:39:03\",\n\"mysql_version\": \"5.7.3-m13\",\"mysql_user\": \"root@localhost\",\"events\":\n[{\"nesting_event_id\": \"0\", \"event_id\": \"10\", \"timer_wait\": 256.35, \"event_info\":\n\"sql/select\", \"wait_info\": \"select @@version_comment limit 1\\nerrors: 0\\nwarnings: 0\\nlock time:\n...\n```\n\n----------------------------------------\n\nTITLE: Creating the mysql.user Table in SQL\nDESCRIPTION: This SQL statement defines the structure for the `mysql.user` table. It includes columns for user identification (`Host`, `User`), a comprehensive set of global privilege flags (e.g., `Select_priv`, `Insert_priv`, `Super_priv`), SSL configuration (`ssl_type`, `ssl_cipher`), resource limits (`max_questions`, `max_connections`), authentication details (`plugin`, `authentication_string`), password management (`password_expired`, `password_lifetime`, `Password_reuse_history`), account status (`account_locked`), role management privileges (`Create_role_priv`, `Drop_role_priv`), and user attributes (`User_attributes` as JSON). The table uses the InnoDB engine, specifies character sets and collations for various columns, and defines a composite primary key on `Host` and `User`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int unsigned NOT NULL DEFAULT '0',\n  `max_updates` int unsigned NOT NULL DEFAULT '0',\n  `max_connections` int unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT 'caching_sha2_password',\n  `authentication_string` text COLLATE utf8mb3_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `password_last_changed` timestamp NULL DEFAULT NULL,\n  `password_lifetime` smallint unsigned DEFAULT NULL,\n  `account_locked` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Password_reuse_history` smallint unsigned DEFAULT NULL,\n  `Password_reuse_time` smallint unsigned DEFAULT NULL,\n  `Password_require_current` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `User_attributes` json DEFAULT NULL,\n  PRIMARY KEY (`Host`,`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining Staff Table in MySQL\nDESCRIPTION: This statement defines the 'staff' table to hold store staff information, including address, picture, contact, login data, and store assignment. Several foreign keys ensure address and store references are valid, and the table uses various constraints for default values, unique usernames, and secure password storage (utf8_bin collation).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Triggers for Online Schema Change - SQL\nDESCRIPTION: These SQL code snippets define three MySQL triggers (AFTER DELETE, AFTER UPDATE, AFTER INSERT) on the 'osc.t' table to maintain a synchronized shadow copy in 'osc.__new_t'. The triggers automatically propagate deletions, updates, and insertions to the shadow table. Dependencies include a MySQL server with both 'osc.t' and 'osc.__new_t' tables present; the triggers expect the tables to have compatible 'id' and 'default' columns. Inputs are DML operations on 'osc.t', and outputs are corresponding changes in 'osc.__new_t'. Only suitable for schema change workflows that require shadow table synchronization.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER mk_osc_del AFTER DELETE ON `osc`.`t` FOR EACH ROW DELETE IGNORE FROM `osc`.`__new_t` WHERE `osc`.`__new_t`.`id` = OLD.`id`\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER mk_osc_upd AFTER UPDATE ON `osc`.`t` FOR EACH ROW REPLACE INTO `osc`.`__new_t` (`id`, `default`) VALUES (NEW.`id`, NEW.`default`)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER mk_osc_ins AFTER INSERT ON `osc`.`t` FOR EACH ROW REPLACE INTO `osc`.`__new_t` (`id`, `default`) VALUES(NEW.`id`, NEW.`default`)\n```\n\n----------------------------------------\n\nTITLE: Creating the 'customer' Table in SQL\nDESCRIPTION: This SQL snippet defines the `customer` table structure using the InnoDB engine. It includes columns for customer details like ID, store ID, name, email, address ID, active status, and timestamps. It establishes a primary key on `customer_id` and foreign key constraints linking `address_id` to the `address` table and `store_id` to the `store` table. Indexes are created on `store_id`, `address_id`, and `last_name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating User Table in MySQL\nDESCRIPTION: Creates the user table that stores MySQL user accounts and their privileges. Contains numerous privilege columns as enum fields and authentication details. Uses MyISAM engine with UTF-8 character set and collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `user` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Password` char(41) character set latin1 collate latin1_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Reload_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Shutdown_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Process_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `File_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_db_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Super_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_slave_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_client_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_user_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') character set utf8 NOT NULL default '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL default '0',\n  `max_updates` int(11) unsigned NOT NULL default '0',\n  `max_connections` int(11) unsigned NOT NULL default '0',\n  `max_user_connections` int(11) unsigned NOT NULL default '0',\n  PRIMARY KEY  (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.customer Table in SQL\nDESCRIPTION: This SQL command defines the `customer` table for the Sakila database. It stores customer data including an auto-incrementing primary key `customer_id`, store ID, name, email, address ID (foreign key to `address`), active status, creation date, and an automatically updated `last_update` timestamp. Indexes are defined on `store_id`, `address_id`, and `last_name`. Foreign key constraints link `address_id` to `address` and `store_id` to `store`, both with cascading updates. It uses the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Analysis Reports with MySQL Statement Performance Analyzer\nDESCRIPTION: This example demonstrates how to use sys.statement_performance_analyzer to create reports showing queries in the 95th percentile. It illustrates a workflow of creating a temporary table, taking snapshots, saving snapshots, and analyzing both current performance and deltas between snapshots.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_148\n\nLANGUAGE: SQL\nCODE:\n```\n-- To create a report with the queries in the 95th percentile since last truncate of performance_schema.events_statements_summary_by_digest and the delta for a 1 minute period:\n--\n--    1. Create a temporary table to store the initial snapshot.\n--    2. Create the initial snapshot.\n--    3. Save the initial snapshot in the temporary table.\n--    4. Wait one minute.\n--    5. Create a new snapshot.\n--    6. Perform analyzis based on the new snapshot.\n--    7. Perform analyzis based on the delta between the initial and new snapshots.\n\nmysql> CALL sys.statement_performance_analyzer('create_tmp', 'mydb.tmp_digests_ini', NULL);\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> CALL sys.statement_performance_analyzer('snapshot', NULL, NULL);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> CALL sys.statement_performance_analyzer('save', 'mydb.tmp_digests_ini', NULL);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> DO SLEEP(60);\nQuery OK, 0 rows affected (1 min 0.00 sec)\n\nmysql> CALL sys.statement_performance_analyzer('snapshot', NULL, NULL);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> CALL sys.statement_performance_analyzer('overall', NULL, 'with_runtimes_in_95th_percentile');\n+-----------------------------------------+\n| Next Output                             |\n+-----------------------------------------+\n| Queries with Runtime in 95th Percentile |\n+-----------------------------------------+\n1 row in set (0.05 sec)\n\n...\n\nmysql> CALL sys.statement_performance_analyzer('delta', 'mydb.tmp_digests_ini', 'with_runtimes_in_95th_percentile');\n+-----------------------------------------+\n| Next Output                             |\n+-----------------------------------------+\n| Queries with Runtime in 95th Percentile |\n+-----------------------------------------+\n1 row in set (0.03 sec)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Wait Classes by Total Latency in MySQL\nDESCRIPTION: Example query showing wait classes ordered by total latency, with detailed metrics about counts and latency measurements for each event class.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_99\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from wait_classes_global_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Generating Overall MySQL Query Performance Reports with Multiple Views\nDESCRIPTION: This example shows how to create an overall performance report that includes both queries in the 95th percentile and the top 10 queries performing full table scans. It demonstrates how to set a limit on the number of results and combine different views in a single analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_159\n\nLANGUAGE: SQL\nCODE:\n```\n-- To create an overall report of the 95th percentile queries and the top 10 queries with full table scans:\n\nmysql> CALL sys.statement_performance_analyzer('snapshot', NULL, NULL);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @sys.statement_performance_analyzer.limit = 10;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CALL sys.statement_performance_analyzer('overall', NULL, 'with_runtimes_in_95th_percentile,with_full_table_scans');\n+-----------------------------------------+\n| Next Output                             |\n+-----------------------------------------+\n| Queries with Runtime in 95th Percentile |\n+-----------------------------------------+\n1 row in set (0.01 sec)\n\n...\n\n+-------------------------------------+\n| Next Output                         |\n+-------------------------------------+\n| Top 10 Queries with Full Table Scan |\n+-------------------------------------+\n1 row in set (0.09 sec)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Thread in MySQL Performance Schema\nDESCRIPTION: Disables a specific connection/thread in Performance Schema. The procedure takes a connection ID as input and returns a summary of the action performed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_130\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_thread(3);\n+-------------------+\n| summary           |\n+-------------------+\n| Disabled 1 thread |\n+-------------------+\n1 row in set (0.01 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_thread(CONNECTION_ID());\n+-------------------+\n| summary           |\n+-------------------+\n| Disabled 1 thread |\n+-------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Monitoring MySQL Table Alteration Process with Percona Toolkit\nDESCRIPTION: A log output showing the complete process of altering a MySQL table using Percona Toolkit's pt-online-schema-change utility. The log displays check for slave servers, operation parameters, trigger creation/dropping, row copying, and the final table swap.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-online-schema-change/samples/stats-execute-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nNo slaves found.  See --recursion-method if host h=127.1,P=12345 has slaves.\nNot checking slave lag because no slaves were found and --check-replica-lag was not specified.\nOperation, tries, wait:\n  analyze_table, 10, 1\n  copy_rows, 10, 0.25\n  create_triggers, 10, 1\n  drop_triggers, 10, 1\n  swap_tables, 10, 1\n  update_foreign_keys, 10, 1\nAltering `bug_1045317`.`bits`...\nTS Dropping triggers...\nTS Dropped triggers OK.\n# Event              Count\n# ================== =====\n# INSERT                 1\n# mysql_warning_1592     1\nSuccessfully altered `bug_1045317`.`bits`.\nCreating new table...\nCreated new table bug_1045317._bits_new OK.\nAltering new table...\nAltered `bug_1045317`.`_bits_new` OK.\nTS Creating triggers...\nTS Created triggers OK.\nTS Copying approximately 3 rows...\nTS Copied rows OK.\nTS Analyzing new table...\nTS Swapping tables...\nTS Swapped original and new tables OK.\nTS Dropping old table...\nTS Dropped old table `bug_1045317`.`_bits_old` OK.\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL Table\nDESCRIPTION: SQL command to remove a duplicate index 'a' from table 'dupe_key' in the 'test' database. The index 'a' is redundant because it's a left-prefix of the composite index 'a_2' which covers columns 'a' and 'b'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/nosummary_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `test`.`dupe_key` DROP INDEX `a`;\n```\n\n----------------------------------------\n\nTITLE: Error/Warning Statement Analysis Sample in MySQL\nDESCRIPTION: Example query showing how to retrieve information about SQL statements that have generated errors or warnings, including error rates and occurrence timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from statements_with_errors_or_warnings LIMIT 1\\G\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_statement_type in MySQL\nDESCRIPTION: Example query showing how to retrieve data from the host_summary_by_statement_type table, which provides statistics broken down by statement type (create_view, select, stmt, etc.) for each host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from host_summary_by_statement_type;\n+------+----------------------+--------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| host | statement            | total  | total_latency | max_latency | lock_latency | rows_sent | rows_examined | rows_affected | full_scans |\n+------+----------------------+--------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| hal  | create_view          |   2063 | 00:05:04.20   | 463.58 ms   | 1.42 s       |         0 |             0 |             0 |          0 |\n| hal  | select               |    174 | 40.87 s       | 28.83 s     | 858.13 ms    |      5212 |        157022 |             0 |         82 |\n| hal  | stmt                 |   6645 | 15.31 s       | 491.78 ms   | 0 ps         |         0 |             0 |          7951 |          0 |\n| hal  | call_procedure       |     17 | 4.78 s        | 1.02 s      | 37.94 ms     |         0 |             0 |            19 |          0 |\n| hal  | create_table         |     19 | 3.04 s        | 431.71 ms   | 0 ps         |         0 |             0 |             0 |          0 |\n...  \n+------+----------------------+--------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: SQL Query Profiling Output in Percona Toolkit Format\nDESCRIPTION: A profiling report showing SQL query performance metrics. The report ranks queries by their response time, showing two SQL SELECT queries with equal response times (50% each of total time), with query ID hashes and performance statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1604834-2.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Profile\n# Rank Query ID                            Response time Calls R/Call V/M \n# ==== =================================== ============= ===== ====== ====\n#    1 0x8F45041D3231A430A6FCCF25435B296C   0.2148 50.0%     1 0.2148  0.00 SELECT t\n#    2 0xC845F0936D35B0C1EC1B54C188363AAD   0.2148 50.0%     1 0.2148  0.00 SELECT t\n```\n\n----------------------------------------\n\nTITLE: Updating Single Column with Condition in MySQL\nDESCRIPTION: This query updates the vab3concept1id column in db4.vab3concept1upload table to a specific value where vab3concept1upload matches a given value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE db4.vab3concept1upload\nSET    vab3concept1id = '91848182522'\nWHERE  vab3concept1upload='6994465'\n```\n\n----------------------------------------\n\nTITLE: Creating the `db` Table - MySQL Database-Level Privileges - SQL\nDESCRIPTION: Defines the `db` table which stores privilege mappings at the database level for users in MySQL. Depends on MyISAM engine and utf8 support; composite primary key ensures a unique (Host, Db, User) per record. Each privilege column (e.g., Select_priv, Insert_priv) uses Y/N enums to indicate grant status. Inputs are internal privilege assignment statements; outputs are database-level permissions management for access control.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  PRIMARY KEY  (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Staff Table in SQL\nDESCRIPTION: This SQL statement creates the `staff` table for the Sakila database. It defines columns for staff ID, first name, last name, address ID, picture (blob), email, store ID, active status, username, password, and last update timestamp. A primary key is set on `staff_id`, and foreign key constraints (`fk_staff_store`, `fk_staff_address`) link to the `store` and `address` tables. Indexes are included for the foreign key columns, and the table uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-5.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) default NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL default '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) character set utf8 collate utf8_bin default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Overall Report of Query Performance in MySQL\nDESCRIPTION: Example showing how to create a comprehensive report that analyzes both 95th percentile queries and top 10 queries with full table scans using sys.statement_performance_analyzer, demonstrating how to set limit parameters and use multiple view types.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_149\n\nLANGUAGE: SQL\nCODE:\n```\n-- To create an overall report of the 95th percentile queries and the top 10 queries with full table scans:\n\nmysql> CALL sys.statement_performance_analyzer('snapshot', NULL, NULL);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @sys.statement_performance_analyzer.limit = 10;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CALL sys.statement_performance_analyzer('overall', NULL, 'with_runtimes_in_95th_percentile,with_full_table_scans');\n+-----------------------------------------+\n| Next Output                             |\n+-----------------------------------------+\n| Queries with Runtime in 95th Percentile |\n+-----------------------------------------+\n1 row in set (0.01 sec)\n\n...\n\n+-------------------------------------+\n| Next Output                         |\n+-------------------------------------+\n| Top 10 Queries with Full Table Scan |\n+-------------------------------------+\n1 row in set (0.09 sec)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Update Query Log Entry\nDESCRIPTION: Slow query log entry showing an update operation that increments column 'b' by 30 for a specific user. Query took 2.515ms with 0.197ms lock time, examining 1 row and affecting 1 row.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow056.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET timestamp=2222222222;\nupdate t set b = b + 30 where user_id=1;\n```\n\n----------------------------------------\n\nTITLE: Creating the 'payment' Table in SQL\nDESCRIPTION: This SQL statement defines the `payment` table using the InnoDB engine to record customer payment transactions. It includes an auto-incrementing `payment_id` (primary key), IDs linking to `customer`, `staff`, and `rental` tables, the payment `amount`, and `payment_date`. Foreign key constraints are established for `customer_id`, `rental_id` (with ON DELETE SET NULL), and `staff_id`. Indexes are created on `staff_id`, `customer_id`, and `rental_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Columns with JOIN in MySQL\nDESCRIPTION: This query updates columns in db2.tuningdetail_21_265507 table by joining with db1.gonzo table using the 'gonzo' column. It sets column1 and word3 values from the joined table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\n```\n\n----------------------------------------\n\nTITLE: Setup for Payment Table with Foreign Keys in SQL\nDESCRIPTION: Specifies the `payment` table to track financial transactions, involving fields for amount, date, and foreign keys pointing to related customer, rental, and staff tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Schema Redundant Indexes Example\nDESCRIPTION: Demonstrates identifying redundant indexes using the schema_redundant_indexes view. This example shows a redundant index 'j' on the test.rkey table that is made redundant by the composite index 'j_2' on columns j,k.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.schema_redundant_indexes\\G\n*************************** 1. row ***************************\n              table_schema: test\n                table_name: rkey\n      redundant_index_name: j\n   redundant_index_columns: j\nredundant_index_non_unique: 1\n       dominant_index_name: j_2\n    dominant_index_columns: j,k\n dominant_index_non_unique: 1\n            subpart_exists: 0\n            sql_drop_index: ALTER TABLE `test`.`rkey` DROP INDEX `j`\n1 row in set (0.20 sec)\n\nmysql> SHOW CREATE TABLE test.rkey\\G\n*************************** 1. row ***************************\n       Table: rkey\nCreate Table: CREATE TABLE `rkey` (\n  `i` int(11) NOT NULL,\n  `j` int(11) DEFAULT NULL,\n  `k` int(11) DEFAULT NULL,\n  PRIMARY KEY (`i`),\n  KEY `j` (`j`),\n  KEY `j_2` (`j`,`k`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n1 row in set (0.06 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing io_by_thread_by_latency and x$io_by_thread_by_latency Tables - SQL\nDESCRIPTION: This snippet presents the structure of the io_by_thread_by_latency and x$io_by_thread_by_latency tables using the SQL 'DESC' command. Both tables show I/O latency statistics by thread and user, facilitating performance analysis; differences are notable in the data types for latency fields (text in the regular view, numeric in the x$ variant). Access to the referenced tables/views and the Performance Schema are prerequisites. Inputs are table/view names; outputs include detailed column attribute tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc io_by_thread_by_latency;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| user           | varchar(128)        | YES  |     | NULL    |       |\n| total          | decimal(42,0)       | YES  |     | NULL    |       |\n| total_latency  | text                | YES  |     | NULL    |       |\n| min_latency    | text                | YES  |     | NULL    |       |\n| avg_latency    | text                | YES  |     | NULL    |       |\n| max_latency    | text                | YES  |     | NULL    |       |\n| thread_id      | bigint(20) unsigned | NO   |     | NULL    |       |\n| processlist_id | bigint(20) unsigned | YES  |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n8 rows in set (0.14 sec)\n\nmysql> desc x$io_by_thread_by_latency;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| user           | varchar(128)        | YES  |     | NULL    |       |\n| total          | decimal(42,0)       | YES  |     | NULL    |       |\n| total_latency  | decimal(42,0)       | YES  |     | NULL    |       |\n| min_latency    | bigint(20) unsigned | YES  |     | NULL    |       |\n| avg_latency    | decimal(24,4)       | YES  |     | NULL    |       |\n| max_latency    | bigint(20) unsigned | YES  |     | NULL    |       |\n| thread_id      | bigint(20) unsigned | NO   |     | NULL    |       |\n| processlist_id | bigint(20) unsigned | YES  |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n8 rows in set (0.03 sec)\n```\n\n----------------------------------------\n\nTITLE: Preparing a SELECT Statement in SQL\nDESCRIPTION: Prepares a parameterized SELECT statement for later execution. This specific statement selects all columns from table 't' in database 'd', using a constant WHERE clause (1=1) and limiting the result set to one row. Preparation can improve performance for frequently executed queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE SELECT * FROM d.t WHERE 1 LIMIT 1;\\G\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Instruments in MySQL Performance Schema\nDESCRIPTION: Disables instruments within Performance Schema matching a given pattern. The procedure takes a LIKE pattern as input and returns a summary of the number of instruments disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_128\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_instrument('wait/synch/mutex');\n+--------------------------+\n| summary                  |\n+--------------------------+\n| Disabled 155 instruments |\n+--------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_instrument('wait/io/socket/sql/server_tcpip_socket');\n+------------------------+\n| summary                |\n+------------------------+\n| Disabled 1 instruments |\n+------------------------+\n1 row in set (0.00 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_instrument('');\n+--------------------------+\n| summary                  |\n+--------------------------+\n| Disabled 547 instruments |\n+--------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Generating Performance Schema Diagnostics Report in MySQL\nDESCRIPTION: Creates a comprehensive diagnostic report of the MySQL server's current status, including global variables, sys schema views, slow queries, and replication information. Supports configuration options and allows customizing runtime and data collection interval.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_126\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> TEE diag.out;\nmysql> CALL sys.diagnostics(120, 30, 'current');\n...\nmysql> NOTEE;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL System Tables - Privileges and Users\nDESCRIPTION: DDL statements for MySQL system tables that store user privileges, proxies, and server configurations. Includes procs_priv, proxies_priv, servers, tables_priv and user tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Using the sys.table_exists Procedure in MySQL\nDESCRIPTION: Example showing how to use the sys.table_exists procedure to check if a table exists and determine its type. The procedure returns different values based on whether the specified table is a base table, view, temporary table, or doesn't exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_151\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CREATE DATABASE db1;\nQuery OK, 1 row affected (0.07 sec)\n\nmysql> use db1;\nDatabase changed\nmysql> CREATE TABLE t1 (id INT PRIMARY KEY);\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> CREATE TABLE t2 (id INT PRIMARY KEY);\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> CREATE view v_t1 AS SELECT * FROM t1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE TEMPORARY TABLE t1 (id INT PRIMARY KEY);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CALL sys.table_exists('db1', 't1', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.00 sec)\n\n+------------+\n| @exists    |\n+------------+\n| TEMPORARY  |\n+------------+\n1 row in set (0.00 sec)\n\nmysql> CALL sys.table_exists('db1', 't2', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.00 sec)\n\n+------------+\n| @exists    |\n+------------+\n| BASE TABLE |\n+------------+\n1 row in set (0.01 sec)\n\nmysql> CALL sys.table_exists('db1', 'v_t1', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.00 sec)\n\n+---------+\n| @exists |\n+---------+\n| VIEW    |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> CALL sys.table_exists('db1', 't3', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.01 sec)\n\n+---------+\n| @exists |\n+---------+\n|         |\n+---------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating/Altering User 'sally' and Granting Specific MySQL Privileges\nDESCRIPTION: This SQL script first ensures the user 'sally'@'%' exists. It then alters the user to use 'caching_sha2_password' authentication and sets various default password management options (expiration, history, reuse interval, current requirement). Subsequently, it grants INSERT privilege on the 'city' column and SELECT privilege on the 'city_id' column of the `sakila`.`city` table. It also grants SELECT privileges on specific columns ('DateCreated', 'PaymentStat', 'PckPrice', 'SANumber') of the `test`.`t` table. Finally, it grants the basic USAGE privilege on all databases and tables to the user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-84.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'caching_sha2_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`), SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Table\nDESCRIPTION: Defines the structure for the user table in the mysql database, which stores user accounts and their global privileges. It includes columns for host, user, password, and various privilege flags for different MySQL operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Saving Performance Schema configuration with sys.ps_setup_save\nDESCRIPTION: This procedure saves the current configuration of Performance Schema to allow for temporary changes that can be restored later. Requires SUPER privilege for disabling binary logging.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_137\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_save();\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> UPDATE performance_schema.setup_instruments\n    ->    SET enabled = 'YES', timed = 'YES';\nQuery OK, 547 rows affected (0.40 sec)\nRows matched: 784  Changed: 547  Warnings: 0\n\n/* Run some tests that need more detailed instrumentation here */\n\nmysql> CALL sys.ps_setup_reload_saved();\nQuery OK, 0 rows affected (0.32 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL columns_priv Table in SQL\nDESCRIPTION: This SQL statement defines the `columns_priv` table within the `mysql` database. It stores column-level privileges granted to users, specifying which users (`User`) from which hosts (`Host`) have specific privileges (`Column_priv`) on specific columns (`Column_name`) within tables (`Table_name`) in databases (`Db`). The table uses the MyISAM engine and utf8 character set with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL schema_table_statistics Structure\nDESCRIPTION: Shows the table structure for schema_table_statistics which tracks table access statistics including latency metrics, row operations, and I/O metrics. This table provides human-readable performance statistics for MySQL tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_57\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_table_statistics;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| table_schema      | varchar(64)         | YES  |     | NULL    |       |\n| table_name        | varchar(64)         | YES  |     | NULL    |       |\n| total_latency     | text                | YES  |     | NULL    |       |\n| rows_fetched      | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency     | text                | YES  |     | NULL    |       |\n| rows_inserted     | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency    | text                | YES  |     | NULL    |       |\n| rows_updated      | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency    | text                | YES  |     | NULL    |       |\n| rows_deleted      | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency    | text                | YES  |     | NULL    |       |\n| io_read_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read           | text                | YES  |     | NULL    |       |\n| io_read_latency   | text                | YES  |     | NULL    |       |\n| io_write_requests | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write          | text                | YES  |     | NULL    |       |\n| io_write_latency  | text                | YES  |     | NULL    |       |\n| io_misc_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency   | text                | YES  |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n19 rows in set (0.12 sec)\n```\n\n----------------------------------------\n\nTITLE: Generating Server Diagnostics Report with MySQL Stored Procedure\nDESCRIPTION: Creates a comprehensive report of server status including global variables, sys schema views, slow queries, and replication information. Supports configuration options and allows specifying runtime and interval.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_138\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> TEE diag.out;\nmysql> CALL sys.diagnostics(120, 30, 'current');\n...\nmysql> NOTEE;\n```\n\n----------------------------------------\n\nTITLE: Creating Procedure Privileges Table in MySQL\nDESCRIPTION: This SQL code sets up the 'procs_priv' table, crucial for handling user procedure privileges, such as executing or altering routines in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.address Table in SQL\nDESCRIPTION: This SQL command defines the `address` table for the Sakila database. It stores address details with an auto-incrementing primary key `address_id`, address lines, district, city ID (foreign key referencing `city` table), postal code, phone number, and an automatically updated `last_update` timestamp. An index exists on `city_id`, and a foreign key constraint links `city_id` to the `city` table with cascading updates. It uses the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `address` (\n  `address_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Reports with MySQL Statement Performance Analyzer\nDESCRIPTION: This example demonstrates how to create reports showing queries in the 95th percentile and their performance delta over a 1-minute period. It shows the complete workflow including creating temporary storage, taking snapshots, waiting, and analyzing the results.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_158\n\nLANGUAGE: SQL\nCODE:\n```\n-- To create a report with the queries in the 95th percentile since last truncate of performance_schema.events_statements_summary_by_digest and the delta for a 1 minute period:\n--\n--    1. Create a temporary table to store the initial snapshot.\n--    2. Create the initial snapshot.\n--    3. Save the initial snapshot in the temporary table.\n--    4. Wait one minute.\n--    5. Create a new snapshot.\n--    6. Perform analyzis based on the new snapshot.\n--    7. Perform analyzis based on the delta between the initial and new snapshots.\n\nmysql> CALL sys.statement_performance_analyzer('create_tmp', 'mydb.tmp_digests_ini', NULL);\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> CALL sys.statement_performance_analyzer('snapshot', NULL, NULL);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> CALL sys.statement_performance_analyzer('save', 'mydb.tmp_digests_ini', NULL);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> DO SLEEP(60);\nQuery OK, 0 rows affected (1 min 0.00 sec)\n\nmysql> CALL sys.statement_performance_analyzer('snapshot', NULL, NULL);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> CALL sys.statement_performance_analyzer('overall', NULL, 'with_runtimes_in_95th_percentile');\n+-----------------------------------------+\n| Next Output                             |\n+-----------------------------------------+\n| Queries with Runtime in 95th Percentile |\n+-----------------------------------------+\n1 row in set (0.05 sec)\n\n...\n\nmysql> CALL sys.statement_performance_analyzer('delta', 'mydb.tmp_digests_ini', 'with_runtimes_in_95th_percentile');\n+-----------------------------------------+\n| Next Output                             |\n+-----------------------------------------+\n| Queries with Runtime in 95th Percentile |\n+-----------------------------------------+\n1 row in set (0.03 sec)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Instrumentation Using ps_is_thread_instrumented in MySQL\nDESCRIPTION: Example showing how to check if a connection is instrumented within Performance Schema using the sys.ps_is_thread_instrumented() function. The function takes a connection ID parameter and returns 'YES', 'NO', or 'UNKNOWN'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_128\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_thread_instrumented(CONNECTION_ID());\n+------------------------------------------------+\n| sys.ps_is_thread_instrumented(CONNECTION_ID()) |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n1 row in set (0.10 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Performance Schema File IO Summary Data - SQL\nDESCRIPTION: Provides an example SQL query showing how to select and interpret data from the host_summary_by_file_io table. Lists IO counts and latency per host. Prerequisites include MySQL with Performance Schema enabled and table populated. Typical input is select *, output is a table with host, ios, and human-readable latency (e.g., '21.58 s'). Useful for database performance analysis, but accuracy depends on schema configuration and sufficient data volume.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n  mysql> select * from host_summary_by_file_io;\n  +------------+-------+------------+\n  | host       | ios   | io_latency |\n  +------------+-------+------------+\n  | hal1       | 26457 | 21.58 s    |\n  | hal2       |  1189 | 394.21 ms  |\n  +------------+-------+------------+\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Server Variables with Different Size Units\nDESCRIPTION: This snippet shows a MySQL server configuration with variables set to different memory sizes. It demonstrates various unit notations including megabytes (M/MB), kilobytes (K/KB), and gigabytes (G/GB) in both uppercase and lowercase formats.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mycnf002.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\nvar1  = 16M\nvar2  = 16MB\nvar3  = 16m\nvar4  = 16mb\nvar5  = 16K\nvar6  = 16KB\nvar7  = 16k\nvar8  = 16kb\nvar9  = 1G\nvar10 = 1GB\nvar11 = 1g\nvar12 = 1gb\n```\n\n----------------------------------------\n\nTITLE: Inventory Table Schema Definition in SQL\nDESCRIPTION: This snippet defines the `inventory` table structure, which includes movie stock per store, utilizing primary and foreign key constraints to maintain integrity with related tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MySQL Table Existence Check with sys.table_exists Procedure\nDESCRIPTION: This SQL snippet demonstrates the usage of the sys.table_exists stored procedure. It shows how to create different types of tables (base table, view, temporary table) and check their existence using the procedure.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_161\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CREATE DATABASE db1;\nQuery OK, 1 row affected (0.07 sec)\n\nmysql> use db1;\nDatabase changed\nmysql> CREATE TABLE t1 (id INT PRIMARY KEY);\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> CREATE TABLE t2 (id INT PRIMARY KEY);\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> CREATE view v_t1 AS SELECT * FROM t1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE TEMPORARY TABLE t1 (id INT PRIMARY KEY);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CALL sys.table_exists('db1', 't1', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.00 sec)\n\n+------------+\n| @exists    |\n+------------+\n| TEMPORARY  |\n+------------+\n1 row in set (0.00 sec)\n\nmysql> CALL sys.table_exists('db1', 't2', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.00 sec)\n\n+------------+\n| @exists    |\n+------------+\n| BASE TABLE |\n+------------+\n1 row in set (0.01 sec)\n\nmysql> CALL sys.table_exists('db1', 'v_t1', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.00 sec)\n\n+---------+\n| @exists |\n+---------+\n| VIEW    |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> CALL sys.table_exists('db1', 't3', @exists); SELECT @exists;\nQuery OK, 0 rows affected (0.01 sec)\n\n+---------+\n| @exists |\n+---------+\n|         |\n+---------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Statement Digest in MySQL Performance Schema\nDESCRIPTION: This procedure traces instrumentation within Performance Schema for a specific Statement Digest. It generates a report of all statistics tracked for the given digest over a specified interval and attempts to generate an EXPLAIN for the longest running example.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_155\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> call ps_analyze_statement_digest('891ec6860f98ba46d89dd20b0c03652c', 10, 0.1, true, true);\n+--------------------+\n| SUMMARY STATISTICS |\n+--------------------+\n| SUMMARY STATISTICS |\n+--------------------+\n1 row in set (9.11 sec)\n\n+------------+-----------+-----------+-----------+---------------+------------+------------+\n| executions | exec_time | lock_time | rows_sent | rows_examined | tmp_tables | full_scans |\n+------------+-----------+-----------+-----------+---------------+------------+------------+\n|         21 | 4.11 ms   | 2.00 ms   |         0 |            21 |          0 |          0 |\n+------------+-----------+-----------+-----------+---------------+------------+------------+\n1 row in set (9.11 sec)\n\n+------------------------------------------+-------+-----------+\n| event_name                               | count | latency   |\n+------------------------------------------+-------+-----------+\n| stage/sql/checking query cache for query |    16 | 724.37 us |\n| stage/sql/statistics                     |    16 | 546.92 us |\n| stage/sql/freeing items                  |    18 | 520.11 us |\n| stage/sql/init                           |    51 | 466.80 us |\n...\n| stage/sql/cleaning up                    |    18 | 11.92 us  |\n| stage/sql/executing                      |    16 | 6.95 us   |\n+------------------------------------------+-------+-----------+\n17 rows in set (9.12 sec)\n\n+---------------------------+\n| LONGEST RUNNING STATEMENT |\n+---------------------------+\n| LONGEST RUNNING STATEMENT |\n+---------------------------+\n1 row in set (9.16 sec)\n\n+-----------+-----------+-----------+-----------+---------------+------------+-----------+\n| thread_id | exec_time | lock_time | rows_sent | rows_examined | tmp_tables | full_scan |\n+-----------+-----------+-----------+-----------+---------------+------------+-----------+\n|    166646 | 618.43 us | 1.00 ms   |         0 |             1 |          0 |         0 |\n+-----------+-----------+-----------+-----------+---------------+------------+-----------+\n1 row in set (9.16 sec)\n\n// Truncated for clarity...\n+-----------------------------------------------------------------+\n| sql_text                                                        |\n+-----------------------------------------------------------------+\n| select hibeventhe0_.id as id1382_, hibeventhe0_.createdTime ... |\n+-----------------------------------------------------------------+\n1 row in set (9.17 sec)\n\n+------------------------------------------+-----------+\n| event_name                               | latency   |\n+------------------------------------------+-----------+\n| stage/sql/init                           | 8.61 us   |\n| stage/sql/Waiting for query cache lock   | 453.23 us |\n| stage/sql/init                           | 331.07 ns |\n| stage/sql/checking query cache for query | 43.04 us  |\n...\n| stage/sql/freeing items                  | 30.46 us  |\n| stage/sql/cleaning up                    | 662.13 ns |\n+------------------------------------------+-----------+\n             18 rows in set (9.23 sec)\n\n+----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n| id | select_type | table        | type  | possible_keys | key       | key_len | ref         | rows | Extra |\n+----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n|  1 | SIMPLE      | hibeventhe0_ | const | fixedTime     | fixedTime | 775     | const,const |    1 | NULL  |\n+----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n1 row in set (9.27 sec)\n\nQuery OK, 0 rows affected (9.28 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server with InnoDB and Replication Settings\nDESCRIPTION: A complete MySQL configuration file with optimized settings for client connections, server operation, InnoDB storage engine, and replication. The configuration allocates substantial memory resources (43GB for InnoDB buffer pool) and sets up binary logging with specific database exclusions. It also configures performance parameters like cache sizes, connection limits, and logging settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mycnf-baron-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nport            = 3306\nsocket          = /tmp/mysql.sock\n\n[mysqld_safe]\nlog-error=/mnt/data-store/mysql/mysql.err\ngroup=mysql\n\n[mysqld]\nuser            = mysql\npid-file        = /mnt/data-store/mysql/data/mysql.pid\nbasedir         = /usr\ndatadir         = /mnt/data-store/mysql/data\n\nport            = 3306\nsocket          = /tmp/mysql.sock\n#tmpdir          = /mnt/tmp\n\ninnodb_autoinc_lock_mode=0\nslave_exec_mode = IDEMPOTENT\n\nskip-locking\nconcurrent_insert=2\nkey_buffer = 150M\nmax_allowed_packet = 100M\ntable_open_cache = 2000\n\n# Decreasing sort_buffer_size as per CR 404011\nsort_buffer_size = 8M\nmax_connections         = 1500\nread_buffer_size = 16M\nread_rnd_buffer_size = 16M\nmyisam_sort_buffer_size = 64M\nthread_cache_size = 8\nquery_cache_size= 0\ntmp_table_size = 784M\nmax_heap_table_size = 784M\nthread_concurrency = 8\nlog-slow-queries = /mnt/data-store/mysql/logs/slowquery.log\nlog-queries-not-using-indexes\nlong_query_time=0.5\nmin_examined_row_limit=10000\nquery_cache_type=0\n\ninnodb_flush_log_at_trx_commit = 2\n# flush to cache to save disk I/O\n# only lose transactions if no battery backed RAM cache\n\ninnodb_data_home_dir    = /mnt/data-store/mysql/data\ninnodb_data_file_path   = ibdata1:10M:autoextend\ninnodb_log_group_home_dir = /mnt/data-store/mysql/data\ninnodb_buffer_pool_size = 43G\ninnodb_additional_mem_pool_size = 500M\ninnodb_log_file_size    = 2000M\ninnodb_log_files_in_group = 2\ninnodb_log_buffer_size = 10M\ninnodb_thread_concurrency = 16\ninnodb_file_per_table\n\nnet_write_timeout=120\n\n#REPLICATION\nserver-id       = 2171234\nlog-bin=/mnt/data-store/mysql/logs/mysql-bin\nbinlog_format = MIXED\nmax_binlog_size=500M\n\nexpire_logs_days=3\n\nbinlog-ignore-db=avail1\nbinlog-ignore-db=avail2\nbinlog-ignore-db=avail3\nbinlog-ignore-db=avail4\nbinlog-ignore-db=avail5\nbinlog-ignore-db=avail6\nbinlog-ignore-db=avail7\nbinlog-ignore-db=avail8\nbinlog-ignore-db=avail9\nbinlog-ignore-db=avail10\nbinlog-ignore-db=avail11\nbinlog-ignore-db=avail12\nbinlog-ignore-db=avail13\n\nauto_increment_offset = 2\nauto_increment_increment = 4\nrelay-log=/mnt/data-store/mysql/logs/mysql-relay\nlog-slave-updates\n\n# set the general log file, but it should be off at first\ngeneral_log_file        = /mnt/mysql/general.log\ngeneral_log             = 0\n\nlog-error=/mnt/data-store/mysql/mysql.err\n\ninnodb_support_xa = 0\ninnodb_adaptive_hash_index = 0\ntmpdir=/mnt/tmp\nslave-load-tmpdir=/mnt/tmp\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index from UPPER_TEST Table\nDESCRIPTION: SQL command to drop the index 'A' which is a duplicate of the PRIMARY KEY on the same column. This optimization eliminates redundant index storage and maintenance overhead.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/uppercase_names-51.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `test`.`UPPER_TEST` DROP INDEX `A`;\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL statements_with_runtimes_in_95th_percentile View Example\nDESCRIPTION: Demonstrates how to query the statements_with_runtimes_in_95th_percentile view, showing a sample result with details about a specific SQL statement with runtime in the 95th percentile, including execution count, latency statistics, and row information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_runtimes_in_95th_percentile\\G\n*************************** 1. row ***************************\n            query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n               db: sys\n        full_scan: *\n       exec_count: 2\n        err_count: 0\n       warn_count: 0\n    total_latency: 16.75 s\n      max_latency: 16.57 s\n      avg_latency: 8.38 s\n        rows_sent: 84\n    rows_sent_avg: 42\n    rows_examined: 20012\nrows_examined_avg: 10006\n       first_seen: 2014-03-07 13:13:41\n        last_seen: 2014-03-07 13:13:48\n           digest: 54f9bd520f0bbf15db0c2ed93386bec9\n```\n\n----------------------------------------\n\nTITLE: Extracting Table Name from File Path in MySQL\nDESCRIPTION: Shows the usage of extract_table_from_file_name function which parses a file path and returns just the table name portion. This is useful when analyzing Performance Schema IO statistics to identify which specific table is involved.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_107\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.extract_table_from_file_name('/var/lib/mysql/employees/employee.ibd');\n+---------------------------------------------------------------------------+\n| sys.extract_table_from_file_name('/var/lib/mysql/employees/employee.ibd') |\n+---------------------------------------------------------------------------+\n| employee                                                                  |\n+---------------------------------------------------------------------------+\n1 row in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL User Table with Privileges - SQL\nDESCRIPTION: This code snippet creates the 'mysql.user' table in SQL for MySQL, specifying all columns, types, character sets, collations, and privileges required for user management. The table structure uses ENUMs for privileges (such as Select_priv, Insert_priv, etc.), blobs for SSL certificate fields, and integer fields for resource limits. The composite primary key ensures uniqueness of Host and User combinations. Dependencies include a MySQL Server instance capable of using the MyISAM engine, with all supported encodings; intended for system initialization or migration scenarios. Inputs are implicit through SQL execution, and output is the resulting database schema; the structure must be maintained to align with MySQL privilege management requirements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-5.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Checking User Group Permissions for Server Features\nDESCRIPTION: EXPLAIN query that retrieves tabs from pma__usergroups that are not allowed for the current user's group. Specifically targets server-related tabs that are restricted for the root user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT `tab` FROM `phpmyadmin`.`pma__usergroups` WHERE `allowed` = 'N' AND `tab` LIKE 'server%' AND `usergroup` = (SELECT usergroup FROM `phpmyadmin`.`pma__users` WHERE `username` = 'root')\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Tables Privileges Table\nDESCRIPTION: Defines the structure for the mysql.tables_priv table, which stores table-level privileges for MySQL users. It includes fields for host, database, user, table name, grantor, and various privilege sets.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Customer List View in MySQL\nDESCRIPTION: SQL view definition that joins customer, address, city, and country tables to provide a consolidated list of customers with their contact information. The view includes formatted customer names and active status notes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `customer_list` AS select `cu`.`customer_id` AS `ID`,concat(`cu`.`first_name`,_utf8' ',`cu`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,if(`cu`.`active`,_utf8'active',_utf8'') AS `notes`,`cu`.`store_id` AS `SID` from (((`customer` `cu` join `address` `a` on((`cu`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Column with Condition in MySQL\nDESCRIPTION: This SQL query selects distinct values from 'col' in 'tbl' where 'foo' equals 20061219. It includes an EXPLAIN statement with PARTITIONS hint for query plan analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT DISTINCT col FROM tbl WHERE foo=20061219\\G\n```\n\n----------------------------------------\n\nTITLE: Creating the Rental Table with Relationships in MySQL SQL\nDESCRIPTION: Defines the 'rental' table for tracking individual rental transactions within the Sakila database. This snippet specifies data types, auto-increment behavior, primary and unique keys, and establishes foreign key relationships with the 'customer', 'inventory', and 'staff' tables. Dependencies include the referenced tables, and the schema expects inputs aligned to integer IDs, datetime values, and proper referential consistency; output is a new table within the database. Requires InnoDB engine and utf8 charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating user Table in mysql using SQL\nDESCRIPTION: Defines the `user` table within the `mysql` database. This core table stores user accounts, their global privileges (e.g., SELECT, INSERT, CREATE USER), SSL settings, resource limits (max queries, updates, connections), authentication details (plugin, password), and account status (locked, password expiration). It uses the MyISAM engine with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8_bin NOT NULL DEFAULT 'mysql_native_password',\n  `authentication_string` text COLLATE utf8_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `password_last_changed` timestamp NULL DEFAULT NULL,\n  `password_lifetime` smallint(5) unsigned DEFAULT NULL,\n  `account_locked` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Database Synonyms with create_synonym_db\nDESCRIPTION: This example shows how to use the create_synonym_db procedure to create a synonym database with views pointing to all tables in the source database. It's useful for creating shortcuts like 'ps' for 'performance_schema'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_124\n\nLANGUAGE: SQL\nCODE:\n```\nCALL sys.create_synonym_db('performance_schema', 'ps');\n```\n\n----------------------------------------\n\nTITLE: Retrieving MySQL Version Components\nDESCRIPTION: These examples demonstrate how to use the version_major, version_minor, and version_patch functions to retrieve specific components of the MySQL server version.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_123\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT VERSION(), sys.version_major();\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT VERSION(), sys.server_minor();\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT VERSION(), sys.version_patch();\n```\n\n----------------------------------------\n\nTITLE: Creating Table inventory With Foreign Keys and Indexes - MySQL SQL\nDESCRIPTION: This snippet creates the 'inventory' table, which represents items in inventory tied to films and stores, including appropriate indexes and foreign key constraints for linking store_id and film_id. The table includes an auto-incremented primary key and is used to model film copies at multiple stores. It assumes the existence of referenced 'store' and 'film' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Structure - schema_table_lock_waits\nDESCRIPTION: Shows the structure of schema_table_lock_waits table which tracks table lock information including waiting and blocking threads, queries, and lock types. Includes fields for monitoring lock contention and provides SQL commands to kill blocking queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_table_lock_waits;\n+------------------------------+---------------------+------+-----+---------+-------+\n| Field                        | Type                | Null | Key | Default | Extra |\n+------------------------------+---------------------+------+-----+---------+-------+\n| object_schema                | varchar(64)         | YES  |     | NULL    |       |\n| object_name                  | varchar(64)         | YES  |     | NULL    |       |\n| waiting_thread_id            | bigint(20) unsigned | NO   |     | NULL    |       |\n| waiting_pid                  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_account              | text                | YES  |     | NULL    |       |\n| waiting_lock_type            | varchar(32)         | NO   |     | NULL    |       |\n| waiting_lock_duration        | varchar(32)         | NO   |     | NULL    |       |\n| waiting_query                | longtext            | YES  |     | NULL    |       |\n| waiting_query_secs           | bigint(20)          | YES  |     | NULL    |       |\n| waiting_query_rows_affected  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_query_rows_examined  | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_thread_id           | bigint(20) unsigned | NO   |     | NULL    |       |\n| blocking_pid                 | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_account             | text                | YES  |     | NULL    |       |\n| blocking_lock_type           | varchar(32)         | NO   |     | NULL    |       |\n| blocking_lock_duration       | varchar(32)         | NO   |     | NULL    |       |\n| sql_kill_blocking_query      | varchar(31)         | YES  |     | NULL    |       |\n| sql_kill_blocking_connection | varchar(25)         | YES  |     | NULL    |       |\n+------------------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Schema Consumers\nDESCRIPTION: Enables Performance Schema consumers matching a given pattern. Allows enabling all consumers or specific types of consumers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_144\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_consumer('');\n+-------------------------+\n| summary                 |\n+-------------------------+\n| Enabled 10 consumers    |\n+-------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_consumer('waits');\n+-----------------------+\n| summary               |\n+-----------------------+\n| Enabled 3 consumers   |\n+-----------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating checksums Table in percona_test using SQL\nDESCRIPTION: Defines the `checksums` table within the `percona_test` database. This table is likely used by Percona Toolkit's pt-table-checksum tool to store checksum values for database tables (`db_tbl`) to verify data consistency across replicas. It uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Sample Database Tables\nDESCRIPTION: DDL statements for Sakila sample database tables that model a DVD rental store. Includes actor, address, category, city and country tables with foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying memory_global_by_current_bytes in MySQL (SQL)\nDESCRIPTION: Demonstrates querying the `memory_global_by_current_bytes` view to retrieve global memory usage statistics categorized by event name (allocation type). The query shows current and high-water mark counts and allocation amounts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from memory_global_by_current_bytes;\n+----------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+\n| event_name                             | current_count | current_alloc | current_avg_alloc | high_count | high_alloc | high_avg_alloc |\n+----------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+\n| memory/sql/TABLE_SHARE::mem_root       |           269 | 568.21 KiB    | 2.11 KiB          |        339 | 706.04 KiB | 2.08 KiB       |\n| memory/sql/TABLE                       |           214 | 366.56 KiB    | 1.71 KiB          |        245 | 481.13 KiB | 1.96 KiB       |\n| memory/sql/sp_head::main_mem_root      |            32 | 334.97 KiB    | 10.47 KiB         |        421 | 9.73 MiB   | 23.66 KiB      |\n| memory/sql/Filesort_buffer::sort_keys  |             1 | 255.89 KiB    | 255.89 KiB        |          1 | 256.00 KiB | 256.00 KiB     |\n| memory/mysys/array_buffer              |            82 | 121.66 KiB    | 1.48 KiB          |       1124 | 852.55 KiB | 777 bytes      |\n...\n+----------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Rental Table Definition with Constraints in SQL\nDESCRIPTION: Defines the `rental` table, which logs rental records, using unique keys to maintain combination integrity and foreign keys to ensure relational data consistency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Table with Trigger in Sakila Database\nDESCRIPTION: Creates the customer table in Sakila database with foreign key relationships to address and store tables, and a trigger that automatically sets the create_date field on new records. Uses InnoDB engine with multiple indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL auto_increment,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) default NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL default '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8;\nSET character_set_client = @saved_cs_client;\n\n/*!50003 SET @SAVE_SQL_MODE=@@SQL_MODE*/;\n\nDELIMITER ;;\n/*!50003 SET SESSION SQL_MODE=\"STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER\" */;;\n/*!50003 CREATE */ /*!50017 DEFINER=`msandbox`@`%` */ /*!50003 TRIGGER `customer_create_date` BEFORE INSERT ON `customer` FOR EACH ROW SET NEW.create_date = NOW() */;;\n\nDELIMITER ;\n/*!50003 SET SESSION SQL_MODE=@SAVE_SQL_MODE*/;\n```\n\n----------------------------------------\n\nTITLE: Creating plugin Table for MySQL Plugins - SQL\nDESCRIPTION: Defines the plugin table that stores references to MySQL plugins, including their names and library paths. Features a simple schema with primary key enforcement on the plugin name and uses utf8_bin for proper utf8 binary comparisons. Essential for managing plugin discovery and activation within the MySQL server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.payment Table in SQL\nDESCRIPTION: This SQL snippet defines the `payment` table using the InnoDB engine to record customer payment transactions. It includes foreign keys linking to the `customer`, `staff`, and `rental` tables (`fk_payment_customer`, `fk_payment_staff`, `fk_payment_rental`) with specific ON UPDATE/DELETE actions (CASCADE or SET NULL). It has an auto-incrementing primary key (`payment_id`) and indexes on foreign key columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint unsigned NOT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `rental_id` int DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Database Privileges Table - MySQL - SQL\nDESCRIPTION: This snippet defines the 'db' table, storing database-wide privilege records for users. The table includes various privilege columns as ENUMs, defining a user's allowed actions within a specific database. It necessitates a MySQL server with utf8 collation and utilizes both a compound primary key and an additional index on the User column. Inputs include Host, Db, User, and all privilege flags. Outputs are the persisted privilege settings for each user-database pair.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Truncating All Tables in MySQL Performance Schema\nDESCRIPTION: This procedure truncates all summary tables within Performance Schema, resetting all aggregated instrumentation as a snapshot. It provides an option to print each TRUNCATE statement before execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_157\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_truncate_all_tables(false);\n+---------------------+\n| summary             |\n+---------------------+\n| Truncated 44 tables |\n+---------------------+\n1 row in set (0.10 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing Session and x$session Views - MySQL sys schema - SQL\nDESCRIPTION: These SQL code samples use the DESC command to provide full schema details of the sys.session and sys.x$session views. They show all field names, types, NULLability, and keys, which is essential for understanding what session-related data is available for querying. No dependencies other than MySQL system access are required, and these commands are useful for DBAs designing session monitoring queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_69\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc session;\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| Field                  | Type                                     | Null | Key | Default | Extra |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\n| command                | varchar(16)                              | YES  |     | NULL    |       |\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\n| statement_latency      | text                                     | YES  |     | NULL    |       |\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\n| lock_latency           | text                                     | YES  |     | NULL    |       |\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| full_scan              | varchar(3)                               | NO   |     |         |       |\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\n| last_statement_latency | text                                     | YES  |     | NULL    |       |\n| current_memory         | text                                     | YES  |     | NULL    |       |\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\n| last_wait_latency      | text                                     | YES  |     | NULL    |       |\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\n| trx_latency            | text                                     | YES  |     | NULL    |       |\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n28 rows in set (0.00 sec)\n\nmysql> desc x$session;\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| Field                  | Type                                     | Null | Key | Default | Extra |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\n| command                | varchar(16)                              | YES  |     | NULL    |       |\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\n| statement_latency      | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\n| lock_latency           | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| full_scan              | varchar(3)                               | NO   |     |         |       |\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\n| last_statement_latency | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| current_memory         | decimal(41,0)                            | YES  |     | NULL    |       |\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\n| last_wait_latency      | varchar(20)                              | YES  |     | NULL    |       |\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\n| trx_latency            | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n28 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: InnoDB Buffer Stats Example Query\nDESCRIPTION: Demonstrates a sample query output from innodb_buffer_stats_by_table showing buffer pool statistics for various tables including system tables and application tables, with metrics for allocation, data size, pages, and cached rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from innodb_buffer_stats_by_table;\n+--------------------------+------------------------------------+------------+-----------+-------+--------------+-----------+-------------+\n| object_schema            | object_name                        | allocated  | data      | pages | pages_hashed | pages_old | rows_cached |\n+--------------------------+------------------------------------+------------+-----------+-------+--------------+-----------+-------------+\n| InnoDB System            | SYS_COLUMNS                        | 128.00 KiB | 98.97 KiB |     8 |            8 |         8 |        1532 |\n| InnoDB System            | SYS_FOREIGN                        | 128.00 KiB | 55.48 KiB |     8 |            8 |         8 |         172 |\n| InnoDB System            | SYS_TABLES                         | 128.00 KiB | 56.18 KiB |     8 |            8 |         8 |         365 |\n| InnoDB System            | SYS_INDEXES                        | 112.00 KiB | 76.16 KiB |     7 |            7 |         7 |        1046 |\n| mem30_trunk__instruments | agentlatencytime                   | 96.00 KiB  | 28.83 KiB |     6 |            6 |         6 |         252 |\n| mem30_trunk__instruments | binlogspaceusagedata               | 96.00 KiB  | 22.54 KiB |     6 |            6 |         6 |         196 |\n| mem30_trunk__instruments | connectionsdata                    | 96.00 KiB  | 36.68 KiB |     6 |            6 |         6 |         276 |\n| mem30_trunk__instruments | connectionsmaxdata                 | 96.00 KiB  | 31.88 KiB |     6 |            6 |         6 |         271 |\n| mem30_trunk__instruments | cpuaverage                         | 96.00 KiB  | 14.32 KiB |     6 |            6 |         6 |          55 |\n| mem30_trunk__instruments | diskiototaldata                    | 96.00 KiB  | 42.71 KiB |     6 |            6 |         6 |         152 |\n| mem30_trunk__instruments | innodbopenfilesdata                | 96.00 KiB  | 32.61 KiB |     6 |            6 |         6 |         266 |\n| mem30_trunk__instruments | innodbrowlocktimestatisticsdata    | 96.00 KiB  | 32.16 KiB |     6 |            6 |         6 |         261 |\n| mem30_trunk__instruments | myisamkeybufferusagedata           | 96.00 KiB  | 25.99 KiB |     6 |            6 |         6 |         232 |\n| mem30_trunk__instruments | mysqlprocessactivity               | 96.00 KiB  | 31.99 KiB |     6 |            6 |         6 |         252 |\n| mem30_trunk__instruments | querycacheaveragefreeblocksizedata | 96.00 KiB  | 27.00 KiB |     6 |            6 |         6 |         237 |\n| mem30_trunk__instruments | querycacheaveragequerysizedata     | 96.00 KiB  | 38.29 KiB |     6 |            6 |         6 |         315 |\n| mem30_trunk__instruments | querycachefragmentationdata        | 96.00 KiB  | 27.00 KiB |     6 |            6 |         6 |         237 |\n| mem30_trunk__instruments | querycachememorydata               | 96.00 KiB  | 32.58 KiB |     6 |            6 |         6 |         278 |\n| mem30_trunk__instruments | querycachequeriesincachedata       | 96.00 KiB  | 27.15 KiB |     6 |            6 |         6 |         238 |\n| mem30_trunk__instruments | ramusagedata                       | 96.00 KiB  | 15.02 KiB |     6 |            6 |         6 |          59 |\n| mem30_trunk__instruments | slaverelaylogspaceusagedata        | 96.00 KiB  | 28.28 KiB |     6 |            6 |         6 |         249 |\n| mem30_trunk__instruments | swapusagedata                      | 96.00 KiB  | 15.02 KiB |     6 |            6 |         6 |          59 |\n| InnoDB System            | SYS_FIELDS                         | 80.00 KiB  | 49.78 KiB |     5 |            5 |         5 |        1147 |\n| InnoDB System            | SYS_DATAFILES                      | 32.00 KiB  | 3.97 KiB  |     2 |            2 |         2 |          60 |\n| InnoDB System            | SYS_FOREIGN_COLS                   | 32.00 KiB  | 7.43 KiB  |     2 |            2 |         2 |          83 |\n| InnoDB System            | SYS_TABLESPACES                    | 32.00 KiB  | 3.65 KiB  |     2 |            2 |         2 |          56 |\n| InnoDB System            | SYS_IBUF_TABLE                     | 16.00 KiB  | 0 bytes   |     1 |            1 |         1 |           0 |\n+--------------------------+------------------------------------+------------+-----------+-------+--------------+-----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Displaying Disabled Performance Schema Components in MySQL\nDESCRIPTION: Shows all disabled Performance Schema configuration including instruments and threads based on boolean parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_150\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_disabled(TRUE, TRUE);\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Information with ps_thread_trx_info in MySQL\nDESCRIPTION: Example of using the sys.ps_thread_trx_info function to retrieve detailed transaction information for a specific thread ID. The function returns JSON-formatted data including transaction state, isolation level, and statements executed within each transaction.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_131\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.ps_thread_trx_info(48)\\G\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL sys.innodb_lock_waits View Example in SQL\nDESCRIPTION: Provides an example `SELECT` query on the `sys.innodb_lock_waits` view using the `\\G` modifier for vertical output. The result shows detailed information about a waiting transaction, the blocking transaction, the queries involved, and potential kill commands.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT * FROM innodb_lock_waits\\G\n*************************** 1. row ***************************\n                wait_started: 2014-11-11 13:39:20\n                    wait_age: 00:00:07\n               wait_age_secs: 7\n                locked_table: `db1`.`t1`\n                locked_index: PRIMARY\n                 locked_type: RECORD\n              waiting_trx_id: 867158\n         waiting_trx_started: 2014-11-11 13:39:15\n             waiting_trx_age: 00:00:12\n     waiting_trx_rows_locked: 0\n   waiting_trx_rows_modified: 0\n                 waiting_pid: 3\n               waiting_query: UPDATE t1 SET val = val + 1 WHERE id = 2\n             waiting_lock_id: 867158:2363:3:3\n           waiting_lock_mode: X\n             blocking_trx_id: 867157\n                blocking_pid: 4\n              blocking_query: UPDATE t1 SET val = val + 1 + SLEEP(10) WHERE id = 2\n            blocking_lock_id: 867157:2363:3:3\n          blocking_lock_mode: X\n        blocking_trx_started: 2014-11-11 13:39:11\n            blocking_trx_age: 00:00:16\n    blocking_trx_rows_locked: 1\n  blocking_trx_rows_modified: 1\n     sql_kill_blocking_query: KILL QUERY 4\nsql_kill_blocking_connection: KILL 4\n```\n\n----------------------------------------\n\nTITLE: Dropping Non-Unique Index from Sakila Database Table\nDESCRIPTION: SQL command to remove the non-unique index 'idx_title_description' from the film_text table in the sakila database schema. The comment indicates this is a non-unique type index removal operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow006-report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `sakila`.`film_text` DROP KEY `idx_title_description`; -- type:non-unique\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_topic` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.help_topic` table, which stores the actual content of the MySQL server-side help system. It contains the topic ID, name, associated category ID, description, example usage, and a URL. It uses the InnoDB storage engine with `STATS_PERSISTENT=0`, has a primary key on `help_topic_id`, and a unique key on the topic `name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'host' Privilege Table - SQL\nDESCRIPTION: Defines the 'host' table for managing host-based privileges, merged with database privilege records. Contains various privilege flags using ENUM data types for each privilege and applies a composite primary key on host and db. The table uses the MyISAM engine and UTF-8 encoding, mirroring much of the structure of the db privilege table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges'\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Performance Schema Instruments\nDESCRIPTION: Disables Performance Schema instruments matching a given pattern. Allows disabling specific types of instruments or all instruments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_140\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_instrument('wait/synch/mutex');\n+--------------------------+\n| summary                  |\n+--------------------------+\n| Disabled 155 instruments |\n+--------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_instrument('wait/io/socket/sql/server_tcpip_socket');\n+------------------------+\n| summary                |\n+------------------------+\n| Disabled 1 instruments |\n+------------------------+\n1 row in set (0.00 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_instrument('');\n+--------------------------+\n| summary                  |\n+--------------------------+\n| Disabled 547 instruments |\n+--------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Language Table in MySQL Database\nDESCRIPTION: SQL definition for the language table in the Sakila database. Stores language options for films in a simple lookup table. Used as a reference for both original and dubbed film languages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Granting Column-Specific INSERT and SELECT Privileges on sakila.city to 'sally'@'%' in MySQL\nDESCRIPTION: This SQL statement grants privileges to the user 'sally'@'%' on the `city` table within the `sakila` database. It permits inserting values specifically into the `city` column (`INSERT (city)`) and allows selecting data from all columns (`SELECT`) as well as explicitly the `city_id` column (`SELECT (city_id)`). Requires the `sakila` database, `city` table, and user 'sally'@'%' to exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-57.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT INSERT (city), SELECT, SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Defining Help Categories Table\nDESCRIPTION: Sets up the `help_category` table to categorize help topics in MySQL. Each category is uniquely identified and may link to a parent category; designed to assist users in navigating help topics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Creating Global Privileges User Table in MySQL\nDESCRIPTION: Defines a `user` table containing MySQL user data and their database-level privileges. Needs MySQL Server with MyISAM engine capability. It handles various privilege flags and authentication details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `authentication_string` text COLLATE utf8_bin NOT NULL,\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: MySQL Data Manipulation Operations\nDESCRIPTION: Series of INSERT, DELETE, UPDATE operations on table 't' including timestamp settings and database context switches\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog003.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET TIMESTAMP=1252682692/*!*/;\ninsert into t (i) values (1)\n/*!*/;\nuse test1/*!*/;\nSET TIMESTAMP=1252682706/*!*/;\ndelete from t where i=1\n/*!*/;\nSET TIMESTAMP=1252690643/*!*/;\ninsert into t (i) values (1)\n/*!*/;\nuse test2/*!*/;\nSET TIMESTAMP=1252690645/*!*/;\ninsert into t (i) values (2)\n/*!*/;\nSET TIMESTAMP=1252690666/*!*/;\ninsert into t (i) values (3),(4),(5),(6),(7),(8),(9),(10)\n/*!*/;\nSET TIMESTAMP=1252690677/*!*/;\ndelete from t where i = 3 or i = 5\n/*!*/;\nSET TIMESTAMP=1252690685/*!*/;\nupdate t set i = 11 where i = 10\n/*!*/;\nSET TIMESTAMP=1252690696/*!*/;\ninsert into t (i) values (13),(14),(15),(16)\n/*!*/;\nSET TIMESTAMP=1252690703/*!*/;\ndelete from t where i < 5\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Creating engine_cost Table - MySQL SQL\nDESCRIPTION: Defines the `engine_cost` table which stores cost model parameters for MySQL storage engines. Essential for query optimizer tunings, with columns for engine name, device type, cost values, and defaults for specific cost names. It uses generated columns for computed defaults. Inputs come from configuration or optimizer feedback; outputs are used by the server's query planner. Requires no special dependencies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `engine_cost` (\n  `engine_name` varchar(64) NOT NULL,\n  `device_type` int NOT NULL,\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  `default_value` float GENERATED ALWAYS AS ((case `cost_name` when _utf8mb3'io_block_read_cost' then 1.0 when _utf8mb3'memory_block_read_cost' then 0.25 else NULL end)) VIRTUAL,\n  PRIMARY KEY (`cost_name`,`engine_name`,`device_type`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL\nDESCRIPTION: This SQL snippet creates a 'store' table with columns for store information and foreign key constraints to 'staff' and 'address' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table Schema in Sakila Database\nDESCRIPTION: Defines the comprehensive film table schema with various metadata fields, foreign keys to language table, and enums for rating and special features.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year DEFAULT NULL,\n  `language_id` tinyint unsigned NOT NULL,\n  `original_language_id` tinyint unsigned DEFAULT NULL,\n  `rental_duration` tinyint unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Resetting Performance Schema setup with sys.ps_setup_reset_to_default\nDESCRIPTION: This procedure resets the Performance Schema setup to the default settings. It accepts a boolean parameter to control verbosity of output during execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_136\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_reset_to_default(true)\\G\n*************************** 1. row ***************************\nstatus: Resetting: setup_actors\nDELETE\nFROM performance_schema.setup_actors\nWHERE NOT (HOST = '%' AND USER = '%' AND ROLE = '%')\n1 row in set (0.00 sec)\n\n*************************** 1. row ***************************\nstatus: Resetting: setup_actors\nINSERT IGNORE INTO performance_schema.setup_actors\nVALUES ('%', '%', '%')\n1 row in set (0.00 sec)\n...\n\nmysql> CALL sys.ps_setup_reset_to_default(false)G\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.default_roles` Table in SQL\nDESCRIPTION: Defines the `default_roles` table in the `mysql` database. This table specifies the default roles assigned to users upon connection, linking a user account (HOST, USER) to their default role(s) (DEFAULT_ROLE_HOST, DEFAULT_ROLE_USER).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `default_roles` (\n  `HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `DEFAULT_ROLE_HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '%',\n  `DEFAULT_ROLE_USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`HOST`,`USER`,`DEFAULT_ROLE_HOST`,`DEFAULT_ROLE_USER`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Default roles'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in MySQL Database\nDESCRIPTION: SQL definition for the payment table in the Sakila database. Records customer payments for rentals, including transaction details and staff who processed the payment. Contains foreign key constraints to the customer, staff, and rental tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table Schema in MySQL\nDESCRIPTION: SQL definition for the 'film' table in the Sakila database, which includes film metadata such as title, description, and rental information. The table has primary and foreign keys, with references to the language table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying Global Wait Classes by Average Latency\nDESCRIPTION: Example query showing wait classes ordered by average latency, excluding idle events, with metrics for total counts and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_104\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from wait_classes_global_by_avg_latency where event_class != 'idle';\n```\n\n----------------------------------------\n\nTITLE: Creating the `rental` Table in SQL\nDESCRIPTION: Defines the SQL structure for the `rental` table in the Sakila database using an InnoDB engine. This table records movie rental transactions, linking customers, inventory items, and staff. It includes columns for rental/return dates, foreign keys to `staff`, `inventory`, and `customer` tables, a primary key (`rental_id`), a unique key, and several indexes for query optimization. The table uses UTF8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment-5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL auto_increment,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime default NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating the 'staff' Table in SQL\nDESCRIPTION: This SQL statement defines the `staff` table for the Sakila database, used to store employee information. It includes columns for staff ID, names, address ID, picture, email, store ID, active status, username, password (hashed), and last update timestamp. The `staff_id` is the primary key. Foreign keys link to the `store` and `address` tables, ensuring that staff members are associated with valid stores and addresses.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) default NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL default '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) character set utf8 collate utf8_bin default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL Database\nDESCRIPTION: SQL definition for the rental table in the Sakila database. Tracks film rental transactions including checkout and return dates. Contains a unique constraint to prevent duplicate rentals and foreign key constraints to inventory, customer, and staff tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Inspecting MySQL Table Structures and Status Using SHOW Statements - SQL\nDESCRIPTION: Includes two important SHOW statements: one retrieves the status of the 'products' table (SHOW TABLE STATUS LIKE 'products') for monitoring storage and usage statistics, and the other displays the table's schema definition (SHOW CREATE TABLE `products`). These statements are foundational for schema inspection and forensic performance analysis. No special prerequisites are needed beyond MySQL access rights. Inputs: 'products' table; Outputs: detailed status and schema for investigation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow048.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS LIKE 'products'\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `products`\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL\nDESCRIPTION: Creates the rental table to track movie rentals with foreign key relationships to inventory, customer, and staff tables. Includes rental dates, return dates, and a unique constraint on rental transactions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Example Query Results for 95th Percentile Runtimes\nDESCRIPTION: Shows sample output from the statements_with_runtimes_in_95th_percentile view, displaying detailed metrics for slow queries including latency, row counts, and execution statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_87\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_runtimes_in_95th_percentile\\G\n*************************** 1. row ***************************\n            query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n               db: sys\n        full_scan: *\n       exec_count: 2\n        err_count: 0\n       warn_count: 0\n    total_latency: 16.75 s\n      max_latency: 16.57 s\n      avg_latency: 8.38 s\n        rows_sent: 84\n    rows_sent_avg: 42\n    rows_examined: 20012\nrows_examined_avg: 10006\n       first_seen: 2014-03-07 13:13:41\n        last_seen: 2014-03-07 13:13:48\n           digest: 54f9bd520f0bbf15db0c2ed93386bec9\n```\n\n----------------------------------------\n\nTITLE: Analyzing Statement Digest in MySQL Performance Schema\nDESCRIPTION: This procedure traces instrumentation for a specific Statement Digest in Performance Schema. It generates a report of all statistics tracked for the digest over a specified interval and attempts to generate an EXPLAIN for the longest running example.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_145\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> call ps_analyze_statement_digest('891ec6860f98ba46d89dd20b0c03652c', 10, 0.1, true, true);\n+--------------------+\n| SUMMARY STATISTICS |\n+--------------------+\n| SUMMARY STATISTICS |\n+--------------------+\n1 row in set (9.11 sec)\n\n+------------+-----------+-----------+-----------+---------------+------------+------------+\n| executions | exec_time | lock_time | rows_sent | rows_examined | tmp_tables | full_scans |\n+------------+-----------+-----------+-----------+---------------+------------+------------+\n|         21 | 4.11 ms   | 2.00 ms   |         0 |            21 |          0 |          0 |\n+------------+-----------+-----------+-----------+---------------+------------+------------+\n1 row in set (9.11 sec)\n\n+------------------------------------------+-------+-----------+\n| event_name                               | count | latency   |\n+------------------------------------------+-------+-----------+\n| stage/sql/checking query cache for query |    16 | 724.37 us |\n| stage/sql/statistics                     |    16 | 546.92 us |\n| stage/sql/freeing items                  |    18 | 520.11 us |\n| stage/sql/init                           |    51 | 466.80 us |\n...\n| stage/sql/cleaning up                    |    18 | 11.92 us  |\n| stage/sql/executing                      |    16 | 6.95 us   |\n+------------------------------------------+-------+-----------+\n17 rows in set (9.12 sec)\n\n+---------------------------+\n| LONGEST RUNNING STATEMENT |\n+---------------------------+\n| LONGEST RUNNING STATEMENT |\n+---------------------------+\n1 row in set (9.16 sec)\n\n+-----------+-----------+-----------+-----------+---------------+------------+-----------+\n| thread_id | exec_time | lock_time | rows_sent | rows_examined | tmp_tables | full_scan |\n+-----------+-----------+-----------+-----------+---------------+------------+-----------+\n|    166646 | 618.43 us | 1.00 ms   |         0 |             1 |          0 |         0 |\n+-----------+-----------+-----------+-----------+---------------+------------+-----------+\n1 row in set (9.16 sec)\n\n// Truncated for clarity...\n+-----------------------------------------------------------------+\n| sql_text                                                        |\n+-----------------------------------------------------------------+\n| select hibeventhe0_.id as id1382_, hibeventhe0_.createdTime ... |\n+-----------------------------------------------------------------+\n1 row in set (9.17 sec)\n\n+------------------------------------------+-----------+\n| event_name                               | latency   |\n+------------------------------------------+-----------+\n| stage/sql/init                           | 8.61 us   |\n| stage/sql/Waiting for query cache lock   | 453.23 us |\n| stage/sql/init                           | 331.07 ns |\n| stage/sql/checking query cache for query | 43.04 us  |\n...\n| stage/sql/freeing items                  | 30.46 us  |\n| stage/sql/cleaning up                    | 662.13 ns |\n+------------------------------------------+-----------+\n             18 rows in set (9.23 sec)\n\n+----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n| id | select_type | table        | type  | possible_keys | key       | key_len | ref         | rows | Extra |\n+----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n|  1 | SIMPLE      | hibeventhe0_ | const | fixedTime     | fixedTime | 775     | const,const |    1 | NULL  |\n+----+-------------+--------------+-------+---------------+-----------+---------+-------------+------+-------+\n1 row in set (9.27 sec)\n\nQuery OK, 0 rows affected (9.28 sec)\n```\n\n----------------------------------------\n\nTITLE: Analyzing InnoDB Monitor Output in MySQL\nDESCRIPTION: This snippet shows the complete output of the InnoDB monitor, which provides detailed statistics and status information about the InnoDB storage engine. It includes sections on semaphores, transactions, file I/O, buffer pool, memory usage, and row operations, offering a comprehensive view of the database's performance and current state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/is001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=====================================\n090707 13:18:38 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 37 seconds\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 7, signal count 7\nMutex spin waits 0, rounds 2, OS waits 0\nRW-shared spins 14, OS waits 7; RW-excl spins 0, OS waits 0\n------------\nTRANSACTIONS\n------------\nTrx id counter 0 769\nPurge done for trx's n:o < 0 0 undo n:o < 0 0\nHistory list length 0\nTotal number of lock structs in row lock hash table 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 0 0, not started, process no 4257, OS thread id 140284242860368\nMySQL thread id 3, query id 11 localhost msandbox\nshow innodb status\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for i/o request (insert buffer thread)\nI/O thread 1 state: waiting for i/o request (log thread)\nI/O thread 2 state: waiting for i/o request (read thread)\nI/O thread 3 state: waiting for i/o request (write thread)\nPending normal aio reads: 0, aio writes: 0,\n ibuf aio reads: 0, log i/o's: 0, sync i/o's: 0\nPending flushes (fsync) log: 0; buffer pool: 0\n0 OS file reads, 38 OS file writes, 16 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.14 writes/s, 0.08 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2,\n0 inserts, 0 merged recs, 0 merges\nHash table size 17393, used cells 0, node heap has 1 buffer(s)\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 0 43655\nLog flushed up to   0 43655\nLast checkpoint at  0 43655\n0 pending log writes, 0 pending chkp writes\n11 log i/o's done, 0.03 log i/o's/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 20634452; in additional pool allocated 675584\nBuffer pool size   512\nFree buffers       333\nDatabase pages     178\nModified db pages  0\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages read 0, created 178, written 189\n0.00 reads/s, 0.00 creates/s, 0.43 writes/s\nBuffer pool hit rate 1000 / 1000\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n1 read views open inside InnoDB\nMain thread process no. 4257, id 140284306659664, state: waiting for server activity\nNumber of rows inserted 0, updated 0, deleted 0, read 0\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n```\n\n----------------------------------------\n\nTITLE: Generating a statement latency histogram with sys.ps_statement_avg_latency_histogram\nDESCRIPTION: This procedure outputs a textual histogram graph showing the distribution of average latency values for normalized queries tracked in the Performance Schema events_statements_summary_by_digest table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_144\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_statement_avg_latency_histogram()G\n*************************** 1. row ***************************\nPerformance Schema Statement Digest Average Latency Histogram:\n\n  . = 1 unit\n  * = 2 units\n  # = 3 units\n\n(0 - 38ms)     240 | ################################################################################\n(38 - 77ms)    38  | ......................................\n(77 - 115ms)   3   | ...\n(115 - 154ms)  62  | *******************************\n(154 - 192ms)  3   | ...\n(192 - 231ms)  0   |\n(231 - 269ms)  0   |\n(269 - 307ms)  0   |\n(307 - 346ms)  0   |\n(346 - 384ms)  1   | .\n(384 - 423ms)  1   | .\n(423 - 461ms)  0   |\n(461 - 499ms)  0   |\n(499 - 538ms)  0   |\n(538 - 576ms)  0   |\n(576 - 615ms)  1   | .\n\n  Total Statements: 350; Buckets: 16; Bucket Size: 38 ms;\n```\n\n----------------------------------------\n\nTITLE: Querying memory_by_thread_by_current_bytes in MySQL (SQL)\nDESCRIPTION: Demonstrates querying the `sys.memory_by_thread_by_current_bytes` view to retrieve the top 5 threads based on memory usage. The query shows thread ID, user, and various memory allocation metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.memory_by_thread_by_current_bytes limit 5;\n+-----------+----------------+--------------------+-------------------+-------------------+-------------------+-----------------+\n| thread_id | user           | current_count_used | current_allocated | current_avg_alloc | current_max_alloc | total_allocated |\n+-----------+----------------+--------------------+-------------------+-------------------+-------------------+-----------------+\n|         1 | sql/main       |              29333 | 166.02 MiB        | 5.80 KiB          | 131.13 MiB        | 196.00 MiB      |\n|        55 | root@localhost |                175 | 1.04 MiB          | 6.09 KiB          | 350.86 KiB        | 67.37 MiB       |\n|        58 | root@localhost |                236 | 368.13 KiB        | 1.56 KiB          | 312.05 KiB        | 130.34 MiB      |\n|       904 | root@localhost |                 32 | 18.00 KiB         | 576 bytes         | 16.00 KiB         | 6.68 MiB        |\n|       970 | root@localhost |                 12 | 16.80 KiB         | 1.40 KiB          | 16.00 KiB         | 1.20 MiB        |\n+-----------+----------------+--------------------+-------------------+-------------------+-------------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auction Details with Image URL Transformations\nDESCRIPTION: Complex query retrieving auction information with URL transformations for thumbnails. Includes multiple conditions for platform, status, and marketplace filtering, with result ordering and limiting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT auction_id, auction_title_en AS title, close_time,\n                                         number_of_items_per_lot, \n                                         replace (replace (thumbnail_url,  'sm_thumb', 'carousel'), 'small_thumb', 'carousel') as thumbnail_url,\n                                         replace (replace (thumbnail_url,  'sm_thumb', 'tiny_thumb'), 'small_thumb', 'tiny_thumb') as tinythumb_url,\n                                         current_bid\n                FROM   auction_search\n                WHERE  platform_flag_1 = 1\n                AND    close_flag = 0 \n                AND    close_time >= NOW()\n                AND    marketplace = 'AR'\n                AND auction_id IN (3015562,3028764,3015564,3019075,3015574,2995142,3040162,3015573,2995135,3015578)\n                ORDER BY close_time ASC\n                LIMIT 500\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.film Table Schema (SQL)\nDESCRIPTION: This SQL snippet defines the `film` table for the `sakila` database. It stores details about films, including `title`, `description`, `release_year`, `rental_duration`, `rental_rate`, `length`, `replacement_cost`, `rating`, and `special_features`. It has an auto-incrementing primary key `film_id` and foreign keys `language_id` and `original_language_id` referencing the `language` table. Indexes are created on `title`, `language_id`, and `original_language_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year DEFAULT NULL,\n  `language_id` tinyint unsigned NOT NULL,\n  `original_language_id` tinyint unsigned DEFAULT NULL,\n  `rental_duration` tinyint unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Using pt-archiver with Multiple Slave Lag Checks Example\nDESCRIPTION: An example command showing how to use pt-archiver with multiple --check-slave-lag options to monitor lag on two different slave servers while archiving data from an OLTP server to an OLAP server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-archiver --no-delete --where '1=1' --source h=oltp_server,D=test,t=tbl --dest h=olap_server --check-slave-lag h=slave1 --check-slave-lag h=slave2 --limit 1000 --commit-each\n```\n\n----------------------------------------\n\nTITLE: Creating Table film_actor With Foreign and Primary Keys - MySQL SQL\nDESCRIPTION: This snippet defines the 'film_actor' table, which maps actors to films with a composite primary key, indexes, and foreign key constraints. It ensures actor-film relationships are set up with referential integrity and updates cascade on actor or film ID changes. Requires referenced tables 'actor' and 'film' pre-existing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for pt-pg-summary\nDESCRIPTION: Shows the basic command syntax for running pt-pg-summary tool. The command accepts optional OPTIONS and HOST:PORT parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-pg-summary [OPTIONS] [HOST:[PORT]]\n```\n\n----------------------------------------\n\nTITLE: Showing Disabled Performance Schema Consumers in MySQL\nDESCRIPTION: Displays all currently disabled consumers in Performance Schema configuration.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_151\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_disabled_consumers();\n```\n\n----------------------------------------\n\nTITLE: Statement Analysis Sample Query in MySQL\nDESCRIPTION: Example query demonstrating how to retrieve detailed performance metrics for a single normalized SQL statement, including execution counts, latency times, and resource utilization statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_74\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from statement_analysis limit 1\\G\n```\n\n----------------------------------------\n\nTITLE: Viewing InnoDB Engine Status Output\nDESCRIPTION: This text block shows the output of the MySQL `SHOW ENGINE INNODB STATUS` command. It provides a comprehensive snapshot of the InnoDB storage engine's internal state, including metrics for background threads, semaphores, file I/O, buffer pool, logging, transactions, and row operations. This output is crucial for performance tuning and troubleshooting InnoDB issues.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.003.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=====================================\n100904 10:24:51 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 34 seconds\n-----------------\nBACKGROUND THREAD\n-----------------\nsrv_master_thread loops: 15 1_second, 15 sleeps, 1 10_second, 6 background, 6 flush\nsrv_master_thread log flush and writes: 16\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 4, signal count 4\nMutex spin waits 0, rounds 0, OS waits 0\nRW-shared spins 4, OS waits 4; RW-excl spins 0, OS waits 0\nSpin rounds per wait: 0.00 mutex, 30.00 RW-shared, 0.00 RW-excl\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for i/o request (insert buffer thread)\nI/O thread 1 state: waiting for i/o request (log thread)\nI/O thread 2 state: waiting for i/o request (read thread)\nI/O thread 3 state: waiting for i/o request (read thread)\nI/O thread 4 state: waiting for i/o request (read thread)\nI/O thread 5 state: waiting for i/o request (read thread)\nI/O thread 6 state: waiting for i/o request (write thread)\nI/O thread 7 state: waiting for i/o request (write thread)\nI/O thread 8 state: waiting for i/o request (write thread)\nI/O thread 9 state: waiting for i/o request (write thread)\nPending normal aio reads: 0, aio writes: 0,\n ibuf aio reads: 0, log i/o's: 0, sync i/o's: 0\nPending flushes (fsync) log: 0; buffer pool: 0\n28 OS file reads, 19 OS file writes, 14 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2,\n0 inserts, 0 merged recs, 0 merges\nHash table size 553193, node heap has 1 buffer(s)\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 64909\nLog flushed up to   64909\nLast checkpoint at  64909\nMax checkpoint age    7782360\nCheckpoint age target 7539162\nModified age          0\nCheckpoint age        0\n0 pending log writes, 0 pending chkp writes\n15 log i/o's done, 0.00 log i/o's/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 136740864; in additional pool allocated 0\nInternal hash tables (constant factor + variable factor)\n    Adaptive hash index 2233316 \t(2212772 + 20544)\n    Page hash           69556\n    Dictionary cache    576800 \t(553912 + 22888)\n    File system         41896 \t(41336 + 560)\n    Lock system         166756 \t(166436 + 320)\n    Recovery system     0 \t(0 + 0)\n    Threads             41612 \t(41348 + 264)\nDictionary memory allocated 22888\nBuffer pool size        8191\nBuffer pool size, bytes 134201344\nFree buffers            8172\nDatabase pages          18\nOld database pages      0\nModified db pages       0\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages made young 0, not young 0\n0.00 youngs/s, 0.00 non-youngs/s\nPages read 17, created 1, written 12\n0.00 reads/s, 0.00 creates/s, 0.00 writes/s\nBuffer pool hit rate 1000 / 1000, young-making rate 0 / 1000 not 0 / 1000\nPages read ahead 0.00/s, evicted without access 0.00/s\nLRU len: 18, unzip_LRU len: 0\nI/O sum[0]:cur[0], unzip sum[0]:cur[0]\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n1 read views open inside InnoDB\nMain thread process no. 7809, id 2808687472, state: waiting for server activity\nNumber of rows inserted 2, updated 0, deleted 0, read 6\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n------------\nTRANSACTIONS\n------------\nTrx id counter 908\nPurge done for trx's n:o < 905 undo n:o < 0\nHistory list length 11\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 907, ACTIVE 35 sec, process no 7809, OS thread id 3067652976\n2 lock struct(s), heap size 320, 3 row lock(s)\nMySQL thread id 1, query id 29 localhost 127.0.0.1 root\nshow innodb status\nTABLE LOCK table `test`.`t` trx id 907 lock mode IX\nRECORD LOCKS space id 0 page no 50 n bits 72 index `GEN_CLUST_INDEX` of table `test`.`t` trx id 907 lock_mode X\n---TRANSACTION 3EA5449, not started, process no 11271, OS thread id 1211378000\nMySQL thread id 2541119, query id 76087240 10.32.0.60 vb_admin\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n```\n\n----------------------------------------\n\nTITLE: Creating Film-Actor Junction Table in MySQL Database\nDESCRIPTION: SQL definition for the film_actor table in the Sakila database. This is a many-to-many junction table linking actors to films they appear in. Includes foreign key constraints to both the actor and film tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating func Table - MySQL SQL\nDESCRIPTION: Creates the `func` table, essential for managing user-defined functions (UDFs) and aggregates in MySQL. Stores UDF names, return types, dynamic library paths, and function types for the function loader. Required for plugin management and extension by C-based UDFs. Expected inputs are registration actions; outputs are rows used by the function dispatcher.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `ret` tinyint NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='User defined functions'\n\n```\n\n----------------------------------------\n\nTITLE: Creating Database Synonyms with create_synonym_db Procedure in MySQL\nDESCRIPTION: Example of using the sys.create_synonym_db procedure to create a synonym database with views pointing to all tables in a source database. Useful for creating shortcuts to system schemas like performance_schema or information_schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_136\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n| test               |\n+--------------------+\n5 rows in set (0.00 sec)\n\nmysql> CALL sys.create_synonym_db('performance_schema', 'ps');\n+-------------------------------------+\n| summary                             |\n+-------------------------------------+\n| Created 74 views in the ps database |\n+-------------------------------------+\n1 row in set (8.57 sec)\n\nQuery OK, 0 rows affected (8.57 sec)\n\nmysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| ps                 |\n| sys                |\n| test               |\n+--------------------+\n6 rows in set (0.00 sec)\n\nmysql> SHOW FULL TABLES FROM ps;\n+-----------------------------------------+------------+\n| Tables_in_ps                            | Table_type |\n+-----------------------------------------+------------+\n| accounts                                | VIEW       |\n| cond_instances                          | VIEW       |\n| events_stages_current                   | VIEW       |\n| events_stages_history                   | VIEW       |\n...\n```\n\n----------------------------------------\n\nTITLE: Creating the 'staff' Table in Sakila Schema using SQL\nDESCRIPTION: This SQL statement creates the `staff` table definition for the Sakila database. It holds staff member details like `staff_id`, name, address ID, picture, email, store ID, activity status, username, password (with specific character set and collation), and a timestamp. It defines the primary key (`staff_id`), foreign key constraints referencing `address` and `store` tables (with cascading updates), and relevant indexes. The table uses InnoDB and `utf8mb3`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-8.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Query Processing Statistics (plaintext)\nDESCRIPTION: Provides a summary of statistics related to query execution and comparison. It lists metrics such as the count of failed queries, non-SELECT queries, filtered queries, queries read, queries without differences, queries with differences, and queries encountering errors.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/007/null.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfailed_queries        0\nnot_select            0\nqueries_filtered      0\nqueries_no_diffs      1\nqueries_read          1\nqueries_with_diffs    0\nqueries_with_errors   0\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Replication Async Connection Failover Table\nDESCRIPTION: Defines schema for tracking asynchronous replication connection failover configuration including channel names, hosts, ports and weights.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `replication_asynchronous_connection_failover` (\n  `Channel_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT 'The replication channel name that connects source and replica.',\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.',\n  `Port` int unsigned NOT NULL COMMENT 'The source port that the replica will attempt to switch over the replication connection to in case of a failure.',\n  `Network_namespace` char(64) NOT NULL COMMENT 'The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.',\n  `Weight` tinyint unsigned NOT NULL COMMENT 'The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.',\n  `Managed_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '' COMMENT 'The name of the group which this server belongs to.',\n  PRIMARY KEY (`Channel_name`,`Host`,`Port`,`Network_namespace`,`Managed_name`),\n  KEY `Channel_name` (`Channel_name`,`Managed_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='The source configuration details'\n```\n\n----------------------------------------\n\nTITLE: User Privileges Table Definition - MySQL\nDESCRIPTION: Defines the MySQL user privileges table structure with various permission flags and SSL settings. Each privilege is stored as an enum('N','Y') with a default of 'N'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE (\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  ... additional privileges ...\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges';\n```\n\n----------------------------------------\n\nTITLE: Creating the `help_keyword` Table - MySQL Help Keywords Metadata - SQL\nDESCRIPTION: Specifies the `help_keyword` table which associates keywords with help topics for search functionality in MySQL. Each entry must have a unique integer ID and name, with uniqueness enforced on the name. Relies on MyISAM engine and utf8 charset. Used to power keyword lookups for help system queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY  (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Preparing and Explaining SQL Select Query\nDESCRIPTION: This snippet prepares a SELECT query with placeholders for parameters against a table in a database and shows its EXPLAIN conversion for an analysis of query execution plans. There are no additional dependencies required apart from a SQL-compatible environment. The query is designed to retrieve rows from a table where column values match specified parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump022.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nPREPARE SELECT i,j FROM d.t2 WHERE i=? AND j=?\\G\n# Converted for EXPLAIN\n# EXPLAIN /*!50100 PARTITIONS*/\nSELECT i,j FROM d.t2 WHERE i=? AND j=?\\G\n```\n\n----------------------------------------\n\nTITLE: Explaining a SELECT Statement Execution Plan in SQL (Query 2 Context)\nDESCRIPTION: Retrieves the execution plan for a SELECT query, specifically the one being executed in Query 2. This helps analyze how the database executes the prepared statement. The /*!50100 PARTITIONS*/ comment suggests potential partition information on compatible MySQL versions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM d.t WHERE 1 LIMIT 1;\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the staff table that stores employee information. The table includes personal and login details, a BLOB field for profile pictures, and foreign key relationships to store and address tables with appropriate indexing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining sales_by_film_category View in MySQL Sakila Database\nDESCRIPTION: Creates a view that summarizes total sales by film category. It joins payment, rental, inventory, film, film_category, and category tables to calculate sales amounts grouped by category and ordered by total sales in descending order.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `sales_by_film_category`*/;\n/*!50001 DROP VIEW IF EXISTS `sales_by_film_category`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_film_category` AS select `c`.`name` AS `category`,sum(`p`.`amount`) AS `total_sales` from (((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `film` `f` on((`i`.`film_id` = `f`.`film_id`))) join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `c`.`name` order by sum(`p`.`amount`) desc */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Disabling Background Thread Instrumentation in MySQL Performance Schema\nDESCRIPTION: Disables all background thread instrumentation within Performance Schema. This procedure takes no parameters and returns a summary of the number of background threads disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_127\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_background_threads();\n+--------------------------------+\n| summary                        |\n+--------------------------------+\n| Disabled 18 background threads |\n+--------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Global File IO Statistics by Bytes\nDESCRIPTION: Demonstrates querying the io_global_by_file_by_bytes view to see top IO consumers by bytes, including read/write counts and percentages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM io_global_by_file_by_bytes LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Querying User Stage Summary Data in MySQL\nDESCRIPTION: Example query showing stage execution statistics for the root user, including total counts and latencies for different SQL execution stages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_98\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from user_summary_by_stages;\n```\n\n----------------------------------------\n\nTITLE: Defining Store Table in MySQL\nDESCRIPTION: This snippet describes the 'store' table, which stores location and management relationships for each store in the Sakila database. It utilizes foreign keys to reference the managing staff and the store's address, with unique constraints ensuring a one-to-one relationship between manager and store. The table features an auto-increment primary key and automatic timestamping.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating the 'store' Table in Sakila Schema using SQL\nDESCRIPTION: This SQL statement defines the structure for the `store` table in the Sakila database schema. It includes columns for `store_id`, `manager_staff_id`, `address_id`, and a timestamp. It specifies the primary key (`store_id`), a unique key constraint for the `manager_staff_id`, and foreign keys linking to the `address` and `staff` tables (with cascading updates). The table uses the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-8.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint unsigned NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating actor Table in sakila using SQL\nDESCRIPTION: Defines the `actor` table within the `sakila` sample database. This table stores information about actors, including their ID, first name, last name, and the last update timestamp. It uses the InnoDB engine and includes an index on the actor's last name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating proxies_priv Table in SQL\nDESCRIPTION: Defines the 'proxies_priv' table for proxy privileges, organizing proxy host and user relationships in a MySQL database. The table includes fields for Host, User, Proxied_host, and Proxied_user with default attributes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_user` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `With_grant` tinyint(1) NOT NULL DEFAULT '0',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT ''\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the rental table that tracks film rentals. The table includes a unique constraint on rental date, inventory, and customer to prevent duplicate rentals, along with foreign key relationships to inventory, customer, and staff tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying I/O by Thread and Latency in MySQL\nDESCRIPTION: This SQL query retrieves I/O statistics grouped by thread, showing total I/O operations, latency metrics, and thread information. It's useful for identifying which threads are performing the most I/O or have the highest latencies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from io_by_thread_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Plugins Table\nDESCRIPTION: Defines the `plugin` table for registering plugins used in MySQL. It captures basic metadata about each plugin, enabling the DBMS to align plugin capabilities with system functionalities.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table Schema with Triggers in MySQL\nDESCRIPTION: Defines the film table with extensive metadata fields and constraints. Includes an after-insert trigger that populates the film_text table with new entries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Checking Default Instrument Timing in MySQL Performance Schema\nDESCRIPTION: Shows how to use the sys.ps_is_instrument_default_timed function to determine if an instrument is timed by default in the current MySQL version.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_117\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_instrument_default_timed('statement/sql/select');\n+------------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('statement/sql/select') |\n+------------------------------------------------------------+\n| YES                                                        |\n+------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating db Table in SQL\nDESCRIPTION: Defines the 'db' table for managing database-level privileges in MySQL. Essential for permission management, this table requires MySQL and includes fields for Host, Db, User, with multiple ENUM types for various privileges like Select_priv and Insert_priv, all with default values. A compound primary key ensures a unique combination of Host, Db, and User.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table Privileges Table\nDESCRIPTION: Defines the structure for the tables_priv table in the mysql schema, which stores table-level privileges for users. It includes columns for host, database, user, table name, grantor, timestamp, table privileges, and column privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table in MySQL Database\nDESCRIPTION: SQL definition for the film table in the Sakila database. Stores movie information including titles, descriptions, rental details, and classification data. Contains foreign key constraints to the language table for both primary and original languages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying schema_tables_with_full_table_scans View in MySQL\nDESCRIPTION: Demonstrates a sample query on the schema_tables_with_full_table_scans view, showing the top 5 tables with full table scans, including the number of rows scanned and latency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_66\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_tables_with_full_table_scans limit 5;\n+--------------------+--------------------------------+-------------------+-----------+\n| object_schema      | object_name                    | rows_full_scanned | latency   |\n+--------------------+--------------------------------+-------------------+-----------+\n| mem30__instruments | fsstatistics                   |          10207042 | 13.10 s   |\n| mem30__instruments | preparedstatementapidata       |            436428 | 973.27 ms |\n| mem30__instruments | mysqlprocessactivity           |            411702 | 282.07 ms |\n| mem30__instruments | querycachequeriesincachedata   |            374011 | 767.15 ms |\n| mem30__instruments | rowaccessesdata                |            322321 | 1.55 s    |\n+--------------------+--------------------------------+-------------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving DDL for 'blah' Table in SQL\nDESCRIPTION: Displays the `CREATE TABLE` statement for the table named 'blah'. This helps in understanding the table's structure, including columns, data types, indexes, and constraints, which is crucial for analyzing query execution plans.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `blah`\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Query: User Wait Events Data Sample\nDESCRIPTION: Example query showing wait event metrics grouped by user, including event counts and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_101\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from waits_by_user_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Describing schema_tables_with_full_table_scans Structure in MySQL\nDESCRIPTION: Shows the structure of the schema_tables_with_full_table_scans view, which identifies tables that are being accessed by full table scans.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_71\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_tables_with_full_table_scans;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| object_schema     | varchar(64)         | YES  |     | NULL    |       |\n| object_name       | varchar(64)         | YES  |     | NULL    |       |\n| rows_full_scanned | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency           | text                | YES  |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Metrics View\nDESCRIPTION: Demonstrates querying the 'metrics' view to retrieve various performance metrics including global status, InnoDB metrics, Performance Schema data, and system time. The output shows variable names, values, types, and enabled status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_42\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT * FROM metrics;\n+-----------------------------------------------+-------------------------...+--------------------------------------+---------+\n| Variable_name                                 | Variable_value          ...| Type                                 | Enabled |\n+-----------------------------------------------+-------------------------...+--------------------------------------+---------+\n| aborted_clients                               | 0                       ...| Global Status                        | YES     |\n| aborted_connects                              | 0                       ...| Global Status                        | YES     |\n| binlog_cache_disk_use                         | 0                       ...| Global Status                        | YES     |\n| binlog_cache_use                              | 0                       ...| Global Status                        | YES     |\n| binlog_stmt_cache_disk_use                    | 0                       ...| Global Status                        | YES     |\n| binlog_stmt_cache_use                         | 0                       ...| Global Status                        | YES     |\n| bytes_received                                | 217081                  ...| Global Status                        | YES     |\n| bytes_sent                                    | 27257                   ...| Global Status                        | YES     |\n...\n| innodb_rwlock_x_os_waits                      | 0                       ...| InnoDB Metrics - server              | YES     |\n| innodb_rwlock_x_spin_rounds                   | 2723                    ...| InnoDB Metrics - server              | YES     |\n| innodb_rwlock_x_spin_waits                    | 1                       ...| InnoDB Metrics - server              | YES     |\n| trx_active_transactions                       | 0                       ...| InnoDB Metrics - transaction         | NO      |\n...\n| trx_rseg_current_size                         | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| trx_rseg_history_len                          | 4                       ...| InnoDB Metrics - transaction         | YES     |\n| trx_rw_commits                                | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| trx_undo_slots_cached                         | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| trx_undo_slots_used                           | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| memory_current_allocated                      | 138244216               ...| Performance Schema                   | PARTIAL |\n| memory_total_allocated                        | 138244216               ...| Performance Schema                   | PARTIAL |\n| NOW()                                         | 2015-05-31 13:27:50.382 ...| System Time                          | YES     |\n| UNIX_TIMESTAMP()                              | 1433042870.382          ...| System Time                          | YES     |\n+-----------------------------------------------+-------------------------...+--------------------------------------+---------+\n412 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Top I/O Consumers by File and Latency in MySQL\nDESCRIPTION: This SQL query retrieves the top 5 I/O consumers by file, showing total operations, latency metrics for read, write, and miscellaneous operations. It's useful for identifying which files are experiencing the highest I/O latencies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from io_global_by_file_by_latency limit 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Table Schema in MySQL\nDESCRIPTION: Creates the actor table with fields for actor_id, first_name, last_name, and last_update timestamp. Includes a primary key and an index on last_name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating component Table - MySQL SQL\nDESCRIPTION: Defines the `component` table structure to register pluggable components in MySQL. It auto-generates component IDs and relates components to groups via group IDs. The table is essential for the MySQL component framework, which requires properly indexed, auto-incremented identifiers. Required dependencies include MySQL's component subsystem.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `component` (\n  `component_id` int unsigned NOT NULL AUTO_INCREMENT,\n  `component_group_id` int unsigned NOT NULL,\n  `component_urn` text NOT NULL,\n  PRIMARY KEY (`component_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='Components'\n\n```\n\n----------------------------------------\n\nTITLE: Creating User 'sally' and Granting Specific MySQL Privileges\nDESCRIPTION: This sequence of SQL commands first ensures the user 'sally'@'%' exists (creating it if necessary), then alters the user to use native password authentication and sets default password policies. Subsequently, it grants specific column-level INSERT/SELECT privileges on the `sakila`.`city` and `test`.`t` tables, and finally grants basic USAGE rights on all databases to this user. These commands require appropriate administrative privileges on the MySQL server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`), SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Preparing and Explaining a Parameterized SELECT Query - MySQL - SQL\nDESCRIPTION: This snippet illustrates the preparation of a parameterized SELECT statement in MySQL using PREPARE syntax, selecting from table 'd.t' where column 'i' equals a parameter. It is coupled with an EXPLAIN statement to show the query plan. This usage enables executing similar queries with different parameters, aiding in safe, repeated execution and performance diagnostics. Dependencies include a valid MySQL connection and the existence of table 'd.t'. The query takes a single parameter ('i') as input and returns matching rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report002.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nPREPARE SELECT i FROM d.t WHERE i=?\\G\n# Converted for EXPLAIN\n# EXPLAIN /*!50100 PARTITIONS*/\nSELECT i FROM d.t WHERE i=?\\G\n```\n\n----------------------------------------\n\nTITLE: Defining Help Topics Table\nDESCRIPTION: Establishes the `help_topic` table for storing detailed information about help topics in MySQL. Includes descriptions and examples to aid user understanding.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating Film_Category Table in MySQL\nDESCRIPTION: This SQL script creates the 'film_category' table to establish a many-to-many relationship between films and categories. It includes foreign key constraints to maintain referential integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Host Connection and Query Stats Configuration - YAML/Config\nDESCRIPTION: This configuration file outlines three primary sections: logs, hosts, and statistics regarding queries. Host entries provide connection information such as DSN (Data Source Name), hostnames, and MySQL versioning for each host involved. The stats section records metrics like failed queries, filtered queries, queries read, and differences encountered, offering insights into query processing outcomes within the toolkit. This format is suitable for ingestion by analysis scripts, monitoring tools, or for manual reference, and is typically intended for users familiar with Percona Toolkit or related MySQL analysis utilities. Required dependencies include relevant Percona Toolkits and compatible MySQL instances; key parameters include DSN (for host connections) and various query outcome metrics. The configuration does not execute logic or scripts directly and is constrained to providing static configuration and status records.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/001/select.txt#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n#-----------------------------------------------------------------------\\n# Logs\\n#-----------------------------------------------------------------------\\n\\nFile: ...\\nSize: 145\\n\\n#-----------------------------------------------------------------------\\n# Hosts\\n#-----------------------------------------------------------------------\\n\\nhost1:\\n\\n  DSN:       h=127.1,P=12345\\n  hostname:  ...\\n  MySQL:     ...\\n\\nhost2:\\n\\n  DSN:       h=127.1,P=12348\\n  hostname:  ...\\n  MySQL:     ...\\n\\n#-----------------------------------------------------------------------\\n# Stats\\n#-----------------------------------------------------------------------\\n\\nfailed_queries        0\\nnot_select            0\\nqueries_filtered      0\\nqueries_no_diffs      1\\nqueries_read          1\\nqueries_with_diffs    0\\nqueries_with_errors   0\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Wait Events from Performance Schema in MySQL\nDESCRIPTION: This SQL query retrieves wait events data from the waits_global_by_latency table in Performance Schema, showing various IO and synchronization events with their latency statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_115\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM waits_global_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating User Defined Functions Table in MySQL\nDESCRIPTION: Establishes the 'func' table in MySQL to catalog user-defined functions, specifying their names, return types, and associated dynamic libraries. The table is crucial for extending MySQL functionality with custom computations and aggregations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `func`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Crash Log with Memory Configuration\nDESCRIPTION: Server crash log showing InnoDB assertion failure in srv0srv.c, memory configuration settings, and connection statistics. The log includes key buffer sizes, connection limits, and memory usage calculations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog008.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n091205  4:49:04InnoDB: Assertion failure in thread 1525901664 in file srv0srv.c line 2093\\nInnoDB: We intentionally generate a memory trap.\\nInnoDB: Submit a detailed bug report to http://bugs.mysql.com.\\nInnoDB: If you get repeated assertion failures or crashes, even\\nInnoDB: immediately after the mysqld startup, there may be\\nInnoDB: corruption in the InnoDB tablespace. Please refer to\\nInnoDB: http://dev.mysql.com/doc/refman/5.0/en/forcing-recovery.html\\nInnoDB: about forcing recovery.\\n091205  4:49:04 - mysqld got signal 11;\\n\\nkey_buffer_size=16777216\\nread_buffer_size=1044480\\nmax_used_connections=2101\\nmax_connections=2100\\nthreads_connected=207\\nIt is possible that mysqld could use up to \\nkey_buffer_size + (read_buffer_size + sort_buffer_size)*max_connections = 6459167 K\\nbytes of memory\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Payment Table in SQL\nDESCRIPTION: This SQL snippet defines the `payment` table structure for the Sakila database. It includes columns for payment details like ID, customer ID, staff ID, rental ID, amount, payment date, and last update timestamp. It sets a primary key on `payment_id`, defines several foreign key constraints (`fk_payment_rental`, `fk_payment_customer`, `fk_payment_staff`) linking to the `rental`, `customer`, and `staff` tables respectively, and adds indexes for performance. The table uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL auto_increment,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) default NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.event` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.event` table, which stores information about scheduled events created using `CREATE EVENT`. It includes details like the event name, definition (body), definer, schedule (execution time, interval), status, and associated metadata like character sets and SQL mode. It uses the MyISAM engine and the primary key is a composite of `db` and `name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(93) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.city Table Schema (SQL)\nDESCRIPTION: This SQL statement creates the `city` table for the `sakila` database. It stores city names (`city`), includes an auto-incrementing primary key `city_id`, a foreign key `country_id` referencing the `country` table, and a `last_update` timestamp. An index is created on `country_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `city` (\n  `city_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying Memory Usage by User - MySQL SQL\nDESCRIPTION: This query selects all data from the 'memory_by_user_by_current_bytes' table, yielding memory usage statistics per user. It requires access to the sys schema on a MySQL instance with the Performance Schema active. Inputs are none; outputs are memory use metrics for each user, and NULL users indicate background threads. Output includes columns such as current_count_used and current_allocated.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from memory_by_user_by_current_bytes;\n+------+--------------------+-------------------+-------------------+-------------------+-----------------+\n| user | current_count_used | current_allocated | current_avg_alloc | current_max_alloc | total_allocated |\n+------+--------------------+-------------------+-------------------+-------------------+-----------------+\n| root |               1401 | 1.09 MiB          | 815 bytes         | 334.97 KiB        | 42.73 MiB       |\n| mark |                201 | 496.08 KiB        | 2.47 KiB          | 334.97 KiB        | 5.50 MiB        |\n+------+--------------------+-------------------+-------------------+-------------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Schema Table Statistics Structure\nDESCRIPTION: Shows the structure of schema_table_statistics and x$schema_table_statistics tables which track table operations (fetches, inserts, updates, deletes) and I/O metrics. The x$ variant displays raw numeric values instead of formatted text.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_table_statistics;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| table_schema      | varchar(64)         | YES  |     | NULL    |       |\n| table_name        | varchar(64)         | YES  |     | NULL    |       |\n| total_latency     | text                | YES  |     | NULL    |       |\n| rows_fetched      | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency     | text                | YES  |     | NULL    |       |\n| rows_inserted     | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency    | text                | YES  |     | NULL    |       |\n| rows_updated      | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency    | text                | YES  |     | NULL    |       |\n| rows_deleted      | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency    | text                | YES  |     | NULL    |       |\n| io_read_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read           | text                | YES  |     | NULL    |       |\n| io_read_latency   | text                | YES  |     | NULL    |       |\n| io_write_requests | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write          | text                | YES  |     | NULL    |       |\n| io_write_latency  | text                | YES  |     | NULL    |       |\n| io_misc_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency   | text                | YES  |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n19 rows in set (0.12 sec)\n\nmysql> desc x$schema_table_statistics;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| table_schema      | varchar(64)         | YES  |     | NULL    |       |\n| table_name        | varchar(64)         | YES  |     | NULL    |       |\n| total_latency     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_fetched      | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_inserted     | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency    | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_updated      | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency    | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_deleted      | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency    | bigint(20) unsigned | NO   |     | NULL    |       |\n| io_read_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read           | decimal(41,0)       | YES  |     | NULL    |       |\n| io_read_latency   | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write_requests | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write          | decimal(41,0)       | YES  |     | NULL    |       |\n| io_write_latency  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency   | decimal(42,0)       | YES  |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n19 rows in set (0.13 sec)\n\nmysql> desc x$ps_schema_table_statistics_io;\n+---------------------------+---------------+------+-----+---------+-------+\n| Field                     | Type          | Null | Key | Default | Extra |\n+---------------------------+---------------+------+-----+---------+-------+\n| table_schema              | varchar(64)   | YES  |     | NULL    |       |\n| table_name                | varchar(64)   | YES  |     | NULL    |       |\n| count_read                | decimal(42,0) | YES  |     | NULL    |       |\n| sum_number_of_bytes_read  | decimal(41,0) | YES  |     | NULL    |       |\n| sum_timer_read            | decimal(42,0) | YES  |     | NULL    |       |\n| count_write               | decimal(42,0) | YES  |     | NULL    |       |\n| sum_number_of_bytes_write | decimal(41,0) | YES  |     | NULL    |       |\n| sum_timer_write           | decimal(42,0) | YES  |     | NULL    |       |\n| count_misc                | decimal(42,0) | YES  |     | NULL    |       |\n| sum_timer_misc            | decimal(42,0) | YES  |     | NULL    |       |\n+---------------------------+---------------+------+-----+---------+-------+\n10 rows in set (0.10 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Duplicated Indexes Example in MongoDB\nDESCRIPTION: Example showing how to create two indexes where one is a prefix of another. The first index (idx_01) contains fields f1, f2, f3, and f4, while the second index (idx_02) contains only f1, f2, and f3, making it a prefix of idx_01 and therefore redundant.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-mongodb-index-check/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.getSiblingDB(\"testdb\").test_col.createIndex({\"f1\": 1, \"f2\": -1, \"f3\": 1, \"f4\": 1}, {\"name\": \"idx_01\"});\ndb.getSiblingDB(\"testdb\").test_col.createIndex({\"f1\": 1, \"f2\": -1, \"f3\": 1}, {\"name\": \"idx_02\"});\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL System Database and Privilege Tables - SQL\nDESCRIPTION: This SQL script initializes the `mysql` database if it does not exist and defines tables for managing column, database, host, routine, and table privileges, as well as help system metadata and user-defined function registrations. These scripts require a MySQL server with compatibility for MyISAM storage and the utf8 character set. Inputs include the database context and various privilege or metadata attributes; outputs are persistent MySQL system tables. Constraints include unique and primary keys for privilege mapping and metadata integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `mysql` /*!40100 DEFAULT CHARACTER SET latin1 */;\n```\n\nLANGUAGE: sql\nCODE:\n```\nUSE `mysql`;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `columns_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Table_name` char(64) collate utf8_bin NOT NULL default '',\n  `Column_name` char(64) collate utf8_bin NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') character set utf8 NOT NULL default '',\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `db` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  PRIMARY KEY  (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `func` (\n  `name` char(64) collate utf8_bin NOT NULL default '',\n  `ret` tinyint(1) NOT NULL default '0',\n  `dl` char(128) collate utf8_bin NOT NULL default '',\n  `type` enum('function','aggregate') character set utf8 NOT NULL,\n  PRIMARY KEY  (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned default NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY  (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY  (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY  (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `host` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  PRIMARY KEY  (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `proc` (\n  `db` char(64) character set utf8 collate utf8_bin NOT NULL default '',\n  `name` char(64) NOT NULL default '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL default '',\n  `language` enum('SQL') NOT NULL default 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL default 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL default 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL default 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` char(64) NOT NULL default '',\n  `body` longblob NOT NULL,\n  `definer` char(77) character set utf8 collate utf8_bin NOT NULL default '',\n  `created` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL default '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE') NOT NULL default '',\n  `comment` char(64) character set utf8 collate utf8_bin NOT NULL default '',\n  PRIMARY KEY  (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `procs_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Routine_name` char(64) collate utf8_bin NOT NULL default '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') collate utf8_bin NOT NULL,\n  `Grantor` char(77) collate utf8_bin NOT NULL default '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') character set utf8 NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges';\nSET character_set_client = @saved_cs_client;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `tables_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Table_name` char(64) collate utf8_bin NOT NULL default '',\n  `Grantor` char(77) collate utf8_bin NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view') character set utf8 NOT NULL default '',\n  `Column_priv` set('Select','Insert','Update','References') character set utf8 NOT NULL default '',\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating the mysql.user Table Schema in SQL\nDESCRIPTION: This SQL `CREATE TABLE` statement defines the schema for the `mysql.user` table. It specifies columns for host, user, password (hashed), various global privileges (Select_priv, Insert_priv, etc.), SSL settings, resource limits (max_questions, max_updates, etc.), and defines a composite primary key on the `Host` and `User` columns. The table uses the MyISAM engine and utf8 character set with utf8_bin collation for case-sensitive comparisons.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Password` char(41) character set latin1 collate latin1_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Reload_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Shutdown_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Process_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `File_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_db_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Super_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_slave_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_client_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_user_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') character set utf8 NOT NULL default '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL default '0',\n  `max_updates` int(11) unsigned NOT NULL default '0',\n  `max_connections` int(11) unsigned NOT NULL default '0',\n  `max_user_connections` int(11) unsigned NOT NULL default '0',\n  PRIMARY KEY  (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Performance Analysis View with Automated Refresh in MySQL\nDESCRIPTION: Advanced example demonstrating how to create a custom view for statement performance analysis, set up a persistent table for storing historical data, and use the Linux watch command to automatically refresh performance metrics every minute.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_150\n\nLANGUAGE: SQL\nCODE:\n```\n-- Use a custom view showing the top 10 query sorted by total execution time refreshing the view every minute using\n-- the watch command in Linux.\n\nmysql> CREATE OR REPLACE VIEW mydb.my_statements AS\n    -> SELECT sys.format_statement(DIGEST_TEXT) AS query,\n    ->        SCHEMA_NAME AS db,\n    ->        COUNT_STAR AS exec_count,\n    ->        sys.format_time(SUM_TIMER_WAIT) AS total_latency,\n    ->        sys.format_time(AVG_TIMER_WAIT) AS avg_latency,\n    ->        ROUND(IFNULL(SUM_ROWS_SENT / NULLIF(COUNT_STAR, 0), 0)) AS rows_sent_avg,\n    ->        ROUND(IFNULL(SUM_ROWS_EXAMINED / NULLIF(COUNT_STAR, 0), 0)) AS rows_examined_avg,\n    ->        ROUND(IFNULL(SUM_ROWS_AFFECTED / NULLIF(COUNT_STAR, 0), 0)) AS rows_affected_avg,\n    ->        DIGEST AS digest\n    ->   FROM performance_schema.events_statements_summary_by_digest\n    -> ORDER BY SUM_TIMER_WAIT DESC;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CALL sys.statement_performance_analyzer('create_table', 'mydb.digests_prev', NULL);\nQuery OK, 0 rows affected (0.10 sec)\n\nshell$ watch -n 60 \"mysql sys --table -e \\\"\n> SET @sys.statement_performance_analyzer.view = 'mydb.my_statements';\n> SET @sys.statement_performance_analyzer.limit = 10;\n> CALL statement_performance_analyzer('snapshot', NULL, NULL);\n> CALL statement_performance_analyzer('delta', 'mydb.digests_prev', 'custom');\n> CALL statement_performance_analyzer('save', 'mydb.digests_prev', NULL);\n> \\\"\"\n\nEvery 60.0s: mysql sys --table -e \"                                                                                                   ...  Mon Dec 22 10:58:51 2014\n\n+----------------------------------+\n| Next Output                      |\n+----------------------------------+\n| Top 10 Queries Using Custom View |\n+----------------------------------+\n+-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+\n| query             | db    | exec_count | total_latency | avg_latency | rows_sent_avg | rows_examined_avg | rows_affected_avg | digest                           |\n+-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+\n...\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.inventory Table in SQL\nDESCRIPTION: This SQL snippet defines the `inventory` table using the InnoDB engine. It tracks individual copies of films available in stores, linking `film` and `store` tables via foreign keys (`fk_inventory_film`, `fk_inventory_store`) with ON UPDATE CASCADE. It features an auto-incrementing primary key (`inventory_id`) and additional indexes for performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint unsigned NOT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Database Privileges Table in SQL\nDESCRIPTION: The snippet creates the db table used for managing database-level privileges in MySQL. Each privilege is defined with enum data types across various operations. It requires a MySQL instance with primary keys on Host, User, and Db. Key parameters include Host, Db, User, and several privilege flags.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`,`Db`),\n  KEY `User` (`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating the 'film_category' Junction Table in SQL\nDESCRIPTION: This SQL statement defines the `film_category` junction table using the InnoDB engine. It links films to categories in a many-to-many relationship. The table includes `film_id` and `category_id` columns, which form a composite primary key. Foreign key constraints connect `category_id` to the `category` table and `film_id` to the `film` table, both with ON UPDATE CASCADE. An index is created on `category_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Describing innodb_buffer_stats_by_schema Tables in MySQL\nDESCRIPTION: Shows the structure of innodb_buffer_stats_by_schema and x$innodb_buffer_stats_by_schema tables. These tables summarize InnoDB buffer page information aggregated by schema, including allocated memory, pages, and cached rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc innodb_buffer_stats_by_schema;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| allocated     | text          | YES  |     | NULL    |       |\n| data          | text          | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n7 rows in set (0.08 sec)\n\nmysql> desc x$innodb_buffer_stats_by_schema;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| allocated     | decimal(43,0) | YES  |     | NULL    |       |\n| data          | decimal(43,0) | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | NO   |     | 0       |       |\n+---------------+---------------+------+-----+---------+-------+\n7 rows in set (0.12 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.engine_cost` Table in SQL\nDESCRIPTION: Defines the `engine_cost` table in the `mysql` database. This table stores cost estimates for various operations (like I/O or memory block reads) performed by different storage engines and device types, used by the query optimizer. It includes a generated column `default_value` providing default costs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `engine_cost` (\n  `engine_name` varchar(64) NOT NULL,\n  `device_type` int NOT NULL,\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  `default_value` float GENERATED ALWAYS AS ((case `cost_name` when _utf8mb3'io_block_read_cost' then 1.0 when _utf8mb3'memory_block_read_cost' then 0.25 else NULL end)) VIRTUAL,\n  PRIMARY KEY (`cost_name`,`engine_name`,`device_type`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n```\n\n----------------------------------------\n\nTITLE: Creating Table payment With Foreign Keys and Automatic Date Set - MySQL SQL\nDESCRIPTION: This snippet defines the 'payment' table, with primary and foreign keys referencing customer, staff, and rental tables and indexes on relevant fields. It includes a BEFORE INSERT trigger that sets the payment_date to the current timestamp when a row is inserted. Suitable for tracking payments, prerequisites are referenced tables' existence and sufficient privileges for triggers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER payment_date BEFORE INSERT ON payment\n\tFOR EACH ROW SET NEW.payment_date = NOW() */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Creating sys.sys_config Table in SQL\nDESCRIPTION: This SQL snippet defines the `sys_config` table using the InnoDB engine, likely for storing system-level configuration parameters. It includes columns for the configuration variable name (`variable`), its value (`value`), the time it was last set (`set_time`), and optionally who set it (`set_by`). The `variable` column serves as the primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sys_config` (\n  `variable` varchar(128) NOT NULL,\n  `value` varchar(128) DEFAULT NULL,\n  `set_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `set_by` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`variable`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Defining the 'help_keyword' Table for Help System Keywords - MySQL - SQL\nDESCRIPTION: Creates the 'help_keyword' table, used by MySQL to map keywords to help topics for user assistance and documentation lookup. Each record includes a unique identifier and keyword, with indexes for efficient search. Depends on integration with related help tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY  (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.actor Table in SQL\nDESCRIPTION: This SQL statement creates the `actor` table in the Sakila sample database. It stores information about actors, including an auto-incrementing primary key `actor_id`, first name, last name, and a timestamp `last_update` that automatically updates. An index is created on the `last_name` column. The table uses the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Values with sys_get_config in MySQL\nDESCRIPTION: Examples of using the sys.sys_get_config function to retrieve configuration values from sys.sys_config with a fallback default. Includes examples of different patterns for checking and assigning configuration values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_132\n\nLANGUAGE: SQL\nCODE:\n```\n-- Get the configuration value from sys.sys_config falling back on 128 if the option is not present in the table.\nmysql> SELECT sys.sys_get_config('statement_truncate_len', 128) AS Value;\n+-------+\n| Value |\n+-------+\n| 64    |\n+-------+\n1 row in set (0.00 sec)\n\n-- Check whether the option is already set, if not assign - IFNULL(...) one liner example.\nmysql> SET @sys.statement_truncate_len = IFNULL(@sys.statement_truncate_len, sys.sys_get_config('statement_truncate_len', 64));\nQuery OK, 0 rows affected (0.00 sec)\n\n-- Check whether the option is already set, if not assign - IF ... THEN ... END IF example.\nIF (@sys.statement_truncate_len IS NULL) THEN\n    SET @sys.statement_truncate_len = sys.sys_get_config('statement_truncate_len', 64);\nEND IF;\n```\n\n----------------------------------------\n\nTITLE: Displaying enabled Performance Schema instruments with sys.ps_setup_show_enabled_instruments\nDESCRIPTION: This procedure shows all currently enabled Performance Schema instruments, with no parameters required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_143\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_enabled_instruments();\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Privileges Table in SQL\nDESCRIPTION: This SQL snippet creates a table named `user` in a MySQL database, designed to store user data and global privileges. Required dependencies include a MySQL database using the MyISAM storage engine with UTF-8 character set. The table includes columns for user identification, privilege settings (as enumerations), and SSL details. It includes specific access rights such as insert, update, and various administration privileges. Expected inputs are user details, and it outputs a structured table for managing user privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-5.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8_bin DEFAULT '',\n  `authentication_string` text COLLATE utf8_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating procs_priv Table in SQL\nDESCRIPTION: The 'procs_priv' table is designed to manage procedure execution privileges in MySQL, including information on who can execute or alter a procedure. It requires MySQL and consists of primary key constraints on a combination of Host, Db, User, Routine_name, and Routine_type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating host Table for Host Privileges - MySQL - SQL\nDESCRIPTION: Defines the host table storing privilege information granted to hosts for databases in MySQL. Features multiple enum fields per privilege, a composite primary key for host-db mapping, and utf8_bin collation for accuracy. Serves to merge and extend host-based and database-based privilege checks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges'\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Performance Schema File IO Summary Tables - SQL\nDESCRIPTION: Displays the structure of the host_summary_by_file_io and x$host_summary_by_file_io tables in MySQL Performance Schema. Shows the definitions of columns (host, ios, io_latency), with differences: io_latency is TEXT in the main table and DECIMAL in the x$ view. Useful for understanding storage formats for latency data when building monitoring queries or tools. No additional dependencies besides an active MySQL server with Performance Schema enabled. Input is issued SQL DESC commands; output is the field structure listing from MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| host       | varchar(60)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | text          | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\nmysql> desc x$host_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| host       | varchar(60)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | decimal(42,0) | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n3 rows in set (0.06 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Plugins Table in SQL\nDESCRIPTION: The plugin table is initialized to hold information about MySQL plugins. Essential fields are name and dynamic library (dl), with a primary key on the name. This allows storage and retrieval of various plugin data within MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.db` Table in SQL\nDESCRIPTION: Defines the `db` table in the `mysql` database. This table manages database-level privileges for users, storing 'Y'/'N' flags for various permissions like Select, Insert, Update, Delete, Create, Drop, etc., associated with specific hosts, users, and databases. The primary key is a composite of Host, User, and Db.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`,`Db`),\n  KEY `User` (`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Table film_category With Foreign and Primary Keys - MySQL SQL\nDESCRIPTION: Creates the 'film_category' table to relate films and categories with appropriate indexes and foreign key constraints. The table includes a composite primary key and ensures cascading updates for both film and category references. Requires referenced tables 'film' and 'category'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Granting User Permissions in MySQL\nDESCRIPTION: This SQL code creates the user 'sally' if she does not exist and configures her authentication settings. It then grants 'sally' specific insert and select permissions on tables in the 'sakila' and 'test' databases. This snippet demonstrates user creation and permission granting in MySQL with detailed control over which columns can be accessed or modified.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke-84.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'caching_sha2_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Example Query for Statements with Sorting\nDESCRIPTION: Demonstrates a sample retrieval of data from `statements_with_sorting`. Key parameters include `query`, `db`, and `total_latency`. It showcases typical results captured by this view, such as the number of sorts and the total latency time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_sorting limit 1\\G\n*************************** 1. row ***************************\n            query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n               db: sys\n       exec_count: 2\n    total_latency: 16.75 s\nsort_merge_passes: 0\n  avg_sort_merges: 0\nsorts_using_scans: 12\n sort_using_range: 0\n      rows_sorted: 168\n  avg_rows_sorted: 84\n       first_seen: 2014-03-07 13:13:41\n        last_seen: 2014-03-07 13:13:48\n           digest: 54f9bd520f0bbf15db0c2ed93386bec9\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Sys Schema using SQL Files\nDESCRIPTION: These snippets demonstrate how to install the MySQL sys schema using specific SQL files for different MySQL versions. Dependencies include a MySQL server and command-line client access with appropriate privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/mysql-sys/\nmysql -u root -p < ./sys_56.sql\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp/mysql-sys/\nmysql -u root -p\nSOURCE ./sys_57.sql\n```\n\n----------------------------------------\n\nTITLE: Querying schema_object_overview Example - SQL\nDESCRIPTION: This query fetches data from 'schema_object_overview', which returns the total number and types of database objects (tables, views, functions, triggers, etc.) grouped by schema. It is typically used for instance-wide audits or schema inventory tasks. Output includes schema name, object type, and count; there are no input requirements beyond SELECT access.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_56\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_object_overview;\n+--------------------+---------------+-------+\n| db                 | object_type   | count |\n+--------------------+---------------+-------+\n| information_schema | SYSTEM VIEW   |    60 |\n| mysql              | BASE TABLE    |    31 |\n| mysql              | INDEX (BTREE) |    69 |\n| performance_schema | BASE TABLE    |    76 |\n| sys                | BASE TABLE    |     1 |\n| sys                | FUNCTION      |    12 |\n| sys                | INDEX (BTREE) |     1 |\n| sys                | PROCEDURE     |    22 |\n| sys                | TRIGGER       |     2 |\n| sys                | VIEW          |    91 |\n+--------------------+---------------+-------+\n10 rows in set (1.58 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Triggers for Film Table in MySQL\nDESCRIPTION: This SQL script creates three triggers (ins_film, upd_film, del_film) for the 'film' table to maintain consistency with the 'film_text' table when inserting, updating, or deleting records.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE */ /*!50017 DEFINER=`msandbox`@`%` */ /*!50003 TRIGGER `ins_film` AFTER INSERT ON `film` FOR EACH ROW BEGIN\n    INSERT INTO film_text (film_id, title, description)\n        VALUES (new.film_id, new.title, new.description);\n  END */;;\n\n/*!50003 CREATE */ /*!50017 DEFINER=`msandbox`@`%` */ /*!50003 TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN\n    IF (old.title != new.title) or (old.description != new.description)\n    THEN\n        UPDATE film_text\n            SET title=new.title,\n                description=new.description,\n                film_id=new.film_id\n        WHERE film_id=old.film_id;\n    END IF;\n  END */;;\n\n/*!50003 CREATE */ /*!50017 DEFINER=`msandbox`@`%` */ /*!50003 TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN\n    DELETE FROM film_text WHERE film_id = old.film_id;\n  END */;;\n\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.proc` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.proc` table, which stores metadata about stored procedures and stored functions. It includes the routine's database, name, type (FUNCTION or PROCEDURE), definer, creation/modification timestamps, definition (body), parameter list, return type information, security type, SQL mode, and character set details. It uses the MyISAM storage engine and the primary key is a composite of `db`, `name`, and `type`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(93) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure and Constraints for 'film_category' - SQL\nDESCRIPTION: Defines the 'film_category' table linking films to categories with primary and foreign keys. The table enforces referential integrity between 'film' and 'category', supporting a many-to-many relationship. Prerequisites: existence of 'film' and 'category' tables. Key parameters are 'film_id' and 'category_id', with each row representing membership of a film in a category.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Process List\nDESCRIPTION: This SQL query selects active processes from the MySQL 'sys.processlist' table where specific conditions are met, such as non-null connection IDs and commands not being 'daemon'. This query helps in monitoring and managing database performance by identifying currently running queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.processlist where conn_id is not null and command != 'daemon' and conn_id != connection_id()\\G\\n*************************** 1. row ***************************\\n                thd_id: 44524\\n               conn_id: 44502\\n                  user: msandbox@localhost\\n                    db: test\\n               command: Query\\n                 state: alter table (flush)\\n                  time: 18\\n     current_statement: alter table t1 add column g int\\n     statement_latency: 18.45 s\\n              progress: 98.84\\n          lock_latency: 265.43 ms\\n         rows_examined: 0\\n             rows_sent: 0\\n         rows_affected: 0\\n            tmp_tables: 0\\n       tmp_disk_tables: 0\\n             full_scan: NO\\n        last_statement: NULL\\nlast_statement_latency: NULL\\n        current_memory: 664.06 KiB\\n             last_wait: wait/io/file/innodb/innodb_data_file\\n     last_wait_latency: 1.07 us\\n                source: fil0fil.cc:5146\\n           trx_latency: NULL\\n             trx_state: NULL\\n        trx_autocommit: NULL\\n                   pid: 4212\\n          program_name: mysql\n```\n\n----------------------------------------\n\nTITLE: Creating the `time_zone_transition` Table - MySQL Time Zone Transitions - SQL\nDESCRIPTION: Constructs the `time_zone_transition` table, which stores the timing of time zone changes (e.g., daylight saving transitions) by associating a time_zone_id with a transition time and its type. The composite primary key provides efficient retrieval. Relies on MyISAM and utf8. Inputs/outputs revolve around conversion of datetime values between zones.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'user' Table\nDESCRIPTION: Drops the existing `user` table if it exists and then creates it. This core MySQL table stores user account information, including host, username, password hash, global privileges (Select, Insert, Update, etc.), SSL settings, and resource limits (max questions, updates, connections). It uses the MyISAM engine and utf8 character set with specific collations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Table structure for table `user`\n--\n\nDROP TABLE IF EXISTS `user`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Condition in 'blah' Table in MySQL\nDESCRIPTION: This query counts the number of rows in the 'blah' table where 'col' is greater than 2. It performs a full scan, examines 10000 rows, and uses a temporary table and filesort on disk. The query time is 9.000052 seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow034.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*) FROM blah WHERE col > 2;\n```\n\n----------------------------------------\n\nTITLE: Checking Consumer Enablement in Performance Schema with MySQL\nDESCRIPTION: Shows how to use the sys.ps_is_consumer_enabled function to determine if a specific consumer is enabled in Performance Schema, considering the consumer hierarchy.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_115\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_consumer_enabled('events_stages_history');\n+-----------------------------------------------------+\n| sys.ps_is_consumer_enabled('events_stages_history') |\n+-----------------------------------------------------+\n| NO                                                  |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Unused Indexes with Percona Toolkit - SQL\nDESCRIPTION: Shows a sample SQL query for retrieving up to 5 unused indexes from the schema_unused_indexes view, including example output. Relies on the presence of the performance_schema with the sys schema installed as per Percona Toolkit. The snippet returns object, table, and index names for database optimization tasks; the result is a limited 5-row preview from possible unused index candidates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_75\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_unused_indexes limit 5;\n+--------------------+---------------------+--------------------+\n| object_schema      | object_name         | index_name         |\n+--------------------+---------------------+--------------------+\n| mem30__bean_config | plists              | path               |\n| mem30__config      | group_selections    | name               |\n| mem30__config      | notification_groups | name               |\n| mem30__config      | user_form_defaults  | FKC1AEF1F9E7EE2CFB |\n| mem30__enterprise  | whats_new_entries   | entryId            |\n+--------------------+---------------------+--------------------+\n```\n\n----------------------------------------\n\nTITLE: Updating groupId in mybbl_MBMessage Table Based on Group_ Table in SQL\nDESCRIPTION: This is the primary SQL query being analyzed in the report. It updates the `groupId` column in the `mybbl_MBMessage` table. The new value for `groupId` is determined by a subquery that selects the `groupId` from the `Group_` table where the `name` column is 'Guest'. The `\\G` terminator is likely an artifact of how the query was captured or executed, requesting vertical output. The surrounding report indicates this query had a significant execution time (10s).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow050.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE mybbl_MBMessage SET groupId = (select groupId from Group_ where name = 'Guest')\\G\n```\n\n----------------------------------------\n\nTITLE: Updating vab3concept1upload Table in MySQL\nDESCRIPTION: Updates the vab3concept1id column in db4.vab3concept1upload table for a specific record identified by vab3concept1upload value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE db4.vab3concept1upload\nSET    vab3concept1id = '91848182522'\nWHERE  vab3concept1upload='6994465';\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_statement_latency in MySQL\nDESCRIPTION: Example query showing how to retrieve performance data from the host_summary_by_statement_latency table. The result includes metrics like total statement count, latency statistics, and rows processed for a specific host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from host_summary_by_statement_latency;\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| host | total | total_latency | max_latency | lock_latency | rows_sent | rows_examined | rows_affected | full_scans |\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| hal  |  3381 | 00:02:09.13   | 1.48 s      | 1.07 s       |      1151 |         93947 |           150 |         91 |\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Thread in MySQL Performance Schema\nDESCRIPTION: Enables a specific connection/thread in Performance Schema. The procedure takes a connection ID as input and returns a summary of the action performed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_134\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_thread(3);\n+------------------+\n| summary          |\n+------------------+\n| Enabled 1 thread |\n+------------------+\n1 row in set (0.01 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_thread(CONNECTION_ID());\n+------------------+\n| summary          |\n+------------------+\n| Enabled 1 thread |\n+------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Store Table with Foreign Keys\nDESCRIPTION: A CREATE TABLE statement defining the store table structure in the sakila database. Includes primary key, unique constraint, and two foreign key constraints referencing staff and address tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating payment table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the payment table, which records customer payments. It includes foreign key constraints referencing the customer, staff, and rental tables, and uses auto-increment for the payment_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint unsigned NOT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `rental_id` int DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Stack Using ps_thread_stack in MySQL\nDESCRIPTION: Example showing how to get a JSON formatted stack of all statements, stages, and events within Performance Schema for a specified thread using the sys.ps_thread_stack() function. The function takes a thread ID parameter and formats the output as JSON.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_130\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_thread_stack(37, FALSE) AS thread_stack\\G\n*************************** 1. row ***************************\nthread_stack: {\"rankdir\": \"LR\",\"nodesep\": \"0.10\",\"stack_created\": \"2014-02-19 13:39:03\",\n\"mysql_version\": \"5.7.3-m13\",\"mysql_user\": \"root@localhost\",\"events\":\n[{\"nesting_event_id\": \"0\", \"event_id\": \"10\", \"timer_wait\": 256.35, \"event_info\":\n\"sql/select\", \"wait_info\": \"select @@version_comment limit 1\\nerrors: 0\\nwarnings: 0\\nlock time:\n...\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Structure - x$schema_table_lock_waits\nDESCRIPTION: Shows the structure of x$schema_table_lock_waits table, which is the raw data version of schema_table_lock_waits. Contains the same fields but with unformatted performance data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_table_lock_waits;\n+------------------------------+---------------------+------+-----+---------+-------+\n| Field                        | Type                | Null | Key | Default | Extra |\n+------------------------------+---------------------+------+-----+---------+-------+\n| object_schema                | varchar(64)         | YES  |     | NULL    |       |\n| object_name                  | varchar(64)         | YES  |     | NULL    |       |\n| waiting_thread_id            | bigint(20) unsigned | NO   |     | NULL    |       |\n| waiting_pid                  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_account              | text                | YES  |     | NULL    |       |\n| waiting_lock_type            | varchar(32)         | NO   |     | NULL    |       |\n| waiting_lock_duration        | varchar(32)         | NO   |     | NULL    |       |\n| waiting_query                | longtext            | YES  |     | NULL    |       |\n| waiting_query_secs           | bigint(20)          | YES  |     | NULL    |       |\n| waiting_query_rows_affected  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_query_rows_examined  | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_thread_id           | bigint(20) unsigned | NO   |     | NULL    |       |\n| blocking_pid                 | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_account             | text                | YES  |     | NULL    |       |\n| blocking_lock_type           | varchar(32)         | NO   |     | NULL    |       |\n| blocking_lock_duration       | varchar(32)         | NO   |     | NULL    |       |\n| sql_kill_blocking_query      | varchar(31)         | YES  |     | NULL    |       |\n| sql_kill_blocking_connection | varchar(25)         | YES  |     | NULL    |       |\n+------------------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Structure: waits_global_by_latency\nDESCRIPTION: Schema definition for the waits_global_by_latency table that tracks global wait events and latency metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_104\n\nLANGUAGE: SQL\nCODE:\n```\ndesc waits_global_by_latency;\ndesc x$waits_global_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.city Table in SQL\nDESCRIPTION: This SQL command defines the `city` table for the Sakila database. It includes an auto-incrementing primary key `city_id`, the city name, a foreign key `country_id` referencing the `country` table, and an automatically updated `last_update` timestamp. An index is present on `country_id`, and a foreign key constraint links `country_id` to the `country` table with cascading updates. The table uses the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `city` (\n  `city_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Defining the 'time_zone' Table for Time Zone Metadata - MySQL - SQL\nDESCRIPTION: Defines the 'time_zone' table to store time zone identifiers and leap second usage flags. Required for MySQL's time zone and date-time conversion support. Uses auto-increment on primary key for efficient record addition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL auto_increment,\n  `Use_leap_seconds` enum('Y','N') NOT NULL default 'N',\n  PRIMARY KEY  (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL host Table in SQL\nDESCRIPTION: This SQL statement defines the `host` table within the `mysql` database. It was historically used to store host-specific privileges for databases but is now often merged with or superseded by the `db` table's functionality, controlling privileges based on the connecting host (`Host`) for a specific database (`Db`). The table uses the MyISAM engine and utf8 character set with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL User Privilege Columns (SQL)\nDESCRIPTION: This snippet lists column definitions related to user privileges in MySQL, likely part of the `mysql.user` table schema. It defines various privilege columns (`Select_priv`, `Insert_priv`, etc.) as ENUM('N','Y'), SSL configuration columns, resource limit columns (`max_questions`, `max_updates`, etc.), authentication details (`plugin`, `authentication_string`), password management columns, role privileges, and user attributes. It concludes by defining the primary key on `Host` and `User` and setting table options like engine, character set, and comment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\n`Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Reload_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Shutdown_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Process_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`File_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Show_db_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Super_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Repl_slave_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Repl_client_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_user_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n`ssl_cipher` blob NOT NULL,\n`x509_issuer` blob NOT NULL,\n`x509_subject` blob NOT NULL,\n`max_questions` int unsigned NOT NULL DEFAULT '0',\n`max_updates` int unsigned NOT NULL DEFAULT '0',\n`max_connections` int unsigned NOT NULL DEFAULT '0',\n`max_user_connections` int unsigned NOT NULL DEFAULT '0',\n`plugin` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT 'caching_sha2_password',\n`authentication_string` text COLLATE utf8mb3_bin,\n`password_expired` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`password_last_changed` timestamp NULL DEFAULT NULL,\n`password_lifetime` smallint unsigned DEFAULT NULL,\n`account_locked` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Create_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Drop_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n`Password_reuse_history` smallint unsigned DEFAULT NULL,\n`Password_reuse_time` smallint unsigned DEFAULT NULL,\n`Password_require_current` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n`User_attributes` json DEFAULT NULL,\nPRIMARY KEY (`Host`,`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Configuring Character Set and SQL Modes in MySQL - SQL\nDESCRIPTION: These statements temporarily change session-level variables for character set, collation, and SQL modes to ensure consistent table and trigger creation in MySQL. Dependencies include a running MySQL server and the required privileges to modify session variables. Key parameters include 'character_set_client', 'character_set_results', 'collation_connection', and 'sql_mode'. The scripts save current settings, apply new ones, and later restore the originals; expected usage is as session prologue/epilogue in DDL scripts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n/*!50003 SET @saved_col_connection = @@collation_connection */ ;\n/*!50003 SET character_set_client  = latin1 */ ;\n/*!50003 SET character_set_results = latin1 */ ;\n/*!50003 SET collation_connection  = latin1_swedish_ci */ ;\n/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER' */ ;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 SET sql_mode              = @saved_sql_mode */ ;\n/*!50003 SET character_set_client  = @saved_cs_client */ ;\n/*!50003 SET character_set_results = @saved_cs_results */ ;\n/*!50003 SET collation_connection  = @saved_col_connection */ ;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n/*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n/*!50003 SET @saved_col_connection = @@collation_connection */ ;\n/*!50003 SET character_set_client  = latin1 */ ;\n/*!50003 SET character_set_results = latin1 */ ;\n/*!50003 SET collation_connection  = latin1_swedish_ci */ ;\n/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER' */ ;\n```\n\n----------------------------------------\n\nTITLE: Creating Film-Actor Association Table in SQL\nDESCRIPTION: Defines the junction table linking films and actors with many-to-many relationship. Contains foreign keys to both film and actor tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_statement_type Tables in MySQL\nDESCRIPTION: Shows the structure of host_summary_by_statement_type and x$host_summary_by_statement_type tables. These tables summarize statement execution statistics by host and statement type with metrics for latency, rows processed, and scan information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_statement_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| statement     | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n| lock_latency  | text                | YES  |     | NULL    |       |\n| rows_sent     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_examined | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_affected | bigint(20) unsigned | NO   |     | NULL    |       |\n| full_scans    | bigint(21) unsigned | NO   |     | 0       |       |\n+---------------+---------------------+------+-----+---------+-------+\n10 rows in set (0.30 sec)\n\nmysql> desc x$host_summary_by_statement_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| statement     | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n| lock_latency  | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_sent     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_examined | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_affected | bigint(20) unsigned | NO   |     | NULL    |       |\n| full_scans    | bigint(21) unsigned | NO   |     | 0       |       |\n+---------------+---------------------+------+-----+---------+-------+\n10 rows in set (0.76 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Example - schema_table_lock_waits\nDESCRIPTION: Demonstrates a sample query showing lock wait information including waiting and blocking thread details, lock types, and query information. Example shows an ALTER TABLE operation being blocked.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.schema_table_lock_waits\\G\n*************************** 1. row ***************************\n               object_schema: test\n                 object_name: t\n           waiting_thread_id: 43\n                 waiting_pid: 21\n             waiting_account: msandbox@localhost\n           waiting_lock_type: SHARED_UPGRADABLE\n       waiting_lock_duration: TRANSACTION\n               waiting_query: alter table test.t add foo int\n          waiting_query_secs: 988\n waiting_query_rows_affected: 0\n waiting_query_rows_examined: 0\n          blocking_thread_id: 42\n                blocking_pid: 20\n            blocking_account: msandbox@localhost\n          blocking_lock_type: SHARED_NO_READ_WRITE\n      blocking_lock_duration: TRANSACTION\n     sql_kill_blocking_query: KILL QUERY 20\nsql_kill_blocking_connection: KILL 20\n```\n\n----------------------------------------\n\nTITLE: Creating the `procs_priv` Table - MySQL Procedure Privileges - SQL\nDESCRIPTION: Builds the `procs_priv` table to track which users can execute, alter, or grant rights for specific stored procedures or functions within a database. The table uses a composite primary key on Host, Db, User, Routine_name, and Routine_type, with a timestamp and privilege set. Used by the internal access control mechanism to enforce security at the routine (procedure/function) level.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Routine_name` char(64) collate utf8_bin NOT NULL default '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') collate utf8_bin NOT NULL,\n  `Grantor` char(77) collate utf8_bin NOT NULL default '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') character set utf8 NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining the 'procs_priv' Table for Procedure Privileges - MySQL - SQL\nDESCRIPTION: Defines the 'procs_priv' table that manages per-procedure or per-function privileges for users, specifying who can execute, alter, or grant access to routines. Utilizes composite keys including routine name and host information. Maintains timestamps and grantor traceability for privilege auditing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Routine_name` char(64) collate utf8_bin NOT NULL default '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') collate utf8_bin NOT NULL,\n  `Grantor` char(77) collate utf8_bin NOT NULL default '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') character set utf8 NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating the 'rental' Table in Sakila Schema using SQL\nDESCRIPTION: This SQL statement defines the `rental` table structure within the Sakila database. It stores information about movie rentals, including `rental_id`, `rental_date`, `inventory_id`, `customer_id`, `return_date`, `staff_id`, and a timestamp. It establishes a primary key (`rental_id`), a unique key constraint on rental date, inventory, and customer ID, foreign keys linking to `customer`, `inventory`, and `staff` tables (with cascading updates), and necessary indexes. The table uses InnoDB and `utf8mb3`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint unsigned NOT NULL,\n  `customer_id` smallint unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating language table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the language table, which stores the available languages for films. It uses auto-increment for the language_id and includes a timestamp for tracking the last update.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Defining help_category Table in SQL\nDESCRIPTION: Creates the `help_category` table within the `mysql` database as part of the server's built-in help system. This table organizes help topics into categories, storing the category ID, name, an optional parent category ID for hierarchical structures, and a URL related to the category. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating Help Keyword Table - MySQL - SQL\nDESCRIPTION: This statement creates the 'help_keyword' table, storing help keywords for cross-referencing within MySQL's help system. The table uses a primary key on help_keyword_id and ensures each keyword name is unique. It runs on InnoDB and utf8 charset. Inputs are an integer ID and a keyword name; the table serves as a reference point for keyword-topic and keyword-article relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Describing Statement Analysis View Structures in MySQL - SQL\nDESCRIPTION: Provides the SQL structure (DESC) output for the statement_analysis and x$statement_analysis views, which summarize normalized query performance statistics. These sys schema views offer details including query text, database, execution counts, timing, locks, and row maintenance information for performance monitoring, with 23 named columns. Usage requires sys schema installed, and outputs show field names, types, nullability, default values, and extra information; input is the DESC SQL command.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_80\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statement_analysis;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| full_scan         | varchar(1)          | NO   |     |                     |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| err_count         | bigint(20) unsigned | NO   |     | NULL                |       |\n| warn_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | text                | YES  |     | NULL                |       |\n| max_latency       | text                | YES  |     | NULL                |       |\n| avg_latency       | text                | YES  |     | NULL                |       |\n| lock_latency      | text                | YES  |     | NULL                |       |\n| rows_sent         | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sent_avg     | decimal(21,0)       | NO   |     | 0                   |       |\n| rows_examined     | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_examined_avg | decimal(21,0)       | NO   |     | 0                   |       |\n| rows_affected     | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_affected_avg | decimal(21,0)       | NO   |     | 0                   |       |\n| tmp_tables        | bigint(20) unsigned | NO   |     | NULL                |       |\n| tmp_disk_tables   | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sorted       | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_merge_passes | bigint(20) unsigned | NO   |     | NULL                |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n23 rows in set (0.26 sec)\n\nmysql> desc x$statement_analysis;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| full_scan         | varchar(1)          | NO   |     |                     |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| err_count         | bigint(20) unsigned | NO   |     | NULL                |       |\n| warn_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | bigint(20) unsigned | NO   |     | NULL                |       |\n| max_latency       | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_latency       | bigint(20) unsigned | NO   |     | NULL                |       |\n| lock_latency      | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sent         | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sent_avg     | decimal(21,0)       | NO   |     | 0                   |       |\n| rows_examined     | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_examined_avg | decimal(21,0)       | NO   |     | 0                   |       |\n| rows_affected     | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_affected_avg | decimal(21,0)       | NO   |     | 0                   |       |\n| tmp_tables        | bigint(20) unsigned | NO   |     | NULL                |       |\n| tmp_disk_tables   | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sorted       | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_merge_passes | bigint(20) unsigned | NO   |     | NULL                |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n23 rows in set (0.27 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating proc Table for Stored Procedures and Functions - MySQL - SQL\nDESCRIPTION: Establishes the proc table in the mysql database to store metadata for user-defined procedures and functions. The table tracks routine definitions, ownership, access rights, parameter lists, SQL modes, schedule information, and comments. It leverages utf8 and utf8_bin collations; primary use is for performing and managing stored routines on the server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Privileges Table\nDESCRIPTION: Schema definition for the user table that stores user authentication details and global privileges including database, table, and system-level permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges';\n```\n\n----------------------------------------\n\nTITLE: Creating staff_list View in SQL\nDESCRIPTION: Creates a view that provides a comprehensive list of staff members with their contact details. Joins staff, address, city, and country tables to display formatted staff information including full address details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 VIEW `staff_list` AS select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,_utf8' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`staff` `s` join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`)))*/\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL event Table in SQL\nDESCRIPTION: This SQL statement defines the `event` table within the `mysql` database. It stores information about scheduled events created using `CREATE EVENT`, including the event's database (`db`), name (`name`), definition (`body`), definer (`definer`), execution schedule (`execute_at`, `interval_value`, `interval_field`), status (`status`), and other metadata. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Creating the mysql.user Table in SQL\nDESCRIPTION: This SQL statement defines the structure of the `user` table within the `mysql` database. It specifies columns for user identification (`Host`, `User`), a comprehensive set of global privilege flags (e.g., `Select_priv`, `Insert_priv`, `Super_priv`), SSL connection details (`ssl_type`, `ssl_cipher`), resource limits (`max_questions`, `max_updates`, `max_connections`), authentication details (`plugin`, `authentication_string`), password expiration and lifetime (`password_expired`, `password_last_changed`, `password_lifetime`), and account locking (`account_locked`). The table uses the MyISAM engine and utf8 character set with utf8_bin collation for case-sensitive comparisons. The primary key is a composite key on `Host` and `User`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8_bin NOT NULL DEFAULT 'mysql_native_password',\n  `authentication_string` text COLLATE utf8_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `password_last_changed` timestamp NULL DEFAULT NULL,\n  `password_lifetime` smallint(5) unsigned DEFAULT NULL,\n  `account_locked` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: MySQL User Summary Table Structure\nDESCRIPTION: Shows the table structure for user_summary and x$user_summary views that track user statements, latency, connections, and memory usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_85\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary;\n+------------------------+---------------+------+-----+---------+-------+\n| Field                  | Type          | Null | Key | Default | Extra |\n+------------------------+---------------+------+-----+---------+-------+\n| user                   | varchar(32)   | YES  |     | NULL    |       |\n| statements             | decimal(64,0) | YES  |     | NULL    |       |\n| statement_latency      | text          | YES  |     | NULL    |       |\n| statement_avg_latency  | text          | YES  |     | NULL    |       |\n| table_scans            | decimal(65,0) | YES  |     | NULL    |       |\n| file_ios               | decimal(64,0) | YES  |     | NULL    |       |\n| file_io_latency        | text          | YES  |     | NULL    |       |\n| current_connections    | decimal(41,0) | YES  |     | NULL    |       |\n| total_connections      | decimal(41,0) | YES  |     | NULL    |       |\n| unique_hosts           | bigint(21)    | NO   |     | 0       |       |\n| current_memory         | text          | YES  |     | NULL    |       |\n| total_memory_allocated | text          | YES  |     | NULL    |       |\n+------------------------+---------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: SELECT Query Analysis in MySQL\nDESCRIPTION: Simple SELECT query attempting to retrieve fruit data from trees table in food database. Query failed due to non-existent table. Execution time was 12us with 0 rows examined and returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_3.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from a Table in MySQL - SQL\nDESCRIPTION: This SQL snippet demonstrates the process of querying all columns from the table 'blah' where the column 'something' equals 'important'. It may be accompanied by diagnostic commands such as SHOW TABLE STATUS, SHOW CREATE TABLE, and EXPLAIN (with partition information), which are useful for understanding table structures and execution plans. Requires SELECT privilege and access to the 'blah' table in the current database. The inputs include the table name and a filtering value, while outputs are all columns for matching rows. Constraints include the need for correct permissions and the existence of the specified table and column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow035.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n#    SHOW TABLE STATUS LIKE 'blah'\\G\\n#    SHOW CREATE TABLE `blah`\\G\\n# EXPLAIN /*!50100 PARTITIONS*/\\nSELECT * FROM blah WHERE something = 'important'\\G\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server and Client Settings\nDESCRIPTION: Complete MySQL configuration file with settings for client connections, server operation, performance tuning, security, and various MySQL components. The file contains sections for client, mysqld_safe, mysqld, mysqldump, mysql, isamchk, and includes commented documentation for additional options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mycnf001.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n#\n# The MySQL database server configuration file.\n#\n# You can copy this to one of:\n# - \"/etc/mysql/my.cnf\" to set global options,\n# - \"~/.my.cnf\" to set user-specific options.\n# \n# One can use all long options that the program supports.\n# Run program with --help to get a list of available options and with\n# --print-defaults to see which it would actually understand and use.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n\n# This will be passed to all mysql clients\n# It has been reported that passwords should be enclosed with ticks/quotes\n# escpecially if they contain \"#\" chars...\n# Remember to edit /etc/mysql/debian.cnf when changing the socket location.\n[client]\nport\t\t= 3306\nsocket\t\t= /var/run/mysqld/mysqld.sock\n\n# Here is entries for some specific programs\n# The following values assume you have at least 32M ram\n\n# This was formally known as [safe_mysqld]. Both versions are currently parsed.\n[mysqld_safe]\nsocket\t\t= /var/run/mysqld/mysqld.sock\nnice\t\t= 0\n\n[mysqld]\n#\n# * Basic Settings\n#\n\n#\n# * IMPORTANT\n#   If you make changes to these settings and your system uses apparmor, you may\n#   also need to also adjust /etc/apparmor.d/usr.sbin.mysqld.\n#\n\nuser\t\t= mysql\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\nport\t\t= 3306\nbasedir\t\t= /usr\ndatadir\t\t= /var/lib/mysql\ntmpdir\t\t= /tmp\nskip-external-locking\n#\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\nbind-address\t\t= 127.0.0.1\n#\n# * Fine Tuning\n#\nkey_buffer\t\t= 16M\nmax_allowed_packet\t= 16M\nthread_stack\t\t= 128K\nthread_cache_size\t= 8\n# This replaces the startup script and checks MyISAM tables if needed\n# the first time they are touched\nmyisam-recover\t\t= BACKUP\n#max_connections        = 100\n#table_cache            = 64\n#thread_concurrency     = 10\n#\n# * Query Cache Configuration\n#\nquery_cache_limit       = 1M\nquery_cache_size        = 16M\n#\n# * Logging and Replication\n#\n# Both location gets rotated by the cronjob.\n# Be aware that this log type is a performance killer.\n#log\t\t= /var/log/mysql/mysql.log\n#\n# Error logging goes to syslog. This is a Debian improvement :)\n#\n# Here you can see queries with especially long duration\n#log_slow_queries\t= /var/log/mysql/mysql-slow.log\n#long_query_time = 2\n#log-queries-not-using-indexes\n#\n# The following can be used as easy to replay backup logs or for replication.\n# note: if you are setting up a replication slave, see README.Debian about\n#       other settings you may need to change.\n#server-id\t\t= 1\n#log_bin\t\t\t= /var/log/mysql/mysql-bin.log\nexpire_logs_days\t= 10\nmax_binlog_size         = 100M\n#binlog_do_db\t\t= include_database_name\n#binlog_ignore_db\t= include_database_name\n#\n# * InnoDB\n#\n# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.\n# Read the manual for more InnoDB related options. There are many!\n# You might want to disable InnoDB to shrink the mysqld process by circa 100MB.\n#skip-innodb\n#\n# * Federated\n#\n# The FEDERATED storage engine is disabled since 5.0.67 by default in the .cnf files\n# shipped with MySQL distributions (my-huge.cnf, my-medium.cnf, and so forth).\n#\nskip-federated\n#\n# * Security Features\n#\n# Read the manual, too, if you want chroot!\n# chroot = /var/lib/mysql/\n#\n# For generating SSL certificates I recommend the OpenSSL GUI \"tinyca\".\n#\n# ssl-ca=/etc/mysql/cacert.pem\n# ssl-cert=/etc/mysql/server-cert.pem\n# ssl-key=/etc/mysql/server-key.pem\n\n\n\n[mysqldump]\nquick\nquote-names\nmax_allowed_packet\t= 16M\n\n[mysql]\n#no-auto-rehash\t# faster start of mysql but no tab completition\n\n[isamchk]\nkey_buffer\t\t= 16M\n\n#\n# * NDB Cluster\n#\n# See /usr/share/doc/mysql-server-*/README.Debian for more information.\n#\n# The following configuration is read by the NDB Data Nodes (ndbd processes)\n# not from the NDB Management Nodes (ndb_mgmd processes).\n#\n# [MYSQL_CLUSTER]\n# ndb-connectstring=127.0.0.1\n\n\n#\n# * IMPORTANT: Additional settings that can override those from this file!\n#   The files must end with '.cnf', otherwise they'll be ignored.\n#\n!includedir /etc/mysql/conf.d/\n```\n\n----------------------------------------\n\nTITLE: Creating Film_Actor Table Schema in MySQL\nDESCRIPTION: SQL definition for the 'film_actor' junction table in the Sakila database that manages the many-to-many relationship between films and actors. Includes a composite primary key and foreign key constraints to both parent tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating the 'staff' Table in SQL\nDESCRIPTION: This SQL statement defines the `staff` table using the InnoDB engine to store information about staff members. It includes an auto-incrementing `staff_id` (primary key), name, address ID, picture (blob), email, store ID, active status, username, and password. Foreign keys link `address_id` to the `address` table and `store_id` to the `store` table. Indexes are added for `store_id` and `address_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure for 'language' - SQL\nDESCRIPTION: Defines the 'language' table, which stores language metadata used elsewhere in the schema, with auto-increment primary key and last update timestamp. No foreign keys, minimal dependencies. Inputs/outputs: language records tracked by ID and name; designed as a simple lookup/reference table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating Help Relation Table - MySQL - SQL\nDESCRIPTION: This schema creates the 'help_relation' table, mapping keywords to help topics in the MySQL help subsystem. The table requires both a help_topic_id and help_keyword_id, and enforces uniqueness on their pair via the primary key. Using InnoDB and utf8 charset, it is essential for efficient keyword-to-topic lookups and join operations in help queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Querying All Records from 'foo' Table in SQL\nDESCRIPTION: This SQL query selects all columns and rows from the 'foo' table in the 'db1' database. It performs a full table scan and examines 51 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-inheritance.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse db1;\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Schema Consumers in MySQL\nDESCRIPTION: Enables consumers within Performance Schema matching a given pattern. The procedure takes a LIKE pattern as input and returns a summary of the number of consumers enabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_132\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_consumer('');\n+-------------------------+\n| summary                 |\n+-------------------------+\n| Enabled 10 consumers    |\n+-------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_consumer('waits');\n+-----------------------+\n| summary               |\n+-----------------------+\n| Enabled 3 consumers   |\n+-----------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating server_cost Table in mysql using SQL\nDESCRIPTION: Defines the `server_cost` table within the `mysql` database. This table is used by the query optimizer to store cost estimates for server operations, aiding in query plan selection. It uses the InnoDB engine and has statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `server_cost` (\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  PRIMARY KEY (`cost_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_statement_latency in MySQL\nDESCRIPTION: Example query showing how to retrieve data from the host_summary_by_statement_latency table, which provides formatted statistics about statement execution by host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from host_summary_by_statement_latency;\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| host | total | total_latency | max_latency | lock_latency | rows_sent | rows_examined | rows_affected | full_scans |\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| hal  |  3381 | 00:02:09.13   | 1.48 s      | 1.07 s       |      1151 |         93947 |           150 |         91 |\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Replacing Checksums for Records Above Upper Boundary in sakila.city Table\nDESCRIPTION: This query counts records with country_id above the upper boundary and replaces the corresponding entry in percona.checksums. It selects records with country_id greater than a specified parameter and also greater than 100.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx004.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`city` FORCE INDEX(`idx_fk_country_id`) WHERE ((`country_id` > ?)) AND (country_id > 100) ORDER BY `country_id` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Error/Warning Statement Analysis Structure in MySQL\nDESCRIPTION: Shows the structure of views that track SQL statements generating errors or warnings, including execution counts and error/warning percentages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_75\n\nLANGUAGE: SQL\nCODE:\n```\ndesc statements_with_errors_or_warnings;\ndesc x$statements_with_errors_or_warnings;\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Query Analysis with Ignored Indexes in MySQL\nDESCRIPTION: Demonstrates how the query optimizer changes strategies when specific indexes are ignored. Shows how alternative indexes are selected for complex conditions when preferred indexes are unavailable.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nexplain select * from t1 ignore index (sta_swt21a, stb_swt1a_2b) \nwhere st_a=1 and swt1a=1 and swt2a=1 and st_b=1 and swt1b=1 and swt2b=1;\nexplain select * from t1 ignore index (sta_swt21a, sta_swt12a, stb_swt1a_2b) \nwhere st_a=1 and swt1a=1 and swt2a=1 and st_b=1 and swt1b=1 and swt2b=1;\n```\n\n----------------------------------------\n\nTITLE: Creating Film-Category Association Table in SQL\nDESCRIPTION: Defines the junction table linking films and categories with many-to-many relationship. Contains foreign keys to both film and category tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.procs_priv` Table in SQL\nDESCRIPTION: Defines the `procs_priv` table in the `mysql` database. This table manages privileges related to stored procedures and functions, specifying which users (Host, User, Db) have 'Execute', 'Alter Routine', or 'Grant' privileges on specific routines (Routine_name, Routine_type).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8mb3_bin NOT NULL,\n  `Grantor` varchar(288) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`User`,`Db`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Documenting Command Line Option Parsing - Perl - plaintext\nDESCRIPTION: This snippet documents available command line options and their processing behavior for a Perl script utilizing an OptionParser utility. It provides usage instructions, option definitions (including types, defaults, and shortcut aliases), and shows a sample of processed results. It is intended to help users understand what arguments are supported, their expected formats (e.g., comma-separated lists), and how to access further help using --help or perldoc. Key parameters specify command line switches, required or optional nature, types, and sample values. It serves as reference documentation, not executable code.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help007.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOptionParser.t parses command line options.  For more details, please use the --help option, or try 'perldoc $PROGRAM_NAME' for complete documentation.\nUsage: $PROGRAM_NAME <options>\n\nOptions:\n\n  --books=a     -b  books optional\n  --columns=H   -C  cols required\n  --databases=A -d  databases required\n  --foo=A           foo (default a,b,c)\n  --tables=h    -t  tables optional\n\nOption types: s=string, i=integer, f=float, h/H/a/A=comma-separated list, d=DSN, z=size, m=time\n\nOptions and values after processing arguments:\n\n  --books           o,p\n  --columns         a,b\n  --databases       f,g\n  --foo             a,b,c\n  --tables          d,e\n\n```\n\n----------------------------------------\n\nTITLE: Tracing Thread in MySQL Performance Schema\nDESCRIPTION: This procedure dumps all data within Performance Schema for an instrumented thread to create a DOT formatted graph file. It requires the SUPER privilege and allows for various configuration options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_146\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_trace_thread(25, CONCAT('/tmp/stack-', REPLACE(NOW(), ' ', '-'), '.dot'), NULL, NULL, TRUE, TRUE, TRUE);\n+-------------------+\n| summary           |\n+-------------------+\n| Disabled 1 thread |\n+-------------------+\n1 row in set (0.00 sec)\n\n+---------------------------------------------+\n| Info                                        |\n+---------------------------------------------+\n| Data collection starting for THREAD_ID = 25 |\n+---------------------------------------------+\n1 row in set (0.03 sec)\n\n+-----------------------------------------------------------+\n| Info                                                      |\n+-----------------------------------------------------------+\n| Stack trace written to /tmp/stack-2014-02-16-21:18:41.dot |\n+-----------------------------------------------------------+\n1 row in set (60.07 sec)\n\n+-------------------------------------------------------------------+\n| Convert to PDF                                                    |\n+-------------------------------------------------------------------+\n| dot -Tpdf -o /tmp/stack_25.pdf /tmp/stack-2014-02-16-21:18:41.dot |\n+-------------------------------------------------------------------+\n1 row in set (60.07 sec)\n\n+-------------------------------------------------------------------+\n| Convert to PNG                                                    |\n+-------------------------------------------------------------------+\n| dot -Tpng -o /tmp/stack_25.png /tmp/stack-2014-02-16-21:18:41.dot |\n+-------------------------------------------------------------------+\n1 row in set (60.07 sec)\n\n+------------------+\n| summary          |\n+------------------+\n| Enabled 1 thread |\n+------------------+\n1 row in set (60.32 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Wait Classes Global Average Latency Structure\nDESCRIPTION: Table structure definitions for wait_classes_global_by_avg_latency and its raw counterpart, showing fields for analyzing wait event classes by average latency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_103\n\nLANGUAGE: SQL\nCODE:\n```\ndesc wait_classes_global_by_avg_latency;\ndesc x$wait_classes_global_by_avg_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'help_topic' Help Content Table - SQL\nDESCRIPTION: Defines the 'help_topic' table which contains help topic metadata for MySQL's help system, including a description, example, and link. It enforces uniqueness on the help topic name and uses a primary key on topic ID. The table is intended for internal system documentation and leverages MyISAM and UTF-8.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating plugin Table - MySQL SQL\nDESCRIPTION: Details the `plugin` table for tracking installed MySQL server plugins and their associated dynamic library files. This table is accessed by the plugin manager subsystem during plugin load/unload operations. Columns store the plugin's registered name and library path, both uniquely indexed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='MySQL plugins'\n\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.address Table Schema (SQL)\nDESCRIPTION: This SQL statement defines the `address` table within the `sakila` database. It includes columns for address details (`address`, `address2`, `district`, `postal_code`, `phone`), an auto-incrementing primary key `address_id`, a foreign key `city_id` referencing the `city` table, and a `last_update` timestamp. An index is defined on `city_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `address` (\n  `address_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Help Relation Table in MySQL\nDESCRIPTION: Defines a table to manage relationships between help topics and keywords. It employs MyISAM engine and utf8 character set, ensuring each mapping between keyword and topic is unique, aiding in efficient navigation of help content.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation';\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in MySQL\nDESCRIPTION: Creates the payment table to track customer payments for rentals. Contains foreign keys to customer, staff and rental tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying Schema Table Lock Waits in MySQL\nDESCRIPTION: Example showing the output of a query on the sys.schema_table_lock_waits view, displaying an active lock contention scenario with an ALTER TABLE command waiting for a transaction lock to be released.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_67\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.schema_table_lock_waits\\G\n*************************** 1. row ***************************\n               object_schema: test\n                 object_name: t\n           waiting_thread_id: 43\n                 waiting_pid: 21\n             waiting_account: msandbox@localhost\n           waiting_lock_type: SHARED_UPGRADABLE\n       waiting_lock_duration: TRANSACTION\n               waiting_query: alter table test.t add foo int\n          waiting_query_secs: 988\n waiting_query_rows_affected: 0\n waiting_query_rows_examined: 0\n          blocking_thread_id: 42\n                blocking_pid: 20\n            blocking_account: msandbox@localhost\n          blocking_lock_type: SHARED_NO_READ_WRITE\n      blocking_lock_duration: TRANSACTION\n     sql_kill_blocking_query: KILL QUERY 20\nsql_kill_blocking_connection: KILL 20\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Creation Statement in MySQL\nDESCRIPTION: This SQL command retrieves the CREATE TABLE statement for the table '123_bar'. It's useful for examining the exact structure and properties defined for the table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow004_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `123_bar`\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Help Topics Table in MySQL\nDESCRIPTION: Defines the 'help_topic' table for storing detailed descriptions of help topics, including their categories, examples, and references. This table is essential for providing structured help documentation in a MySQL environment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `help_topic`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Database in MySQL\nDESCRIPTION: Creates the Sakila sample database if it doesn't already exist, with Latin1 character set as default. This is a commonly used sample database for MySQL demonstrations and testing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `sakila` /*!40100 DEFAULT CHARACTER SET latin1 */;\n\nUSE `sakila`;\n```\n\n----------------------------------------\n\nTITLE: Querying innodb_buffer_stats_by_schema in MySQL\nDESCRIPTION: Example query showing how to retrieve data from the innodb_buffer_stats_by_schema table, which provides formatted InnoDB buffer statistics aggregated by schema, including memory allocation and cached rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from innodb_buffer_stats_by_schema;\n+--------------------------+------------+------------+-------+--------------+-----------+-------------+\n| object_schema            | allocated  | data       | pages | pages_hashed | pages_old | rows_cached |\n+--------------------------+------------+------------+-------+--------------+-----------+-------------+\n| mem30_trunk__instruments | 1.69 MiB   | 510.03 KiB |   108 |          108 |       108 |        3885 |\n| InnoDB System            | 688.00 KiB | 351.62 KiB |    43 |           43 |        43 |         862 |\n| mem30_trunk__events      | 80.00 KiB  | 21.61 KiB  |     5 |            5 |         5 |         229 |\n+--------------------------+------------+------------+-------+--------------+-----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Executing Dynamic SQL with execute_prepared_stmt\nDESCRIPTION: This example demonstrates how to use the execute_prepared_stmt procedure to execute a dynamically created SQL query using a prepared statement. The procedure deallocates the statement after execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_125\n\nLANGUAGE: SQL\nCODE:\n```\nCALL sys.execute_prepared_stmt('SELECT * FROM sys.sys_config');\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure and Constraints for 'film_actor' - SQL\nDESCRIPTION: Defines the 'film_actor' table structure with columns for 'actor_id', 'film_id', and update timestamp, as well as composite primary and foreign key constraints linking to 'actor' and 'film'. The table is designed to map actors to films in a many-to-many relationship. Inputs are actor and film IDs; outputs are relational mapping records. Table requires that referenced 'actor' and 'film' entries exist and remain consistent.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating BEFORE INSERT Trigger for Setting Payment Date on 'payment' Table - SQL\nDESCRIPTION: Defines a BEFORE INSERT trigger on the 'payment' table to automatically set the 'payment_date' field to the current time at insertion. Trigger 'payment_date' ensures that every new payment record receives a non-null, server-generated timestamp. Key dependency: MySQL server time, 'payment' table; input: any INSERT on 'payment'; output: populated 'payment_date' field.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER payment_date BEFORE INSERT ON payment\n\tFOR EACH ROW SET NEW.payment_date = NOW() */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Performance Schema Stages Summary Tables - SQL\nDESCRIPTION: Lists the fields, types, and structures for host_summary_by_stages and x$host_summary_by_stages tables. These views provide stage-level statistics grouped by host, with latency columns as TEXT or BIGINT depending on view. Requires a MySQL server with Performance Schema. Query output helps developers and DBAs understand stage-based wait and execution metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_stages;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.06 sec)\n\nmysql> desc x$host_summary_by_stages;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| avg_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.81 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Film List View with Actor Names\nDESCRIPTION: Creates a view that displays film details including formatted actor names with proper case formatting, joining across film, category, and actor tables\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `nicer_but_slower_film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(concat(ucase(substr(`actor`.`first_name`,1,1)),lcase(substr(`actor`.`first_name`,2,length(`actor`.`first_name`))),_utf8' ',concat(ucase(substr(`actor`.`last_name`,1,1)),lcase(substr(`actor`.`last_name`,2,length(`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */\n```\n\n----------------------------------------\n\nTITLE: Defining db Table in SQL\nDESCRIPTION: Creates the `db` table in the `mysql` database to store database-level privileges. It defines permissions like Select, Insert, Update, Delete, Create, etc., granted to users on specific databases from particular hosts. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MYISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating After Delete Trigger To Sync Film Text Table - MySQL SQL\nDESCRIPTION: This trigger is fired after a row in the 'film' table is deleted. It deletes the corresponding row in the 'film_text' table, maintaining referential integrity between the two. Requires the relevant privileges and MySQL support for triggers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN\n    DELETE FROM film_text WHERE film_id = old.film_id;\n  END */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'event' Metadata Table - SQL\nDESCRIPTION: Creates the 'event' table to store scheduled event metadata, including event code, execution timings, interval details, and status. Employs a composite primary key on db and name, and utilizes ENUM and SET data types for status and sql_mode, enabling detailed status tracking. Requires MySQL's MyISAM engine, and fields are sized for UTF-8 storage of event definitions and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL InnoDB Status Output\nDESCRIPTION: This snippet shows the complete output of the `SHOW ENGINE INNODB STATUS` command in MySQL. It provides a snapshot of the InnoDB storage engine's state at a specific point in time (070915 16:32:07), including sections on semaphores, foreign key errors, transactions, file I/O, insert buffer, adaptive hash index, log status, buffer pool/memory usage, and row operations. This output is typically used for diagnosing performance bottlenecks, deadlocks, and other InnoDB-related issues.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is005.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=====================================\n070915 16:32:07 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 18 seconds\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 10, signal count 10\nMutex spin waits 0, rounds 100, OS waits 0\nRW-shared spins 20, OS waits 10; RW-excl spins 1, OS waits 0\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n070915 16:31:46  Cannot drop table `test/t1`\nbecause it is referenced by `test/t2`\n------------\nTRANSACTIONS\n------------\nTrx id counter 0 3371\nPurge done for trx's n:o < 0 3370 undo n:o < 0 0\nHistory list length 9\nTotal number of lock structs in row lock hash table 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 0 3368, not started, process no 5202, OS thread id 1141152064\nMySQL thread id 12, query id 210 localhost root\nshow innodb status\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for i/o request (insert buffer thread)\nI/O thread 1 state: waiting for i/o request (log thread)\nI/O thread 2 state: waiting for i/o request (read thread)\nI/O thread 3 state: waiting for i/o request (write thread)\nPending normal aio reads: 0, aio writes: 0,\n ibuf aio reads: 0, log i/o's: 0, sync i/o's: 0\nPending flushes (fsync) log: 0; buffer pool: 0\n42 OS file reads, 89 OS file writes, 78 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2,\n0 inserts, 0 merged recs, 0 merges\nHash table size 17393, used cells 0, node heap has 1 buffer(s)\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 0 74102\nLog flushed up to   0 74102\nLast checkpoint at  0 74102\n0 pending log writes, 0 pending chkp writes\n41 log i/o's done, 0.00 log i/o's/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 20556394; in additional pool allocated 719872\nBuffer pool size   512\nFree buffers       480\nDatabase pages     31\nModified db pages  0\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages read 33, created 20, written 69\n0.00 reads/s, 0.00 creates/s, 0.00 writes/s\nNo buffer pool page gets since the last printout\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n1 read views open inside InnoDB\nMain thread process no. 5202, id 1140881728, state: waiting for server activity\nNumber of rows inserted 2, updated 0, deleted 0, read 1\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n```\n\n----------------------------------------\n\nTITLE: Describing Session and x$session Views - SQL\nDESCRIPTION: Displays the structure of the session and x$session views in the sys schema using DESC commands, outlining the columns, types, and attributes for performance troubleshooting. Assumes a MySQL (5.7) environment with sys schema support and Percona Toolkit integration. Returns field details for each column to help developers interpret session/process data including thread, command, memory, locks, statement info, etc.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_76\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc session;\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| Field                  | Type                                     | Null | Key | Default | Extra |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\n| command                | varchar(16)                              | YES  |     | NULL    |       |\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\n| statement_latency      | text                                     | YES  |     | NULL    |       |\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\n| lock_latency           | text                                     | YES  |     | NULL    |       |\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| full_scan              | varchar(3)                               | NO   |     |         |       |\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\n| last_statement_latency | text                                     | YES  |     | NULL    |       |\n| current_memory         | text                                     | YES  |     | NULL    |       |\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\n| last_wait_latency      | text                                     | YES  |     | NULL    |       |\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\n| trx_latency            | text                                     | YES  |     | NULL    |       |\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n28 rows in set (0.00 sec)\n\nmysql> desc x$session;\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| Field                  | Type                                     | Null | Key | Default | Extra |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\n| command                | varchar(16)                              | YES  |     | NULL    |       |\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\n| statement_latency      | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\n| lock_latency           | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| full_scan              | varchar(3)                               | NO   |     |         |       |\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\n| last_statement_latency | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| current_memory         | decimal(41,0)                            | YES  |     | NULL    |       |\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\n| last_wait_latency      | varchar(20)                              | YES  |     | NULL    |       |\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\n| trx_latency            | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n28 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Staff List View Table\nDESCRIPTION: Creates a temporary table structure for the staff_list view that provides a formatted list of staff members with their contact and location details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff_list` (\n  `ID` tinyint(3) unsigned,\n  `name` varchar(91),\n  `address` varchar(50),\n  `zip code` varchar(10),\n  `phone` varchar(20),\n  `city` varchar(50),\n  `country` varchar(50),\n  `SID` tinyint(3) unsigned\n) ENGINE=MyISAM\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_category` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.help_category` table, part of the MySQL server-side help system. It stores help categories, including their ID, name, parent category ID (for hierarchical structure), and a URL. It uses the InnoDB storage engine with `STATS_PERSISTENT=0`, has a primary key on `help_category_id`, and a unique key on `name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Simple Column Update Query in MySQL\nDESCRIPTION: Updates the 'biz' column with a specific value in table 'foo.bar'. Query execution time is 530us with 27us lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_orderbyreport.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE foo.bar\nSET    biz = '91848182522'\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Metrics View Structure\nDESCRIPTION: Shows the structure of the 'metrics' view, which combines data from global status, InnoDB metrics, and Performance Schema. It includes columns for variable name, value, type, and enabled status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_41\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> DESC metrics;\n+----------------+--------------+------+-----+---------+-------+\n| Field          | Type         | Null | Key | Default | Extra |\n+----------------+--------------+------+-----+---------+-------+\n| Variable_name  | varchar(193) | YES  |     | NULL    |       |\n| Variable_value | text         | YES  |     | NULL    |       |\n| Type           | varchar(210) | YES  |     | NULL    |       |\n| Enabled        | varchar(7)   | NO   |     |         |       |\n+----------------+--------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\nmysq> DESC metrics_56;\n+----------------+--------------+------+-----+---------+-------+\n| Field          | Type         | Null | Key | Default | Extra |\n+----------------+--------------+------+-----+---------+-------+\n| Variable_name  | varchar(193) | YES  |     | NULL    |       |\n| Variable_value | text         | YES  |     | NULL    |       |\n| Type           | varchar(210) | YES  |     | NULL    |       |\n| Enabled        | varchar(7)   | NO   |     |         |       |\n+----------------+--------------+------+-----+---------+-------+\n4 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating host Table in MySQL\nDESCRIPTION: SQL statement for creating the host table which stores host-based privileges. It contains numerous privilege columns implemented as ENUM types and uses a composite primary key of Host and Db.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges';\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Plan for an Executed Parameterized Query in MySQL - SQL\nDESCRIPTION: Displays the EXPLAIN plan for an instantiated version of a previously parameterized query. The query checks for specific string and decimal values in columns 'v', 'c', and 'f' of the 'd.t3' table, using any available partitioning features offered by MySQL (via /*!50100 PARTITIONS*/). This aids in analyzing real query execution, understanding performance bottlenecks, and possible improvements. Prerequisites include compatible MySQL version and corresponding schema. Inputs are fully specified values; output is a table summarizing the query execution plan.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump023.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\\nSELECT * FROM d.t3 WHERE v=\\\"hello world\\\" OR c=\\\"a\\\" OR f=\\\"1.23\\\"\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Table Schema in MySQL\nDESCRIPTION: SQL definition for the 'customer' table in the Sakila database, storing customer information including name, email, and activity status. The table has foreign key relationships to the store and address tables and includes several indices for optimizing lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating the 'film' Table in SQL\nDESCRIPTION: This SQL statement defines the `film` table using the InnoDB engine for storing movie details. It includes columns like `film_id`, `title`, `description`, `release_year`, language IDs, rental details, `rating` (enum), `special_features` (set), and `last_update`. A primary key is set on `film_id`, and foreign keys link `language_id` and `original_language_id` to the `language` table. Indexes are added for `title`, `language_id`, and `original_language_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating City Table in Sakila Database\nDESCRIPTION: Creates the city table in the Sakila database with foreign key relationship to the country table. Uses InnoDB engine and includes city name, country reference, and timestamp for last update.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL auto_increment,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8;\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Sample Database Tables\nDESCRIPTION: Defines the structure for several tables in the Sakila sample database, including actor, address, category, city, country, and customer. These tables represent entities in a fictional DVD rental business and demonstrate various MySQL features.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8\n\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8\n\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8\n\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8\n\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`)\n)\n```\n\n----------------------------------------\n\nTITLE: UPDATE Query Fingerprint in SQL\nDESCRIPTION: The normalized SQL query pattern (fingerprint) that updates data in a tuningdetail table by joining it with a gonzo table. The query uses placeholders for specific database names, table suffixes, and column names to represent the general query pattern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002-anon.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate d?tuningdetail_?_? n inner join d?gonzo a using(gonzo) set n.column? = a.column?, n.word? = a.word?\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minor MySQL Version with version_minor Function\nDESCRIPTION: Example of using the sys.version_minor function to obtain the minor (release series) version number of the MySQL Server. Returns a TINYINT UNSIGNED value representing the minor version component.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_134\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT VERSION(), sys.server_minor();\n+--------------------------------------+---------------------+\n| VERSION()                            | sys.version_minor() |\n+--------------------------------------+---------------------+\n| 5.7.9-enterprise-commercial-advanced | 7                   |\n+--------------------------------------+---------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Language Table in SQL\nDESCRIPTION: Defines the language lookup table for film languages. Simple table with language ID and name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Ranking SQL Query Performance (Percona Toolkit)\nDESCRIPTION: This SQL snippet represents a query analyzed by a performance tool, likely Percona Toolkit's pt-query-digest. The surrounding text provides context, showing this query ranked first ('Rank 1') with a specific Query ID ('0x0F52986F18B3A4D0'), minimal response time ('0.0000'), one call ('Calls 1'), and other performance metrics (R/Call, Apdx, V/M). The 'Item' column indicates the query text itself.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/ReportFormatter/report001.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Rank Query ID           Response time Calls R/Call Apdx V/M   EXPLAIN   Item\n# ==== ================== ============= ===== ====== ==== ===== ========= ========\n```\n\nLANGUAGE: sql\nCODE:\n```\n#    1 0x0F52986F18B3A4D0 0.0000 100.0%     1 0.0000 1.00  0.00           SELECT trees\n```\n\n----------------------------------------\n\nTITLE: Displaying InnoDB Monitor Status Output\nDESCRIPTION: Complete output from SHOW ENGINE INNODB STATUS command showing detailed database metrics including transaction states, I/O operations, buffer pool usage, and row operation statistics. The output is from a MySQL/InnoDB database instance showing minimal activity with some foreign key errors.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is003.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=====================================\n070915 16:17:48 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 46 seconds\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 8, signal count 8\nMutex spin waits 0, rounds 80, OS waits 0\nRW-shared spins 16, OS waits 8; RW-excl spins 1, OS waits 0\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n070915 16:15:55 Error in foreign key constraint of table test/#sql-1452_9:\nforeign key (a) references t4(a):\nCannot resolve table name close to:\n(a)\n------------\nTRANSACTIONS\n------------\nTrx id counter 0 3362\nPurge done for trx's n:o < 0 3357 undo n:o < 0 0\nHistory list length 8\nTotal number of lock structs in row lock hash table 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 0 0, not started, process no 5202, OS thread id 1141152064\nMySQL thread id 9, query id 181 localhost root\nshow innodb status\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for i/o request (insert buffer thread)\nI/O thread 1 state: waiting for i/o request (log thread)\nI/O thread 2 state: waiting for i/o request (read thread)\nI/O thread 3 state: waiting for i/o request (write thread)\nPending normal aio reads: 0, aio writes: 0,\n ibuf aio reads: 0, log i/o's: 0, sync i/o's: 0\nPending flushes (fsync) log: 0; buffer pool: 0\n42 OS file reads, 73 OS file writes, 64 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2,\n0 inserts, 0 merged recs, 0 merges\nHash table size 17393, used cells 0, node heap has 1 buffer(s)\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 0 73291\nLog flushed up to   0 73291\nLast checkpoint at  0 73291\n0 pending log writes, 0 pending chkp writes\n34 log i/o's done, 0.00 log i/o's/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 20556394; in additional pool allocated 718336\nBuffer pool size   512\nFree buffers       480\nDatabase pages     31\nModified db pages  0\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages read 33, created 20, written 61\n0.00 reads/s, 0.00 creates/s, 0.00 writes/s\nNo buffer pool page gets since the last printout\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n1 read views open inside InnoDB\nMain thread process no. 5202, id 1140881728, state: waiting for server activity\nNumber of rows inserted 0, updated 0, deleted 0, read 0\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_file_io Table in MySQL\nDESCRIPTION: Demonstrates how to query the host_summary_by_file_io table to retrieve all rows with their host, I/O operations count, and latency. Shows real-time performance data. Prerequisite: access to a MySQL shell and relevant permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from host_summary_by_file_io;\n+------------+-------+------------+\n| host       | ios   | io_latency |\n+------------+-------+------------+\n| hal1       | 26457 | 21.58 s    |\n| hal2       |  1189 | 394.21 ms  |\n+------------+-------+------------+\n```\n\n----------------------------------------\n\nTITLE: Executing LOAD DATA LOCAL INFILE Statement in MySQL\nDESCRIPTION: This SQL snippet executes a `LOAD DATA LOCAL INFILE` statement to load data from the local file '/tmp/foo.txt' into the `foo` table in the `db` database. The query (ID 0x86FDEB668430A493EBAC9C76529E62CE) ran twice with a very low average execution time of 2us and zero lock time. The `\\G` terminator suggests execution via the mysql client for vertical output. Requires `local_infile` to be enabled on both server and client.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow058.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nload data local infile '/tmp/foo.txt' into table `foo`\\G\n```\n\n----------------------------------------\n\nTITLE: Creating film_text table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the film_text table, which stores the title and description of films for full-text searching. It uses the MyISAM engine and includes a FULLTEXT index on title and description columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Performance Schema Thread ID in MySQL\nDESCRIPTION: Shows how to use the sys.ps_thread_id function to get the Performance Schema THREAD_ID for a specified connection ID or the current connection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_119\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_thread_id(79);\n+----------------------+\n| sys.ps_thread_id(79) |\n+----------------------+\n|                   98 |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT sys.ps_thread_id(CONNECTION_ID());\n+-----------------------------------+\n| sys.ps_thread_id(CONNECTION_ID()) |\n+-----------------------------------+\n|                                98 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing io_global_by_file_by_latency Table Structure in MySQL\nDESCRIPTION: These SQL queries describe the structure of the io_global_by_file_by_latency and x$io_global_by_file_by_latency tables. These tables show I/O statistics grouped by file, focusing on latency metrics for read, write, and miscellaneous operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\ndesc io_global_by_file_by_latency;\n```\n\nLANGUAGE: SQL\nCODE:\n```\ndesc x$io_global_by_file_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Reloading Saved Performance Schema Configuration in MySQL\nDESCRIPTION: Reloads a previously saved Performance Schema configuration. This allows for temporary changes to be made and then reverted. Requires the SUPER privilege.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_135\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_save();\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> UPDATE performance_schema.setup_instruments SET enabled = 'YES', timed = 'YES';\nQuery OK, 547 rows affected (0.40 sec)\nRows matched: 784  Changed: 547  Warnings: 0\n\n/* Run some tests that need more detailed instrumentation here */\n\nmysql> CALL sys.ps_setup_reload_saved();\nQuery OK, 0 rows affected (0.32 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Table - MySQL - SQL\nDESCRIPTION: The 'plugin' table schema manages installed MySQL plugins, tracking each plugin's name and associated dynamic library. The table uses InnoDB storage and utf8 character set, with the plugin name as its primary key. It is essential for managing and persisting plugin status during MySQL server lifecycle operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.staff Table in SQL\nDESCRIPTION: This SQL snippet defines the `staff` table using the InnoDB engine to store information about employees. It includes personal details, credentials (`username`, `password`), activity status, and links to the `address` and `store` tables via foreign keys (`fk_staff_address`, `fk_staff_store`) with ON UPDATE CASCADE. It has an auto-incrementing primary key (`staff_id`) and indexes on foreign key columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Schema Information\nDESCRIPTION: Presents a summary of the database schema, including table counts, storage engines, and index types for each database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp006.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Schema #####################################################\n\n  Database     Tables Views SPs Trigs Funcs   FKs Partn\n  mysql            22                                  \n  percona_test      3                                  \n  sakila           16     7   3     6     3    22      \n\n  Database     MyISAM InnoDB\n  mysql            22       \n  percona_test             3\n  sakila            7     16\n\n  Database     BTREE\n  mysql           31\n  percona_test     2\n  sakila          63\n\n                 c   t   s   e   l   d   i   t   s   t   b   v   b   y   d   m\n                 h   i   e   n   o   a   n   i   m   e   i   a   l   e   e   e\n                 a   m   t   u   n   t   t   n   a   x   g   r   o   a   c   d\n                 r   e       m   g   e       y   l   t   i   c   b   r   i   i\n                     s           b   t       i   l       n   h           m   u\n                     t           l   i       n   i       t   a           a   m\n                     a           o   m       t   n           r           l   i\n                     m           b   e           t                           n\n                     p                                                       t\n  Database     === === === === === === === === === === === === === === === ===\n  mysql         61   8   6  78   5   4  19   3   3   4   8   3   4            \n  percona_test                           3                   2                \n  sakila         1  15   1   3       4   2  19  26   7      42   1   1   7   2\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Table with Constraints in SQL\nDESCRIPTION: Creates the `customer` table with fields for address, store association, and constraints to ensure referential integrity to the `address` and `store` tables. Uses InnoDB with character set utf8.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nKEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating rental table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the rental table, which tracks film rentals. It includes foreign key constraints referencing the inventory, customer, and staff tables, and uses auto-increment for the rental_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint unsigned NOT NULL,\n  `customer_id` smallint unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Describing schema_auto_increment_columns Structure - SQL\nDESCRIPTION: This snippet demonstrates how to display the column structure of the 'schema_auto_increment_columns' metadata table using the 'desc' command in MySQL. It is intended for users to understand the fields available for querying information related to auto-increment columns across schemas. No prerequisites beyond basic MySQL access are required; output fields include schema, table, column names and types, signedness, and increment statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_auto_increment_columns;\n+----------------------+------------------------+------+-----+---------+-------+\n| Field                | Type                   | Null | Key | Default | Extra |\n+----------------------+------------------------+------+-----+---------+-------+\n| table_schema         | varchar(64)            | NO   |     |         |       |\n| table_name           | varchar(64)            | NO   |     |         |       |\n| column_name          | varchar(64)            | NO   |     |         |       |\n| data_type            | varchar(64)            | NO   |     |         |       |\n| column_type          | longtext               | NO   |     | NULL    |       |\n| is_signed            | int(1)                 | NO   |     | 0       |       |\n| is_unsigned          | int(1)                 | NO   |     | 0       |       |\n| max_value            | bigint(21) unsigned    | YES  |     | NULL    |       |\n| auto_increment       | bigint(21) unsigned    | YES  |     | NULL    |       |\n| auto_increment_ratio | decimal(25,4) unsigned | YES  |     | NULL    |       |\n+----------------------+------------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Creating data Table with Foreign Keys in MySQL\nDESCRIPTION: Creates a table for storing data records with references to data_report and entity tables. Implements foreign key constraints and a composite primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump002.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS `data`;\nCREATE TABLE `data` (\n  `data_report` int(11) NOT NULL DEFAULT '0',\n  `hour` tinyint(4) NOT NULL DEFAULT '0',\n  `entity` int(11) NOT NULL DEFAULT '0',\n  `data_1` varchar(16) DEFAULT NULL,\n  `data_2` varchar(16) DEFAULT NULL,\n  PRIMARY KEY (`data_report`,`hour`,`entity`),\n  KEY `entity` (`entity`),\n  CONSTRAINT `data_ibfk_1` FOREIGN KEY (`data_report`) REFERENCES `data_report` (`id`),\n  CONSTRAINT `data_ibfk_2` FOREIGN KEY (`entity`) REFERENCES `entity` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Defining ndb_binlog_index Table in SQL\nDESCRIPTION: Creates the `ndb_binlog_index` table in the `mysql` database, specifically used by MySQL NDB Cluster. This table maps NDB transaction epochs to binary log file positions, essential for replication and recovery within the cluster. It stores position, file name, epoch, and counts of DML/DDL operations. The table uses the MyISAM engine and latin1 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating db Table for Database Privileges - MySQL - SQL\nDESCRIPTION: Defines the db table to store database-level privileges for each user and host combination in MySQL. Requires MySQL with utf8_bin collation and a multi-column primary key ensuring unique privilege sets per host-db-user trio. Includes columns for every grantable privilege and provides efficient access with an additional index on the User column. Outputs a static, granular mapping of user database privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Servers Table\nDESCRIPTION: Defines the structure for the mysql.servers table, which stores information about MySQL foreign servers. It includes fields for server name, host, database, credentials, and connection details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL Foreign Servers table'\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Table in SQL\nDESCRIPTION: Defines the customer table schema with fields for customer details like name, email, and address. Includes foreign keys to store and address tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: InnoDB Configuration Status\nDESCRIPTION: Detailed InnoDB storage engine configuration including buffer pool settings, file configuration, performance parameters, and transaction states.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp007.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n                  Version | 1.1.8-rel29.1\n         Buffer Pool Size | 32.0M\n         Buffer Pool Fill | 35%\n        Buffer Pool Dirty | 0%\n           File Per Table | OFF\n                Page Size | 16k\n            Log File Size | 2 * 5.0M = 10.0M\n          Log Buffer Size | 8M\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Output (text)\nDESCRIPTION: This text block shows timestamped disk input/output statistics, likely generated by a system monitoring tool such as `iostat` or a script within Percona Toolkit. It includes metrics like reads per second (`rd_s`), average kilobytes per read (`rd_avkb`), megabytes read per second (`rd_mb_s`), write operations per second (`wr_s`), average kilobytes per write (`wr_avkb`), megabytes written per second (`wr_mb_s`), device busy percentage (`busy`), average queue time (`qtime`), and average service time (`stime`) for various block devices (e.g., `xvda`, `xvdb`, `dm-0`) sampled at intervals (timestamps 17.0 through 24.0). The header line (`#ts device...`) clarifies the meaning of each column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_bug-1035311.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n 17.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     2.0    12.0     0.0    67%    0.0     0.0   1%      1     2.0   -0.2   1.7\n 17.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 17.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     2.0    12.0     0.0    67%    0.0     0.0   1%      1     2.0   -0.2   1.7\n 17.0 xvdb     214.0    42.1     8.8     0%    1.0     4.8   481.1     7.1     3.3     3%    1.4     2.8  54%      7   695.1    2.6   0.8\n 17.0 xvdb1    214.0    42.1     8.8     0%    1.0     4.8   481.1     7.1     3.3     3%    1.4     2.8  54%      7   695.1    2.6   0.8\n 17.0 dm-0     220.0    42.1     9.0     0%    1.0     4.6   580.1     5.9     3.3     0%    1.6     2.7  52%      7   800.1    2.6   0.7\n 17.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   1%      1     1.0   -5.0  10.0\n 17.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     6.0     4.0     0.0     0%    0.0     0.0   0%      0     6.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 18.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     5.0     9.6     0.0    58%    0.0     0.8   0%      0     5.0    0.0   0.0\n 18.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 18.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     5.0     9.6     0.0    58%    0.0     0.8   0%      0     5.0    0.0   0.0\n 18.0 xvdb     103.1    42.4     4.3     0%    4.6    44.8   122.2     9.0     1.1     0%    2.4    19.5  85%      1   225.3   28.1   3.8\n 18.0 xvdb1    103.1    42.4     4.3     0%    4.6    44.8   122.2     9.0     1.1     0%    2.4    19.5  85%      1   225.3   28.1   3.8\n 18.0 dm-0      97.1    42.4     4.0     0%    4.6    47.4   133.2     8.2     1.1     0%    2.4    17.9  85%      1   230.3   27.4   3.7\n 18.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0    11.0     4.0     0.0     0%    0.0     0.9   0%      0    11.0    0.0   0.0\n 18.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 19.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 19.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 19.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 19.0 xvdb     119.5    42.7     5.0     0%    4.8    40.3   171.2    12.2     2.0    12%    2.3    11.8  86%      0   290.7   20.0   2.7\n 19.0 xvdb1    119.5    42.7     5.0     0%    4.8    40.3   171.2    12.2     2.0    12%    2.3    11.8  86%      0   290.7   20.0   2.7\n 19.0 dm-0     119.5    42.7     5.0     0%    4.8    40.2   218.0     9.5     2.0     0%    2.7    12.6  86%      0   337.5   19.9   2.5\n 19.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 19.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 20.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 20.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 20.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 20.0 xvdb     166.1    42.0     6.8     0%    4.9    29.2   102.1    11.4     1.1     0%    1.1    10.3  86%      7   268.2   18.5   3.2\n 20.0 xvdb1    166.1    42.0     6.8     0%    4.9    29.2   102.1    11.4     1.1     0%    1.1    10.3  86%      7   268.2   18.5   3.2\n 20.0 dm-0     172.1    42.0     7.1     0%    4.9    28.2   113.1    10.3     1.1     0%    1.1     9.3  86%      7   285.2   17.4   3.0\n 20.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 20.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 21.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     3.0     4.0     0.0     0%    0.0     0.0   0%      0     3.0    0.0   0.0\n 21.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 21.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     3.0     4.0     0.0     0%    0.0     0.0   0%      0     3.0    0.0   0.0\n 21.0 xvdb     250.0    42.3    10.3     0%    1.8     7.3   379.6    10.1     3.8     8%    1.4     3.3  44%      0   629.6    4.1   0.7\n 21.0 xvdb1    250.0    42.3    10.3     0%    1.8     7.3   379.6    10.1     3.8     8%    1.4     3.3  44%      0   629.6    4.1   0.7\n 21.0 dm-0     244.0    42.3    10.1     0%    1.8     7.5   454.9     8.5     3.8     0%    1.8     4.0  44%      0   698.9    4.6   0.6\n 21.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0     2.0     4.0     0.0     0%    0.0     0.0   0%      0     2.0    0.0   0.0\n 21.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 22.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 22.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 22.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 22.0 xvdb     234.7    40.5     9.3     0%    2.5    10.7   455.4     9.2     4.1     4%    2.1     4.3  69%      0   690.1    5.5   1.0\n 22.0 xvdb1    234.7    40.5     9.3     0%    2.5    10.7   455.4     9.2     4.1     4%    2.1     4.3  69%      0   690.1    5.5   1.0\n 22.0 dm-0     234.7    40.5     9.3     0%    2.5    10.7   559.2     7.5     4.1     0%    2.2     4.0  69%      0   793.9    5.1   0.9\n 22.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 22.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 23.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     3.0    14.7     0.0    73%    0.0     0.0   0%      0     3.0    0.0   0.0\n 23.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 23.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     3.0    14.7     0.0    73%    0.0     0.0   0%      0     3.0    0.0   0.0\n 23.0 xvdb     217.1    42.4     9.0     0%    1.8     8.4   218.1    14.0     3.0    11%    1.0     4.0  46%      0   435.1    5.1   1.0\n 23.0 xvdb1    217.1    42.4     9.0     0%    1.8     8.4   218.1    14.0     3.0    11%    1.0     4.0  46%      0   435.1    5.1   1.0\n 23.0 dm-0     217.1    42.4     9.0     0%    1.8     8.4   267.8    11.4     3.0     0%    1.1     4.2  46%      0   484.9    5.2   0.9\n 23.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0    11.0     4.0     0.0     0%    0.0     0.0   0%      0    11.0    0.0   0.0\n 23.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n 24.0 xvda       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 24.0 xvda1      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n 24.0 xvda3      0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 24.0 xvdb      74.2    41.9     3.0     0%    3.6    49.1   164.4     5.7     0.9     0%    6.0    36.6  77%     35   238.6   68.9   3.2\n 24.0 xvdb1     74.2    41.9     3.0     0%    3.6    49.1   164.4     5.7     0.9     0%    6.0    36.6  77%     35   238.6   68.9   3.2\n 24.0 dm-0      80.2    42.0     3.3     0%    3.6    45.2   234.6     9.0     2.1     0%    6.0    25.7  77%     35   314.9   53.9   2.5\n 24.0 dm-1       0.0     0.0     0.0     0%    0.0     0.0     1.0     4.0     0.0     0%    0.0     0.0   0%      0     1.0    0.0   0.0\n 24.0 dm-3       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n  #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n```\n\n----------------------------------------\n\nTITLE: Creating percona_test.checksums Table in SQL\nDESCRIPTION: This SQL snippet creates the `checksums` table within the `percona_test` database. It is likely used by Percona Toolkit's pt-table-checksum tool to store checksums for database tables, identified by `db_tbl` (database and table name). The `checksum` column stores the calculated checksum value. The primary key is on the `db_tbl` column. The table uses the InnoDB engine and `utf8mb4` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Creating Help Topic Table in SQL\nDESCRIPTION: The snippet generates the help_topic table, a central hub for help topics in MySQL applications. Key columns include help_topic_id, name, description, and others, with primary and unique keys ensuring topic integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating Staff List View in MySQL\nDESCRIPTION: This view, `staff_list`, aggregates information about staff, including names, contact information, and assigned stores. This view joins `staff`, `address`, `city`, and `country` tables to compile staff details with geographic and contact information. It is essential for managing staff data with location-based context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `staff_list*/;\n/*!50001 DROP VIEW IF EXISTS `staff_list*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `staff_list` AS select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,_utf8' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`staff` `s` join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Replication Async Connection Failover Table\nDESCRIPTION: Defines table structure for managing asynchronous replication connection failover settings including channel configuration, host details and weighting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `replication_asynchronous_connection_failover` (\n  `Channel_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT 'The replication channel name that connects source and replica.',\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.',\n  `Port` int unsigned NOT NULL COMMENT 'The source port that the replica will attempt to switch over the replication connection to in case of a failure.',\n  `Network_namespace` char(64) NOT NULL COMMENT 'The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.',\n  `Weight` tinyint unsigned NOT NULL COMMENT 'The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.',\n  `Managed_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '' COMMENT 'The name of the group which this server belongs to.',\n  PRIMARY KEY (`Channel_name`,`Host`,`Port`,`Network_namespace`,`Managed_name`),\n  KEY `Channel_name` (`Channel_name`,`Managed_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='The source configuration details'\n```\n\n----------------------------------------\n\nTITLE: Creating sentinel Table in percona_test using SQL\nDESCRIPTION: Defines the `sentinel` table within the `percona_test` database. This table seems designed as a marker or heartbeat table, possibly used by monitoring or management tools (like pt-heartbeat) to check connectivity or replication lag via the `ping` column. It uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sentinel` (\n  `id` int(11) NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Procedure Privileges Table in MySQL\nDESCRIPTION: Schema definition for the procs_priv table that manages privilege assignments for stored procedures and functions including execution, alteration and grant permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges';\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.country Table in SQL\nDESCRIPTION: This SQL statement creates the `country` table in the Sakila sample database. It stores country information with an auto-incrementing primary key `country_id`, the country name, and an automatically updated `last_update` timestamp. The table utilizes the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `country` (\n  `country_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL Table\nDESCRIPTION: This SQL command removes a duplicate index 'a' from the 'test.dupe_key' table. The index 'a' is a left-prefix of the index 'a_2', making it redundant.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/basic_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `test`.`dupe_key` DROP INDEX `a`;\n```\n\n----------------------------------------\n\nTITLE: Querying Session SSL Status in MySQL\nDESCRIPTION: Example query showing how to retrieve SSL connection status information from MySQL sessions, including thread ID, SSL version, cipher and session reuse status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_72\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from session_ssl_status;\n```\n\n----------------------------------------\n\nTITLE: Querying InnoDB Buffer Statistics Example\nDESCRIPTION: Demonstrates a sample query showing buffer pool statistics for various tables including system tables and application tables. Shows allocated space, data size, page counts and cached rows for each table in the buffer pool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from innodb_buffer_stats_by_table;\n+--------------------------+------------------------------------+------------+-----------+-------+--------------+-----------+-------------+\n| object_schema            | object_name                        | allocated  | data      | pages | pages_hashed | pages_old | rows_cached |\n+--------------------------+------------------------------------+------------+-----------+-------+--------------+-----------+-------------+\n| InnoDB System            | SYS_COLUMNS                        | 128.00 KiB | 98.97 KiB |     8 |            8 |         8 |        1532 |\n| InnoDB System            | SYS_FOREIGN                        | 128.00 KiB | 55.48 KiB |     8 |            8 |         8 |         172 |\n| InnoDB System            | SYS_TABLES                         | 128.00 KiB | 56.18 KiB |     8 |            8 |         8 |         365 |\n| InnoDB System            | SYS_INDEXES                        | 112.00 KiB | 76.16 KiB |     7 |            7 |         7 |        1046 |\n| mem30_trunk__instruments | agentlatencytime                   | 96.00 KiB  | 28.83 KiB |     6 |            6 |         6 |         252 |\n| mem30_trunk__instruments | binlogspaceusagedata               | 96.00 KiB  | 22.54 KiB |     6 |            6 |         6 |         196 |\n| mem30_trunk__instruments | connectionsdata                    | 96.00 KiB  | 36.68 KiB |     6 |            6 |         6 |         276 |\n| mem30_trunk__instruments | connectionsmaxdata                 | 96.00 KiB  | 31.88 KiB |     6 |            6 |         6 |         271 |\n| mem30_trunk__instruments | cpuaverage                         | 96.00 KiB  | 14.32 KiB |     6 |            6 |         6 |          55 |\n| mem30_trunk__instruments | diskiototaldata                    | 96.00 KiB  | 42.71 KiB |     6 |            6 |         6 |         152 |\n| mem30_trunk__instruments | innodbopenfilesdata                | 96.00 KiB  | 32.61 KiB |     6 |            6 |         6 |         266 |\n| mem30_trunk__instruments | innodbrowlocktimestatisticsdata    | 96.00 KiB  | 32.16 KiB |     6 |            6 |         6 |         261 |\n| mem30_trunk__instruments | myisamkeybufferusagedata           | 96.00 KiB  | 25.99 KiB |     6 |            6 |         6 |         232 |\n| mem30_trunk__instruments | mysqlprocessactivity               | 96.00 KiB  | 31.99 KiB |     6 |            6 |         6 |         252 |\n| mem30_trunk__instruments | querycacheaveragefreeblocksizedata | 96.00 KiB  | 27.00 KiB |     6 |            6 |         6 |         237 |\n| mem30_trunk__instruments | querycacheaveragequerysizedata     | 96.00 KiB  | 38.29 KiB |     6 |            6 |         6 |         315 |\n| mem30_trunk__instruments | querycachefragmentationdata        | 96.00 KiB  | 27.00 KiB |     6 |            6 |         6 |         237 |\n| mem30_trunk__instruments | querycachememorydata               | 96.00 KiB  | 32.58 KiB |     6 |            6 |         6 |         278 |\n| mem30_trunk__instruments | querycachequeriesincachedata       | 96.00 KiB  | 27.15 KiB |     6 |            6 |         6 |         238 |\n| mem30_trunk__instruments | ramusagedata                       | 96.00 KiB  | 15.02 KiB |     6 |            6 |         6 |          59 |\n| mem30_trunk__instruments | slaverelaylogspaceusagedata        | 96.00 KiB  | 28.28 KiB |     6 |            6 |         6 |         249 |\n| mem30_trunk__instruments | swapusagedata                      | 96.00 KiB  | 15.02 KiB |     6 |            6 |         6 |          59 |\n| InnoDB System            | SYS_FIELDS                         | 80.00 KiB  | 49.78 KiB |     5 |            5 |         5 |        1147 |\n| InnoDB System            | SYS_DATAFILES                      | 32.00 KiB  | 3.97 KiB  |     2 |            2 |         2 |          60 |\n| InnoDB System            | SYS_FOREIGN_COLS                   | 32.00 KiB  | 7.43 KiB  |     2 |            2 |         2 |          83 |\n| InnoDB System            | SYS_TABLESPACES                    | 32.00 KiB  | 3.65 KiB  |     2 |            2 |         2 |          56 |\n| InnoDB System            | SYS_IBUF_TABLE                     | 16.00 KiB  | 0 bytes   |     1 |            1 |         1 |           0 |\n+--------------------------+------------------------------------+------------+-----------+-------+--------------+-----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Creating film_actor table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the film_actor table, which represents the many-to-many relationship between films and actors. It includes foreign key constraints referencing the actor and film tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint unsigned NOT NULL,\n  `film_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying user_summary_by_file_io_type in MySQL Performance Schema\nDESCRIPTION: Example of querying the user_summary_by_file_io_type view which provides detailed breakdown of file I/O operations by event type for each database user, showing operation counts, total latency, and maximum latency per event type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_96\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary_by_file_io_type;\n+------------+--------------------------------------+-------+-----------+-------------+\n| user       | event_name                           | total | latency   | max_latency |\n+------------+--------------------------------------+-------+-----------+-------------+\n| background | wait/io/file/innodb/innodb_data_file |  1434 | 3.29 s    | 147.56 ms   |\n| background | wait/io/file/sql/FRM                 |   910 | 286.61 ms | 32.92 ms    |\n| background | wait/io/file/sql/relaylog            |     9 | 252.28 ms | 144.17 ms   |\n| background | wait/io/file/sql/binlog              |    56 | 193.73 ms | 153.72 ms   |\n| background | wait/io/file/sql/binlog_index        |    22 | 183.02 ms | 81.83 ms    |\n| background | wait/io/file/innodb/innodb_log_file  |    20 | 117.17 ms | 36.53 ms    |\n| background | wait/io/file/sql/relaylog_index      |     9 | 50.15 ms  | 48.04 ms    |\n| background | wait/io/file/sql/ERRMSG              |     5 | 35.41 ms  | 31.78 ms    |\n| background | wait/io/file/myisam/kfile            |    67 | 18.14 ms  | 9.00 ms     |\n| background | wait/io/file/mysys/charset           |     3 | 7.46 ms   | 4.13 ms     |\n| background | wait/io/file/sql/casetest            |     5 | 6.01 ms   | 5.86 ms     |\n| background | wait/io/file/sql/pid                 |     3 | 5.96 ms   | 3.06 ms     |\n| background | wait/io/file/myisam/dfile            |    43 | 980.38 us | 152.46 us   |\n| background | wait/io/file/mysys/cnf               |     5 | 154.97 us | 58.87 us    |\n| background | wait/io/file/sql/global_ddl_log      |     2 | 18.64 us  | 16.40 us    |\n| root       | wait/io/file/sql/file_parser         | 11048 | 48.79 s   | 201.11 ms   |\n| root       | wait/io/file/innodb/innodb_data_file |  4699 | 3.02 s    | 46.93 ms    |\n| root       | wait/io/file/sql/FRM                 | 10403 | 2.38 s    | 61.72 ms    |\n| root       | wait/io/file/myisam/dfile            | 22143 | 726.77 ms | 308.79 ms   |\n| root       | wait/io/file/myisam/kfile            |  6213 | 435.35 ms | 88.76 ms    |\n| root       | wait/io/file/sql/dbopt               |   159 | 130.86 ms | 15.46 ms    |\n| root       | wait/io/file/csv/metadata            |     8 | 86.60 ms  | 50.32 ms    |\n| root       | wait/io/file/sql/binlog              |    15 | 38.79 ms  | 9.40 ms     |\n| root       | wait/io/file/sql/misc                |    21 | 22.33 ms  | 15.30 ms    |\n| root       | wait/io/file/csv/data                |     4 | 297.46 us | 111.93 us   |\n| root       | wait/io/file/archive/data            |     3 | 54.10 us  | 40.74 us    |\n+------------+--------------------------------------+-------+-----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL Database\nDESCRIPTION: SQL definition for the staff table in the Sakila database. Stores employee information including login credentials and profile details. Contains foreign key constraints to the store and address tables, with optional BLOB storage for employee photos.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating the 'film_text' Table with FULLTEXT Index in SQL\nDESCRIPTION: This SQL snippet defines the `film_text` table using the MyISAM engine, likely optimized for full-text searching. It contains `film_id` as the primary key, along with `title` and `description` columns. A FULLTEXT index (`idx_title_description`) is created on the `title` and `description` columns to enable efficient text searches.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Sample Query\nDESCRIPTION: Example SELECT query retrieving fruit data from trees table with corresponding EXPLAIN output showing index usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_1-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Querying Global Wait Classes by Total Latency\nDESCRIPTION: Example query showing wait classes ordered by total latency, with metrics for counts and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_106\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from wait_classes_global_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating mysql.wsrep_cluster Table in SQL\nDESCRIPTION: This SQL statement creates the `mysql.wsrep_cluster` table, used in Galera Cluster environments. It stores information about the cluster state, including the cluster UUID, view ID, view sequence number, protocol version, and capabilities. The primary key is the `cluster_uuid`. The table uses the InnoDB engine and `utf8mb4` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `wsrep_cluster` (\n  `cluster_uuid` char(36) NOT NULL,\n  `view_id` bigint NOT NULL,\n  `view_seqno` bigint NOT NULL,\n  `protocol_version` int NOT NULL,\n  `capabilities` int NOT NULL,\n  PRIMARY KEY (`cluster_uuid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Describing Memory Usage by Thread Tables - MySQL SQL\nDESCRIPTION: These snippets show the structure of 'memory_by_thread_by_current_bytes' and 'x$memory_by_thread_by_current_bytes' tables using the MySQL 'desc' command. They help users understand the schema, column types, and differences between the summarized (sys) and raw (x$) views required for analyzing memory by thread. They require a MySQL instance with the performance schema enabled and include seven columns with thread and memory statistic breakdowns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_by_thread_by_current_bytes;\n+--------------------+---------------------+------+-----+---------+-------+\n| Field              | Type                | Null | Key | Default | Extra |\n+--------------------+---------------------+------+-----+---------+-------+\n| thread_id          | bigint(20) unsigned | NO   |     | NULL    |       |\n| user               | varchar(128)        | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0)       | YES  |     | NULL    |       |\n| current_allocated  | text                | YES  |     | NULL    |       |\n| current_avg_alloc  | text                | YES  |     | NULL    |       |\n| current_max_alloc  | text                | YES  |     | NULL    |       |\n| total_allocated    | text                | YES  |     | NULL    |       |\n+--------------------+---------------------+------+-----+---------+-------+\n7 rows in set (0.49 sec)\n\nmysql> desc x$memory_by_thread_by_current_bytes;\n+--------------------+---------------------+------+-----+---------+-------+\n| Field              | Type                | Null | Key | Default | Extra |\n+--------------------+---------------------+------+-----+---------+-------+\n| thread_id          | bigint(20) unsigned | NO   |     | NULL    |       |\n| user               | varchar(128)        | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0)       | YES  |     | NULL    |       |\n| current_allocated  | decimal(41,0)       | YES  |     | NULL    |       |\n| current_avg_alloc  | decimal(45,4)       | NO   |     | 0.0000  |       |\n| current_max_alloc  | bigint(20)          | YES  |     | NULL    |       |\n| total_allocated    | decimal(42,0)       | YES  |     | NULL    |       |\n+--------------------+---------------------+------+-----+---------+-------+\n7 rows in set (0.25 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL help_topic Table in SQL\nDESCRIPTION: This SQL statement defines the `help_topic` table within the `mysql` database. It stores the content for individual help topics in the server-side help system, including the topic ID (`help_topic_id`), name (`name`), associated category (`help_category_id`), description, example usage, and a URL. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating Table Triggers\nDESCRIPTION: Defines triggers that execute automatically after certain database events. For example, the 'del_film' trigger automatically deletes associated rows in another table when a film is deleted. These are key for maintaining referential integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\n\"DELIMITER ;;\\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN\\n    DELETE FROM film_text WHERE film_id = old.film_id;\\n  END */;;\\nDELIMITER ;\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Database Tables\nDESCRIPTION: Defines the structure for several tables in the Sakila sample database, including actor, address, category, city, and country. These tables represent entities in a DVD rental business and include various constraints and relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8\n\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8\n\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8\n\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View nicer_but_slower_film_list\nDESCRIPTION: Creates or replaces the MySQL view `nicer_but_slower_film_list` in the `sakila` database. Similar to `film_list`, it shows film details but formats actor names with proper capitalization (e.g., 'Firstname Lastname') using string functions (`UCASE`, `LCASE`, `SUBSTR`). As the name suggests, this formatting may lead to slower query performance compared to `film_list`. It sets `SQL SECURITY DEFINER`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `nicer_but_slower_film_list`*/;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `nicer_but_slower_film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(concat(ucase(substr(`actor`.`first_name`,1,1)),lcase(substr(`actor`.`first_name`,2,length(`actor`.`first_name`))),_utf8' ',concat(ucase(substr(`actor`.`last_name`,1,1)),lcase(substr(`actor`.`last_name`,2,length(`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Film Table\nDESCRIPTION: This SQL statement creates the 'film' table in the Sakila sample database. It defines columns for film details including ID, title, description, release year, language, rental information, and ratings. The table uses InnoDB engine with UTF-8 character set and includes foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL auto_increment,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) default NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned default NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL default '3',\n  `rental_rate` decimal(4,2) NOT NULL default '4.99',\n  `length` smallint(5) unsigned default NULL,\n  `replacement_cost` decimal(5,2) NOT NULL default '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') default 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Granting Column-Specific INSERT and SELECT on sakila.city\nDESCRIPTION: This SQL statement grants specific privileges to the user 'sally'@'%' on the 'city' table within the 'sakila' database. It allows the user to INSERT values only into the 'city' column and SELECT data from both the 'city_id' and 'city' columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-84.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT INSERT (`city`), SELECT, SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Schema for Specific Thread\nDESCRIPTION: Disables Performance Schema monitoring for a given connection/thread ID. Can be used to disable monitoring for the current connection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_142\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_thread(3);\n+-------------------+\n| summary           |\n+-------------------+\n| Disabled 1 thread |\n+-------------------+\n1 row in set (0.01 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_thread(CONNECTION_ID());\n+-------------------+\n| summary           |\n+-------------------+\n| Disabled 1 thread |\n+-------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Language Table in MySQL\nDESCRIPTION: This SQL script creates the 'language' table to store available languages for films. It includes an auto-incrementing primary key and a timestamp for tracking updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Querying Session View for Active Thread Data - SQL\nDESCRIPTION: Provides an example SQL query against the sys.session view, with sample output showing detailed thread/session information for performance troubleshooting. Requires sys schema with session view, and returns active connection attributes such as user, command, memory, statement times, transaction state, and resource utilization; outputs as a single row with extended field list.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_77\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.session\\G\n*************************** 1. row ***************************\n                thd_id: 24\n               conn_id: 2\n                  user: root@localhost\n                    db: sys\n               command: Query\n                 state: Sending data\n                  time: 0\n     current_statement: select * from sys.session\n     statement_latency: 137.22 ms\n              progress: NULL\n          lock_latency: 33.75 ms\n         rows_examined: 0\n             rows_sent: 0\n         rows_affected: 0\n            tmp_tables: 4\n       tmp_disk_tables: 1\n             full_scan: YES\n        last_statement: NULL\nlast_statement_latency: NULL\n        current_memory: 3.26 MiB\n             last_wait: wait/synch/mutex/innodb/file_format_max_mutex\n     last_wait_latency: 64.09 ns\n                source: trx0sys.cc:778\n           trx_latency: 7.88 s\n             trx_state: ACTIVE\n        trx_autocommit: NO\n                   pid: 4212\n          program_name: mysql\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Select Query with Condition\nDESCRIPTION: This SELECT query retrieves the 'id' from the 'tbl' table where 'id' equals 1. It utilizes EXPLAIN to showcase performance and uses full scan. The 'tbl' table should exist in the 'db1' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum-with-Locktime-distro.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /\\*!50100 PARTITIONS\\*/ SELECT id FROM tbl WHERE id = 1\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Film-Text Table with Fulltext Search in MySQL Database\nDESCRIPTION: SQL definition for the film_text table in the Sakila database. This specialized table is optimized for text searches on film titles and descriptions. Uses MyISAM engine to support fulltext indexing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure and Foreign Keys for 'inventory' - SQL\nDESCRIPTION: Creates the 'inventory' table, storing inventory items for films in relation to stores. Adds foreign keys to 'film' and 'store' for referential integrity, and indexes for efficient queries. Inputs: film, store IDs; outputs: inventory tracking records. Requires referenced tables to pre-exist and will auto-increment 'inventory_id'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Querying Thread Transaction Information with sys.ps_thread_trx_info\nDESCRIPTION: This SQL snippet demonstrates how to use the sys.ps_thread_trx_info function to retrieve detailed transaction information for a specific thread ID. It returns information about committed transactions, including execution time, state, isolation level, and individual statements executed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_121\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.ps_thread_trx_info(48)\\G\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL schema_object_overview Structure\nDESCRIPTION: Shows the structure of schema_object_overview view which provides a summary count of different object types (tables, views, procedures, etc.) for each database schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_object_overview;\n+-------------+-------------+------+-----+---------+-------+\n| Field       | Type        | Null | Key | Default | Extra |\n+-------------+-------------+------+-----+---------+-------+\n| db          | varchar(64) | NO   |     |         |       |\n| object_type  | varchar(64) | NO   |     |         |       |\n| count       | bigint(21)  | NO   |     | 0       |       |\n+-------------+-------------+------+-----+---------+-------+\n3 rows in set (0.08 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating the `tables_priv` Table - MySQL Table and Column Level Privileges - SQL\nDESCRIPTION: Defines the `tables_priv` table, which captures table and optionally per-column privileges granted to users for tables in specific schemas. The composite primary key (Host, Db, User, Table_name) ensures one row per table per user. It supports additional privilege granularity, including grantor tracking, timestamping, and both table and column privilege sets. MyISAM engine and UTF8 collation are prerequisites.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Table_name` char(64) collate utf8_bin NOT NULL default '',\n  `Grantor` char(77) collate utf8_bin NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view') character set utf8 NOT NULL default '',\n  `Column_priv` set('Select','Insert','Update','References') character set utf8 NOT NULL default '',\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: MySQL System Tables Schema Definitions\nDESCRIPTION: CREATE TABLE statements for core MySQL system tables including procs_priv, servers, tables_priv, time_zone related tables, and user privileges table. These tables store system metadata and security configurations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Converting Time Values to Human-Readable Form in MySQL\nDESCRIPTION: Demonstrates the format_time function which converts raw picosecond values from Performance Schema to human-readable time formats. This helps in interpreting query execution times and latency measurements more easily.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_111\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select format_time(342342342342345);\n+------------------------------+\n| format_time(342342342342345) |\n+------------------------------+\n| 00:05:42                     |\n+------------------------------+\n1 row in set (0.00 sec)\n\nmysql> select format_time(342342342);\n+------------------------+\n| format_time(342342342) |\n+------------------------+\n| 342.34 us              |\n+------------------------+\n1 row in set (0.00 sec)\n\nmysql> select format_time(34234);\n +--------------------+\n| format_time(34234) |\n+--------------------+\n| 34.23 ns           |\n+--------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Table in MySQL\nDESCRIPTION: This snippet creates the 'payment' table to record payments made by customers, linked to staff, customer, and optionally rental records using foreign keys. The table ensures referential integrity with ON UPDATE CASCADE and ON DELETE SET NULL for the 'rental_id'. It also uses auto-increment on primary key and provides default handling for timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Instruments in MySQL Performance Schema\nDESCRIPTION: Enables instruments within Performance Schema matching a given pattern. The procedure takes a LIKE pattern as input and returns a summary of the number of instruments enabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_133\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_instrument('wait/synch/mutex');\n+-------------------------+\n| summary                 |\n+-------------------------+\n| Enabled 155 instruments |\n+-------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_instrument('wait/io/socket/sql/server_tcpip_socket');\n+-----------------------+\n| summary               |\n+-----------------------+\n| Enabled 1 instruments |\n+-----------------------+\n1 row in set (0.00 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_instrument('');\n+-------------------------+\n| summary                 |\n+-------------------------+\n| Enabled 547 instruments |\n+-------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet Hexdump\nDESCRIPTION: TCP packet containing MySQL protocol server response with result set header and data. Shows complete packet structure including column definitions and the 'hello world' result string.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump001.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 007d 7c81 4000 4006 bfef 7f00 0001\n7f00 0001 0cea a4b7 ad16 9219 ac8a 8438\n8018 0200 fe71 0000 0101 080a 0024 f99a\n0024 f99a 0100 0001 011e 0000 0203 6465\n6600 0000 0867 7265 6574 696e 6700 0c08\n000b 0000 00fd 0100 1f00 0005 0000 03fe\n0000 0200 0c00 0004 0b68 656c 6c6f 2077\n6f72 6c64 0500 0005 fe00 0002 00\n```\n\n----------------------------------------\n\nTITLE: Formatting Bytes to Human-Readable Format in MySQL\nDESCRIPTION: This function converts a raw bytes value to a human-readable format. It can handle various sizes from bytes to petabytes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_118\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.format_bytes(2348723492723746) AS size;\nSELECT sys.format_bytes(2348723492723) AS size;\nSELECT sys.format_bytes(23487234) AS size;\n```\n\n----------------------------------------\n\nTITLE: Creating the `proc` Table - MySQL Stored Procedures and Functions - SQL\nDESCRIPTION: Defines the `proc` table to catalog internally-created stored procedures and user-defined functions, detailing parameters, language, SQL mode, security, DDL/creation times, and owners. The composite primary key (db, name, type) uniquely identifies each routine. This table is part of the internal system schema, relying on MyISAM, and not typically modified directly by external applications.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) character set utf8 collate utf8_bin NOT NULL default '',\n  `name` char(64) NOT NULL default '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL default '',\n  `language` enum('SQL') NOT NULL default 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL default 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL default 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL default 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` char(64) NOT NULL default '',\n  `body` longblob NOT NULL,\n  `definer` char(77) character set utf8 collate utf8_bin NOT NULL default '',\n  `created` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL default '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE') NOT NULL default '',\n  `comment` char(64) character set utf8 collate utf8_bin NOT NULL default '',\n  PRIMARY KEY  (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'\n```\n\n----------------------------------------\n\nTITLE: Detailed Report for MySQL Instance on Port 12345\nDESCRIPTION: Provides a detailed status report for the MySQL instance running on port 12345. It includes the user running the report, timestamp, hostname, MySQL version (Percona Server 8.0.32-24), build OS, start time/uptime, database count, data directory path, process counts (connected/running), replication status (master with one slave), and PID file location.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Report On Port 12345 #######################################\n                     User | msandbox@%\n                     Time | 2023-07-13 23:29:50 (+03)\n                 Hostname | s76\n                  Version | 8.0.32-24 Percona Server (GPL), Release 24, Revision e5c6e9d2\n                 Built On | Linux x86_64\n                  Started | 2023-07-12 17:25 (up 1+06:03:52)\n                Databases | 7\n                  Datadir | /tmp/12345/data/\n                Processes | 4 connected, 3 running\n              Replication | Is not a slave, has 1 slaves connected\n                  Pidfile | /tmp/12345/data/mysql_sandbox12345.pid (exists)\n```\n\n----------------------------------------\n\nTITLE: InnoDB Deadlock Detection in MySQL\nDESCRIPTION: Shows a detected deadlock between two transactions trying to update the same table. Transaction 1 is waiting for an X lock while Transaction 2 holds an S lock and is also waiting for an X lock on the same record, causing a circular wait condition that resulted in Transaction 2 being rolled back.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate test.innotop_dl set a = 0 where a <> 0\n```\n\nLANGUAGE: sql\nCODE:\n```\nupdate test.innotop_dl set a = 1 where a <> 1\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Table Schema in MySQL\nDESCRIPTION: SQL definition for the actor table with columns for actor_id, first_name, last_name, and last_update timestamp. Includes primary key and index definitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'db' Privilege Table - SQL\nDESCRIPTION: Defines the 'db' table, storing database-level privileges for each user+host combination. All privilege columns use the ENUM type to indicate if privileges are granted. The table enforces a composite primary key across host, db, and user, with an additional index on User for optimized lookups. Uses the MyISAM storage engine and UTF-8 encoding.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database Privileges Table\nDESCRIPTION: Defines the `db` table for handling database-level privileges. It specifies various privilege types for databases associated with different users and hosts. Configured with MyISAM engine and utf8 charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Country Table Schema in MySQL\nDESCRIPTION: SQL definition for the 'country' table in the Sakila database that stores country names. The table has a simple structure with an auto-incrementing primary key and a timestamp field for tracking updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Running pt-mongodb-summary Command in Bash\nDESCRIPTION: Shows the basic syntax for executing the pt-mongodb-summary tool. The tool can connect to a specified MongoDB host and port, defaulting to localhost:27017 if not specified. It requires clusterAdmin or root privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-mongodb-summary/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-mongodb-summary [OPTIONS] [HOST:[PORT]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux Disk I/O Statistics\nDESCRIPTION: Performance monitoring output showing disk I/O metrics for various storage devices. Metrics include timestamps, device names, read/write throughput (MB/s), concurrency, response times (ms), device utilization percentage, and in-progress I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 96.3 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 96.3 sda           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 96.3 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Querying Users-Rooms State with Recent Activity Excluding User ID - SQL\nDESCRIPTION: Retrieves all fields from the 'users_rooms' table where 'here' matches a specified value, the row is more recent than 5 minutes, and the userid is not a specified value. Results are ordered by 'level' descending. Useful for seeing recent user activity in rooms while omitting a particular user. Requires SELECT access and proper field indexing for performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users_rooms WHERE here=1897 AND date > (UNIX_TIMESTAMP() - (60 * 5)) AND userid != 2362151 ORDER BY level DESC\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users_rooms WHERE here=3991 AND date > (UNIX_TIMESTAMP() - (60 * 5)) AND userid != 2227058 ORDER BY level DESC\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL proc Table in SQL\nDESCRIPTION: This SQL statement defines the `proc` table within the `mysql` database. It stores metadata about stored procedures and functions, including their database (`db`), name (`name`), type (`type`), definer (`definer`), creation/modification timestamps, SQL mode (`sql_mode`), parameters (`param_list`), return type (`returns`), and body (`body`). The table uses the MyISAM engine and utf8 character set with utf8_bin collation for some columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the payment table that records financial transactions. The table includes foreign key relationships to customer, staff, and rental tables, with appropriate indexing for performance and a SET NULL option for rental references.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Stored Procedures Table - MySQL - SQL\nDESCRIPTION: This CREATE TABLE defines the 'proc' table, which stores stored procedure and function metadata for MySQL. It includes fields for procedure name, type, language, body, parameters, privileges, and creation metadata. The table uses MyISAM storage and utf8 charset and facilitates definition, lookup, and management of all user-defined routines in the MySQL server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(93) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary View Table Structure for film_list - MySQL SQL\nDESCRIPTION: Defines a temporary table structure for the 'film_list' view, outlining columns for FID, title, description, category, price, length, rating, and actors. This is used as a placeholder during view or schema changes and does not persist data. Designed for use within migration or dump scripts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `film_list` (\n  `FID` smallint(5) unsigned,\n  `title` varchar(255),\n  `description` text,\n  `category` varchar(25),\n  `price` decimal(4,2),\n  `length` smallint(5) unsigned,\n  `rating` enum('G','PG','PG-13','R','NC-17'),\n  `actors` varchar(341)\n) ENGINE=MyISAM */;\n```\n\n----------------------------------------\n\nTITLE: Defining Percona Toolkit Query Analysis Data Structure in Perl\nDESCRIPTION: A comprehensive Perl data structure that stores query analysis results from Percona Toolkit. It includes attribute type definitions, query classification by fingerprint, global statistics, and detailed sample information for database queries, particularly focusing on an UPDATE query joining two tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow002.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n$VAR1 = {attribute_types => {Filesort_on_disk => 'bool',Tmp_table_on_disk => 'bool',Error_no => 'string',Filesort => 'bool',Full_join => 'bool',Full_scan => 'bool',InnoDB_IO_r_bytes => 'num',InnoDB_IO_r_ops => 'num',InnoDB_IO_r_wait => 'num',InnoDB_pages_distinct => 'num',InnoDB_queue_wait => 'num',InnoDB_rec_lock_wait => 'num',Killed => 'bool',Last_errno => 'string',Lock_time => 'num',Merge_passes => 'num',QC_Hit => 'bool',Query_time => 'num',Rows_examined => 'num',Rows_sent => 'num',Statement_id => 'string',Status_code => 'string',Thread_id => 'string',Tmp_table => 'bool',bytes => 'num',db => 'string',host => 'string',key_print => 'string',pos_in_log => 'num',ts => 'string',user => 'string',val => 'string'},groupby => 'fingerprint',results => {classes => {'update d?tuningdetail_?_? n inner join d?gonzo a using(gonzo) set n.column? = a.column?, n.word? = a.word?' => {Filesort_on_disk => {cnt => 1,max => 0,min => 0,sum => 0,unq => {'0' => 1}},Tmp_table_on_disk => {cnt => 1,max => 0,min => 0,sum => 0,unq => {'0' => 1}},Filesort => {cnt => 1,max => 0,min => 0,sum => 0,unq => {'0' => 1}},Full_join => {cnt => 1,max => 0,min => 0,sum => 0,unq => {'0' => 1}},Full_scan => {cnt => 1,max => 1,min => 1,sum => 1,unq => {'1' => 1}},Lock_time => {all => {'93' => 1},cnt => 1,last => '0.000091',max => '0.000091',min => '0.000091',sum => '9.1e-05'},Merge_passes => {all => {'0' => 1},cnt => 1,last => 0,max => 0,min => 0,sum => 0},QC_Hit => {cnt => 1,max => 0,min => 0,sum => 0,unq => {'0' => 1}},Query_time => {all => {'277' => 1},cnt => 1,last => '0.726052',max => '0.726052',min => '0.726052',sum => '0.726052'},Rows_examined => {all => {'510' => 1},cnt => 1,last => 62951,max => 62951,min => 62951,sum => 62951},Rows_sent => {all => {'0' => 1},cnt => 1,last => 0,max => 0,min => 0,sum => 0},Tmp_table => {cnt => 1,max => 0,min => 0,sum => 0,unq => {'0' => 1}},bytes => {all => {'383' => 1},cnt => 1,last => 129,max => 129,min => 129,sum => 129},db => {cnt => 1,max => 'db1',min => 'db1',unq => {db1 => 1}},host => {cnt => 1,max => '',min => '',unq => {'' => 1}},pos_in_log => {all => {'403' => 1},cnt => 1,last => 332,max => 332,min => 332,sum => 332},ts => {cnt => 1,max => '071218 11:48:27',min => '071218 11:48:27',unq => {'071218 11:48:27' => 1}},user => {cnt => 1,max => '[SQL_SLAVE]',min => '[SQL_SLAVE]',unq => {'[SQL_SLAVE]' => 1}}}},globals => {Filesort_on_disk => {cnt => 8,max => 0,min => 0,sum => 0},Tmp_table_on_disk => {cnt => 8,max => 0,min => 0,sum => 0},Filesort => {cnt => 8,max => 0,min => 0,sum => 0},Full_join => {cnt => 8,max => 0,min => 0,sum => 0},Full_scan => {cnt => 8,max => 1,min => 0,sum => 1},InnoDB_IO_r_bytes => {all => {'0' => 6},cnt => 6,max => 0,min => 0,sum => 0},InnoDB_IO_r_ops => {all => {'0' => 6},cnt => 6,max => 0,min => 0,sum => 0},InnoDB_IO_r_wait => {all => {'0' => 6},cnt => 6,max => '0.000000',min => '0.000000',sum => '0'},InnoDB_pages_distinct => {all => {'333' => 1,'343' => 4,'349' => 1},cnt => 6,max => 24,min => 11,sum => 107},InnoDB_queue_wait => {all => {'0' => 6},cnt => 6,max => '0.000000',min => '0.000000',sum => '0'},InnoDB_rec_lock_wait => {all => {'0' => 6},cnt => 6,max => '0.000000',min => '0.000000',sum => '0'},Lock_time => {all => {'0' => 1,'68' => 4,'69' => 1,'90' => 1,'93' => 1},cnt => 8,max => '0.000091',min => '0.000000',sum => '0.000304'},Merge_passes => {all => {'0' => 8},cnt => 8,max => 0,min => 0,sum => 0},QC_Hit => {cnt => 8,max => 0,min => 0,sum => 0},Query_time => {all => {'128' => 1,'129' => 4,'214' => 1,'277' => 1,'51' => 1},cnt => 8,max => '0.726052',min => '0.000012',sum => '0.76208'},Rows_examined => {all => {'0' => 7,'510' => 1},cnt => 8,max => 62951,min => 0,sum => 62951},Rows_sent => {all => {'0' => 8},cnt => 8,max => 0,min => 0,sum => 0},Tmp_table => {cnt => 8,max => 0,min => 0,sum => 0},bytes => {all => {'317' => 1,'360' => 2,'367' => 1,'368' => 1,'370' => 1,'379' => 1,'383' => 1},cnt => 8,max => 129,min => 5,sum => 502},db => {cnt => 7,max => 'db1',min => 'db1'},host => {cnt => 8,max => '',min => ''},pos_in_log => {all => {'0' => 1,'403' => 1,'421' => 1,'431' => 1,'438' => 1,'443' => 1,'447' => 1,'450' => 1},cnt => 8,max => 3332,min => 0,sum => 12811},ts => {cnt => 8,max => '071218 11:48:27',min => '071218 11:48:27'},user => {cnt => 8,max => '[SQL_SLAVE]',min => '[SQL_SLAVE]'}},samples => {'update d?tuningdetail_?_? n inner join d?gonzo a using(gonzo) set n.column? = a.column?, n.word? = a.word?' => {Filesort_on_disk => 'No',Tmp_table_on_disk => 'No',Filesort => 'No',Full_join => 'No',Full_scan => 'Yes',Lock_time => '0.000091',Merge_passes => '0',QC_Hit => 'No',Query_time => '0.726052',Rows_examined => '62951',Rows_sent => '0',Thread_id => '10',Tmp_table => 'No',arg => 'update db2.tuningdetail_21_265507 n\\n      inner join db1.gonzo a using(gonzo) \\n      set n.column1 = a.column1, n.word3 = a.word3',bytes => 129,cmd => 'Query',db => 'db1',fingerprint => 'update d?tuningdetail_?_? n inner join d?gonzo a using(gonzo) set n.column? = a.column?, n.word? = a.word?',host => '',ip => '',pos_in_log => 332,timestamp => '1197996507',ts => '071218 11:48:27',user => '[SQL_SLAVE]'}}},worst => 'Query_time'};\n```\n\n----------------------------------------\n\nTITLE: Creating Film Actor Table in MySQL\nDESCRIPTION: Table definition for film_actor junction table that manages many-to-many relationships between films and actors with foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Querying innodb_lock_waits for Active Locks - SQL\nDESCRIPTION: This snippet demonstrates a sample SELECT query and the resulting output from the innodb_lock_waits view in a MySQL instance. It shows the details of current InnoDB lock waits, including timing, locked tables, waiting and blocking transaction information, and SQL to terminate blocking sessions. It depends on the existence of the innodb_lock_waits view and relevant transactional activity. No inputs are needed for the output sample; output includes all columns for a single row representing an active lock wait.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT * FROM innodb_lock_waits\\G\n*************************** 1. row ***************************\n                wait_started: 2014-11-11 13:39:20\n                    wait_age: 00:00:07\n               wait_age_secs: 7\n                locked_table: `db1`.`t1`\n                locked_index: PRIMARY\n                 locked_type: RECORD\n              waiting_trx_id: 867158\n         waiting_trx_started: 2014-11-11 13:39:15\n             waiting_trx_age: 00:00:12\n     waiting_trx_rows_locked: 0\n   waiting_trx_rows_modified: 0\n                 waiting_pid: 3\n               waiting_query: UPDATE t1 SET val = val + 1 WHERE id = 2\n             waiting_lock_id: 867158:2363:3:3\n           waiting_lock_mode: X\n             blocking_trx_id: 867157\n                blocking_pid: 4\n              blocking_query: UPDATE t1 SET val = val + 1 + SLEEP(10) WHERE id = 2\n            blocking_lock_id: 867157:2363:3:3\n          blocking_lock_mode: X\n        blocking_trx_started: 2014-11-11 13:39:11\n            blocking_trx_age: 00:00:16\n    blocking_trx_rows_locked: 1\n  blocking_trx_rows_modified: 1\n     sql_kill_blocking_query: KILL QUERY 4\nsql_kill_blocking_connection: KILL 4\n```\n\n----------------------------------------\n\nTITLE: Creating User and Granting Permissions in MySQL\nDESCRIPTION: This SQL script first ensures the user 'sally'@'%' exists. It then alters the user to use 'mysql_native_password' authentication, sets password expiration to default, and unlocks the account. Subsequently, it grants INSERT permission on the 'city' column and SELECT permission on the 'city_id' column of the 'sakila.city' table. It also grants SELECT permission on the 'DateCreated', 'PaymentStat', 'PckPrice', and 'SANumber' columns of the 'test.t' table. Finally, it grants USAGE permission on all databases to the user. Requires a running MySQL server with 'sakila' and 'test' databases containing the specified tables and columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS 'sally'@'%';\nALTER USER 'sally'@'%' IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK;\nGRANT INSERT (city), SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Displaying enabled Performance Schema configuration with sys.ps_setup_show_enabled\nDESCRIPTION: This procedure shows all currently enabled Performance Schema configurations. It accepts parameters to control whether enabled instruments and threads are displayed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_141\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_enabled(TRUE, TRUE);\n+----------------------------+\n| performance_schema_enabled |\n+----------------------------+\n|                          1 |\n+----------------------------+\n1 row in set (0.00 sec)\n\n+---------------+\n| enabled_users |\n+---------------+\n| '%'@'%'       |\n+---------------+\n1 row in set (0.01 sec)\n\n+----------------------+---------+-------+\n| objects              | enabled | timed |\n+----------------------+---------+-------+\n| mysql.%              | NO      | NO    |\n| performance_schema.% | NO      | NO    |\n| information_schema.% | NO      | NO    |\n| %.%                  | YES     | YES   |\n+----------------------+---------+-------+\n4 rows in set (0.01 sec)\n\n+---------------------------+\n| enabled_consumers         |\n+---------------------------+\n| events_statements_current |\n| global_instrumentation    |\n| thread_instrumentation    |\n| statements_digest         |\n+---------------------------+\n4 rows in set (0.05 sec)\n\n+--------------------------+-------------+\n| enabled_threads          | thread_type |\n+--------------------------+-------------+\n| innodb/srv_master_thread | BACKGROUND  |\n| root@localhost           | FOREGROUND  |\n| root@localhost           | FOREGROUND  |\n| root@localhost           | FOREGROUND  |\n| root@localhost           | FOREGROUND  |\n+--------------------------+-------------+\n5 rows in set (0.03 sec)\n\n+-------------------------------------+-------+\n| enabled_instruments                 | timed |\n+-------------------------------------+-------+\n| wait/io/file/sql/map                | YES   |\n| wait/io/file/sql/binlog             | YES   |\n...\n| statement/com/Error                 | YES   |\n| statement/com/                      | YES   |\n| idle                                | YES   |\n+-------------------------------------+-------+\n210 rows in set (0.08 sec)\n\nQuery OK, 0 rows affected (0.89 sec)\n```\n\n----------------------------------------\n\nTITLE: Showing MySQL Table Structure with Redundant Index\nDESCRIPTION: Displays the CREATE TABLE statement for the test.rkey table which contains a redundant index. The table has a primary key on column 'i' and two indexes on column 'j', where one (j_2) makes the other redundant.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_64\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SHOW CREATE TABLE test.rkey\\G\n*************************** 1. row ***************************\n       Table: rkey\nCreate Table: CREATE TABLE `rkey` (\n  `i` int(11) NOT NULL,\n  `j` int(11) DEFAULT NULL,\n  `k` int(11) DEFAULT NULL,\n  PRIMARY KEY (`i`),\n  KEY `j` (`j`),\n  KEY `j_2` (`j`,`k`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n1 row in set (0.06 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration File Settings\nDESCRIPTION: The contents of the MySQL configuration file (my.cnf), showing client and server settings including port, socket, data directory, and various InnoDB and logging parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n# Configuration File #########################################\n              Config File | /etc/mysql/my.cnf\n\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL schema_redundant_indexes Example\nDESCRIPTION: Demonstrates identifying a redundant index on a test table. The output shows that index 'j' is redundant because 'j_2' covers the same columns plus additional ones, and includes the SQL statement needed to drop the redundant index.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_63\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.schema_redundant_indexes\\G\n*************************** 1. row ***************************\n              table_schema: test\n                table_name: rkey\n      redundant_index_name: j\n   redundant_index_columns: j\nredundant_index_non_unique: 1\n       dominant_index_name: j_2\n    dominant_index_columns: j,k\n dominant_index_non_unique: 1\n            subpart_exists: 0\n            sql_drop_index: ALTER TABLE `test`.`rkey` DROP INDEX `j`\n1 row in set (0.20 sec)\n```\n\n----------------------------------------\n\nTITLE: Truncating All Tables in MySQL Performance Schema\nDESCRIPTION: This procedure truncates all summary tables within Performance Schema, resetting all aggregated instrumentation as a snapshot. It takes a boolean parameter to control verbosity of output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_147\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_truncate_all_tables(false);\n+---------------------+\n| summary             |\n+---------------------+\n| Truncated 44 tables |\n+---------------------+\n1 row in set (0.10 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Table Status in MySQL - SQL\nDESCRIPTION: This snippet retrieves metadata for a specific table named 'tbl' in the 'foodb' database using the SHOW TABLE STATUS statement in MySQL. It is often used for performance analysis, schema inspection, or troubleshooting. Required privileges include access to the target database and permissions to run metadata queries; output provides structural and statistical table information, useful for diagnostics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `foodb` LIKE 'tbl'\\G\n```\n\n----------------------------------------\n\nTITLE: Encrypted Tablespaces Report\nDESCRIPTION: SQL query result displaying encrypted tablespaces in the MySQL server. It shows two encrypted tablespaces: a general tablespace named 'foo' and a single tablespace for the table 'test/t2'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n+-------+---------+------------+\n| SPACE | NAME    | SPACE_TYPE |\n+-------+---------+------------+\n|    89 | foo     | General    |\n|    90 | test/t2 | Single     |\n+-------+---------+------------+\n```\n\n----------------------------------------\n\nTITLE: Creating password_history Table - MySQL SQL\nDESCRIPTION: Defines the `password_history` table, which maintains a history of password changes for each MySQL user. This table is required for password reuse policies. It includes timestamped records per user and host, storing historical password data as text. Used during authentication and password reset procedures to enforce policy.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `password_history` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Password_timestamp` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `Password` text COLLATE utf8mb3_bin,\n  PRIMARY KEY (`Host`,`User`,`Password_timestamp` DESC)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Password history for user accounts'\n\n```\n\n----------------------------------------\n\nTITLE: Describing memory_by_user_by_current_bytes Views in MySQL (SQL)\nDESCRIPTION: Shows the table structure for the `memory_by_user_by_current_bytes` view and its underlying `x$memory_by_user_by_current_bytes` table using the DESC command in MySQL. These views summarize current memory usage aggregated by user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_by_user_by_current_bytes;\n+--------------------+---------------+------+-----+---------+-------+\n| Field              | Type          | Null | Key | Default | Extra |\n+--------------------+---------------+------+-----+---------+-------+\n| user               | varchar(32)   | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0) | YES  |     | NULL    |       |\n| current_allocated  | text          | YES  |     | NULL    |       |\n| current_avg_alloc  | text          | YES  |     | NULL    |       |\n| current_max_alloc  | text          | YES  |     | NULL    |       |\n| total_allocated    | text          | YES  |     | NULL    |       |\n+--------------------+---------------+------+-----+---------+-------+\n6 rows in set (0.06 sec)\n\nmysql> desc x$memory_by_user_by_current_bytes;\n+--------------------+---------------+------+-----+---------+-------+\n| Field              | Type          | Null | Key | Default | Extra |\n+--------------------+---------------+------+-----+---------+-------+\n| user               | varchar(32)   | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0) | YES  |     | NULL    |       |\n| current_allocated  | decimal(41,0) | YES  |     | NULL    |       |\n| current_avg_alloc  | decimal(45,4) | NO   |     | 0.0000  |       |\n| current_max_alloc  | bigint(20)    | YES  |     | NULL    |       |\n| total_allocated    | decimal(42,0) | YES  |     | NULL    |       |\n+--------------------+---------------+------+-----+---------+-------+\n6 rows in set (0.12 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Procedures and Functions Table\nDESCRIPTION: Creates the `proc` table to store metadata of stored procedures and functions within the MySQL database. This table includes procedure names, types, security aspects, and additional SQL attributes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL\n```\n\n----------------------------------------\n\nTITLE: Creating Engine Cost Table in SQL\nDESCRIPTION: This snippet creates the engine_cost table for tracking cost metrics associated with different engines in MySQL. Key columns include engine_name, device_type, cost_name, and cost_value. The primary key is a composite of cost_name, engine_name, and device_type. It includes a field for default cost values based on cost_name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `engine_cost` (\n  `engine_name` varchar(64) NOT NULL,\n  `device_type` int NOT NULL,\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  `default_value` float GENERATED ALWAYS AS ((case `cost_name` when _utf8mb3'io_block_read_cost' then 1.0 when _utf8mb3'memory_block_read_cost' then 0.25 else NULL end)) VIRTUAL,\n  PRIMARY KEY (`cost_name`,`engine_name`,`device_type`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server and Percona Tools - INI\nDESCRIPTION: This snippet provides example configuration settings for MySQL server and backup tools in an INI-format file, meant to be used as a my.cnf (or similar) configuration. It includes sections for 'mysqld', 'mysql.server', 'mysqld_safe', and 'xtrabackup', defining data and socket locations, SSL files, InnoDB memory settings, replication, and backup target locations. Path parameters must be adjusted to match the actual server environment, and users should be aware of what each parameter does as some, like innodb_log_file_size, require special procedure for safe changes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/my.cnf-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n####datadir=/var/lib/mysql\ndatadir=/mnt/data/mysql\n####socket=/var/lib/mysql/mysql.sock\nsocket=/mnt/data/mysql/mysql.sock\n# Default to using old password format for compatibility with mysql 3.x\n# clients (those using the mysqlclient10 compatibility package).\nold_passwords=1\n\nssl-key         = /opt/mysql.pdns/.cert/server-key.pem\nssl-cert        = /opt/mysql.pdns/.cert/server-cert.pem\nssl-ca          = /opt/mysql.pdns/.cert/ca-cert.pem\n\ninnodb_buffer_pool_size = 16M\ninnodb_flush_method = O_DIRECT\n## THIS SETTING REQUIRE SPECIAL SHUTDOWN PROCEDURE AND MOVING LOGFILE. DO NOT SET UNLESS YOU UNDERSTAND WHAT YOU ARE DOING!\ninnodb_log_file_size = 64M\ninnodb_log_buffer_size = 1M\ninnodb_flush_log_at_trx_commit = 2\ninnodb_file_per_table = 1\n\nssl = 1\n\nserver-id = 1\nlog-bin=sl1-bin\n\nwsrep_provider_options = \"gcache.size=64M;base_host=10.1.2.102; base_port=4567; cert.log_conflicts=no;etc=etc;\"\n\n[mysql.server]\nuser=mysql\n####basedir=/var/lib\nbasedir=/mnt/data\n\n[mysqld_safe]\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\n\n[mysql]\n\n\n[xtrabackup]\ntarget-dir=/data/backup\n\n```\n\n----------------------------------------\n\nTITLE: Querying and Joining Database Tables - SQL\nDESCRIPTION: These SQL code snippets demonstrate how to select data from single tables ('country', 'city') and perform join operations to combine data from 'city' and 'country' tables. There are no external dependencies required; the queries assume the presence of 'country' and 'city' tables in the target database. The SELECT queries retrieve all columns by default, and the JOIN operations can be expanded with ON clauses as needed, though those clauses are omitted for simplicity and illustrative purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow003-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT country\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT city\n```\n\nLANGUAGE: SQL\nCODE:\n```\nJOIN city\n```\n\nLANGUAGE: SQL\nCODE:\n```\nJOIN country\n```\n\n----------------------------------------\n\nTITLE: Describing ps_check_lost_instrumentation Table\nDESCRIPTION: This SQL command describes the 'ps_check_lost_instrumentation' table, which consists of two fields used to identify and list performance schema variables that may have lost instruments, assisting in effective database performance monitoring.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_46\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc ps_check_lost_instrumentation;\\n+----------------+---------------+------+-----+---------+-------+\\n| Field          | Type          | Null | Key | Default | Extra |\\n+----------------+---------------+------+-----+---------+-------+\\n| variable_name  | varchar(64)   | NO   |     |         |       |\\n| variable_value | varchar(1024) | YES  |     | NULL    |       |\\n+----------------+---------------+------+-----+---------+-------+\\n2 rows in set (0.09 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Time Zone Tables\nDESCRIPTION: Defines the structure for multiple MySQL time zone-related tables, including time_zone, time_zone_leap_second, time_zone_name, time_zone_transition, and time_zone_transition_type. These tables store information about time zones and their properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones'\n\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones'\n\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names'\n\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions'\n\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL DEFAULT '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',\n  `Abbreviation` char(8) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transition types'\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Database Checksum Results\nDESCRIPTION: This snippet shows the output of a database checksum operation. It lists various MySQL tables from different databases and displays statistics including errors, differences, rows, and skipped entries for each table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/default-results-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nif all tables checksummed \nchecksum ...   \nERRORS DIFFS ROWS SKIPPED TABLE\n0 0 0 0 mysql.columns_priv\n0 0 0 0 mysql.db\n0 0 2 0 mysql.engine_cost\n0 0 0 0 mysql.event\n0 0 0 0 mysql.func\n0 0 50 0 mysql.help_category\n0 0 908 0 mysql.help_keyword\n0 0 1803 0 mysql.help_relation\n0 0 659 0 mysql.help_topic\n0 0 0 0 mysql.plugin\n0 0 0 0 mysql.proc\n0 0 0 0 mysql.procs_priv\n0 0 0 0 mysql.proxies_priv\n0 0 6 0 mysql.server_cost\n0 0 0 0 mysql.servers\n0 0 0 0 mysql.tables_priv\n0 0 0 0 mysql.time_zone\n0 0 0 0 mysql.time_zone_leap_second\n0 0 0 0 mysql.time_zone_name\n0 0 0 0 mysql.time_zone_transition\n0 0 0 0 mysql.time_zone_transition_type\n0 0 4 0 mysql.user\n0 0 23 0 percona_test.checksums\n0 0 1 0 percona_test.sentinel\n0 0 200 0 sakila.actor\n0 0 603 0 sakila.address\n0 0 16 0 sakila.category\n0 0 600 0 sakila.city\n0 0 109 0 sakila.country\n0 0 599 0 sakila.customer\n0 0 1000 0 sakila.film\n0 0 5462 0 sakila.film_actor\n0 0 1000 0 sakila.film_category\n0 0 1000 0 sakila.film_text\n0 0 4581 0 sakila.inventory\n0 0 6 0 sakila.language\n0 0 16049 0 sakila.payment\n0 0 16044 0 sakila.rental\n0 0 2 0 sakila.staff\n0 0 2 0 sakila.store\n0 0 6 0 sys.sys_config\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyring Plugin Status for MySQL Encryption\nDESCRIPTION: This text snippet shows the output listing keyring plugins and their status within the MySQL instance, typically queried via SQL. It indicates that the 'keyring_file' plugin is 'ACTIVE', which is essential for enabling certain data-at-rest encryption features in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc003.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n'+--------------+---------------+\n| PLUGIN_NAME  | PLUGIN_STATUS |\n+--------------+---------------+\n| keyring_file | ACTIVE        |\n+--------------+---------------+'\n```\n\n----------------------------------------\n\nTITLE: Defining Language Table within Database using SQL\nDESCRIPTION: The `language` table is defined to store language details, with identifiers and last update timestamps, using InnoDB storage engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying user_summary Table in MySQL Performance Schema\nDESCRIPTION: Example of querying the user_summary view which displays aggregated statistics for each database user, including statement counts, latencies, table scans, file I/O operations, connections, and memory usage metrics formatted for human readability.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_92\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary\\G\n*************************** 1. row ***************************\n                  user: root\n            statements: 4981\n     statement_latency: 26.54 s\n statement_avg_latency: 5.33 ms\n           table_scans: 74\n              file_ios: 7792\n       file_io_latency: 40.08 s\n   current_connections: 1\n     total_connections: 2\n          unique_hosts: 1\n        current_memory: 3.57 MiB\ntotal_memory_allocated: 83.37 MiB\n*************************** 2. row ***************************\n                  user: background\n            statements: 0\n     statement_latency: 0 ps\n statement_avg_latency: 0 ps\n           table_scans: 0\n              file_ios: 1618\n       file_io_latency: 4.78 s\n   current_connections: 21\n     total_connections: 23\n          unique_hosts: 0\n        current_memory: 165.94 MiB\ntotal_memory_allocated: 197.29 MiB\n```\n\n----------------------------------------\n\nTITLE: Database Performance Metrics Data in SQL Insert Format\nDESCRIPTION: Raw performance metric data organized in what appears to be SQL insert or result format. The data contains server IDs, timestamps, metric IDs, metric values, interval information, and collection timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n600,10,0.0,300,300,7256314,1236699915),(8346,1236699600,1,0.0,300,300,7256314,1236699915),(8346,1236699600,2,204.03,300,300,7256314,1236699915),(8346,1236699600,3,59.987,300,300,7256314,1236699915),(8346,1236699600,4,0.074,300,300,7256314,1236699915),(8346,1236699600,5,0.0,300,300,7256314,1236699915),(8346,1236699600,6,20.0,300,300,7256314,1236699915),(8346,1236699600,7,0.0,300,300,7256314,1236699915),(8346,1236699600,8,0.0,300,300,7256314,1236699915),(8348,1236698100,9,0.0,300,299,7256314,1236699915),(8348,1236698100,10,0.0,300,299,7256314,1236699915),(8348,1236698100,1,0.0,300,299,7256314,1236699915),(8348,1236698100,2,203.452,300,299,7256314,1236699915),(8348,1236698100,3,59.986,300,299,7256314,1236699915),(8348,1236698100,4,0.136,300,299,7256314,1236699915),(8348,1236698100,5,0.0,300,299,7256314,1236699915),(8348,1236698100,6,22.0,300,299,7256314,1236699915),(8348,1236698100,7,0.0,300,299,7256314,1236699915),(8348,1236698100,8,0.0,300,299,7256314,1236699915)\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.engine_cost` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.engine_cost` table, used by the query optimizer to store cost model information for different storage engines and device types. It helps estimate the cost of various operations. The table uses the InnoDB storage engine and has `STATS_PERSISTENT=0` set. The primary key is composed of `cost_name`, `engine_name`, and `device_type`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `engine_cost` (\n  `engine_name` varchar(64) NOT NULL,\n  `device_type` int(11) NOT NULL,\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  PRIMARY KEY (`cost_name`,`engine_name`,`device_type`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0\n```\n\n----------------------------------------\n\nTITLE: Querying waits_by_host_by_latency View in MySQL\nDESCRIPTION: Demonstrates a sample query on the waits_by_host_by_latency view, showing wait events for a specific host (hal1) sorted by total latency. This helps identify the most time-consuming wait events per host for performance tuning.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_112\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from waits_by_host_by_latency;\n+------+-----------------------------------------------------+--------+---------------+-------------+-------------+\n| host | event                                               | total  | total_latency | avg_latency | max_latency |\n+------+-----------------------------------------------------+--------+---------------+-------------+-------------+\n| hal1 | wait/io/file/sql/file_parser                        |  13743 | 00:01:00.46   | 4.40 ms     | 231.88 ms   |\n| hal1 | wait/io/file/innodb/innodb_data_file                |   4699 | 3.02 s        | 643.38 us   | 46.93 ms    |\n| hal1 | wait/io/file/sql/FRM                                |  11462 | 2.60 s        | 226.83 us   | 61.72 ms    |\n| hal1 | wait/io/file/myisam/dfile                           |  26776 | 746.70 ms     | 27.89 us    | 308.79 ms   |\n| hal1 | wait/io/file/myisam/kfile                           |   7126 | 462.66 ms     | 64.93 us    | 88.76 ms    |\n| hal1 | wait/io/file/sql/dbopt                              |    179 | 137.58 ms     | 768.59 us   | 15.46 ms    |\n| hal1 | wait/io/file/csv/metadata                           |      8 | 86.60 ms      | 10.82 ms    | 50.32 ms    |\n| hal1 | wait/synch/mutex/mysys/IO_CACHE::append_buffer_lock | 798080 | 66.46 ms      | 82.94 ns    | 161.03 us   |\n| hal1 | wait/io/file/sql/binlog                             |     19 | 49.11 ms      | 2.58 ms     | 9.40 ms     |\n| hal1 | wait/io/file/sql/misc                               |     26 | 22.38 ms      | 860.80 us   | 15.30 ms    |\n| hal1 | wait/io/file/csv/data                               |      4 | 297.46 us     | 74.37 us    | 111.93 us   |\n| hal1 | wait/synch/rwlock/sql/MDL_lock::rwlock              |    944 | 287.86 us     | 304.62 ns   | 874.64 ns   |\n| hal1 | wait/io/file/archive/data                           |      4 | 82.71 us      | 20.68 us    | 40.74 us    |\n| hal1 | wait/synch/mutex/myisam/MYISAM_SHARE::intern_lock   |     60 | 12.21 us      | 203.20 ns   | 512.72 ns   |\n| hal1 | wait/synch/mutex/innodb/trx_mutex                   |     81 | 5.93 us       | 73.14 ns    | 252.59 ns   |\n+------+-----------------------------------------------------+--------+---------------+-------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Checking Default Timing Status Using ps_is_instrument_default_timed in MySQL\nDESCRIPTION: Example showing how to check if an instrument is timed by default using the sys.ps_is_instrument_default_timed() function. The function takes an instrument name parameter and returns 'YES' or 'NO'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_127\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_instrument_default_timed('statement/sql/select');\n+------------------------------------------------------------+\n| sys.ps_is_instrument_default_timed('statement/sql/select') |\n+------------------------------------------------------------+\n| YES                                                        |\n+------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Executing Dynamic SQL with execute_prepared_stmt Procedure in MySQL\nDESCRIPTION: Example of using the sys.execute_prepared_stmt procedure to execute a dynamically created query using a prepared statement. The procedure deallocates the prepared statement after execution, making it suitable for one-off dynamic queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_137\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.execute_prepared_stmt(''SELECT * FROM sys.sys_config'');\n+------------------------+-------+---------------------+--------+\n| variable               | value | set_time            | set_by |\n+------------------------+-------+---------------------+--------+\n| statement_truncate_len | 64    | 2015-06-30 13:06:00 | NULL   |\n+------------------------+-------+---------------------+--------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating category Table in sakila using SQL\nDESCRIPTION: Defines the `category` table within the `sakila` sample database. This table stores film categories (e.g., Action, Comedy, Drama) with a unique ID, name, and last update timestamp. It uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL User Privilege and Attribute Columns in SQL\nDESCRIPTION: This SQL snippet defines multiple columns for a MySQL user table, likely `mysql.user`. It includes numerous privilege columns (e.g., `Select_priv`, `Insert_priv`) using `ENUM('N','Y')` with `utf8mb3` character set, SSL configuration columns, resource limit columns (`max_questions`, `max_updates`), authentication details (`plugin`, `authentication_string`), password management fields (`password_expired`, `password_last_changed`, `password_lifetime`, `Password_reuse_history`), account status (`account_locked`), role privileges (`Create_role_priv`, `Drop_role_priv`), and a JSON column for user attributes. It culminates with defining the primary key on `Host` and `User`, setting table options like engine, charset, row format, and comment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\n`Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int unsigned NOT NULL DEFAULT '0',\n  `max_updates` int unsigned NOT NULL DEFAULT '0',\n  `max_connections` int unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT 'caching_sha2_password',\n  `authentication_string` text COLLATE utf8mb3_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `password_last_changed` timestamp NULL DEFAULT NULL,\n  `password_lifetime` smallint unsigned DEFAULT NULL,\n  `account_locked` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_role_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Password_reuse_history` smallint unsigned DEFAULT NULL,\n  `Password_reuse_time` smallint unsigned DEFAULT NULL,\n  `Password_require_current` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `User_attributes` json DEFAULT NULL,\n  PRIMARY KEY (`Host`,`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Explaining Query Execution Plan in SQL\nDESCRIPTION: This SQL statement uses `EXPLAIN` to request the database's query execution plan for a `SELECT` query retrieving 'col' from 'tbl' where 'id' equals 42. The `/*!50100 PARTITIONS*/` comment is a MySQL version-specific comment, ensuring the `PARTITIONS` keyword is included only for MySQL 5.1.0 and later, useful for analyzing queries on partitioned tables. The `\\G` terminator requests vertical output format, making the `EXPLAIN` output easier to read.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report003.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nselect col from tbl where id=42\\G\n```\n\n----------------------------------------\n\nTITLE: Using Custom Views with MySQL Statement Performance Analyzer\nDESCRIPTION: This example demonstrates how to create and use a custom view with the statement performance analyzer. It shows how to set up a view that orders queries by total execution time and automatically refreshes the analysis every minute using the Linux watch command.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_160\n\nLANGUAGE: SQL\nCODE:\n```\n-- Use a custom view showing the top 10 query sorted by total execution time refreshing the view every minute using\n-- the watch command in Linux.\n\nmysql> CREATE OR REPLACE VIEW mydb.my_statements AS\n    -> SELECT sys.format_statement(DIGEST_TEXT) AS query,\n    ->        SCHEMA_NAME AS db,\n    ->        COUNT_STAR AS exec_count,\n    ->        sys.format_time(SUM_TIMER_WAIT) AS total_latency,\n    ->        sys.format_time(AVG_TIMER_WAIT) AS avg_latency,\n    ->        ROUND(IFNULL(SUM_ROWS_SENT / NULLIF(COUNT_STAR, 0), 0)) AS rows_sent_avg,\n    ->        ROUND(IFNULL(SUM_ROWS_EXAMINED / NULLIF(COUNT_STAR, 0), 0)) AS rows_examined_avg,\n    ->        ROUND(IFNULL(SUM_ROWS_AFFECTED / NULLIF(COUNT_STAR, 0), 0)) AS rows_affected_avg,\n    ->        DIGEST AS digest\n    ->   FROM performance_schema.events_statements_summary_by_digest\n    -> ORDER BY SUM_TIMER_WAIT DESC;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CALL sys.statement_performance_analyzer('create_table', 'mydb.digests_prev', NULL);\nQuery OK, 0 rows affected (0.10 sec)\n\nshell$ watch -n 60 \"mysql sys --table -e \\\"\n> SET @sys.statement_performance_analyzer.view = 'mydb.my_statements';\n> SET @sys.statement_performance_analyzer.limit = 10;\n> CALL statement_performance_analyzer('snapshot', NULL, NULL);\n> CALL statement_performance_analyzer('delta', 'mydb.digests_prev', 'custom');\n> CALL statement_performance_analyzer('save', 'mydb.digests_prev', NULL);\n> \\\"\"\n\nEvery 60.0s: mysql sys --table -e \"                                                                                                   ...  Mon Dec 22 10:58:51 2014\n\n+----------------------------------+\n| Next Output                      |\n+----------------------------------+\n| Top 10 Queries Using Custom View |\n+----------------------------------+\n+-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+\n| query             | db    | exec_count | total_latency | avg_latency | rows_sent_avg | rows_examined_avg | rows_affected_avg | digest                           |\n+-------------------+-------+------------+---------------+-------------+---------------+-------------------+-------------------+----------------------------------+\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Rental Table in SQL\nDESCRIPTION: This SQL snippet defines the `rental` table structure within the Sakila database. It includes columns for rental ID, rental date, inventory ID, customer ID, return date, staff ID, and last update timestamp. It establishes a primary key on `rental_id`, a unique key constraint on the combination of `rental_date`, `inventory_id`, and `customer_id`, and defines foreign key constraints (`fk_rental_staff`, `fk_rental_inventory`, `fk_rental_customer`) referencing the `staff`, `inventory`, and `customer` tables. Indexes are created on foreign key columns, and the table uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-5.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL auto_increment,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime default NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: This snippet defines the `staff` table, containing personal and professional details about staff members. It links to `store` and `address` tables via foreign keys. The table supports auto-incrementing IDs and automatic timestamp updates. It requires a MySQL server supporting InnoDB and UTF-8.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) default NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL default '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) character set utf8 collate utf8_bin default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Aggregated MySQL Process List Summary\nDESCRIPTION: Summarizes the MySQL process list (`SHOW PROCESSLIST`) by aggregating connection counts and execution times, grouped by Command type, User, connecting Host, Database (db), and current State. Each table shows the count, number of currently working threads, sum of execution time, and maximum execution time for each group.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Processlist ################################################\n\n  Command                        COUNT(*) Working SUM(Time) MAX(Time)\n  ------------------------------ -------- ------- --------- ---------\n  Binlog Dump                           1       1    100000    100000\n  Daemon                                1       1    100000    100000\n  Query                                 1       1         0         0\n  Sleep                                 2       0      2500      2500\n\n  User                           COUNT(*) Working SUM(Time) MAX(Time)\n  ------------------------------ -------- ------- --------- ---------\n  event_scheduler                       1       1    100000    100000\n  msandbox                              4       2    100000    100000\n\n  Host                           COUNT(*) Working SUM(Time) MAX(Time)\n  ------------------------------ -------- ------- --------- ---------\n  localhost                             5       3    225000    100000\n\n  db                             COUNT(*) Working SUM(Time) MAX(Time)\n  ------------------------------ -------- ------- --------- ---------\n  NULL                                  5       3    225000    100000\n\n  State                          COUNT(*) Working SUM(Time) MAX(Time)\n  ------------------------------ -------- ------- --------- ---------\n                                        2       0         0         0\n  init                                  1       1         0         0\n  Source has sent all binlog to         1       1    100000    100000\n  Waiting on empty queue                1       1    100000    100000\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.film Table in SQL\nDESCRIPTION: This SQL statement creates the `film` table in the Sakila sample database. It stores details about films, including an auto-incrementing primary key `film_id`, title, description, release year, language IDs, rental details (duration, rate), length, replacement cost, rating (enum), special features (set), and an automatically updated `last_update` timestamp. Indexes are created on `title`, `language_id`, and `original_language_id`. It does not specify foreign key constraints in this snippet but implies relationships to language tables. The table uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year DEFAULT NULL,\n  `language_id` tinyint unsigned NOT NULL,\n  `original_language_id` tinyint unsigned DEFAULT NULL,\n  `rental_duration` tinyint unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n```\n\n----------------------------------------\n\nTITLE: Analyzing SELECT Query Performance on 'bar' Table in MySQL\nDESCRIPTION: This SQL snippet, extracted from a pt-query-digest report (Query 1), shows a SELECT statement retrieving the 'foo' column from the 'bar' table where 'id' equals 2. It's preceded by an EXPLAIN command used to analyze the query execution plan, potentially including partition information. The surrounding report text provides detailed performance metrics (e.g., execution time, lock time, rows sent/examined) and context like associated SHOW TABLE commands. The '\\G' terminator indicates execution formatting typically used in the mysql client.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report01.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT foo FROM bar WHERE id=2\\G\n```\n\n----------------------------------------\n\nTITLE: Dropping Primary Key on `film_text` Table (SQL)\nDESCRIPTION: This SQL command modifies the `film_text` table within the `sakila` database by removing its primary key constraint. The comment ` -- type:primary key` explicitly notes the type of key being dropped. This operation requires the `sakila` database and the `film_text` table with an existing primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow001-report-drop-all.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `sakila`.`film_text` DROP KEY `PRIMARY`; -- type:primary key\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'time_zone_transition_type' Table\nDESCRIPTION: Drops the existing `time_zone_transition_type` table if it exists and then creates it. This table defines the details of each time zone transition type, including the offset from UTC, whether it's Daylight Saving Time (DST), and the time zone abbreviation. It uses the MyISAM engine and the utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Table structure for table `time_zone_transition_type`\n--\n\nDROP TABLE IF EXISTS `time_zone_transition_type`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL DEFAULT '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',\n  `Abbreviation` char(8) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transition types';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Table in MySQL\nDESCRIPTION: Defines a table to manage plugin entries in MySQL, including attributes like name and dynamic library. MyISAM engine and utf8 character set are used. Plugins are uniquely identified by their name, ensuring proper management of extensions to the MySQL system.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='MySQL plugins';\n```\n\n----------------------------------------\n\nTITLE: Establishing the Store Table with Unique Manager Constraint in MySQL SQL\nDESCRIPTION: Sets up the 'store' table which keeps track of individual store locations within the Sakila schema, including manager assignment and address reference. It defines a unique manager constraint, primary and foreign keys, and columns for basic store information. Prerequisites include existing 'staff' and 'address' tables, and required inputs are manager and address IDs; output is a normalized 'store' table using InnoDB and utf8 charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database and Setting Up Initial Configuration\nDESCRIPTION: This snippet creates a MySQL database and sets several session-specific variables to prepare the environment for data operations. It sets character encodings and other SQL modes essential for maintaining data integrity and consistency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8 */;\n/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;\n/*!40103 SET TIME_ZONE='+00:00' */;\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\n\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `mysql` /*!40100 DEFAULT CHARACTER SET latin1 */;\n\nUSE `mysql`;\n```\n\n----------------------------------------\n\nTITLE: Running pt-pg-summary with PostgreSQL Connection Parameters\nDESCRIPTION: Basic usage syntax for pt-pg-summary tool showing how to connect to a PostgreSQL instance. The command accepts a host and optional port parameter, along with various connection and output options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-pg-summary/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-pg-summary [OPTIONS] [HOST:[PORT]]\n```\n\n----------------------------------------\n\nTITLE: MySQL Notable Variables Configuration\nDESCRIPTION: A list of important MySQL configuration variables and their values, showing settings for buffers, logging, and query processing parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# Noteworthy Variables #######################################\n     Auto-Inc Incr/Offset | 1/1\n   default_storage_engine | InnoDB\n               flush_time | 0\n             init_connect | \n                init_file | \n                 sql_mode | \n         join_buffer_size | 128k\n         sort_buffer_size | 2M\n         read_buffer_size | 128k\n     read_rnd_buffer_size | 256k\n       bulk_insert_buffer | 0.00\n      max_heap_table_size | 16M\n           tmp_table_size | 16M\n       max_allowed_packet | 16M\n             thread_stack | 192k\n                      log | OFF\n                log_error | /var/log/mysql/error.log\n             log_warnings | 1\n         log_slow_queries | OFF\nlog_queries_not_using_indexes | OFF\n        log_slave_updates | OFF\n```\n\n----------------------------------------\n\nTITLE: Creating the 'store' Table in SQL\nDESCRIPTION: This SQL snippet defines the `store` table using the InnoDB engine. It stores details about individual store locations. It includes an auto-incrementing `store_id` (primary key), `manager_staff_id`, and `address_id`. A unique key constraint is placed on `manager_staff_id` to ensure each manager manages only one store. Foreign keys link `address_id` to the `address` table and `manager_staff_id` to the `staff` table. An index is created on `address_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Deleting from Table 't' with a Condition in SQL\nDESCRIPTION: This snippet shows a DELETE operation on table 't'. It includes a WHERE clause `WHERE t`, which seems incomplete or represents a placeholder condition based on the table itself. The surrounding text provides a unique identifier `Query_id: 0x7E55D76AA45FD8A6F1FBC364588DC469.1`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow001.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE t\nWHERE t\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.procs_priv` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.procs_priv` table, which stores privileges granted to users specifically for stored procedures and functions. It records the host, database, user, routine name, routine type (FUNCTION or PROCEDURE), grantor, the specific privileges granted (Execute, Alter Routine, Grant), and a timestamp. The table structure is incomplete in the provided snippet, missing the closing parenthesis and engine/charset definition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n```\n\n----------------------------------------\n\nTITLE: Retrieving MySQL Server Status Variables\nDESCRIPTION: This SQL statement retrieves MySQL server status variables. The `\\G` modifier formats the output vertically, which is often preferred for readability when numerous variables are returned. This specific instance is captured within a Percona Toolkit performance analysis report.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report_limit.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS\\G\n```\n\n----------------------------------------\n\nTITLE: Executing INSERT Statement in MySQL\nDESCRIPTION: This SQL snippet executes an `INSERT` statement into the `foo` table within the `db` database. The query (ID 0xD2FAEB9897F588D8471A0C4BD7A4EE34) inserted the value \"bar\". Performance metrics show it was executed twice with an average execution time of 19ms and lock time of 9ms. The `\\G` indicates execution via the mysql client for vertical output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow058.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert `foo` values(\"bar\")\\G\n```\n\n----------------------------------------\n\nTITLE: Table Creation for Reporting and Analysis\nDESCRIPTION: This section includes creation of tables like 'sales_by_film_category' and 'sales_by_store' using the MyISAM engine, optimized for read-heavy scenarios where complex analytical queries are expected. It involves no foreign keys for quicker read speeds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\n\"/*!50001 CREATE TABLE `sales_by_film_category` (\\n  `category` varchar(25),\\n  `total_sales` decimal(27,2)\\n) ENGINE=MyISAM */;\\n...\"\n```\n\nLANGUAGE: SQL\nCODE:\n```\n\"/*!50001 CREATE TABLE `sales_by_store` (\\n  `store` varchar(101),\\n  `manager` varchar(91),\\n  `total_sales` decimal(27,2)\\n) ENGINE=MyISAM */;\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Creating Film Actor Relationship Table in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the film_actor junction table that implements the many-to-many relationship between films and actors. The table uses a composite primary key and includes foreign key constraints to both the film and actor tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.customer Table Schema (SQL)\nDESCRIPTION: This SQL statement creates the `customer` table in the `sakila` database. It stores customer information including `first_name`, `last_name`, `email`, an activity flag `active`, creation date `create_date`, and `last_update` timestamp. It has an auto-incrementing primary key `customer_id` and foreign keys `store_id` and `address_id` referencing the `store` and `address` tables respectively. Indexes are defined on `store_id`, `address_id`, and `last_name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL Database\nDESCRIPTION: SQL definition for the store table in the Sakila database. Defines physical store locations with manager assignments and address information. Includes a unique constraint on manager_staff_id to ensure each staff member manages at most one store.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL schema_index_statistics Example\nDESCRIPTION: Example output from schema_index_statistics showing index usage statistics ordered by latency, providing insights into the most contended indexes and their performance characteristics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_index_statistics limit 5;\n+------------------+-------------+------------+---------------+----------------+---------------+----------------+--------------+----------------+--------------+----------------+\n| table_schema     | table_name  | index_name | rows_selected | select_latency | rows_inserted | insert_latency | rows_updated | update_latency | rows_deleted | delete_latency |\n+------------------+-------------+------------+---------------+----------------+---------------+----------------+--------------+----------------+--------------+----------------+\n| mem              | mysqlserver | PRIMARY    |          6208 | 108.27 ms      |             0 | 0 ps           |         5470 | 1.47 s         |            0 | 0 ps           |\n| mem              | innodb      | PRIMARY    |          4666 | 76.27 ms       |             0 | 0 ps           |         4454 | 571.47 ms      |            0 | 0 ps           |\n| mem              | connection  | PRIMARY    |          1064 | 20.98 ms       |             0 | 0 ps           |         1064 | 457.30 ms      |            0 | 0 ps           |\n| mem              | environment | PRIMARY    |          5566 | 151.17 ms      |             0 | 0 ps           |          694 | 252.57 ms      |            0 | 0 ps           |\n| mem              | querycache  | PRIMARY    |          1698 | 27.99 ms       |             0 | 0 ps           |         1698 | 371.72 ms      |            0 | 0 ps           |\n+------------------+-------------+------------+---------------+----------------+---------------+----------------+--------------+----------------+--------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Insert Trigger for Online Schema Change\nDESCRIPTION: Trigger that copies newly inserted rows from the original table to the new table, maintaining consistency during schema changes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync003.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TRIGGER mk_osc_ins AFTER INSERT ON `osc`.`t` FOR EACH ROW REPLACE INTO `osc`.`__new_t` (`id`, `space col`) VALUES(NEW.`id`, NEW.`space col`)\n```\n\n----------------------------------------\n\nTITLE: Customer Table Definition with Trigger - MySQL\nDESCRIPTION: Defines the customer table with columns for customer details and foreign keys to store and address tables. Includes a trigger to automatically set create_date.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Rewrite Pattern Example\nDESCRIPTION: Example pattern for rewriting database names during replication using replicate-rewrite-db\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_3\n\nLANGUAGE: mysql\nCODE:\n```\nreplicate-rewrite-db=master_db_name->slave_db_name\n```\n\n----------------------------------------\n\nTITLE: Encrypted Tables Report\nDESCRIPTION: SQL query result showing encrypted tables in the database. It displays two encrypted tables (t1 and t2) in the 'test' schema, both configured with the ENCRYPTION='Y' option.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n+--------------+------------+----------------+\n| TABLE_SCHEMA | TABLE_NAME | CREATE_OPTIONS |\n+--------------+------------+----------------+\n| test         | t1         | ENCRYPTION='Y' |\n| test         | t2         | ENCRYPTION='Y' |\n+--------------+------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Creating inventory table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the inventory table, which tracks the stock of films in stores. It includes foreign key constraints referencing the film and store tables, and uses auto-increment for the inventory_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_35\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint unsigned NOT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying Example Statement with Temporary Tables - MySQL sys Table - SQL\nDESCRIPTION: This snippet selects a single row (LIMIT 1) from the statements_with_temp_tables table, showing all fields for one SQL statement that used temporary tables. It demonstrates how to retrieve per-statement information about memory and disk temp table use, latencies, and digests. Requires MySQL sys schema with aggregated performance data. The SQL SELECT outputs each attribute as a formatted key-value pair, ideal for diagnostics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_90\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_temp_tables limit 1\\G\n*************************** 1. row ***************************\n                   query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n                      db: sys\n              exec_count: 2\n           total_latency: 16.75 s\n       memory_tmp_tables: 378\n         disk_tmp_tables: 66\navg_tmp_tables_per_query: 189\n  tmp_tables_to_disk_pct: 17\n              first_seen: 2014-03-07 13:13:41\n               last_seen: 2014-03-07 13:13:48\n                  digest: 54f9bd520f0bbf15db0c2ed93386bec9\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL\nDESCRIPTION: Specifies the creation of the `store` table which references `staff` and `address` tables, assigning each store a unique manager. The structure uses auto-increment for store IDs and maintains data integrity through foreign key constraints. Requires a MySQL server with InnoDB and UTF-8 support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Analyzing SELECT Query on 'bar' Table in MySQL\nDESCRIPTION: This snippet shows the analysis of a SELECT query on the 'bar' table in the 'db2' database. It includes performance metrics, query time distribution, and table status information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-precise-since-until.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: Querying Inventory Table in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'inventory' table in the 'sakila' database, filtering for a specific inventory_id. The query is preceded by a 'use' statement to set the current database context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow005.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse sakila;\nselect * from sakila.inventory where inventory_id=10;\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with JOIN and GROUP BY\nDESCRIPTION: Complex SELECT query performing a self-join on table 't' with GROUP BY and ORDER BY clauses, limited to 10 results. The query calculates counts per group using the column 'a'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect t.a, count(*) from t join t t2 using(a) group by 1 order by 2 desc limit 10\n```\n\n----------------------------------------\n\nTITLE: Retrieving Major MySQL Version with version_major Function\nDESCRIPTION: Example of using the sys.version_major function to obtain the major version number of the MySQL Server. Returns a TINYINT UNSIGNED value representing the major version component.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_133\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT VERSION(), sys.version_major();\n+--------------------------------------+---------------------+\n| VERSION()                            | sys.version_major() |\n+--------------------------------------+---------------------+\n| 5.7.9-enterprise-commercial-advanced | 5                   |\n+--------------------------------------+---------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating mysql.wsrep_streaming_log Table in SQL\nDESCRIPTION: This SQL command creates the `mysql.wsrep_streaming_log` table, part of the Galera Cluster infrastructure. It logs fragments of large transactions (streaming transactions) before they are fully replicated, storing the node UUID, transaction ID, sequence number, flags, and the transaction fragment itself (`longblob`). A composite primary key is defined on `node_uuid`, `trx_id`, and `seqno`. It employs the InnoDB engine and `utf8mb4` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `wsrep_streaming_log` (\n  `node_uuid` char(36) NOT NULL,\n  `trx_id` bigint NOT NULL,\n  `seqno` bigint NOT NULL,\n  `flags` int NOT NULL,\n  `frag` longblob NOT NULL,\n  PRIMARY KEY (`node_uuid`,`trx_id`,`seqno`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Server Cost Table\nDESCRIPTION: Defines the structure for the server_cost table in the mysql schema, which stores cost-related information for query optimization. It includes columns for cost name, value, last update timestamp, and a comment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `server_cost` (\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  PRIMARY KEY (`cost_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.country Table Schema (SQL)\nDESCRIPTION: This SQL snippet defines the `country` table within the `sakila` database. It contains an auto-incrementing primary key `country_id`, the `country` name, and a `last_update` timestamp. This table is referenced by the `city` table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `country` (\n  `country_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL\nDESCRIPTION: Creates rental tracking table with unique constraints and relationships to inventory, customer, and staff tables using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint unsigned NOT NULL,\n  `customer_id` smallint unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Schema Table Statistics Example\nDESCRIPTION: Demonstrates querying the schema_table_statistics view to retrieve performance metrics for a specific table. This example shows I/O statistics and operation counts for the sys_config table in the sys schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_table_statistics\\G\n*************************** 1. row ***************************\n     table_schema: sys\n       table_name: sys_config\n    total_latency: 0 ps\n     rows_fetched: 0\n    fetch_latency: 0 ps\n    rows_inserted: 0\n   insert_latency: 0 ps\n     rows_updated: 0\n   update_latency: 0 ps\n     rows_deleted: 0\n   delete_latency: 0 ps\n io_read_requests: 8\n          io_read: 2.28 KiB\n  io_read_latency: 727.32 us\nio_write_requests: 0\n         io_write: 0 bytes\n io_write_latency: 0 ps\n io_misc_requests: 10\n  io_misc_latency: 126.88 us\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Network Packet Capture Data\nDESCRIPTION: This snippet shows multiple packet captures of MySQL database communication. It includes TCP packets with hexadecimal representations of their contents, timestamps, IP addresses, and ports. The packets represent various MySQL operations including UPDATE statements and their responses.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump032.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-12-07 20:54:54.794787 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 11\n   0x0000:  4508 003f 853b 4000 3f06 447d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2d f9d9 232a 5e2b\n   0x0020:  8010 09e4 f28b 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 0f00 0000 0355 5044 4154 45\n2009-12-07 20:54:54.794819 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 4\n   0x0000:  4508 0038 853f 4000 3f06 4a1d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2e 0529 232a 5e2b\n   0x0020:  8018 09e4 cb32 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 4444 4444\n2009-12-07 20:54:54.795250 IP 127.0.0.1.mysql > 1.2.3.4.35957: tcp 50\n   0x0000:  4508 0066 f4c8 4000 4006 d965 ac14 101f\n   0x0010:  ac14 0414 0cea 8c75 232a 5e2b 1e2e 052d\n   0x0020:  8018 2028 6cb4 0000 0101 080a 482f 087a\n   0x0030:  4814 fa1a 2e00 0001 0001 0002 0028 526f\n   0x0040:  7773 206d 6174 6368 6564 3a20 3120 2043\n   0x0050:  6861 6e67 6564 3a20 3120 2057 6172 6e69\n   0x0060:  6e67 733a 2030                         \n2009-12-07 20:54:54.794819 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 8\n   0x0000:  4508 003c 853f 4000 3f06 4a1d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2e 0529 232a 5e2b\n   0x0020:  8018 09e4 cb32 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 0400 0002 0358 5858\n2009-12-08 20:54:54.794787 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 11\n   0x0000:  4508 003f 853b 4000 3f06 447d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2d f9d9 232a 5e2b\n   0x0020:  8010 09e4 f28b 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 0f00 0000 0355 5044 4154 45\n2009-12-08 20:54:54.794819 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 4\n   0x0000:  4508 0038 853f 4000 3f06 4a1d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2e 0529 232a 5e2b\n   0x0020:  8018 09e4 cb32 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 4444 4444\n2009-12-08 20:54:54.794819 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 4\n   0x0000:  4508 0038 853f 4000 3f06 4a1d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2e 0529 232a 5e2b\n   0x0020:  8018 09e4 cb32 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 4e4e 4e4e\n2009-12-08 20:54:54.795250 IP 127.0.0.1.mysql > 1.2.3.4.35957: tcp 50\n   0x0000:  4508 0066 f4c8 4000 4006 d965 ac14 101f\n   0x0010:  ac14 0414 0cea 8c75 232a 5e2b 1e2e 052d\n   0x0020:  8018 2028 6cb4 0000 0101 080a 482f 087a\n   0x0030:  4814 fa1a 2e00 0001 0001 0002 0028 526f\n   0x0040:  7773 206d 6174 6368 6564 3a20 3120 2043\n   0x0050:  6861 6e67 6564 3a20 3120 2057 6172 6e69\n   0x0060:  6e67 733a 2030                         \n```\n\n----------------------------------------\n\nTITLE: Displaying InnoDB Insert Buffer and Adaptive Hash Index Status (Text)\nDESCRIPTION: This snippet shows the status of the InnoDB Insert Buffer (Ibuf) and the Adaptive Hash Index (AHI). It includes Ibuf size, free list length, segment size, and statistics on inserts, merged records, and merges. For the AHI, it reports the hash table size, node heap buffers, and search rates (hash vs. non-hash searches per second).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 5, seg size 7,\n6753634 inserts, 6753686 merged recs, 5360150 merges\nHash table size 178498087, node heap has 574721 buffer(s)\n201.42 hash searches/s, 757.92 non-hash searches/s\n```\n\n----------------------------------------\n\nTITLE: Examining MySQL Query Plan Output\nDESCRIPTION: This snippet displays the output of a MySQL EXPLAIN statement for a single-row query. It shows the optimizer's plan, indicating a 'SIMPLE' select type on table 't'. The access type is 'const', signifying a very fast lookup using the 'PRIMARY' key to find exactly one matching row ('rows: 1'). The 'ref: const' suggests a constant value was used in the WHERE clause for the primary key lookup.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report025.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# *************************** 1. row ***************************\n#            id: 1\n#   select_type: SIMPLE\n#         table: t\n#    partitions: NULL\n#          type: const\n# possible_keys: PRIMARY\n#           key: PRIMARY\n#       key_len: 4\n#           ref: const\n#          rows: 1\n#         Extra: \n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table Structure in MySQL\nDESCRIPTION: SQL script to create the staff table with various columns including personal information, store relationships and authentication details. The table includes primary and foreign keys with appropriate constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table\nDESCRIPTION: Creates the staff table with columns for employee information including ID, name, contact details, and store assignment. Includes foreign key constraints for store and address relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Counting Rows After Upper Chunk Boundary in SQL\nDESCRIPTION: This SQL query counts rows in the `osc.t2` table that fall strictly after the upper boundary of the current chunk, or are not NULL if the boundary is NULL. It utilizes `FORCE INDEX(\\`c\\`)`, orders by the index key `c`, and inserts the count and chunk metadata into the `percona.checksums` table with a fixed CRC of '0'. Placeholders (`?`) represent metadata and the boundary value. The comment `/*past upper chunk*/` indicates its function in managing boundary conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/oversize-chunks.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `osc`.`t2` FORCE INDEX(`c`) WHERE ((((? IS NULL AND `c` IS NOT NULL) OR (`c` > ?)))) ORDER BY `c` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Loading Data into MySQL Table\nDESCRIPTION: This SQL snippet loads data from a local file ('/tmp/foo.txt') into the 'foo' table. The operation is annotated with metrics such as query time and lock time. The local file must be accessible to the database server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow058.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 5  Schema: db\n# Query_time: 0.000002  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\nLOAD DATA LOCAL INFILE '/tmp/foo.txt' INTO TABLE `foo`;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 5  Schema: db\n# Query_time: 0.000002  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\nload data local infile '/tmp/foo.txt' into table `foo`;\n```\n\n----------------------------------------\n\nTITLE: Preparing SELECT Statement for Table d.t in SQL\nDESCRIPTION: This SQL snippet uses the `PREPARE` command to create a prepared statement. The statement itself selects all columns (`*`) from table `d.t` based on the `name` column equaling \"daniel\". Preparing statements allows the query plan to be generated once and reused multiple times via `EXECUTE`, potentially improving performance for repetitive queries. Requires the table `d.t`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump033.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE select * from d.t where name=\"daniel\"\\G\n```\n\n----------------------------------------\n\nTITLE: Creating sales_by_store View in SQL\nDESCRIPTION: Creates a view that reports sales by store location with manager information. Joins multiple tables including payment, rental, inventory, store, address, city, country, and staff to provide detailed store performance data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 VIEW `sales_by_store` AS select concat(`c`.`city`,_utf8',',`cy`.`country`) AS `store`,concat(`m`.`first_name`,_utf8' ',`m`.`last_name`) AS `manager`,sum(`p`.`amount`) AS `total_sales` from (((((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `store` `s` on((`i`.`store_id` = `s`.`store_id`))) join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` `c` on((`a`.`city_id` = `c`.`city_id`))) join `country` `cy` on((`c`.`country_id` = `cy`.`country_id`))) join `staff` `m` on((`s`.`manager_staff_id` = `m`.`staff_id`))) group by `s`.`store_id` order by `cy`.`country`,`c`.`city`*/\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_file_io_type Table in MySQL\nDESCRIPTION: Illustrates retrieval of data from the host_summary_by_file_io_type table, providing I/O statistics for various event types on each host. Helps diagnose performance issues related to specific file operations. Prerequisite: appropriate database permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from host_summary_by_file_io_type;\n+------------+--------------------------------------+-------+---------------+-------------+\n| host       | event_name                           | total | total_latency | max_latency |\n+------------+--------------------------------------+-------+---------------+-------------+\n| hal1       | wait/io/file/sql/FRM                 |   871 | 168.15 ms     | 18.48 ms    |\n| hal1       | wait/io/file/innodb/innodb_data_file |   173 | 129.56 ms     | 34.09 ms    |\n| hal1       | wait/io/file/innodb/innodb_log_file  |    20 | 77.53 ms      | 60.66 ms    |\n| hal1       | wait/io/file/myisam/dfile            |    40 | 6.54 ms       | 4.58 ms     |\n| hal1       | wait/io/file/mysys/charset           |     3 | 4.79 ms       | 4.71 ms     |\n| hal1       | wait/io/file/myisam/kfile            |    67 | 4.38 ms       | 300.04 us   |\n| hal1       | wait/io/file/sql/ERRMSG              |     5 | 2.72 ms       | 1.69 ms     |\n| hal1       | wait/io/file/sql/pid                 |     3 | 266.30 us     | 185.47 us   |\n| hal1       | wait/io/file/sql/casetest            |     5 | 246.81 us     | 150.19 us   |\n| hal1       | wait/io/file/sql/global_ddl_log      |     2 | 21.24 us      | 18.59 us    |\n| hal2       | wait/io/file/sql/file_parser         |  1422 | 4.80 s        | 135.14 ms   |\n| hal2       | wait/io/file/sql/FRM                 |   865 | 85.82 ms      | 9.81 ms     |\n| hal2       | wait/io/file/myisam/kfile            |  1073 | 37.14 ms      | 15.79 ms    |\n| hal2       | wait/io/file/myisam/dfile            |  2991 | 25.53 ms      | 5.25 ms     |\n| hal2       | wait/io/file/sql/dbopt               |    20 | 1.07 ms       | 153.07 us   |\n| hal2       | wait/io/file/sql/misc                |     4 | 59.71 us      | 33.75 us    |\n| hal2       | wait/io/file/archive/data            |     1 | 13.91 us      | 13.91 us    |\n+------------+--------------------------------------+-------+---------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Actor Table\nDESCRIPTION: This SQL statement creates the 'actor' table in the Sakila sample database. It defines columns for actor information including an auto-incrementing ID, first name, last name, and last update timestamp. The table uses InnoDB engine with UTF-8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Selecting Lost Instrumentation Variables\nDESCRIPTION: The query selects all entries from the 'ps_check_lost_instrumentation' table, potentially revealing performance schema file handles and instances that have been lost. This is vital for understanding the limitations of performance monitoring capabilities in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from ps_check_lost_instrumentation;\\n+----------------------------------------+----------------+\\n| variable_name                          | variable_value |\\n+----------------------------------------+----------------+\\n| Performance_schema_file_handles_lost   | 101223         |\\n| Performance_schema_file_instances_lost | 1231           |\\n+----------------------------------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Creating default_roles Table - MySQL SQL\nDESCRIPTION: Creates the `default_roles` table to record the default roles for MySQL users. This supports the role-based privilege framework, storing associations between users and their automatically assigned roles. Dependencies are on MySQL's role management subsystems, inputs are user and role mapping actions, and outputs are used for role resolution at session start.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `default_roles` (\n  `HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `DEFAULT_ROLE_HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '%',\n  `DEFAULT_ROLE_USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`HOST`,`USER`,`DEFAULT_ROLE_HOST`,`DEFAULT_ROLE_USER`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Default roles'\n\n```\n\n----------------------------------------\n\nTITLE: Describing Memory Usage by User Tables - MySQL SQL\nDESCRIPTION: These structure descriptions show the columns of both 'memory_by_user_by_current_bytes' and its underlying 'x$' table. This is essential for understanding how memory statistics are summarized per user, distinguishing display value formatting and instrumentation granularity. Dependencies include the sys schema and Performance Schema enabled; columns vary in formats and types (e.g., text vs decimal).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_by_user_by_current_bytes;\n+--------------------+---------------+------+-----+---------+-------+\n| Field              | Type          | Null | Key | Default | Extra |\n+--------------------+---------------+------+-----+---------+-------+\n| user               | varchar(32)   | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0) | YES  |     | NULL    |       |\n| current_allocated  | text          | YES  |     | NULL    |       |\n| current_avg_alloc  | text          | YES  |     | NULL    |       |\n| current_max_alloc  | text          | YES  |     | NULL    |       |\n| total_allocated    | text          | YES  |     | NULL    |       |\n+--------------------+---------------+------+-----+---------+-------+\n6 rows in set (0.06 sec)\n\nmysql> desc x$memory_by_user_by_current_bytes;\n+--------------------+---------------+------+-----+---------+-------+\n| Field              | Type          | Null | Key | Default | Extra |\n+--------------------+---------------+------+-----+---------+-------+\n| user               | varchar(32)   | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0) | YES  |     | NULL    |       |\n| current_allocated  | decimal(41,0) | YES  |     | NULL    |       |\n| current_avg_alloc  | decimal(45,4) | NO   |     | 0.0000  |       |\n| current_max_alloc  | bigint(20)    | YES  |     | NULL    |       |\n| total_allocated    | decimal(42,0) | YES  |     | NULL    |       |\n+--------------------+---------------+------+-----+---------+-------+\n6 rows in set (0.12 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Table\nDESCRIPTION: Defines the structure for the mysql.user table, which stores user accounts and their global privileges. It includes fields for host, user, password, various privilege flags, SSL/X509 information, and resource limits.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8_bin DEFAULT '',\n  `authentication_string` text COLLATE utf8_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Querying with Index Merge Intersection Strategy in MySQL\nDESCRIPTION: Demonstrates using an index merge with intersection of key1 and key2 indexes. The EXPLAIN shows the optimizer using both indexes together to efficiently retrieve matching rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nexplain select key1,key2 from t1 where key1=100 and key2=100;\nselect key1,key2 from t1 where key1=100 and key2=100;\n```\n\n----------------------------------------\n\nTITLE: Defining Columns Privileges Table in MySQL\nDESCRIPTION: Establishes the structure of the 'columns_priv' table in MySQL, detailing columns for host, database, user, table, and column names, along with associated privileges. The table is designed to store specific column-level privileges for users, ensuring restricted access to database objects.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `columns_priv`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Resetting Performance Schema Configuration in MySQL\nDESCRIPTION: Stored procedure that resets Performance Schema setup to default settings. Takes a boolean parameter to control verbosity of output during execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_148\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_reset_to_default(true)\\G\nmysql> CALL sys.ps_setup_reset_to_default(false)G\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.ndb_binlog_index` Table in SQL\nDESCRIPTION: Defines the `ndb_binlog_index` table in the `mysql` database. Used specifically with MySQL NDB Cluster, this table maps binary log positions and filenames to NDB Cluster epochs, facilitating point-in-time recovery and replication.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint unsigned NOT NULL,\n  `inserts` int unsigned NOT NULL,\n  `updates` int unsigned NOT NULL,\n  `deletes` int unsigned NOT NULL,\n  `schemaops` int unsigned NOT NULL,\n  `orig_server_id` int unsigned NOT NULL,\n  `orig_epoch` bigint unsigned NOT NULL,\n  `gci` int unsigned NOT NULL,\n  `next_position` bigint unsigned NOT NULL,\n  `next_file` varchar(255) NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=latin1 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Binary Logging Configuration\nDESCRIPTION: Shows the binary logging settings, including the number of binary logs, their size, and related configuration options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp006.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Binary Logging #############################################\n                  Binlogs | 1\n               Zero-Sized | 0\n               Total Size | 1.4M\n            binlog_format | ROW\n         expire_logs_days | 0\n              sync_binlog | 0\n                server_id | 12345\n             binlog_do_db | \n         binlog_ignore_db | \n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View customer_list\nDESCRIPTION: Creates or replaces the MySQL view `customer_list` in the `sakila` database. This view joins the `customer`, `address`, `city`, and `country` tables to present a formatted list of customers, including their ID, full name, address details, phone number, city, country, active status ('active' or empty string), and store ID. It sets `SQL SECURITY DEFINER`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `customer_list`*/;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `customer_list` AS select `cu`.`customer_id` AS `ID`,concat(`cu`.`first_name`,_utf8' ',`cu`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,if(`cu`.`active`,_utf8'active',_utf8'') AS `notes`,`cu`.`store_id` AS `SID` from (((`customer` `cu` join `address` `a` on((`cu`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Creating Host Privileges Table\nDESCRIPTION: Creates a table to specify host-specific database privileges, associating host and database with various privilege options. It uses MyISAM engine and utf8 character set. A primary key composed of Host and Db ensures records are unique per combination.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges';\n```\n\n----------------------------------------\n\nTITLE: Defining Language Table in MySQL\nDESCRIPTION: This snippet defines the 'language' table, which stores supported languages used elsewhere in the Sakila schema. It uses an auto-incremented primary key, ensures the 'name' is not null, and automatically updates 'last_update' on modification. No foreign keys or references are present in this table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View actor_info\nDESCRIPTION: Creates or replaces the MySQL view `actor_info` in the `sakila` database. This view provides actor details (ID, first name, last name) along with a semicolon-separated list (`film_info`) of film categories and the titles of films within each category that the actor has appeared in. It uses `GROUP_CONCAT` for aggregation and sets `SQL SECURITY INVOKER`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `actor_info`*/;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY INVOKER */\n/*!50001 VIEW `actor_info` AS select `a`.`actor_id` AS `actor_id`,`a`.`first_name` AS `first_name`,`a`.`last_name` AS `last_name`,group_concat(distinct concat(`c`.`name`,': ',(select group_concat(`f`.`title` order by `f`.`title` ASC separator ', ') from ((`film` `f` join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `film_actor` `fa` on((`f`.`film_id` = `fa`.`film_id`))) where ((`fc`.`category_id` = `c`.`category_id`) and (`fa`.`actor_id` = `a`.`actor_id`)))) order by `c`.`name` ASC separator '; ') AS `film_info` from (((`actor` `a` left join `film_actor` `fa` on((`a`.`actor_id` = `fa`.`actor_id`))) left join `film_category` `fc` on((`fa`.`film_id` = `fc`.`film_id`))) left join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `a`.`actor_id`,`a`.`first_name`,`a`.`last_name` */;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Identifying MongoDB Summary Tool Used\nDESCRIPTION: This snippet indicates that the `pt-mongodb-summary` tool is used to generate a summary report for Percona Server for MongoDB, which is then included in the collected data (specifically in `summary.txt`). Requires `pt-mongodb-summary` to be installed and in PATH.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"pt-mongodb-summary\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Partition Information\nDESCRIPTION: Lists all disk devices and their sizes, including logical volumes (dm devices), NVMe drives, and SATA drives.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nDevice       Type      Start        End               Size\n============ ==== ========== ========== ==================\n/dev/dm-0    Disk                            3032246910976\n/dev/dm-1    Disk                              37580963840\n/dev/dm-2    Disk                              10737418240\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel Table in Percona Test Schema\nDESCRIPTION: The `sentinel` table is a simple table storing identifiers and ping values, helpful for monitoring or testing. Built using the InnoDB engine and latin1 charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `sentinel` (\n  `id` int(11) NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the store table that represents physical store locations. The table maintains a unique constraint on store manager, and includes foreign key relationships to both the staff table (for manager) and address table (for location).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Revoking Privileges from User in MySQL SQL\nDESCRIPTION: This snippet revokes specific privileges, including INSERT and SELECT on individual columns and USAGE on all schemas, from the user 'sally'@'%'. It ensures the user loses the ability to perform certain actions on the `sakila.city` and `test.t` tables, as well as any non-specified access. Dependencies include an existing MySQL database server and the correct privilege to alter user grants. Inputs are the explicit user and privileges, while outputs are the reduction of accessible actions for that user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Revoke statements for 'sally'@'%'\nREVOKE INSERT (city) ON `sakila`.`city` FROM 'sally'@'%';\nREVOKE SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` FROM 'sally'@'%';\nREVOKE SELECT (city_id) ON `sakila`.`city` FROM 'sally'@'%';\nREVOKE USAGE ON *.* FROM 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Updating groupId in MBMessage Table Using Subquery in MySQL\nDESCRIPTION: This SQL UPDATE query modifies the groupId field in the mybbl_MBMessage table, setting it to the groupId value retrieved from a subquery that selects from the Group_ table where name is 'Guest'. The slow query log indicates this query took 10 seconds to execute.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow050.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE mybbl_MBMessage SET groupId = (select groupId from Group_ where name = 'Guest');\n```\n\n----------------------------------------\n\nTITLE: Creating get_customer_balance Function in MySQL\nDESCRIPTION: This function calculates the balance for a given customer, considering rental fees, overage fees, and payments up to a specified date.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION `get_customer_balance`(p_customer_id INT, p_effective_date DATETIME) RETURNS decimal(5,2)\n    READS SQL DATA\n    DETERMINISTIC\nBEGIN\n  DECLARE v_rentfees DECIMAL(5,2); \n  DECLARE v_overfees INTEGER;      \n  DECLARE v_payments DECIMAL(5,2); \n\n  SELECT IFNULL(SUM(film.rental_rate),0) INTO v_rentfees\n    FROM film, inventory, rental\n    WHERE film.film_id = inventory.film_id\n      AND inventory.inventory_id = rental.inventory_id\n      AND rental.rental_date <= p_effective_date\n      AND rental.customer_id = p_customer_id;\n\n  SELECT IFNULL(SUM(IF((TO_DAYS(rental.return_date) - TO_DAYS(rental.rental_date)) > film.rental_duration,\n        ((TO_DAYS(rental.return_date) - TO_DAYS(rental.rental_date)) - film.rental_duration),0)),0) INTO v_overfees\n    FROM rental, inventory, film\n    WHERE film.film_id = inventory.film_id\n      AND inventory.inventory_id = rental.inventory_id\n      AND rental.rental_date <= p_effective_date\n      AND rental.customer_id = p_customer_id;\n\n  SELECT IFNULL(SUM(payment.amount),0) INTO v_payments\n    FROM payment\n    WHERE payment.payment_date <= p_effective_date\n    AND payment.customer_id = p_customer_id;\n\n  RETURN v_rentfees + v_overfees - v_payments;\nEND\n```\n\n----------------------------------------\n\nTITLE: Defining User Summary by Statement Latency Table Structure\nDESCRIPTION: SQL table definitions for user_summary_by_statement_latency and x$user_summary_by_statement_latency views showing overall statement execution statistics per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_92\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_statement_latency;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| user          | varchar(32)   | YES  |     | NULL    |       |\n| total         | decimal(42,0) | YES  |     | NULL    |       |\n| total_latency | text          | YES  |     | NULL    |       |\n```\n\n----------------------------------------\n\nTITLE: Using --primary-key-only Option with pt-archiver (CLI)\nDESCRIPTION: Refers to the `--primary-key-only` command-line option for the `pt-archiver` tool. This option restricts archiving operations based only on the primary key. A bug was fixed in v3.0.13 ensuring this option is respected even when a non-primary key index is specified via the `--source` argument's `i` part.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-13.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--primary-key-only\n```\n\n----------------------------------------\n\nTITLE: Creating sales_by_film_category View in SQL\nDESCRIPTION: Creates a view that calculates total sales by film category. Joins payment, rental, inventory, film, film_category, and category tables to aggregate sales amounts for each category.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 VIEW `sales_by_film_category` AS select `c`.`name` AS `category`,sum(`p`.`amount`) AS `total_sales` from (((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `film` `f` on((`i`.`film_id` = `f`.`film_id`))) join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `c`.`name` order by sum(`p`.`amount`) desc*/\n```\n\n----------------------------------------\n\nTITLE: Update Trigger for Online Schema Change\nDESCRIPTION: Trigger that replaces rows in the new table when rows are updated in the original table, handling columns with spaces in their names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync003.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TRIGGER mk_osc_upd AFTER UPDATE ON `osc`.`t` FOR EACH ROW REPLACE INTO `osc`.`__new_t` (`id`, `space col`) VALUES (NEW.`id`, NEW.`space col`)\n```\n\n----------------------------------------\n\nTITLE: Creating proc Table in SQL\nDESCRIPTION: Creates the 'proc' table that holds information about stored procedures and functions in MySQL. With fields like db, name, and type, it allows for detailed attributes of procedures, facilitating their management and execution, while encompassing a wide range of SQL modes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table in MySQL\nDESCRIPTION: This SQL script creates the 'film' table with various columns for storing film details such as title, description, rental duration, rental rate, etc. It also defines foreign key constraints and triggers for data consistency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film` (\n  `rental_duration` tinyint(3) unsigned NOT NULL default '3',\n  `rental_rate` decimal(4,2) NOT NULL default '4.99',\n  `length` smallint(5) unsigned default NULL,\n  `replacement_cost` decimal(5,2) NOT NULL default '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') default 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Foreign Key Constraint in MySQL\nDESCRIPTION: This SQL statement removes the duplicate foreign key constraint 'fk_2' from the 'issue_331_t2' table in the 'issue_331' database. The constraint is identified as a duplicate of 'fk_1', both referencing the same column 't1_id' in the 'issue_331_t1' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/issue_331.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `issue_331`.`issue_331_t2` DROP FOREIGN KEY `fk_2`;\n```\n\n----------------------------------------\n\nTITLE: Querying Session SSL Status in MySQL - SQL\nDESCRIPTION: Demonstrates how to retrieve SSL details for MySQL sessions via the session_ssl_status view. The snippet shows a standard SELECT query and the expected result set, detailing thread ID, SSL version, cipher, and session reuse status. No external dependencies are needed beyond access to a MySQL server with the sys schema enabled; output includes columns such as thread_id, ssl_version, ssl_cipher, and ssl_sessions_reused; input is an SQL query, output is a result set of current SSL connection attributes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_79\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from session_ssl_status;\n+-----------+-------------+--------------------+---------------------+\n| thread_id | ssl_version | ssl_cipher         | ssl_sessions_reused |\n+-----------+-------------+--------------------+---------------------+\n|        26 | TLSv1       | DHE-RSA-AES256-SHA | 0                   |\n|        27 | TLSv1       | DHE-RSA-AES256-SHA | 0                   |\n|        28 | TLSv1       | DHE-RSA-AES256-SHA | 0                   |\n+-----------+-------------+--------------------+---------------------+\n3 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating db Table - MySQL SQL\nDESCRIPTION: Specifies the `db` table schema used to manage database-level privileges in MySQL. Each privilege is stored as an ENUM, per user, host, and database. Important for access control enforcement at the database scope, with all relevant privileges mapped via indexed columns for efficient querying. No external dependencies beyond default MySQL privilege system.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`,`Db`),\n  KEY `User` (`User`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Database privileges'\n\n```\n\n----------------------------------------\n\nTITLE: Dropping Non-Unique Index on `film_text` Table (SQL)\nDESCRIPTION: This SQL command modifies the `film_text` table within the `sakila` database by removing the non-unique index named `idx_title_description`. The comment ` -- type:non-unique` indicates the type of index being dropped. This operation requires the `sakila` database and the `film_text` table with an existing index named `idx_title_description`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow001-report-drop-all.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `sakila`.`film_text` DROP KEY `idx_title_description`; -- type:non-unique\n```\n\n----------------------------------------\n\nTITLE: Creating System Configuration Table in MySQL Database\nDESCRIPTION: SQL definition for the sys_config table in the system database. Used to store configuration variables and settings for the MySQL system schema. Tracks when and by whom configuration changes were made.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sys_config` (\n  `variable` varchar(128) NOT NULL,\n  `value` varchar(128) DEFAULT NULL,\n  `set_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `set_by` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`variable`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Server Cost Table\nDESCRIPTION: Defines schema for server cost parameters used by the query optimizer including disk/memory temp table costs and key comparison costs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `server_cost` (\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  `default_value` float GENERATED ALWAYS AS ((case `cost_name` when _utf8mb3'disk_temptable_create_cost' then 20.0 when _utf8mb3'disk_temptable_row_cost' then 0.5 when _utf8mb3'key_compare_cost' then 0.05 when _utf8mb3'memory_temptable_create_cost' then 1.0 when _utf8mb3'memory_temptable_row_cost' then 0.1 when _utf8mb3'row_evaluate_cost' then 0.1 else NULL end)) VIRTUAL,\n  PRIMARY KEY (`cost_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'func' User Defined Function Table - SQL\nDESCRIPTION: Defines the 'func' table, which saves metadata about user-defined functions, including their name, return type, dynamic library location, and function/aggregate status. The primary key is on function name, and the 'type' column distinguishes ordinary functions from aggregates. The table requires MyISAM, uses UTF-8, and stores function metadata rather than code.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Creating ndb_binlog_index Table - MySQL Cluster Binlog Indexing - SQL\nDESCRIPTION: Specifies the ndb_binlog_index table for tracking mapping between NDB cluster epochs and MySQL binary log file positions. Utilizes primary key on epoch, storing counts for inserts, updates, deletes, and schema operations for each log entry. Relies on Latin1 charset and is critical for replication and recovery in clustered environments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL\nDESCRIPTION: This SQL script creates the 'rental' table to track film rentals. It includes foreign key constraints to maintain referential integrity with the 'inventory', 'customer', and 'staff' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL auto_increment,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime default NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating Default Roles Table in SQL\nDESCRIPTION: This SQL snippet creates the default_roles table used for assigning default roles to users. It features four key columns including HOST, USER, DEFAULT_ROLE_HOST, and DEFAULT_ROLE_USER. The primary key is a composite of HOST, USER, DEFAULT_ROLE_HOST, and DEFAULT_ROLE_USER. Dependencies: MySQL database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `default_roles` (\n  `HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `DEFAULT_ROLE_HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '%',\n  `DEFAULT_ROLE_USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`HOST`,`USER`,`DEFAULT_ROLE_HOST`,`DEFAULT_ROLE_USER`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Default roles'\n```\n\n----------------------------------------\n\nTITLE: Querying TreeCode and AdditionalContent Tables in MySQL\nDESCRIPTION: This SQL query selects data from the treeCODE table, joining it with treeADDITIONALCONTENT table twice to filter results based on specific additional content types and values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='CCF' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='DEL')))\n```\n\n----------------------------------------\n\nTITLE: Inserting Article Text into Table\nDESCRIPTION: SQL insert statement to add a news article text into a table named 't'. The article content covers Federal Reserve policy changes and market reactions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump019-arg.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into t values ('NEW YORK \\(Reuters\\) - U.S. government bonds fell while stocks extended gains...')\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement in SQL (Query 1 Context)\nDESCRIPTION: Displays the SQL statement required to recreate the specified table 't' in database 'd'. This helps in understanding the table's structure, including columns, indexes, and constraints, often used for analysis or schema replication. The \\G terminator is for vertical output in command-line clients.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `d`.`t`\\G\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure and Fulltext Index for 'film_text' - SQL\nDESCRIPTION: Defines the 'film_text' table with fields for 'film_id', 'title', and 'description', and creates a FULLTEXT index on 'title' and 'description' to support full-text search. The table is intended for storing textual metadata for films. Prerequisite: MyISAM storage engine with fulltext capability in MySQL. Input: film data; output: indexed film descriptions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Selecting treeCODE Rows with Nested Filtered Subqueries - SQL\nDESCRIPTION: Selects various columns from the 'treeCODE' table for code IDs that pass a nested filtering condition in 'treeADDITIONALCONTENT'. Subqueries ensure the 'treecodeid' matches content with two specific 'additionaltypeid' and 'value' constraints, e.g., type 4 equals 'ABAN' and type 3 equals 'MET2'. Useful for extracting room or code metadata based on hierarchical tag criteria. Requires 'treeCODE' and 'treeADDITIONALCONTENT' tables, and is optimized for environments with appropriate indexing on treecodeid and additionaltypeid columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='ABAN' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='MET2')))\n```\n\n----------------------------------------\n\nTITLE: Sakila Sample Database Schema\nDESCRIPTION: CREATE TABLE statements for the Sakila sample database including tables for actors, addresses, categories, cities, countries and customers. Demonstrates relational database design with foreign keys and indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Sales by Store View\nDESCRIPTION: Creates a view showing total sales by store location, including store manager details and geographical information through address relationships\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_store` AS select concat(`c`.`city`,_utf8',',`cy`.`country`) AS `store`,concat(`m`.`first_name`,_utf8' ',`m`.`last_name`) AS `manager`,sum(`p`.`amount`) AS `total_sales` from (((((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `store` `s` on((`i`.`store_id` = `s`.`store_id`))) join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` `c` on((`a`.`city_id` = `c`.`city_id`))) join `country` `cy` on((`c`.`country_id` = `cy`.`country_id`))) join `staff` `m` on((`s`.`manager_staff_id` = `m`.`staff_id`))) group by `s`.`store_id` order by `cy`.`country`,`c`.`city` */\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variable for Percona Toolkit in Perl\nDESCRIPTION: This snippet demonstrates how to enable verbose debugging output for all Maatkit tools by setting the PTDEBUG environment variable to 1 before running the tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_02.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nPTDEBUG=1 mk-....\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.film_category Table in SQL\nDESCRIPTION: This SQL snippet defines the structure for the `film_category` table, which serves as a junction table linking films and categories. It uses the InnoDB engine and specifies a composite primary key (`film_id`, `category_id`) and foreign key constraints referencing the `category` and `film` tables with ON UPDATE CASCADE behavior.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint unsigned NOT NULL,\n  `category_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying the MySQL metrics view\nDESCRIPTION: Demonstrates a sample query of the metrics view showing output including Global Status, InnoDB Metrics, Performance Schema data, and System Time. The view unifies metrics from different sources into a consistent format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT * FROM metrics;\n+-----------------------------------------------+-------------------------...+--------------------------------------+---------+\n| Variable_name                                 | Variable_value          ...| Type                                 | Enabled |\n+-----------------------------------------------+-------------------------...+--------------------------------------+---------+\n| aborted_clients                               | 0                       ...| Global Status                        | YES     |\n| aborted_connects                              | 0                       ...| Global Status                        | YES     |\n| binlog_cache_disk_use                         | 0                       ...| Global Status                        | YES     |\n| binlog_cache_use                              | 0                       ...| Global Status                        | YES     |\n| binlog_stmt_cache_disk_use                    | 0                       ...| Global Status                        | YES     |\n| binlog_stmt_cache_use                         | 0                       ...| Global Status                        | YES     |\n| bytes_received                                | 217081                  ...| Global Status                        | YES     |\n| bytes_sent                                    | 27257                   ...| Global Status                        | YES     |\n...\n| innodb_rwlock_x_os_waits                      | 0                       ...| InnoDB Metrics - server              | YES     |\n| innodb_rwlock_x_spin_rounds                   | 2723                    ...| InnoDB Metrics - server              | YES     |\n| innodb_rwlock_x_spin_waits                    | 1                       ...| InnoDB Metrics - server              | YES     |\n| trx_active_transactions                       | 0                       ...| InnoDB Metrics - transaction         | NO      |\n...\n| trx_rseg_current_size                         | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| trx_rseg_history_len                          | 4                       ...| InnoDB Metrics - transaction         | YES     |\n| trx_rw_commits                                | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| trx_undo_slots_cached                         | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| trx_undo_slots_used                           | 0                       ...| InnoDB Metrics - transaction         | NO      |\n| memory_current_allocated                      | 138244216               ...| Performance Schema                   | PARTIAL |\n| memory_total_allocated                        | 138244216               ...| Performance Schema                   | PARTIAL |\n| NOW()                                         | 2015-05-31 13:27:50.382 ...| System Time                          | YES     |\n| UNIX_TIMESTAMP()                              | 1433042870.382          ...| System Time                          | YES     |\n+-----------------------------------------------+-------------------------...+--------------------------------------+---------+\n412 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating the `host` Table - MySQL Host-Level Privileges - SQL\nDESCRIPTION: Defines the `host` table for tracking privileges specifically granted to hosts at the host/database level, merged with db privileges. Includes columns for all standard MySQL privileges as enumeration fields, keyed by Host and Db. Dependencies include MyISAM engine and case-sensitive UTF8 binary collation. Privileges are input via internal GRANT statements; output is used for privilege checking routines.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  PRIMARY KEY  (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges'\n```\n\n----------------------------------------\n\nTITLE: Extracting Schema Name from File Path in MySQL\nDESCRIPTION: Demonstrates using the extract_schema_from_file_name function, which takes a file path and extracts the database schema name from it. This is helpful when working with Performance Schema IO statistics to determine which database a particular file belongs to.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_106\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.extract_schema_from_file_name('/var/lib/mysql/employees/employee.ibd');\n+----------------------------------------------------------------------------+\n| sys.extract_schema_from_file_name('/var/lib/mysql/employees/employee.ibd') |\n+----------------------------------------------------------------------------+\n| employees                                                                  |\n+----------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View for Store Sales Report\nDESCRIPTION: Creates a view that aggregates sales data by store location and manager, joining payment, rental, inventory, store, address, city, country and staff tables. Calculates total sales per store.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 VIEW `sales_by_store` AS select concat(`c`.`city`,_utf8',',`cy`.`country`) AS `store`,concat(`m`.`first_name`,_utf8' ',`m`.`last_name`) AS `manager`,sum(`p`.`amount`) AS `total_sales` from (((((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `store` `s` on((`i`.`store_id` = `s`.`store_id`))) join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` `c` on((`a`.`city_id` = `c`.`city_id`))) join `country` `cy` on((`c`.`country_id` = `cy`.`country_id`))) join `staff` `m` on((`s`.`manager_staff_id` = `m`.`staff_id`))) group by `s`.`store_id` order by `cy`.`country`,`c`.`city` */\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the film table that stores movie information including title, description, rental details, and categorization. The table includes foreign key constraints to language tables and uses specialized data types for various film attributes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating nicer_but_slower_film_list View in SQL\nDESCRIPTION: Creates a view that provides a formatted list of films with actor names. Joins multiple tables including category, film, film_actor, and actor to provide comprehensive film information with properly capitalized actor names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 VIEW `nicer_but_slower_film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(concat(ucase(substr(`actor`.`first_name`,1,1)),lcase(substr(`actor`.`first_name`,2,length(`actor`.`first_name`))),_utf8' ',concat(ucase(substr(`actor`.`last_name`,1,1)),lcase(substr(`actor`.`last_name`,2,length(`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id`*/\n```\n\n----------------------------------------\n\nTITLE: Preparing to Create MySQL View sales_by_store\nDESCRIPTION: This snippet prepares for the creation or replacement of the MySQL view `sales_by_store` in the `sakila` database. It includes dropping the view if it exists, setting session variables for character sets and collation (likely to ensure consistency during view creation and then restore previous settings), and specifying the creation algorithm, definer, and `SQL SECURITY DEFINER` clause. The actual `SELECT` statement defining the view's logic is missing in this specific snippet but would typically follow to calculate total sales per store.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `sales_by_store`*/;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n```\n\n----------------------------------------\n\nTITLE: Creating Table language With Auto Increment Primary Key - MySQL SQL\nDESCRIPTION: Defines the 'language' table with columns for language_id (auto-incremented), name, and last_update. Used to store language options for films or actors, requiring no external dependencies. The primary key is language_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_topic` Table in SQL\nDESCRIPTION: Defines the `help_topic` table in the `mysql` database. This table stores the actual content for the server's help system, including the topic ID, name, category ID, description, example usage, and a relevant URL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: MySQL Security Configuration\nDESCRIPTION: A summary of the security settings for this MySQL instance, showing user account information and password encryption settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Security ###################################################\n                    Users | 6 users, 0 anon, 1 w/o pw, 1 old pw\n            Old Passwords | OFF\n```\n\n----------------------------------------\n\nTITLE: Creating Film_Category Table Schema in MySQL\nDESCRIPTION: SQL definition for the 'film_category' junction table in the Sakila database that establishes the many-to-many relationship between films and categories. The table uses a composite primary key and includes foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining the 'time_zone_name' Table for Time Zone Names - MySQL - SQL\nDESCRIPTION: Establishes the 'time_zone_name' table mapping textual names to unique time zone identifiers for MySQL's time zone support. Each record stores a human-readable name and its corresponding numeric ID. Used for efficient time zone lookups and conversions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names'\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.store Table in SQL\nDESCRIPTION: This SQL snippet defines the `store` table using the InnoDB engine. It stores information about store locations, including references to the manager (via `manager_staff_id`) and the store's address (`address_id`). Foreign key constraints (`fk_store_staff`, `fk_store_address`) link to the `staff` and `address` tables respectively, with ON UPDATE CASCADE. It has an auto-incrementing primary key (`store_id`), a unique key on the manager ID, and an index on the address ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint unsigned NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Defining the 'time_zone_leap_second' Table for Leap Seconds - MySQL - SQL\nDESCRIPTION: Creates the 'time_zone_leap_second' table, which records specific leap second corrections associated with transition timestamps. Used by MySQL's temporal subsystem for precise time calculations. Table is indexed solely by transition time, ensuring uniqueness of each entry.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY  (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones'\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Data by ID in MySQL\nDESCRIPTION: This SQL query selects all columns from the users table for a specific user ID. It's being executed multiple times with different user IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users WHERE id='2388374'\n```\n\n----------------------------------------\n\nTITLE: Displaying disabled Performance Schema instruments with sys.ps_setup_show_disabled_instruments\nDESCRIPTION: This procedure shows all currently disabled Performance Schema instruments, with no parameters required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_140\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_disabled_instruments();\n```\n\n----------------------------------------\n\nTITLE: LVM Volume Configuration\nDESCRIPTION: Shows Logical Volume Management (LVM) configuration including volume names, sizes, and attributes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_006.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nLV     VG       Attr       LSize    Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\nroot   vgubuntu -wi-ao---- <930,37g                                                    \nswap_1 vgubuntu -wi-ao----  976,00m\n```\n\n----------------------------------------\n\nTITLE: Querying Client Features with Feature ID 1 in MySQL\nDESCRIPTION: SQL query that retrieves client IDs where feature ID 1 is enabled. It joins client, client_feature, and edition_feature tables to ensure the feature is enabled at both client and edition levels.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT client.id\nFROM `client`, client_feature, edition_feature\nWHERE ( client.id = client_feature.client_id )\nAND ( client_feature.feature_id = '1' )\nAND ( edition_feature.client_edition_id = client.client_edition_id )\nAND ( edition_feature.feature_id = client_feature.feature_id )\nAND ( client_feature.is_enabled = 1 )\n```\n\n----------------------------------------\n\nTITLE: Querying One Table in MySQL\nDESCRIPTION: Repeated SELECT queries on 'one' table with consistent query time of 10 seconds. Uses parameterized query for id field with no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow049.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT one FROM one WHERE id=?;\n```\n\n----------------------------------------\n\nTITLE: Formatting SQL Statements for Display in MySQL\nDESCRIPTION: Shows the format_statement function that truncates and formats normalized SQL statements for better readability. The function limits statement length (by default to 64 characters) to make output more digestible when analyzing Performance Schema statement data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_110\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.format_statement(digest_text)\n    ->   FROM performance_schema.events_statements_summary_by_digest\n    ->  ORDER by sum_timer_wait DESC limit 5;\n+-------------------------------------------------------------------+\n| sys.format_statement(digest_text)                                 |\n+-------------------------------------------------------------------+\n| CREATE SQL SECURITY INVOKER VI ... KE ? AND `variable_value` > ?  |\n| CREATE SQL SECURITY INVOKER VI ... ait` IS NOT NULL , `esc` . ... |\n| CREATE SQL SECURITY INVOKER VI ... ait` IS NOT NULL , `sys` . ... |\n| CREATE SQL SECURITY INVOKER VI ...  , `compressed_size` ) ) DESC  |\n| CREATE SQL SECURITY INVOKER VI ... LIKE ? ORDER BY `timer_start`  |\n+-------------------------------------------------------------------+\n5 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying memory_by_user_by_current_bytes in MySQL (SQL)\nDESCRIPTION: Demonstrates querying the `memory_by_user_by_current_bytes` view to retrieve memory usage statistics grouped by user. The query displays user, current counts, and various allocation metrics. NULL users represent background threads.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from memory_by_user_by_current_bytes;\n+------+--------------------+-------------------+-------------------+-------------------+-----------------+\n| user | current_count_used | current_allocated | current_avg_alloc | current_max_alloc | total_allocated |\n+------+--------------------+-------------------+-------------------+-------------------+-----------------+\n| root |               1401 | 1.09 MiB          | 815 bytes         | 334.97 KiB        | 42.73 MiB       |\n| mark |                201 | 496.08 KiB        | 2.47 KiB          | 334.97 KiB        | 5.50 MiB        |\n+------+--------------------+-------------------+-------------------+-------------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Table Index Information\nDESCRIPTION: SQL query to obtain detailed information about indexes in database tables, including index names, types, column positions, and other attributes from the INFORMATION_SCHEMA.STATISTICS table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_json_report.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TABLE_SCHEMA, TABLE_NAME, NON_UNIQUE, INDEX_SCHEMA, INDEX_NAME, SEQ_IN_INDEX, COLUMN_NAME, COLLATION, CARDINALITY, SUB_PART, PACKED, NULLABLE, INDEX_TYPE, COMMENT FROM INFORMATION_SCHEMA.STATISTICS WHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql')\n```\n\n----------------------------------------\n\nTITLE: Tracing Thread in MySQL Performance Schema\nDESCRIPTION: This procedure dumps all data within Performance Schema for an instrumented thread to create a DOT formatted graph file. It requires the SUPER privilege and allows customization of runtime, interval, and debugging options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_156\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_trace_thread(25, CONCAT('/tmp/stack-', REPLACE(NOW(), ' ', '-'), '.dot'), NULL, NULL, TRUE, TRUE, TRUE);\n+-------------------+\n| summary           |\n+-------------------+\n| Disabled 1 thread |\n+-------------------+\n1 row in set (0.00 sec)\n\n+---------------------------------------------+\n| Info                                        |\n+---------------------------------------------+\n| Data collection starting for THREAD_ID = 25 |\n+---------------------------------------------+\n1 row in set (0.03 sec)\n\n+-----------------------------------------------------------+\n| Info                                                      |\n+-----------------------------------------------------------+\n| Stack trace written to /tmp/stack-2014-02-16-21:18:41.dot |\n+-----------------------------------------------------------+\n1 row in set (60.07 sec)\n\n+-------------------------------------------------------------------+\n| Convert to PDF                                                    |\n+-------------------------------------------------------------------+\n| dot -Tpdf -o /tmp/stack_25.pdf /tmp/stack-2014-02-16-21:18:41.dot |\n+-------------------------------------------------------------------+\n1 row in set (60.07 sec)\n\n+-------------------------------------------------------------------+\n| Convert to PNG                                                    |\n+-------------------------------------------------------------------+\n| dot -Tpng -o /tmp/stack_25.png /tmp/stack-2014-02-16-21:18:41.dot |\n+-------------------------------------------------------------------+\n1 row in set (60.07 sec)\n\n+------------------+\n| summary          |\n+------------------+\n| Enabled 1 thread |\n+------------------+\n1 row in set (60.32 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL sys_config Table Structure\nDESCRIPTION: Database table structure for storing sys schema configuration options, using InnoDB engine with triggers for user tracking.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n+----------+--------------+------+-----+-------------------+-----------------------------+\n| Field    | Type         | Null | Key | Default           | Extra                       |\n+----------+--------------+------+-----+-------------------+-----------------------------+\n| variable | varchar(128) | NO   | PRI | NULL              |                             |\n| value    | varchar(128) | YES  |     | NULL              |                             |\n| set_time | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |\n| set_by   | varchar(128) | YES  |     | NULL              |                             |\n+----------+--------------+------+-----+-------------------+-----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Database Privileges Table in MySQL\nDESCRIPTION: Defines a table to store database-level permissions for different users across hosts and databases in MySQL. Utilizes MyISAM engine and utf8 character set, with fields for various types of privileges such as Select, Insert, and Update. The primary key consists of Host, Db, and User, ensuring unique privilege records.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges';\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL help_keyword Table in SQL\nDESCRIPTION: This SQL statement defines the `help_keyword` table within the `mysql` database. It stores the keywords used in the server-side help system, associating a unique ID (`help_keyword_id`) with each keyword name (`name`). The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: MySQL IO Global Wait by Bytes Table Structure\nDESCRIPTION: Schema definitions for io_global_by_wait_by_bytes and x$io_global_by_wait_by_bytes tables that track IO statistics based on bytes transferred. Shows field definitions including data types and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc io_global_by_wait_by_bytes;\n+-----------------+---------------------+------+-----+---------+-------+\n| Field           | Type                | Null | Key | Default | Extra |\n+-----------------+---------------------+------+-----+---------+-------+\n| event_name      | varchar(128)        | YES  |     | NULL    |       |\n| total           | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency   | text                | YES  |     | NULL    |       |\n| min_latency     | text                | YES  |     | NULL    |       |\n| avg_latency     | text                | YES  |     | NULL    |       |\n| max_latency     | text                | YES  |     | NULL    |       |\n| count_read      | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_read      | text                | YES  |     | NULL    |       |\n| avg_read        | text                | YES  |     | NULL    |       |\n| count_write     | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_written   | text                | YES  |     | NULL    |       |\n| avg_written     | text                | YES  |     | NULL    |       |\n| total_requested | text                | YES  |     | NULL    |       |\n+-----------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: INSERT with ON DUPLICATE KEY UPDATE Operation\nDESCRIPTION: Inserts values into film_actor table with ON DUPLICATE KEY UPDATE clause to increment actor_id when duplicate key is found. Query executed in 2s with 167.35k average query size.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow024.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `film_actor` VALUES (1,1,'2006-02-15 10:05:03') /*... omitted ...*/ON duplicate KEY UPDATE actor_id=actor_id+1\n```\n\n----------------------------------------\n\nTITLE: Creating Time Zone Name Table in MySQL\nDESCRIPTION: Creates the time_zone_name table that maps time zone names to their corresponding IDs. Uses MyISAM engine with UTF-8 character set and establishes a primary key on the Name field.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.rental Table in SQL\nDESCRIPTION: This SQL snippet defines the `rental` table using the InnoDB engine to track film rentals by customers. It links to the `inventory`, `customer`, and `staff` tables via foreign keys (`fk_rental_inventory`, `fk_rental_customer`, `fk_rental_staff`) with ON UPDATE CASCADE behavior. It includes an auto-incrementing primary key (`rental_id`), several indexes, and a unique key constraint on `rental_date`, `inventory_id`, and `customer_id` to prevent duplicate rentals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint unsigned NOT NULL,\n  `customer_id` smallint unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating columns_priv Table - MySQL SQL\nDESCRIPTION: Defines the structure for the `columns_priv` table used in MySQL to store per-column privilege information. Dependencies include MySQL's privilege grant system. The table includes keys for Host, User, Db, Table_name, and Column_name, and stores column-specific privileges in a SET field. Inputs are privilege assignment operations; outputs are row records mapping users/hosts to column-level permissions. Constraints ensure uniqueness and proper indexing for privilege lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`User`,`Db`,`Table_name`,`Column_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Column privileges'\n\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Cluster Summary Output Format\nDESCRIPTION: Example output from pt-pg-summary showing cluster information including database port, data directory, tablespaces, database sizes, cache hit ratios, wait events, connected users, performance counters, table access statistics, and instance settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-pg-summary/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n##### --- Database Port and Data_Directory --- ####\n+----------------------+----------------------------------------------------+\n|         Name         |                      Setting                       |\n+----------------------+----------------------------------------------------+\n| data_directory       | /var/lib/postgresql/data                           |\n+----------------------+----------------------------------------------------+\n\n##### --- List of Tablespaces ---- ######\n+----------------------+----------------------+----------------------------------------------------+\n|         Name         |         Owner        |               Location                             |\n+----------------------+----------------------+----------------------------------------------------+\n| pg_default           | postgres             |                                                    |\n| pg_global            | postgres             |                                                    |\n+----------------------+----------------------+----------------------------------------------------+\n\n\n##### --- Cluster Information --- ####\n+------------------------------------------------------------------------------------------------------+\n Usename        : postgres\n Time           : 2020-04-21 13:38:22.770077 +0000 UTC\n Client Address : 172.19.0.1\n Client Hostname:\n Version        : PostgreSQL 9.6.17 on x86_64-pc-linux-gnu (Debian 9.6.17-2.pgdg90+1), compiled by\n Started        : 2020-04-21 13:36:59.909175 +0000 UTC\n Is Slave       : false\n+------------------------------------------------------------------------------------------------------+\n\n##### --- Databases --- ####\n+----------------------+------------+\n|       Dat Name       |    Size    |\n+----------------------+------------+\n| postgres             |    7071 kB |\n| template1            |    6961 kB |\n| template0            |    6961 kB |\n+----------------------+------------+\n\n##### --- Index Cache Hit Ratios --- ####\n\nDatabase: postgres\n+----------------------+------------+\n|      Index Name      |    Ratio   |\n+----------------------+------------+\n| index hit rate       |      0.00  |\n+----------------------+------------+\n\n##### --- Table Cache Hit Ratios --- ####\nDatabase: postgres\n+----------------------+------------+\n|      Index Name      |    Ratio   |\n+----------------------+------------+\n| cache hit rate       |       0.00 |\n+----------------------+------------+\n\n##### --- List of Wait_events for the entire Cluster - all-databases --- ####\nNo stats available\n\n##### --- List of users and client_addr or client_hostname connected to --all-databases --- ####\n+----------------------+------------+---------+----------------------+---------+\n|   Wait Event Type    |        Client        |         State        |  Count  |\n+----------------------+------------+---------+----------------------+---------+\n| postgres             | 172.19.0.1/32        | active               |       1 |\n+----------------------+------------+---------+----------------------+---------+\n\n##### --- Counters diff after 10 seconds --- ####\n\n+----------------------+-------------+------------+--------------+-------------+------------+-------------+------------+-------------+------------+------------+-----------+-----------+-----------+------------+\n| Database             | Numbackends | XactCommit | XactRollback | BlksRead    | BlksHit    | TupReturned | TupFetched | TupInserted | TupUpdated | TupDeleted | Conflicts | TempFiles | TempBytes | Deadlocks  |\n+----------------------+-------------+------------+--------------+-------------+------------+-------------+------------+-------------+------------+------------+-----------+-----------+-----------+------------+\n| postgres             |       0     |       0    |       0      |       0     |       0    |       0     |       0    |       0     |       0    |       0    |       0   |       0   |       0   |       0    |\n| template0            |       0     |       0    |       0      |       0     |       0    |       0     |       0    |       0     |       0    |       0    |       0   |       0   |       0   |       0    |\n| template1            |       0     |       0    |       0      |       0     |       0    |       0     |       0    |       0     |       0    |       0    |       0   |       0   |       0   |       0    |\n+----------------------+-------------+------------+--------------+-------------+------------+-------------+------------+-------------+------------+------------+-----------+-----------+-----------+------------+\n\n##### --- Table access per database --- ####\nDatabase: postgres\n+----------------------------------------------------+------+--------------------------------+---------+\n|                       Relname                      | Kind |             Datname            |  Count  |\n+----------------------------------------------------+------+--------------------------------+---------+\n| pg_class                                           |   r  | postgres                       |       1 |\n| pg_stat_database                                   |   v  | postgres                       |       1 |\n| pg_locks                                           |   v  | postgres                       |       1 |\n| pg_class_tblspc_relfilenode_index                  |   i  | postgres                       |       1 |\n| pg_class_relname_nsp_index                         |   i  | postgres                       |       1 |\n| pg_class_oid_index                                 |   i  | postgres                       |       1 |\n+----------------------------------------------------+------+--------------------------------+---------+\n\n##### --- Instance settings --- ####\n                      Setting                                            Value\nallow_system_table_mods                       : off\napplication_name                              :\narchive_command                               : (disabled)\narchive_mode                                  : off\narchive_timeout                               : 0\narray_nulls                                   : on\nauthentication_timeout                        : 60\nautovacuum                                    : on\nautovacuum_analyze_scale_factor               : 0.1\nautovacuum_analyze_threshold                  : 50\nautovacuum_freeze_max_age                     : 200000000\nautovacuum_max_workers                        : 3\nautovacuum_multixact_freeze_max_age           : 400000000\nautovacuum_naptime                            : 60\nautovacuum_vacuum_cost_delay                  : 20\nautovacuum_vacuum_cost_limit                  : -1\nautovacuum_vacuum_scale_factor                : 0.2\nautovacuum_vacuum_threshold                   : 50\nautovacuum_work_mem                           : -1\nbackend_flush_after                           : 0\nbackslash_quote                               : safe_encoding\nbgwriter_delay                                : 200\nbgwriter_flush_after                          : 64\nbgwriter_lru_maxpages                         : 100\nbgwriter_lru_multiplier                       : 2\nblock_size                                    : 8192\nbonjour                                       : off\nbonjour_name                                  :\nbytea_output                                  : hex\ncheck_function_bodies                         : on\ncheckpoint_completion_target                  : 0.5\ncheckpoint_flush_after                        : 32\ncheckpoint_timeout                            : 300\ncheckpoint_warning                            : 30\nclient_encoding                               : UTF8\nclient_min_messages                           : notice\ncluster_name                                  :\ncommit_delay                                  : 0\n```\n\n----------------------------------------\n\nTITLE: Defining Lower Chunk Boundary for Checksum Comparison in SQL\nDESCRIPTION: This SQL WHERE clause condition defines the lower boundary for chunk 10 of the `issue_560.buddy_list` table during a checksum operation. It selects rows where the `player_id` is greater than or equal to '451'. The output indicates a CRC difference was found within this data chunk (and potentially subsequent ones if this is the last boundary defined).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_560_output_1.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n`player_id` >= '451'\n```\n\n----------------------------------------\n\nTITLE: Defining Store Table with Manager Reference in SQL\nDESCRIPTION: Defines the `store` table to outline stores with a primary key and a unique constraint on the manager field, linked to the `staff` table for manager details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Proxies Privileges Table\nDESCRIPTION: Defines the structure for the proxies_priv table in the mysql schema, which stores user proxy privileges. It includes columns for host, user, proxied host and user, grant status, grantor, and timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_user` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `With_grant` tinyint(1) NOT NULL DEFAULT '0',\n  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`User`,`Proxied_host`,`Proxied_user`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User proxy privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.global_grants` Table in SQL\nDESCRIPTION: Defines the `global_grants` table in the `mysql` database. This table stores dynamic global privileges granted to users, indicating which users (USER, HOST) have specific privileges (PRIV) globally and whether they have the grant option (WITH_GRANT_OPTION).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `global_grants` (\n  `USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `PRIV` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `WITH_GRANT_OPTION` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`USER`,`HOST`,`PRIV`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Extended global grants'\n```\n\n----------------------------------------\n\nTITLE: Analyzing SELECT Query on 'foo' Table in MySQL\nDESCRIPTION: This snippet presents the analysis of a SELECT query on the 'foo' table. It provides performance metrics, query time distribution, and table status information for the query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-precise-since-until.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Defining Address Table in Sakila Schema\nDESCRIPTION: Stores address information for entities like customers or stores with foreign key constraints on city_id, ensuring referential integrity within the city table. Requires InnoDB engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'help_category' Metadata Table - SQL\nDESCRIPTION: Defines the 'help_category' table, used for storing categories in MySQL's built-in help system. Each entry includes a category ID, name, optional parent category, and an associated URL. Enforces a primary key on help_category_id and a unique constraint on name, using the MyISAM engine and UTF-8 encoding.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Schema Consumers in MySQL\nDESCRIPTION: Disables consumers within Performance Schema matching a given pattern. The procedure takes a LIKE pattern as input and returns a summary of the number of consumers disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_129\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_consumer('');\n+--------------------------+\n| summary                  |\n+--------------------------+\n| Disabled 15 consumers    |\n+--------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_consumer('stage');\n+------------------------+\n| summary                |\n+------------------------+\n| Disabled 3 consumers   |\n+------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Granting Specific Column and Usage Privileges in SQL\nDESCRIPTION: This SQL block grants specific column-level INSERT and SELECT privileges on the `sakila`.`city` and `test`.`t` tables, plus the general USAGE privilege, to the user 'sally'@'%'. It requires the user and tables/databases to exist. These grants mirror the privileges previously revoked in the preceding block.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nGRANT INSERT (city) ON `sakila`.`city` TO 'sally'@'%';\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\nGRANT SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: MySQL Self-Join Query with Grouping and Ordering\nDESCRIPTION: A SQL query that performs a self-join on table 't' using the 'a' column, then groups by that column and counts occurrences. Results are ordered by count in descending order and limited to 10 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output-5.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect t.a, count(*) from t join t t2 using(a) group by 1 order by 2 desc limit 10\n```\n\n----------------------------------------\n\nTITLE: Setting Autocommit and Executing Show Status in MySQL\nDESCRIPTION: This snippet shows a series of MySQL commands including setting autocommit, using a specific database, and executing a SHOW STATUS command. It also includes metadata about query execution time and rows affected.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow013.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET autocommit=1;\nuse test;\nSHOW STATUS;\n```\n\n----------------------------------------\n\nTITLE: Selecting treeCODE with Filtered Subqueries for Custom Tag Matching - SQL\nDESCRIPTION: Extracts 'treeCODE' column details based on two-level matching in 'treeADDITIONALCONTENT', with type 4 = 'PNA' and type 3 = 'TRY', supporting complex tag-based retrievals found in inventory or categorization systems. Applies to environments where code semantics are extended dynamically via auxiliary metadata tables. Assumes the presence of necessary indexes and referential integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='PNA' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='TRY')))\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.actor Table Schema (SQL)\nDESCRIPTION: This SQL statement creates the `actor` table in the `sakila` database. It stores information about actors, including an auto-incrementing primary key `actor_id`, `first_name`, `last_name`, and a `last_update` timestamp. An index is created on the `last_name` column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Extracting Schema Name from File Path in MySQL\nDESCRIPTION: This function extracts the schema name from a given file path. It's useful when working with Performance Schema IO statistics data. The function assumes the table data file is within a specified database directory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_116\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.extract_schema_from_file_name('/var/lib/mysql/employees/employee.ibd');\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Table Creation Statement\nDESCRIPTION: This command retrieves the CREATE TABLE statement for the 'foo' table in the 'db1' database. It's useful for examining the table's structure, including columns, indexes, and other properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-event-1h.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `db1`.`foo`\n```\n\n----------------------------------------\n\nTITLE: Defining sys_config Table in MySQL\nDESCRIPTION: Defines the structure of the sys_config table, which contains configuration options for the sys schema in MySQL. Important fields include variable, value, set_time, and set_by, with triggers for maintaining user modifications.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n+----------+--------------+------+-----+-------------------+-----------------------------+\n| Field    | Type         | Null | Key | Default           | Extra                       |\n+----------+--------------+------+-----+-------------------+-----------------------------+\n| variable | varchar(128) | NO   | PRI | NULL              |                             |\n| value    | varchar(128) | YES  |     | NULL              |                             |\n| set_time | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |\n| set_by   | varchar(128) | YES  |     | NULL              |                             |\n+----------+--------------+------+-----+-------------------+-----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Three-Key Index Merge Intersection in MySQL\nDESCRIPTION: Demonstrates a three-key index merge using intersection of key1, key2, and key3. The EXPLAIN shows all three indexes are used together to find matching rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nexplain select key1,key2,key3 from t1 where key1=100 and key2=100 and key3=100;\nselect key1,key2,key3 from t1 where key1=100 and key2=100 and key3=100;\n```\n\n----------------------------------------\n\nTITLE: Querying memory_global_total in MySQL (SQL)\nDESCRIPTION: Demonstrates querying the `memory_global_total` view to retrieve the single value representing the total allocated memory across the entire MySQL server instance. This provides a quick summary of overall server memory usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_40\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from memory_global_total;\n+-----------------+\n| total_allocated |\n+-----------------+\n| 458.44 MiB      |\n+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Summarizing InnoDB Mutex and RW-Lock Spin/Wait Statistics (Text)\nDESCRIPTION: This text snippet provides aggregate statistics for mutex and read-write (RW) lock contention within InnoDB. It shows the total number of spin waits, spin rounds, and OS waits for mutexes, shared RW-locks, and exclusive RW-locks. Additionally, it calculates the average spin rounds per wait for each lock type, offering insight into the efficiency of spin locking versus yielding to the OS scheduler.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nMutex spin waits 217635758, rounds 189376110, OS waits 1270716\nRW-shared spins 32034008, OS waits 7368549; RW-excl spins 4795269, OS waits 3653871\nSpin rounds per wait: 0.87 mutex, 9.69 RW-shared, 40.94 RW-excl\n```\n\n----------------------------------------\n\nTITLE: Creating the `store` Table in SQL\nDESCRIPTION: Defines the SQL structure for the `store` table in the Sakila database using an InnoDB engine. This table represents individual store locations, linking each store to its managing staff member and its physical address. It includes foreign keys referencing the `staff` (for the manager) and `address` tables, a primary key (`store_id`), a unique key constraint on the manager ID, and an index on the address ID. The table uses UTF8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment-5.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying Global Memory Usage Breakdown - MySQL SQL\nDESCRIPTION: This snippet executes a 'select *' on 'memory_global_by_current_bytes', yielding an allocation-type breakdown of global memory usage. Requires MySQL sys schema with appropriate permissions. Output includes event names and both current and high watermark allocations, helping users pinpoint which system parts actively consume the most memory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_40\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from memory_global_by_current_bytes;\n+----------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+\n| event_name                             | current_count | current_alloc | current_avg_alloc | high_count | high_alloc | high_avg_alloc |\n+----------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+\n| memory/sql/TABLE_SHARE::mem_root       |           269 | 568.21 KiB    | 2.11 KiB          |        339 | 706.04 KiB | 2.08 KiB       |\n| memory/sql/TABLE                       |           214 | 366.56 KiB    | 1.71 KiB          |        245 | 481.13 KiB | 1.96 KiB       |\n| memory/sql/sp_head::main_mem_root      |            32 | 334.97 KiB    | 10.47 KiB         |        421 | 9.73 MiB   | 23.66 KiB      |\n| memory/sql/Filesort_buffer::sort_keys  |             1 | 255.89 KiB    | 255.89 KiB        |          1 | 256.00 KiB | 256.00 KiB     |\n| memory/mysys/array_buffer              |            82 | 121.66 KiB    | 1.48 KiB          |       1124 | 852.55 KiB | 777 bytes      |\n...\n+----------------------------------------+---------------+---------------+-------------------+------------+------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Describing schema_index_statistics Structure - SQL\nDESCRIPTION: This snippet shows the structure of the 'schema_index_statistics' table as output by MySQL's 'desc' command, detailing all columns and their types. It is useful for DBAs wishing to inspect lock contention and workload stats on indexes across schemas. Fields record counts and latencies for select, insert, update, and delete operations per index.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_52\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_index_statistics;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| table_schema   | varchar(64)         | YES  |     | NULL    |       |\n| table_name     | varchar(64)         | YES  |     | NULL    |       |\n| index_name     | varchar(64)         | YES  |     | NULL    |       |\n| rows_selected  | bigint(20) unsigned | NO   |     | NULL    |       |\n| select_latency | text                | YES  |     | NULL    |       |\n| rows_inserted  | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency | text                | YES  |     | NULL    |       |\n| rows_updated   | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency | text                | YES  |     | NULL    |       |\n| rows_deleted   | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency | text                | YES  |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n11 rows in set (0.17 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing Schema Table Lock Waits Structure in MySQL\nDESCRIPTION: Shows the structure of schema_table_lock_waits table which tracks information about waiting and blocking threads in MySQL table locks, including query details, lock types, and kill commands.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_65\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_table_lock_waits;\n+------------------------------+---------------------+------+-----+---------+-------+\n| Field                        | Type                | Null | Key | Default | Extra |\n+------------------------------+---------------------+------+-----+---------+-------+\n| object_schema                | varchar(64)         | YES  |     | NULL    |       |\n| object_name                  | varchar(64)         | YES  |     | NULL    |       |\n| waiting_thread_id            | bigint(20) unsigned | NO   |     | NULL    |       |\n| waiting_pid                  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_account              | text                | YES  |     | NULL    |       |\n| waiting_lock_type            | varchar(32)         | NO   |     | NULL    |       |\n| waiting_lock_duration        | varchar(32)         | NO   |     | NULL    |       |\n| waiting_query                | longtext            | YES  |     | NULL    |       |\n| waiting_query_secs           | bigint(20)          | YES  |     | NULL    |       |\n| waiting_query_rows_affected  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_query_rows_examined  | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_thread_id           | bigint(20) unsigned | NO   |     | NULL    |       |\n| blocking_pid                 | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_account             | text                | YES  |     | NULL    |       |\n| blocking_lock_type           | varchar(32)         | NO   |     | NULL    |       |\n| blocking_lock_duration       | varchar(32)         | NO   |     | NULL    |       |\n| sql_kill_blocking_query      | varchar(31)         | YES  |     | NULL    |       |\n| sql_kill_blocking_connection | varchar(25)         | YES  |     | NULL    |       |\n+------------------------------+---------------------+------+-----+---------+-------+\n18 rows in set (0.15 sec)\n```\n\n----------------------------------------\n\nTITLE: Granting Privileges Using SQL - SQL\nDESCRIPTION: Grants INSERT and SELECT privileges on specific columns of tables, as well as general USAGE privilege, to user 'sally' accessible from any host. Requires appropriate privileges to run GRANT commands on the MySQL server, and the user 'sally' must already exist or be provisioned. Each statement targets a specific schema, table, and set of columns, authorizing 'sally' for the listed actions; limitations include column-specific access and only allowing the privileges explicitly stated by each command.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Grants for 'sally'@'%'\nGRANT INSERT (city) ON `sakila`.`city` TO 'sally'@'%';\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\nGRANT SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Creating servers Table in mysql using SQL\nDESCRIPTION: Defines the `servers` table within the `mysql` database. This table stores configuration details for federated servers, allowing the MySQL server to connect to and query tables on other remote MySQL instances. It uses the InnoDB engine with statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='MySQL Foreign Servers table'\n```\n\n----------------------------------------\n\nTITLE: Creating Language Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the language table that stores available film languages. This simple table stores language names and uses a compact char field for efficient storage with an auto-incrementing primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Table in MySQL with Full-Text Search\nDESCRIPTION: SQL CREATE TABLE statement for the film_text table that stores film titles and descriptions specifically for full-text searching. Uses the MyISAM engine for full-text index support and includes a combined full-text index on title and description fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating event Table - MySQL Event Scheduler Metadata - SQL\nDESCRIPTION: Defines the event table used by MySQL to manage scheduled events and their metadata. Requires MySQL with utf8 collation, supporting various scheduling fields, SQL operating modes, and event body storage. Captures attributes such as schedule, interval, SQL mode, definer, and execution details. Intended for internal management of event-based triggers within the db.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Querying bar table - Simple SELECT\nDESCRIPTION: Basic SELECT query on bar table in db2 database, executed with SQL_SLAVE user. Query executed twice with 12us execution time per call, no lock time and no rows examined or returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30m.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: Querying Latest File Operations\nDESCRIPTION: Example query showing recent file operations including thread, file path, latency, operation type and bytes requested.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from latest_file_io limit 5;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Privileges Table\nDESCRIPTION: Creates the mysql.user table that stores user accounts and their global privileges. Includes columns for authentication, SSL settings, and various privilege flags.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Password` char(41) character set latin1 collate latin1_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Reload_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Shutdown_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Process_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `File_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_db_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Super_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_slave_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_client_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_user_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') character set utf8 NOT NULL default '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL default '0',\n  `max_updates` int(11) unsigned NOT NULL default '0',\n  `max_connections` int(11) unsigned NOT NULL default '0',\n  `max_user_connections` int(11) unsigned NOT NULL default '0',\n  PRIMARY KEY  (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating the 'rental' Table in SQL\nDESCRIPTION: This SQL statement defines the `rental` table structure within the Sakila database schema. It stores information about movie rentals, including rental ID, dates, inventory ID, customer ID, return date, and staff ID. A primary key is set on `rental_id`, and a unique constraint ensures no duplicate rentals for the same customer, inventory, and date. Foreign keys link to `staff`, `inventory`, and `customer` tables, with cascading updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL auto_increment,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime default NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Rental Table in MySQL\nDESCRIPTION: This code creates the 'rental' table to track each rental transaction, with foreign keys linking to inventory, customer, and staff. It enforces uniqueness for rental date, inventory, and customer combinations, uses an auto-increment primary key, and supports automatic timestamp updates. Proper referential integrity is maintained with ON UPDATE CASCADE constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL plugin Table in SQL\nDESCRIPTION: This SQL statement defines the `plugin` table within the `mysql` database. It registers server plugins, storing the plugin name (`name`) and the associated dynamic library file (`dl`) containing the plugin's code. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Reloading Saved Performance Schema Configuration\nDESCRIPTION: Reloads a previously saved Performance Schema configuration. Useful for temporarily altering the setup for debugging and then restoring it.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_147\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_save();\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> UPDATE performance_schema.setup_instruments SET enabled = 'YES', timed = 'YES';\nQuery OK, 547 rows affected (0.40 sec)\nRows matched: 784  Changed: 547  Warnings: 0\n\n/* Run some tests that need more detailed instrumentation here */\n\nmysql> CALL sys.ps_setup_reload_saved();\nQuery OK, 0 rows affected (0.32 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Profile Output in Markdown Format\nDESCRIPTION: A table showing MySQL query profiling data, including Rank, Query ID, Response time, Calls, R/Call (Response time per Call), and V/M (Variance-to-mean ratio). The profile shows a single SELECT query with detailed performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1604834-1.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Profile\n# Rank Query ID                            Response time Calls R/Call V/M \n# ==== =================================== ============= ===== ====== ====\n#    1 0xC17ACBB2A781EF953D120517D93D7104  0.4296 100.0%     2 0.2148  0.00 SELECT t\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL System Tables - Time Zone Tables\nDESCRIPTION: DDL statements for MySQL system tables that store time zone information. Includes time_zone, time_zone_leap_second, time_zone_name, time_zone_transition and time_zone_transition_type tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones'\n```\n\n----------------------------------------\n\nTITLE: Querying Global Total Memory Usage - MySQL SQL\nDESCRIPTION: This SQL statement selects the sole row from 'memory_global_total', showing total server-wide memory allocation as a human-readable value (e.g., MiB). It is intended for a sys-enabled MySQL server and produces a simple one-row output. No inputs are required, providing an at-a-glance metric suitable for dashboards and health checks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_42\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from memory_global_total;\n+-----------------+\n| total_allocated |\n+-----------------+\n| 458.44 MiB      |\n+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Querying Film Text Table in MySQL (Sakila Database)\nDESCRIPTION: This SQL snippet selects all columns from the film_text table in the sakila database. The query took 2 seconds to execute, with no lock time, and returned 1 row while examining 0 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse sakila;\nselect * from film_text;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Time Zone Tables\nDESCRIPTION: Defines the structure for multiple time zone-related tables in the mysql database, including time_zone, time_zone_leap_second, time_zone_name, time_zone_transition, and time_zone_transition_type. These tables store information about time zones, leap seconds, and time zone transitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones'\n\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones'\n\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names'\n\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions'\n\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL DEFAULT '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',\n  `Abbreviation` char(8) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transition types'\n```\n\n----------------------------------------\n\nTITLE: Querying Latest File IO Operations\nDESCRIPTION: Retrieves the most recent file I/O operations showing thread, file, latency, operation type and requested bytes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from latest_file_io limit 5;\n```\n\n----------------------------------------\n\nTITLE: Beginning MySQL Transaction\nDESCRIPTION: SQL command to start a new transaction block.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN\n```\n\n----------------------------------------\n\nTITLE: Querying TreeCode with Additional Content Filters\nDESCRIPTION: SQL query that selects tree code details based on additional content type filters. The query joins treeCODE with treeADDITIONALCONTENT tables to filter records based on specific additional type IDs and values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='ABAN' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='ABA5')))\n```\n\n----------------------------------------\n\nTITLE: Defining Wait Classes Global Average Latency Structure in MySQL\nDESCRIPTION: SQL structure definitions for wait_classes_global_by_avg_latency and x$wait_classes_global_by_avg_latency views that track wait event classes and their latency metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_96\n\nLANGUAGE: SQL\nCODE:\n```\ndesc wait_classes_global_by_avg_latency;\ndesc x$wait_classes_global_by_avg_latency;\n```\n\n----------------------------------------\n\nTITLE: Defining sales_by_store View in MySQL Sakila Database\nDESCRIPTION: Creates a view that summarizes total sales by store. It joins payment, rental, inventory, store, address, city, country, and staff tables to show store location, manager name, and total sales amount, sorted by country and city.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `sales_by_store`*/;\n/*!50001 DROP VIEW IF EXISTS `sales_by_store`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_store` AS select concat(`c`.`city`,_utf8',',`cy`.`country`) AS `store`,concat(`m`.`first_name`,_utf8' ',`m`.`last_name`) AS `manager`,sum(`p`.`amount`) AS `total_sales` from (((((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `store` `s` on((`i`.`store_id` = `s`.`store_id`))) join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` `c` on((`a`.`city_id` = `c`.`city_id`))) join `country` `cy` on((`c`.`country_id` = `cy`.`country_id`))) join `staff` `m` on((`s`.`manager_staff_id` = `m`.`staff_id`))) group by `s`.`store_id` order by `cy`.`country`,`c`.`city` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Creating sys_config table in SQL for system configuration\nDESCRIPTION: This SQL statement creates the sys_config table in the sys schema, which stores system configuration variables. It uses a varchar primary key for the variable name and includes timestamps for tracking when values were set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_41\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `sys_config` (\n  `variable` varchar(128) NOT NULL,\n  `value` varchar(128) DEFAULT NULL,\n  `set_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `set_by` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`variable`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Creating help_topic Table in SQL\nDESCRIPTION: The 'help_topic' table defines help topics within a MySQL help system, specifying attributes like help_topic_id, name, and description. It uses a primary key for unique topic identification, facilitating organized help content.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating func Table for User Defined Functions - MySQL - SQL\nDESCRIPTION: Establishes the func table for storing metadata about user-defined and aggregate functions in MySQL. The table includes fields for function name, return type, dynamic library path, and function type, utilizing utf8_bin for collation. Requires MySQL and provides persistent information essential for function execution and system integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Stages Waits/Latency by Host - SQL\nDESCRIPTION: Shows an example SQL query against host_summary_by_stages, returning total wait counts and latency statistics by stage and host. Designed for performance troubleshooting in MySQL, highlighting which execution stages contribute most to latency. Requires an active Performance Schema with data aggregated by host. Results include raw operation counts and latency metrics, but interpretation requires understanding corresponding event names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n  mysql> select *  from host_summary_by_stages;\n  +------+--------------------------------+-------+---------------+-------------+\n  | host | event_name                     | total | total_latency | avg_latency |\n  +------+--------------------------------+-------+---------------+-------------+\n  | hal  | stage/sql/Opening tables       |   889 | 1.97 ms       | 2.22 us     |\n  | hal  | stage/sql/Creating sort index  |     4 | 1.79 ms       | 446.30 us   |\n  | hal  | stage/sql/init                 |    10 | 312.27 us     | 31.23 us    |\n  | hal  | stage/sql/checking permissions |    10 | 300.62 us     | 30.06 us    |\n  | hal  | stage/sql/freeing items        |     5 | 85.89 us      | 17.18 us    |\n  | hal  | stage/sql/statistics           |     5 | 79.15 us      | 15.83 us    |\n  | hal  | stage/sql/preparing            |     5 | 69.12 us      | 13.82 us    |\n  | hal  | stage/sql/optimizing           |     5 | 53.11 us      | 10.62 us    |\n  | hal  | stage/sql/Sending data         |     5 | 44.66 us      | 8.93 us     |\n  | hal  | stage/sql/closing tables       |     5 | 37.54 us      | 7.51 us     |\n  | hal  | stage/sql/System lock          |     5 | 34.28 us      | 6.86 us     |\n  | hal  | stage/sql/query end            |     5 | 24.37 us      | 4.87 us     |\n  | hal  | stage/sql/end                  |     5 | 8.60 us       | 1.72 us     |\n  | hal  | stage/sql/Sorting result       |     5 | 8.33 us       | 1.67 us     |\n  | hal  | stage/sql/executing            |     5 | 5.37 us       | 1.07 us     |\n  | hal  | stage/sql/cleaning up          |     5 | 4.60 us       | 919.00 ns   |\n  +------+--------------------------------+-------+---------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Querying waits_by_user_by_latency View in MySQL\nDESCRIPTION: Demonstrates a sample query on the waits_by_user_by_latency view, showing wait events for the root user sorted by total latency. This helps identify the most time-consuming wait events for performance tuning.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_109\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from waits_by_user_by_latency;\n+------+-----------------------------------------------------+--------+---------------+-------------+-------------+\n| user | event                                               | total  | total_latency | avg_latency | max_latency |\n+------+-----------------------------------------------------+--------+---------------+-------------+-------------+\n| root | wait/io/file/sql/file_parser                        |  13743 | 00:01:00.46   | 4.40 ms     | 231.88 ms   |\n| root | wait/io/file/innodb/innodb_data_file                |   4699 | 3.02 s        | 643.38 us   | 46.93 ms    |\n| root | wait/io/file/sql/FRM                                |  11462 | 2.60 s        | 226.83 us   | 61.72 ms    |\n| root | wait/io/file/myisam/dfile                           |  26776 | 746.70 ms     | 27.89 us    | 308.79 ms   |\n| root | wait/io/file/myisam/kfile                           |   7126 | 462.66 ms     | 64.93 us    | 88.76 ms    |\n| root | wait/io/file/sql/dbopt                              |    179 | 137.58 ms     | 768.59 us   | 15.46 ms    |\n| root | wait/io/file/csv/metadata                           |      8 | 86.60 ms      | 10.82 ms    | 50.32 ms    |\n| root | wait/synch/mutex/mysys/IO_CACHE::append_buffer_lock | 798080 | 66.46 ms      | 82.94 ns    | 161.03 us   |\n| root | wait/io/file/sql/binlog                             |     19 | 49.11 ms      | 2.58 ms     | 9.40 ms     |\n| root | wait/io/file/sql/misc                               |     26 | 22.38 ms      | 860.80 us   | 15.30 ms    |\n| root | wait/io/file/csv/data                               |      4 | 297.46 us     | 74.37 us    | 111.93 us   |\n| root | wait/synch/rwlock/sql/MDL_lock::rwlock              |    944 | 287.86 us     | 304.62 ns   | 874.64 ns   |\n| root | wait/io/file/archive/data                           |      4 | 82.71 us      | 20.68 us    | 40.74 us    |\n| root | wait/synch/mutex/myisam/MYISAM_SHARE::intern_lock   |     60 | 12.21 us      | 203.20 ns   | 512.72 ns   |\n| root | wait/synch/mutex/innodb/trx_mutex                   |     81 | 5.93 us       | 73.14 ns    | 252.59 ns   |\n+------+-----------------------------------------------------+--------+---------------+-------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Creating User Privileges Table Schema in MySQL\nDESCRIPTION: Defines a table schema for storing MySQL user privileges and authentication details with various permission flags, SSL settings, and password policies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT_priv enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N'...\n```\n\n----------------------------------------\n\nTITLE: Defining Chunk Boundary for Checksum Comparison in SQL\nDESCRIPTION: This SQL WHERE clause condition defines the boundaries for chunk 7 of the `issue_560.buddy_list` table during a checksum operation. It selects rows where the `player_id` is greater than or equal to '301' and strictly less than '351'. The output indicates a CRC difference was found within this specific data range.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_560_output_1.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n`player_id` >= '301' AND `player_id` < '351'\n```\n\n----------------------------------------\n\nTITLE: MySQL InnoDB Configuration Parameters\nDESCRIPTION: Core InnoDB storage engine configuration parameters controlling memory allocation, concurrency, file handling, and recovery options\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_4\n\nLANGUAGE: mysql\nCODE:\n```\n--innodb_buffer_pool_size=# \n--innodb_commit_concurrency=# \n--innodb_concurrency_tickets=# \n--innodb_file_io_threads=# \n--innodb_force_recovery=# \n--innodb_lock_wait_timeout=# \n--innodb_log_buffer_size=# \n--innodb_log_file_size=# \n--innodb_log_files_in_group=#\n```\n\n----------------------------------------\n\nTITLE: Creating the `time_zone_name` Table - MySQL Time Zone Name to ID Mapping - SQL\nDESCRIPTION: Defines the `time_zone_name` table, mapping textual time zone names to their corresponding unique IDs in the time_zone table. The table is used by MySQL to resolve time zone strings for user sessions and conversions. Built on MyISAM and requires utf8 charset. This table's data is loaded during time zone initialization.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names'\n```\n\n----------------------------------------\n\nTITLE: Creating help_category Table for Help Categories - MySQL - SQL\nDESCRIPTION: Sets up the help_category table, which tracks documentation categories for MySQL help topics. Utilizes MyISAM storage with unique constraints on category names, and includes columns for category identifiers, parent categories, and related URLs. Designed to work with MySQL's internal help system and requires utf8 charset for broad textual support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Selecting Actors by Last Name Prefix in Sakila Database (SQL)\nDESCRIPTION: This SQL query selects all columns (`*`) from the `sakila.actor` table for actors whose `last_name` begins with the letter 'A'. The `LIKE` operator with the wildcard `%` is used for pattern matching against the `last_name` column. Execution metadata (timestamp, user, host, performance metrics) is provided in the surrounding comments from the log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow007.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 101010 00:0003\n# User@Host: root[root] @ localhost []\n# Query_time: 1  Lock_time: 0  Rows_sent: 100  Rows_examined: 0\nselect * from sakila.actor where last_name like 'A%';\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL\nDESCRIPTION: This SQL statement specifies the 'store' table structure in the Sakila database, detailing its columns and constraints including store_id and manager_staff_id. It supports data integrity through foreign keys connecting to 'address' and 'staff' tables, using MySQL’s InnoDB engine for robustness.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment-8.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint unsigned NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'help_relation' Keyword-Topic Table - SQL\nDESCRIPTION: Creates the 'help_relation' table, which maps help keywords to help topics for the MySQL help system. It uses a composite primary key on the combination of keyword ID and topic ID, enforcing unique relationships between keywords and their associated topics. The table relies on the MyISAM engine and UTF-8 encoding.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Error Log for Slave SQL Thread Abortion\nDESCRIPTION: This snippet shows an error message indicating that the slave SQL thread has aborted due to an error while running a query. It provides information about the binary log position where the slave stopped.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog004.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n090902 10:43:55 [ERROR] Error running query, slave SQL thread aborted. Fix the problem, and restart the slave SQL thread with \"SLAVE START\". We stopped at log 'mpb-bin.000534' position 47010998\n```\n\n----------------------------------------\n\nTITLE: Querying Film Text Data in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'film_text' table in the 'sakila' database for a specific film ID. It demonstrates basic SQL SELECT syntax and database usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse sakila;\nselect * from film_text where film_id=5;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Execution Plan with EXPLAIN in SQL\nDESCRIPTION: This SQL statement utilizes the `EXPLAIN` command to obtain the database server's execution plan for the specified `SELECT` query. The query targets column 'i' from table 't' in database 'd', with a placeholder '?' for filtering on 'i'. The `/*!50100 PARTITIONS*/` comment is a version-specific hint related to table partitioning. The surrounding text indicates this `EXPLAIN` statement was generated by the tool to analyze the performance characteristics of the corresponding `PREPARE` statement.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump041.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT i FROM d.t WHERE i=?\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Proxies Privileges Table in SQL\nDESCRIPTION: This snippet establishes the proxies_priv table used for proxy privileges and connections within a MySQL environment. It includes Host, User columns with constraints on primary keys, used in managing proxy logins and access.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n```\n\n----------------------------------------\n\nTITLE: Explaining SELECT Query Plan for Prepared Statement on Table d.t in SQL\nDESCRIPTION: This SQL snippet uses `EXPLAIN` to analyze the execution plan for a `SELECT` statement intended for preparation. It selects all columns from table `d.t` where `name` equals \"daniel\". This is useful for optimizing the query before it's repeatedly executed using `EXECUTE`. The `/*!50100 PARTITIONS*/` hint suggests compatibility considerations for partitioned tables in MySQL 5.1.0+. Requires the table `d.t`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump033.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n# Converted for EXPLAIN\n# EXPLAIN /*!50100 PARTITIONS*/\nselect * from d.t where name=\"daniel\"\\G\n```\n\n----------------------------------------\n\nTITLE: Creating proxies_priv Table in mysql using SQL\nDESCRIPTION: Defines the `proxies_priv` table within the `mysql` database. This table stores information about user proxy privileges, tracking which users can act as proxies for others. It specifies columns for host, user, proxied host/user, grant option, grantor, and timestamp, using the MyISAM engine with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_user` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `With_grant` tinyint(1) NOT NULL DEFAULT '0',\n  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`User`,`Proxied_host`,`Proxied_user`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User proxy privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating time_zone_leap_second Table in mysql using SQL\nDESCRIPTION: Defines the `time_zone_leap_second` table within the `mysql` database. This table stores information about leap second occurrences, including the transition time and the correction amount. It uses the InnoDB engine with statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY (`Transition_time`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Leap seconds information for time zones'\n```\n\n----------------------------------------\n\nTITLE: Finding Next Chunk Boundary in SQL\nDESCRIPTION: This SQL query retrieves city_id values to determine the next chunk boundary for the checksum process. It uses SQL_NO_CACHE to ensure fresh results and implements pagination with LIMIT to efficiently process the table in chunks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx005.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `city_id` FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` >= ?)) AND (country_id > 100) ORDER BY `city_id` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Database Wait Events Analysis - PostgreSQL SQL\nDESCRIPTION: Complex query joining pg_locks, pg_stat_database, pg_class, and pg_stat_activity to analyze database wait events.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_locks l JOIN pg_stat_database d ON true JOIN pg_class c ON true JOIN pg_stat_activity a ON true\n```\n\n----------------------------------------\n\nTITLE: Creating the `staff` Table in SQL\nDESCRIPTION: Defines the SQL structure for the `staff` table in the Sakila database using an InnoDB engine. This table stores information about staff members, including personal details (name, email, picture), store assignment, activity status, login credentials (username, password hash), and address linkage. It includes foreign key constraints linking to the `store` and `address` tables, a primary key (`staff_id`), and indexes. The table uses UTF8 character set, with a specific collation for the password field.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment-5.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) default NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL default '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) character set utf8 collate utf8_bin default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Table Definition\nDESCRIPTION: Creates a MyISAM table with range partitioning based on date values, split into three partitions with specific date boundaries\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `t1` (\n  `d` int DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1 /*!50100 PARTITION BY RANGE (to_days(d)) (PARTITION p001 VALUES LESS THAN (730851) ENGINE = MyISAM, PARTITION p002 VALUES LESS THAN (730882) ENGINE = MyISAM, PARTITION p003 VALUES LESS THAN (730910) ENGINE = MyISAM) */\n```\n\n----------------------------------------\n\nTITLE: Showing InnoDB Log Sequence and Checkpoint Information (Text)\nDESCRIPTION: This section provides details about the InnoDB transaction log status. It displays the current Log Sequence Number (LSN), the LSN flushed to disk, the LSN of the last checkpoint, maximum and target checkpoint ages, the current modified page age, and the actual checkpoint age. It also indicates the number of pending log writes and checkpoint writes, along with the total log I/Os performed and the rate.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n---\nLOG\n---\nLog sequence number 6558240284218\nLog flushed up to   6558240260937\nLast checkpoint at  6558239649930\nMax checkpoint age    325436314\nCheckpoint age target 315266430\nModified age          634288\nCheckpoint age        634288\n1 pending log writes, 0 pending chkp writes\n56914822 log i/o's done, 0.11 log i/o's/second\n```\n\n----------------------------------------\n\nTITLE: Creating help_topic Table - MySQL SQL\nDESCRIPTION: Creates the `help_topic` table to store individual help topics used by the MySQL server's internal help system. Each topic is uniquely identified by an ID and contains descriptive information, examples, and URLs for additional documentation. Inputs are loaded during database initialization; outputs are accessed via HELP statements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help topics'\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Additional Content Values by City and Partner - SQL\nDESCRIPTION: Returns distinct 'value' entries from 'treeADDITIONALCONTENT' where each record is associated, through a join chain, with 'treeCODE' and 'tree' for a given city ('qcnscityid') and partner. Supports reporting or filtering UI based on city and partner selection. Requires joins across 'treeADDITIONALCONTENT', 'treeCODE', and 'tree', with correlated city and partner constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct treeaddit0_.value as col_0_0_ from treeADDITIONALCONTENT treeaddit0_, treeCODE treecode1_, tree tree4_ where treecode1_.treeid=tree4_.treeid and treeaddit0_.treecodeid=treecode1_.treecodeid and (treecode1_.treeid in (select tree2_.treeid from tree tree2_ where tree2_.qcnscityid=788013)) and treeaddit0_.additionaltypeid=2 and tree4_.partnerid=2\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Queries on MySQL with Sequential Values\nDESCRIPTION: A series of SQL SELECT queries that retrieve incrementing numeric values from the 'foo' table. Each query follows the same pattern with consistent query time (0.000899s), lock time (0s), and execution metrics (0 rows sent, 0 rows examined).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1338 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1339 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1340 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1341 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1342 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1343 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1344 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1345 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1346 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1347 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1348 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1349 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1350 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1351 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1352 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1353 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1354 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1355 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1356 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1357 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1358 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1359 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1360 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1361 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1362 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1363 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1364 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1365 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1366 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1367 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1368 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1369 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1370 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1371 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1372 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1373 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1374 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1375 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1376 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1377 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1378 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1379 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1380 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1381 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1382 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1383 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1384 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1385 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1386 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: MySQL System Variables Configuration\nDESCRIPTION: Important MySQL system variables and their current settings including auto-increment configuration, buffer sizes, and logging parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp007.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n     Auto-Inc Incr/Offset | 1/1\n   default_storage_engine | InnoDB\n               flush_time | 0\n             init_connect | \n                init_file | \n                 sql_mode | \n         join_buffer_size | 128k\n         sort_buffer_size | 2M\n         read_buffer_size | 128k\n```\n\n----------------------------------------\n\nTITLE: Creating Country Table in Sakila Database\nDESCRIPTION: Creates the country table in the Sakila database to store country information. Uses InnoDB engine with auto-incrementing primary key and includes columns for country name and last update timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL auto_increment,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8;\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'plugin' Metadata Table - SQL\nDESCRIPTION: Defines the 'plugin' table for registering MySQL server plugins, each entry storing the plugin name and corresponding shared library path. Each plugin name is unique and serves as the primary key. The table uses the MyISAM engine and UTF-8 encoding for compatibility with plugin loading mechanisms.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: MySQL GROUP BY Query with JOIN\nDESCRIPTION: A SELECT query that performs a self-join on table 't' using column 'a', groups results, orders by count descending, and limits to 10 rows. The query examines 1.96k rows to return 10 results with a 215ms execution time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect t.a, count(*) from t join t t2 using(a) group by 1 order by 2 desc limit 10\n```\n\n----------------------------------------\n\nTITLE: Establishing Proxies Privilege Table in MySQL\nDESCRIPTION: The 'proxies_priv' SQL table manages proxy relationships and privileges for MySQL accounts. It supports the system for when users act on behalf of others.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_user` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `With_grant` tinyint(1) NOT NULL DEFAULT '0',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n\n```\n\n----------------------------------------\n\nTITLE: Complex Privilege Check Query\nDESCRIPTION: This SQL query checks for specific privileges across multiple INFORMATION_SCHEMA tables. It uses UNION to combine results from COLUMN_PRIVILEGES, TABLE_PRIVILEGES, SCHEMA_PRIVILEGES, and USER_PRIVILEGES tables, filtering for 'YES' grantable privileges for the 'root'@'localhost' user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 FROM (SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`COLUMN_PRIVILEGES` UNION SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`TABLE_PRIVILEGES` UNION SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`SCHEMA_PRIVILEGES` UNION SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`USER_PRIVILEGES`) t WHERE `IS_GRANTABLE` = 'YES' AND '''root''@''localhost''' LIKE `GRANTEE` LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table in Sakila Database\nDESCRIPTION: Creates the film table in the Sakila database to store movie information including title, description, language references, and release year. Uses InnoDB engine with auto-incrementing primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL auto_increment,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) default NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned default NULL,\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in MySQL\nDESCRIPTION: Creates the payment table to store customer payment records with foreign key relationships to customer, staff, and rental tables. Includes payment amount, date, and automated timestamp tracking.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Help Category Table in SQL\nDESCRIPTION: Defines the help_category table in SQL, used for categorizing help resources within a MySQL environment. This table includes fields for help_category_id, name, and a unique key on name, assisting in organizing and retrieving help topics by categories.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint unsigned DEFAULT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Altering Authentication and Account Settings for 'sally'@'%' in MySQL\nDESCRIPTION: This SQL command updates the 'sally'@'%' user account. It specifies `mysql_native_password` for authentication, removes any specific password requirements (`REQUIRE NONE`), uses the default password expiration policy (`PASSWORD EXPIRE DEFAULT`), and ensures the account is not locked (`ACCOUNT UNLOCK`). Requires the user 'sally'@'%' to exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-57.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER 'sally'@'%' IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK;\n```\n\n----------------------------------------\n\nTITLE: Character Set Configuration Query\nDESCRIPTION: Sets the connection character encoding to UTF-8. Has 899μs execution time with no lock time. Executed by user 'meow' on host '1.2.3.8' in database 'db'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow008_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET NAMES utf8\n```\n\n----------------------------------------\n\nTITLE: Logging Database Synchronization Details with Percona Toolkit\nDESCRIPTION: This snippet shows the output of a database synchronization operation, including connection parameters and operation statistics. It provides information about the sync process, such as the number of DELETE, REPLACE, INSERT, and UPDATE operations performed, as well as the timing and exit status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_644_output_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Syncing P=12346,h=127.1,p=...,u=msandbox\n# DELETE REPLACE INSERT UPDATE ALGORITHM START    END      EXIT DATABASE.TABLE\n#      0       0      0      0 Chunk     00:00:00 00:00:00 0    issue_644.t\n```\n\n----------------------------------------\n\nTITLE: Granting Column-Specific SELECT Privileges on test.t to 'sally'@'%' in MySQL\nDESCRIPTION: This SQL command grants the user 'sally'@'%' permission to select data only from the specified columns (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) within the `t` table of the `test` database. Requires the `test` database, `t` table, and user 'sally'@'%' to exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-57.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Cluster Configuration\nDESCRIPTION: Shows the current Percona XtraDB Cluster configuration, including cluster name, size, node information, and related settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp006.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Percona XtraDB Cluster #####################################\n             Cluster Name | pt_sandbox_cluster\n          Cluster Address | gcomm://\n             Cluster Size | 3\n            Cluster Nodes | 192.168.0.100,192.168.0.100,192.168.0.100\n                Node Name | 12345\n              Node Status | Primary\n               SST Method | rsync\n            Slave Threads | 2\n       Ignore Split Brain | false\n            Ignore Quorum | false\n              gcache Size | 128M\n         gcache Directory | /tmp/12345/data/\n              gcache Name | /tmp/12345/data//galera.cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Logging in MySQL\nDESCRIPTION: Enables binary logging for update queries, which is crucial for replication and point-in-time recovery. The optional argument specifies the location for binary log files.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n--log-bin[=name]\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL System Database in SQL\nDESCRIPTION: Creates the `mysql` database if it doesn't already exist, using the default character set latin1. This database is crucial as it houses system tables managing privileges, server configuration, and other internal metadata. The `/*!32312 ... */` syntax ensures conditional execution based on MySQL server version.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `mysql` /*!40100 DEFAULT CHARACTER SET latin1 */;\n```\n\n----------------------------------------\n\nTITLE: Creating load_data Table in percona_test using SQL\nDESCRIPTION: Defines the `load_data` table within the `percona_test` database. This appears to be a simple table with a single integer column (`i`), potentially used for load testing or temporary data storage during testing scenarios. It uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `load_data` (\n  `i` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Device I/O Statistics Output\nDESCRIPTION: This snippet shows formatted text output representing device I/O statistics over time. The columns include timestamp (ts), device identifier, read megabytes per second (rd_mb_s), read concurrency (rd_cnc), read response time (rd_rt), write megabytes per second (wr_mb_s), write concurrency (wr_cnc), write response time (wr_rt), device busy percentage (busy), and in-progress operations (in_prg). This data is likely from a monitoring tool within the Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/sample_int_diskstats-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  1.0 {37}       0.0    0.0     0.0     7.3    0.0     1.6   2%      0\n  2.0 {37}       0.0    0.0     3.0     0.1    0.0     0.1   0%      0\n  3.0 {37}       0.1    0.0     3.5     0.1    0.0     0.2   0%      0\n  4.0 {37}       0.0    0.0     1.0     0.3    0.0     0.0   0%      0\n  5.0 {37}       0.0    0.0     4.4     0.1    0.0     0.1   0%      0\n  6.0 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n  7.0 {37}       0.1    0.0     6.2     0.1    0.0     0.1   0%      0\n  8.0 {37}       0.0    0.0     3.7     0.1    0.0     0.0   0%      0\n  9.0 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 10.0 {37}       0.0    0.0     4.0     0.0    0.0     0.1   0%      0\n 11.0 {37}       0.0    0.0     0.0     7.2    0.0     0.2   0%      0\n 12.0 {37}       0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 13.0 {37}       0.2    0.0     2.0     0.0    0.0     0.2   0%      0\n 14.0 {37}       0.0    0.0     0.0     0.3    0.0     0.0   0%      0\n 15.0 {37}       0.0    0.0     0.0     0.1    0.0     0.0   0%      0\n 16.0 {37}       0.0    0.0     4.3     0.1    0.0     0.1   0%      0\n 17.1 {37}       0.0    0.0     3.0     0.1    0.0     0.1   0%      0\n 18.1 {37}       0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 19.1 {37}       0.1    0.0     4.0     0.2    0.0     0.0   0%      0\n 20.1 {37}       0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 21.1 {37}       0.0    0.0     0.0     7.2    0.0     0.2   0%      0\n 22.1 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 23.1 {37}       0.0    0.0     0.0     0.1    0.0     0.0   0%      0\n 24.1 {37}       0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 25.1 {37}       0.0    0.0     1.0     0.1    0.0     0.2   0%      0\n 26.1 {37}       0.0    0.0     0.0     0.2    0.0     0.1   0%      0\n 27.1 {37}       0.0    0.0     5.5     0.1    0.0     0.1   0%      0\n 28.1 {37}       0.0    0.0     0.3     0.1    0.0     0.0   0%      0\n 29.1 {37}       0.0    0.0     0.0     0.1    0.0     0.0   0%      0\n 30.1 {37}       0.1    0.0     5.6     0.0    0.0     0.1   0%      0\n 31.1 {37}       0.0    0.0     0.0     7.2    0.0     0.2   0%      0\n 32.1 {37}       0.0    0.0     0.0     0.0    0.0     0.2   0%      0\n 33.1 {37}       0.2    0.0     4.4     0.1    0.0     0.0   1%      0\n 34.1 {37}       0.0    0.0     5.5     0.2    0.0     0.0   0%      0\n 35.1 {37}       0.0    0.0     1.5     0.1    0.0     0.1   0%      0\n 36.1 {37}       0.0    0.0     0.0     0.2    0.0     0.4   0%      0\n 37.1 {37}       0.1    0.0     2.9     0.1    0.0     0.1   0%      0\n 38.1 {37}       0.0    0.0     0.0     0.0    0.0     0.2   0%      0\n 39.1 {37}       0.1    0.0     4.7     0.2    0.0     0.1   0%      0\n 40.1 {37}       0.0    0.0     4.0     0.1    0.0     0.1   0%      0\n 41.1 {37}       0.0    0.0     0.0     6.4    0.0     0.2   0%      0\n 42.1 {37}       0.0    0.0     2.0     0.1    0.0     0.1   0%      0\n 43.1 {37}       0.0    0.0     3.0     0.1    0.0     0.1   0%      0\n 44.1 {37}       0.0    0.0     6.0     0.2    0.0     0.0   0%      0\n 45.1 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 46.1 {37}       0.0    0.0     0.0     0.3    0.0     0.2   0%      0\n 47.1 {37}       0.0    0.0     1.0     0.1    0.0     0.1   0%      0\n 48.1 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 49.2 {37}       0.1    0.0     4.8     0.1    0.0     0.0   0%      0\n 50.2 {37}       0.0    0.0     5.7     0.0    0.0     0.0   0%      0\n 51.2 {37}       0.0    0.0     0.0     5.7    0.0     0.2   0%      0\n 52.2 {37}       0.0    0.0     0.5     0.1    0.0     0.1   0%      0\n 53.2 {37}       0.1    0.0     5.4     0.1    0.0     0.1   0%      0\n 54.2 {37}       0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 55.2 {37}       0.1    0.0     4.2     0.1    0.0     0.1   0%      0\n 56.2 {37}       0.1    0.0     4.6     0.2    0.0     0.3   0%      0\n 57.2 {37}       0.1    0.0     4.2     0.2    0.0     0.0   0%      0\n 58.2 {37}       0.0    0.0     0.0     0.2    0.0     0.1   0%      0\n 59.2 {37}       0.0    0.0     1.0     0.2    0.0     0.0   0%      0\n 60.2 {37}       0.0    0.0     1.5     0.1    0.0     0.1   0%      0\n 61.2 {37}       0.1    0.0     6.3     7.4    0.0     0.3   1%      0\n 62.2 {37}       0.0    0.0     4.0     0.2    0.0     0.1   0%      0\n 63.2 {37}       0.0    0.0     5.0     0.0    0.0     0.1   0%      0\n 64.2 {37}       0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 65.2 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 66.2 {37}       0.0    0.0     0.0     0.1    0.0     0.6   0%      0\n 67.2 {37}       0.0    0.0     1.0     0.3    0.0     0.0   0%      0\n 68.2 {37}       0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 69.2 {37}       0.0    0.0     1.0     0.2    0.0     0.0   0%      0\n 70.2 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 71.2 {37}       0.1    0.0     7.3     7.7    0.0     0.2   0%      0\n 72.2 {37}       0.1    0.0     5.2     0.1    0.0     0.0   0%      0\n 73.2 {37}       0.0    0.0     2.0     0.1    0.0     0.1   0%      0\n 74.2 {37}       0.0    0.0     7.0     0.2    0.0     0.0   0%      0\n 75.2 {37}       0.0    0.0     0.0     0.0    0.0     0.2   0%      0\n 76.2 {37}       0.0    0.0     3.5     0.2    0.0     0.1   0%      0\n 77.2 {37}       0.0    0.0     6.0     0.2    0.0     0.0   0%      0\n 78.2 {37}       0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 79.2 {37}       0.0    0.0     0.0     0.4    0.0     0.2   0%      0\n 80.2 {37}       0.0    0.0     0.0     0.1    0.0     0.2   0%      0\n 81.2 {37}       0.0    0.0     0.0     7.5    0.0     0.3   0%      0\n 82.3 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 83.3 {37}       0.0    0.0     0.0     0.0    0.0     0.4   0%      0\n 84.3 {37}       0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 85.3 {37}       0.0    0.0     1.2     0.2    0.0     0.1   0%      0\n 86.3 {37}       0.0    0.0     0.0     0.1    0.0     0.3   0%      0\n 87.3 {37}       0.0    0.0     7.0     0.0    0.0     0.0   0%      0\n 88.3 {37}       0.0    0.0     2.2     0.1    0.0     0.1   0%      0\n 89.3 {37}       0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 90.3 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 91.3 {37}       0.0    0.0     0.5     7.2    0.0     0.2   0%      0\n 92.3 {37}       0.0    0.0     0.0     0.1    0.0     0.0   0%      0\n 93.3 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 94.3 {37}       0.0    0.0     1.3     0.3    0.0     0.0   0%      0\n 95.3 {37}       0.0    0.0     1.0     0.1    0.0     0.0   0%      1\n 96.3 {37}       0.0    0.0     0.0     0.3    0.0     0.1   0%      0\n 97.3 {37}       0.0    0.0     0.0     0.1    0.0     0.1   0%      0\n 98.3 {37}       0.0    0.0     0.3     0.5    0.0     0.1   0%      0\n 99.3 {37}       0.0    0.0     3.0     0.2    0.0     0.1   0%      0\n100.3 {37}       0.0    0.0     0.0     0.1    0.0     0.0   0%      0\n101.3 {37}       0.0    0.0     0.0     7.4    0.0     0.2   0%      0\n```\n\n----------------------------------------\n\nTITLE: Interpreting pt-mongodb-summary Sample Output (Plain Text)\nDESCRIPTION: This plain text snippet illustrates example output structure from the pt-mongodb-summary command, showing how instance status, host information, operation statistics, security status, oplog metrics, and cluster-wide statistics are summarized. Outputs are collated from various MongoDB admin queries and operating system process information and grouped by logical sections. The default output format helps visualize multi-instance topologies, their roles, and health indicators. Input is generated by invoking pt-mongodb-summary, and output is read as plain text by the user; no programmatic consumption is intended.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-mongodb-summary.rst#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n   # Instances ####################################################################################\n   ID    Host                         Type                                 ReplSet\n    0 localhost:17001                PRIMARY                                r1\n    1 localhost:17002                SECONDARY                              r1\n    2 localhost:17003                SECONDARY                              r1\n    0 localhost:18001                PRIMARY                                r2\n    1 localhost:18002                SECONDARY                              r2\n    2 localhost:18003                SECONDARY                              r2\n\n   # This host\n   # Mongo Executable #############################################################################\n          Path to executable | /home/karl/tmp/MongoDB32Labs/3.0/bin/mongos\n   # Report On 0 ########################################\n                        User | karl\n                   PID Owner | mongos\n                        Time | 2016-10-30 00:18:49 -0300 ART\n                    Hostname | karl-HP-ENVY\n                     Version | 3.0.11\n                    Built On | Linux x86_64\n                     Started | 2016-10-30 00:18:49 -0300 ART\n                     Datadir | /data/db\n                Process Type | mongos\n\n   # Running Ops ##################################################################################\n\n   Type         Min        Max        Avg\n   Insert           0          0          0/5s\n   Query            0          0          0/5s\n   Update           0          0          0/5s\n   Delete           0          0          0/5s\n   GetMore          0          0          0/5s\n   Command          0         22         16/5s\n\n   # Security #####################################################################################\n   Users 0\n   Roles 0\n   Auth  disabled\n   SSL   disabled\n\n   # Oplog ########################################################################################\n   Oplog Size     18660 Mb\n   Oplog Used     55 Mb\n   Oplog Length   0.91 hours\n   Last Election  2016-10-30 00:18:44 -0300 ART\n\n   # Cluster wide #################################################################################\n               Databases: 3\n             Collections: 17\n     Sharded Collections: 1\n   Unsharded Collections: 16\n       Sharded Data Size: 68 GB\n     Unsharded Data Size: 0 KB\n      # Balancer (per day)\n                 Success: 6\n                  Failed: 0\n                  Splits: 0\n                   Drops: 0\n```\n\n----------------------------------------\n\nTITLE: Tree Code Lookup with Additional Content Filtering\nDESCRIPTION: Query retrieving tree code details with nested subqueries filtering on additional content values. Joins multiple tables to get room-related information and filters based on specific additional type IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='ABAN' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='MET1')))\n```\n\n----------------------------------------\n\nTITLE: Creating the `help_topic` Table - MySQL Help Topics Metadata - SQL\nDESCRIPTION: Creates the `help_topic` table to store actual help topics, each with descriptions, examples, and referencing a parent help category. Each record is indexed by a unique integer ID and name and includes a URL. This table drives the user-facing help content for internal MySQL help queries, using MyISAM for storage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY  (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View sales_by_film_category\nDESCRIPTION: Creates or replaces the MySQL view `sales_by_film_category` in the `sakila` database. This view calculates the total sales amount for each film category by joining the `payment`, `rental`, `inventory`, `film`, `film_category`, and `category` tables. Results are grouped by category name and ordered by total sales in descending order. It sets `SQL SECURITY DEFINER`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `sales_by_film_category`*/;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_film_category` AS select `c`.`name` AS `category`,sum(`p`.`amount`) AS `total_sales` from (((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `film` `f` on((`i`.`film_id` = `f`.`film_id`))) join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `c`.`name` order by sum(`p`.`amount`) desc */;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Views in sys schema\nDESCRIPTION: Example shows the addition of new MySQL views including processlist, metrics, session, and schema views with enhanced functionality for monitoring database performance and status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/NEWS.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nprocesslist/x$processlist views\nmetrics view\nsession/x$session views\nsession_ssl_status view\nschema_auto_increment_columns view\nschema_redundant_indexes view\nschema_table_lock_waits/x$schema_table_lock_waits views\n```\n\n----------------------------------------\n\nTITLE: Creating Help Topic Table - MySQL - SQL\nDESCRIPTION: This statement defines the 'help_topic' table, which contains detailed help topics including descriptions, examples, and URLs. The table has a primary key on help_topic_id and enforces uniqueness of topic names. Using InnoDB with persistent statistics disabled, its columns provide structure for full online help documentation in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: MySQL System Variables Output\nDESCRIPTION: Complete listing of MySQL server configuration variables showing their current values. Notable settings include InnoDB as the default storage engine, REPEATABLE-READ isolation level, and various performance-related parameters like cache sizes and timeouts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/show-variables/vars001.txt#2025-04-22_snippet_1\n\nLANGUAGE: mysql\nCODE:\n```\nsql_low_priority_updates        = OFF\nsql_max_join_size               = 18446744073709551615\nsql_mode                        = \nsql_notes                       = ON\nsql_quote_show_create           = ON\nsql_safe_updates                = OFF\nsql_select_limit                = 18446744073709551615\nsql_slave_skip_counter          = \nsql_warnings                    = OFF\nssl_ca                          = \nssl_capath                      = \nssl_cert                        = \nssl_cipher                      = \nssl_key                         = \nstorage_engine                  = InnoDB\nsync_binlog                     = 0\nsync_frm                        = ON\nsystem_time_zone                = MDT\ntable_definition_cache          = 256\ntable_lock_wait_timeout         = 50\ntable_open_cache                = 64\ntable_type                      = MyISAM\nthread_cache_size               = 0\nthread_handling                 = one-thread-per-connection\nthread_stack                    = 262144\ntime_format                     = %H:%i:%s\ntime_zone                       = SYSTEM\ntimed_mutexes                   = OFF\ntimestamp                       = 1278782579\ntmp_table_size                  = 16777216\ntmpdir                          = /tmp\ntransaction_alloc_block_size    = 8192\ntransaction_prealloc_size       = 4096\ntx_isolation                    = REPEATABLE-READ\nunique_checks                   = ON\nupdatable_views_with_limit      = YES\nversion                         = 5.1.34-log\nversion_comment                 = MySQL Community Server (GPL)\nversion_compile_machine         = x86_64\nversion_compile_os              = unknown-linux-gnu\nwait_timeout                    = 28800\nwarning_count                   = 0\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'actor_info' View in Sakila\nDESCRIPTION: Defines the structure for the `actor_info` view in the `sakila` database. This view aggregates information about actors, including their ID, full name, and a semicolon-separated list of film categories and titles they have appeared in. It uses joins across `actor`, `film_actor`, `film_category`, `category`, and `film` tables. The view definition includes specific character set and collation settings and defines the SQL security context as INVOKER.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Final view structure for view `actor_info`\n--\n\n/*!50001 DROP TABLE IF EXISTS `actor_info`*/;\n/*!50001 DROP VIEW IF EXISTS `actor_info`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY INVOKER */\n/*!50001 VIEW `actor_info` AS select `a`.`actor_id` AS `actor_id`,`a`.`first_name` AS `first_name`,`a`.`last_name` AS `last_name`,group_concat(distinct concat(`c`.`name`,': ',(select group_concat(`f`.`title` order by `f`.`title` ASC separator ', ') from ((`film` `f` join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `film_actor` `fa` on((`f`.`film_id` = `fa`.`film_id`))) where ((`fc`.`category_id` = `c`.`category_id`) and (`fa`.`actor_id` = `a`.`actor_id`)))) order by `c`.`name` ASC separator '; ') AS `film_info` from (((`actor` `a` left join `film_actor` `fa` on((`a`.`actor_id` = `fa`.`actor_id`))) left join `film_category` `fc` on((`fa`.`film_id` = `fc`.`film_id`))) left join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `a`.`actor_id`,`a`.`first_name`,`a`.`last_name` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Creating GPU Table with Indexes in MySQL\nDESCRIPTION: Creates a table named 'gpu' with fields for tracking GPU and product relationships, including timestamps, ordering, and visibility flags. The table uses InnoDB engine and includes multiple indexes for optimizing queries based on product ID, order ID, and activity date lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/dupekeys/issue-904-1.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `gpu` (\n  `g_id` bigint(20) unsigned NOT NULL,\n  `p_id` bigint(20) unsigned NOT NULL,\n  `date_added` int(10) unsigned NOT NULL,\n  `p_o_id` bigint(20) unsigned NOT NULL,\n  `g_o_id` bigint(20) unsigned NOT NULL,\n  `in_order` tinyint(3) unsigned NOT NULL,\n  `date_update` int(10) unsigned NOT NULL,\n  `comment` text collate utf8_unicode_ci NOT NULL,\n  `is_v` tinyint(3) unsigned NOT NULL,\n  UNIQUE KEY `by_p_id` (`p_id`,`g_id`),\n  KEY `by_p_o` (`p_o_id`,`g_id`),\n  KEY `by_activity` (`p_id`,`date_added`),\n  KEY `by_count` (`p_o_id`,`is_v`,`p_id`)\n) ENGINE=InnoDB\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL db Table in SQL\nDESCRIPTION: This SQL statement defines the `db` table within the `mysql` database. It stores database-level privileges granted to users, indicating which users (`User`) from specific hosts (`Host`) have various privileges (like `Select_priv`, `Insert_priv`, etc.) on a particular database (`Db`). The table uses the MyISAM engine and utf8 character set with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Re-selecting Actors by ID in Sakila Database (SQL)\nDESCRIPTION: This SQL query retrieves all columns (`*`) from the `sakila.actor` table for actors whose `actor_id` is greater than 10. This query appears identical to a previous one in the log, suggesting it might be a repeated execution within the same session or context. Associated comments provide execution metadata like timestamp, user, host, query time, lock time, rows sent, and rows examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow007.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 101010 00:0002\n# User@Host: root[root] @ localhost []\n# Query_time: 1  Lock_time: 0  Rows_sent: 100  Rows_examined: 0\nselect * from sakila.actor where actor_id>10;\n```\n\n----------------------------------------\n\nTITLE: Generating Checksums for Table Chunks in SQL\nDESCRIPTION: This SQL query calculates checksums for chunks of data in the sakila.city table. It uses CRC32 hashing to generate a unique signature for each row based on multiple column values, and then combines these values with BIT_XOR to create a chunk-level checksum.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx005.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `city_id`, convert(`city` using utf8mb4), `country_id`, UNIX_TIMESTAMP(`last_update`))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` >= ?)) AND ((`city_id` <= ?)) AND (country_id > 100) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Creating Time Zone Transition Type Table in MySQL\nDESCRIPTION: Creates the time_zone_transition_type table that defines the different types of transitions in time zones, including offset, DST status, and abbreviation. Uses MyISAM engine with UTF-8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL default '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL default '0',\n  `Abbreviation` char(8) NOT NULL default '',\n  PRIMARY KEY  (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transition types';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating Columns Privileges Table in SQL\nDESCRIPTION: The snippet creates a table named columns_priv to manage column-level privileges in MySQL. Dependencies: MySQL database instance. Key columns include Host, Db, User, Table_name, Column_name, and Column_priv with a timestamp for updates. The primary key is a composite of Host, User, Db, Table_name, and Column_name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`User`,`Db`,`Table_name`,`Column_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Single Table Update with Where Clause\nDESCRIPTION: Updates vab3concept1id in vab3concept1upload table with a specific condition. Execution time: 33ms.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE db4.vab3concept1upload\nSET    vab3concept1id = '91848182522'\nWHERE  vab3concept1upload='6994465'\n```\n\n----------------------------------------\n\nTITLE: Creating Columns Privilege Table in MySQL\nDESCRIPTION: This SQL snippet creates the 'columns_priv' table to manage user privileges on individual table columns. It is critical for controlling who can select, insert, update, or reference specific columns in a MySQL database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Querying User Statement Summary Statistics in MySQL\nDESCRIPTION: Example query showing statistics about different statement types executed by users, including counts, latencies, and affected rows information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_95\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from user_summary_by_statement_type;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Complex MySQL Query with Subquery and Alias\nDESCRIPTION: This SQL query selects '12_13_foo' from a subquery that selects '12foo' from the table '123_bar'. The subquery is aliased as '123baz'. The query is preceded by EXPLAIN with a MySQL-specific hint for partition information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow004_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nselect 12_13_foo from (select 12foo from 123_bar) as 123baz\\G\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Data Sample - SQL\nDESCRIPTION: Sample dataset containing MySQL performance metrics including server IDs, timestamps, metric values and interval measurements. Each row represents a specific metric measurement at a given time for a particular server instance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n256314,1236699916),(8377,1236699300,3,59.974,300,300,7256314,1236699916),(8377,1236699300,4,0.094,300,300,7256314,1236699916)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into film_actor Table in SQL\nDESCRIPTION: This SQL statement inserts multiple rows into the film_actor table using the INSERT IGNORE syntax. Each row contains an actor ID, film ID, and a timestamp. The IGNORE keyword ensures that duplicate entries are skipped without causing errors.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT IGNORE INTO `film_actor` VALUES (1,1,'2006-02-15 10:05:03'),(1,23,'2006-02-15 10:05:03'),(1,25,'2006-02-15 10:05:03'),(1,106,'2006-02-15 10:05:03'),(1,140,'2006-02-15 10:05:03'),(1,166,'2006-02-15 10:05:03'),(1,277,'2006-02-15 10:05:03'),(1,361,'2006-02-15 10:05:03'),(1,438,'2006-02-15 10:05:03'),(1,499,'2006-02-15 10:05:03'),(1,506,'2006-02-15 10:05:03'),(1,509,'2006-02-15 10:05:03'),(1,605,'2006-02-15 10:05:03'),(1,635,'2006-02-15 10:05:03'),(1,749,'2006-02-15 10:05:03'),(1,832,'2006-02-15 10:05:03'),(1,939,'2006-02-15 10:05:03'),(1,970,'2006-02-15 10:05:03'),(1,980,'2006-02-15 10:05:03'),(2,3,'2006-02-15 10:05:03'),(2,31,'2006-02-15 10:05:03'),(2,47,'2006-02-15 10:05:03'),(2,105,'2006-02-15 10:05:03'),(2,132,'2006-02-15 10:05:03'),(2,145,'2006-02-15 10:05:03'),(2,226,'2006-02-15 10:05:03'),(2,249,'2006-02-15 10:05:03'),(2,314,'2006-02-15 10:05:03'),(2,321,'2006-02-15 10:05:03'),(2,357,'2006-02-15 10:05:03'),(2,369,'2006-02-15 10:05:03'),(2,399,'2006-02-15 10:05:03'),(2,458,'2006-02-15 10:05:03'),(2,481,'2006-02-15 10:05:03'),(2,485,'2006-02-15 10:05:03'),(2,518,'2006-02-15 10:05:03'),(2,540,'2006-02-15 10:05:03'),(2,550,'2006-02-15 10:05:03'),(2,555,'2006-02-15 10:05:03'),(2,561,'2006-02-15 10:05:03'),(2,742,'2006-02-15 10:05:03'),(2,754,'2006-02-15 10:05:03'),(2,811,'2006-02-15 10:05:03'),(2,958,'2006-02-15 10:05:03'),(3,17,'2006-02-15 10:05:03'),(3,40,'2006-02-15 10:05:03'),(3,42,'2006-02-15 10:05:03'),(3,87,'2006-02-15 10:05:03'),(3,111,'2006-02-15 10:05:03'),(3,185,'2006-02-15 10:05:03'),(3,289,'2006-02-15 10:05:03'),(3,329,'2006-02-15 10:05:03'),(3,336,'2006-02-15 10:05:03'),(3,341,'2006-02-15 10:05:03'),(3,393,'2006-02-15 10:05:03'),(3,441,'2006-02-15 10:05:03'),(3,453,'2006-02-15 10:05:03'),(3,480,'2006-02-15 10:05:03'),(3,539,'2006-02-15 10:05:03'),(3,618,'2006-02-15 10:05:03'),(3,685,'2006-02-15 10:05:03'),(3,827,'2006-02-15 10:05:03'),(3,966,'2006-02-15 10:05:03'),(3,967,'2006-02-15 10:05:03'),(3,971,'2006-02-15 10:05:03'),(3,996,'2006-02-15 10:05:03'),(4,23,'2006-02-15 10:05:03'),(4,25,'2006-02-15 10:05:03'),(4,56,'2006-02-15 10:05:03'),(4,62,'2006-02-15 10:05:03'),(4,79,'2006-02-15 10:05:03'),(4,87,'2006-02-15 10:05:03'),(4,355,'2006-02-15 10:05:03'),(4,379,'2006-02-15 10:05:03'),(4,398,'2006-02-15 10:05:03'),(4,463,'2006-02-15 10:05:03'),(4,490,'2006-02-15 10:05:03'),(4,616,'2006-02-15 10:05:03'),(4,635,'2006-02-15 10:05:03'),(4,691,'2006-02-15 10:05:03'),(4,712,'2006-02-15 10:05:03'),(4,714,'2006-02-15 10:05:03'),(4,721,'2006-02-15 10:05:03'),(4,798,'2006-02-15 10:05:03'),(4,832,'2006-02-15 10:05:03'),(4,858,'2006-02-15 10:05:03'),(4,909,'2006-02-15 10:05:03'),(4,924,'2006-02-15 10:05:03'),(5,19,'2006-02-15 10:05:03'),(5,54,'2006-02-15 10:05:03'),(5,85,'2006-02-15 10:05:03'),(5,146,'2006-02-15 10:05:03'),(5,171,'2006-02-15 10:05:03'),(5,172,'2006-02-15 10:05:03'),(5,202,'2006-02-15 10:05:03'),(5,203,'2006-02-15 10:05:03'),(5,286,'2006-02-15 10:05:03'),(5,288,'2006-02-15 10:05:03'),(5,316,'2006-02-15 10:05:03'),(5,340,'2006-02-15 10:05:03'),(5,369,'2006-02-15 10:05:03'),(5,375,'2006-02-15 10:05:03'),(5,383,'2006-02-15 10:05:03'),(5,392,'2006-02-15 10:05:03'),(5,411,'2006-02-15 10:05:03'),(5,503,'2006-02-15 10:05:03'),(5,535,'2006-02-15 10:05:03'),(5,571,'2006-02-15 10:05:03'),(5,650,'2006-02-15 10:05:03'),(5,665,'2006-02-15 10:05:03'),(5,687,'2006-02-15 10:05:03'),(5,730,'2006-02-15 10:05:03'),(5,732,'2006-02-15 10:05:03'),(5,811,'2006-02-15 10:05:03'),(5,817,'2006-02-15 10:05:03'),(5,841,'2006-02-15 10:05:03'),(5,865,'2006-02-15 10:05:03'),(6,29,'2006-02-15 10:05:03'),(6,53,'2006-02-15 10:05:03'),(6,60,'2006-02-15 10:05:03'),(6,70,'2006-02-15 10:05:03'),(6,112,'2006-02-15 10:05:03'),(6,164,'2006-02-15 10:05:03'),(6,165,'2006-02-15 10:05:03'),(6,193,'2006-02-15 10:05:03'),(6,256,'2006-02-15 10:05:03'),(6,451,'2006-02-15 10:05:03'),(6,503,'2006-02-15 10:05:03'),(6,509,'2006-02-15 10:05:03'),(6,517,'2006-02-15 10:05:03'),(6,519,'2006-02-15 10:05:03'),(6,605,'2006-02-15 10:05:03'),(6,692,'2006-02-15 10:05:03'),(6,826,'2006-02-15 10:05:03'),(6,892,'2006-02-15 10:05:03'),(6,902,'2006-02-15 10:05:03'),(6,994,'2006-02-15 10:05:03'),(7,25,'2006-02-15 10:05:03'),(7,27,'2006-02-15 10:05:03'),(7,35,'2006-02-15 10:05:03'),(7,67,'2006-02-15 10:05:03'),(7,96,'2006-02-15 10:05:03'),(7,170,'2006-02-15 10:05:03'),(7,173,'2006-02-15 10:05:03'),(7,217,'2006-02-15 10:05:03'),(7,218,'2006-02-15 10:05:03'),(7,225,'2006-02-15 10:05:03'),(7,292,'2006-02-15 10:05:03'),(7,351,'2006-02-15 10:05:03'),(7,414,'2006-02-15 10:05:03'),(7,463,'2006-02-15 10:05:03'),(7,554,'2006-02-15 10:05:03'),(7,618,'2006-02-15 10:05:03'),(7,633,'2006-02-15 10:05:03'),(7,637,'2006-02-15 10:05:03'),(7,691,'2006-02-15 10:05:03'),(7,758,'2006-02-15 10:05:03'),(7,766,'2006-02-15 10:05:03'),(7,770,'2006-02-15 10:05:03'),(7,805,'2006-02-15 10:05:03'),(7,806,'2006-02-15 10:05:03'),(7,846,'2006-02-15 10:05:03'),(7,900,'2006-02-15 10:05:03'),(7,901,'2006-02-15 10:05:03'),(7,910,'2006-02-15 10:05:03'),(7,957,'2006-02-15 10:05:03'),(7,959,'2006-02-15 10:05:03'),(8,47,'2006-02-15 10:05:03'),(8,115,'2006-02-15 10:05:03'),(8,158,'2006-02-15 10:05:03'),(8,179,'2006-02-15 10:05:03'),(8,195,'2006-02-15 10:05:03'),(8,205,'2006-02-15 10:05:03'),(8,255,'2006-02-15 10:05:03'),(8,263,'2006-02-15 10:05:03'),(8,321,'2006-02-15 10:05:03'),(8,396,'2006-02-15 10:05:03'),(8,458,'2006-02-15 10:05:03'),(8,523,'2006-02-15 10:05:03'),(8,532,'2006-02-15 10:05:03'),(8,554,'2006-02-15 10:05:03'),(8,752,'2006-02-15 10:05:03'),(8,769,'2006-02-15 10:05:03'),(8,771,'2006-02-15 10:05:03'),(8,859,'2006-02-15 10:05:03'),(8,895,'2006-02-15 10:05:03'),(8,936,'2006-02-15 10:05:03'),(9,30,'2006-02-15 10:05:03'),(9,74,'2006-02-15 10:05:03'),(9,147,'2006-02-15 10:05:03'),(9,148,'2006-02-15 10:05:03'),(9,191,'2006-02-15 10:05:03'),(9,200,'2006-02-15 10:05:03'),(9,204,'2006-02-15 10:05:03'),(9,434,'2006-02-15 10:05:03'),(9,510,'2006-02-15 10:05:03'),(9,514,'2006-02-15 10:05:03'),(9,552,'2006-02-15 10:05:03'),(9,650,'2006-02-15 10:05:03'),(9,671,'2006-02-15 10:05:03'),(9,697,'2006-02-15 10:05:03'),(9,722,'2006-02-15 10:05:03'),(9,752,'2006-02-15 10:05:03'),(9,811,'2006-02-15 10:05:03'),(9,815,'2006-02-15 10:05:03'),(9,865,'2006-02-15 10:05:03'),(9,873,'2006-02-15 10:05:03'),(9,889,'2006-02-15 10:05:03'),(9,903,'2006-02-15 10:05:03'),(9,926,'2006-02-15 10:05:03'),(9,964,'2006-02-15 10:05:03'),(9,974,'2006-02-15 10:05:03'),(10,1,'2006-02-15 10:05:03'),(10,9,'2006-02-15 10:05:03'),(10,191,'2006-02-15 10:05:03'),(10,236,'2006-02-15 10:05:03'),(10,251,'2006-02-15 10:05:03'),(10,366,'2006-02-15 10:05:03'),(10,477,'2006-02-15 10:05:03'),(10,480,'2006-02-15 10:05:03'),(10,522,'2006-02-15 10:05:03'),(10,530,'2006-02-15 10:05:03'),(10,587,'2006-02-15 10:05:03'),(10,694,'2006-02-15 10:05:03'),(10,703,'2006-02-15 10:05:03'),(10,716,'2006-02-15 10:05:03'),(10,782,'2006-02-15 10:05:03'),(10,914,'2006-02-15 10:05:03'),(10,929,'2006-02-15 10:05:03'),(10,930,'2006-02-15 10:05:03'),(10,964,'2006-02-15 10:05:03'),(10,966,'2006-02-15 10:05:03'),(10,980,'2006-02-15 10:05:03'),(10,983,'2006-02-15 10:05:03'),(11,118,'2006-02-15 10:05:03'),(11,205,'2006-02-15 10:05:03'),(11,281,'2006-02-15 10:05:03'),(11,283,'2006-02-15 10:05:03'),(11,348,'2006-02-15 10:05:03'),(11,364,'2006-02-15 10:05:03'),(11,395,'2006-02-15 10:05:03'),(11,429,'2006-02-15 10:05:03'),(11,433,'2006-02-15 10:05:03'),(11,453,'2006-02-15 10:05:03'),(11,485,'2006-02-15 10:05:03'),(11,532,'2006-02-15 10:05:03'),(11,567,'2006-02-15 10:05:03'),(11,587,'2006-02-15 10:05:03'),(11,597,'2006-02-15 10:05:03'),(11,636,'2006-02-15 10:05:03'),(11,709,'2006-02-15 10:05:03'),(11,850,'2006-02-15 10:05:03'),(11,854,'2006-02-15 10:05:03'),(11,888,'2006-02-15 10:05:03'),(11,896,'2006-02-15 10:05:03'),(11,928,'2006-02-15 10:05:03'),(11,938,'2006-02-15 10:05:03'),(11,969,'2006-02-15 10:05:03'),(11,988,'2006-02-15 10:05:03'),(12,16,'2006-02-15 10:05:03'),(12,17,'2006-02-15 10:05:03'),(12,34,'2006-02-15 10:05:03'),(12,37,'2006-02-15 10:05:03'),(12,91,'2006-02-15 10:05:03'),(12,92,'2006-02-15 10:05:03'),(12,107,'2006-02-15 10:05:03'),(12,155,'2006-02-15 10:05:03'),(12,177,'2006-02-15 10:05:03'),(12,208,'2006-02-15 10:05:03'),(12,213,'2006-02-15 10:05:03'),(12,216,'2006-02-15 10:05:03'),(12,243,'2006-02-15 10:05:03'),(12,344,'2006-02-15 10:05:03'),(12,400,'2006-02-15 10:05:03'),(12,416,'2006-02-15 10:05:03'),(12,420,'2006-02-15 10:05:03'),(12,457,'2006-02-15 10:05:03'),(12,513,'2006-02-15 10:05:03'),(12,540,'2006-02-15 10:05:03'),(12,593,'2006-02-15 10:05:03'),(12,631,'2006-02-15 10:05:03'),(12,635,'2006-02-15 10:05:03'),(12,672,'2006-02-15 10:05:03'),(12,716,'2006-02-15 10:05:03'),(12,728,'2006-02-15 10:05:03'),(12,812,'2006-02-15 10:05:03'),(12,838,'2006-02-15 10:05:03'),(12,871,'2006-02-15 10:05:03'),(12,880,'2006-02-15 10:05:03'),(12,945,'2006-02-15 10:05:03'),(13,17,'2006-02-15 10:05:03'),(13,29,'2006-02-15 10:05:03'),(13,45,'2006-02-15 10:05:03'),(13,87,'2006-02-15 10:05:03'),(13,110,'2006-02-15 10:05:03'),(13,144,'2006-02-15 10:05:03'),(13,154,'2006-02-15 10:05:03'),(13,162,'2006-02-15 10:05:03'),(13,203,'2006-02-15 10:05:03'),(13,254,'2006-02-15 10:05:03'),(13,337,'2006-02-15 10:05:03'),(13,346,'2006-02-15 10:05:03'),(13,381,'2006-02-15 10:05:03'),(13,385,'2006-02-15 10:05:03'),(13,427,'2006-02-15 10:05:03'),(13,456,'2006-02-15 10:05:03'),(13,513,'2006-02-15 10:05:03'),(13,515,'2006-02-15 10:05:03'),(13,522,'2006-02-15 10:05:03'),(13,524,'2006-02-15 10:05:03'),(13,528,'2006-02-15 10:05:03'),(13,571,'2006-02-15 10:05:03'),(13,588,'2006-02-15 10:05:03'),(13,597,'2006-02-15 10:05:03'),(13,600,'2006-02-15 10:05:03'),(13,718,'2006-02-15 10:05:03'),(13,729,'2006-02-15 10:05:03'),(13,816,'2006-02-15 10:05:03'),(13,817,'2006-02-15 10:05:03'),(13,832,'2006-02-15 10:05:03'),(13,833,'2006-02-15 10:05:03'),(13,843,'2006-02-15 10:05:03'),(13,897,'2006-02-15 10:05:03'),(13,966,'2006-02-15 10:05:03'),(13,998,'2006-02-15 10:05:03'),(14,154,'2006-02-15 10:05:03'),(14,187,'2006-02-15 10:05:03'),(14,232,'2006-02-15 10:05:03'),(14,241,'2006-02-15 10:05:03'),(14,253,'2006-02-15 1\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Query Performance\nDESCRIPTION: This snippet shows a detailed analysis of a MySQL query, including its execution metrics, time distribution, and associated table information. The query selects all columns from the 'foo' table in the 'db1' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-event-1h.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Inner Join in MySQL\nDESCRIPTION: Updates records in db2.tuningdetail_21_265507 table by joining with db1.gonzo table. It sets column1 and word3 values from the joined table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nuse db1;\nSET timestamp=1197996507;\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3;\n```\n\n----------------------------------------\n\nTITLE: Simple Update Query in MySQL\nDESCRIPTION: This query updates the 'biz' column in the foo.bar table to a specific value. It doesn't include any WHERE clause, potentially updating all rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE foo.bar\nSET    biz = '91848182522'\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL\nDESCRIPTION: Creates the rental table to track film rentals. Contains foreign keys to inventory, customer and staff tables with unique constraint on rental date combination.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating ndb_binlog_index Table in SQL\nDESCRIPTION: Defines the 'ndb_binlog_index' table which records NDB cluster binary log events in MySQL. Fields include Position, File, and epoch, among other statistics, with a primary key for identifying unique events. This is crucial for replication and data recovery processes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` int(10) unsigned NOT NULL,\n  `updates` int(10) unsigned NOT NULL,\n  `deletes` int(10) unsigned NOT NULL,\n  `schemaops` int(10) unsigned NOT NULL,\n  `orig_server_id` int(10) unsigned NOT NULL,\n  `orig_epoch` bigint(20) unsigned NOT NULL,\n  `gci` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Mapping Table in MySQL/InnoDB\nDESCRIPTION: Creates a relationship mapping table 'r_def_r_sk' with foreign key constraints to r_def and r_sk tables. The table has a unique constraint on skFoo_id and uses InnoDB engine for referential integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/dupekeys/issue-1004.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `r_def_r_sk` (\n  `r_def_id` bigint(20) NOT NULL,\n  `skFoo_id` bigint(20) NOT NULL,\n  UNIQUE KEY `skFoo_id` (`skFoo_id`),\n  KEY `FK6421479DB0C79C87` (`r_def_id`),\n  CONSTRAINT `FK6421479D19872119` FOREIGN KEY (`skFoo_id`) REFERENCES `r_sk` (`id`),\n  CONSTRAINT `FK6421479DB0C79C87` FOREIGN KEY (`r_def_id`) REFERENCES `r_def` (`id`)\n) ENGINE=InnoDB\n```\n\n----------------------------------------\n\nTITLE: Querying Client Features with Edition Features in MySQL\nDESCRIPTION: SQL query that retrieves client IDs where specific features are enabled by joining client, client_feature and edition_feature tables. The query filters for feature ID 2 and ensures the feature is enabled at both client and edition levels.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT client.id\nFROM `client`, client_feature, edition_feature\nWHERE ( client.id = client_feature.client_id )\nAND ( client_feature.feature_id = '2' )\nAND ( edition_feature.client_edition_id = client.client_edition_id )\nAND ( edition_feature.feature_id = client_feature.feature_id )\nAND ( client_feature.is_enabled = 1 )\n```\n\n----------------------------------------\n\nTITLE: Updating Table Records - MySQL - SQL\nDESCRIPTION: Performs an UPDATE operation to increment column 'b' by 30 for records in table 't' where 'user_id' equals 1. Typically used to adjust user-specific data in the 'test_db' database. Depends on an existing table 't' with columns 'b' and 'user_id'; inputs are statically defined, and the query returns the number of affected rows without sending result sets. No direct output is expected beyond success/failure; constraints are those of the underlying table schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow056.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate t set b = b + 30 where user_id=1\\G\n```\n\n----------------------------------------\n\nTITLE: Creating address Table in sakila using SQL\nDESCRIPTION: Defines the `address` table within the `sakila` sample database. This table stores address details, including street address lines, district, city ID (as a foreign key to the `city` table), postal code, phone number, and last update timestamp. It uses the InnoDB engine and enforces the foreign key constraint with `ON UPDATE CASCADE`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining the 'help_relation' Table for Keyword-Topic Relationships - MySQL - SQL\nDESCRIPTION: Defines the 'help_relation' table, which associates keywords and help topics, enabling many-to-many relations for MySQL's help system. Both 'help_topic_id' and 'help_keyword_id' are required and jointly form the primary key. No foreign key constraints are defined but are logically implied.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Structure: waits_by_host_by_latency\nDESCRIPTION: Schema definition for the waits_by_host_by_latency table that tracks wait events and latency metrics per host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_102\n\nLANGUAGE: SQL\nCODE:\n```\ndesc waits_by_host_by_latency;\ndesc x$waits_by_host_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating time_zone_transition Table in mysql using SQL\nDESCRIPTION: Defines the `time_zone_transition` table within the `mysql` database. This table records the specific times when time zone rules change (e.g., daylight saving time transitions) for each time zone. It links `Time_zone_id` with `Transition_time` and `Transition_type_id`. It uses the InnoDB engine with statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Time_zone_id`,`Transition_time`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone transitions'\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Table in Sakila Schema\nDESCRIPTION: The `actor` table holds information about actors, including their first and last names. Utilizes InnoDB engine with utf8 charset and includes an indexed last name field to optimize searches.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL\nDESCRIPTION: Defines the `rental` table essential for managing rental transactions, referencing the `inventory`, `customer`, and `staff` tables. The table ensures data consistency with foreign key constraints and unique keys. Installation requirements include InnoDB and UTF-8 support in the MySQL database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL auto_increment,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime default NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Engine Cost Table - MySQL - SQL\nDESCRIPTION: This code defines the 'engine_cost' table, which stores cost estimation parameters for storage engines in a MySQL environment. Prerequisites include using InnoDB and setting STATS_PERSISTENT=0 as an engine option. Key parameters include engine_name, device_type, cost_name, and cost_value, each forming part of the composite primary key. This table is referenced by the query optimizer for engine cost calculations, and values are updated via the last_update column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `engine_cost` (\n  `engine_name` varchar(64) NOT NULL,\n  `device_type` int(11) NOT NULL,\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  PRIMARY KEY (`cost_name`,`engine_name`,`device_type`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Options\nDESCRIPTION: This snippet provides a comprehensive list of MySQL server configuration options. Each option is presented with its name (prefixed with '--') and a description of its purpose, effects, and sometimes recommended values. These options cover various aspects of MySQL server behavior, including memory allocation, performance tuning, file handling, and system limits.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp001.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  --div_precision_increment=# \n                      Precision of the result of '/' operator will be increased\n                      on that value.\n  --expire_logs_days=# \n                      If non-zero, binary logs will be purged after\n                      expire_logs_days days; possible purges happen at startup\n                      and at binary log rotation.\n  --flush_time=#      A dedicated thread is created to flush all tables at the\n                      given interval.\n  --ft_boolean_syntax=name \n                      List of operators for MATCH ... AGAINST ( ... IN BOOLEAN\n                      MODE)\n  --ft_max_word_len=# The maximum length of the word to be included in a\n                      FULLTEXT index. Note: FULLTEXT indexes must be rebuilt\n                      after changing this variable.\n  --ft_min_word_len=# The minimum length of the word to be included in a\n                      FULLTEXT index. Note: FULLTEXT indexes must be rebuilt\n                      after changing this variable.\n  --ft_query_expansion_limit=# \n                      Number of best matches to use for query expansion\n  --ft_stopword_file=name \n                      Use stopwords from this file instead of built-in list.\n  --group_concat_max_len=# \n                      The maximum length of the result of function\n                      group_concat.\n  --innodb_additional_mem_pool_size=# \n                      Size of a memory pool InnoDB uses to store data\n                      dictionary information and other internal data\n                      structures.\n  --innodb_autoextend_increment=# \n                      Data file autoextend increment in megabytes\n  --innodb_buffer_pool_awe_mem_mb=# \n                      If Windows AWE is used, the size of InnoDB buffer pool\n                      allocated from the AWE memory.\n  --innodb_buffer_pool_size=# \n                      The size of the memory buffer InnoDB uses to cache data\n                      and indexes of its tables.\n  --innodb_commit_concurrency=# \n                      Helps in performance tuning in heavily concurrent\n                      environments.\n  --innodb_concurrency_tickets=# \n                      Number of times a thread is allowed to enter InnoDB\n                      within the same     SQL query after it has once got the\n                      ticket\n  --innodb_file_io_threads=# \n                      Number of file I/O threads in InnoDB.\n  --innodb_force_recovery=# \n                      Helps to save your data in case the disk image of the\n                      database becomes corrupt.\n  --innodb_lock_wait_timeout=# \n                      Timeout in seconds an InnoDB transaction may wait for a\n                      lock before being rolled back.\n  --innodb_log_buffer_size=# \n                      The size of the buffer which InnoDB uses to write log to\n                      the log files on disk.\n  --innodb_log_file_size=# \n                      Size of each log file in a log group.\n  --innodb_log_files_in_group=# \n                      Number of log files in the log group. InnoDB writes to\n                      the files in a circular fashion. Value 3 is recommended\n                      here.\n  --innodb_mirrored_log_groups=# \n                      Number of identical copies of log groups we keep for the\n                      database. Currently this should be set to 1.\n  --innodb_open_files=# \n                      How many files at the maximum InnoDB keeps open at the\n                      same time.\n  --innodb_sync_spin_loops=# \n                      Count of spin-loop rounds in InnoDB mutexes\n  --innodb_thread_concurrency=# \n                      Helps in performance tuning in heavily concurrent\n                      environments. Sets the maximum number of threads allowed\n                      inside InnoDB. Value 0 will disable the thread\n                      throttling.\n  --innodb_thread_sleep_delay=# \n                      Time of innodb thread sleeping before joining InnoDB\n                      queue (usec). Value 0 disable a sleep\n  --interactive_timeout=# \n                      The number of seconds the server waits for activity on an\n                      interactive connection before closing it.\n  --join_buffer_size=# \n                      The size of the buffer that is used for full joins.\n  --keep_files_on_create \n                      Don't overwrite stale .MYD and .MYI even if no directory\n                      is specified.\n  --key_buffer_size=# The size of the buffer used for index blocks for MyISAM\n                      tables. Increase this to get better index handling (for\n                      all reads and multiple writes) to as much as you can\n                      afford; 64M on a 256M machine that mainly runs MySQL is\n                      quite common.\n  --key_cache_age_threshold=# \n                      This characterizes the number of hits a hot block has to\n                      be untouched until it is considered aged enough to be\n                      downgraded to a warm block. This specifies the percentage\n                      ratio of that number of hits to the total number of\n                      blocks in key cache\n  --key_cache_block_size=# \n                      The default size of key cache blocks\n  --key_cache_division_limit=# \n                      The minimum percentage of warm blocks in key cache\n  --long_query_time=# Log all queries that have taken more than long_query_time\n                      seconds to execute to file.\n  --lower_case_table_names[=#] \n                      If set to 1 table names are stored in lowercase on disk\n                      and table names will be case-insensitive.  Should be set\n                      to 2 if you are using a case insensitive file system\n  --max_allowed_packet=# \n                      Max packetlength to send/receive from to server.\n  --max_binlog_cache_size=# \n                      Can be used to restrict the total size used to cache a\n                      multi-transaction query.\n  --max_binlog_size=# Binary log will be rotated automatically when the size\n                      exceeds this value. Will also apply to relay logs if\n                      max_relay_log_size is 0. The minimum value for this\n                      variable is 4096.\n  --max_connect_errors=# \n                      If there is more than this number of interrupted\n                      connections from a host this host will be blocked from\n                      further connections.\n  --max_connections=# The number of simultaneous clients allowed.\n  --max_delayed_threads=# \n                      Don't start more than this number of threads to handle\n                      INSERT DELAYED statements. If set to zero, which means\n                      INSERT DELAYED is not used.\n  --max_error_count=# Max number of errors/warnings to store for a statement.\n  --max_heap_table_size=# \n                      Don't allow creation of heap tables bigger than this.\n  --max_join_size=#   Joins that are probably going to read more than\n                      max_join_size records return an error.\n  --max_length_for_sort_data=# \n                      Max number of bytes in sorted records.\n  --max_prepared_stmt_count=# \n                      Maximum number of prepared statements in the server.\n  --max_relay_log_size=# \n                      If non-zero: relay log will be rotated automatically when\n                      the size exceeds this value; if zero (the default): when\n                      the size exceeds max_binlog_size. 0 excepted, the minimum\n                      value for this variable is 4096.\n  --max_seeks_for_key=# \n                      Limit assumed max number of seeks when looking up rows\n                      based on a key\n  --max_sort_length=# The number of bytes to use when sorting BLOB or TEXT\n                      values (only the first max_sort_length bytes of each\n                      value are used; the rest are ignored).\n  --max_sp_recursion_depth[=#] \n                      Maximum stored procedure recursion depth. (discussed with\n                      docs).\n  --max_tmp_tables=#  Maximum number of temporary tables a client can keep open\n                      at a time.\n  --max_user_connections=# \n                      The maximum number of active connections for a single\n                      user (0 = no limit).\n  --max_write_lock_count=# \n                      After this many write locks, allow some read locks to run\n                      in between.\n  --multi_range_count=# \n                      Number of key ranges to request at once.\n  --myisam_block_size=# \n                      Block size to be used for MyISAM index pages.\n  --myisam_data_pointer_size=# \n                      Default pointer size to be used for MyISAM tables.\n  --myisam_max_extra_sort_file_size=# \n                      Deprecated option\n  --myisam_max_sort_file_size=# \n                      Don't use the fast sort index method to created index if\n                      the temporary file would get bigger than this.\n  --myisam_repair_threads=# \n                      Number of threads to use when repairing MyISAM tables.\n                      The value of 1 disables parallel repair.\n  --myisam_sort_buffer_size=# \n                      The buffer that is allocated when sorting the index when\n                      doing a REPAIR or when creating indexes with CREATE INDEX\n                      or ALTER TABLE.\n  --myisam_stats_method=name \n                      Specifies how MyISAM index statistics collection code\n                      should threat NULLs. Possible values of name are\n```\n\n----------------------------------------\n\nTITLE: Example MySQL SHOW GLOBAL STATUS Output\nDESCRIPTION: This snippet displays the output of a MySQL `SHOW GLOBAL STATUS` command. It lists numerous server status variables and their current values, offering insights into database operations, resource utilization (like connections, threads, buffer pools, query cache), command execution counts, and InnoDB engine specifics. This information is crucial for performance monitoring and troubleshooting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-status-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAborted_clients\t1\nAborted_connects\t0\nBinlog_cache_disk_use\t0\nBinlog_cache_use\t0\nBytes_received\t749252\nBytes_sent\t3228262\nCom_admin_commands\t2\nCom_alter_db\t0\nCom_alter_table\t0\nCom_analyze\t0\nCom_backup_table\t0\nCom_begin\t0\nCom_call_procedure\t0\nCom_change_db\t90\nCom_change_master\t0\nCom_check\t0\nCom_checksum\t0\nCom_commit\t0\nCom_create_db\t0\nCom_create_function\t0\nCom_create_index\t0\nCom_create_table\t0\nCom_create_user\t0\nCom_dealloc_sql\t0\nCom_delete\t702\nCom_delete_multi\t0\nCom_do\t0\nCom_drop_db\t0\nCom_drop_function\t0\nCom_drop_index\t0\nCom_drop_table\t0\nCom_drop_user\t0\nCom_execute_sql\t0\nCom_flush\t0\nCom_grant\t0\nCom_ha_close\t0\nCom_ha_open\t0\nCom_ha_read\t0\nCom_help\t0\nCom_insert\t728\nCom_insert_select\t0\nCom_kill\t0\nCom_load\t0\nCom_load_master_data\t0\nCom_load_master_table\t0\nCom_lock_tables\t18\nCom_optimize\t0\nCom_preload_keys\t0\nCom_prepare_sql\t0\nCom_purge\t0\nCom_purge_before_date\t0\nCom_rename_table\t0\nCom_repair\t0\nCom_replace\t104\nCom_replace_select\t0\nCom_reset\t0\nCom_restore_table\t0\nCom_revoke\t0\nCom_revoke_all\t0\nCom_rollback\t0\nCom_savepoint\t0\nCom_select\t2049\nCom_set_option\t1942\nCom_show_binlog_events\t0\nCom_show_binlogs\t1\nCom_show_charsets\t0\nCom_show_collations\t0\nCom_show_column_types\t0\nCom_show_create_db\t38\nCom_show_create_table\t640\nCom_show_databases\t12\nCom_show_errors\t0\nCom_show_fields\t638\nCom_show_grants\t0\nCom_show_innodb_status\t27\nCom_show_keys\t0\nCom_show_logs\t0\nCom_show_master_status\t0\nCom_show_ndb_status\t0\nCom_show_new_master\t0\nCom_show_open_tables\t1\nCom_show_privileges\t0\nCom_show_processlist\t28\nCom_show_slave_hosts\t0\nCom_show_slave_status\t28\nCom_show_status\t32\nCom_show_storage_engines\t1\nCom_show_tables\t38\nCom_show_triggers\t638\nCom_show_variables\t42\nCom_show_warnings\t0\nCom_slave_start\t0\nCom_slave_stop\t0\nCom_stmt_close\t0\nCom_stmt_execute\t0\nCom_stmt_fetch\t0\nCom_stmt_prepare\t0\nCom_stmt_reset\t0\nCom_stmt_send_long_data\t0\nCom_truncate\t26\nCom_unlock_tables\t24\nCom_update\t78\nCom_update_multi\t0\nCom_xa_commit\t0\nCom_xa_end\t0\nCom_xa_prepare\t0\nCom_xa_recover\t0\nCom_xa_rollback\t0\nCom_xa_start\t0\nCompression\tOFF\nConnections\t245\nCreated_tmp_disk_tables\t1296\nCreated_tmp_files\t5\nCreated_tmp_tables\t2114\nDelayed_errors\t0\nDelayed_insert_threads\t0\nDelayed_writes\t0\nFlush_commands\t1\nHandler_commit\t0\nHandler_delete\t702\nHandler_discover\t0\nHandler_prepare\t0\nHandler_read_first\t210\nHandler_read_key\t2836\nHandler_read_next\t1441\nHandler_read_prev\t0\nHandler_read_rnd\t806\nHandler_read_rnd_next\t27377\nHandler_rollback\t0\nHandler_savepoint\t0\nHandler_savepoint_rollback\t0\nHandler_update\t1534\nHandler_write\t22809\nInnodb_buffer_pool_pages_data\t21\nInnodb_buffer_pool_pages_dirty\t0\nInnodb_buffer_pool_pages_flushed\t0\nInnodb_buffer_pool_pages_free\t491\nInnodb_buffer_pool_pages_latched\t0\nInnodb_buffer_pool_pages_misc\t0\nInnodb_buffer_pool_pages_total\t512\nInnodb_buffer_pool_read_ahead_rnd\t1\nInnodb_buffer_pool_read_ahead_seq\t0\nInnodb_buffer_pool_read_requests\t210\nInnodb_buffer_pool_reads\t14\nInnodb_buffer_pool_wait_free\t0\nInnodb_buffer_pool_write_requests\t0\nInnodb_data_fsyncs\t3\nInnodb_data_pending_fsyncs\t0\nInnodb_data_pending_reads\t0\nInnodb_data_pending_writes\t0\nInnodb_data_read\t2527232\nInnodb_data_reads\t27\nInnodb_data_writes\t3\nInnodb_data_written\t1536\nInnodb_dblwr_pages_written\t0\nInnodb_dblwr_writes\t0\nInnodb_log_waits\t0\nInnodb_log_write_requests\t0\nInnodb_log_writes\t1\nInnodb_os_log_fsyncs\t3\nInnodb_os_log_pending_fsyncs\t0\nInnodb_os_log_pending_writes\t0\nInnodb_os_log_written\t512\nInnodb_page_size\t16384\nInnodb_pages_created\t0\nInnodb_pages_read\t21\nInnodb_pages_written\t0\nInnodb_row_lock_current_waits\t0\nInnodb_row_lock_time\t0\nInnodb_row_lock_time_avg\t0\nInnodb_row_lock_time_max\t0\nInnodb_row_lock_waits\t0\nInnodb_rows_deleted\t0\nInnodb_rows_inserted\t0\nInnodb_rows_read\t0\nInnodb_rows_updated\t0\nKey_blocks_not_flushed\t0\nKey_blocks_unused\t14488\nKey_blocks_used\t16\nKey_read_requests\t9513\nKey_reads\t57\nKey_write_requests\t6344\nKey_writes\t1479\nLast_query_cost\t0.000000\nMax_used_connections\t4\nNdb_cluster_node_id\t0\nNdb_config_from_host\t\nNdb_config_from_port\t0\nNdb_number_of_data_nodes\t0\nNot_flushed_delayed_rows\t0\nOpen_files\t132\nOpen_streams\t0\nOpen_tables\t64\nOpened_tables\t1236\nPrepared_stmt_count\t0\nQcache_free_blocks\t7\nQcache_free_memory\t16741568\nQcache_hits\t709\nQcache_inserts\t1865\nQcache_lowmem_prunes\t0\nQcache_not_cached\t1001\nQcache_queries_in_cache\t21\nQcache_total_blocks\t55\nQuestions\t9518\nRpl_status\tNULL\nSelect_full_join\t0\nSelect_full_range_join\t0\nSelect_range\t0\nSelect_range_check\t0\nSelect_scan\t2336\nSlave_open_temp_tables\t0\nSlave_retried_transactions\t0\nSlave_running\tOFF\nSlow_launch_threads\t0\nSlow_queries\t0\nSort_merge_passes\t0\nSort_range\t0\nSort_rows\t702\nSort_scan\t26\nSsl_accept_renegotiates\t0\nSsl_accepts\t0\nSsl_callback_cache_hits\t0\nSsl_cipher\t\nSsl_cipher_list\t\nSsl_client_connects\t0\nSsl_connect_renegotiates\t0\nSsl_ctx_verify_depth\t18446744073709551615\nSsl_ctx_verify_mode\t0\nSsl_default_timeout\t0\nSsl_finished_accepts\t0\nSsl_finished_connects\t0\nSsl_session_cache_hits\t0\nSsl_session_cache_misses\t0\nSsl_session_cache_mode\tNONE\nSsl_session_cache_overflows\t0\nSsl_session_cache_size\t0\nSsl_session_cache_timeouts\t0\nSsl_sessions_reused\t0\nSsl_used_session_cache_entries\t0\nSsl_verify_depth\t0\nSsl_verify_mode\t0\nSsl_version\t\nTable_locks_immediate\t94314\nTable_locks_waited\t10\nTc_log_max_pages_used\t53\nTc_log_page_size\t0\nTc_log_page_waits\t0\nThreads_cached\t3\nThreads_connected\t1\nThreads_created\t4\nThreads_running\t1\nUptime\t7737\nUptime_since_flush_status\t7732\n```\n\n----------------------------------------\n\nTITLE: Creating plugin Table in MySQL\nDESCRIPTION: Creates the plugin table to store MySQL plugin information including plugin names and associated library files.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='MySQL plugins';\n```\n\n----------------------------------------\n\nTITLE: Analyzing Disk I/O Performance Metrics Output\nDESCRIPTION: Raw output from a disk monitoring tool showing performance statistics including read/write throughput (MB/s), concurrency levels, response times (ms), device utilization (%), and in-progress operations for various storage devices. Data is sampled at approximately 1-second intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n100.3 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n100.3 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n100.3 sda           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Store Table Definition\nDESCRIPTION: Creates the store table for managing retail locations with manager and address assignments. Includes foreign key constraints and unique index on manager_staff_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Describing memory_by_thread_by_current_bytes Views in MySQL (SQL)\nDESCRIPTION: Shows the table structure for the `memory_by_thread_by_current_bytes` view and its underlying `x$memory_by_thread_by_current_bytes` table using the DESC command in MySQL. These views summarize current memory usage aggregated by thread.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_by_thread_by_current_bytes;\n+--------------------+---------------------+------+-----+---------+-------+\n| Field              | Type                | Null | Key | Default | Extra |\n+--------------------+---------------------+------+-----+---------+-------+\n| thread_id          | bigint(20) unsigned | NO   |     | NULL    |       |\n| user               | varchar(128)        | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0)       | YES  |     | NULL    |       |\n| current_allocated  | text                | YES  |     | NULL    |       |\n| current_avg_alloc  | text                | YES  |     | NULL    |       |\n| current_max_alloc  | text                | YES  |     | NULL    |       |\n| total_allocated    | text                | YES  |     | NULL    |       |\n+--------------------+---------------------+------+-----+---------+-------+\n7 rows in set (0.49 sec)\n\nmysql> desc x$memory_by_thread_by_current_bytes;\n+--------------------+---------------------+------+-----+---------+-------+\n| Field              | Type                | Null | Key | Default | Extra |\n+--------------------+---------------------+------+-----+---------+-------+\n| thread_id          | bigint(20) unsigned | NO   |     | NULL    |       |\n| user               | varchar(128)        | YES  |     | NULL    |       |\n| current_count_used | decimal(41,0)       | YES  |     | NULL    |       |\n| current_allocated  | decimal(41,0)       | YES  |     | NULL    |       |\n| current_avg_alloc  | decimal(45,4)       | NO   |     | 0.0000  |       |\n| current_max_alloc  | bigint(20)          | YES  |     | NULL    |       |\n| total_allocated    | decimal(42,0)       | YES  |     | NULL    |       |\n+--------------------+---------------------+------+-----+---------+-------+\n7 rows in set (0.25 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating ppui Table Schema in SQL for User-Permission Management\nDESCRIPTION: Defines the database schema for a 'ppui' table that stores user permission relationships with InnoDB engine. The table includes columns for various IDs, creation date, and permission settings, with multiple indexes to optimize different query patterns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/dupekeys/issue-904-2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `ppui` (\n  `p_id` bigint(20) unsigned NOT NULL,\n  `o_id` int(20) unsigned NOT NULL,\n  `n_id` int(20) unsigned NOT NULL,\n  `added_by_id` int(20) unsigned NOT NULL,\n  `date_create` int(10) unsigned NOT NULL,\n  `p_perms` tinyint(3) NOT NULL default '0',\n  PRIMARY KEY  (`p_id`,`n_id`),\n  KEY `tag_by_id` (`added_by_id`,`n_id`),\n  KEY `person_id` (`n_id`,`p_perms`,`date_create`),\n  KEY `date_create` (`date_create`),\n  KEY `o_id` (`o_id`,`p_id`)\n) ENGINE=InnoDB\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query on 'trees' Table in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table. It's a simple query that uses an index for efficient retrieval. The query time is very low at 0.000012 seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Statistics (Snapshot 1)\nDESCRIPTION: This snippet shows the first snapshot of disk I/O statistics for various devices. It includes metrics like read/write megabytes per second (rd_mb_s, wr_mb_s), concurrency (rd_cnc, wr_cnc), response time (rd_rt, wr_rt), device busy percentage (busy), and requests in progress (in_prg). The data is likely generated by a monitoring tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  1.0 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sda           0.0    0.0     0.0     0.0    0.6     1.6  30%      0\n  1.0 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sda6          0.0    0.0     0.0     0.0    0.6     1.6  30%      0\n  1.0 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 dm-6          0.0    0.0     0.0     7.2    0.6     1.6  30%      0\n  1.0 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  1.0 emcpowera     0.0    0.0     0.0     0.1    0.0     0.5   1%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL Protocol Query Packet Exchange in TCP/IP Traffic\nDESCRIPTION: TCP/IP packet capture showing a MySQL protocol exchange with a parameterized SELECT query and server responses. The capture includes hexadecimal representation of packet data with MySQL protocol frames showing query execution and result metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump024.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-12-08 14:33:13.711073 IP 127.0.0.1.32810 > 127.0.0.1.12345: tcp 47\n\t0x0000:  4508 0063 df82 4000 4006 5d08 7f00 0001\n\t0x0010:  7f00 0001 802a 3039 0f38 ad70 0efd 5aa8\n\t0x0020:  8018 0101 fe57 0000 0101 080a 0056 76c4\n\t0x0030:  0056 73e0 2b00 0000 1653 454c 4543 5420\n\t0x0040:  2a20 4652 4f4d 2064 2e74 3320 5748 4552\n\t0x0050:  4520 763d 3f20 4f52 2063 3d3f 204f 5220\n\t0x0060:  663d 3f\n2009-12-08 14:33:13.711146 IP 127.0.0.1.12345 > 127.0.0.1.32810: tcp 0\n\t0x0000:  4508 0034 29f5 4000 4006 12c5 7f00 0001\n\t0x0010:  7f00 0001 3039 802a 0efd 5aa8 0f38 ad9f\n\t0x0020:  8010 0100 b2a5 0000 0101 080a 0056 76c4\n\t0x0030:  0056 76c4\n2009-12-08 14:33:13.711351 IP 127.0.0.1.12345 > 127.0.0.1.32810: tcp 214\n\t0x0000:  4508 010a 29f6 4000 4006 11ee 7f00 0001\n\t0x0010:  7f00 0001 3039 802a 0efd 5aa8 0f38 ad9f\n\t0x0020:  8018 0100 fefe 0000 0101 080a 0056 76c4\n\t0x0030:  0056 76c4 0c00 0001 0002 0000 0003 0003\n\t0x0040:  0000 0000 1700 0002 0364 6566 0000 0001\n\t0x0050:  3f00 0c3f 0000 0000 00fd 8000 0000 0017\n\t0x0060:  0000 0303 6465 6600 0000 013f 000c 3f00\n\t0x0070:  0000 0000 fd80 0000 0000 1700 0004 0364\n\t0x0080:  6566 0000 0001 3f00 0c3f 0000 0000 00fd\n\t0x0090:  8000 0000 0005 0000 05fe 0000 0200 1d00\n\t0x00a0:  0006 0364 6566 0164 0274 3302 7433 0176\n\t0x00b0:  0176 0c08 00ff 0000 00fd 0000 0000 001d\n\t0x00c0:  0000 0703 6465 6601 6402 7433 0274 3301\n\t0x00d0:  6301 630c 0800 0100 0000 fe00 0000 0000\n\t0x00e0:  1d00 0008 0364 6566 0164 0274 3302 7433\n\t0x00f0:  0166 0166 0c3f 000c 0000 0004 0000 1f00\n\t0x0100:  0005 0000 09fe 0000 0200\n2009-12-08 14:33:13.711483 IP 127.0.0.1.32810 > 127.0.0.1.12345: tcp 22\n\t0x0000:  4508 004a df83 4000 4006 5d20 7f00 0001\n\t0x0010:  7f00 0001 802a 3039 0f38 ad9f 0efd 5b7e\n\t0x0020:  8018 0109 fe3e 0000 0101 080a 0056 76c4\n\t0x0030:  0056 76c4 1200 0000 1702 0000 0000 0100\n\t0x0040:  0000 0701 0600 0600 0600\n2009-12-08 14:33:13.711642 IP 127.0.0.1.12345 > 127.0.0.1.32810: tcp 122\n\t0x0000:  4508 00ae 29f7 4000 4006 1249 7f00 0001\n\t0x0010:  7f00 0001 3039 802a 0efd 5b7e 0f38 adb5\n\t0x0020:  8018 0100 fea2 0000 0101 080a 0056 76c4\n\t0x0030:  0056 76c4 0100 0001 031d 0000 0203 6465\n\t0x0040:  6601 6402 7433 0274 3301 7601 760c 0800\n\t0x0050:  ff00 0000 fd00 0000 0000 1d00 0003 0364\n\t0x0060:  6566 0164 0274 3302 7433 0163 0163 0c08\n\t0x0070:  0001 0000 00fe 0000 0000 001d 0000 0403\n\t0x0080:  6465 6601 6402 7433 0274 3301 6601 660c\n\t0x0090:  3f00 0c00 0000 0400 001f 0000 0500 0005\n\t0x00a0:  fe00 0002 0005 0000 06fe 0000 0200\n2009-12-08 14:33:13.749546 IP 127.0.0.1.32810 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4508 0034 df84 4000 4006 5d35 7f00 0001\n\t0x0010:  7f00 0001 802a 3039 0f38 adb5 0efd 5bf8\n\t0x0020:  8010 0109 b12c 0000 0101 080a 0056 76ce\n\t0x0030:  0056 76c4\n```\n\n----------------------------------------\n\nTITLE: MySQL Show Create Table\nDESCRIPTION: Administrative query to display the CREATE TABLE statement for the 'trees' table in the 'food' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Trigger for Online Schema Change in SQL\nDESCRIPTION: This trigger inserts new rows into the new table when rows are inserted into the original table. It uses REPLACE INTO to handle potential conflicts with existing rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync001.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER mk_osc_ins AFTER INSERT ON `osc`.`t` FOR EACH ROW REPLACE INTO `osc`.`__new_t` (`id`, `c`) VALUES(NEW.`id`, NEW.`c`)\n```\n\n----------------------------------------\n\nTITLE: Database Performance Monitoring Metrics Data in SQL Insert Format\nDESCRIPTION: Raw performance monitoring data from Percona Toolkit, containing timestamped metrics for database servers. Each row represents a measurement with server ID, timestamp, metric type, and performance values that track system resources and database performance over time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n236699300,10,0.0,300,300,7256314,1236699918),(8447,1236699300,1,0.0,300,300,7256314,1236699918),(8447,1236699300,2,201.984,300,300,7256314,1236699918),(8447,1236699300,3,59.97,300,300,7256314,1236699918),(8447,1236699300,4,0.116,300,300,7256314,1236699918),(8447,1236699300,5,0.0,300,300,7256314,1236699918),(8447,1236699300,6,21.0,300,300,7256314,1236699918),(8447,1236699300,7,0.0,300,300,7256314,1236699918),(8447,1236699300,8,0.0,300,300,7256314,1236699918),(8448,1236698100,9,0.0,300,300,7256314,1236699918),(8448,1236698100,10,0.0,300,300,7256314,1236699918),(8448,1236698100,1,0.0,300,300,7256314,1236699918),(8448,1236698100,2,202.479,300,300,7256314,1236699918)\n```\n\n----------------------------------------\n\nTITLE: Creating percona_test.sentinel Table in SQL\nDESCRIPTION: This SQL command creates the `sentinel` table in the `percona_test` database. It has an integer primary key `id` and a `varchar` column `ping`. This table structure suggests it might be used as a heartbeat or sentinel table, possibly by tools like pt-stalk or other monitoring scripts, to check database responsiveness or mark progress. It uses the InnoDB engine and `utf8mb4` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sentinel` (\n  `id` int NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Monitoring Device I/O Performance Metrics\nDESCRIPTION: Tabular output showing system device I/O performance metrics captured at regular intervals (timestamps 89.3-93.3). Contains read/write throughput (MB/s), concurrency, response time (ms), device utilization percentage and in-progress I/O operations for each block device.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 90.3 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 90.3 sda           0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 90.3 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Selecting treeCODE Rows with Different Nested Content Filters (various filter values) - SQL\nDESCRIPTION: A set of queries similar in structure to prior filtered selects from 'treeCODE', with different filter values for 'additionaltypeid' and 'value' pairs, such as ('ABAN', 'MET'), ('PAR', 'LAN1'), ('PAR', 'LAN'), and ('ABAN', 'LAR1'). Used to retrieve specific room/code attributes under multi-tag conditions. The logic is consistent with other filtered 'treeCODE' queries, requiring both metadata tables for lookups and proper constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='ABAN' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='MET')))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='PAR' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='LAN1')))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='PAR' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='LAN')))\n```\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='ABAN' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='LAR1')))\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Time Zone Tables\nDESCRIPTION: Defines the structure for multiple time zone-related tables in the mysql schema, including time_zone, time_zone_leap_second, time_zone_name, time_zone_transition, and time_zone_transition_type. These tables store various time zone information for MySQL's time zone support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zones'\n\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY (`Transition_time`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Leap seconds information for time zones'\n\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone names'\n\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Time_zone_id`,`Transition_time`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone transitions'\n\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL DEFAULT '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',\n  `Abbreviation` char(8) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone transition types'\n```\n\n----------------------------------------\n\nTITLE: Creating Help Topic Table in MySQL\nDESCRIPTION: Defines a table to store details about help topics with fields for ID, name, category, descriptions, examples, and URLs. Utilizes MyISAM engine and utf8 character set, ensuring efficient organization and retrieval of help topics in the MySQL database system.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics';\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Table in MySQL\nDESCRIPTION: Creates the film_text table with full-text search capabilities for film titles and descriptions using MyISAM engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Structure: waits_by_user_by_latency\nDESCRIPTION: Schema definition for the waits_by_user_by_latency table that tracks wait events and latency metrics per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_100\n\nLANGUAGE: SQL\nCODE:\n```\ndesc waits_by_user_by_latency;\ndesc x$waits_by_user_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key Constraint in MySQL\nDESCRIPTION: This SQL snippet shows the definition of a foreign key constraint named 'child_ibfk_1' in the 'child' table, referencing the 'parent_id' column in the 'parent' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is001-fke.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCONSTRAINT child_ibfk_1 FOREIGN KEY (parent_id) REFERENCES parent (parent_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Table in Sakila Database\nDESCRIPTION: Creates the actor table in the Sakila database to store information about actors including their IDs, names, and when records were last updated. Uses InnoDB engine with auto-incrementing primary key and includes an index on last_name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Defining Time Zone Tables in MySQL\nDESCRIPTION: Includes definitions for `time_zone`, `time_zone_leap_second`, `time_zone_name`, `time_zone_transition`, and `time_zone_transition_type` tables to manage and record time zone and daylight saving details with proper indexing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL DEFAULT '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',\n  `Abbreviation` char(8) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transition types'\n```\n\n----------------------------------------\n\nTITLE: Creating Help Category Table - MySQL - SQL\nDESCRIPTION: This table schema defines 'help_category', which categorizes help topics in MySQL's internal help system. Its primary key is help_category_id, and the name column is unique to enforce one entry per category name. The table uses InnoDB and is designed to aid in structuring help content, with relationships to parent categories. The url column accommodates external reference links.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from bar_tbl in bar Schema\nDESCRIPTION: A simple SELECT query retrieving the 'col' column from the 'bar_tbl' table in the 'bar' schema. This query is executed directly with the schema already set in the context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT col FROM bar_tbl;\n```\n\n----------------------------------------\n\nTITLE: Creating inventory table in SQL\nDESCRIPTION: Creates the inventory table that tracks physical copies of films available at each store. Includes foreign key relationships to both the film and store tables with cascade update behavior.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating help_relation Table in SQL\nDESCRIPTION: Defines the 'help_relation' table in a MySQL help system, responsible for mapping relationships between help topics and keywords. Ensures efficient linkage between relevant content using a composite primary key on help_keyword_id and help_topic_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Creating proc Table in MySQL\nDESCRIPTION: Creates the proc table for storing stored procedure and function definitions including parameters, body, security settings and other metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures';\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Stats at Timestamp 3.0 Text\nDESCRIPTION: This block shows disk I/O statistics captured at timestamp 3.0. It includes metrics like megabytes read/written per second (rd_mb_s, wr_mb_s), read/write concurrency (rd_cnc, wr_cnc), read/write response time (rd_rt, wr_rt), device busy percentage (busy), and in-progress requests (in_prg) for devices like ram*, sda*, sr*, md*, and loop*.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-004.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n3.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda       20.2    0.5     0.4     1.3    0.0     0.1  42%      1\n3.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda3      20.2    0.5     0.4     1.3    0.0     0.1  42%      1\n3.0 sr0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 md0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Creating User Defined Functions Table in MySQL\nDESCRIPTION: This SQL snippet describes the 'func' table that stores metadata about user-defined functions. It includes function names, return types, and dynamic library paths for MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Creating Database Privilege Table in MySQL\nDESCRIPTION: This SQL snippet defines the 'db' table used to manage database-level access privileges including SELECT, INSERT, UPDATE, and more. It supports granular privilege assignments for users on databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Viewing Percona Toolkit Checksum Results\nDESCRIPTION: This snippet shows the standard output format of a Percona Toolkit checksum command (likely pt-table-checksum). It lists tables from mysql, percona_test, and sakila databases, reporting the number of errors, differences found, total rows, chunks processed, skipped tables, and the table name for each. This output confirms that all listed tables were checksummed without errors or differences, though some tables were processed in multiple chunks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/static-chunk-size-results-5.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nchecksum ...    \nERRORS DIFFS ROWS CHUNKS SKIPPED TABLE\n0 0 0 1 0 mysql.columns_priv\n0 0 0 1 0 mysql.db\n0 0 0 1 0 mysql.event\n0 0 0 1 0 mysql.func\n0 0 38 1 0 mysql.help_category\n0 0 453 1 0 mysql.help_keyword\n0 0 992 1 0 mysql.help_relation\n0 0 220 1 0 mysql.help_topic\n0 0 0 1 0 mysql.host\n0 0 0 1 0 mysql.ndb_binlog_index\n0 0 0 1 0 mysql.plugin\n0 0 0 1 0 mysql.proc\n0 0 0 1 0 mysql.procs_priv\n0 0 2 1 0 mysql.proxies_priv\n0 0 0 1 0 mysql.servers\n0 0 0 1 0 mysql.tables_priv\n0 0 0 1 0 mysql.time_zone\n0 0 0 1 0 mysql.time_zone_leap_second\n0 0 0 1 0 mysql.time_zone_name\n0 0 0 1 0 mysql.time_zone_transition\n0 0 0 1 0 mysql.time_zone_transition_type\n0 0 2 1 0 mysql.user\n0 0 22 1 0 percona_test.checksums\n0 0 1 1 0 percona_test.load_data\n0 0 1 1 0 percona_test.sentinel\n0 0 200 1 0 sakila.actor\n0 0 603 1 0 sakila.address\n0 0 16 1 0 sakila.category\n0 0 600 1 0 sakila.city\n0 0 109 1 0 sakila.country\n0 0 599 1 0 sakila.customer\n0 0 1000 1 0 sakila.film\n0 0 5462 8 0 sakila.film_actor\n0 0 1000 1 0 sakila.film_category\n0 0 1000 1 0 sakila.film_text\n0 0 4581 7 0 sakila.inventory\n0 0 6 1 0 sakila.language\n0 0 16049 19 0 sakila.payment\n0 0 16044 19 0 sakila.rental\n0 0 2 1 0 sakila.staff\n0 0 2 1 0 sakila.store\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries on MySQL Database\nDESCRIPTION: Series of identical SELECT queries on table 'foo' with incrementing values. Each query has a consistent execution time of 0.000899 seconds, no lock time, and no rows examined or returned. Queries are executed by user@1.2.3.4 on database 'db'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 250 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 299 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Creating Time Zone Transition Table in MySQL\nDESCRIPTION: Creates the time_zone_transition table that stores transitions between different time settings within time zones. Uses MyISAM engine with UTF-8 character set and a composite primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Table in MySQL\nDESCRIPTION: Defines inventory table structure with foreign key relationships to film and store tables using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint unsigned NOT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Customer Data Insertion - MySQL\nDESCRIPTION: Inserts customer data into the customer table with fields including ID, name, email and timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `customer` VALUES (1,1,'MARY','SMITH','MARY.SMITH@sakilacustomer.org',5,1,'2006-02-14 22:04:36','2006-02-15 11:57:20')\n```\n\n----------------------------------------\n\nTITLE: Updating Records in MySQL\nDESCRIPTION: This SQL snippet updates specific records in the `bidi`.`t` table. It modifies the fields `c`, `d`, and `ts` based on the `id` field, which serves as the primary reference. The `LIMIT 1` clause ensures that only one record is updated per statement.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/bidirectional/queries001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE `bidi`.`t` SET `c`='ghi', `d`='5', `ts`='2010-02-01 09:17:52' WHERE `id`='3' LIMIT 1;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE `bidi`.`t` SET `c`=NULL, `d`='0', `ts`='2010-02-02 05:10:00' WHERE `id`='5' LIMIT 1;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE `bidi`.`t` SET `c`='hmm', `d`='1', `ts`='2010-02-02 12:17:31' WHERE `id`='13' LIMIT 1;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE `bidi`.`t` SET `c`='gtg', `d`='7', `ts`='2010-02-02 06:01:08' WHERE `id`='15' LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in MySQL\nDESCRIPTION: This SQL script creates the 'payment' table to record customer payments. It includes foreign key constraints to maintain referential integrity with the 'customer', 'staff', and 'rental' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL auto_increment,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) default NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating film_text table with full-text search in SQL\nDESCRIPTION: Creates the film_text table which stores film titles and descriptions optimized for full-text search. Uses MyISAM engine (instead of InnoDB) to support the FULLTEXT index on title and description.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_category` Table in SQL\nDESCRIPTION: Defines the `help_category` table in the `mysql` database. This table structures the built-in server help system by defining help categories, including their ID, name, parent category ID (for hierarchical structure), and a URL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint unsigned DEFAULT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Time Zone Tables\nDESCRIPTION: Defines schema for time zone related tables including leap seconds, transitions, and time zone names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Time zones'\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from Multiple Table Join in MySQL\nDESCRIPTION: This SQL query inserts data into table t by selecting columns from tables a and b where their ids match. It showcases the use of INSERT ... SELECT with a join between two tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow002.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into t (a, b, c) select a.x, a.y, b.z from a, b where a.id=b.id;\n```\n\n----------------------------------------\n\nTITLE: Creating time_zone_transition_type Table in mysql using SQL\nDESCRIPTION: Defines the `time_zone_transition_type` table within the `mysql` database. This table describes the different types of time zone transitions (referenced by `Transition_type_id`), including the UTC offset, whether it's daylight saving time (Is_DST), and the time zone abbreviation. It uses the InnoDB engine with statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone_transition_type` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  `Offset` int(11) NOT NULL DEFAULT '0',\n  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',\n  `Abbreviation` char(8) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone transition types'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Server Cost Table\nDESCRIPTION: Defines table for storing server cost parameters used by the query optimizer, including computed default values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `server_cost` (\n  `cost_name` varchar(64) NOT NULL,\n  `cost_value` float DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `comment` varchar(1024) DEFAULT NULL,\n  `default_value` float GENERATED ALWAYS AS ((case `cost_name` when _utf8mb3'disk_temptable_create_cost' then 20.0 when _utf8mb3'disk_temptable_row_cost' then 0.5 when _utf8mb3'key_compare_cost' then 0.05 when _utf8mb3'memory_temptable_create_cost' then 1.0 when _utf8mb3'memory_temptable_row_cost' then 0.1 when _utf8mb3'row_evaluate_cost' then 0.1 else NULL end)) VIRTUAL,\n  PRIMARY KEY (`cost_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n```\n\n----------------------------------------\n\nTITLE: Querying User Profile by ID - SQL\nDESCRIPTION: Selects id, name, pic, and type for a user with a specific id from the 'users' table. Used for fetching user profile details for display or processing. Requires a single integer id as input and returns at most one row; relies on the existence of the columns and user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name,pic,type FROM users WHERE id=2346580\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Binlog Index Table - MySQL - SQL\nDESCRIPTION: This CREATE TABLE statement defines 'ndb_binlog_index', used in MySQL Cluster for NDB Cluster binary log tracking. It stores binary log file positions, epochs, event counts, and server IDs to aid with replication and restore operations. The primary key is comprised of epoch, orig_server_id, and orig_epoch. It uses MyISAM and latin1 charset, supporting high-performance sequential writes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` int(10) unsigned NOT NULL,\n  `updates` int(10) unsigned NOT NULL,\n  `deletes` int(10) unsigned NOT NULL,\n  `schemaops` int(10) unsigned NOT NULL,\n  `orig_server_id` int(10) unsigned NOT NULL,\n  `orig_epoch` bigint(20) unsigned NOT NULL,\n  `gci` int(10) unsigned NOT NULL,\n  `next_position` bigint(20) unsigned NOT NULL,\n  `next_file` varchar(255) NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Memory Usage by Host Structure Definition\nDESCRIPTION: Defines the structure of memory_by_host_by_current_bytes and x$memory_by_host_by_current_bytes tables tracking memory allocation metrics per host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\ndesc memory_by_host_by_current_bytes;\ndesc x$memory_by_host_by_current_bytes;\n```\n\n----------------------------------------\n\nTITLE: Defining Inventory Table for Rentals in MySQL\nDESCRIPTION: This snippet creates the 'inventory' table, holding details about inventory items, each representing a physical copy of a film in a store. It includes required foreign keys to the 'film' and 'store' tables, automatic timestamp for updates, and indexes for efficient querying. It uses InnoDB with auto-increment primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Transaction Table\nDESCRIPTION: Defines rental transaction records with inventory, customer, and staff relationships. Includes unique constraint on rental date, inventory, and customer.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating Sales by Film Category View in MySQL\nDESCRIPTION: Defines the `sales_by_film_category` view that aggregates total sales per film category. It utilizes joins on `payment`, `rental`, `inventory`, `film`, `film_category`, and `category` tables. The view summarizes sales by category and orders the results by the sales amount in descending order.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `sales_by_film_category*/;\n/*!50001 DROP VIEW IF EXISTS `sales_by_film_category*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_film_category` AS select `c`.`name` AS `category`,sum(`p`.`amount`) AS `total_sales` from (((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `film` `f` on((`i`.`film_id` = `f`.`film_id`))) join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `c`.`name` order by sum(`p`.`amount`) desc */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Sample Linux Device I/O Statistics Output (Text)\nDESCRIPTION: This text snippet represents typical output from a Linux I/O statistics tool. It includes a header row defining metrics like timestamp/interval ({ts}), device name (device), read megabytes per second (rd_mb_s), read concurrency (rd_cnc), read response time (rd_rt), write megabytes per second (wr_mb_s), write concurrency (wr_cnc), write response time (wr_rt), device busy percentage (busy), and requests in progress (in_prg). Subsequent lines provide these metrics captured at interval {5} for individual devices like ramdisks (ram0-ram15), physical disks (sda, sda partitions), optical drives (sr0), RAID devices (md0), and loop devices (loop0-loop7).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_int_diskstats-004.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n{5} ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} sda       21.8    0.5     0.4     3.0    0.0     0.2  41%      0\n{5} sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} sda3      21.8    0.5     0.4     3.0    0.0     0.2  41%      0\n{5} sr0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} md0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{5} loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Granting Column-Level Privileges in MySQL SQL\nDESCRIPTION: This SQL snippet grants INSERT privileges on the 'city' column and SELECT privileges on the 'city_id' column of the 'sakila.city' table to the user 'sally' from any host. The snippet is used for fine-grained access control, allowing specific actions only on defined columns. Requires the MySQL server, the 'sakila' schema, and a pre-existing 'sally' user; inputs are the privilege type, columns, table, and user, and there are no outputs except updated privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nGRANT INSERT (city), SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Latency Summary Tables in MySQL\nDESCRIPTION: SQL table definitions for user_summary_by_statement_latency and x$user_summary_by_statement_latency views tracking overall statement execution statistics per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_99\n\nLANGUAGE: SQL\nCODE:\n```\ndesc user_summary_by_statement_latency;\ndesc x$user_summary_by_statement_latency;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table Privileges Table (tables_priv)\nDESCRIPTION: Defines the structure for the tables_priv table in the mysql database, which stores table-level privileges. It includes columns for host, database, user, table name, grantor, timestamp, table privileges, and column privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Selecting Column from bar_tbl in MySQL\nDESCRIPTION: A simple SELECT query retrieving a column from bar_tbl in the bar database. This query executed 3 times with an average execution time of 12μs and was run by the SQL_SLAVE user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: Query Performance Report - mytopuser\nDESCRIPTION: Performance analysis for user 'mytopuser' showing 2 QPS with 0.15x concurrency. Includes execution time, lock time, rows sent/examined metrics with time distribution patterns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report_user.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Item 1: 2 QPS, 0.15x concurrency, ID 0x628E12FCDECDAA2D4F1658C9B243995F at byte 174\n# This item is included in the report because it matches --limit.\n# Scores: V/M = 0.15\n# Time range: 2008-11-27 08:51:20 to 08:51:21\n# Attribute    pct   total     min     max     avg     95%  stddev  median\n# ============ === ======= ======= ======= ======= ======= ======= =======\n# Count         40       2\n# Exec time     99   149ms     5us   149ms    75ms   149ms   106ms    75ms\n# Lock time    100    70us       0    70us    35us    70us    49us    35us\n# Rows sent    100     226       0     226     113     226  159.81     113\n# Rows examine 100     226       0     226     113     226  159.81     113\n# Query size    50      38      11      27      19      27   11.31      19\n# String:\n# Databases    test\n# Hosts        10.1.12.201\n# Query_time distribution\n#   1us  ################################################################\n#  10us\n# 100us\n#   1ms\n#  10ms\n# 100ms  ################################################################\n#    1s\n#  10s+\nmytopuser\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet Capture for MySQL Communication\nDESCRIPTION: This snippet shows a series of TCP packet captures between two IP addresses, likely representing MySQL client-server communication. It includes timestamps, IP addresses, port numbers, and hexadecimal representations of packet contents.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump044.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2013-01-22 09:55:53.973868 IP 100.0.0.2.44432 > 100.0.0.1.3306: tcp 0\n\t0x0000:  4510 003c bbae 4000 4006 f033 0a1c bd48\n\t0x0010:  0a1c bd49 ad90 0cea af89 ab81 0000 0000\n\t0x0020:  a002 16d0 f7a5 0000 0204 05b4 0402 080a\n\t0x0030:  850b 102f 0000 0000 0103 0307\n2013-01-22 09:55:53.973885 IP 100.0.0.1.3306 > 100.0.0.2.44432: tcp 0\n\t0x0000:  4500 003c 0000 4000 4006 abf2 0a1c bd49\n\t0x0010:  0a1c bd48 0cea ad90 bcdd 5ddd af89 ab82\n\t0x0020:  a012 16a0 e720 0000 0204 05b4 0402 080a\n\t0x0030:  7a96 7b52 850b 102f 0103 0307\n2013-01-22 09:55:53.973886 IP 100.0.0.1.3306 > 100.0.0.2.44432: tcp 0\n\t0x0000:  4500 003c 0000 4000 4006 abf2 0a1c bd49\n\t0x0010:  0a1c bd48 0cea ad90 bcdd 5ddd af89 ab82\n\t0x0020:  a012 16a0 e720 0000 0204 05b4 0402 080a\n\t0x0030:  7a96 7b52 850b 102f 0103 0307\n2013-01-22 09:55:53.973929 IP 100.0.0.2.44432 > 100.0.0.1.3306: tcp 0\n\t0x0000:  4510 0034 bbaf 4000 4006 f03a 0a1c bd48\n\t0x0010:  0a1c bd49 ad90 0cea af89 ab82 bcdd 5dde\n\t0x0020:  8010 002e 2c5f 0000 0101 080a 850b 102f\n\t0x0030:  7a96 7b52\n2013-01-22 09:55:53.974017 IP 100.0.0.1.3306 > 100.0.0.2.44432: tcp 113\n\t0x0000:  4508 00a5 268c 4000 4006 84f5 0a1c bd49\n\t0x0010:  0a1c bd48 0cea ad90 bcdd 5dde af89 ab82\n\t0x0020:  8018 002e 8f61 0000 0101 080a 7a96 7b52\n\t0x0030:  850b 102f 6d00 0000 0a35 2e35 2e32 382d\n\t0x0040:  656e 7465 7270 7269 7365 2d63 6f6d 6d65\n\t0x0050:  7263 6961 6c2d 6164 7661 6e63 6564 2d6c\n\t0x0060:  6f67 000d 0000 006c 706d 5338 5d4a 3c00\n\t0x0070:  fff7 0802 000f 8015 0000 0000 0000 0000\n\t0x0080:  0000 2f72 7265 247e 7347 4565 4f3c 006d\n\t0x0090:  7973 716c 5f6e 6174 6976 655f 7061 7373\n\t0x00a0:  776f 7264 00\n2013-01-22 09:55:53.974019 IP 100.0.0.1.3306 > 100.0.0.2.44432: tcp 113\n\t0x0000:  4508 00a5 268c 4000 4006 84f5 0a1c bd49\n\t0x0010:  0a1c bd48 0cea ad90 bcdd 5dde af89 ab82\n\t0x0020:  8018 002e 8f61 0000 0101 080a 7a96 7b52\n\t0x0030:  850b 102f 6d00 0000 0a35 2e35 2e32 382d\n\t0x0040:  656e 7465 7270 7269 7365 2d63 6f6d 6d65\n\t0x0050:  7263 6961 6c2d 6164 7661 6e63 6564 2d6c\n\t0x0060:  6f67 000d 0000 006c 706d 5338 5d4a 3c00\n\t0x0070:  fff7 0802 000f 8015 0000 0000 0000 0000\n\t0x0080:  0000 2f72 7265 247e 7347 4565 4f3c 006d\n\t0x0090:  7973 716c 5f6e 6174 6976 655f 7061 7373\n\t0x00a0:  776f 7264 00\n2013-01-22 09:55:53.974064 IP 100.0.0.2.44432 > 100.0.0.1.3306: tcp 0\n\t0x0000:  4510 0034 bbb0 4000 4006 f039 0a1c bd48\n\t0x0010:  0a1c bd49 ad90 0cea af89 ab82 bcdd 5e4f\n\t0x0020:  8010 002e 2bee 0000 0101 080a 850b 102f\n\t0x0030:  7a96 7b52\n2013-01-22 09:55:57.793375 IP 100.0.0.2.44432 > 100.0.0.1.3306: tcp 0\n\t0x0000:  4510 0034 bbb1 4000 4006 f038 0a1c bd48\n\t0x0010:  0a1c bd49 ad90 0cea af89 ab82 bcdd 5e4f\n\t0x0020:  8011 002e 1d02 0000 0101 080a 850b 1f1a\n\t0x0030:  7a96 7b52\n2013-01-22 09:55:57.793485 IP 100.0.0.1.3306 > 100.0.0.2.44432: tcp 0\n\t0x0000:  4508 0034 268d 4000 4006 8565 0a1c bd49\n\t0x0010:  0a1c bd48 0cea ad90 bcdd 5e4f af89 ab83\n\t0x0020:  8011 002e 0e16 0000 0101 080a 7a96 8a3d\n\t0x0030:  850b 1f1a\n2013-01-22 09:55:57.793489 IP 100.0.0.1.3306 > 100.0.0.2.44432: tcp 0\n\t0x0000:  4508 0034 268d 4000 4006 8565 0a1c bd49\n\t0x0010:  0a1c bd48 0cea ad90 bcdd 5e4f af89 ab83\n\t0x0020:  8011 002e 0e16 0000 0101 080a 7a96 8a3d\n\t0x0030:  850b 1f1a\n2013-01-22 09:55:57.793529 IP 100.0.0.2.44432 > 100.0.0.1.3306: tcp 0\n\t0x0000:  4510 0034 bbb2 4000 4006 f037 0a1c bd48\n\t0x0010:  0a1c bd49 ad90 0cea af89 ab83 bcdd 5e50\n\t0x0020:  8010 002e 0e15 0000 0101 080a 850b 1f1b\n\t0x0030:  7a96 8a3d\n```\n\n----------------------------------------\n\nTITLE: Converting Picoseconds to Human-Readable Time in MySQL\nDESCRIPTION: This function converts a raw picoseconds value to a human-readable time format. It's useful for interpreting latency values from Performance Schema, which are stored in picoseconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_121\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT format_time(342342342342345);\nSELECT format_time(342342342);\nSELECT format_time(34234);\n```\n\n----------------------------------------\n\nTITLE: Querying blah Table with IS NOT NULL Condition in MySQL\nDESCRIPTION: SQL queries selecting all columns from the 'blah' table where id is not null. These queries have significantly longer execution times (1.000012 and 0.900012 seconds), indicating potential performance issues with this query pattern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow053.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM blah WHERE id IS NOT NULL;\n\nSELECT * FROM blah WHERE id IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Describing schema_table_statistics_with_buffer Structure in MySQL\nDESCRIPTION: Shows the structure of the schema_table_statistics_with_buffer view, which provides detailed statistics on table usage including buffer pool information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_68\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_table_statistics_with_buffer;\n+----------------------------+---------------------+------+-----+---------+-------+\n| Field                      | Type                | Null | Key | Default | Extra |\n+----------------------------+---------------------+------+-----+---------+-------+\n| table_schema               | varchar(64)         | YES  |     | NULL    |       |\n| table_name                 | varchar(64)         | YES  |     | NULL    |       |\n| rows_fetched               | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency              | text                | YES  |     | NULL    |       |\n| rows_inserted              | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency             | text                | YES  |     | NULL    |       |\n| rows_updated               | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency             | text                | YES  |     | NULL    |       |\n| rows_deleted               | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency             | text                | YES  |     | NULL    |       |\n| io_read_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read                    | text                | YES  |     | NULL    |       |\n| io_read_latency            | text                | YES  |     | NULL    |       |\n| io_write_requests          | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write                   | text                | YES  |     | NULL    |       |\n| io_write_latency           | text                | YES  |     | NULL    |       |\n| io_misc_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency            | text                | YES  |     | NULL    |       |\n| innodb_buffer_allocated    | text                | YES  |     | NULL    |       |\n| innodb_buffer_data         | text                | YES  |     | NULL    |       |\n| innodb_buffer_free         | text                | YES  |     | NULL    |       |\n| innodb_buffer_pages        | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_hashed | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_old    | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_rows_cached  | decimal(44,0)       | YES  |     | 0       |       |\n+----------------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Disk Statistics (/proc/diskstats) with Timestamps\nDESCRIPTION: A time-series log of disk I/O statistics, likely collected by a monitoring tool in Percona Toolkit. The data is timestamped (TS lines) and follows the format of the Linux /proc/diskstats file, showing various metrics for each device including reads/writes completed, sectors read/written, and I/O time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n   1    2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1    3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1    4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1    5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1    6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1    7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1    8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1    9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1   10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1   11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1   12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1   13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1   14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1   15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489522 163771322 245685 758230933 452644452 198295573 66 218108996 0 621587627 976428376\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n   8    6 sda6 298706365 152558886 241499 716929098 451255886 189725611 64 125378195 0 601265765 842399154\n   8   16 sdb 297 733 8240 197 0 0 0 0 0 189 197\n   8   32 sdc 328 733 8488 129 0 0 0 0 0 128 129\n 253    0 dm-0 1418194 0 27251106 5776302 27005127 0 216041016 57460473 0 5590539 63255190\n 253    1 dm-1 135872 0 1874778 319681 1634554 0 13076432 6656160 0 827246 6975805\n 253    2 dm-2 126266 0 1587922 489749 1990039 0 15920312 1617249 0 1606274 2106992\n 253    3 dm-3 39108 0 317138 171804 76791584 0 614332672 174357398 0 6519480 174576802\n 253    4 dm-4 4462420 0 101415522 11644533 30110984 0 240887872 29641968 0 8894655 41287602\n 253    5 dm-5 652603 0 18833426 916973 6500871 0 52006968 4317032 0 2440835 5234205\n 253    6 dm-6 444430215 0 51182354210 795935712 496948358 0 12885115816 119567413 0 583873609 915519227\n  11    0 sr0 0 0 0 0 0 0 0 0 0 0 0\n   8   48 sdd 0 0 0 0 0 0 0 0 0 0 0\n  11    1 sr1 0 0 0 0 0 0 0 0 0 0 0\n   9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998406 6091475920 49403814184 2173805850 0 919421283 3016071553\nTS 1283888757.530021000\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Binlog Index Table in SQL\nDESCRIPTION: Designed for the ndb_binlog_index table, this snippet tracks binary log indices, storing data characteristics and modifications over time. Key identifiers include epoch, orig_server_id, and orig_epoch in the primary key sequence.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint unsigned NOT NULL,\n  `inserts` int unsigned NOT NULL,\n  `updates` int unsigned NOT NULL,\n  `deletes` int unsigned NOT NULL,\n  `schemaops` int unsigned NOT NULL,\n  `orig_server_id` int unsigned NOT NULL,\n  `orig_epoch` bigint unsigned NOT NULL,\n  `gci` int unsigned NOT NULL,\n  `next_position` bigint unsigned NOT NULL,\n  `next_file` varchar(255) NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=latin1 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.password_history` Table in SQL\nDESCRIPTION: Defines the `password_history` table in the `mysql` database. This table stores a history of passwords used by user accounts (Host, User), including the timestamp when the password was set. It's used to enforce password reuse policies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `password_history` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Password_timestamp` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `Password` text COLLATE utf8mb3_bin,\n  PRIMARY KEY (`Host`,`User`,`Password_timestamp` DESC)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Password history for user accounts'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Privilege and System Tables\nDESCRIPTION: Collection of system table definitions including procs_priv, servers, tables_priv, and various time zone related tables. These tables store MySQL server configuration, user privileges and time zone data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges';\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'time_zone_name' Table\nDESCRIPTION: Drops the existing `time_zone_name` table if it exists and then creates it. This table maps time zone names (e.g., 'America/New_York') to their corresponding time zone IDs. It uses the MyISAM engine and the utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Table structure for table `time_zone_name`\n--\n\nDROP TABLE IF EXISTS `time_zone_name`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone names';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Defining User Summary by Statement Type Table Structure\nDESCRIPTION: SQL table definitions for user_summary_by_statement_type and x$user_summary_by_statement_type views showing statistics grouped by SQL statement types per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_94\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_statement_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| user          | varchar(32)         | YES  |     | NULL    |       |\n| statement     | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Information - PostgreSQL SQL\nDESCRIPTION: Retrieves cluster information from pg_stat_activity view showing current database activity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_stat_activity\n```\n\n----------------------------------------\n\nTITLE: Creating city Table in sakila using SQL\nDESCRIPTION: Defines the `city` table within the `sakila` sample database. This table stores city names and includes a foreign key (`country_id`) linking to the `country` table. It also records the last update timestamp and uses the InnoDB engine with an `ON UPDATE CASCADE` constraint.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Displaying Active InnoDB Transaction Details (Text)\nDESCRIPTION: This section details an active transaction within InnoDB. It shows the transaction ID counter, the purge status indicating the oldest transaction for which history has been purged, the current history list length, and details for a specific active transaction (ID FC593C34E). Information includes activity duration, process/thread IDs, current state ('estimating records in index range'), MySQL tables in use/locked, MySQL thread ID, query ID, client host, user, and the specific SQL query being executed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n------------\nTRANSACTIONS\n------------\nTrx id counter FC593C7D1\nPurge done for trx's n:o < FC593B63D undo n:o < 0\nHistory list length 255\n---TRANSACTION FC593C34E, ACTIVE 3 sec, process no 28376, OS thread id 139960819632464 estimating records in index range\nmysql tables in use 1, locked 0\nMySQL thread id 1853546, query id 1127695932 foo.pos.net 10.66.209.223 user_foo statistics\n```\n\n----------------------------------------\n\nTITLE: Example IO Global Wait by Bytes Data\nDESCRIPTION: Demonstrates sample output from the io_global_by_wait_by_bytes table showing various I/O events with their corresponding metrics including read/write statistics and latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from io_global_by_wait_by_bytes;\n+--------------------+--------+---------------+-------------+-------------+-------------+------------+------------+-----------+-------------+---------------+-------------+-----------------+\n| event_name         | total  | total_latency | min_latency | avg_latency | max_latency | count_read | total_read | avg_read  | count_write | total_written | avg_written | total_requested |\n+--------------------+--------+---------------+-------------+-------------+-------------+------------+------------+-----------+-------------+---------------+-------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Store Table in SQL\nDESCRIPTION: This SQL command defines the `store` table within the Sakila database schema. It includes columns for store ID, manager staff ID, address ID, and the last update timestamp. The primary key is `store_id`, and there's a unique constraint on `manager_staff_id` (`idx_unique_manager`). Foreign key constraints (`fk_store_staff`, `fk_store_address`) link this table to the `staff` (for the manager) and `address` tables. An index is also defined for the `address_id`, and the table uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment-5.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Film Actor Junction Table in MySQL\nDESCRIPTION: Creates the film_actor table to establish many-to-many relationship between films and actors. Contains foreign keys to both tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Process Order by Condition in New Forum - MySQL\nDESCRIPTION: This SQL query retrieves records from 'newforum' filtered by 'pplid' and 'front' fields, ordered by 'id' in descending order, and limits the output to the first 5 entries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM newforum WHERE pplid='379161' AND front='yes' ORDER BY id DESC LIMIT 0,5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Creation Statement for mybbl_MBMessage Table in SQL\nDESCRIPTION: This SQL command displays the `CREATE TABLE` statement used to create the 'mybbl_MBMessage' table, showing its structure, columns, indexes, and constraints. It's included in the report to provide schema context for the analyzed query. The `\\G` terminator requests vertical output format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow050.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `mybbl_MBMessage`\\G\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.proxies_priv` Table in SQL\nDESCRIPTION: Defines the `proxies_priv` table in the `mysql` database. This table is used to manage proxy user relationships, specifying which users (identified by Host and User) can act as proxies for other users. The definition is incomplete in the provided snippet.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n```\n\n----------------------------------------\n\nTITLE: Creating User Defined Functions Table in MySQL\nDESCRIPTION: Defines a table for storing MySQL user-defined functions with attributes like name, return type, and associated dynamic library. The table employs MyISAM engine and utf8 character set ensuring storage for custom functions. Each function is uniquely identified by its name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions';\n```\n\n----------------------------------------\n\nTITLE: Monitoring Block Device Statistics with Timestamps in Linux\nDESCRIPTION: This data represents block device statistics captured at regular intervals (approximately 1 second apart) in a Linux system. Each line shows various performance metrics for devices including RAM blocks, physical disks (sda, sdb, etc.), device mapper volumes (dm-*), and storage devices (emcpowera). The data is timestamped and formatted in columns showing read/write operations, sectors, and timing information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n   1    2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1    3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1    4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1    5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1    6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1    7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1    8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1    9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1   10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1   11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1   12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1   13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1   14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1   15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489543 163771322 245685 758231032 452645244 198295904 66 218109181 0 621587781 976428658\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n   8    6 sda6 298706386 152558886 241499 716929197 451256678 189725942 64 125378380 0 601265919 842399436\n   8   16 sdb 297 733 8240 197 0 0 0 0 0 189 197\n   8   32 sdc 328 733 8488 129 0 0 0 0 0 128 129\n 253    0 dm-0 1418194 0 27251106 5776302 27005223 0 216041784 57460474 0 5590540 63255191\n 253    1 dm-1 135872 0 1874778 319681 1634583 0 13076664 6656160 0 827246 6975805\n 253    2 dm-2 126266 0 1587922 489749 1990042 0 15920336 1617249 0 1606274 2106992\n 253    3 dm-3 39108 0 317138 171804 76791646 0 614333168 174357398 0 6519480 174576802\n 253    4 dm-4 4462420 0 101415522 11644533 30111152 0 240889216 29642112 0 8894662 41287746\n 253    5 dm-5 652603 0 18833426 916973 6500904 0 52007232 4317034 0 2440836 5234207\n 253    6 dm-6 444430236 0 51182354666 795935811 496949090 0 12885147280 119567537 0 583873755 915519450\n  11    0 sr0 0 0 0 0 0 0 0 0 0 0 0\n   8   48 sdd 0 0 0 0 0 0 0 0 0 0 0\n  11    1 sr1 0 0 0 0 0 0 0 0 0 0 0\n   9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998415 6091475942 49403814432 2173805870 0 919421303 3016071573\nTS 1283888771.573425000\n```\n\n----------------------------------------\n\nTITLE: MySQL File I/O Summary Table Structure\nDESCRIPTION: Shows the structure for user_summary_by_file_io and x$user_summary_by_file_io views that track file I/O metrics per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_87\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| user       | varchar(32)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | text          | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Creating Language Table in MySQL\nDESCRIPTION: Creates the language lookup table to store available film languages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Converting UPDATE to SELECT for EXPLAIN Analysis in MySQL\nDESCRIPTION: This SQL snippet shows the conversion of the UPDATE query to a SELECT query for the purpose of using the EXPLAIN command. It selects from the same table with the same WHERE condition as the original UPDATE query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_filtered.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect     boop='bop: 899' from bizzle.bat where   fillze='899'\\G\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query for Analysis\nDESCRIPTION: The SQL snippet is used to execute a simple query that retrieves a static string as a greeting. It provides context for the performance analysis conducted with Percona Toolkit. There are no specific dependencies, but it assumes a MySQL environment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect \"hello world\" as greeting\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes Table\nDESCRIPTION: Creates a table named 'indexes' to store metadata about database, table, and index usage, including the count of usage. Required fields include database name, table name, index name, and count. The primary key is a composite of the database, table, and index names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_miu.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS indexes (\n  db           VARCHAR(64) NOT NULL,\n  tbl          VARCHAR(64) NOT NULL,\n  idx          VARCHAR(64) NOT NULL,\n  cnt          BIGINT UNSIGNED NOT NULL DEFAULT 0,\n  PRIMARY KEY  (db, tbl, idx)\n)\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL ps_check_lost_instrumentation Table\nDESCRIPTION: Demonstrates how to query the ps_check_lost_instrumentation table to check for lost Performance Schema instrumentation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_49\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from ps_check_lost_instrumentation;\n+----------------------------------------+----------------+\n| variable_name                          | variable_value |\n+----------------------------------------+----------------+\n| Performance_schema_file_handles_lost   | 101223         |\n| Performance_schema_file_instances_lost | 1231           |\n+----------------------------------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query from foo Table\nDESCRIPTION: Basic SELECT query retrieving all records from 'foo' table. Shows consistent performance metrics with query time of 0.726052s, lock time of 0.000091s, examining 62951 rows with full table scan but no temporary tables or filesort operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Finding Next Chunk Boundary for Chunked Checksumming in sakila.city\nDESCRIPTION: This query retrieves the next chunk boundary for processing by selecting country_id values. It uses SQL_NO_CACHE to avoid caching results and forces the use of the idx_fk_country_id index on the sakila.city table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx004.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `country_id` FROM `sakila`.`city` FORCE INDEX(`idx_fk_country_id`) WHERE ((`country_id` >= ?)) AND (country_id > 100) ORDER BY `country_id` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Replication Group Configuration Version Table\nDESCRIPTION: Defines table for storing group configuration version information with name and version tracking.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `replication_group_configuration_version` (\n  `name` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'The configuration name.',\n  `version` bigint unsigned NOT NULL COMMENT 'The version of the configuration name.',\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='The group configuration version.'\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Stats at Timestamp 5.1 Text\nDESCRIPTION: This block shows disk I/O statistics captured at timestamp 5.1. It includes metrics like megabytes read/written per second (rd_mb_s, wr_mb_s), read/write concurrency (rd_cnc, wr_cnc), read/write response time (rd_rt, wr_rt), device busy percentage (busy), and in-progress requests (in_prg) for devices like ram*, sda*, sr*, md*, and loop*.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-004.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n5.1 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.1 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Monitoring Device I/O Performance Metrics\nDESCRIPTION: Console output showing performance metrics for block devices. Each line shows metrics including timestamp, device name, read/write MB/s, concurrency, response times, busy percentage and in-progress operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n86.3 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n86.3 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n86.3 sda           0.0    0.0     1.2     0.0    0.0     0.1   1%      0\n86.3 dm-6          0.0    0.0     1.2     0.2    0.0     0.1   1%      0\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into MySQL\nDESCRIPTION: This SQL snippet inserts new records into the `bidi`.`t` table. It specifies values for the fields `id`, `c`, `d`, and `ts`. The operation introduces new rows into the database with pre-defined values for each column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/bidirectional/queries001.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `bidi`.`t`(`id`, `c`, `d`, `ts`) VALUES ('11', '?', '0', '2010-01-29 11:17:12');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `bidi`.`t`(`id`, `c`, `d`, `ts`) VALUES ('17', 'good', '1', '2010-02-02 21:38:03');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `bidi`.`t`(`id`, `c`, `d`, `ts`) VALUES ('20', 'new', '100', '2010-02-01 04:15:36');\n```\n\n----------------------------------------\n\nTITLE: Creating entity Table in MySQL\nDESCRIPTION: Defines an entity table with two property columns and an auto-incrementing ID. Includes a unique constraint on both property columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS `entity`;\nCREATE TABLE `entity` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `entity_property_1` varchar(16) DEFAULT NULL,\n  `entity_property_2` varchar(16) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `entity_property_1` (`entity_property_1`,`entity_property_2`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Explaining Query Execution Plan in MySQL\nDESCRIPTION: This command uses `EXPLAIN` to show the MySQL optimizer's execution plan for the `SELECT` query targeting the 'foo' table with a condition on the 'id' column. It includes a version-specific comment `/*!50100 PARTITIONS*/` to request partition information on compatible servers (MySQL 5.1.0+). The `\\G` indicates a request for vertical output format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow054.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM foo WHERE id=1\\G\n```\n\n----------------------------------------\n\nTITLE: Creating language lookup table in SQL\nDESCRIPTION: Creates the language table to store available film languages. This is a simple lookup table with an auto-incrementing ID, language name, and last update timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Help Category Table in MySQL\nDESCRIPTION: Defines a table to categorize help topics within MySQL, containing category ID, name, parent category, and URL. Utilizes MyISAM engine and utf8 character set. Each category is uniquely identified by its name to ensure that help content is structured efficiently.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories';\n```\n\n----------------------------------------\n\nTITLE: MySQL Binary Log with Insert Operations and Transaction Control\nDESCRIPTION: A complete MySQL binary log segment showing insert operations into the test2 database. The log includes server identification (ID 12345), timestamps, position markers, and thread information. It demonstrates both a database-specified insert and a fully qualified table insert, ending with an automatically added rollback and variable restoration.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog009.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER /*!*/;\n# at 498008760\n#100429 08:23:10 server id 12345  end_log_pos 28  Query\tthread_id=10\texec_time=0  error_code=0\nuse test2/*!*/;\ninsert into t values (1,2,3)/*!*/;\n# at 498008762\n#100429 08:23:12 server id 12345  end_log_pos 28  Query\tthread_id=10\texec_time=0  error_code=0\ninsert into test2.t values (1,2,3)/*!*/;\n# End of log file\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n```\n\n----------------------------------------\n\nTITLE: Creating Stored Procedures Table in MySQL\nDESCRIPTION: Schema definition for the proc table that stores stored procedure and function metadata including parameters, body, security settings and character encoding details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures';\n```\n\n----------------------------------------\n\nTITLE: Enabling Background Thread Instrumentation in MySQL Performance Schema\nDESCRIPTION: Enables all background thread instrumentation within Performance Schema. This procedure takes no parameters and returns a summary of the number of background threads enabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_131\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_background_threads();\n+-------------------------------+\n| summary                       |\n+-------------------------------+\n| Enabled 18 background threads |\n+-------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining help_topic Table in SQL\nDESCRIPTION: Creates the `help_topic` table in the `mysql` database, which stores the actual content for the server's built-in help system. It contains the topic ID, name (title), associated category ID, a detailed description, example usage, and a related URL. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View for Staff Directory\nDESCRIPTION: Creates a view that displays comprehensive staff information including full name and complete address details. Joins staff, address, city and country tables for location information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 VIEW `staff_list` AS select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,_utf8' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`staff` `s` join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL schema_redundant_indexes Structure\nDESCRIPTION: Shows the table structure for schema_redundant_indexes which identifies duplicate or redundant indexes in MySQL tables. It includes information about both the redundant index and the dominant index that makes it unnecessary.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_61\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.schema_redundant_indexes;\n+----------------------------+--------------+------+-----+---------+-------+\n| Field                      | Type         | Null | Key | Default | Extra |\n+----------------------------+--------------+------+-----+---------+-------+\n| table_schema               | varchar(64)  | NO   |     |         |       |\n| table_name                 | varchar(64)  | NO   |     |         |       |\n| redundant_index_name       | varchar(64)  | NO   |     |         |       |\n| redundant_index_columns    | text         | YES  |     | NULL    |       |\n| redundant_index_non_unique | bigint(1)    | YES  |     | NULL    |       |\n| dominant_index_name        | varchar(64)  | NO   |     |         |       |\n| dominant_index_columns     | text         | YES  |     | NULL    |       |\n| dominant_index_non_unique  | bigint(1)    | YES  |     | NULL    |       |\n| subpart_exists             | int(1)       | NO   |     | 0       |       |\n| sql_drop_index             | varchar(223) | YES  |     | NULL    |       |\n+----------------------------+--------------+------+-----+---------+-------+\n10 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table Structure in MySQL\nDESCRIPTION: SQL script to create the rental table with various columns including primary and foreign keys. The table includes columns for tracking rental activities with appropriate data types and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying Row Count with WHERE Conditions - SQL\nDESCRIPTION: Retrieves the total number of rows from the 'nospawn' table for a given userid and spawnid using the COUNT aggregate. No external dependencies exist, but requires SELECT access to the specified table. Accepts numeric values for filtering and returns a single count value; intended for summary statistics or presence checks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT count(*) FROM nospawn WHERE userid=2247865 AND spawnid=15723\n```\n\n----------------------------------------\n\nTITLE: Managing User Creation and Permissions in MySQL SQL\nDESCRIPTION: This SQL snippet creates a user named 'sally' (if it does not already exist), alters the user's authentication settings, and assigns specific privileges at the column level on various tables. It includes commands to set the authentication method, handle password and account settings, and grant INSERT and SELECT privileges on specific fields. Dependencies include a MySQL database with the 'sakila' and 'test' schemas present. Input parameters include the username, host, and affected table/column names. The output is an updated user account with the configured grants in the MySQL server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-84.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'caching_sha2_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Full-Text Index with EXPLAIN - SQL\nDESCRIPTION: This SQL code sets the database context to 'sakila' and uses the EXPLAIN statement to analyze a full-text search query on the 'film_text' table. The query matches the 'title' and 'description' columns against the term 'DINOSAUR' using MySQL's full-text search. Prerequisites include access to a MySQL server with the 'sakila' database and a properly indexed 'film_text' table. EXPLAIN outputs details about how MySQL would execute the query, including possible index usage and row examination, aiding performance tuning.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 071015 21:43:52\\n# Query_time: 2  Lock_time: 0  Rows_sent: 1  Rows_examined: 0\\nuse sakila;\\nEXPLAIN select * from film_text where match(title, description) against ('DINOSAUR');\n```\n\n----------------------------------------\n\nTITLE: Querying Statement Analysis Example Output - SQL\nDESCRIPTION: Displays the result of a sample SELECT on statement_analysis, showing how normalized and aggregated query statistics appear. This snippet includes values for query text truncation, execution counts, latencies, row counts, and temporal data. Requires the sys schema and at least one data row in the view; input is a LIMIT query, output is a single row of statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_81\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statement_analysis limit 1\\G\n*************************** 1. row ***************************\n            query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n               db: sys\n        full_scan: *\n       exec_count: 2\n        err_count: 0\n       warn_count: 0\n    total_latency: 16.75 s\n      max_latency: 16.57 s\n      avg_latency: 8.38 s\n     lock_latency: 16.69 s\n        rows_sent: 84\n    rows_sent_avg: 42\n    rows_examined: 20012\nrows_examined_avg: 10006\n    rows_affected: 0\nrows_affected_avg: 0\n       tmp_tables: 378\n  tmp_disk_tables: 66\n      rows_sorted: 168\nsort_merge_passes: 0\n           digest: 54f9bd520f0bbf15db0c2ed93386bec9\n       first_seen: 2014-03-07 13:13:41\n        last_seen: 2014-03-07 13:13:48\n```\n\n----------------------------------------\n\nTITLE: Batch Insert with Range Condition (First Batch)\nDESCRIPTION: Performs a locked read and insert operation copying rows where id is less than 4 from table 't' to '__new_t'. Uses IGNORE to skip duplicates and LOCK IN SHARE MODE for concurrency control.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/copyins003.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT IGNORE INTO osc.__new_t (`id`, `space col`) SELECT `id`, `space col` FROM osc.t WHERE (id < 4) LOCK IN SHARE MODE\n```\n\n----------------------------------------\n\nTITLE: Finding Information About Nodes\nDESCRIPTION: Retrieve node information using pt-galera-log-explainer. Supports querying with various data types including node names, IPs, or UUIDs. Output can be formatted in JSON.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer [flags] whois [--json] [--type { nodename | ip | uuid | auto }] <information to search> <paths ...>\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer whois '218469b2' mysql.log\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer whois '172.17.0.3' mysql.log\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer whois 'galera-node2' mysql.log\n```\n\n----------------------------------------\n\nTITLE: MySQL Client INSERT Query Packet\nDESCRIPTION: Network packet showing MySQL client sending an INSERT INTO test.t values(1) query to the server\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump005.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n0x0000:  4508 0055 8050 4000 4006 bc48 7f00 0001\n0x0010:  7f00 0001 d804 0cea 1b4c dfd1 1b00 8f43\n0x0020:  8018 0212 fe49 0000 0101 080a 0084 2319\n0x0030:  0083 96db 1d00 0000 0369 6e73 6572 7420\n0x0040:  696e 746f 2074 6573 742e 7420 7661 6c75\n0x0050:  6573 2831 29\n```\n\n----------------------------------------\n\nTITLE: Defining Shebang Script Language in Natural Docs Configuration\nDESCRIPTION: Configures the Shebang Script language which determines the actual language based on the file's shebang line.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Shebang Script\n\n   Extension: cgi\n```\n\n----------------------------------------\n\nTITLE: Creating Category Table in Sakila Schema\nDESCRIPTION: This table contains film category data, needing only minimal indexing. Implements InnoDB storage engine and utf8 encoding, designed for indexing on the category_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Starting a Transaction with BEGIN in SQL\nDESCRIPTION: This SQL command initiates a new transaction. It's typically used to group multiple SQL statements into a single atomic operation that can be committed or rolled back.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN\n```\n\n----------------------------------------\n\nTITLE: Displaying Create Table Statement for Trees in SQL\nDESCRIPTION: A command to show the CREATE TABLE statement for the 'trees' table in the 'food' database. This is useful for understanding the table structure and indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_1-80.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\\G\n```\n\n----------------------------------------\n\nTITLE: Querying Lock Code by User ID - SQL\nDESCRIPTION: Selects the 'code' field from the 'locks' table filtered by a specific userid. Designed to retrieve current lock tokens or codes for a user. Requires SELECT on 'locks'. Input is a string or integer for userid; result is one or multiple rows depending on the data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT code FROM locks WHERE userid='2526702'\n```\n\n----------------------------------------\n\nTITLE: MySQL EXPLAIN Output\nDESCRIPTION: Detailed EXPLAIN analysis of the SELECT query showing execution plan details including index usage and table scan information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_1-57.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# *************************** 1. row ***************************\n#            id: 1\n#   select_type: SIMPLE\n#         table: trees\n#    partitions: NULL\n#          type: index\n# possible_keys: NULL\n#           key: fruit\n#       key_len: 27\n#           ref: NULL\n#          rows: 1\n#      filtered: 100.00\n#         Extra: Using index\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Type Summary Tables in MySQL\nDESCRIPTION: SQL table definitions for user_summary_by_statement_type and x$user_summary_by_statement_type views tracking execution statistics grouped by statement type per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_101\n\nLANGUAGE: SQL\nCODE:\n```\ndesc user_summary_by_statement_type;\ndesc x$user_summary_by_statement_type;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in MySQL\nDESCRIPTION: Defines the `payment` table with fields for payment details, including `customer_id`, `staff_id`, and foreign key constraints linking to `rental`, `customer`, and `staff` tables. It requires a MySQL database supporting InnoDB engine and UTF-8 character set. The table facilitates tracking payments with automatic timestamp updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL auto_increment,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) default NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Process List Table\nDESCRIPTION: This snippet uses the MySQL DESCRIBE command to display the structure of the 'processlist' table, outlining its 28 fields and respective data types, which are crucial for managing and monitoring active database connections and operations. This table is foundational for acquiring an overview of current database processes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc processlist;\\n+------------------------+------------------------------------------+------+-----+---------+-------+\\n| Field                  | Type                                     | Null | Key | Default | Extra |\\n+------------------------+------------------------------------------+------+-----+---------+-------+\\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\\n| command                | varchar(16)                              | YES  |     | NULL    |       |\\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\\n| statement_latency      | text                                     | YES  |     | NULL    |       |\\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\\n| lock_latency           | text                                     | YES  |     | NULL    |       |\\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| full_scan              | varchar(3)                               | NO   |     |         |       |\\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\\n| last_statement_latency | text                                     | YES  |     | NULL    |       |\\n| current_memory         | text                                     | YES  |     | NULL    |       |\\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\\n| last_wait_latency      | text                                     | YES  |     | NULL    |       |\\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\\n| trx_latency            | text                                     | YES  |     | NULL    |       |\\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\\n+------------------------+------------------------------------------+------+-----+---------+-------+\\n28 rows in set (0.04 sec)\n```\n\n----------------------------------------\n\nTITLE: Tree Details Lookup with Partner and Status Filtering\nDESCRIPTION: Complex query retrieving tree details with multiple joins across tree, reservation chain, tree code and pool instance tables. Includes filtering on active status, tree codes, and partner IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect tree0_.treeid as col_0_0_, treecode1_.partnercode as col_1_0_, tree0_.partnerid as col_2_0_, tree0_.qcnscrsid as col_3_0_, tree0_.qcnscountryid as col_4_0_, tree0_.qcnscityid as col_5_0_, treecode1_.isactive as col_6_0_, resachain2_.isactive as col_7_0_, tree0_.name as col_8_0_ from tree tree0_, RESACHAIN resachain2_, treeCODE treecode1_, POOLINSTANCE poolinstan3_ where tree0_.poolinstanceid=poolinstan3_.poolinstanceid and tree0_.qcnscrsid=resachain2_.qcnscrsid and tree0_.isactive=1 and tree0_.qcnstreecode='EN210166' and poolinstan3_.pooltemplateid=17 and tree0_.treestatustypeid=1 and (tree0_.qcnsstatusid in (1671 , 1673)) and (tree0_.partnerid in (1 , 2 , 3 , 4)) and tree0_.treeid=treecode1_.treeid\n```\n\n----------------------------------------\n\nTITLE: Creating User Defined Functions Table\nDESCRIPTION: This snippet creates the `func` table to store user-defined functions in MySQL. Functions are characterized by their name, return type, and type, whether simple or aggregate functions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Displaying enabled Performance Schema consumers with sys.ps_setup_show_enabled_consumers\nDESCRIPTION: This procedure shows all currently enabled Performance Schema consumers, with no parameters required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_142\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_enabled_consumers();\n\n+---------------------------+\n| enabled_consumers         |\n+---------------------------+\n| events_statements_current |\n| global_instrumentation    |\n| thread_instrumentation    |\n| statements_digest         |\n+---------------------------+\n4 rows in set (0.05 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL io_by_thread_by_latency and x$io_by_thread_by_latency Views in SQL\nDESCRIPTION: Shows the output of the `DESC` command for the `sys.io_by_thread_by_latency` and `sys.x$io_by_thread_by_latency` views. This details the structure used for reporting I/O usage per thread, including total I/O, latency metrics (total, min, avg, max), and thread identifiers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc io_by_thread_by_latency;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| user           | varchar(128)        | YES  |     | NULL    |       |\n| total          | decimal(42,0)       | YES  |     | NULL    |       |\n| total_latency  | text                | YES  |     | NULL    |       |\n| min_latency    | text                | YES  |     | NULL    |       |\n| avg_latency    | text                | YES  |     | NULL    |       |\n| max_latency    | text                | YES  |     | NULL    |       |\n| thread_id      | bigint(20) unsigned | NO   |     | NULL    |       |\n| processlist_id | bigint(20) unsigned | YES  |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n8 rows in set (0.14 sec)\n\nmysql> desc x$io_by_thread_by_latency;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| user           | varchar(128)        | YES  |     | NULL    |       |\n| total          | decimal(42,0)       | YES  |     | NULL    |       |\n| total_latency  | decimal(42,0)       | YES  |     | NULL    |       |\n| min_latency    | bigint(20) unsigned | YES  |     | NULL    |       |\n| avg_latency    | decimal(24,4)       | YES  |     | NULL    |       |\n| max_latency    | bigint(20) unsigned | YES  |     | NULL    |       |\n| thread_id      | bigint(20) unsigned | NO   |     | NULL    |       |\n| processlist_id | bigint(20) unsigned | YES  |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n8 rows in set (0.03 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating func Table in SQL\nDESCRIPTION: Defines the 'func' table for storing metadata about user-defined functions in MySQL, necessary for tracking custom functions that are introduced into MySQL databases. Includes fields like name, ret, dl, and type, with the primary key being the function name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Database with Thread ID\nDESCRIPTION: This SQL query selects a single value (the thread ID) from a table named 'foo'. It's part of a series of identical queries with incrementing thread IDs, likely used for testing or benchmarking purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 300 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Granting Select Privileges on Specific Columns in MySQL SQL\nDESCRIPTION: This statement grants SELECT privileges on the 'DateCreated', 'PaymentStat', 'PckPrice', and 'SANumber' columns of the 'test.t' table to the user 'sally' from any host. It is used to permit read access to sensitive columns without allowing access to others, relying on MySQL's column-level privilege features. Prerequisites are a running MySQL server, the 'test' schema, the 't' table, and the designated user; the input is the privilege specification and the output is modified permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Sandbox Instance with Client and Server Settings\nDESCRIPTION: This configuration file sets up a MySQL sandbox instance with specific connection parameters, path settings, and performance configurations. It includes client connection details, server port and socket configuration, file paths, buffer sizes, and replication settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc003.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n```\n\n----------------------------------------\n\nTITLE: Creating Film Category Association Table\nDESCRIPTION: Defines a junction table linking films and categories with timestamp tracking. Contains foreign key constraints to both film and category tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table with SQL in Percona Toolkit\nDESCRIPTION: The snippet demonstrates how to drop a table named 't' in the Percona Toolkit using a specific query identifier. This operation requires executing a 'DROP_TABLE' command, targeting the specific table. The query ID is used for logging or tracking purposes, providing a unique reference for the operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/drop-table-if-exists.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nQuery_id: 0x37B0DFE8884D6089AED187CD505CBD92.1\\nDROP_TABLE t\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL schema_auto_increment_columns Example\nDESCRIPTION: Example query showing the output of the schema_auto_increment_columns view, displaying auto-increment column information including current values and their ratio to maximum possible values across different tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_49\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_auto_increment_columns limit 5;\n+-------------------+-------------------+-------------+-----------+-------------+-----------+-------------+---------------------+----------------+----------------------+\n| table_schema      | table_name        | column_name | data_type | column_type | is_signed | is_unsigned | max_value           | auto_increment | auto_increment_ratio |\n+-------------------+-------------------+-------------+-----------+-------------+-----------+-------------+---------------------+----------------+----------------------+\n| test              | t1                | i           | tinyint   | tinyint(4)  |         1 |           0 |                 127 |             34 |               0.2677 |\n| mem__advisor_text | template_meta     | hib_id      | int       | int(11)     |         1 |           0 |          2147483647 |            516 |               0.0000 |\n| mem__advisors     | advisor_schedules | schedule_id | int       | int(11)     |         1 |           0 |          2147483647 |            249 |               0.0000 |\n| mem__advisors     | app_identity_path | hib_id      | int       | int(11)     |         1 |           0 |          2147483647 |            251 |               0.0000 |\n| mem__bean_config  | plists            | id          | bigint    | bigint(20)  |         1 |           0 | 9223372036854775807 |              1 |               0.0000 |\n+-------------------+-------------------+-------------+-----------+-------------+-----------+-------------+---------------------+----------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating the `func` Table - MySQL User Defined Functions Metadata - SQL\nDESCRIPTION: Creates the `func` table used by MySQL to keep track of user-defined C-UDDFs and aggregate functions. It enforces unique function names as primary keys and includes return type, dynamic library path, and function type (scalar or aggregate). Requires MyISAM and utf8_bin support. Used as metadata for function registration rather than execution; input through CREATE FUNCTION calls.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) collate utf8_bin NOT NULL default '',\n  `ret` tinyint(1) NOT NULL default '0',\n  `dl` char(128) collate utf8_bin NOT NULL default '',\n  `type` enum('function','aggregate') character set utf8 NOT NULL,\n  PRIMARY KEY  (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Analyzing InnoDB Transactional and Lock Diagnostic Output - SQL\nDESCRIPTION: This snippet consists of server-generated transactional status and lock diagnostic output from MySQL/Percona Toolkit utilities or SHOW ENGINE INNODB STATUS commands. It provides detailed insights into ongoing transactions, table and record level locks (with modes such as IX and X), OS and MySQL thread/process ids, actual queries being committed, and row (record) lock details. Inputs are generated by the server, and outputs are only for diagnostic review; no direct modifications are performed. A working MySQL/PostgreSQL database, user-level access, and sufficient privileges to run diagnostic commands are required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nRECORD LOCKS space id 149 page no 473054 n bits 304 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AE6 lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AE5, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1880934720\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 141212, query id 10041432655 10.4.223.88 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3AE6, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3AE5 lock mode IX\nRECORD LOCKS space id 146 page no 15618 n bits 232 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3AE5 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AE5 lock mode IX\nRECORD LOCKS space id 149 page no 754751 n bits 232 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AE5 lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AE0, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1268582720\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 140547, query id 10041435147 10.4.223.90 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3AE1, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3AE0 lock mode IX\nRECORD LOCKS space id 146 page no 21941 n bits 184 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3AE0 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AE0 lock mode IX\nRECORD LOCKS space id 149 page no 145185 n bits 320 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3ADD lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_stats` trx id 7C6E3ADD lock mode IX\nRECORD LOCKS space id 147 page no 974477 n bits 88 index `PRIMARY` of table `citydb`.`player_stats` trx id 7C6E3ADD lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_contracts` trx id 7C6E3ADD lock mode IX\nRECORD LOCKS space id 150 page no 17857 n bits 408 index `PRIMARY` of table `citydb`.`player_contracts` trx id 7C6E3ADD lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3ADB, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 2088335680\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 139305, query id 10041434991 10.36.63.95 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ADC, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3ADB lock mode IX\nRECORD LOCKS space id 146 page no 1888 n bits 216 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3ADB lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3ADB lock mode IX\nRECORD LOCKS space id 149 page no 42490 n bits 232 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3ADB lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3ADA, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 2035620160\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 140585, query id 10041433028 10.36.63.89 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ADB, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3ADA lock mode IX\nRECORD LOCKS space id 146 page no 18824 n bits 200 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3ADA lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3ADA lock mode IX\nRECORD LOCKS space id 149 page no 508370 n bits 368 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3ADA lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AD9, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 2049464640\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 140467, query id 10041432481 10.4.223.80 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ADA, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3AD9 lock mode IX\nRECORD LOCKS space id 146 page no 18824 n bits 200 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3ADA lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3ADA lock mode IX\nRECORD LOCKS space id 149 page no 508370 n bits 368 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3ADA lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AD9, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 2049464640\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 140467, query id 10041432481 10.4.223.80 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ADA, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3AD9 lock mode IX\nRECORD LOCKS space id 146 page no 5906 n bits 224 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3AD9 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AD9 lock mode IX\nRECORD LOCKS space id 149 page no 818257 n bits 320 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AD9 lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AD8, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1928857920\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 141173, query id 10041432674 10.4.223.86 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3AD9, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`players` trx id 7C6E3AD8 lock mode IX\nRECORD LOCKS space id 146 page no 24990 n bits 176 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3AD8 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AD8 lock mode IX\nRECORD LOCKS space id 149 page no 16707 n bits 328 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AD8 lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AD7, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1272043840\n4 lock struct(s), heap size 1216, 3 row lock(s), undo log entries 5\nMySQL thread id 140468, query id 10041439769 10.4.223.88 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3AD8, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`city_grid` trx id 7C6E3AD7 lock mode IX\nRECORD LOCKS space id 148 page no 647119 n bits 536 index `PRIMARY` of table `citydb`.`city_grid` trx id 7C6E3AD7 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AD7 lock mode IX\nRECORD LOCKS space id 149 page no 486470 n bits 368 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AD7 lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3AD3, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 2008197440\n4 lock struct(s), heap size 1216, 3 row lock(s), undo log entries 5\nMySQL thread id 140221, query id 10041438807 10.4.223.82 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3AD4, sees < 7C6E39D9\nTABLE LOCK table `citydb`.`city_grid` trx id 7C6E3AD3 lock mode IX\nRECORD LOCKS space id 148 page no 445005 n bits 552 index `PRIMARY` of table `citydb`.`city_grid` trx id 7C6E3AD3 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AD3 lock mode IX\nRECORD LOCKS space id 149 page no 678758 n bits 288 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AD3 lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3ACE, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 2067568960\n4 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 2\nMySQL thread id 138718, query id 10041432668 10.36.63.95 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ACF, sees < 7C6E39B2\nTABLE LOCK table `citydb`.`players` trx id 7C6E3ACE lock mode IX\nRECORD LOCKS space id 146 page no 187 n bits 224 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3ACE lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3ACE lock mode IX\nRECORD LOCKS space id 149 page no 382096 n bits 376 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3ACE lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3ACB, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1287485760\n5 lock struct(s), heap size 1216, 2 row lock(s), undo log entries 3\nMySQL thread id 141312, query id 10041432927 10.4.223.82 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ACC, sees < 7C6E39B2\nTABLE LOCK table `citydb`.`player_contracts` trx id 7C6E3ACB lock mode IX\nTABLE LOCK table `citydb`.`players` trx id 7C6E3ACB lock mode IX\nRECORD LOCKS space id 146 page no 13690 n bits 272 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3ACB lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3ACB lock mode IX\nRECORD LOCKS space id 149 page no 31584 n bits 248 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3ACB lock_mode X locks rec but not gap\n---TRANSACTION 7C6E3ACA, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1992755520\n2 lock struct(s), heap size 368, 0 row lock(s), undo log entries 2\nMySQL thread id 139191, query id 10041432427 10.4.223.84 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ACB, sees < 7C6E39B2\nTABLE LOCK table `citydb`.`city_grid` trx id 7C6E3ACA lock mode IX\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3ACA lock mode IX\n---TRANSACTION 7C6E3AC9, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1282959680\n5 lock struct(s), heap size 1216, 3 row lock(s), undo log entries 5\nMySQL thread id 141296, query id 10041437771 10.4.223.84 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3ACA, sees < 7C6E39B2\nTABLE LOCK table `citydb`.`city_grid` trx id 7C6E3AC9 lock mode IX\nRECORD LOCKS space id 148 page no 160459 n bits 600 index `PRIMARY` of table `citydb`.`city_grid` trx id 7C6E3AC9 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AC9 lock mode IX\n\n```\n\n----------------------------------------\n\nTITLE: Switching Database with USE Statement - SQL\nDESCRIPTION: This SQL snippet changes the current default database context to 'information_schema', enabling subsequent queries to be against metadata tables. It requires an established MySQL session and does not produce rows or modify data; success is silent unless an error occurs due to missing schema or insufficient permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump-1402776_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUSE information_schema\\G\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'bar' in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'bar' table in the 'db2' database. It includes table status and create table information for context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-2009-07-08.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `db2` LIKE 'bar'\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `db2`.`bar`\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM bar\\G\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Auction Details with Image URL Formatting\nDESCRIPTION: Complex SQL query that fetches active auction details including formatted thumbnail URLs. Filters for active auctions in the AR marketplace and includes URL string replacements for different image size variants.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT auction_id, auction_title_en AS title, close_time,\n      number_of_items_per_lot, \n      replace (replace (thumbnail_url,  'sm_thumb', 'carousel'), 'small_thumb', 'carousel') as thumbnail_url,\n      replace (replace (thumbnail_url,  'sm_thumb', 'tiny_thumb'), 'small_thumb', 'tiny_thumb') as tinythumb_url,\n      current_bid\nFROM   auction_search\nWHERE  platform_flag_1 = 1\nAND    close_flag = 0 \nAND    close_time >= NOW()\nAND    marketplace = 'AR'\nAND auction_id IN (3015562,3028764,3015564,3019075,3015574,2995142,3040162,3015573,2995135,3015578)\nORDER BY close_time ASC\nLIMIT 500\n```\n\n----------------------------------------\n\nTITLE: SELECT Query from bar Table with InnoDB Statistics\nDESCRIPTION: SELECT query on 'bar' table with detailed InnoDB metrics including IO operations, lock wait times (rec_lock_wait: 1.000002s, queue_wait: 0.200005s), and 24 distinct pages accessed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM bar;\n```\n\n----------------------------------------\n\nTITLE: Explaining SELECT Query on 'bar' Table in SQL\nDESCRIPTION: Retrieves the execution plan for a query selecting all columns from the 'bar' table where the 'id' column equals 12. The `/*!50100 PARTITIONS*/` comment indicates potential partition-related considerations for MySQL 5.1.0+. This query (ID 0x097135BD72A3F117AC0EC652760FEEB3) showed varied execution times based on arguments (CRC 685, 159).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM bar WHERE id=12\\G\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Servers Table\nDESCRIPTION: Defines the structure for the servers table in the mysql schema, which stores information about MySQL foreign servers. It includes columns for server name, host, database, username, password, port, socket, wrapper, and owner.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='MySQL Foreign Servers table'\n```\n\n----------------------------------------\n\nTITLE: Examining Memory Device Mapped Address\nDESCRIPTION: This snippet provides information about a memory device's mapped address, including starting and ending addresses, range size, and interleave details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-005.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0018, DMI type 20, 19 bytes\nMemory Device Mapped Address\n\tStarting Address: 0x00000000000\n\tEnding Address: 0x000040003FF\n\tRange Size: 65537 kB\n\tPhysical Device Handle: 0x0017\n\tMemory Array Mapped Address Handle: 0x0016\n\tPartition Row Position: 1\n\tInterleave Position: Unknown\n\tInterleaved Data Depth: 2\n```\n\n----------------------------------------\n\nTITLE: Displaying Per-Device Disk I/O Statistics\nDESCRIPTION: This snippet shows sample output from a disk monitoring tool, listing I/O metrics like read/write megabytes per second (rd_mb_s, wr_mb_s), concurrency (rd_cnc, wr_cnc), response time (rd_rt, wr_rt), busy percentage, and in-progress requests (in_prg) for individual block devices. The devices listed include RAM disks (ram0-15), loop devices (loop0-7), and physical disks/partitions (sda, sda1-4, sdb, sdb1). The `{14}` prefix on each line likely indicates a snapshot identifier or the number of devices being monitored in this group.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_int_switch_to_sample.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n {14} ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sda        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sda3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sda4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sdb        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n {14} sdb1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Selecting Actors by ID in Sakila Database (SQL)\nDESCRIPTION: This SQL snippet first sets the active database to 'sakila' using the `use` command. Then, it executes a query to retrieve all columns (`*`) for rows in the `sakila.actor` table where the `actor_id` is greater than 10. The surrounding comments provide execution metadata like timestamp, user, host, query time, lock time, rows sent, and rows examined, presumably captured by a tool like Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow007.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 101010 00:00:01\n# User@Host: root[root] @ localhost []\n# Query_time: 1  Lock_time: 0  Rows_sent: 100  Rows_examined: 0\nuse sakila;\nselect * from sakila.actor where actor_id>10;\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from 'foo' Table in MySQL\nDESCRIPTION: This SQL query selects all columns and rows from the 'foo' table. It's a simple SELECT statement without any conditions or joins.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-1d.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'proc' Stored Routines Metadata Table - SQL\nDESCRIPTION: Defines the 'proc' table to store metadata for stored procedures and functions, including their SQL code, parameters, return types, and creator information. The table includes numerous attributes for security, language, SQL data access, determinism, and SQL modes, using ENUM and SET types for status and behavior flags. Key fields include db, name, type, and a variety of binary/text columns for definitions; UTF-8 encoding and MyISAM engine are required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n```\n\n----------------------------------------\n\nTITLE: Creating Queries Table\nDESCRIPTION: Defines a table named 'queries' to store query information, including a unique query ID, the query fingerprint, and a sample of the query. This structure helps in analyzing and referencing queries efficiently.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_miu.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS queries (\n  query_id     BIGINT UNSIGNED NOT NULL,\n  fingerprint  TEXT NOT NULL,\n  sample       TEXT NOT NULL,\n  PRIMARY KEY  (query_id)\n)\n```\n\n----------------------------------------\n\nTITLE: Selecting and Sorting User Data in MySQL\nDESCRIPTION: This SQL query retrieves user IDs and names from the users table for a specific account, then sorts the results by name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=3821 ORDER BY name\n```\n\n----------------------------------------\n\nTITLE: Calculating Table Chunk Checksum in MySQL\nDESCRIPTION: Performs checksum calculation for a specific chunk of a table using CRC32 hash of concatenated column values. Uses FORCE INDEX to ensure optimal query performance and includes boundary conditions for chunk processing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `i`, `y`, CRC32(`t`), CONCAT(ISNULL(`t`)))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `issue_519`.`t` FORCE INDEX(`myidx`) WHERE ((`i` > ?) OR (`i` = ? AND `y` >= ?)) AND ((`i` < ?) OR (`i` = ? AND `y` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query with Performance Metrics\nDESCRIPTION: A basic SELECT query examining all rows from the foo table. Query metrics show consistent execution time of 0.726052 seconds, examining 62,951 rows with full table scan but no filesort or temporary tables used.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Foreign Servers Table (servers)\nDESCRIPTION: Defines the structure for the servers table in the mysql database, which stores information about MySQL foreign servers. It includes columns for server name, host, database, username, password, port, socket, wrapper, and owner.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL Foreign Servers table'\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with WHERE Clause Using MySQL SQL\nDESCRIPTION: The snippet deletes rows from the 'forest' table in 'db3' where the column 'animal' equals 'dead'. Extensive Percona log comments precede the command, detailing slow query execution, file sorting, and temporary tables. Dependencies include MySQL, 'db3', and a table named 'forest' with an 'animal' column. Output is implicit (affected rows); proper permissions and an existing table are required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 0.926052  Lock_time: 0.097091  Rows_sent: 8  Rows_examined: 50\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db3;\\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Defining Help Keywords Table in MySQL\nDESCRIPTION: Builds the 'help_keyword' table to store keywords used in help documentation, ensuring quick access and management of keyword-based queries. Each keyword is uniquely identified for efficient lookup.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `help_keyword`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Querying User List by Account ID with Sorting - SQL\nDESCRIPTION: Selects the id and name columns from the 'users' table filtered by a specific accountid and orders the results alphabetically by name. Suitable for displaying user directories for an account. Requires SELECT access to 'users'; expects an integer as accountid and returns multiple rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=344959 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=14148 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=57296 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=3115 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=2044 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=592 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=150 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=306725 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=140 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=3009 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=420 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=215523 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=949 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=222400 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=1356 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=12765 ORDER BY name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id,name FROM users WHERE accountid=172 ORDER BY name\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Column and Usage Privileges in SQL\nDESCRIPTION: This SQL block revokes specific column-level INSERT and SELECT privileges on the `sakila`.`city` and `test`.`t` tables, along with the general USAGE privilege, for the user 'sally'@'%'. It requires the user and tables/databases to exist and the user to possess these privileges for the statements to have an effect.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Revoke statements for 'sally'@'%'\nREVOKE INSERT (city) ON `sakila`.`city` FROM 'sally'@'%';\nREVOKE SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` FROM 'sally'@'%';\nREVOKE SELECT (city_id) ON `sakila`.`city` FROM 'sally'@'%';\nREVOKE USAGE ON *.* FROM 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration File (my.cnf)\nDESCRIPTION: The complete MySQL configuration file located at /etc/mysql/my.cnf, showing both client and server settings. This configuration is for a MySQL Sandbox installation with custom port (12345) and paths.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_result_report_summary.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_stages Table in MySQL\nDESCRIPTION: Select query to retrieve data from the host_summary_by_stages table, providing latency statistics for each stage by host. Essential for performance tuning and identifying bottlenecks in query processing. Requires access to the relevant database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select *  from host_summary_by_stages;\n+------+--------------------------------+-------+---------------+-------------+\n| host | event_name                     | total | total_latency | avg_latency |\n+------+--------------------------------+-------+---------------+-------------+\n| hal  | stage/sql/Opening tables       |   889 | 1.97 ms       | 2.22 us     |\n| hal  | stage/sql/Creating sort index  |     4 | 1.79 ms       | 446.30 us   |\n| hal  | stage/sql/init                 |    10 | 312.27 us     | 31.23 us    |\n| hal  | stage/sql/checking permissions |    10 | 300.62 us     | 30.06 us    |\n| hal  | stage/sql/freeing items        |     5 | 85.89 us      | 17.18 us    |\n| hal  | stage/sql/statistics           |     5 | 79.15 us      | 15.83 us    |\n| hal  | stage/sql/preparing            |     5 | 69.12 us      | 13.82 us    |\n| hal  | stage/sql/optimizing           |     5 | 53.11 us      | 10.62 us    |\n| hal  | stage/sql/Sending data         |     5 | 44.66 us      | 8.93 us     |\n| hal  | stage/sql/closing tables       |     5 | 37.54 us      | 7.51 us     |\n| hal  | stage/sql/System lock          |     5 | 34.28 us      | 6.86 us     |\n| hal  | stage/sql/query end            |     5 | 24.37 us      | 4.87 us     |\n| hal  | stage/sql/end                  |     5 | 8.60 us       | 1.72 us     |\n| hal  | stage/sql/Sorting result       |     5 | 8.33 us       | 1.67 us     |\n| hal  | stage/sql/executing            |     5 | 5.37 us       | 1.07 us     |\n| hal  | stage/sql/cleaning up          |     5 | 4.60 us       | 919.00 ns   |\n+------+--------------------------------+-------+---------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query for Comparison in SQL\nDESCRIPTION: This SQL snippet executes a SELECT statement to retrieve all columns from the `test.t` table, ordering the results by the `id` column. It's used within a Percona Toolkit comparison process (Query class 483E7FA163F8DA7B) to identify differences in query results between database instances. The surrounding report indicates this query produced differing results, specifically highlighting rows missing on one of the compared hosts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/002/select_missing_rows_results.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from test.t order by id\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Status Variables | Plaintext\nDESCRIPTION: This snippet shows a column-aligned table of MySQL status variables and their values, typically obtained by executing commands such as SHOW STATUS via the MySQL CLI. No software dependencies are required except for MySQL. Input is not required; output is a static, line-by-line rendering of variable names and their numeric values. These tables enable users or scripts to review server activity and health metrics. The output format is subject to changes based on MySQL versions or configuration options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mext/samples/mext-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+-----------------------------------+----------+\\n| Qcache_total_blocks               | 0        |\\n| Questions                         | 71191    |\\n| Rpl_status                        | 0        |\\n| Select_full_join                  | 0        |\\n| Select_full_range_join            | 0        |\\n| Select_range                      | 375      |\\n| Select_range_check                | 0        |\\n| Select_scan                       | 2050     |\\n| Slave_open_temp_tables            | 0        |\\n| Slave_retried_transactions        | 0        |\\n| Slave_running                     | 0        |\\n| Slow_launch_threads               | 0        |\\n| Slow_queries                      | 0        |\\n| Sort_merge_passes                 | 0        |\\n| Sort_range                        | 0        |\\n| Sort_rows                         | 145      |\\n| Sort_scan                         | 14       |\\n| Ssl_accept_renegotiates           | 0        |\\n| Ssl_accepts                       | 0        |\\n| Ssl_callback_cache_hits           | 0        |\\n| Ssl_cipher                        | 0        |\\n| Ssl_cipher_list                   | 0        |\\n| Ssl_client_connects               | 0        |\\n| Ssl_connect_renegotiates          | 0        |\\n| Ssl_ctx_verify_depth              | 0        |\\n| Ssl_ctx_verify_mode               | 0        |\\n| Ssl_default_timeout               | 0        |\\n| Ssl_finished_accepts              | 0        |\\n| Ssl_finished_connects             | 0        |\\n| Ssl_session_cache_hits            | 0        |\\n| Ssl_session_cache_misses          | 0        |\\n| Ssl_session_cache_mode            | 0        |\\n| Ssl_session_cache_overflows       | 0        |\\n| Ssl_session_cache_size            | 0        |\\n| Ssl_session_cache_timeouts        | 0        |\\n| Ssl_sessions_reused               | 0        |\\n| Ssl_used_session_cache_entries    | 0        |\\n| Ssl_verify_depth                  | 0        |\\n| Ssl_verify_mode                   | 0        |\\n| Ssl_version                       | 0        |\\n| Table_locks_immediate             | 4205     |\\n| Table_locks_waited                | 0        |\\n| Tc_log_max_pages_used             | 0        |\\n| Tc_log_page_size                  | 0        |\\n| Tc_log_page_waits                 | 0        |\\n| Threads_cached                    | 0        |\\n| Threads_connected                 | 2        |\\n| Threads_created                   | 1007     |\\n| Threads_running                   | 2        |\\n| Uptime                            | 5550     |\\n| Uptime_since_flush_status         | 5550     |\\n+-----------------------------------+----------+\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n+-----------------------------------+----------+\\n| Variable_name                     | Value    |\\n+-----------------------------------+----------+\\n| Aborted_clients                   | 0        |\\n| Aborted_connects                  | 0        |\\n| Binlog_cache_disk_use             | 0        |\\n| Binlog_cache_use                  | 0        |\\n| Bytes_received                    | 35       |\\n| Bytes_sent                        | 6480     |\\n| Com_admin_commands                | 0        |\\n| Com_alter_db                      | 0        |\\n| Com_alter_table                   | 0        |\\n| Com_analyze                       | 0        |\\n| Com_backup_table                  | 0        |\\n| Com_begin                         | 0        |\\n| Com_call_procedure                | 0        |\\n| Com_change_db                     | 0        |\\n| Com_change_master                 | 0        |\\n| Com_check                         | 0        |\\n| Com_checksum                      | 0        |\\n| Com_commit                        | 0        |\\n| Com_create_db                     | 0        |\\n| Com_create_function               | 0        |\\n| Com_create_index                  | 0        |\\n| Com_create_table                  | 0        |\\n| Com_create_user                   | 0        |\\n| Com_dealloc_sql                   | 0        |\\n| Com_delete                        | 0        |\\n| Com_delete_multi                  | 0        |\\n| Com_do                            | 0        |\\n| Com_drop_db                       | 0        |\\n| Com_drop_function                 | 0        |\\n| Com_drop_index                    | 0        |\\n| Com_drop_table                    | 0        |\\n| Com_drop_user                     | 0        |\\n| Com_execute_sql                   | 0        |\\n| Com_flush                         | 0        |\\n| Com_grant                         | 0        |\\n| Com_ha_close                      | 0        |\\n| Com_ha_open                       | 0        |\\n| Com_ha_read                       | 0        |\\n| Com_help                          | 0        |\\n| Com_insert                        | 0        |\\n| Com_insert_select                 | 0        |\\n| Com_kill                          | 0        |\\n| Com_load                          | 0        |\\n| Com_load_master_data              | 0        |\\n| Com_load_master_table             | 0        |\\n| Com_lock_tables                   | 0        |\\n| Com_optimize                      | 0        |\\n| Com_preload_keys                  | 0        |\\n| Com_prepare_sql                   | 0        |\\n| Com_purge                         | 0        |\\n| Com_purge_before_date             | 0        |\\n| Com_rename_table                  | 0        |\\n| Com_repair                        | 0        |\\n| Com_replace                       | 0        |\\n| Com_replace_select                | 0        |\\n| Com_reset                         | 0        |\\n| Com_restore_table                 | 0        |\\n| Com_revoke                        | 0        |\\n| Com_revoke_all                    | 0        |\\n| Com_rollback                      | 0        |\\n| Com_savepoint                     | 0        |\\n| Com_select                        | 0        |\\n| Com_set_option                    | 0        |\\n| Com_show_binlog_events            | 0        |\\n| Com_show_binlogs                  | 0        |\\n| Com_show_charsets                 | 0        |\\n| Com_show_collations               | 0        |\\n| Com_show_column_types             | 0        |\\n| Com_show_create_db                | 0        |\\n| Com_show_create_table             | 0        |\\n| Com_show_databases                | 0        |\\n| Com_show_errors                   | 0        |\\n| Com_show_fields                   | 0        |\\n| Com_show_grants                   | 0        |\\n| Com_show_innodb_status            | 0        |\\n| Com_show_keys                     | 0        |\\n| Com_show_logs                     | 0        |\\n| Com_show_master_status            | 0        |\\n| Com_show_ndb_status               | 0        |\\n| Com_show_new_master               | 0        |\\n| Com_show_open_tables              | 0        |\\n| Com_show_privileges               | 0        |\\n| Com_show_processlist              | 0        |\\n| Com_show_slave_hosts              | 0        |\\n| Com_show_slave_status             | 0        |\\n| Com_show_status                   | 1        |\\n| Com_show_storage_engines          | 0        |\\n| Com_show_tables                   | 0        |\\n| Com_show_triggers                 | 0        |\\n| Com_show_variables                | 0        |\\n| Com_show_warnings                 | 0        |\\n| Com_slave_start                   | 0        |\\n| Com_slave_stop                    | 0        |\\n| Com_stmt_close                    | 0        |\\n| Com_stmt_execute                  | 0        |\\n| Com_stmt_fetch                    | 0        |\\n| Com_stmt_prepare                  | 0        |\\n| Com_stmt_reset                    | 0        |\\n| Com_stmt_send_long_data           | 0        |\\n| Com_truncate                      | 0        |\\n| Com_unlock_tables                 | 0        |\\n| Com_update                        | 0        |\\n| Com_update_multi                  | 0        |\\n| Com_xa_commit                     | 0        |\\n| Com_xa_end                        | 0        |\\n| Com_xa_prepare                    | 0        |\\n| Com_xa_recover                    | 0        |\\n| Com_xa_rollback                   | 0        |\\n| Com_xa_start                      | 0        |\\n| Compression                       | 0        |\\n| Connections                       | 0        |\\n| Created_tmp_disk_tables           | 0        |\\n| Created_tmp_files                 | 0        |\\n| Created_tmp_tables                | 1        |\\n| Delayed_errors                    | 0        |\\n| Delayed_insert_threads            | 0        |\\n| Delayed_writes                    | 0        |\\n| Flush_commands                    | 0        |\\n| Handler_commit                    | 0        |\\n| Handler_delete                    | 0        |\\n| Handler_discover                  | 0        |\\n| Handler_prepare                   | 0        |\\n| Handler_read_first                | 0        |\\n| Handler_read_key                  | 0        |\\n| Handler_read_next                 | 0        |\\n| Handler_read_prev                 | 0        |\\n| Handler_read_rnd                  | 0        |\\n| Handler_read_rnd_next             | 253      |\\n| Handler_rollback                  | 0        |\\n| Handler_savepoint                 | 0        |\\n| Handler_savepoint_rollback        | 0        |\\n| Handler_update                    | 0        |\\n| Handler_write                     | 252      |\\n| Innodb_buffer_pool_pages_data     | 0        |\\n| Innodb_buffer_pool_pages_dirty    | 0        |\\n| Innodb_buffer_pool_pages_flushed  | 0        |\\n| Innodb_buffer_pool_pages_free     | 0        |\\n| Innodb_buffer_pool_pages_misc     | 0        |\\n| Innodb_buffer_pool_pages_total    | 0        |\\n| Innodb_buffer_pool_read_ahead_rnd | 0        |\\n| Innodb_buffer_pool_read_ahead_seq | 0        |\\n| Innodb_buffer_pool_read_requests  | 0        |\\n| Innodb_buffer_pool_reads          | 0        |\\n| Innodb_buffer_pool_wait_free      | 0        |\\n| Innodb_buffer_pool_write_requests | 0        |\\n| Innodb_data_fsyncs                | 0        |\\n| Innodb_data_pending_fsyncs        | 0        |\\n| Innodb_data_pending_reads         | 0        |\\n| Innodb_data_pending_writes        | 0        |\n```\n\n----------------------------------------\n\nTITLE: MySQL Transaction Status Information\nDESCRIPTION: Transaction status information showing active prepared transactions with details about process ID, thread ID, query ID, and transaction read view boundaries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.002.txt#2025-04-22_snippet_4\n\nLANGUAGE: mysql\nCODE:\n```\n---TRANSACTION 7C6E3A87, ACTIVE (PREPARED) 4 sec, process no 3907, OS thread id 1245153600\n4 lock struct(s), heap size 1216, 3 row lock(s), undo log entries 5\nMySQL thread id 140402, query id 10041432521 10.36.63.91 citydbuser\ncommit\nTrx read view will not see trx with id >= 7C6E3A88, sees < 7C6E39B2\n```\n\n----------------------------------------\n\nTITLE: Defining the 'help_topic' Table for Help Topics - MySQL - SQL\nDESCRIPTION: Creates the 'help_topic' table storing help topic metadata, including name, description, examples, category linkage, and external URLs. Supports the internal user help subsystem in MySQL. Uniqueness is enforced on both 'help_topic_id' and 'name', ensuring quick lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY  (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Analyzing UPDATE Query Performance with Percona Toolkit\nDESCRIPTION: This JSON structure represents a slow query analysis of an UPDATE statement that joins a tuningdetail table with a gonzo table. The query took approximately 0.73 seconds to execute and examined 62,951 rows. The analysis includes performance metrics like lock time, query time, and full scan information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002-anon.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"classes\":[{\"attribute\":\"fingerprint\",\"checksum\":\"45FE45AEC222350466825DDC008FFA89\",\"distillate\":\"UPDATE db?.tuningdetail_?_? db?.gonzo\",\"fingerprint\":\"update d?tuningdetail_?_? n inner join d?gonzo a using(gonzo) set n.column? = a.column?, n.word? = a.word?\",\"histograms\":{\"Query_time\":[0,0,0,0,0,1,0,0]},\"metrics\":{\"Filesort\":{\"yes\":\"0\"},\"Filesort_on_disk\":{\"yes\":\"0\"},\"Full_join\":{\"yes\":\"0\"},\"Full_scan\":{\"yes\":\"1\"},\"Lock_time\":{\"avg\":\"0.000091\",\"max\":\"0.000091\",\"median\":\"0.000091\",\"min\":\"0.000091\",\"pct\":\"0.125000\",\"pct_95\":\"0.000091\",\"stddev\":\"0.000000\",\"sum\":\"0.000091\"},\"Merge_passes\":{\"avg\":\"0\",\"max\":\"0\",\"median\":\"0\",\"min\":\"0\",\"pct\":\"0\",\"pct_95\":\"0\",\"stddev\":\"0\",\"sum\":\"0\"},\"QC_Hit\":{\"yes\":\"0\"},\"Query_length\":{\"avg\":\"129\",\"max\":\"129\",\"median\":\"129\",\"min\":\"129\",\"pct\":\"0\",\"pct_95\":\"129\",\"stddev\":\"0\",\"sum\":\"129\"},\"Query_time\":{\"avg\":\"0.726052\",\"max\":\"0.726052\",\"median\":\"0.726052\",\"min\":\"0.726052\",\"pct\":\"0.125000\",\"pct_95\":\"0.726052\",\"stddev\":\"0.000000\",\"sum\":\"0.726052\"},\"Rows_examined\":{\"avg\":\"62951\",\"max\":\"62951\",\"median\":\"62951\",\"min\":\"62951\",\"pct\":\"0\",\"pct_95\":\"62951\",\"stddev\":\"0\",\"sum\":\"62951\"},\"Rows_sent\":{\"avg\":\"0\",\"max\":\"0\",\"median\":\"0\",\"min\":\"0\",\"pct\":\"0\",\"pct_95\":\"0\",\"stddev\":\"0\",\"sum\":\"0\"},\"Tmp_table\":{\"yes\":\"0\"},\"Tmp_table_on_disk\":{\"yes\":\"0\"},\"db\":{\"value\":\"db1\"},\"host\":{\"value\":\"\"},\"user\":{\"value\":\"[SQL_SLAVE]\"}},\"query_count\":1,\"tables\":[{\"create\":\"SHOW CREATE TABLE `db2`.`tuningdetail_21_265507`\\\\G\",\"status\":\"SHOW TABLE STATUS FROM `db2` LIKE 'tuningdetail_21_265507'\\\\G\"},{\"create\":\"SHOW CREATE TABLE `db1`.`gonzo`\\\\G\",\"status\":\"SHOW TABLE STATUS FROM `db1` LIKE 'gonzo'\\\\G\"}],\"ts_max\":\"2007-12-18 11:48:27\",\"ts_min\":\"2007-12-18 11:48:27\"}],\"global\":{\"files\":[{\"name\":\"slow002.txt\",\"size\":3841}],\"metrics\":{\"Filesort\":{\"cnt\":\"0\"},\"Filesort_on_disk\":{\"cnt\":\"0\"},\"Full_join\":{\"cnt\":\"0\"},\"Full_scan\":{\"cnt\":\"1\"},\"InnoDB_IO_r_bytes\":{\"avg\":\"0\",\"max\":\"0\",\"median\":\"0\",\"min\":\"0\",\"pct_95\":\"0\",\"stddev\":\"0\",\"sum\":\"0\"},\"InnoDB_IO_r_ops\":{\"avg\":\"0\",\"max\":\"0\",\"median\":\"0\",\"min\":\"0\",\"pct_95\":\"0\",\"stddev\":\"0\",\"sum\":\"0\"},\"InnoDB_IO_r_wait\":{\"avg\":\"0.000000\",\"max\":\"0.000000\",\"median\":\"0.000000\",\"min\":\"0.000000\",\"pct_95\":\"0.000000\",\"stddev\":\"0.000000\",\"sum\":\"0.000000\"},\"InnoDB_pages_distinct\":{\"avg\":\"17\",\"max\":\"24\",\"median\":\"17\",\"min\":\"11\",\"pct_95\":\"23\",\"stddev\":\"3\",\"sum\":\"107\"},\"InnoDB_queue_wait\":{\"avg\":\"0.000000\",\"max\":\"0.000000\",\"median\":\"0.000000\",\"min\":\"0.000000\",\"pct_95\":\"0.000000\",\"stddev\":\"0.000000\",\"sum\":\"0.000000\"},\"InnoDB_rec_lock_wait\":{\"avg\":\"0.000000\",\"max\":\"0.000000\",\"median\":\"0.000000\",\"min\":\"0.000000\",\"pct_95\":\"0.000000\",\"stddev\":\"0.000000\",\"sum\":\"0.000000\"},\"Lock_time\":{\"avg\":\"0.000038\",\"max\":\"0.000091\",\"median\":\"0.000026\",\"min\":\"0.000000\",\"pct_95\":\"0.000089\",\"stddev\":\"0.000028\",\"sum\":\"0.000304\"},\"Merge_passes\":{\"avg\":\"0\",\"max\":\"0\",\"median\":\"0\",\"min\":\"0\",\"pct_95\":\"0\",\"stddev\":\"0\",\"sum\":\"0\"},\"QC_Hit\":{\"cnt\":\"0\"},\"Query_length\":{\"avg\":\"62\",\"max\":\"129\",\"median\":\"62\",\"min\":\"5\",\"pct_95\":\"124\",\"stddev\":\"34\",\"sum\":\"502\"},\"Query_time\":{\"avg\":\"0.095260\",\"max\":\"0.726052\",\"median\":\"0.000516\",\"min\":\"0.000012\",\"pct_95\":\"0.705093\",\"stddev\":\"0.231765\",\"sum\":\"0.762080\"},\"Rows_examined\":{\"avg\":\"7868\",\"max\":\"62951\",\"median\":\"0\",\"min\":\"0\",\"pct_95\":\"61003\",\"stddev\":\"20174\",\"sum\":\"62951\"},\"Rows_sent\":{\"avg\":\"0\",\"max\":\"0\",\"median\":\"0\",\"min\":\"0\",\"pct_95\":\"0\",\"stddev\":\"0\",\"sum\":\"0\"},\"Tmp_table\":{\"cnt\":\"0\"},\"Tmp_table_on_disk\":{\"cnt\":\"0\"}},\"query_count\":8,\"unique_query_count\":7}}\n```\n\n----------------------------------------\n\nTITLE: Selecting Column from foo_tbl in MySQL\nDESCRIPTION: A simple SELECT query retrieving a column from foo_tbl in the foo database. This query executed 3 times with an average execution time of 12μs and was run by the SQL_SLAVE user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: This SQL snippet creates a 'staff' table with various columns for staff information, including foreign key constraints to 'store' and 'address' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Log Timestamps in my.cnf (INI)\nDESCRIPTION: Specifies the `log_timestamps = SYSTEM` setting within the MySQL configuration file (my.cnf or my.ini). This setting dictates that timestamps in MySQL logs should use the system's time zone. Version 3.0.13 fixes a bug where `pt-query-digest` failed to parse logs correctly when this option was enabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-13.txt#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlog_timestamps = SYSTEM\n```\n\n----------------------------------------\n\nTITLE: Updating tree Record Fields in forest Database - SQL\nDESCRIPTION: Updates multiple columns of a row in the 'tree' table where the tree's ID matches a given value. Resets several fields to null or new values, including identifiers, location coordinates, status flags, and references. The query expects an existing table 'tree' and modifies fields for a specific 'treeid', with fields like 'partnermasterid', 'lockedby', 'isactive', etc. updating the business status of the item. Requires UPDATE privileges on the 'tree' table and careful handling due to possible multi-user locks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nupdate tree set partnermasterid='BNZ', lon=null, lat=null, lockedby=null, closure=null, timestamp=null, qcnstreecode=null, matchcount=1, singlevariant=0, isactive=0, poolinstanceid=600, treestatustypeid=null, treematchtypeid=2, qcnscityid=1052474, qcnsstatusid=null, qcnscrsid=null, qcnscountryid=54, qcnsclassificationid=null, partnerid=6, qcnsrating=null where treeid=144349\n```\n\n----------------------------------------\n\nTITLE: Counting tree Records by Instance and Status with Exists Subquery - SQL\nDESCRIPTION: Retrieves the count of 'tree' records with a specific 'poolinstanceid' and 'treestatustypeid', only where an associated record exists in 'treeCODE' for each 'tree'. Utilizes a correlated EXISTS subquery to ensure only those trees with at least one related record in 'treeCODE' are counted. Requires the tables 'tree' and 'treeCODE', and is useful for reporting or sanity checks in applications with foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect count(tree0_.treeid) as col_0_0_ from tree tree0_ where tree0_.poolinstanceid=601 and tree0_.treestatustypeid=3 and (exists (select 1 from treeCODE treecode1_ where tree0_.treeid=treeid))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Values with sys_get_config\nDESCRIPTION: This example shows how to use the sys_get_config function to retrieve configuration values from sys.sys_config or fall back to a default value. It demonstrates getting a value directly and using IFNULL for assignment if the value is not set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_122\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.sys_get_config('statement_truncate_len', 128) AS Value;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSET @sys.statement_truncate_len = IFNULL(@sys.statement_truncate_len, sys.sys_get_config('statement_truncate_len', 64));\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Table in MySQL\nDESCRIPTION: Creates the inventory table to track physical copies of films at different store locations. Contains foreign keys to film and store tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Removing Values from SQL Mode Using list_drop in MySQL\nDESCRIPTION: Example showing how to remove 'ONLY_FULL_GROUP_BY' from the current SQL mode using the sys.list_drop() function. The function takes the current value of @@sql_mode and removes the specified value from the comma-separated list.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_123\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select @@sql_mode;\n+-----------------------------------------------------------------------------------------------+\n| @@sql_mode                                                                                    |\n+-----------------------------------------------------------------------------------------------+\n| ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> set sql_mode = sys.list_drop(@@sql_mode, 'ONLY_FULL_GROUP_BY');\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> select @@sql_mode;\n+----------------------------------------------------------------------------+\n| @@sql_mode                                                                 |\n+----------------------------------------------------------------------------+\n| ANSI_QUOTES,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+----------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server - Percona - ini\nDESCRIPTION: This snippet provides the contents of a MySQL (specifically Percona Server) configuration file, containing both the [client] and [mysqld] sections. The file sets parameters such as port, socket, data directories, memory settings, InnoDB and MyISAM tuning, and logging options, controlling both client authentication and server runtime behavior. No direct dependencies are needed other than the MySQL server itself; expected usage is to place this file at the specified location for MySQL startup and reference. Inputs are server runtime variables and connection settings, affecting outputs like MySQL's operational parameters and available resources. Limitations: changes require restart, and incorrect settings may lead to server startup failures.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp002.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Condition and Share Lock in SQL (Percona Toolkit OSC)\nDESCRIPTION: These SQL statements insert data from the 'osc.t' table into the 'osc.__new_t' table using INSERT IGNORE. They apply different WHERE conditions and use LOCK IN SHARE MODE for concurrent access. The statements are part of Percona Toolkit's online schema change process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/copyins001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT IGNORE INTO osc.__new_t (`id`, `c`) SELECT `id`, `c` FROM osc.t WHERE (id < 4) LOCK IN SHARE MODE\n```\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT IGNORE INTO osc.__new_t (`id`, `c`) SELECT `id`, `c` FROM osc.t WHERE (id >= 4 AND id < 6) LOCK IN SHARE MODE\n```\n\n----------------------------------------\n\nTITLE: MySQL Show InnoDB Status Query\nDESCRIPTION: Query to display the InnoDB engine status information, which provides detailed metrics about the database's internal operations, transactions, locks, and performance statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nshow innodb status\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.func` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.func` table, used to store information about user-defined functions (UDFs). It records the function name, return type indicator, the shared library file (`dl`), and the type of function (scalar or aggregate). The table uses the MyISAM storage engine and the primary key is the function `name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Creating film_category junction table in SQL\nDESCRIPTION: Creates the film_category table which maps films to their categories. It features foreign key constraints to both the film and category tables with cascade update behavior.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying Sequential IDs from MySQL Table\nDESCRIPTION: A series of SELECT queries retrieving sequential numeric values from a table named 'foo'. Each query has consistent performance metrics of 0.000899 seconds query time with no lock time, returning no rows while examining no rows. These appear to be part of a database monitoring or testing sequence.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1436 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1437 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1438 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1439 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1440 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1441 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1442 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1443 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1444 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1445 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1446 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1447 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1448 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1449 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1450 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1451 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1452 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1453 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1454 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1455 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1456 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1457 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1458 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1459 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1460 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1461 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1462 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1463 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1464 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1465 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1466 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1467 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1468 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1469 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1470 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1471 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1472 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1473 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1474 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1475 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1476 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1477 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1478 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1479 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1480 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1481 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1482 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1483 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1484 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Querying the MongoDB Profiler Collection - MongoDB Shell (pseudo-Code) - None\nDESCRIPTION: This snippet demonstrates the exact MongoDB query executed by pt-mongodb-query-digest to fetch profiler entries, excluding 'getmore' and 'delete' operations. The query is issued against the 'system.profile' collection in the selected database ('samples' in this example). Returns documents representing queries for further aggregation. Dependencies: running MongoDB server with profiler enabled and populated profiling data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-mongodb-query-digest/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\ndb.getSiblingDB(\"samples\").system.profile.find({\"op\":{\"$nin\":[\"getmore\", \"delete\"]}});\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server and Client Settings\nDESCRIPTION: Complete MySQL configuration file that sets up client connection parameters, command prompt styling, and server configuration including datadir, port, socket location, and InnoDB plugin loading.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mycnf-baron-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nuser     = root\nport     = 5150\nprotocol = tcp\nsocket   = /home/baron/etc/mysql/server/5.1.50/data/mysql.sock\n[mysql]\nprompt   = \"5150> \"\n[mysqld]\ndatadir  = /home/baron/etc/mysql/server/5.1.50/data/\nport     = 5150\nsocket   = /home/baron/etc/mysql/server/5.1.50/data/mysql.sock\nlanguage = ./share/english\nbasedir  = /home/baron/etc/mysql/server/5.1.50\nlog-bin\nignore-builtin-innodb\nplugin-load=innodb=ha_innodb_plugin.so.0;innodb_trx=ha_innodb_plugin.so.0;innodb_locks=ha_innodb_plugin.so.0;innodb_cmp=ha_innodb_plugin.so.0;innodb_cmp_reset=ha_innodb_plugin.so.0;innodb_cmpmem=ha_innodb_plugin.so.0;innodb_cmpmem_reset=ha_innodb_plugin.so.0\n```\n\n----------------------------------------\n\nTITLE: Creating Table film_text With Fulltext Index - MySQL SQL\nDESCRIPTION: Creates the 'film_text' table for storing text information per film with a primary key and a full-text search index on title and description. Used to support efficient search queries across film metadata. Requires MyISAM storage engine (for FULLTEXT index support in MySQL <5.6).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Revoking User Permissions in MySQL\nDESCRIPTION: The purpose of this SQL snippet is to revoke specific permissions from the user 'sally' on various tables and columns in different databases. This includes revoking access to certain columns in the 'sakila' and 'test' databases. There are no special prerequisites. This snippet is an example of how to manage user permissions by revoking access rights.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke-84.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nREVOKE INSERT (`city`) ON `sakila`.`city` FROM `sally`@`%`;\nREVOKE SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` FROM `sally`@`%`;\nREVOKE SELECT (`city_id`) ON `sakila`.`city` FROM `sally`@`%`;\nREVOKE USAGE ON *.* FROM `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Latest File IO Structure Definition\nDESCRIPTION: Defines the structure of latest_file_io and x$latest_file_io tables showing thread activity, file operations, and latency metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\ndesc latest_file_io;\ndesc x$latest_file_io;\n```\n\n----------------------------------------\n\nTITLE: Retrieving DDL for 'bar' Table in SQL\nDESCRIPTION: Displays the `CREATE TABLE` statement for the table named 'bar'. This command provides the structural definition (columns, indexes, etc.) necessary for understanding the execution plan of queries operating on this table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `bar`\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Query: Host Wait Events Data Sample\nDESCRIPTION: Example query showing wait event metrics grouped by host, including event counts and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_103\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from waits_by_host_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Constraint Definition\nDESCRIPTION: SQL foreign key constraint definition showing the relationship between tables t2 and t1, where column 'a' in t2 references column 'a' in t1.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is002-fke.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCONSTRAINT `t2_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t1` (`a`)\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Analysis - Triple Self Join Query\nDESCRIPTION: A slow query log entry showing a query performing three self-joins on table 'a'. The query took 2 seconds to execute with no lock time and examined 0 rows while returning 1 row. This appears to be an inefficient query pattern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow028.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from a, a, a;\n```\n\n----------------------------------------\n\nTITLE: Describing IO Global Wait by Bytes Tables Structure\nDESCRIPTION: Shows the table structure for io_global_by_wait_by_bytes and its raw counterpart x$io_global_by_wait_by_bytes. These tables track I/O operations with metrics like event name, latency statistics, and read/write counts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc io_global_by_wait_by_bytes;\n+-----------------+---------------------+------+-----+---------+-------+\n| Field           | Type                | Null | Key | Default | Extra |\n+-----------------+---------------------+------+-----+---------+-------+\n| event_name      | varchar(128)        | YES  |     | NULL    |       |\n| total           | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency   | text                | YES  |     | NULL    |       |\n| min_latency     | text                | YES  |     | NULL    |       |\n| avg_latency     | text                | YES  |     | NULL    |       |\n| max_latency     | text                | YES  |     | NULL    |       |\n| count_read      | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_read      | text                | YES  |     | NULL    |       |\n| avg_read        | text                | YES  |     | NULL    |       |\n| count_write     | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_written   | text                | YES  |     | NULL    |       |\n| avg_written     | text                | YES  |     | NULL    |       |\n| total_requested | text                | YES  |     | NULL    |       |\n+-----------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Database Query Log for SQL Operations\nDESCRIPTION: A timestamped log of SQL operations showing BEGIN, UPDATE, and INSERT statements executed against various database tables. Each line includes a timestamp, execution time, and the SQL query that was executed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_distilltimeline.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# 2007-12-18 11:48:27    0:00   1 BEGIN\n# 2007-12-18 11:48:27    0:00   1 UPDATE db?.tuningdetail_?_? db?.gonzo\n# 2007-12-18 11:48:27    0:00   1 INSERT db?.vendor?gonzo\n# 2007-12-18 11:48:27    0:00   1 UPDATE db?.vab?concept?upload\n# 2007-12-18 11:48:27    0:00   1 INSERT db?.conch\n# 2007-12-18 11:48:27    0:00   1 UPDATE foo.bar\n# 2007-12-18 11:48:27    0:00   1 UPDATE bizzle.bat\n# 2007-12-18 11:48:27    0:00   1 UPDATE foo.bar\n```\n\n----------------------------------------\n\nTITLE: Querying Memory Usage by Host\nDESCRIPTION: Example query showing memory usage statistics grouped by host, including allocated memory and allocation counts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from memory_by_host_by_current_bytes WHERE host IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'time_zone_transition' Table\nDESCRIPTION: Drops the existing `time_zone_transition` table if it exists and then creates it. This table records time zone transition events, linking a time zone ID to a specific transition time and transition type ID. It uses the MyISAM engine and the utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Table structure for table `time_zone_transition`\n--\n\nDROP TABLE IF EXISTS `time_zone_transition`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.ndb_binlog_index` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.ndb_binlog_index` table, specifically used in MySQL NDB Cluster environments. It indexes the NDB binary log, storing information about log file positions, epochs, event counts (inserts, updates, deletes, schemaops), originating server details, and global checkpoint identifiers (gci) to manage replication and recovery. It uses the MyISAM storage engine and a primary key based on `epoch`, `orig_server_id`, and `orig_epoch`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` int(10) unsigned NOT NULL,\n  `updates` int(10) unsigned NOT NULL,\n  `deletes` int(10) unsigned NOT NULL,\n  `schemaops` int(10) unsigned NOT NULL,\n  `orig_server_id` int(10) unsigned NOT NULL,\n  `orig_epoch` bigint(20) unsigned NOT NULL,\n  `gci` int(10) unsigned NOT NULL,\n  `next_position` bigint(20) unsigned NOT NULL,\n  `next_file` varchar(255) NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Defining Film-Actor Relationship Table in MySQL\nDESCRIPTION: This snippet creates the 'film_actor' join table, linking actors to films with primary and foreign keys, ensuring referential integrity between the 'actor' and 'film' tables. It uses ON UPDATE CASCADE to automatically update foreign key values if the referenced record changes. Essential for many-to-many associations between films and actors in the Sakila schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Status Variables\nDESCRIPTION: This SQL query retrieves the names and values of MySQL server status variables. It provides a comprehensive view of the server's current state, including query statistics, resource usage, and performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mext/samples/mext-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n+-----------------------------------+----------+\n| Variable_name                     | Value    |\n+-----------------------------------+----------+\n| Aborted_clients                   | 164      |\n| Aborted_connects                  | 0        |\n| Binlog_cache_disk_use             | 8        |\n| Binlog_cache_use                  | 777      |\n| Bytes_received                    | 6474103  |\n| Bytes_sent                        | 36699490 |\n| Com_admin_commands                | 329      |\n| Com_alter_db                      | 0        |\n| Com_alter_table                   | 90       |\n| Com_analyze                       | 0        |\n| Com_backup_table                  | 0        |\n| Com_begin                         | 2        |\n| Com_call_procedure                | 0        |\n| Com_change_db                     | 1697     |\n| Com_change_master                 | 0        |\n| Com_check                         | 0        |\n| Com_checksum                      | 71       |\n| Com_commit                        | 1216     |\n| Com_create_db                     | 112      |\n| Com_create_function               | 1        |\n| Com_create_index                  | 0        |\n| Com_create_table                  | 851      |\n| Com_create_user                   | 1        |\n| Com_dealloc_sql                   | 0        |\n| Com_delete                        | 694      |\n| Com_delete_multi                  | 0        |\n| Com_do                            | 0        |\n| Com_drop_db                       | 201      |\n| Com_drop_function                 | 1        |\n| Com_drop_index                    | 0        |\n| Com_drop_table                    | 764      |\n| Com_drop_user                     | 6        |\n| Com_execute_sql                   | 0        |\n| Com_flush                         | 5        |\n| Com_grant                         | 10       |\n| Com_ha_close                      | 0        |\n| Com_ha_open                       | 0        |\n| Com_ha_read                       | 0        |\n| Com_help                          | 0        |\n| Com_insert                        | 1619     |\n| Com_insert_select                 | 80       |\n| Com_kill                          | 0        |\n| Com_load                          | 12       |\n| Com_load_master_data              | 0        |\n| Com_load_master_table             | 0        |\n\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the customer table in the Sakila database. This table stores customer information including personal details, store association, and activity status with appropriate foreign key constraints to address and store tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating data_report Table in MySQL\nDESCRIPTION: Creates a table for storing report metadata including dates and timestamps. Features an auto-incrementing ID and a unique composite key across date-related columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS `data_report`;\nCREATE TABLE `data_report` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `date` date DEFAULT NULL,\n  `posted` datetime DEFAULT NULL,\n  `acquired` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `date` (`date`,`posted`,`acquired`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Tables\nDESCRIPTION: DDL statements for Percona test database tables used for testing and monitoring. Includes checksums, load_data and sentinel tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Describing schema_object_overview Structure - SQL\nDESCRIPTION: This describes the structure of the 'schema_object_overview' table using the MySQL 'desc' command, listing available fields used to report object type counts by schema. Useful if you wish to quickly enumerate the types and quantities of objects present in each database. Outputs: database, object type, and count field definitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_55\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_object_overview;\n+-------------+-------------+------+-----+---------+-------+\n| Field       | Type        | Null | Key | Default | Extra |\n+-------------+-------------+------+-----+---------+-------+\n| db          | varchar(64) | NO   |     |         |       |\n| object_type | varchar(64) | NO   |     |         |       |\n| count       | bigint(21)  | NO   |     | 0       |       |\n+-------------+-------------+------+-----+---------+-------+\n3 rows in set (0.08 sec)\n```\n\n----------------------------------------\n\nTITLE: Explaining SELECT Query Plan for Table d.t in SQL\nDESCRIPTION: This SQL snippet uses the `EXPLAIN` command to generate the query execution plan for selecting all columns from table `d.t` where `name` equals \"adam\". It's used for performance analysis, particularly to understand how the database will execute the query and check index utilization, which the report indicates is lacking for this query. The `/*!50100 PARTITIONS*/` comment suggests potential handling of partitioned tables in MySQL 5.1.0 and later. Requires the table `d.t`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump033.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# Converted for EXPLAIN\n# EXPLAIN /*!50100 PARTITIONS*/\nselect * from d.t where name=\"adam\"\\G\n```\n\n----------------------------------------\n\nTITLE: Example High-Impact SQL UPDATE Statement from Query Profile\nDESCRIPTION: This snippet shows an example SQL `UPDATE` statement targeting the 'foo' table, extracted from a query profile analysis. According to the full profile line (`#    1 0xBAA47CE27F8878DBAECF4CA2310AC9E2   1.0303 97.1%     1 1.0303  0.00 UPDATE foo`), this specific query pattern (ID 0xBAA47CE27F8878DBAECF4CA2310AC9E2) was the highest ranked, responsible for 1.0303 seconds (97.1%) of the total response time measured in a single call.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report004.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE foo\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: This SQL script creates the 'staff' table to store information about employees. It includes columns for personal details, store assignment, and login credentials.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) default NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL default '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) character set utf8 collate utf8_bin default NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Dropping Non-Unique Index in MySQL\nDESCRIPTION: Removes the non-unique index 'idx_title_description' from the film_text table in the Sakila database. The comment indicates this is a non-unique index type operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow002-report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `sakila`.`film_text` DROP KEY `idx_title_description`; -- type:non-unique\n```\n\n----------------------------------------\n\nTITLE: Creating Staff List Temporary Table Structure in MySQL\nDESCRIPTION: SQL script to create a temporary table structure for the staff_list view. The table contains staff information including ID, name, address details, and store ID with appropriate data types.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `staff_list` (\n  `ID` tinyint(3) unsigned,\n  `name` varchar(91),\n  `address` varchar(50),\n  `zip code` varchar(10),\n  `phone` varchar(20),\n  `city` varchar(50),\n  `country` varchar(50),\n  `SID` tinyint(3) unsigned\n) ENGINE=MyISAM */\n```\n\n----------------------------------------\n\nTITLE: Creating and Granting Privileges to MySQL User 'sally' (SQL)\nDESCRIPTION: This set of SQL commands first ensures the user 'sally'@'%' exists. It then configures the user to use 'mysql_native_password' authentication with default password policies. Subsequently, it grants specific privileges: INSERT on the 'city' column and SELECT on all columns (explicitly including 'city_id') of the 'sakila.city' table; SELECT on specific columns ('DateCreated', 'PaymentStat', 'PckPrice', 'SANumber') of the 'test.t' table; and finally, the basic USAGE privilege on all databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`), SELECT, SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status for 'blah' in SQL\nDESCRIPTION: Fetches the status information for the table named 'blah'. This command is typically used in conjunction with query analysis to understand table characteristics like engine type, row count, and size, providing context for query performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'blah'\\G\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Privileges from User sally in MySQL\nDESCRIPTION: These SQL commands are used to revoke specific privileges from the user 'sally', such as INSERT and SELECT on certain tables and columns, as well as general usage on the database. This helps enforce stricter access control for the user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nREVOKE INSERT (`city`) ON `sakila`.`city` FROM `sally`@`%`;\nREVOKE SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` FROM `sally`@`%`;\nREVOKE SELECT (`city_id`) ON `sakila`.`city` FROM `sally`@`%`;\nREVOKE USAGE ON *.* FROM `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Complex Index Merge with Union and Intersection in MySQL\nDESCRIPTION: Shows a more complex index merge strategy combining union and intersection operations. The query searches for rows where either key1=100 AND key2=100 OR key3=100 AND key4=100.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nexplain select key1,key2,key3,key4,filler1 from t1 where key1=100 and key2=100 or key3=100 and key4=100;\nselect key1,key2,key3,key4,filler1 from t1 where key1=100 and key2=100 or key3=100 and key4=100;\n```\n\n----------------------------------------\n\nTITLE: MySQL Host Summary Example Query\nDESCRIPTION: Example query output showing host activity summary including statements, latency, file IO and connection metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n+------+------------+-------------------+-----------------------+-------------+----------+-----------------+---------------------+-------------------+--------------+\n| host | statements | statement_latency | statement_avg_latency | table_scans | file_ios | file_io_latency | current_connections | total_connections | unique_users |\n+------+------------+-------------------+-----------------------+-------------+----------+-----------------+---------------------+-------------------+--------------+\n| hal1 |       2924 | 00:03:59.53       | 81.92 ms              |          82 |    54702 | 55.61 s         |                   1 |                 1 |            1 |\n+------+------------+-------------------+-----------------------+-------------+----------+-----------------+---------------------+-------------------+--------------+\n```\n\n----------------------------------------\n\nTITLE: Terminating Query Process 3 using SQL KILL\nDESCRIPTION: This SQL command uses `KILL` to terminate the database query associated with process ID 3. Similar to the previous command, the comment indicates the query has been running for 6 seconds and might be related to 'fruit=orange' and selecting from a 'fuits' table. This command is used to stop specific database processes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-kill/samples/kill-recset011-001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nKILL 3 (Query 6 sec) /* fruit=orange */ select 1 from fuits;\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Files Collected from PXC Pods\nDESCRIPTION: This snippet lists specific log and state files collected directly from the `/var/lib/mysql/` directory within Percona XtraDB Cluster (PXC) pods. These include error logs, backup logs, Galera state files, and configuration files, providing detailed insight into the database state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"var/lib/mysql/mysqld-error.log\",\n\"var/lib/mysql/innobackup.backup.log\",\n\"var/lib/mysql/innobackup.move.log\",\n\"var/lib/mysql/innobackup.prepare.log\",\n\"var/lib/mysql/grastate.dat\",\n\"var/lib/mysql/gvwstate.dat\",\n\"var/lib/mysql/mysqld.post.processing.log\",\n\"var/lib/mysql/auto.cnf\"\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: This SQL statement outlines the creation of the 'staff' table, which manages employee data within the Sakila database. Key features include attributes such as staff_id, first_name, and username, with foreign keys linked to the 'address' and 'store' tables. It uses MySQL with InnoDB for transaction support and cascading updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment-8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Performance Schema Thread ID Using ps_thread_id in MySQL\nDESCRIPTION: Example showing how to get the Performance Schema thread ID for a connection using the sys.ps_thread_id() function. The function takes an optional connection ID parameter (uses current connection if NULL) and returns the thread ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_129\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_thread_id(79);\n+----------------------+\n| sys.ps_thread_id(79) |\n+----------------------+\n|                   98 |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT sys.ps_thread_id(CONNECTION_ID());\n+-----------------------------------+\n| sys.ps_thread_id(CONNECTION_ID()) |\n+-----------------------------------+\n|                                98 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Variables and Default Values\nDESCRIPTION: A listing of MySQL server variables and their default values after reading options, including system, performance, and engine-specific parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp001.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nVariables (--variable-name=value)\nand boolean options {FALSE|TRUE}  Value (after reading options)\n--------------------------------- -----------------------------\nhelp                              TRUE\nabort-slave-event-count           0\nallow-suspicious-udfs             FALSE\nauto-increment-increment          1\nauto-increment-offset             1\nautomatic-sp-privileges           TRUE\nbasedir                           /home/daniel/mysql_binaries/mysql-5.0.82-linux-x86_64-glibc23\nbdb                               FALSE\nbind-address                      (No default value)\ncharacter-set-client-handshake    TRUE\ncharacter-set-filesystem          binary\ncharacter-set-server              latin1\ncharacter-sets-dir                /home/daniel/mysql_binaries/mysql-5.0.82-linux-x86_64-glibc23/share/mysql/charsets/\nchroot                            (No default value)\ncollation-server                  latin1_swedish_ci\ncompletion-type                   0\nconcurrent-insert                 1\nconsole                           FALSE\ndatadir                           /tmp/12345/data/\ndefault-character-set             latin1\ndefault-collation                 latin1_swedish_ci\ndefault-time-zone                 (No default value)\ndes-key-file                      (No default value)\ndisconnect-slave-event-count      0\nenable-locking                    FALSE\nenable-pstack                     FALSE\nengine-condition-pushdown         FALSE\nexternal-locking                  FALSE\nfederated                         TRUE\ngdb                               FALSE\nlarge-pages                       FALSE\ninit-connect                      (No default value)\ninit-file                         (No default value)\ninit-slave                        (No default value)\ninnodb                            TRUE\ninnodb_checksums                  TRUE\ninnodb_data_home_dir              /tmp/12345/data\ninnodb_adaptive_hash_index        TRUE\ninnodb_doublewrite                TRUE\ninnodb_fast_shutdown              1\ninnodb_file_per_table             FALSE\ninnodb_flush_log_at_trx_commit    1\ninnodb_flush_method               (No default value)\ninnodb_locks_unsafe_for_binlog    FALSE\ninnodb_log_arch_dir               (No default value)\ninnodb_log_group_home_dir         /tmp/12345/data\ninnodb_max_dirty_pages_pct        90\ninnodb_max_purge_lag              0\ninnodb_rollback_on_timeout        FALSE\ninnodb_status_file                FALSE\ninnodb_support_xa                 TRUE\ninnodb_table_locks                TRUE\ninnodb_use_legacy_cardinality_algorithm TRUE\nisam                              FALSE\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Client and Server Settings\nDESCRIPTION: This configuration defines basic settings for MySQL client connections and server initialization. It specifies the port and socket file for client connections, and sets the character encoding to UTF-8 for all new connections to the server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/unquoted_cnf.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nport        = 3306\nsocket      = /var/run/mysqld/mysqld.sock\n\n[mysqld]\ninit-connect=SET NAMES utf8\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status in MySQL\nDESCRIPTION: This SQL command shows the status of a specific table named '123_bar'. It's used to retrieve various metadata about the table structure and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow004_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS LIKE '123_bar'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Servers Configuration Table\nDESCRIPTION: Schema definition for the servers table that stores configuration details for MySQL foreign servers including connection parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL Foreign Servers table';\n```\n\n----------------------------------------\n\nTITLE: Calculating and Inserting Main Chunk Checksum in SQL\nDESCRIPTION: This SQL query calculates the row count and CRC32 checksum for a specific chunk within the `osc.t2` table, defined by lower and upper boundaries provided as parameters (`?`). It uses `FORCE INDEX(\\`c\\`)` for performance, handles potential NULL values in the checksum calculation using `CONCAT_WS` and `ISNULL`, and inserts the results (db, table, chunk info, count, CRC) into the `percona.checksums` table using `REPLACE INTO`. The comment `/*checksum chunk*/` indicates its core purpose in the checksum process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/oversize-chunks.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', convert(`c` using utf8mb4), CONCAT(ISNULL(`c`)))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `osc`.`t2` FORCE INDEX(`c`) WHERE (((? IS NULL OR `c` >= ?))) AND (((? IS NULL OR `c` <= ?))) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Selecting Tree Codes with Nested Subqueries in SQL\nDESCRIPTION: Complex SQL query that retrieves tree code information by filtering through multiple levels of subqueries. It joins the treeCODE table with treeADDITIONALCONTENT to filter by specific additional content values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='ABAN' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='VEN')))\n```\n\n----------------------------------------\n\nTITLE: Inserting New Lock Record for a User - SQL\nDESCRIPTION: Inserts a new row into the 'locks' table with userid, current timestamp, and a lock code. Used for establishing new locks or tokens on a user. Requires INSERT privilege and valid input datatypes, such as integer for userid and code. No outputs except side effects.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO locks (userid, date, code) VALUES('2376802', UNIX_TIMESTAMP(), 10671)\n```\n\n----------------------------------------\n\nTITLE: Calculating Checksums for sakila.city Table in MySQL\nDESCRIPTION: This SQL query calculates checksums for chunks of data in the 'city' table of the 'sakila' database. It uses the FNV_64 hash function and stores results in the 'percona.checksums' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(FNV_64(`city_id`, `city`, `country_id`, UNIX_TIMESTAMP(`last_update`)) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` >= ?)) AND ((`city_id` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status in SQL\nDESCRIPTION: This SQL command retrieves status information (like engine, rows, data length) for the table named 'tbl' within the 'foodb' database, matching the table name using LIKE. It's likely executed as part of the query analysis process to gather metadata about the involved table. The `\\G` terminator requests vertical output format, common in command-line clients.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `foodb` LIKE 'tbl'\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Explain Query\nDESCRIPTION: Converted SELECT query for EXPLAIN analysis, showing the same join conditions as the UPDATE query but restructured for execution plan examination.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_iters_2.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect  n.column1 = a.column1, n.word3 = a.word3 from db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo)\n```\n\n----------------------------------------\n\nTITLE: InnoDB Undo Log Slot Allocation Error in Database Logs\nDESCRIPTION: Error messages from InnoDB indicating that it cannot find a free slot for an undo log. This typically occurs when there are too many concurrent transactions running on the database server, exceeding the available undo log slots.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog006.txt#2025-04-22_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n091119 22:27:11InnoDB: Warning: cannot find a free slot for an undo log. Do you have too\nInnoDB: many active transactions running concurrently?\n091119 22:27:11InnoDB: Warning: cannot find a free slot for an undo log. Do you have too\nInnoDB: many active transactions running concurrently?\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Instrumentation in MySQL Performance Schema\nDESCRIPTION: Demonstrates the use of sys.ps_is_thread_instrumented function to check if a specific connection is instrumented within Performance Schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_118\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_thread_instrumented(CONNECTION_ID());\n+------------------------------------------------+\n| sys.ps_is_thread_instrumented(CONNECTION_ID()) |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n1 row in set (0.10 sec)\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Queries in MySQL\nDESCRIPTION: A series of SELECT queries executing against 'foo' table with consistent execution patterns. Each query runs in approximately 0.000899 seconds with no locks and examines 0 rows. Queries are executed by user@1.2.3.4 in the 'db' schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 647 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Creating Update Trigger for Online Schema Change in SQL\nDESCRIPTION: This trigger replaces rows in the new table when corresponding rows are updated in the original table. It uses REPLACE INTO to handle both inserts and updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync001.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER mk_osc_upd AFTER UPDATE ON `osc`.`t` FOR EACH ROW REPLACE INTO `osc`.`__new_t` (`id`, `c`) VALUES (NEW.`id`, NEW.`c`)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multilingual Data into UTF-8 Table\nDESCRIPTION: Inserts four rows of data into the 'test1' table, including English and Cyrillic characters. This demonstrates the UTF-8 encoding capability to store multilingual content.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `test1` VALUES\n(1,'watching'),(2,'poet'),(3,'просмотра'),(4,'Поэту')\n```\n\n----------------------------------------\n\nTITLE: Creating the 'store' Table in SQL\nDESCRIPTION: This SQL statement defines the `store` table structure for the Sakila database. It contains information about store locations, including store ID, the ID of the staff member who manages the store, and the store's address ID. The `store_id` is the primary key, and a unique constraint is placed on `manager_staff_id` to ensure each staff member manages at most one store. Foreign keys link to the `staff` and `address` tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Granting Privileges and User Initialization in MySQL SQL\nDESCRIPTION: This snippet demonstrates creating the user 'sally'@'%' if not already present, modifying password and account options, and granting specific column-level INSERT and SELECT privileges as well as general USAGE. It is meant for administering user privileges with fine-grained access control and enforces password and account policy as required. Dependencies include MySQL 5.7 or later (for IF NOT EXISTS), and appropriate administrative privileges. This setup restricts the user to the defined privileges and requires careful maintenance if schema changes occur.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke-57.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS 'sally'@'%';\nALTER USER 'sally'@'%' IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK;\nGRANT INSERT (city) ON `sakila`.`city` TO 'sally'@'%';\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\nGRANT SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Determining Next Chunk Boundary for sakila.film_actor Table in MySQL\nDESCRIPTION: This SQL query retrieves the next chunk boundary for processing the 'film_actor' table. It considers the composite primary key (actor_id, film_id) and limits the result to 2 rows for efficiency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `actor_id`, `actor_id`, `film_id` FROM `sakila`.`film_actor` FORCE INDEX(`PRIMARY`) WHERE ((`actor_id` > ?) OR (`actor_id` = ? AND `film_id` >= ?)) ORDER BY `actor_id`, `film_id` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Database Checksum Operation Results\nDESCRIPTION: A tabular output from a database checksum operation showing verification results for multiple MySQL database tables. The output includes columns for errors, differences, rows processed, and rows skipped for each database table across mysql, percona_test, and sakila databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/default-results-5.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERRORS DIFFS ROWS SKIPPED TABLE\n0 0 0 0 mysql.columns_priv\n0 0 0 0 mysql.db\n0 0 0 0 mysql.event\n0 0 0 0 mysql.func\n0 0 38 0 mysql.help_category\n0 0 453 0 mysql.help_keyword\n0 0 992 0 mysql.help_relation\n0 0 220 0 mysql.help_topic\n0 0 0 0 mysql.host\n0 0 0 0 mysql.ndb_binlog_index\n0 0 0 0 mysql.plugin\n0 0 0 0 mysql.proc\n0 0 0 0 mysql.procs_priv\n0 0 2 0 mysql.proxies_priv\n0 0 0 0 mysql.servers\n0 0 0 0 mysql.tables_priv\n0 0 0 0 mysql.time_zone\n0 0 0 0 mysql.time_zone_leap_second\n0 0 0 0 mysql.time_zone_name\n0 0 0 0 mysql.time_zone_transition\n0 0 0 0 mysql.time_zone_transition_type\n0 0 2 0 mysql.user\n0 0 22 0 percona_test.checksums\n0 0 1 0 percona_test.load_data\n0 0 1 0 percona_test.sentinel\n0 0 200 0 sakila.actor\n0 0 603 0 sakila.address\n0 0 16 0 sakila.category\n0 0 600 0 sakila.city\n0 0 109 0 sakila.country\n0 0 599 0 sakila.customer\n0 0 1000 0 sakila.film\n0 0 5462 0 sakila.film_actor\n0 0 1000 0 sakila.film_category\n0 0 1000 0 sakila.film_text\n0 0 4581 0 sakila.inventory\n0 0 6 0 sakila.language\n0 0 16049 0 sakila.payment\n0 0 16044 0 sakila.rental\n0 0 2 0 sakila.staff\n0 0 2 0 sakila.store\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Condition in SQL\nDESCRIPTION: This SQL query counts the number of rows in the 'blah' table of 'db1' database where 'col' is greater than 2. It performs a full table scan and uses a temporary table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-inheritance.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nuse db1;\nSELECT COUNT(*) FROM blah WHERE col > 2;\n```\n\n----------------------------------------\n\nTITLE: Querying Single Column from foo_tbl\nDESCRIPTION: Simple SELECT query retrieving 'col' column from foo_tbl table in foo schema. Query metrics show fast execution with no table scans or temporary tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow022.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM foo_tbl;\n```\n\n----------------------------------------\n\nTITLE: Checking Default Instrument Enablement in MySQL Performance Schema\nDESCRIPTION: Demonstrates the use of sys.ps_is_instrument_default_enabled function to check if an instrument is enabled by default in the current MySQL version.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_116\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_instrument_default_enabled('statement/sql/select');\n+--------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('statement/sql/select') |\n+--------------------------------------------------------------+\n| YES                                                          |\n+--------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating AFTER DELETE Trigger for 'film' Table to Clean 'film_text' Table - SQL\nDESCRIPTION: This trigger ensures referential integrity by automatically deleting rows from 'film_text' when a corresponding row in the 'film' table is deleted. The trigger 'del_film' is executed AFTER DELETE on 'film', requiring both referenced tables and suitable privileges. Trigger input: DELETE from 'film'; output: deletion from 'film_text' where IDs match; no parameters required, but assumes 'film_text' contains only 'film_id's present in 'film'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN\n    DELETE FROM film_text WHERE film_id = old.film_id;\n  END */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Checking Lower Boundaries in MySQL Table Checksumming\nDESCRIPTION: SQL query that counts rows below the lower boundary of a chunk in the test.ascii table. This query supports checksumming by ensuring all rows are accounted for, storing the count in percona.checksums table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/char-chunk-ascii-explain.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `test`.`ascii` FORCE INDEX(`c`) WHERE ((`c` < ?)) ORDER BY `c` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table Structure in MySQL\nDESCRIPTION: SQL script to create the store table with columns for tracking store information including manager relationships and address references. The table includes primary key, unique key and foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Conditional update of bizzle.bat table\nDESCRIPTION: An UPDATE query that sets the boop field to 'bop: 899' for records where fillze equals '899'. This query executed in 530us and accessed 18 distinct pages in InnoDB.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE bizzle.bat\nSET    boop='bop: 899'\nWHERE  fillze='899'\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL-Specific Resources Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet shows the PostgreSQL-specific resources that the tool collects, including clusters, policies, replicas, and tasks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"perconapgclusters\",\n\"pgclusters\",\n\"pgpolicies\",\n\"pgreplicas\",\n\"pgtasks\"\n```\n\n----------------------------------------\n\nTITLE: Creating the 'sys_config' Table in SQL\nDESCRIPTION: This SQL statement defines the `sys_config` table using the InnoDB engine. This table is designed to store system configuration parameters as key-value pairs. It includes `variable` (primary key), `value`, `set_time` (timestamp automatically updated), and `set_by` columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sys_config` (\n  `variable` varchar(128) NOT NULL,\n  `value` varchar(128) DEFAULT NULL,\n  `set_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `set_by` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`variable`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status for 'bar' in SQL\nDESCRIPTION: Fetches the status information for the table named 'bar'. Used within the query analysis report to provide context about the 'bar' table's characteristics relevant to the associated SELECT query's performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'bar'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Table Schema in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the inventory table that tracks film copies available in each store. The table includes foreign key constraints to both the film and store tables, and maintains an optimized composite index for store and film lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Insert Trigger in MySQL\nDESCRIPTION: Trigger that automatically inserts film title and description into film_text table when a new film is added. Maintains data consistency between film and film_text tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\nCREATE TRIGGER `ins_film` AFTER INSERT ON `film` FOR EACH ROW BEGIN\n    INSERT INTO film_text (film_id, title, description)\n        VALUES (new.film_id, new.title, new.description);\n  END;;\n```\n\n----------------------------------------\n\nTITLE: Creating Sales by Film Category View\nDESCRIPTION: Creates a view that calculates total sales by film category, joining payment data through rental, inventory, and film category relationships\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_film_category` AS select `c`.`name` AS `category`,sum(`p`.`amount`) AS `total_sales` from (((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `film` `f` on((`i`.`film_id` = `f`.`film_id`))) join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `c`.`name` order by sum(`p`.`amount`) desc */\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.film_actor Table Schema (SQL)\nDESCRIPTION: This SQL statement creates the `film_actor` table in the `sakila` database, serving as a junction table to link actors and films. It contains foreign keys `actor_id` and `film_id` referencing the `actor` and `film` tables respectively, which together form the composite primary key. It also includes a `last_update` timestamp. An index is defined on `film_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint unsigned NOT NULL,\n  `film_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating Film Category Junction Table in MySQL\nDESCRIPTION: Creates the film_category table to establish many-to-many relationship between films and categories. Contains foreign keys to both tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Address Table Schema in MySQL\nDESCRIPTION: Defines the address table with address details and foreign key relationship to city table. Includes fields for address_id, address, district, city_id, postal_code, phone and timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Performance Metrics in SQL\nDESCRIPTION: This SQL snippet analyzes the performance of a database query on the 'unsteady_table'. It explains various performance metrics like execution time, lock time, and rows sent, for a query selecting from 'very_variable_column'. This can be useful for database optimization by identifying slow queries that match specified limits.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow052.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect very_variable_column from unsteady_table\\G\n```\n\n----------------------------------------\n\nTITLE: Creating rental transaction table in SQL\nDESCRIPTION: Creates the rental table which tracks all film rental transactions. Features a unique constraint on the combination of rental date, inventory ID, and customer ID to prevent duplicate rentals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating and Granting Privileges to a MySQL User - SQL\nDESCRIPTION: This SQL script provides a step-by-step setup for the user 'sally' connecting from any host. It first ensures the user exists, configures authentication using 'mysql_native_password' with default password policy options, then grants specific SELECT and INSERT privileges on columns in the 'sakila' and 'test' databases, finishing with granting USAGE on all databases. The code should be executed by a user with sufficient administrative rights in MySQL. Key parameters include username ('sally'), host ('%'), target tables and columns for privilege assignment, and authentication policy. The expected result is a user with precise, restricted access according to organizational security policies. Dependencies include a running MySQL server and proper administrative access.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Counting Records in Table X using SQL\nDESCRIPTION: This SQL query counts the total number of records in table X. It's a simple SELECT statement with a COUNT(*) function, aliasing the result as 'A'. The query is commented as an instance selection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow023.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/* SELECT count(*) FROM X instance */ select count(*) as A from X\n```\n\n----------------------------------------\n\nTITLE: Granting General Usage Privileges in MySQL SQL\nDESCRIPTION: This SQL statement grants the USAGE privilege to the user 'sally' for all databases and tables, which allows the user to connect without granting additional privileges. It is frequently used to define users that should have minimal access or serve as a base for more granular grants; dependencies are the presence of the user and a functioning MySQL instance. Inputs are the privilege, the global database wildcard, and the user, resulting in the user being able to connect but perform no other operations unless further privileges are granted.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Explaining SELECT Query on 'foo' Table in SQL\nDESCRIPTION: Retrieves the execution plan for a query selecting all columns from the 'foo' table where the 'id' column equals 5. The `/*!50100 PARTITIONS*/` comment suggests partition awareness for MySQL 5.1.0+. This query (ID 0xA3D5B30F57AF3A43BB11C6B7F3BAAB30) had a very low average execution time (12us) according to the report.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM foo WHERE id=5\\G\n```\n\n----------------------------------------\n\nTITLE: Describing Statements With Errors or Warnings View Structures in MySQL - SQL\nDESCRIPTION: Shows SQL DESC command outputs for the statements_with_errors_or_warnings and x$statements_with_errors_or_warnings sys schema views. These views provide aggregated statistics for queries that have encountered errors or warnings, including error rates, execution counts, and digests. Access requires the sys schema, and the listings enumerate all field definitions and their metadata; input is table description commands, output is column metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_82\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_errors_or_warnings;\n+-------------+---------------------+------+-----+---------------------+-------+\n| Field       | Type                | Null | Key | Default             | Extra |\n+-------------+---------------------+------+-----+---------------------+-------+\n| query       | longtext            | YES  |     | NULL                |       |\n| db          | varchar(64)         | YES  |     | NULL                |       |\n| exec_count  | bigint(20) unsigned | NO   |     | NULL                |       |\n| errors      | bigint(20) unsigned | NO   |     | NULL                |       |\n| error_pct   | decimal(27,4)       | NO   |     | 0.0000              |       |\n| warnings    | bigint(20) unsigned | NO   |     | NULL                |       |\n| warning_pct | decimal(27,4)       | NO   |     | 0.0000              |       |\n| first_seen  | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen   | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest      | varchar(32)         | YES  |     | NULL                |       |\n+-------------+---------------------+------+-----+---------------------+-------+\n10 rows in set (0.55 sec)\n\nmysql> desc x$statements_with_errors_or_warnings;\n+-------------+---------------------+------+-----+---------------------+-------+\n| Field       | Type                | Null | Key | Default             | Extra |\n+-------------+---------------------+------+-----+---------------------+-------+\n| query       | longtext            | YES  |     | NULL                |       |\n| db          | varchar(64)         | YES  |     | NULL                |       |\n| exec_count  | bigint(20) unsigned | NO   |     | NULL                |       |\n| errors      | bigint(20) unsigned | NO   |     | NULL                |       |\n| error_pct   | decimal(27,4)       | NO   |     | 0.0000              |       |\n| warnings    | bigint(20) unsigned | NO   |     | NULL                |       |\n| warning_pct | decimal(27,4)       | NO   |     | 0.0000              |       |\n| first_seen  | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen   | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest      | varchar(32)         | YES  |     | NULL                |       |\n+-------------+---------------------+------+-----+---------------------+-------+\n10 rows in set (0.25 sec)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Duplicate Clustered Index in MySQL\nDESCRIPTION: SQL command to optimize a duplicate clustered index by dropping the redundant column 'a' from index 'b_a' since it's already part of the primary key. This optimization reduces index size while maintaining necessary functionality.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/issue_295.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `issue_295`.`t` DROP INDEX `b_a`, ADD INDEX `b_a` (`b`);\n```\n\n----------------------------------------\n\nTITLE: Database Connection States - PostgreSQL SQL\nDESCRIPTION: Groups and counts connection states from pg_stat_activity to show connection distribution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT state, COUNT(*) FROM pg_stat_activity GROUP BY state\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Client Configuration Settings\nDESCRIPTION: This text snippet provides client configuration settings typically found in a MySQL configuration file. It specifies the user, password, port, and socket to be used for the client connections, customized for 'msandbox' user under '/tmp/12345/mysql_sandbox12345.sock' for port '12345'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc005.txt#2025-04-22_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL help_category Table in SQL\nDESCRIPTION: This SQL statement defines the `help_category` table within the `mysql` database. It stores the categories for the built-in server-side help system, including category ID (`help_category_id`), name (`name`), parent category ID (`parent_category_id`), and a URL (`url`). The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Sample I/O Statistics Output\nDESCRIPTION: This snippet shows formatted text output representing I/O statistics for various block devices. The header row defines the metrics being reported, such as reads/sec (`rd_s`), read KB/request (`rd_avkb`), read MB/sec (`rd_mb_s`), write/sec (`wr_s`), write KB/request (`wr_avkb`), write MB/sec (`wr_mb_s`), device busy percentage (`busy`), queue time (`qtime`), and service time (`stime`). Each data row corresponds to a specific device (like `ram0`, `sda`, `dm-0`, `emcpowera`) and provides the values for those metrics at a specific timestamp or interval, indicated by `{101}`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_diskstats-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device       rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n{101} ram0          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram1          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram2          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram3          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram4          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram5          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram6          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram7          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram8          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram9          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram10         0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram11         0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram12         0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram13         0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram14         0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} ram15         0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sda           2.6     0.0     0.0     4%    0.0     3.2    46.3     0.0     0.0    25%    0.0     0.2   1%      0    48.8    0.1   0.2\n{101} sda1          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sda2          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sda3          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sda4          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sda5          0.1     0.0     0.0    31%    0.0     5.1     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.1    3.7   1.4\n{101} sda6          2.4     0.0     0.0     2%    0.0     3.1    46.3     0.0     0.0    25%    0.0     0.2   1%      0    48.7    0.1   0.2\n{101} sdb           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sdc           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} dm-0          0.1     6.7     0.0     0%    0.0     5.0     3.9     4.0     0.0     0%    0.0     0.0   0%      0     4.0    0.1   0.1\n{101} dm-1          0.0     4.0     0.0     0%    0.0     3.0     2.1     4.0     0.0     0%    0.0     0.1   0%      0     2.1    0.1   0.1\n{101} dm-2          0.0     0.0     0.0     0%    0.0     0.0     0.2     4.0     0.0     0%    0.0     0.4   0%      0     0.2    0.0   0.4\n{101} dm-3          0.0     0.0     0.0     0%    0.0     0.0     3.5     4.0     0.0     0%    0.0     0.0   0%      0     3.5    0.0   0.0\n{101} dm-4          0.1    18.2     0.0     0%    0.0     2.2     3.3     4.0     0.0     0%    0.0     0.4   0%      0     3.4    0.4   0.1\n{101} dm-5          0.0     0.0     0.0     0%    0.0     0.0     0.4     4.0     0.0     0%    0.0     0.1   0%      0     0.4    0.0   0.0\n{101} dm-6          2.3     9.9     0.0     0%    0.0     3.1    48.0    17.6     0.8     0%    0.0     0.3   1%      0    50.2    0.1   0.3\n{101} sr0           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sdd           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} sr1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} md0           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{101} emcpowera     0.0     0.0     0.0     0%    0.0     0.0     0.6    16.9     0.0    76%    0.0     0.6   0%      0     0.6    0.0   0.6\n```\n\n----------------------------------------\n\nTITLE: Actor Table Definition - MySQL\nDESCRIPTION: Creates the actor table with columns for actor ID, first name, last name and last update timestamp. Includes an index on last_name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Example INSERT Query into 'foo' Table in SQL\nDESCRIPTION: This SQL snippet displays an example query from an analyzed class involving inserts. It inserts a new row into the 'foo' table with values NULL and 3 for the respective columns. This query represents the class fingerprinted as 'insert into foo values(?+)'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report02.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO foo VALUES (NULL, 3)\n```\n\n----------------------------------------\n\nTITLE: Inserting into Table 't' using SELECT DUAL in SQL\nDESCRIPTION: This snippet demonstrates an INSERT operation into table 't'. The values to be inserted are potentially derived from `SELECT DUAL`. DUAL is a dummy table often used for selecting constants or expressions. The surrounding text provides a unique identifier `Query_id: 0x87903DB6D81F906FCF687AF9F2D5E248.1`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT t\nSELECT DUAL\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status for 'bar' in SQL\nDESCRIPTION: This SQL command fetches status information (like engine, row count, data length, index length) for the `bar` table in the `maindb` database using a LIKE pattern. The `\\G` modifier formats the output vertically. This is used to gather context about the table involved in the analyzed query class.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report02.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `maindb` LIKE 'bar'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Sales by Store Temporary Table Structure in MySQL\nDESCRIPTION: SQL script to create a temporary table structure for the sales_by_store view. The table contains store name, manager name, and total sales information with appropriate data types.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `sales_by_store` (\n  `store` varchar(101),\n  `manager` varchar(91),\n  `total_sales` decimal(27,2)\n) ENGINE=MyISAM */\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'customer_list' View in Sakila\nDESCRIPTION: Defines the structure for the `customer_list` view in the `sakila` database. This view provides a simplified list of customers, combining first and last names, and joining with address, city, and country tables to include full address details, phone number, city, country, active status ('notes'), and store ID (SID). The view definition specifies the SQL security context as DEFINER.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Final view structure for view `customer_list`\n--\n\n/*!50001 DROP TABLE IF EXISTS `customer_list`*/;\n/*!50001 DROP VIEW IF EXISTS `customer_list`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `customer_list` AS select `cu`.`customer_id` AS `ID`,concat(`cu`.`first_name`,_utf8' ',`cu`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,if(`cu`.`active`,_utf8'active',_utf8'') AS `notes`,`cu`.`store_id` AS `SID` from (((`customer` `cu` join `address` `a` on((`cu`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL schema_table_statistics Example\nDESCRIPTION: Demonstrates a query against the schema_table_statistics view showing I/O and access statistics for the sys_config table in the sys schema. The output includes metrics for reads, writes, and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_table_statistics\\G\n*************************** 1. row ***************************\n     table_schema: sys\n       table_name: sys_config\n    total_latency: 0 ps\n     rows_fetched: 0\n    fetch_latency: 0 ps\n    rows_inserted: 0\n   insert_latency: 0 ps\n     rows_updated: 0\n   update_latency: 0 ps\n     rows_deleted: 0\n   delete_latency: 0 ps\n io_read_requests: 8\n          io_read: 2.28 KiB\n  io_read_latency: 727.32 us\nio_write_requests: 0\n         io_write: 0 bytes\n io_write_latency: 0 ps\n io_misc_requests: 10\n  io_misc_latency: 126.88 us\n```\n\n----------------------------------------\n\nTITLE: Replacing Checksums with CRC32 Calculation in sakila.city Table\nDESCRIPTION: This query calculates and replaces checksums in the percona.checksums table. It computes a CRC32 hash of city_id, city, country_id, and last_update timestamp for records within a specified country_id range.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx004.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `city_id`, `city`, `country_id`, UNIX_TIMESTAMP(`last_update`))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `sakila`.`city` FORCE INDEX(`idx_fk_country_id`) WHERE ((`country_id` >= ?)) AND ((`country_id` <= ?)) AND (country_id > 100) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Columns Privileges Table Definition\nDESCRIPTION: Creates the columns_priv table for storing column-level privileges in the MySQL privilege system. Defines granular access controls per column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges';\n```\n\n----------------------------------------\n\nTITLE: Showing Enabled Performance Schema Consumers in MySQL\nDESCRIPTION: Displays all currently enabled consumers in Performance Schema configuration.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_153\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_enabled_consumers();\n```\n\n----------------------------------------\n\nTITLE: Filter User Rooms by Activity - MySQL\nDESCRIPTION: This SQL query fetches records from 'users_rooms' for a specific room ('here') and recent activity (within the last 5 minutes), excluding a specific user ID. It relies on the 'users_rooms' table having a 'here', 'date', and 'userid' field.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users_rooms WHERE here=3928 AND date > (UNIX_TIMESTAMP() - (60 * 5)) AND userid != 2530338 ORDER BY level DESC\n```\n\n----------------------------------------\n\nTITLE: Creating UTF-8 Table in MySQL\nDESCRIPTION: Creates a table named 'test1' with an integer ID field and a varchar field. The table uses InnoDB storage engine and UTF-8 character set to support multilingual data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `test1` (\n  `kwid` int(10) unsigned NOT NULL default '0',\n  `keyword` varchar(80) NOT NULL default ''\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.component` Table in SQL\nDESCRIPTION: Defines the `component` table in the `mysql` database. This table stores information about installed server components, including a unique ID, group ID, and the component's Uniform Resource Name (URN).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `component` (\n  `component_id` int unsigned NOT NULL AUTO_INCREMENT,\n  `component_group_id` int unsigned NOT NULL,\n  `component_urn` text NOT NULL,\n  PRIMARY KEY (`component_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='Components'\n```\n\n----------------------------------------\n\nTITLE: Creating Procedure Privileges Table in SQL\nDESCRIPTION: This SQL snippet sets up the procs_priv table for managing privileges on routines, including functions and procedures. It involves columns for Host, Db, User, Routine_name, and more, with a multistring primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8mb3_bin NOT NULL,\n  `Grantor` varchar(288) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`User`,`Db`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating time_zone Table in mysql using SQL\nDESCRIPTION: Defines the `time_zone` table within the `mysql` database. This table stores the unique identifiers for time zones and indicates whether leap seconds are used for each zone. It uses the InnoDB engine with statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zones'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command Syntax - Bash\nDESCRIPTION: Shows the basic command syntax for running pt-galera-log-explainer with optional flags and required command and paths arguments\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer [--since=] [--until=] [-vv] [--merge-by-directory] [--pxc-operator] <command> <paths ...>\n```\n\n----------------------------------------\n\nTITLE: Simple Table Update\nDESCRIPTION: Updates biz column in foo.bar table. Execution time: 530us.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE foo.bar\nSET    biz = '91848182522'\n```\n\n----------------------------------------\n\nTITLE: Creating tables_priv Table in mysql using SQL\nDESCRIPTION: Defines the `tables_priv` table within the `mysql` database. This table stores table-level privileges granted to users, specifying permissions like SELECT, INSERT, UPDATE, etc., on specific tables. It uses the MyISAM engine with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining Help Categories Table in MySQL\nDESCRIPTION: This table structure covers 'help_category', aiding in the organization of help information within MySQL. Each category is identified uniquely and may contain a parent-child hierarchy.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.language Table in SQL\nDESCRIPTION: This SQL snippet defines the `language` table using the InnoDB engine. It stores information about different languages, likely for films. It includes an auto-incrementing primary key (`language_id`), a column for the language name, and a `last_update` timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Additional Content Values by City in SQL\nDESCRIPTION: SQL query that selects distinct values from the treeADDITIONALCONTENT table by joining with treeCODE and tree tables. It filters by specific city ID and partner ID while using subqueries for additional filtering.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct treeaddit0_.value as col_0_0_ from treeADDITIONALCONTENT treeaddit0_, treeCODE treecode1_, tree tree4_ where treecode1_.treeid=tree4_.treeid and treeaddit0_.treecodeid=treecode1_.treecodeid and (treecode1_.treeid in (select tree2_.treeid from tree tree2_ where tree2_.qcnscityid=1053101)) and treeaddit0_.additionaltypeid=2 and tree4_.partnerid=2\n```\n\n----------------------------------------\n\nTITLE: Handling Upper Boundary for sakila.film_actor Table Checksum in MySQL\nDESCRIPTION: This SQL query handles the upper boundary of the chunk being processed for the 'film_actor' table. It counts rows above the current chunk's upper boundary, considering the composite primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`film_actor` FORCE INDEX(`PRIMARY`) WHERE ((`actor_id` > ?) OR (`actor_id` = ? AND `film_id` > ?)) ORDER BY `actor_id`, `film_id` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Defining percona_test.checksums Table Schema (SQL)\nDESCRIPTION: This SQL snippet creates the `checksums` table within the `percona_test` database. It includes columns for the database and table name (`db_tbl`) and the calculated checksum (`checksum`). The `db_tbl` column serves as the primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Example of SQL SELECT from host_summary View\nDESCRIPTION: Provides an example of selecting data from the host_summary view, highlighting key fields like statements, statement_latency, and current_connections for a specific host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nmysql> select * from host_summary;\n+------+------------+-------------------+-----------------------+-------------+----------+-----------------+---------------------+-------------------+--------------+\n| host | statements | statement_latency | statement_avg_latency | table_scans | file_ios | file_io_latency | current_connections | total_connections | unique_users |\n+------+------------+-------------------+-----------------------+-------------+----------+-----------------+---------------------+-------------------+--------------+\n| hal1 |       2924 | 00:03:59.53       | 81.92 ms              |          82 |    54702 | 55.61 s         |                   1 |                 1 |            1 |\n+------+------------+-------------------+-----------------------+-------------+----------+-----------------+---------------------+-------------------+--------------+\n```\n\n----------------------------------------\n\nTITLE: Selecting Fruit from Trees Table in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table in the 'food' database. The query is simple but the report provides extensive performance metrics and execution details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_2-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Querying Less Variable Column from Steady Table in MySQL\nDESCRIPTION: This SQL query selects a less variable column from a stable table, resulting in more consistent and generally shorter query execution times. The query is executed multiple times with relatively stable performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nselect less_variable_column from steady_table;\n```\n\n----------------------------------------\n\nTITLE: Tracing File System Synchronization (fsync) Call for MySQL Thread\nDESCRIPTION: This snippet shows output from a system call tracer like 'strace', monitoring a specific thread (PID 21248) of the main MySQL process (PID 21219). It captures an 'fsync' system call operating on file descriptor 11 (likely corresponding to '/data/data/ib_logfile0' from the previous listing), showing the call's successful completion (return code 0) and the time taken (0.468671 seconds). This indicates data being flushed to persistent storage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/004-samples.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nProcess 21219 attached with 41 threads - interrupt to quit\n[pid 21248] fsync(11 <unfinished ...>\n[pid 21248] <... fsync resumed> )       = 0 <0.468671>\n```\n\n----------------------------------------\n\nTITLE: Checking Upper Boundary Chunks in MySQL\nDESCRIPTION: Verifies and records count of records above the upper boundary of the current chunk. Uses FORCE INDEX for performance optimization and includes ordering by index columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx002.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `issue_519`.`t` FORCE INDEX(`myidx`) WHERE ((`i` > ?) OR (`i` = ? AND `y` > ?)) ORDER BY `i`, `y` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Selecting treeCODE Rows with Alternative Filtered Subqueries - SQL\nDESCRIPTION: Similar to the above, selects 'treeCODE' records with code IDs filtered by different 'value' and 'additionaltypeid' conditions: type 4 equals 'BUD' and type 3 equals 'GLO'. This pattern allows code-based segmentation for downstream processing, reporting, or ETL jobs based on complex business attributes. Presumes access to 'treeCODE' and 'treeADDITIONALCONTENT' with values suitable for the filter.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nselect treecode0_.treecodeid as treecod1_64_, treecode0_.roomcomfortid as roomcomf2_64_, treecode0_.roomtypeid as roomtypeid64_, treecode0_.roomviewid as roomviewid64_, treecode0_.roomserviceid as roomserv5_64_, treecode0_.roomcategoryid as roomcate6_64_, treecode0_.mindays as mindays64_, treecode0_.partnercode as partnerc8_64_, treecode0_.originalname as original9_64_, treecode0_.isactive as isactive64_, treecode0_.`match` as match11_64_, treecode0_.treeid as treeid64_ from treeCODE treecode0_ where treecode0_.treecodeid in (select treeaddit1_.treecodeid from treeADDITIONALCONTENT treeaddit1_ where treeaddit1_.additionaltypeid=4 and treeaddit1_.value='BUD' and (treeaddit1_.treecodeid in (select treeaddit2_.treecodeid from treeADDITIONALCONTENT treeaddit2_ where treeaddit2_.additionaltypeid=3 and treeaddit2_.value='GLO')))\n```\n\n----------------------------------------\n\nTITLE: Creating Event Table in MySQL\nDESCRIPTION: Defines a table to manage scheduled events in MySQL, including details such as name, execution time, and status. Utilizes MyISAM engine and utf8 character set. Fields like execute_at, interval_value, and status facilitate the execution and management of database events. Constraint includes a primary key on db and name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Creation Statement for Group_ Table in SQL\nDESCRIPTION: This SQL command displays the `CREATE TABLE` statement for the 'Group_' table, detailing its schema. This information helps in understanding the structure of the table used in the subquery of the main `UPDATE` statement. The `\\G` terminator requests vertical output format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow050.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `Group_`\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Batch Insert Values\nDESCRIPTION: SQL insert value tuples containing an ID (74-85), reference numbers, and timestamps set to '2006-02-15 10:05:03'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n(74,415,'2006-02-15 10:05:03'),(74,484,'2006-02-15 10:05:03'),(74,503,'2006-02-15 10:05:03')...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status for 'foo' in SQL\nDESCRIPTION: Fetches the status information for the table named 'foo'. This command provides context within the query analysis report regarding the 'foo' table's properties, aiding in the interpretation of the associated query's performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'foo'\\G\n```\n\n----------------------------------------\n\nTITLE: Selecting ID from tbl\nDESCRIPTION: This SQL SELECT statement retrieves the 'id' column from the 'tbl' table where the 'id' is equal to 1. The operation is on the 'db1' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id FROM tbl WHERE id = 1\\G\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Binlog Index Table in MySQL\nDESCRIPTION: Defines a table to index binlogs from MySQL NDB Cluster with fields for position, file, epoch, and various operation counts. Utilizes MyISAM engine and latin1 character set. It enables tracking and reconstruction of operations based on epochs, using epoch as the primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Displaying Device I/O Statistics in Linux\nDESCRIPTION: This snippet shows a tabular output of I/O statistics for various devices in a Linux system. It includes metrics such as read/write operations per second, average request size, throughput, merge ratio, concurrency, response time, and busy percentage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-align/samples/001-aligned.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts   device      rd_s rd_avkb rd_mb_s rd_mrg rd_cnc rd_rt  wr_s wr_avkb wr_mb_s wr_mrg wr_cnc wr_rt busy in_prg\n{279} ram0         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram1         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram2         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram3         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram4         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram5         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram6         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram7         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram8         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram9         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram10        0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram11        0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram12        0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram13        0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram14        0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} ram15        0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sda          0.0     0.0     0.0 47%       0.0   4.0   3.7     0.0     0.0 64%       0.0   0.2 0%        0\n{279} sda1         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sda2         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sda3         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sda4         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sda5         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sda6         0.0     0.0     0.0 47%       0.0   4.0   3.7     0.0     0.0 64%       0.0   0.2 0%        0\n{279} sdb          0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sdb1         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sdc        749.2    16.0    11.7 1%        1.0   1.3 261.4    15.8     4.0 0%        0.2   0.6 98%       0\n{279} sdc1       749.2    16.0    11.7 1%        1.0   1.3 261.4    15.8     4.0 0%        0.2   0.6 98%       0\n{279} dm-0         0.0     0.0     0.0 0%        0.0   0.0   2.4     4.0     0.0 0%        0.0   0.0 0%        0\n{279} dm-1         0.0     4.0     0.0 0%        0.0   4.0   2.1     4.0     0.0 0%        0.0   0.4 0%        0\n{279} dm-2         0.0     0.0     0.0 0%        0.0   0.0   0.1     4.0     0.0 0%        0.0   0.1 0%        0\n{279} dm-3         0.0     0.0     0.0 0%        0.0   0.0   3.3     4.0     0.0 0%        0.0   0.0 0%        0\n{279} dm-4         0.1    10.6     0.0 0%        0.0   3.9   1.9     4.0     0.0 0%        0.0   0.1 0%        0\n{279} dm-5         0.0     0.0     0.0 0%        0.0   0.0   0.2     4.0     0.0 0%        0.0   0.3 0%        0\n{279} dm-6         0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sr0          0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sdd          0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} sr1          0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} md0          0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} emcpowera    0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} emcpowera1   0.0     0.0     0.0 0%        0.0   0.0   0.0     0.0     0.0 0%        0.0   0.0 0%        0\n{279} dm-7       755.0    15.9    11.7 0%        1.0   1.3 261.7    15.8     4.0 0%        0.2   0.6 98%       0\n```\n\n----------------------------------------\n\nTITLE: Updating boop Column in bizzle.bat Table in MySQL\nDESCRIPTION: Updates the boop column in bizzle.bat table for records where fillze column equals '899'. It sets a specific string value for matching records.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSET timestamp=1197996508;\nUPDATE bizzle.bat\nSET    boop='bop: 899'\nWHERE  fillze='899';\n```\n\n----------------------------------------\n\nTITLE: Creating Film Category Relationship Table in MySQL\nDESCRIPTION: SQL CREATE TABLE statement for the film_category junction table that creates the many-to-many relationship between films and categories. This table uses a composite primary key and maintains foreign key constraints to both the film and category tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating the 'language' Table in SQL\nDESCRIPTION: This SQL snippet defines the `language` table using the InnoDB engine. It stores a list of languages, likely for films. It features an auto-incrementing `language_id` as the primary key, a `name` column for the language name, and a `last_update` timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_statement_latency Tables in MySQL\nDESCRIPTION: Shows the structure of host_summary_by_statement_latency and x$host_summary_by_statement_latency tables. These tables summarize statement execution statistics by host, including latency metrics, rows processed, and scan information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_statement_latency;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| host          | varchar(60)   | YES  |     | NULL    |       |\n| total         | decimal(42,0) | YES  |     | NULL    |       |\n| total_latency | text          | YES  |     | NULL    |       |\n| max_latency   | text          | YES  |     | NULL    |       |\n| lock_latency  | text          | YES  |     | NULL    |       |\n| rows_sent     | decimal(42,0) | YES  |     | NULL    |       |\n| rows_examined | decimal(42,0) | YES  |     | NULL    |       |\n| rows_affected | decimal(42,0) | YES  |     | NULL    |       |\n| full_scans    | decimal(43,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n9 rows in set (0.29 sec)\n\nmysql> desc x$host_summary_by_statement_latency;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| host          | varchar(60)   | YES  |     | NULL    |       |\n| total         | decimal(42,0) | YES  |     | NULL    |       |\n| total_latency | decimal(42,0) | YES  |     | NULL    |       |\n| max_latency   | decimal(42,0) | YES  |     | NULL    |       |\n| lock_latency  | decimal(42,0) | YES  |     | NULL    |       |\n| rows_sent     | decimal(42,0) | YES  |     | NULL    |       |\n| rows_examined | decimal(42,0) | YES  |     | NULL    |       |\n| rows_affected | decimal(42,0) | YES  |     | NULL    |       |\n| full_scans    | decimal(43,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n9 rows in set (0.54 sec)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into MySQL Table 'foo'\nDESCRIPTION: This SQL statement inserts multiple rows of data into a table named 'foo'. The table has 8 columns (a through h) and the values include numeric data and timestamps. The data is inserted in batches, with each batch containing 10 rows of related information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into foo (a,b,c,d,e,f,g,h) values (8341,1236698100,9,0.0,300,301,7256314,1236699915),(8341,1236698100,10,0.0,300,301,7256314,1236699915),(8341,1236698100,1,0.0,300,301,7256314,1236699915),(8341,1236698100,2,202.379,300,301,7256314,1236699915),(8341,1236698100,3,59.987,300,301,7256314,1236699915),(8341,1236698100,4,0.194,300,301,7256314,1236699915),(8341,1236698100,5,0.0,300,301,7256314,1236699915),(8341,1236698100,6,21.0,300,301,7256314,1236699915),(8341,1236698100,7,0.0,300,301,7256314,1236699915),(8341,1236698100,8,0.0,300,301,7256314,1236699915),(8341,1236698400,9,0.0,300,299,7256314,1236699915),(8341,1236698400,10,0.0,300,299,7256314,1236699915),(8341,1236698400,1,0.0,300,299,7256314,1236699915),(8341,1236698400,2,202.647,300,299,7256314,1236699915),(8341,1236698400,3,60.012,300,299,7256314,1236699915),(8341,1236698400,4,0.19,300,299,7256314,1236699915),(8341,1236698400,5,0.0,300,299,7256314,1236699915),(8341,1236698400,6,21.0,300,299,7256314,1236699915),(8341,1236698400,7,0.0,300,299,7256314,1236699915),(8341,1236698400,8,0.0,300,299,7256314,1236699915),(8341,1236698700,9,0.0,300,300,7256314,1236699915),(8341,1236698700,10,0.0,300,300,7256314,1236699915),(8341,1236698700,1,0.0,300,300,7256314,1236699915),(8341,1236698700,2,201.657,300,300,7256314,1236699915),(8341,1236698700,3,59.997,300,300,7256314,1236699915),(8341,1236698700,4,0.189,300,300,7256314,1236699915),(8341,1236698700,5,0.0,300,300,7256314,1236699915),(8341,1236698700,6,21.0,300,300,7256314,1236699915),(8341,1236698700,7,0.0,300,300,7256314,1236699915),(8341,1236698700,8,0.0,300,300,7256314,1236699915),(8341,1236699000,9,0.0,300,301,7256314,1236699915),(8341,1236699000,10,0.0,300,301,7256314,1236699915),(8341,1236699000,1,0.0,300,301,7256314,1236699915),(8341,1236699000,2,203.359,300,301,7256314,1236699915),(8341,1236699000,3,59.984,300,301,7256314,1236699915),(8341,1236699000,4,0.184,300,301,7256314,1236699915),(8341,1236699000,5,0.0,300,301,7256314,1236699915),(8341,1236699000,6,20.0,300,301,7256314,1236699915),(8341,1236699000,7,0.0,300,301,7256314,1236699915),(8341,1236699000,8,0.0,300,301,7256314,1236699915),(8341,1236699300,9,0.0,300,299,7256314,1236699915),(8341,1236699300,10,0.0,300,299,7256314,1236699915),(8341,1236699300,1,0.0,300,299,7256314,1236699915),(8341,1236699300,2,203.831,300,299,7256314,1236699915),(8341,1236699300,3,59.987,300,299,7256314,1236699915),(8341,1236699300,4,0.174,300,299,7256314,1236699915),(8341,1236699300,5,0.0,300,299,7256314,1236699915),(8341,1236699300,6,20.0,300,299,7256314,1236699915),(8341,1236699300,7,0.0,300,299,7256314,1236699915),(8341,1236699300,8,0.0,300,299,7256314,1236699915),(8343,1236698100,9,0.0,300,300,7256314,1236699915),(8343,1236698100,10,0.0,300,300,7256314,1236699915),(8343,1236698100,1,0.0,300,300,7256314,1236699915),(8343,1236698100,2,202.914,300,300,7256314,1236699915),(8343,1236698100,3,59.98,300,300,7256314,1236699915),(8343,1236698100,4,0.114,300,300,7256314,1236699915),(8343,1236698100,5,0.0,300,300,7256314,1236699915),(8343,1236698100,6,21.0,300,300,7256314,1236699915),(8343,1236698100,7,0.0,300,300,7256314,1236699915),(8343,1236698100,8,0.0,300,300,7256314,1236699915),(8343,1236698400,9,0.0,300,299,7256314,1236699915),(8343,1236698400,10,0.0,300,299,7256314,1236699915),(8343,1236698400,1,0.0,300,299,7256314,1236699915),(8343,1236698400,2,204.669,300,299,7256314,1236699915),(8343,1236698400,3,60.012,300,299,7256314,1236699915),(8343,1236698400,4,0.114,300,299,7256314,1236699915),(8343,1236698400,5,0.0,300,299,7256314,1236699915),(8343,1236698400,6,21.0,300,299,7256314,1236699915),(8343,1236698400,7,0.0,300,299,7256314,1236699915),(8343,1236698400,8,0.0,300,299,7256314,1236699915),(8343,1236698700,9,0.0,300,301,7256314,1236699915),(8343,1236698700,10,0.0,300,301,7256314,1236699915),(8343,1236698700,1,0.0,300,301,7256314,1236699915),(8343,1236698700,2,205.318,300,301,7256314,1236699915),(8343,1236698700,3,60.003,300,301,7256314,1236699915),(8343,1236698700,4,0.113,300,301,7256314,1236699915),(8343,1236698700,5,0.0,300,301,7256314,1236699915),(8343,1236698700,6,21.0,300,301,7256314,1236699915),(8343,1236698700,7,0.0,300,301,7256314,1236699915),(8343,1236698700,8,0.0,300,301,7256314,1236699915),(8343,1236699000,9,0.0,300,300,7256314,1236699915),(8343,1236699000,10,0.0,300,300,7256314,1236699915),(8343,1236699000,1,0.0,300,300,7256314,1236699915),(8343,1236699000,2,204.712,300,300,7256314,1236699915),(8343,1236699000,3,59.985,300,300,7256314,1236699915),(8343,1236699000,4,0.113,300,300,7256314,1236699915),(8343,1236699000,5,0.0,300,300,7256314,1236699915),(8343,1236699000,6,21.0,300,300,7256314,1236699915),(8343,1236699000,7,0.0,300,300,7256314,1236699915),(8343,1236699000,8,0.0,300,300,7256314,1236699915),(8343,1236699300,9,0.0,300,300,7256314,1236699915),(8343,1236699300,10,0.0,300,300,7256314,1236699915),(8343,1236699300,1,0.0,300,300,7256314,1236699915),(8343,1236699300,2,203.862,300,300,7256314,1236699915),(8343,1236699300,3,59.986,300,300,7256314,1236699915),(8343,1236699300,4,0.113,300,300,7256314,1236699915),(8343,1236699300,5,0.0,300,300,7256314,1236699915),(8343,1236699300,6,21.0,300,300,7256314,1236699915),(8343,1236699300,7,0.0,300,300,7256314,1236699915),(8343,1236699300,8,0.0,300,300,7256314,1236699915),(8345,1236698100,9,0.0,300,300,7256314,1236699915),(8345,1236698100,10,0.0,300,300,7256314,1236699915),(8345,1236698100,1,0.0,300,300,7256314,1236699915),(8345,1236698100,2,204.472,300,300,7256314,1236699915),(8345,1236698100,3,60.01,300,300,7256314,1236699915),(8345,1236698100,4,0.036,300,300,7256314,1236699915),(8345,1236698100,5,0.0,300,300,7256314,1236699915),(8345,1236698100,6,21.0,300,300,7256314,1236699915),(8345,1236698100,7,0.0,300,300,7256314,1236699915),(8345,1236698100,8,0.0,300,300,7256314,1236699915),(8345,1236698400,9,0.0,300,300,7256314,1236699915),(8345,1236698400,10,0.0,300,300,7256314,1236699915),(8345,1236698400,1,0.0,300,300,7256314,1236699915),(8345,1236698400,2,204.168,300,300,7256314,1236699915),(8345,1236698400,3,60.035,300,300,7256314,1236699915),(8345,1236698400,4,0.036,300,300,7256314,1236699915),(8345,1236698400,5,0.0,300,300,7256314,1236699915),(8345,1236698400,6,20.0,300,300,7256314,1236699915),(8345,1236698400,7,0.0,300,300,7256314,1236699915),(8345,1236698400,8,0.0,300,300,7256314,1236699915),(8345,1236698700,9,0.0,300,301,7256314,1236699915),(8345,1236698700,10,0.0,300,301,7256314,1236699915),(8345,1236698700,1,0.0,300,301,7256314,1236699915),(8345,1236698700,2,202.192,300,301,7256314,1236699915),(8345,1236698700,3,59.99,300,301,7256314,1236699915),(8345,1236698700,4,0.036,300,301,7256314,1236699915),(8345,1236698700,5,0.0,300,301,7256314,1236699915),(8345,1236698700,6,20.0,300,301,7256314,1236699915),(8345,1236698700,7,0.0,300,301,7256314,1236699915),(8345,1236698700,8,0.0,300,301,7256314,1236699915),(8345,1236699000,9,0.0,300,300,7256314,1236699915),(8345,1236699000,10,0.0,300,300,7256314,1236699915),(8345,1236699000,1,0.0,300,300,7256314,1236699915),(8345,1236699000,2,204.511,300,300,7256314,1236699915),(8345,1236699000,3,60.007,300,300,7256314,1236699915),(8345,1236699000,4,0.035,300,300,7256314,1236699915),(8345,1236699000,5,0.0,300,300,7256314,1236699915),(8345,1236699000,6,20.0,300,300,7256314,1236699915),(8345,1236699000,7,0.0,300,300,7256314,1236699915),(8345,1236699000,8,0.0,300,300,7256314,1236699915),(8345,1236699300,9,0.0,300,299,7256314,1236699915),(8345,1236699300,10,0.0,300,299,7256314,1236699915),(8345,1236699300,1,0.0,300,299,7256314,1236699915),(8345,1236699300,2,203.608,300,299,7256314,1236699915),(8345,1236699300,3,59.975,300,299,7256314,1236699915),(8345,1236699300,4,0.035,300,299,7256314,1236699915),(8345,1236699300,5,0.0,300,299,7256314,1236699915),(8345,1236699300,6,20.0,300,299,7256314,1236699915),(8345,1236699300,7,0.0,300,299,7256314,1236699915),(8345,1236699300,8,0.0,300,299,7256314,1236699915),(8346,1236698400,9,0.0,300,300,7256314,1236699915),(8346,1236698400,10,0.0,300,300,7256314,1236699915),(8346,1236698400,1,0.0,300,300,7256314,1236699915),(8346,1236698400,2,203.512,300,300,7256314,1236699915),(8346,1236698400,3,60.012,300,300,7256314,1236699915),(8346,1236698400,4,0.074,300,300,7256314,1236699915),(8346,1236698400,5,0.0,300,300,7256314,1236699915),(8346,1236698400,6,20.0,300,300,7256314,1236699915),(8346,1236698400,7,0.0,300,300,7256314,1236699915),(8346,1236698400,8,0.0,300,300,7256314,1236699915),(8346,1236698700,9,0.0,300,301,7256314,1236699915),(8346,1236698700,10,0.0,300,301,7256314,1236699915),(8346,1236698700,1,0.0,300,301,7256314,1236699915),(8346,1236698700,2,201.569,300,301,7256314,1236699915),(8346,1236698700,3,59.961,300,301,7256314,1236699915),(8346,1236698700,4,0.073,300,301,7256314,1236699915),(8346,1236698700,5,0.0,300,301,7256314,1236699915),(8346,1236698700,6,20.0,300,301,7256314,1236699915),(8346,1236698700,7,0.0,300,301,7256314,1236699915),(8346,1236698700,8,0.0,300,301,7256314,1236699915),(8346,1236699000,9,0.0,300,299,7256314,1236699915),(8346,1236699000,10,0.0,300,299,7256314,1236699915),(8346,1236699000,1,0.0,300,299,7256314,1236699915),(8346,1236699000,2,203.537,300,299,7256314,1236699915),(8346,1236699000,3,59.995,300,299,7256314,1236699915),(8346,1236699000,4,0.073,300,299,7256314,1236699915),(8346,1236699000,5,0.0,300,299,7256314,1236699915),(8346,1236699000,6,20.0,300,299,7256314,1236699915),(8346,1236699000,7,0.0,300,299,7256314,1236699915),(8346,1236699000,8,0.0,300,299,7256314,1236699915),(8346,1236699300,9,0.0,300,300,7256314,1236699915),(8346,1236699300,10,0.0,300,300,7256314,1236699915),(8346,1236699300,1,0.0,300,300,7256314,1236699915),(8346,1236699300,2,204.243,300,300,7256314,1236699915),(8346,1236699300,3,59.978,300,300,7256314,1236699915),(8346,1236699300,4,0.074,300,300,7256314,1236699915),(8346,1236699300,5,0.0,300,300,7256314,1236699915),(8346,1236699300,6,20.0,300,300,7256314,1236699915),(8346,1236699300,7,0.0,300,300,7256314,1236699915),(8346,1236699300,8,0.0,300,300,7256314,1236699915),(8346,1236699600,9,0.0,300,300,7256314,1236699915),(8346,1236699\n```\n\n----------------------------------------\n\nTITLE: Creating film_actor junction table in SQL\nDESCRIPTION: Creates the film_actor table which represents many-to-many relationship between films and actors. It includes foreign keys to both the actor and film tables with cascading updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into a Table in MySQL - SQL\nDESCRIPTION: This SQL snippet inserts a row into the table 'v' within the database 'db', setting the columns 'm' and 'b' to an empty string and 'Exact', respectively. Accompanying statements such as SHOW TABLE STATUS and SHOW CREATE TABLE provide structure introspection. Requires INSERT privilege on the target table and assumes the table exists with the specified columns. Inputs are the column values specified in the VALUES clause, and the output is a new row in 'db.v'. Limitations include the need for existing table and columns and respecting NOT NULL or other constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow035.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n#    SHOW TABLE STATUS FROM `db` LIKE 'v'\\G\\n#    SHOW CREATE TABLE `db`.`v`\\G\\nINSERT INTO db.v (m, b) VALUES ('', 'Exact')\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry with Query and Metadata\nDESCRIPTION: A complete slow query log entry showing execution time, lock time, row statistics, and a SELECT query. Includes additional context like file path, line number and URL parameters in embedded comments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow010.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 071015 21:43:52\n# User@Host: root[root] @ localhost []\n# Query_time: 2  Lock_time: 0  Rows_sent: 1  Rows_examined: 0\nSELECT foo -- file: /user.php, line: 417, url: d217d035a34ac9e693b41d4c2&limit=500&offset=0;\n```\n\n----------------------------------------\n\nTITLE: Querying Statement Latency Summary Data in MySQL\nDESCRIPTION: Example query showing aggregated statement statistics for the root user, including total statement count, latencies, and row statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_100\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from user_summary_by_statement_latency;\n```\n\n----------------------------------------\n\nTITLE: Explaining Query Execution in MySQL - SQL\nDESCRIPTION: This snippet employs the EXPLAIN statement (with an optional PARTITIONS clause for MySQL 5.1+) to analyze the execution plan of a SELECT query. It reveals which indexes are used and how tables are accessed for 'select col from tbl where id=42'. The output aids in query optimization by exposing access patterns, potential full scans, and possible partition usage. Requires sufficient privileges to execute EXPLAIN on the table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nselect col from tbl where id=42\\G\n```\n\n----------------------------------------\n\nTITLE: Querying Top I/O Consumers by File and Bytes in MySQL\nDESCRIPTION: This SQL query retrieves the top 5 I/O consumers by file, showing read and write statistics in bytes. It's useful for identifying which files are experiencing the most I/O activity in terms of data volume.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM io_global_by_file_by_bytes LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Running pt-mongodb-query-digest Command in Bash\nDESCRIPTION: Basic command syntax for running the pt-mongodb-query-digest tool with options. The tool requires MongoDB connection parameters and can be customized with various filtering and output options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-mongodb-query-digest.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-mongodb-query-digest [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'ndb_binlog_index' Replication Metadata Table - SQL\nDESCRIPTION: Defines the 'ndb_binlog_index' table for tracking replication positions and events in MySQL Cluster. The table includes fields for position, file, epoch, and change operation counts, using a primary key on epoch for quick indexing. Requires the MyISAM engine and Latin1 character set for compatibility with legacy replication tools.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Calculating Table Chunk Checksum in MySQL\nDESCRIPTION: This query calculates a checksum for a specific chunk of data in a table using BIT_XOR and CRC32 functions. It forces the use of an index on the 'y' column and targets rows within specified boundary values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `i`, `y`, CRC32(`t`), CONCAT(ISNULL(`t`)))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `issue_519`.`t` FORCE INDEX(`y`) WHERE ((`y` >= ?)) AND ((`y` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Query Execution Analysis SQL Report\nDESCRIPTION: The snippet provides a detailed assessment of a query execution involving a SELECT statement from the 'trees' table in the 'food' database. The performance metrics indicate execution times and related statistics to evaluate the efficiency and effects of the query. It primarily illustrates the execution plan and query efficiency using EXPLAIN output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n#*************************** 1. row ***************************\n#            id: 1\n#   select_type: SIMPLE\n#         table: trees\n#          type: index\n# possible_keys: NULL\n#           key: fruit\n#       key_len: 27\n#           ref: NULL\n#          rows: 3\n#         Extra: Using index\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT fruit FROM trees\\G\n```\n\n----------------------------------------\n\nTITLE: Finalizing MySQL Binary Log Entries\nDESCRIPTION: Concludes the binary log file with cleanup operations, including a ROLLBACK statement added by mysqlbinlog tool and resetting session parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog-CRC32.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;\n# End of log file\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows From forest Table\nDESCRIPTION: This SQL DELETE statement removes rows from the 'forest' table where the 'animal' column is equal to 'dead'. The operation is conducted on 'db3'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM forest WHERE animal = 'dead'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating columns_priv Table - MySQL - SQL\nDESCRIPTION: Defines the columns_priv table which manages column-level privileges for users in the MySQL server. Requires MySQL and utilizes charset utf8_bin with a composite primary key for precise user-table-column access control. The table includes columns for host, database, user, target table, target column, privilege set, and timestamp details, supporting fine-grained permissions. Outputs persistent privilege information per column without referencing external users.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Statement Analysis Table Structure in MySQL\nDESCRIPTION: Shows the structure of the statement_analysis and x$statement_analysis views that provide detailed statistics about normalized SQL statements, including latency, row counts, and resource usage metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_73\n\nLANGUAGE: SQL\nCODE:\n```\ndesc statement_analysis;\ndesc x$statement_analysis;\n```\n\n----------------------------------------\n\nTITLE: InnoDB Semaphore Wait Details Output\nDESCRIPTION: This text represents a section of the output from the `SHOW ENGINE INNODB STATUS` command in MySQL or Percona Server. It lists details about threads waiting on synchronization primitives (semaphores, specifically mutexes and RW-latches). Each entry shows the waiting thread ID, the source code location (file and line) where the wait occurred, the duration of the wait (in seconds), the type of lock (Mutex, S-lock, X-lock), the memory address and name of the lock object, and information about other waiters or holders. This output is used to identify and analyze lock contention bottlenecks within the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n=====================================\n100318 17:35:58 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 9 seconds\n----------\nBACKGROUND THREAD\n----------\nsrv_master_thread loops: 1419631 1_second, 1141696 sleeps, 141916 10_second, 1576 background, 1576 flush\nsrv_master_thread log flush and writes: 1214905\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 12433146, signal count 56397470\n--Thread 139960404199760 has waited at lock/lock0lock.c line 3224 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 140055933507920 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nX-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 139960931486032 has waited at row/row0sel.c line 3549 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90075530 '&btr_search_latch'\na writer (thread id 139960676096336) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0sea.c line 856\nLast time write locked in file btr/btr0sea.c line 1109\n--Thread 139959725922640 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 139960809515344 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139960542411088 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139961218296144 has waited at btr/btr0cur.c line 457 for 9.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 139960561580368 has waited at row/row0sel.c line 3549 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90075530 '&btr_search_latch'\nnumber of readers 0, waiters flag 0, lock_word: 100000\nLast time read locked in file row/row0sel.c line 3549\nLast time write locked in file btr/btr0sea.c line 1109\n--Thread 139960921368912 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139959701428560 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139961187412304 has waited at btr/btr0cur.c line 457 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 140055956670800 has waited at btr/btr0cur.c line 523 for 9.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 139960790612304 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 140055849642320 has waited at btr/btr0cur.c line 457 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 139960388491600 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nX-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 139960671570256 has waited at btr/btr0cur.c line 523 for 13.000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 139960775436624 has waited at btr/btr0cur.c line 523 for 13.000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 139960653199696 has waited at fsp/fsp0fsp.c line 3395 for 9.0000 seconds the semaphore:\nX-lock on RW-latch at 0x90078f10 '&space->latch'\na writer (thread id 139960969292112) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 0, lock_word: fffffffffff00000\nLast time read locked in file not yet reserved line 0\nLast time write locked in file fsp/fsp0fsp.c line 2856\n--Thread 139960417511760 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139960691804496 has waited at row/row0sel.c line 3549 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90075530 '&btr_search_latch'\nnumber of readers 0, waiters flag 0, lock_word: 100000\nLast time read locked in file btr/btr0sea.c line 856\nLast time write locked in file btr/btr0sea.c line 609\nwait has ended\n--Thread 139960937077072 has waited at lock/lock0lock.c line 5316 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139960534956368 has waited at row/row0sel.c line 3549 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90075530 '&btr_search_latch'\nnumber of readers 0, waiters flag 0, lock_word: 100000\nLast time read locked in file btr/btr0sea.c line 856\nLast time write locked in file btr/btr0sea.c line 609\n--Thread 139960949856592 has waited at btr/btr0cur.c line 457 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 140055916202320 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139961194867024 has waited at btr/btr0cur.c line 457 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90a42ca0 '&new_index->lock'\na writer (thread id 139960404199760) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 139960418576720 has waited at trx/trx0trx.c line 1621 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139960563976528 has waited at trx/trx0trx.c line 738 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139960912050512 has waited at btr/btr0cur.c line 457 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90a42ca0 '&new_index->lock'\na writer (thread id 139960404199760) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 139960519780688 has waited at btr/btr0sea.c line 1032 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90075530 '&btr_search_latch'\nnumber of readers 0, waiters flag 0, lock_word: 100000\nLast time read locked in file row/row0sel.c line 3549\nLast time write locked in file btr/btr0sea.c line 609\n--Thread 140055924988240 has waited at btr/btr0cur.c line 457 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n--Thread 139959744559440 has waited at lock/lock0lock.c line 3249 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n--Thread 139960378906960 has waited at btr/btr0cur.c line 523 for 13.000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n--Thread 140055956404560 has waited at row/row0sel.c line 3549 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x90075530 '&btr_search_latch'\nnumber of readers 1, waiters flag 0, lock_word: fffff\nLast time read locked in file btr/btr0cur.c line 672\n```\n\n----------------------------------------\n\nTITLE: Creating Address Table Schema in MySQL\nDESCRIPTION: SQL definition for the address table with columns for address details and foreign key relationship to city table. Includes auto-incrementing primary key and indices.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Disk I/O Statistics Data\nDESCRIPTION: Raw disk statistics output showing performance metrics collected at 1-second intervals. Contains columns for read/write operations, sectors, time spent, and other I/O statistics for block devices including loop devices, NVMe drives and device mapper volumes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-006.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTS 1710518820.182990000 2024-03-15T19:07:00\n   7       0 loop0 25 0 122 2 0 0 0 0 0 60 2 0 0 0 0 0 0\n   7       1 loop1 922 0 7372 52 0 0 0 0 0 1880 52 0 0 0 0 0 0\n   7       2 loop2 2182 0 160538 276 0 0 0 0 0 5236 276 0 0 0 0 0 0\n   ...\n```\n\n----------------------------------------\n\nTITLE: Creating Table in MySQL\nDESCRIPTION: Creates a new table named 'foo' with a single integer column 'i' in the 'd' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog002.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nuse d/*!*/;\nSET TIMESTAMP=1248268936/*!*/;\ncreate table foo (i int)\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'foo' in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'foo' table in the 'db1' database. It's executed by the SQL_SLAVE user and has minimal impact on performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-yymmdd.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Describing schema_unused_indexes Structure in MySQL\nDESCRIPTION: Shows the structure of the schema_unused_indexes view, which identifies indexes that have not been used. This view ignores PRIMARY key indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_74\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_unused_indexes;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| object_schema | varchar(64) | YES  |     | NULL    |       |\n| object_name   | varchar(64) | YES  |     | NULL    |       |\n| index_name    | varchar(64) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: MySQL 8 Constraint Method for pt-online-schema-change\nDESCRIPTION: Configuration note regarding MySQL 8.0+ bug affecting foreign key constraints when using drop_swap method. Alternative method must be specified explicitly.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-11.txt#2025-04-22_snippet_1\n\nLANGUAGE: mysql\nCODE:\n```\ndrop_swap\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL Tables\nDESCRIPTION: Commands to drop the test1 and test2 tables. These statements remove the tables and their data from the database completely.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndrop table test1\n```\n\nLANGUAGE: sql\nCODE:\n```\ndrop table test2\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/Percona Server - Configuration File - INI\nDESCRIPTION: This code snippet is a MySQL/Percona server configuration file specified in INI format, providing directives under [client] and [mysqld] sections. It sets user credentials, networking details (port, socket), file paths, various performance, logging, and storage engine options, as well as binary logging and replication parameters. The file can be used to start a server instance with these settings or as a template for similar setups; it must be placed in the correct location and referenced by the server on startup. Sensitive values, such as passwords, should be protected, and file paths must exist and be accessible to the server process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc009.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[client]\\nuser                                = msandbox\\npassword                            = msandbox\\nport                                = 12345\\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\\n\\n[mysqld]\\nport                                = 12345\\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\\nbasedir                             = /home/sveta/mysqlpackages/Percona-Server-8.0.32-24-Linux.x86_64.glibc2.35\\ndatadir                             = /tmp/12345/data\\ngeneral_log\\ngeneral_log_file                    = genlog\\ninnodb_buffer_pool_size             = 16M\\ninnodb_data_file_path               = ibdata1:10M:autoextend\\ninnodb_data_home_dir                = /tmp/12345/data\\ninnodb_lock_wait_timeout            = 3\\ninnodb_log_file_size                = 5M\\ninnodb_log_group_home_dir           = /tmp/12345/data\\nkey_buffer_size                     = 5M\\nlocal-infile                        = 1\\nlog-bin                             = mysql-bin\\nlog-error                           = /tmp/12345/data/mysqld.log\\nlog_slave_updates\\nlower_case_table_names              = 0\\nrelay_log                           = mysql-relay-bin\\nreport-host                         = 127.0.0.1\\nreport-port                         = 12345\\nserver-id                           = 12345\\nslow-query-log                      = 1\\nslow-query-log-file                 = /tmp/12345/data/slow.log\\nlog_slow_admin_statements           = 1\\nlong_query_time                     = 0\\ndefault_authentication_plugin       = mysql_native_password\\nbinlog_format                       = STATEMENT\\nsecure-file-priv                    = \n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Sample Database Tables\nDESCRIPTION: Table definitions for the Sakila sample database which models a DVD rental store. Includes tables for actors, addresses, categories, cities, countries, customers and films with appropriate foreign key relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL x$schema_table_statistics Structure\nDESCRIPTION: Shows the table structure for x$schema_table_statistics which is the raw metrics version of schema_table_statistics. This table contains the same metrics but with raw numeric values instead of formatted text values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_58\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_table_statistics;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| table_schema      | varchar(64)         | YES  |     | NULL    |       |\n| table_name        | varchar(64)         | YES  |     | NULL    |       |\n| total_latency     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_fetched      | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_inserted     | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency    | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_updated      | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency    | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_deleted      | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency    | bigint(20) unsigned | NO   |     | NULL    |       |\n| io_read_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read           | decimal(41,0)       | YES  |     | NULL    |       |\n| io_read_latency   | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write_requests | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write          | decimal(41,0)       | YES  |     | NULL    |       |\n| io_write_latency  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_requests  | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency   | decimal(42,0)       | YES  |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n19 rows in set (0.13 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Index Usage Variations\nDESCRIPTION: Executes a query to determine which SQL queries alternate between different indexes and the proportion of usage for each. The subquery groups by query, database, and table to find instances with multiple index variations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_miu.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT iu.query_id, CONCAT_WS('.', iu.db, iu.tbl, iu.idx) AS idx,\n variations, iu.cnt, iu.cnt / total_cnt * 100 AS pct\n FROM index_usage AS iu\n INNER JOIN (\n  SELECT query_id, db, tbl, SUM(cnt) AS total_cnt,\n  COUNT(*) AS variations\n  FROM index_usage\n  GROUP BY query_id, db, tbl\n  HAVING COUNT(*) > 1\n ) AS qv USING(query_id, db, tbl);\n```\n\n----------------------------------------\n\nTITLE: Generating CREATE TABLE Statement for 'trees' Table in MySQL\nDESCRIPTION: This command is used to display the CREATE TABLE statement for the 'trees' table in the 'food' database. It's useful for understanding the table structure and indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-80.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\\G\n```\n\n----------------------------------------\n\nTITLE: Describing schema_table_statistics_with_buffer View in MySQL\nDESCRIPTION: Shows the structure of the schema_table_statistics_with_buffer view, which provides detailed statistics on table usage including I/O operations, buffer pool utilization, and row operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_61\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_table_statistics_with_buffer;\n+----------------------------+---------------------+------+-----+---------+-------+\n| Field                      | Type                | Null | Key | Default | Extra |\n+----------------------------+---------------------+------+-----+---------+-------+\n| table_schema               | varchar(64)         | YES  |     | NULL    |       |\n| table_name                 | varchar(64)         | YES  |     | NULL    |       |\n| rows_fetched               | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency              | text                | YES  |     | NULL    |       |\n| rows_inserted              | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency             | text                | YES  |     | NULL    |       |\n| rows_updated               | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency             | text                | YES  |     | NULL    |       |\n| rows_deleted               | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency             | text                | YES  |     | NULL    |       |\n| io_read_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read                    | text                | YES  |     | NULL    |       |\n| io_read_latency            | text                | YES  |     | NULL    |       |\n| io_write_requests          | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write                   | text                | YES  |     | NULL    |       |\n| io_write_latency           | text                | YES  |     | NULL    |       |\n| io_misc_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency            | text                | YES  |     | NULL    |       |\n| innodb_buffer_allocated    | text                | YES  |     | NULL    |       |\n| innodb_buffer_data         | text                | YES  |     | NULL    |       |\n| innodb_buffer_free         | text                | YES  |     | NULL    |       |\n| innodb_buffer_pages        | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_hashed | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_old    | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_rows_cached  | decimal(44,0)       | YES  |     | 0       |       |\n+----------------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Determining Next Chunk Boundary for sakila.city Table in MySQL\nDESCRIPTION: This SQL query retrieves the next chunk boundary for processing the 'city' table. It uses the PRIMARY index and limits the result to 2 rows for efficiency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `city_id` FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` >= ?)) ORDER BY `city_id` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Querying 'col' from 'bar_tbl' in MySQL\nDESCRIPTION: This query selects the 'col' column from the 'bar_tbl' table in the 'bar' database. It has a slightly higher query rate of 0.30 QPS but still maintains minimal execution time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_4.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with WHERE Clause\nDESCRIPTION: Selects all columns from table 'blah' where the 'something' column matches 'important'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow035.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM blah WHERE something = 'important';\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_statement_type Tables in MySQL\nDESCRIPTION: Shows the structure of host_summary_by_statement_type and x$host_summary_by_statement_type tables, which summarize statement execution metrics by statement type per host. The tables track metrics like total count, latency statistics, and row operations for each statement type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_statement_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| statement     | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n| lock_latency  | text                | YES  |     | NULL    |       |\n| rows_sent     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_examined | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_affected | bigint(20) unsigned | NO   |     | NULL    |       |\n| full_scans    | bigint(21) unsigned | NO   |     | 0       |       |\n+---------------+---------------------+------+-----+---------+-------+\n10 rows in set (0.30 sec)\n\nmysql> desc x$host_summary_by_statement_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| statement     | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n| lock_latency  | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_sent     | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_examined | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_affected | bigint(20) unsigned | NO   |     | NULL    |       |\n| full_scans    | bigint(21) unsigned | NO   |     | 0       |       |\n+---------------+---------------------+------+-----+---------+-------+\n10 rows in set (0.76 sec)\n```\n\n----------------------------------------\n\nTITLE: Selecting Tree Data with Multiple Conditions in MySQL\nDESCRIPTION: This SQL query selects various columns from the tree table, applying multiple conditions including active status, tree status type, and partner ID ranges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nselect tree0_.treeid as treeid7_0_, tree0_.partnermasterid as partnerm2_7_0_, tree0_.name as name7_0_, tree0_.lon as lon7_0_, tree0_.lat as lat7_0_, tree0_.lockedby as lockedby7_0_, tree0_.closure as closure7_0_, tree0_.rawtreeinfo as rawhote12_7_0_, tree0_.timestamp as timestamp7_0_, tree0_.qcnstreecode as qcnshot14_7_0_, tree0_.matchcount as matchcount7_0_, tree0_.singlevariant as singlev16_7_0_, tree0_.isactive as isactive7_0_, tree0_.poolinstanceid as poolins18_7_0_, tree0_.treestatustypeid as treest19_7_0_, tree0_.treematchtypeid as treema20_7_0_, tree0_.qcnscityid as qcnscityid7_0_, tree0_.qcnsstatusid as qcnssta22_7_0_, tree0_.qcnscrsid as qcnscrsid7_0_, tree0_.qcnscountryid as qcnscou24_7_0_, tree0_.qcnsclassificationid as qcnscla25_7_0_, tree0_.partnerid as partnerid7_0_, tree0_.qcnsrating as qcnsrating7_0_ from tree tree0_ where tree0_.treeid=51646\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Table\nDESCRIPTION: This query inserts a new row into the db1.conch table, setting values for the word3 and vid83 columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO db1.conch (word3, vid83)\nVALUES ('211', '18')\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: Defines staff member information table with authentication details and relationships to store and address tables using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: MySQL COMMIT Statement with Performance Metrics\nDESCRIPTION: COMMIT statement with execution metrics showing minimal query time of 0.000019 seconds and no rows affected. Includes same context metadata as previous query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow045.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET timestamp=1274159461;\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Bulk SQL Timestamp Inserts\nDESCRIPTION: Database insert statements containing IDs and timestamps in the format '2006-02-15 10:05:03'. Each record consists of a pair of numbers representing likely a primary key and foreign key relationship.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n(26,9,'2006-02-15 10:05:03'),(26,21,'2006-02-15 10:05:03'),...,(38,338,'2006-02-15 10:05:03'),(38,3\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL\nDESCRIPTION: Creates the store table to manage store locations with references to managing staff and addresses. Includes a unique constraint on manager assignment and foreign key relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying 'bar' Table in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'bar' table. It is executed twice, once without specifying a database and once after switching to the 'db2' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow033.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM bar;\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL InnoDB Configuration\nDESCRIPTION: Details the InnoDB storage engine configuration, including buffer pool settings, log file sizes, and various performance-related parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp006.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# InnoDB #####################################################\n                  Version | 1.1.8-rel29.1\n         Buffer Pool Size | 32.0M\n         Buffer Pool Fill | 35%\n        Buffer Pool Dirty | 0%\n           File Per Table | OFF\n                Page Size | 16k\n            Log File Size | 2 * 5.0M = 10.0M\n          Log Buffer Size | 8M\n             Flush Method | \n      Flush Log At Commit | 1\n               XA Support | ON\n                Checksums | ON\n              Doublewrite | ON\n          R/W I/O Threads | 4 4\n             I/O Capacity | 200\n       Thread Concurrency | 0\n      Concurrency Tickets | 500\n       Commit Concurrency | 0\n      Txn Isolation Level | REPEATABLE-READ\n        Adaptive Flushing | ON\n      Adaptive Checkpoint | \n           Checkpoint Age | 0\n             InnoDB Queue | 0 queries inside InnoDB, 0 queries in queue\n       Oldest Transaction | 0 Seconds\n         History List Len | 1\n               Read Views | 1\n         Undo Log Entries | 0 transactions, 0 total undo, 0 max undo\n        Pending I/O Reads | 0 buf pool reads, 0 normal AIO, 0 ibuf AIO, 0 preads\n       Pending I/O Writes | 0 buf pool (0 LRU, 0 flush list, 0 page); 0 AIO, 0 sync, 0 log IO (0 log, 0 chkp); 0 pwrites\n      Pending I/O Flushes | 0 buf pool, 0 log\n       Transaction States | 1xnot started\n```\n\n----------------------------------------\n\nTITLE: Listing MySQL Server Configuration Variables - Plaintext\nDESCRIPTION: This snippet demonstrates the output format of MySQL server configuration parameters, each on its own line, with the variable name and value separated by a tab character. No dependencies exist as this is output data, but it may be generated by running SHOW VARIABLES or from configuration tools. The snippet lists both static options (settable in my.cnf) and dynamic values (runtime status). Input is not required; the output is plaintext suitable for parsing or review by administrators or automated scripts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-variables-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nauto_increment_increment\t1\nauto_increment_offset\t1\nautomatic_sp_privileges\tON\nback_log\t50\nbasedir\t/usr/\nbinlog_cache_size\t32768\nbulk_insert_buffer_size\t8388608\ncharacter_set_client\tlatin1\ncharacter_set_connection\tlatin1\ncharacter_set_database\tlatin1\ncharacter_set_filesystem\tbinary\ncharacter_set_results\tlatin1\ncharacter_set_server\tlatin1\ncharacter_set_system\tutf8\ncharacter_sets_dir\t/usr/share/mysql/charsets/\ncollation_connection\tlatin1_swedish_ci\ncollation_database\tlatin1_swedish_ci\ncollation_server\tlatin1_swedish_ci\ncompletion_type\t0\nconcurrent_insert\t1\nconnect_timeout\t5\ndatadir\t/var/lib/mysql/\ndate_format\t%Y-%m-%d\ndatetime_format\t%Y-%m-%d %H:%i:%s\ndefault_week_format\t0\ndelay_key_write\tON\ndelayed_insert_limit\t100\ndelayed_insert_timeout\t300\ndelayed_queue_size\t1000\ndiv_precision_increment\t4\nkeep_files_on_create\tOFF\nengine_condition_pushdown\tOFF\nexpire_logs_days\t10\nflush\tOFF\nflush_time\t0\nft_boolean_syntax\t+ -><()~*:\"\"&|\nft_max_word_len\t84\nft_min_word_len\t4\nft_query_expansion_limit\t20\nft_stopword_file\t(built-in)\ngroup_concat_max_len\t1024\nhave_archive\tYES\nhave_bdb\tNO\nhave_blackhole_engine\tYES\nhave_compress\tYES\nhave_crypt\tYES\nhave_csv\tYES\nhave_dynamic_loading\tYES\nhave_example_engine\tNO\nhave_federated_engine\tYES\nhave_geometry\tYES\nhave_innodb\tYES\nhave_isam\tNO\nhave_merge_engine\tYES\nhave_ndbcluster\tDISABLED\nhave_openssl\tDISABLED\nhave_ssl\tDISABLED\nhave_query_cache\tYES\nhave_raid\tNO\nhave_rtree_keys\tYES\nhave_symlink\tYES\nhostname\tdebian\ninit_connect\t\ninit_file\t\ninit_slave\t\ninnodb_additional_mem_pool_size\t1048576\ninnodb_autoextend_increment\t8\ninnodb_buffer_pool_awe_mem_mb\t0\ninnodb_buffer_pool_size\t8388608\ninnodb_checksums\tON\ninnodb_commit_concurrency\t0\ninnodb_concurrency_tickets\t500\ninnodb_data_file_path\tibdata1:10M:autoextend\ninnodb_data_home_dir\t\ninnodb_doublewrite\tON\ninnodb_fast_shutdown\t1\ninnodb_file_io_threads\t4\ninnodb_file_per_table\tOFF\ninnodb_flush_log_at_trx_commit\t1\ninnodb_flush_method\t\ninnodb_force_recovery\t0\ninnodb_lock_wait_timeout\t50\ninnodb_locks_unsafe_for_binlog\tOFF\ninnodb_log_arch_dir\t\ninnodb_log_archive\tOFF\ninnodb_log_buffer_size\t1048576\ninnodb_log_file_size\t5242880\ninnodb_log_files_in_group\t2\ninnodb_log_group_home_dir\t./\ninnodb_max_dirty_pages_pct\t90\ninnodb_max_purge_lag\t0\ninnodb_mirrored_log_groups\t1\ninnodb_open_files\t300\ninnodb_rollback_on_timeout\tOFF\ninnodb_support_xa\tON\ninnodb_sync_spin_loops\t20\ninnodb_table_locks\tON\ninnodb_thread_concurrency\t8\ninnodb_thread_sleep_delay\t10000\ninteractive_timeout\t28800\njoin_buffer_size\t131072\nkey_buffer_size\t16777216\nkey_cache_age_threshold\t300\nkey_cache_block_size\t1024\nkey_cache_division_limit\t100\nlanguage\t/usr/share/mysql/english/\nlarge_files_support\tON\nlarge_page_size\t0\nlarge_pages\tOFF\nlc_time_names\ten_US\nlicense\tGPL\nlocal_infile\tON\nlocked_in_memory\tOFF\nlog\tOFF\nlog_bin\tOFF\nlog_bin_trust_function_creators\tOFF\nlog_error\t\nlog_queries_not_using_indexes\tOFF\nlog_slave_updates\tOFF\nlog_slow_queries\tOFF\nlog_warnings\t1\nlong_query_time\t10\nlow_priority_updates\tOFF\nlower_case_file_system\tOFF\nlower_case_table_names\t0\nmax_allowed_packet\t16776192\nmax_binlog_cache_size\t4294967295\nmax_binlog_size\t104857600\nmax_connect_errors\t10\nmax_connections\t100\nmax_delayed_threads\t20\nmax_error_count\t64\nmax_heap_table_size\t16777216\nmax_insert_delayed_threads\t20\nmax_join_size\t18446744073709551615\nmax_length_for_sort_data\t1024\nmax_prepared_stmt_count\t16382\nmax_relay_log_size\t0\nmax_seeks_for_key\t4294967295\nmax_sort_length\t1024\nmax_sp_recursion_depth\t0\nmax_tmp_tables\t32\nmax_user_connections\t0\nmax_write_lock_count\t4294967295\nmulti_range_count\t256\nmyisam_data_pointer_size\t6\nmyisam_max_sort_file_size\t2147483647\nmyisam_recover_options\tBACKUP\nmyisam_repair_threads\t1\nmyisam_sort_buffer_size\t8388608\nmyisam_stats_method\tnulls_unequal\nndb_autoincrement_prefetch_sz\t32\nndb_force_send\tON\nndb_use_exact_count\tON\nndb_use_transactions\tON\nndb_cache_check_time\t0\nndb_connectstring\t\nnet_buffer_length\t16384\nnet_read_timeout\t30\nnet_retry_count\t10\nnet_write_timeout\t60\nnew\tOFF\nold_passwords\tOFF\nopen_files_limit\t1024\noptimizer_prune_level\t1\noptimizer_search_depth\t62\npid_file\t/var/run/mysqld/mysqld.pid\nport\t3306\npreload_buffer_size\t32768\nprofiling\tOFF\nprofiling_history_size\t15\nprotocol_version\t10\nquery_alloc_block_size\t8192\nquery_cache_limit\t1048576\nquery_cache_min_res_unit\t4096\nquery_cache_size\t16777216\nquery_cache_type\tON\nquery_cache_wlock_invalidate\tOFF\nquery_prealloc_size\t8192\nrange_alloc_block_size\t2048\nread_buffer_size\t131072\nread_only\tOFF\nread_rnd_buffer_size\t262144\nrelay_log_purge\tON\nrelay_log_space_limit\t0\nrpl_recovery_rank\t0\nsecure_auth\tOFF\nsecure_file_priv\t\nserver_id\t0\nskip_external_locking\tON\nskip_networking\tOFF\nskip_show_database\tOFF\nslave_compressed_protocol\tOFF\nslave_load_tmpdir\t/tmp/\nslave_net_timeout\t3600\nslave_skip_errors\tOFF\nslave_transaction_retries\t10\nslow_launch_time\t2\nsocket\t/var/run/mysqld/mysqld.sock\nsort_buffer_size\t2097144\nsql_big_selects\tON\nsql_mode\t\nsql_notes\tON\nsql_warnings\tOFF\nssl_ca\t\nssl_capath\t\nssl_cert\t\nssl_cipher\t\nssl_key\t\nstorage_engine\tMyISAM\nsync_binlog\t0\nsync_frm\tON\nsystem_time_zone\tEDT\ntable_cache\t64\ntable_lock_wait_timeout\t50\ntable_type\tMyISAM\nthread_cache_size\t8\nthread_stack\t131072\ntime_format\t%H:%i:%s\ntime_zone\tSYSTEM\ntimed_mutexes\tOFF\ntmp_table_size\t33554432\ntmpdir\t/tmp\ntransaction_alloc_block_size\t8192\ntransaction_prealloc_size\t4096\ntx_isolation\tREPEATABLE-READ\nupdatable_views_with_limit\tYES\nversion\t5.0.51a-24+lenny2\nversion_comment\t(Debian)\nversion_compile_machine\ti486\nversion_compile_os\tdebian-linux-gnu\nwait_timeout\t28800\n\n```\n\n----------------------------------------\n\nTITLE: Displaying disabled Performance Schema consumers with sys.ps_setup_show_disabled_consumers\nDESCRIPTION: This procedure shows all currently disabled Performance Schema consumers, with no parameters required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_139\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_disabled_consumers();\n\n+---------------------------+\n| disabled_consumers        |\n+---------------------------+\n| events_statements_current |\n| global_instrumentation    |\n| thread_instrumentation    |\n| statements_digest         |\n+---------------------------+\n4 rows in set (0.05 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Global Status Query with Version Specific Syntax\nDESCRIPTION: MySQL query showing global status with version-specific syntax (using /*!50002 */ comment). The query execution metrics show it examined 230 rows with minimal query and lock times.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow041.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nshow /*!50002 GLOBAL */ status;\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Search Table\nDESCRIPTION: Defines a MyISAM table for film text search with fulltext indexes on title and description fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Viewing Running Percona XtraDB Cluster Processes in Bash\nDESCRIPTION: Output from a process listing command showing three Percona XtraDB Cluster instances running with different sandbox configuration files. Each process uses a separate configuration file in a different directory under /tmp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/ps-mysqld-006.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  PID TTY      STAT   TIME COMMAND\n32324 pts/6    Sl     0:25 /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-XtraDB-Cluster-5.5.28-23.7.373.Linux.i686/bin/mysqld --defaults-file=/tmp/12345/my.sandbox.cnf\n32419 pts/6    Sl     0:18 /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-XtraDB-Cluster-5.5.28-23.7.373.Linux.i686/bin/mysqld --defaults-file=/tmp/12346/my.sandbox.cnf\n32578 pts/6    Sl     0:18 /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-XtraDB-Cluster-5.5.28-23.7.373.Linux.i686/bin/mysqld --defaults-file=/tmp/12347/my.sandbox.cnf\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Creation Statement for 'bar' in SQL\nDESCRIPTION: This SQL command retrieves the `CREATE TABLE` statement for the `bar` table within the `maindb` database. The `\\G` modifier typically formats the output vertically, which is useful for displaying wide results. This command is associated with the analysis of queries involving the 'bar' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report02.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `maindb`.`bar`\\G\n```\n\n----------------------------------------\n\nTITLE: Creating film_category table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the film_category table, which represents the many-to-many relationship between films and categories. It includes foreign key constraints referencing the film and category tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint unsigned NOT NULL,\n  `category_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Date Filters - SQL\nDESCRIPTION: Two SELECT queries filtering data based on date conditions from different tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow038.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse baz;\nSELECT * FROM old_tbl WHERE d < '2009-05-03 12:12:10';\nSELECT * FROM new_tbl WHERE d < '2009-01-01 12:12:10';\n```\n\n----------------------------------------\n\nTITLE: MySQL UPDATE Query with JOIN Operation\nDESCRIPTION: An UPDATE query that joins two tables (tuningdetail and gonzo) to update column1 and word3 values. The query examines 62,951 rows with a query time of 0.726052 seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002_no_vertical.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry with SELECT Statement\nDESCRIPTION: MySQL slow query log entry showing a simple SELECT query with performance metrics including query time, lock time, and row statistics. The query was executed by user 'chessguest' from multiple IP addresses with consistent performance characteristics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow042.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 091205 19:55:11\n# User@Host: chessguest[chessguest] @ 123.123.123.121 []\n# Query_time: 0.000613  Lock_time: 0.000107  Rows_sent: 230  Rows_examined: 230\n# Rows_affected: 0  Rows_read: 230\nselect foo;\n```\n\n----------------------------------------\n\nTITLE: Example Query for Temporary Tables\nDESCRIPTION: Provides an example of querying data from `statements_with_temp_tables`. It includes fields like `query`, `exec_count`, and `memory_tmp_tables`, illustrating the use of temporary tables within statements and related execution metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_84\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_temp_tables limit 1\\G\n*************************** 1. row ***************************\n                   query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n                      db: sys\n              exec_count: 2\n           total_latency: 16.75 s\n       memory_tmp_tables: 378\n         disk_tmp_tables: 66\navg_tmp_tables_per_query: 189\n  tmp_tables_to_disk_pct: 17\n              first_seen: 2014-03-07 13:13:41\n               last_seen: 2014-03-07 13:13:48\n                  digest: 54f9bd520f0bbf15db0c2ed93386bec9\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL schema_auto_increment_columns Structure\nDESCRIPTION: Shows the structure of the schema_auto_increment_columns view which tracks auto-increment columns across database schemas, providing details about their data types, current values, and maximum limits.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_48\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_auto_increment_columns;\n+----------------------+------------------------+------+-----+---------+-------+\n| Field                | Type                   | Null | Key | Default | Extra |\n+----------------------+------------------------+------+-----+---------+-------+\n| table_schema         | varchar(64)            | NO   |     |         |       |\n| table_name           | varchar(64)            | NO   |     |         |       |\n| column_name          | varchar(64)            | NO   |     |         |       |\n| data_type            | varchar(64)            | NO   |     |         |       |\n| column_type          | longtext               | NO   |     | NULL    |       |\n| is_signed            | int(1)                 | NO   |     | 0       |       |\n| is_unsigned          | int(1)                 | NO   |     | 0       |       |\n| max_value            | bigint(21) unsigned    | YES  |     | NULL    |       |\n| auto_increment       | bigint(21) unsigned    | YES  |     | NULL    |       |\n| auto_increment_ratio | decimal(25,4) unsigned | YES  |     | NULL    |       |\n+----------------------+------------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Creating Help Relation Table in SQL\nDESCRIPTION: This SQL creation script sets up the help_relation table, linking help topics with keywords. It's designed to efficiently map keywords to topic identifiers, supporting keyword-to-topic lookups with a primary key on help_keyword_id and help_topic_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int unsigned NOT NULL,\n  `help_keyword_id` int unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Creating Database Privileges Table in MySQL\nDESCRIPTION: Defines the 'db' table in MySQL to specify user privileges across different levels, such as select, insert, update, and delete. Each privilege is stored with a simple binary enum type ('N', 'Y'), serving as a foundational record of user capabilities per database schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `db`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Analyzing SELECT Query with Self-Join and Aggregation in MySQL\nDESCRIPTION: A SELECT query that performs a self-join on table 't' using the 'a' column, then groups by the same column and orders by the count in descending order with a limit of 10 rows. The EXPLAIN plan shows it uses temporary tables and filesort operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output-5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect t.a, count(*) from t join t t2 using(a) group by 1 order by 2 desc limit 10\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Sandbox for Percona Toolkit\nDESCRIPTION: This Shell script configures a sandbox environment for MySQL using the Percona Server binaries. It involves creating directories, downloading the necessary files, and extracting them. User must have internet access and permission to create directories.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p ${HOME}/mysql/percona-server-8.0.26-17\n```\n\nLANGUAGE: Shell\nCODE:\n```\nwget https://downloads.percona.com/downloads/Percona-Server-LATEST/Percona-Server-8.0.26-17/binary/tarball/Percona-Server-8.0.26-17-Linux.x86_64.glibc2.17.tar.gz\n```\n\nLANGUAGE: Shell\nCODE:\n```\ntar xvzf Percona-Server-8.0.26-17-Linux.x86_64.glibc2.17.tar.gz --strip 1 -C ${HOME}/mysql/percona-server-8.0.26-17\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from MySQL Table with Performance Metrics\nDESCRIPTION: A basic SQL query that selects all data from the 'foo' table. This query has no InnoDB statistics available, takes about 0.73 seconds to execute, examines 62,951 rows, and performs a full table scan without using indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT * FROM foo;\n# Query_time: 0.726052  Lock_time: 0.000091  Rows_sent: 0  Rows_examined: 62951\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n```\n\n----------------------------------------\n\nTITLE: PHPMyAdmin Navigation Query\nDESCRIPTION: Query to retrieve navigation hiding preferences for a specific user\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog005.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `db_name`, COUNT(*) AS `count` FROM `phpmyadmin`.`pma__navigationhiding` WHERE `username`='root' GROUP BY `db_name`\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.plugin` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.plugin` table, which lists the plugins currently installed and active in the MySQL server. It stores the plugin's name and the name of the shared library file (`dl`) that contains the plugin code. The table uses the InnoDB storage engine with `STATS_PERSISTENT=0` and the primary key is the plugin `name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Table in MySQL\nDESCRIPTION: This SQL script creates the 'inventory' table to track film copies in different stores. It includes foreign key constraints to maintain referential integrity with the 'film' and 'store' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL auto_increment,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Columns Privileges Table\nDESCRIPTION: Defines the `columns_priv` table used to manage column-level privileges in MySQL. It requires MyISAM storage engine and utf8 character set. The table stores permission data across columns for different user and database combinations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Complete PodioSync Configuration Example\nDESCRIPTION: Comprehensive configuration example showing all available options for the PodioSync tool, including connection parameters, migration settings, and batch processing options. This demonstrates how to customize various aspects of the migration process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/empty.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npodio:\n  client_id: PODIO_CLIENT_ID\n  client_secret: PODIO_CLIENT_SECRET\n  username: PODIO_USERNAME\n  password: PODIO_PASSWORD\n\ndatabase:\n  connection_string: 'mssql+pyodbc://username:password@host/database?driver=ODBC+Driver+17+for+SQL+Server'\n\noptions:\n  # Creates the schema in the database\n  create_schema: true\n  \n  # Truncates the tables before inserting new data\n  truncate_tables: false\n  \n  # Removes existing tables and recreates them\n  drop_tables: false\n  \n  # Set the batch size for Podio API requests\n  batch_size: 500\n  \n  # Retry count for failed API requests\n  retry_count: 3\n  \n  # Time to wait between retries (seconds)\n  retry_wait: 5\n  \n  # Sleep time between API calls to avoid rate limits (seconds)\n  rate_limit_sleep: 0.5\n  \n  # Workspaces to include (leave empty for all)\n  workspaces: []\n  \n  # Table name prefix in the database\n  table_prefix: 'podio_'\n  \n  # Log level (DEBUG, INFO, WARNING, ERROR)\n  log_level: 'INFO'\n```\n\n----------------------------------------\n\nTITLE: Checking Consumer Enabled Status Using ps_is_consumer_enabled in MySQL\nDESCRIPTION: Example showing how to check if a consumer is enabled within Performance Schema using the sys.ps_is_consumer_enabled() function. The function takes a consumer name parameter and returns 'YES' or 'NO'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_125\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_consumer_enabled('events_stages_history');\n+-----------------------------------------------------+\n| sys.ps_is_consumer_enabled('events_stages_history') |\n+-----------------------------------------------------+\n| NO                                                  |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating Column Privileges Table in MySQL\nDESCRIPTION: Defines a table to manage column-level privileges in MySQL with attributes for Host, Db, User, Table, and specific privileges. Dependencies include MySQL MyISAM engine and utf8 character set. Key parameters include Host, Db, User, and Timestamp, which aid in managing access controls. No foreign key constraints present.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges';\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Global Status Variables (Text)\nDESCRIPTION: This text output lists numerous MySQL server status variables (e.g., InnoDB buffer pool usage, I/O operations, row locks, key cache statistics, query cache status, connections, threads, uptime) along with their values. This data is typically obtained using `SHOW GLOBAL STATUS;` or collected by monitoring tools like those in the Percona Toolkit to analyze server performance and health. The additional columns likely represent deltas or rates over specific time intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mext/samples/mext-002-result.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nInnodb_buffer_pool_pages_data               542        0        0        0\\nInnodb_buffer_pool_pages_dirty                0        0        0        0\\nInnodb_buffer_pool_pages_flushed           1071        0        0        0\\nInnodb_buffer_pool_pages_free               474        0        0        0\\nInnodb_buffer_pool_pages_misc                 8        0        0        0\\nInnodb_buffer_pool_pages_total             1024        0        0        0\\nInnodb_buffer_pool_read_ahead_rnd             0        0        0        0\\nInnodb_buffer_pool_read_ahead_seq             0        0        0        0\\nInnodb_buffer_pool_read_requests         622439        0        0        0\\nInnodb_buffer_pool_reads                      0        0        0        0\\nInnodb_buffer_pool_wait_free                  0        0        0        0\\nInnodb_buffer_pool_write_requests        298015        0        0        0\\nInnodb_data_fsyncs                         2598        0        0        0\\nInnodb_data_pending_fsyncs                    0        0        0        0\\nInnodb_data_pending_reads                     0        0        0        0\\nInnodb_data_pending_writes                    0        0        0        0\\nInnodb_data_read                              0        0        0        0\\nInnodb_data_reads                             0        0        0        0\\nInnodb_data_writes                         2768        0        0        0\\nInnodb_data_written                    43343872        0        0        0\\nInnodb_dblwr_pages_written                  898        0        0        0\\nInnodb_dblwr_writes                          44        0        0        0\\nInnodb_log_waits                              0        0        0        0\\nInnodb_log_write_requests                 20743        0        0        0\\nInnodb_log_writes                          2478        0        0        0\\nInnodb_os_log_fsyncs                       2505        0        0        0\\nInnodb_os_log_pending_fsyncs                  0        0        0        0\\nInnodb_os_log_pending_writes                  0        0        0        0\\nInnodb_os_log_written                  11063296        0        0        0\\nInnodb_pages_created                        542        0        0        0\\nInnodb_page_size                          16384        0        0        0\\nInnodb_pages_read                             0        0        0        0\\nInnodb_pages_written                       1071        0        0        0\\nInnodb_row_lock_current_waits                 0        0        0        0\\nInnodb_row_lock_time                       2996        0        0        0\\nInnodb_row_lock_time_avg                    998        0        0        0\\nInnodb_row_lock_time_max                   1002        0        0        0\\nInnodb_row_lock_waits                         3        0        0        0\\nInnodb_rows_deleted                         716        0        0        0\\nInnodb_rows_inserted                      56198        0        0        0\\nInnodb_rows_read                          63013        0        0        0\\nInnodb_rows_updated                           6        0        0        0\\nKey_blocks_not_flushed                        0        0        0        0\\nKey_blocks_unused                         14497        0        0        0\\nKey_blocks_used                             210        0        0        0\\nKey_read_requests                         36447        0        0        0\\nKey_reads                                   554        0        0        0\\nKey_write_requests                        15369        0        0        0\\nKey_writes                                  749        0        0        0\\nLast_query_cost                               0        0        0        0\\nMax_used_connections                          7        0        0        0\\nNdb_cluster_node_id                           0        0        0        0\\nNdb_config_from_host                          0        0        0        0\\nNdb_config_from_port                          0        0        0        0\\nNdb_number_of_data_nodes                      0        0        0        0\\nNot_flushed_delayed_rows                      0        0        0        0\\nOpened_tables                              1698        0        0        0\\nOpen_files                                    5        0        0        0\\nOpen_streams                                  0        0        0        0\\nOpen_tables                                   1        0        0        0\\nPrepared_stmt_count                           0        0        0        0\\nQcache_free_blocks                            0        0        0        0\\nQcache_free_memory                            0        0        0        0\\nQcache_hits                                   0        0        0        0\\nQcache_inserts                                0        0        0        0\\nQcache_lowmem_prunes                          0        0        0        0\\nQcache_not_cached                             0        0        0        0\\nQcache_queries_in_cache                       0        0        0        0\\nQcache_total_blocks                           0        0        0        0\\nQuestions                                 71196        1        1        1\\nRpl_status                                    0        0        0        0\\nSelect_full_join                              0        0        0        0\\nSelect_full_range_join                        0        0        0        0\\nSelect_range                                375        0        0        0\\nSelect_range_check                            0        0        0        0\\nSelect_scan                                2054        1        1        1\\nSlave_open_temp_tables                        0        0        0        0\\nSlave_retried_transactions                    0        0        0        0\\nSlave_running                                 0        0        0        0\\nSlow_launch_threads                           0        0        0        0\\nSlow_queries                                  0        0        0        0\\nSort_merge_passes                             0        0        0        0\\nSort_range                                    0        0        0        0\\nSort_rows                                   145        0        0        0\\nSort_scan                                    14        0        0        0\\nSsl_accept_renegotiates                       0        0        0        0\\nSsl_accepts                                   0        0        0        0\\nSsl_callback_cache_hits                       0        0        0        0\\nSsl_cipher                                    0        0        0        0\\nSsl_cipher_list                               0        0        0        0\\nSsl_client_connects                           0        0        0        0\\nSsl_connect_renegotiates                      0        0        0        0\\nSsl_ctx_verify_depth                          0        0        0        0\\nSsl_ctx_verify_mode                           0        0        0        0\\nSsl_default_timeout                           0        0        0        0\\nSsl_finished_accepts                          0        0        0        0\\nSsl_finished_connects                         0        0        0        0\\nSsl_session_cache_hits                        0        0        0        0\\nSsl_session_cache_misses                      0        0        0        0\\nSsl_session_cache_mode                        0        0        0        0\\nSsl_session_cache_overflows                   0        0        0        0\\nSsl_session_cache_size                        0        0        0        0\\nSsl_session_cache_timeouts                    0        0        0        0\\nSsl_sessions_reused                           0        0        0        0\\nSsl_used_session_cache_entries                0        0        0        0\\nSsl_verify_depth                              0        0        0        0\\nSsl_verify_mode                               0        0        0        0\\nSsl_version                                   0        0        0        0\\nTable_locks_immediate                      4205        0        0        0\\nTable_locks_waited                            0        0        0        0\\nTc_log_max_pages_used                         0        0        0        0\\nTc_log_page_size                              0        0        0        0\\nTc_log_page_waits                             0        0        0        0\\nThreads_cached                                0        0        0        0\\nThreads_connected                             2        0        0        0\\nThreads_created                            1008        0        0        0\\nThreads_running                               2        0        0        0\\nUptime                                     5800        3        3        3\\nUptime_since_flush_status                  5800        3        3        3\n```\n\n----------------------------------------\n\nTITLE: Selecting Fruit from Trees Table in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table in the 'food' database. The query is simple but the report provides extensive performance metrics and execution details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-55.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement in MySQL\nDESCRIPTION: This SQL command retrieves the CREATE TABLE statement for the 'trees' table in the 'food' database. It's useful for understanding the table's structure and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-55.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Batch Data Migration with Range Conditions in MySQL\nDESCRIPTION: SQL statements for copying data from table 't' to '__new_t' in batches using ID ranges with IGNORE option and share locks. The queries split the data transfer into two chunks - IDs less than 4, and IDs between 4 and 6.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/copyins002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO osc.__new_t (`id`, `default`) SELECT `id`, `default` FROM osc.t WHERE (id < 4) LOCK IN SHARE MODE\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO osc.__new_t (`id`, `default`) SELECT `id`, `default` FROM osc.t WHERE (id >= 4 AND id < 6) LOCK IN SHARE MODE\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL metrics view structure\nDESCRIPTION: Shows the schema definition for the metrics view, including fields for variable names, values, types, and enabled status. This view consolidates performance data from various MySQL sources.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> DESC metrics;\n+----------------+--------------+------+-----+---------+-------+\n| Field          | Type         | Null | Key | Default | Extra |\n+----------------+--------------+------+-----+---------+-------+\n| Variable_name  | varchar(193) | YES  |     | NULL    |       |\n| Variable_value | text         | YES  |     | NULL    |       |\n| Type           | varchar(210) | YES  |     | NULL    |       |\n| Enabled        | varchar(7)   | NO   |     |         |       |\n+----------------+--------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n\nmysq> DESC metrics_56;\n+----------------+--------------+------+-----+---------+-------+\n| Field          | Type         | Null | Key | Default | Extra |\n+----------------+--------------+------+-----+---------+-------+\n| Variable_name  | varchar(193) | YES  |     | NULL    |       |\n| Variable_value | text         | YES  |     | NULL    |       |\n| Type           | varchar(210) | YES  |     | NULL    |       |\n| Enabled        | varchar(7)   | NO   |     |         |       |\n+----------------+--------------+------+-----+---------+-------+\n4 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating mysql.wsrep_cluster_members Table in SQL\nDESCRIPTION: This SQL statement defines the `mysql.wsrep_cluster_members` table for Galera Cluster. It tracks individual nodes within the cluster, storing the node's UUID, the cluster's UUID, the node's name, and its incoming network address. The `node_uuid` serves as the primary key. The table uses the InnoDB engine and `utf8mb4` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `wsrep_cluster_members` (\n  `node_uuid` char(36) NOT NULL,\n  `cluster_uuid` char(36) NOT NULL,\n  `node_name` char(32) NOT NULL,\n  `node_incoming_address` varchar(256) NOT NULL,\n  PRIMARY KEY (`node_uuid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status in MySQL\nDESCRIPTION: This SQL command fetches status information for the MySQL table named 'foo'. It uses the `SHOW TABLE STATUS` statement with a `LIKE` clause for filtering and `\\G` for vertical output format, common in command-line interaction. It depends on the existence of the 'foo' table in the connected database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow054.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'foo'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_keyword` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.help_keyword` table, another component of the MySQL server-side help system. It stores the keywords associated with help topics, containing the keyword ID and name. It uses the InnoDB storage engine with `STATS_PERSISTENT=0`, has a primary key on `help_keyword_id`, and a unique key on the keyword `name`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Defining func Table in SQL\nDESCRIPTION: Creates the `func` table in the `mysql` database to store information about user-defined functions (UDFs). It records the function name, return type flag, the path to the dynamic library containing the function, and whether it's a scalar function or an aggregate function. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating Film Actor Association Table\nDESCRIPTION: Defines a junction table linking films and actors with timestamp tracking. Contains foreign key constraints to both actor and film tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Describing SQL Tables with Sorting\nDESCRIPTION: This snippet provides the table structure for `statements_with_sorting`, showing fields like `query`, `db`, `exec_count`, etc. Key fields include `total_latency` and `sort_merge_passes`. It highlights columns relevant for understanding sorting in executed SQL statements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_81\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_sorting;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | text                | YES  |     | NULL                |       |\n| sort_merge_passes | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_sort_merges   | decimal(21,0)       | NO   |     | 0                   |       |\n| sorts_using_scans | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_using_range  | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sorted       | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_rows_sorted   | decimal(21,0)       | NO   |     | 0                   |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n13 rows in set (0.01 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$statements_with_sorting;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_merge_passes | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_sort_merges   | decimal(21,0)       | NO   |     | 0                   |       |\n| sorts_using_scans | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_using_range  | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sorted       | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_rows_sorted   | decimal(21,0)       | NO   |     | 0                   |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n13 rows in set (0.04 sec)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Film_Actor Table\nDESCRIPTION: An INSERT statement adding a record to the film_actor table in the sakila database. This is a junction table linking films to actors with a timestamp for the last update.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `film_actor` VALUES (1,1,'2006-02-15 12:05:03') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: Selecting Fruit from Trees Table in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table. It's a simple SELECT statement without any conditions or joins. The query uses an index scan for execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Reporting InnoDB Row Operation Statistics (Text)\nDESCRIPTION: This section provides statistics on Data Manipulation Language (DML) operations within InnoDB. It shows the number of queries currently executing inside InnoDB, queries waiting in the queue, open read views, the state of the main thread, and cumulative counts of rows inserted, updated, deleted, and read. It also calculates the rate of these operations per second.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n23 read views open inside InnoDB\nMain thread process no. 28376, id 139961255549264, state: flushing log\nNumber of rows inserted 184627770, updated 153132976, deleted 34372372, read 410934459732\n16.89 inserts/s, 7.89 updates/s, 2.67 deletes/s, 46474.17 reads/s\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status in MySQL\nDESCRIPTION: This SQL command displays the status of the 'trees' table in the 'food' database. It's used to gather metadata about the table structure and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_2-80.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Code for Percona Toolkit\nDESCRIPTION: This Shell script sets up the local development environment by cloning the Percona Toolkit repository. No specific dependencies are mentioned apart from git, and it creates a specific directory structure for development.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir ${HOME}/perldev\ngit clone https://github.com/percona/percona-toolkit.git ${HOME}/perldev/percona-toolkit\n```\n\n----------------------------------------\n\nTITLE: Querying Sequential Integer Values from MySQL Database\nDESCRIPTION: A sequence of SQL queries that select incremental integer values from a table named 'foo'. Each query follows the same pattern but selects a different sequential integer (from 1681 to 1729). These queries all have the same execution metrics with a query time of 0.000899 seconds, no lock time, and no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1681 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1682 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1683 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1684 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1685 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1686 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1687 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1688 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1689 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1690 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1691 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1692 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1693 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1694 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1695 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1696 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1697 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1698 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1699 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1700 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1701 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1702 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1703 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1704 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1705 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1706 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1707 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1708 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1709 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1710 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1711 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1712 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1713 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1714 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1715 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1716 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1717 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1718 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1719 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1720 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1721 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1722 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1723 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1724 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1725 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1726 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1727 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1728 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1729 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Displaying Mounted Filesystems Output\nDESCRIPTION: Output from a system command (like `mount` or `findmnt`) showing mounted filesystems. It lists the device/source, total size, used percentage, filesystem type, mount options (like read/write status, security context, network parameters), and the directory where the filesystem is mounted. This example includes NFS, encrypted volumes, local disks (XFS, ext4, vfat), NVMe drives, and Docker overlay mounts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Mounted Filesystems ########################################\n  Filesystem                 Size Used Type     Opts                                                                                                                                                                                                                                                                                                                                                                                                           Mountpoint\n  10.10.8.124:/srv/ftp       1.2T  53% nfs4     ro,relatime,vers=4.1,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=krb5p,clientaddr=10.10.8.141,local_lock=none,addr=10.10.8.124                                                                                                                                                                                                                                                 /srv/ftp\n  /dev/mapper/bigdisk_crypt  5.5T  38% ext4     rw,relatime,seclabel                                                                                                                                                                                                                                                                                                                                                                                           /bigdisk\n  /dev/mapper/home_crypt     2.8T  63% ext4     rw,relatime,seclabel                                                                                                                                                                                                                                                                                                                                                                                           /home\n  /dev/mapper/root_crypt      99G  30% ext4     rw,relatime,seclabel                                                                                                                                                                                                                                                                                                                                                                                           /root\n  /dev/nvme0n1               367G  10% ext4     rw,relatime,seclabel                                                                                                                                                                                                                                                                                                                                                                                           /mnt/nvme\n  /dev/nvme1n1               367G  20% ext4     rw,relatime,seclabel                                                                                                                                                                                                                                                                                                                                                                                           /mnt/nvme2\n  /dev/sda1                  190M   6% vfat     rw,relatime,fmask=0077,dmask=0077,codepage=437,iocharset=ascii,shortname=winnt,errors=remount-ro                                                                                                                                                                                                                                                                                                               /boot/efi\n  /dev/sda2                 1014M  26% xfs      rw,relatime,seclabel,attr2,inode64,noquota                                                                                                                                                                                                                                                                                                                                                                     /boot\n  /dev/sda3                  150G 100% xfs      rw,relatime,seclabel,attr2,inode64,noquota                                                                                                                                                                                                                                                                                                                                                                     /opt\n  /dev/sda5                  310G  53% xfs      rw,relatime,seclabel,attr2,inode64,noquota                                                                                                                                                                                                                                                                                                                                                                     /\n  devtmpfs                    95G   0% devtmpfs rw,nosuid,seclabel,size=98996900k,nr_inodes=24749225,mode=755                                                                                                                                                                                                                                                                                                                                                  /dev\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/FTER5Z3KRDVUU5BZIQ5V2CBAEX:/bigdisk/docker/overlay2/l/WIAH4GSCWZ7ELFH2QQBLBPG2ME:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/diff,workdir=/bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/work /bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/WCTE4ONPX6H43KHAQG2LQBRR65:/bigdisk/docker/overlay2/l/QNL4DERUZUQ6PMHLBW5E6JKSYJ:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/diff,workdir=/bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/work /bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/TFR4MO7WBKLH5P6MJFNL3OX47C:/bigdisk/docker/overlay2/l/QNL4DERUZUQ6PMHLBW5E6JKSYJ:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/97bbe65b7ed61b25671a69e6520051c4d01a64e5035768b787b5754b2d69a2cf/diff,workdir=/bigdisk/docker/overlay2/97bbe65b7ed61b25671a69e6520051c4d01a64e5035768b787b5754b2d69a2cf/work /bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/FTER5Z3KRDVUU5BZIQ5V2CBAEX:/bigdisk/docker/overlay2/l/WIAH4GSCWZ7ELFH2QQBLBPG2ME:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/diff,workdir=/bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/work /bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/WCTE4ONPX6H43KHAQG2LQBRR65:/bigdisk/docker/overlay2/l/QNL4DERUZUQ6PMHLBW5E6JKSYJ:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/diff,workdir=/bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/work /bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/TFR4MO7WBKLH5P6MJFNL3OX47C:/bigdisk/docker/overlay2/l/QNL4DERUZUQ6PMHLBW5E6JKSYJ:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/97bbe65b7ed61b25671a69e6520051c4d01a64e5035768b787b5754b2d69a2cf/diff,workdir=/bigdisk/docker/overlay2/97bbe65b7ed61b25671a69e6520051c4d01a64e5035768b787b5754b2d69a2cf/work /bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/FTER5Z3KRDVUU5BZIQ5V2CBAEX:/bigdisk/docker/overlay2/l/WIAH4GSCWZ7ELFH2QQBLBPG2ME:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/diff,workdir=/bigdisk/docker/overlay2/109ef036e6f60478d1e17515dc9c6424f0f979fa6d4d353fcd4e27aa9852e5e6/work /bigdisk/docker/overlay2/97bbe65b7ed61b25671a69e6520051c4d01a64e5035768b787b5754b2d69a2cf/merged\n  overlay                    5.5T  38% overlay  rw,relatime,seclabel,lowerdir=/bigdisk/docker/overlay2/l/WCTE4ONPX6H43KHAQG2LQBRR65:/bigdisk/docker/overlay2/l/QNL4DERUZUQ6PMHLBW5E6JKSYJ:/bigdisk/docker/overlay2/l/YF4GRKV3GEMT3LC2AC2RQRPAQP,upperdir=/bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/diff,workdir=/bigdisk/docker/overlay2/3d094130f6d9423fca205ff4a74634779080af9873c72a3e234e6e987a8d4c21/work /bigdisk/docker/overlay2/97bbe65b7ed61b25671a69e6520051c4d01a64e5035768b787b5754b2d69a2cf/merged\n```\n\n----------------------------------------\n\nTITLE: Creating the mysql.user Table Schema in SQL\nDESCRIPTION: This SQL statement defines the structure for the `mysql.user` table within the `mysql` database. It specifies columns for user identification (`Host`, `User`), authentication (`Password`, `authentication_string`, `plugin`), a wide range of global privileges (e.g., `Select_priv`, `Insert_priv`, `Super_priv`), SSL configuration (`ssl_type`, `ssl_cipher`, `x509_issuer`, `x509_subject`), and resource limits (`max_questions`, `max_updates`, `max_connections`). The primary key is defined on the combination of `Host` and `User` columns. The table uses the MyISAM storage engine and specifies UTF-8 character set and collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/mysql-user-ddl-5.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `authentication_string` text COLLATE utf8_bin NOT NULL,\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Select Query on foo_tbl\nDESCRIPTION: Simple SELECT query on foo_tbl with performance metrics showing 0.05 QPS and 12us execution time. Query executed by SQL_SLAVE user accessing the foo database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: Creating Film List View in MySQL\nDESCRIPTION: Defines a view `film_list` that aggregates film details, including titles, descriptions, categories, and actor names. It joins multiple tables to compile a list of films with categorized and summarized information. Dependencies include tables: `film`, `category`, `film_category`, `film_actor`, and `actor`. The view groups results by film ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(`actor`.`first_name`,_utf8' ',`actor`.`last_name`) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Querying Schemas by First-Level Name\nDESCRIPTION: EXPLAIN query that retrieves database schema names from INFORMATION_SCHEMA based on the first part of the schema name (before underscore). Uses a subquery to limit results and applies ordering.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT `SCHEMA_NAME` FROM `INFORMATION_SCHEMA`.`SCHEMATA`, (SELECT DB_first_level FROM ( SELECT DISTINCT SUBSTRING_INDEX(SCHEMA_NAME, '_', 1) DB_first_level FROM INFORMATION_SCHEMA.SCHEMATA WHERE TRUE ) t ORDER BY DB_first_level ASC LIMIT 0, 100) t2 WHERE TRUE AND 1 = LOCATE(CONCAT(DB_first_level, '_'), CONCAT(SCHEMA_NAME, '_')) ORDER BY SCHEMA_NAME ASC\n```\n\n----------------------------------------\n\nTITLE: Capturing MySQL Client Acknowledgment Packet in Hexdump Format\nDESCRIPTION: This hexdump shows a small acknowledgment packet sent from the client back to the MySQL server. With only 5 bytes of data, this packet likely serves as an acknowledgment for the received query results.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump000.txt#2025-04-22_snippet_2\n\nLANGUAGE: hexdump\nCODE:\n```\n0x0000:  4508 0039 7dc6 4000 4006 01ec c0a8 1cdf\n0x0010:  c0a8 1cd5 dc8e 0cea adc4 523e ad6f 9c1c\n0x0020:  8018 0072 ec7b 0000 0101 080a 62e6 32e7\n0x0030:  62e4 a103 0100 0000 01\n```\n\n----------------------------------------\n\nTITLE: Creating ndb_binlog_index Table in MySQL\nDESCRIPTION: Creates the ndb_binlog_index table to track binary log positions and operations for NDB Cluster replication. Stores position, file information, and operation counts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Displaying EXPLAIN Plan for SELECT Query in MySQL\nDESCRIPTION: This EXPLAIN output shows the execution plan for the SELECT query. It indicates that the query uses an index scan on the 'fruit' column, examining 3 rows with 100% filtering efficiency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-80.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n# *************************** 1. row ***************************\n#            id: 1\n#   select_type: SIMPLE\n#         table: trees\n#    partitions: NULL\n#          type: index\n# possible_keys: NULL\n#           key: fruit\n#       key_len: 99\n#           ref: NULL\n#          rows: 3\n#      filtered: 100.00\n#         Extra: Using index\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger for Payment Table in MySQL\nDESCRIPTION: This SQL script creates a trigger 'payment_date' for the 'payment' table to automatically set the payment date to the current timestamp when inserting a new record.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE */ /*!50017 DEFINER=`msandbox`@`%` */ /*!50003 TRIGGER `payment_date` BEFORE INSERT ON `payment` FOR EACH ROW SET NEW.payment_date = NOW() */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Server Log Output\nDESCRIPTION: This snippet shows the MySQL server version, startup parameters, and detailed logs of two administrator commands executed on the server. It includes performance metrics such as query time, lock time, and rows affected.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow026.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/sbin/mysqld, Version: 5.0.77-percona-b13-log (MySQL Percona Edition (GPL)). started with:\nTcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock\nTime                 Id Command    Argument\n# Time: 090311 18:11:50\n# User@Host: root[root] @ localhost []\n# Thread_id: 47  Schema: \n# Query_time: 0.017850  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0  Rows_affected: 0  Rows_read: 0\n# QC_Hit: No  Full_scan: No  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n# administrator command: Refresh;\n# User@Host: root[root] @ localhost []\n# Thread_id: 47  Schema: \n# Query_time: 0.000002  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0  Rows_affected: 0  Rows_read: 0\n# QC_Hit: No  Full_scan: No  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n# administrator command: Quit;\n```\n\n----------------------------------------\n\nTITLE: Querying Single Record from 'foo' Table in MySQL\nDESCRIPTION: A simple SELECT query that retrieves all columns from the 'foo' table where the 'id' column equals 1. This query appears in multiple slow query log entries with different transaction IDs but identical execution metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow054.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Using the 'decrypt' Command with pt-secure-collect (Shell)\nDESCRIPTION: This snippet illustrates how to use the `decrypt` command of `pt-secure-collect`. This command is used to decrypt a file that was previously encrypted by the tool. It requires the path to the encrypted input file (`<input file>`) and accepts optional flags (`[flags]`), such as `--outfile` to specify the output file name. The decryption password will be interactively requested from the terminal.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-secure-collect.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npt-secure-collect decrypt [flags] <input file>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Device I/O Statistics in Linux\nDESCRIPTION: This snippet shows a tabular output of I/O statistics for various storage devices on a Linux system. It includes metrics such as read/write rates, concurrency, response times, and device utilization percentage. The data is collected at regular intervals, indicated by the timestamp at the beginning of each section.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  5.0 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sda           0.0    0.1     4.6     0.0    0.0     0.1   3%      0\n  5.0 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sda5          0.0    0.1     5.1     0.0    0.0     0.0   2%      0\n  5.0 sda6          0.0    0.0     2.0     0.0    0.0     0.1   1%      0\n  5.0 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 dm-6          0.0    0.0     2.0     0.1    0.0     0.1   1%      0\n  5.0 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Plan for a Parameterized Query in MySQL - SQL\nDESCRIPTION: Converts the parameterized query into an EXPLAIN statement, optionally including MySQL's partition information for compatible versions (using /*!50100 PARTITIONS*/ syntax). Used to analyze the query's execution plan, including index and partition usage. Prerequisites include verification that the table 'd.t3' exists. Deep inspection of query plan aids in performance tuning. Inputs are query parameters; output is a query plan table. Feature availability may vary by MySQL version.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump023.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\\nSELECT * FROM d.t3 WHERE v=? OR c=? OR f=?\\G\n```\n\n----------------------------------------\n\nTITLE: Preparing a Parameterized SELECT Statement in SQL\nDESCRIPTION: This SQL statement uses the `PREPARE` command to create a prepared statement for a `SELECT` query. The query retrieves the column 'i' from table 't' in database 'd', filtering based on a placeholder parameter '?' for the 'i' column. Prepared statements improve performance and security by pre-compiling the query structure. The `\\G` terminator suggests execution within a command-line client expecting vertical output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump041.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPREPARE SELECT i FROM d.t WHERE i=?\\G\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records into SQL Database Table\nDESCRIPTION: This SQL code snippet shows a portion of an INSERT statement adding multiple records to a database table. Each record consists of three values: a primary key (likely an auto-incrementing ID), a numeric value, and a timestamp. The timestamp '2006-02-15 10:05:03' is consistent across all records, indicating a bulk insert operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n(187,976,'2006-02-15 10:05:03'),(188,1,'2006-02-15 10:05:03'),(188,10,'2006-02-15 10:05:03'),(188,14,'2006-02-15 10:05:03'),(188,51,'2006-02-15 10:05:03'),(188,102,'2006-02-15 10:05:03'),(188,111,'2006-02-15 10:05:03'),(188,146,'2006-02-15 10:05:03'),(188,206,'2006-02-15 10:05:03'),(188,223,'2006-02-15 10:05:03'),(188,289,'2006-02-15 10:05:03'),(188,311,'2006-02-15 10:05:03'),(188,322,'2006-02-15 10:05:03'),(188,338,'2006-02-15 10:05:03'),(188,396,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.category Table Schema (SQL)\nDESCRIPTION: This SQL snippet creates the `category` table in the `sakila` database. It is used to store film categories, containing an auto-incrementing primary key `category_id`, the category `name`, and a `last_update` timestamp. The table uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `category` (\n  `category_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries from MySQL Database\nDESCRIPTION: Series of SELECT queries executed by user@1.2.3.4 on database 'db'. Each query has consistent performance metrics with 0.000899s query time, no lock time, and no rows examined or returned. No InnoDB statistics are available for these queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 548 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 549 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 550 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Analyzing INSERT Query Performance on 'foo' Table in MySQL\nDESCRIPTION: This SQL snippet, part of Query 2 in a pt-query-digest report, details an INSERT statement adding a row to the 'foo' table. The values inserted are NULL (likely for an auto-increment primary key) and 3. The report provides performance statistics for this specific query execution, including execution time, lock time, and rows affected. Contextual information like associated SHOW TABLE commands is also mentioned in the surrounding text. The '\\G' terminator suggests execution formatting used in tools like the mysql client.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report01.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO foo VALUES (NULL, 3)\\G\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query in MySQL\nDESCRIPTION: This snippet shows a basic SELECT query executed in MySQL. It selects all columns from the 'mytbl' table in the 'mydb' database. The query log entry provides execution metrics such as query time and rows examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow017.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse mydb;\nSELECT * FROM mytbl;\n```\n\n----------------------------------------\n\nTITLE: Latest File I/O Structure Definition\nDESCRIPTION: Table structure for latest_file_io and x$latest_file_io views showing file operations with latency and thread information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\ndesc latest_file_io;\ndesc x$latest_file_io;\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Performance Schema File IO Type Summary Tables - SQL\nDESCRIPTION: Shows the table structures for host_summary_by_file_io_type and x$host_summary_by_file_io_type in MySQL Performance Schema. Details column names and types, with the main difference being that 'total_latency' and 'max_latency' columns are TEXT in the base view and BIGINT in the x$ view. Useful for understanding how event type grouping by host is represented. Assumes access to a configured MySQL Performance Schema instance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_file_io_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.70 sec)\n\nmysql> desc x$host_summary_by_file_io_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Selective User Information - MySQL\nDESCRIPTION: This SQL snippet selects user-specific data like 'name' and 'level' from the 'users' table filtered by certain conditions ('ppl' and 'id'). The query outputs detailed user attributes specified in the SELECT clause.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name,level,foo,foo_mod,def,def_mod,type FROM users WHERE ppl=202949 AND id<>2204829\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Sample Database Tables\nDESCRIPTION: Creates tables for the Sakila sample database including actor, address, category, city, country, customer and film tables with appropriate relationships and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Analyzing Raw Linux Disk I/O Statistics\nDESCRIPTION: System-level disk I/O statistics showing detailed metrics like reads, writes, sectors, and timing for various storage devices. The data is timestamped and includes both physical and logical devices. Fields include device major/minor numbers, read/write operations, sectors, and timing information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Output (Percona Toolkit)\nDESCRIPTION: This snippet displays formatted text output, likely from a tool like pt-diskstats within Percona Toolkit. It shows time-series disk I/O performance metrics for a device (identified as {30}). Columns include timestamp offset (#ts), reads/sec (rd_s), average read size (rd_avkb), read MB/s (rd_mb_s), read merge percentage (rd_mrg), read concurrency (rd_cnc), read response time (rd_rt), writes/sec (wr_s), average write size (wr_avkb), write MB/s (wr_mb_s), write merge percentage (wr_mrg), write concurrency (wr_cnc), write response time (wr_rt), busy percentage (busy), requests in progress (in_prg), total I/O operations per second (io_s), average queue time (qtime), and average service time (stime). This output is used to analyze disk performance trends and identify potential bottlenecks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/sample_diskstats-004.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n  1.0 {30}    2812.0    16.0    43.9     1%    0.0     0.4    92.7    30.6     2.8    67%    0.0     0.1   3%      0  2904.7    0.1   0.3\n  2.0 {30}    3160.1    16.0    49.3     1%    0.0     0.4   327.5    31.1     9.9    36%    0.0     0.2   3%      2  3487.6    0.1   0.2\n  3.0 {30}    2593.4    16.0    40.5     1%    0.0     0.4   102.6    25.2     2.5    62%    0.0     0.1   3%      2  2695.9    0.1   0.3\n  4.1 {30}    2859.4    16.0    44.7     1%    0.0     0.3   147.8    30.5     4.4    57%    0.0     0.1   3%      0  3007.2    0.1   0.2\n  5.1 {30}    2516.2    16.0    39.3     1%    0.0     0.3   317.5    34.4    10.7    36%    0.0     0.2   2%      0  2833.7    0.1   0.2\n```\n\n----------------------------------------\n\nTITLE: Creating Film_Actor Table in MySQL\nDESCRIPTION: This SQL script creates the 'film_actor' table to establish a many-to-many relationship between films and actors. It includes foreign key constraints to maintain referential integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema Dumps in pt-mysql-summary (Bash)\nDESCRIPTION: Changes the behavior of `pt-mysql-summary` regarding schema dumps (bug 1214685). It no longer prompts interactively. To include schema information and summaries, users must now explicitly use the `--databases` option with specific database names or the new `--all-databases` option to include all schemas.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Example: Summarize specific databases\npt-mysql-summary --databases=db1,db2\n\n# Example: Summarize all databases\npt-mysql-summary --all-databases\n```\n\n----------------------------------------\n\nTITLE: Using the 'collect' Command with pt-secure-collect (Shell)\nDESCRIPTION: This snippet demonstrates the syntax for using the `collect` command within `pt-secure-collect`. This command is responsible for gathering data (by default from `pt-stalk`, `pt-summary`, `pt-mysql-summary`), sanitizing it, packing it, and optionally encrypting it. Various flags (`<flags>`) can be provided to modify its behavior, such as specifying MySQL connection details or output directories.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-secure-collect.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npt-secure-collect collect <flags>\n```\n\n----------------------------------------\n\nTITLE: Displaying Total MySQL Index Count\nDESCRIPTION: This snippet shows a commented section that displays the total number of indexes in a MySQL database. It's likely part of a larger report or analysis output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/key-types-f.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# Total Indexes  22\n```\n\n----------------------------------------\n\nTITLE: Creating Procedure Privileges Table in MySQL\nDESCRIPTION: Defines a table `procs_priv` which stores privileges for MySQL stored procedures. Requires MySQL Server with MyISAM engine support. The key constraints ensure unique combinations of host, database, user, routine name, and routine type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: Selecting Next Chunk Boundary Values in SQL\nDESCRIPTION: This SQL query retrieves the values of the index column `c` that define the boundary for the next chunk in the `osc.t2` table. It starts searching from the provided lower boundary (`?`) or the beginning if NULL, forces the use of index `c`, orders by `c`, and uses `LIMIT ?, 2` (where the first `?` is an offset) to fetch the relevant rows to determine the next chunk's range. The `/*!40001 SQL_NO_CACHE */` hint prevents the query result from being cached. The comment `/*next chunk boundary*/` specifies its purpose.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/oversize-chunks.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `c`, `c` FROM `osc`.`t2` FORCE INDEX(`c`) WHERE (((? IS NULL OR `c` >= ?))) ORDER BY `c` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Settings for Percona Toolkit Operations\nDESCRIPTION: Configuration settings for various database operations, specifying the number of retry attempts and wait times between retries in case of failures.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-online-schema-change/samples/stats-dry-run.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOperation, tries, wait:\n  analyze_table, 10, 1\n  copy_rows, 10, 0.25\n  create_triggers, 10, 1\n  drop_triggers, 10, 1\n  swap_tables, 10, 1\n  update_foreign_keys, 10, 1\n```\n\n----------------------------------------\n\nTITLE: Defining the 'tables_priv' Table for Table Privileges - MySQL - SQL\nDESCRIPTION: Creates the 'tables_priv' table, storing detailed user privilege information for specific tables and columns. Tracks grantor, timestamp, and supports multiple privilege types through set fields. Used by MySQL's privilege subsystem at table and column granularity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Table_name` char(64) collate utf8_bin NOT NULL default '',\n  `Grantor` char(77) collate utf8_bin NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view') character set utf8 NOT NULL default '',\n  `Column_priv` set('Select','Insert','Update','References') character set utf8 NOT NULL default '',\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Stats at Timestamp 2.0 Text\nDESCRIPTION: This block shows disk I/O statistics captured at timestamp 2.0. It includes metrics like megabytes read/written per second (rd_mb_s, wr_mb_s), read/write concurrency (rd_cnc, wr_cnc), read/write response time (rd_rt, wr_rt), device busy percentage (busy), and in-progress requests (in_prg) for devices like ram*, sda*, sr*, md*, and loop*.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-004.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n2.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda       24.6    0.6     0.4     5.0    0.1     0.2  46%      1\n2.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda3      24.6    0.6     0.4     5.0    0.1     0.2  46%      1\n2.0 sr0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 md0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Querying User Count for People Field Value - SQL\nDESCRIPTION: Selects the count of user records for a particular 'ppl' field value in the 'users' table. Typically used for analytics or enforcing quotas. Accepts an integer for the filtering value, returns an aggregated count.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT count(id) FROM users WHERE ppl=371079\n```\n\n----------------------------------------\n\nTITLE: Example Query Results for User Summary by Stages\nDESCRIPTION: Sample query results showing execution statistics for different SQL stages including timing and latency measurements for the root user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_91\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary_by_stages;\n+------+--------------------------------+-------+---------------+-------------+\n| user | event_name                     | total | total_latency | avg_latency |\n+------+--------------------------------+-------+---------------+-------------+\n| root | stage/sql/Opening tables       |   889 | 1.97 ms       | 2.22 us     |\n| root | stage/sql/Creating sort index  |     4 | 1.79 ms       | 446.30 us   |\n| root | stage/sql/init                 |    10 | 312.27 us     | 31.23 us    |\n```\n\n----------------------------------------\n\nTITLE: Displaying Checksum Results for Database Tables\nDESCRIPTION: This code snippet shows the output of a database checksum operation. It lists various metrics for each table, including errors, differences, row counts, chunk counts, and skipped counts. The output covers tables from multiple schemas, primarily 'percona_test' and 'sakila'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/static-chunk-size-results-5.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERRORS DIFFS ROWS CHUNKS SKIPPED TABLE\n0 0 22 1 0 percona_test.checksums\n0 0 1 1 0 percona_test.sentinel\n0 0 200 1 0 sakila.actor\n0 0 603 1 0 sakila.address\n0 0 16 1 0 sakila.category\n0 0 600 1 0 sakila.city\n0 0 109 1 0 sakila.country\n0 0 599 1 0 sakila.customer\n0 0 1000 1 0 sakila.film\n0 0 5462 8 0 sakila.film_actor\n0 0 1000 1 0 sakila.film_category\n0 0 1000 1 0 sakila.film_text\n0 0 4581 7 0 sakila.inventory\n0 0 6 1 0 sakila.language\n0 0 16049 19 0 sakila.payment\n0 0 16044 19 0 sakila.rental\n0 0 2 1 0 sakila.staff\n0 0 2 1 0 sakila.store\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL help_relation Table in SQL\nDESCRIPTION: This SQL statement defines the `help_relation` table within the `mysql` database. It establishes a many-to-many relationship between help topics and help keywords, linking `help_topic_id` from the `help_topic` table with `help_keyword_id` from the `help_keyword` table. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Creating Film-Category Junction Table in MySQL Database\nDESCRIPTION: SQL definition for the film_category table in the Sakila database. This junction table manages the many-to-many relationship between films and their categories. Includes foreign key constraints to both the film and category tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure with Foreign Keys for 'payment' - SQL\nDESCRIPTION: Creates the 'payment' table for capturing payment transactions with fields for foreign keys to 'customer', 'staff', and 'rental' tables. Sets up cascade and set-null behavior for referential integrity. Requires referenced tables to already exist. Inputs: payment information and IDs; output: payment records per transaction; limitations include non-null required fields and legal 'rental_id' or NULL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Trigger for Online Schema Change in SQL\nDESCRIPTION: This trigger deletes corresponding rows from the new table when rows are deleted from the original table. It uses IGNORE to prevent errors if the row doesn't exist in the new table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TRIGGER mk_osc_del AFTER DELETE ON `osc`.`t` FOR EACH ROW DELETE IGNORE FROM `osc`.`__new_t` WHERE `osc`.`__new_t`.`id` = OLD.`id`\n```\n\n----------------------------------------\n\nTITLE: Describing x$schema_index_statistics Structure - SQL\nDESCRIPTION: This snippet displays the output of 'desc x$schema_index_statistics', documenting the structure of a helper view similar to 'schema_index_statistics' but using unsigned bigint types for latency columns. Use this as a reference for alternative or more precise performance statistic queries on indexes. The main difference from 'schema_index_statistics' is latency fields as integers rather than text.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_index_statistics;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| table_schema   | varchar(64)         | YES  |     | NULL    |       |\n| table_name     | varchar(64)         | YES  |     | NULL    |       |\n| index_name     | varchar(64)         | YES  |     | NULL    |       |\n| rows_selected  | bigint(20) unsigned | NO   |     | NULL    |       |\n| select_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_inserted  | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_updated   | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_deleted   | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n11 rows in set (0.42 sec)\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into a Table - MySQL SQL\nDESCRIPTION: This snippet performs a bulk insertion of multiple rows into the 't2' table in the 'issue_96' database, utilizing the SQL INSERT INTO ... VALUES syntax. It relies on the 't2' table schema and a valid session context as set up by previous environment variables. The key parameters include the column values for each row, allowing NULLs where permissible. The expected input is a list of row tuples, and the expected output is a modification to the 't2' table, adding records as specified. Limitations can arise from table constraints or data type mismatches.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/relay-binlog001-at-1708.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO t2 VALUES\n   (1,'ABC','lo'),\n   (NULL,'CHY','ch'),\n   (2,'BFN','na'),\n   (NULL,NULL,'gl'),\n   (12,'TTT','ty'),\n   (4,'CPR','zz'),  \n   (8,'CSX','dz'),\n   (9,NULL,NULL),\n   (NULL,NULL,NULL),\n   (11,'PBR',NULL),\n   (NULL,'THR',NULL),\n   (6,NULL,'jr')\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: MySQL Schema Query\nDESCRIPTION: Query to retrieve schema names with first-level database filtering\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog005.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `SCHEMA_NAME` FROM `INFORMATION_SCHEMA`.`SCHEMATA`, (SELECT DB_first_level FROM ( SELECT DISTINCT SUBSTRING_INDEX(SCHEMA_NAME, '_', 1) DB_first_level FROM INFORMATION_SCHEMA.SCHEMATA WHERE TRUE ) t ORDER BY DB_first_level ASC LIMIT 0, 100) t2 WHERE TRUE AND 1 = LOCATE(CONCAT(DB_first_level, '_'), CONCAT(SCHEMA_NAME, '_')) ORDER BY SCHEMA_NAME ASC\n```\n\n----------------------------------------\n\nTITLE: Detailing InnoDB Buffer Pool and Memory Usage (Text)\nDESCRIPTION: This snippet outlines memory allocation within InnoDB and the status of the buffer pool. It shows total memory allocated, breakdown by internal structures (Adaptive Hash Index, Page hash, Dictionary cache, etc.), buffer pool size in pages and bytes, number of free buffers, counts of database pages (total, old, modified), pending reads/writes, page management statistics (young/not young rates, read/created/written pages), buffer pool hit rate, read-ahead/eviction rates, and LRU list lengths.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 92440363008; in additional pool allocated 0\nInternal hash tables (constant factor + variable factor)\n    Adaptive hash index 10844414376 \t(1427984696 + 9416429680)\n    Page hash           89249816\n    Dictionary cache    362162856 \t(356997584 + 5165272)\n    File system         83520 \t(82672 + 848)\n    Lock system         223469256 \t(223123336 + 345920)\n    Recovery system     0 \t(0 + 0)\n    Threads             475896 \t(406936 + 68960)\nDictionary memory allocated 5165272\nBuffer pool size        5505023\nBuffer pool size, bytes 90194296832\nFree buffers            0\nDatabase pages          4930290\nOld database pages      1819950\nModified db pages       2221\nPending reads 14\nPending writes: LRU 63, flush list 0, single page 0\nPages made young 78175589, not young 0\n156000.00 youngs/s, 0.00 non-youngs/s\nPages read 49717874, created 2178629, written 172720484\n98000.00 reads/s, 4000.00 creates/s, 0.00 writes/s\nBuffer pool hit rate 1000 / 1000, young-making rate 0 / 1000 not 0 / 1000\nPages read ahead 0.00/s, evicted without access 74000.00/s\nLRU len: 4930290, unzip_LRU len: 0\nI/O sum[10426]:cur[59], unzip sum[0]:cur[0]\n```\n\n----------------------------------------\n\nTITLE: Basic Data Manipulation Operations - SQL\nDESCRIPTION: Basic DML operations including INSERT and UPDATE statements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow038.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO tbl VALUES (1, 2, 3);\nUPDATE tbl SET foo='bar' WHERE foo IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Enabling Replication Failure Detection in pt-table-checksum (CLI)\nDESCRIPTION: Introduces the `--fail-on-stopped-replication` command-line option for the `pt-table-checksum` tool. When this option is used, the tool will detect and report an error if any monitored slave nodes have stopped replicating, preventing potentially inaccurate checksum results.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-13.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--fail-on-stopped-replication\n```\n\n----------------------------------------\n\nTITLE: Querying sequential values from MySQL table with performance metrics\nDESCRIPTION: A series of simple SELECT queries retrieving sequential numeric values from a table named 'foo'. Each query is preceded by MySQL slow query log format metadata showing consistent query execution time of 0.000899 seconds with 0 rows examined and returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1583 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1584 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1585 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1586 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1587 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1588 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1589 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1590 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1591 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1592 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1593 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1594 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1595 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1596 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1597 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1598 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1599 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1600 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1601 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1602 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1603 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1604 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1605 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1606 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1607 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1608 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1609 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1610 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1611 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1612 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1613 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1614 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1615 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1616 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1617 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1618 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1619 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1620 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1621 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1622 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1623 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1624 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1625 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1626 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1627 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1628 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1629 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1630 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1631 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Analyzing SET NAMES Command (SQL)\nDESCRIPTION: This snippet presents the analysis of a 'SET NAMES utf8' command. It includes performance metrics like execution time, lock time, rows examined, and query size. The query time distribution is also shown.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow011_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET NAMES utf8\\G\n```\n\n----------------------------------------\n\nTITLE: Defining City Table in Sakila Schema\nDESCRIPTION: Stores city data with foreign key constraints referencing the country table. Required dependencies include the InnoDB engine and utf8 charset. Main structural features include primary and foreign key definitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying Memory Usage by Host\nDESCRIPTION: Shows current memory usage statistics grouped by host, including allocation counts, current and total allocated memory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from memory_by_host_by_current_bytes WHERE host IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Creating After Update Trigger To Sync Film Text Table - MySQL SQL\nDESCRIPTION: This trigger, defined for the 'film' table, updates corresponding records in the 'film_text' table after a row in 'film' is updated and either the title or description changes. The trigger ensures the 'film_text' table remains consistent with changes to 'film'. Requires InnoDB engine, proper privileges, and compatible MySQL version with stored program support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN\n    IF (old.title != new.title) or (old.description != new.description)\n    THEN\n        UPDATE film_text\n            SET title=new.title,\n                description=new.description,\n                film_id=new.film_id\n        WHERE film_id=old.film_id;\n    END IF;\n  END */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Sanitize Command Usage for pt-secure-collect\nDESCRIPTION: Demonstrates the usage of the 'sanitize' command in pt-secure-collect. This command replaces queries in a file by their fingerprints and obfuscates hostnames.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-secure-collect/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npt-secure-collect sanitize [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Missing Schema in MySQL Slow Log\nDESCRIPTION: A sample slow query log entry showing a problematic query that lacks schema definition. The query took approximately 17.7 seconds to execute, with minimal lock time and no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow025.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT missing_a_schema_above from crash_me;\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Database with SHOW TABLES - SQL\nDESCRIPTION: This SQL command requests a list of all tables in the current database context. It requires an active database connection and appropriate user permissions. The output is a result set with table names, and it does not modify data; constraints may apply if there are schema restrictions or lack of privileges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump-1402776_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLES\\G\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement in MySQL\nDESCRIPTION: This SQL command retrieves the CREATE TABLE statement for the 'trees' table in the 'food' database. It's useful for examining the table's structure and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-57.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Creating film_in_stock Procedure in MySQL\nDESCRIPTION: This stored procedure checks if a specific film is in stock at a given store and returns the count of available copies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE `film_in_stock`(IN p_film_id INT, IN p_store_id INT, OUT p_film_count INT)\n    READS SQL DATA\nBEGIN\n     SELECT inventory_id\n     FROM inventory\n     WHERE film_id = p_film_id\n     AND store_id = p_store_id\n     AND inventory_in_stock(inventory_id);\n\n     SELECT FOUND_ROWS() INTO p_film_count;\nEND\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Daemon Configuration\nDESCRIPTION: These configuration settings define various parameters for the MySQL server daemon (mysqld). It includes paths for the pid-file, data directory, buffer sizes, file paths for log and relay logs, and server-id among others. This snippet is critical for server operation adjustments, allowing custom server id '12345' and defining file paths under '/tmp/12345/'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc005.txt#2025-04-22_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n```\n\n----------------------------------------\n\nTITLE: Inserting New Record into 'foo' Table in MySQL\nDESCRIPTION: This SQL query inserts a new record into the 'foo' table. It uses NULL for the first column (likely an auto-increment primary key) and the value 3 for the second column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow059.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO foo VALUES (NULL, 3);\n```\n\n----------------------------------------\n\nTITLE: MySQL Network and Connection Parameters\nDESCRIPTION: Parameters controlling network behavior, connection timeouts, and buffer sizes for MySQL server\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_6\n\nLANGUAGE: mysql\nCODE:\n```\n--net_buffer_length=# \n--net_read_timeout=# \n--net_retry_count=# \n--net_write_timeout=# \n--max_connections=# \n--max_connect_errors=# \n--interactive_timeout=#\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamped Records in Bulk - SQL\nDESCRIPTION: This SQL snippet demonstrates bulk insertion of records into a database table by providing tuples of values, typically ID values and TIMESTAMP fields. Dependencies include a compatible SQL database (such as MySQL or PostgreSQL) and a table with a structure matching the provided columns (likely, an ID, a foreign key/reference, and a DATETIME/TIMESTAMP column). The primary input is a comma-separated list of value groups. The output is the insertion of all provided rows; the snippet assumes the destination table exists and no unique constraint violations occur.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n0:05:03'),(118,852,'2006-02-15 10:05:03'),(118,938,'2006-02-15 10:05:03'),(118,957,'2006-02-15 10:05:03'),(118,969,'2006-02-15 10:05:03'),(119,21,'2006-02-15 10:05:03'),(119,49,'2006-02-15 10:05:03'),(119,64,'2006-02-15 10:05:03'),(119,87,'2006-02-15 10:05:03'),(119,143,'2006-02-15 10:05:03'),(119,171,'2006-02-15 10:05:03'),(119,172,'2006-02-15 10:05:03'),(119,173,'2006-02-15 10:05:03'),(119,381,'2006-02-15 10:05:03'),(119,394,'2006-02-15 10:05:03'),(119,412,'2006-02-15 10:05:03'),(119,418,'2006-02-15 10:05:03'),(119,454,'2006-02-15 10:05:03'),(119,509,'2006-02-15 10:05:03'),(119,521,'2006-02-15 10:05:03'),(119,567,'2006-02-15 10:05:03'),(119,570,'2006-02-15 10:05:03'),(119,592,'2006-02-15 10:05:03'),(119,614,'2006-02-15 10:05:03'),(119,636,'2006-02-15 10:05:03'),(119,649,'2006-02-15 10:05:03'),(119,693,'2006-02-15 10:05:03'),(119,738,'2006-02-15 10:05:03'),(119,751,'2006-02-15 10:05:03'),(119,782,'2006-02-15 10:05:03'),(119,786,'2006-02-15 10:05:03'),(119,788,'2006-02-15 10:05:03'),(119,802,'2006-02-15 10:05:03'),(119,858,'2006-02-15 10:05:03'),(119,868,'2006-02-15 10:05:03'),(119,900,'2006-02-15 10:05:03'),(119,939,'2006-02-15 10:05:03'),(120,57,'2006-02-15 10:05:03'),(120,63,'2006-02-15 10:05:03'),(120,144,'2006-02-15 10:05:03'),(120,149,'2006-02-15 10:05:03'),(120,208,'2006-02-15 10:05:03'),(120,231,'2006-02-15 10:05:03'),(120,238,'2006-02-15 10:05:03'),(120,255,'2006-02-15 10:05:03'),(120,414,'2006-02-15 10:05:03'),(120,424,'2006-02-15 10:05:03'),(120,489,'2006-02-15 10:05:03'),(120,513,'2006-02-15 10:05:03'),(120,590,'2006-02-15 10:05:03'),(120,641,'2006-02-15 10:05:03'),(120,642,'2006-02-15 10:05:03'),(120,659,'2006-02-15 10:05:03'),(120,682,'2006-02-15 10:05:03'),(120,691,'2006-02-15 10:05:03'),(120,715,'2006-02-15 10:05:03'),(120,717,'2006-02-15 10:05:03'),(120,722,'2006-02-15 10:05:03'),(120,746,'2006-02-15 10:05:03'),(120,830,'2006-02-15 10:05:03'),(120,894,'2006-02-15 10:05:03'),(120,898,'2006-02-15 10:05:03'),(120,911,'2006-02-15 10:05:03'),(120,994,'2006-02-15 10:05:03'),(121,141,'2006-02-15 10:05:03'),(121,154,'2006-02-15 10:05:03'),(121,161,'2006-02-15 10:05:03'),(121,170,'2006-02-15 10:05:03'),(121,186,'2006-02-15 10:05:03'),(121,198,'2006-02-15 10:05:03'),(121,220,'2006-02-15 10:05:03'),(121,222,'2006-02-15 10:05:03'),(121,284,'2006-02-15 10:05:03'),(121,297,'2006-02-15 10:05:03'),(121,338,'2006-02-15 10:05:03'),(121,353,'2006-02-15 10:05:03'),(121,449,'2006-02-15 10:05:03'),(121,479,'2006-02-15 10:05:03'),(121,517,'2006-02-15 10:05:03'),(121,633,'2006-02-15 10:05:03'),(121,654,'2006-02-15 10:05:03'),(121,658,'2006-02-15 10:05:03'),(121,666,'2006-02-15 10:05:03'),(121,771,'2006-02-15 10:05:03'),(121,780,'2006-02-15 10:05:03'),(121,847,'2006-02-15 10:05:03'),(121,884,'2006-02-15 10:05:03'),(121,885,'2006-02-15 10:05:03'),(121,966,'2006-02-15 10:05:03'),(122,22,'2006-02-15 10:05:03'),(122,29,'2006-02-15 10:05:03'),(122,76,'2006-02-15 10:05:03'),(122,83,'2006-02-15 10:05:03'),(122,157,'2006-02-15 10:05:03'),(122,158,'2006-02-15 10:05:03'),(122,166,'2006-02-15 10:05:03'),(122,227,'2006-02-15 10:05:03'),(122,238,'2006-02-15 10:05:03'),(122,300,'2006-02-15 10:05:03'),(122,307,'2006-02-15 10:05:03'),(122,363,'2006-02-15 10:05:03'),(122,470,'2006-02-15 10:05:03'),(122,489,'2006-02-15 10:05:03'),(122,491,'2006-02-15 10:05:03'),(122,542,'2006-02-15 10:05:03'),(122,620,'2006-02-15 10:05:03'),(122,649,'2006-02-15 10:05:03'),(122,654,'2006-02-15 10:05:03'),(122,673,'2006-02-15 10:05:03'),(122,718,'2006-02-15 10:05:03'),(122,795,'2006-02-15 10:05:03'),(122,957,'2006-02-15 10:05:03'),(122,961,'2006-02-15 10:05:03'),(122,998,'2006-02-15 10:05:03'),(123,3,'2006-02-15 10:05:03'),(123,43,'2006-02-15 10:05:03'),(123,67,'2006-02-15 10:05:03'),(123,105,'2006-02-15 10:05:03'),(123,148,'2006-02-15 10:05:03'),(123,151,'2006-02-15 10:05:03'),(123,185,'2006-02-15 10:05:03'),(123,223,'2006-02-15 10:05:03'),(123,234,'2006-02-15 10:05:03'),(123,245,'2006-02-15 10:05:03'),(123,246,'2006-02-15 10:05:03'),(123,266,'2006-02-15 10:05:03'),(123,286,'2006-02-15 10:05:03'),(123,429,'2006-02-15 10:05:03'),(123,442,'2006-02-15 10:05:03'),(123,446,'2006-02-15 10:05:03'),(123,479,'2006-02-15 10:05:03'),(123,480,'2006-02-15 10:05:03'),(123,494,'2006-02-15 10:05:03'),(123,503,'2006-02-15 10:05:03'),(123,530,'2006-02-15 10:05:03'),(123,576,'2006-02-15 10:05:03'),(123,577,'2006-02-15 10:05:03'),(123,589,'2006-02-15 10:05:03'),(123,593,'2006-02-15 10:05:03'),(123,725,'2006-02-15 10:05:03'),(123,730,'2006-02-15 10:05:03'),(123,786,'2006-02-15 10:05:03'),(123,860,'2006-02-15 10:05:03'),(123,892,'2006-02-15 10:05:03'),(123,926,'2006-02-15 10:05:03'),(123,988,'2006-02-15 10:05:03'),(124,22,'2006-02-15 10:05:03'),(124,64,'2006-02-15 10:05:03'),(124,106,'2006-02-15 10:05:03'),(124,113,'2006-02-15 10:05:03'),(124,190,'2006-02-15 10:05:03'),(124,246,'2006-02-15 10:05:03'),(124,260,'2006-02-15 10:05:03'),(124,263,'2006-02-15 10:05:03'),(124,289,'2006-02-15 10:05:03'),(124,306,'2006-02-15 10:05:03'),(124,312,'2006-02-15 10:05:03'),(124,322,'2006-02-15 10:05:03'),(124,343,'2006-02-15 10:05:03'),(124,449,'2006-02-15 10:05:03'),(124,468,'2006-02-15 10:05:03'),(124,539,'2006-02-15 10:05:03'),(124,601,'2006-02-15 10:05:03'),(124,726,'2006-02-15 10:05:03'),(124,742,'2006-02-15 10:05:03'),(124,775,'2006-02-15 10:05:03'),(124,785,'2006-02-15 10:05:03'),(124,814,'2006-02-15 10:05:03'),(124,858,'2006-02-15 10:05:03'),(124,882,'2006-02-15 10:05:03'),(124,987,'2006-02-15 10:05:03'),(124,997,'2006-02-15 10:05:03'),(125,62,'2006-02-15 10:05:03'),(125,98,'2006-02-15 10:05:03'),(125,100,'2006-02-15 10:05:03'),(125,114,'2006-02-15 10:05:03'),(125,175,'2006-02-15 10:05:03'),(125,188,'2006-02-15 10:05:03'),(125,204,'2006-02-15 10:05:03'),(125,238,'2006-02-15 10:05:03'),(125,250,'2006-02-15 10:05:03'),(125,324,'2006-02-15 10:05:03'),(125,338,'2006-02-15 10:05:03'),(125,361,'2006-02-15 10:05:03'),(125,367,'2006-02-15 10:05:03'),(125,395,'2006-02-15 10:05:03'),(125,414,'2006-02-15 10:05:03'),(125,428,'2006-02-15 10:05:03'),(125,429,'2006-02-15 10:05:03'),(125,450,'2006-02-15 10:05:03'),(125,497,'2006-02-15 10:05:03'),(125,557,'2006-02-15 10:05:03'),(125,568,'2006-02-15 10:05:03'),(125,584,'2006-02-15 10:05:03'),(125,602,'2006-02-15 10:05:03'),(125,623,'2006-02-15 10:05:03'),(125,664,'2006-02-15 10:05:03'),(125,683,'2006-02-15 10:05:03'),(125,710,'2006-02-15 10:05:03'),(125,877,'2006-02-15 10:05:03'),(125,908,'2006-02-15 10:05:03'),(125,949,'2006-02-15 10:05:03'),(125,965,'2006-02-15 10:05:03'),(126,21,'2006-02-15 10:05:03'),(126,34,'2006-02-15 10:05:03'),(126,43,'2006-02-15 10:05:03'),(126,58,'2006-02-15 10:05:03'),(126,85,'2006-02-15 10:05:03'),(126,96,'2006-02-15 10:05:03'),(126,193,'2006-02-15 10:05:03'),(126,194,'2006-02-15 10:05:03'),(126,199,'2006-02-15 10:05:03'),(126,256,'2006-02-15 10:05:03'),(126,263,'2006-02-15 10:05:03'),(126,288,'2006-02-15 10:05:03'),(126,317,'2006-02-15 10:05:03'),(126,347,'2006-02-15 10:05:03'),(126,369,'2006-02-15 10:05:03'),(126,370,'2006-02-15 10:05:03'),(126,419,'2006-02-15 10:05:03'),(126,468,'2006-02-15 10:05:03'),(126,469,'2006-02-15 10:05:03'),(126,545,'2006-02-15 10:05:03'),(126,685,'2006-02-15 10:05:03'),(126,836,'2006-02-15 10:05:03'),(126,860,'2006-02-15 10:05:03'),(127,36,'2006-02-15 10:05:03'),(127,47,'2006-02-15 10:05:03'),(127,48,'2006-02-15 10:05:03'),(127,79,'2006-02-15 10:05:03'),(127,119,'2006-02-15 10:05:03'),(127,141,'2006-02-15 10:05:03'),(127,157,'2006-02-15 10:05:03'),(127,202,'2006-02-15 10:05:03'),(127,286,'2006-02-15 10:05:03'),(127,333,'2006-02-15 10:05:03'),(127,354,'2006-02-15 10:05:03'),(127,366,'2006-02-15 10:05:03'),(127,382,'2006-02-15 10:05:03'),(127,388,'2006-02-15 10:05:03'),(127,411,'2006-02-15 10:05:03'),(127,459,'2006-02-15 10:05:03'),(127,553,'2006-02-15 10:05:03'),(127,573,'2006-02-15 10:05:03'),(127,613,'2006-02-15 10:05:03'),(127,617,'2006-02-15 10:05:03'),(127,641,'2006-02-15 10:05:03'),(127,710,'2006-02-15 10:05:03'),(127,727,'2006-02-15 10:05:03'),(127,749,'2006-02-15 10:05:03'),(127,763,'2006-02-15 10:05:03'),(127,771,'2006-02-15 10:05:03'),(127,791,'2006-02-15 10:05:03'),(127,819,'2006-02-15 10:05:03'),(127,839,'2006-02-15 10:05:03'),(127,846,'2006-02-15 10:05:03'),(127,911,'2006-02-15 10:05:03'),(127,953,'2006-02-15 10:05:03'),(127,970,'2006-02-15 10:05:03'),(128,26,'2006-02-15 10:05:03'),(128,82,'2006-02-15 10:05:03'),(128,119,'2006-02-15 10:05:03'),(128,168,'2006-02-15 10:05:03'),(128,212,'2006-02-15 10:05:03'),(128,238,'2006-02-15 10:05:03'),(128,299,'2006-02-15 10:05:03'),(128,312,'2006-02-15 10:05:03'),(128,326,'2006-02-15 10:05:03'),(128,336,'2006-02-15 10:05:03'),(128,345,'2006-02-15 10:05:03'),(128,407,'2006-02-15 10:05:03'),(128,462,'2006-02-15 10:05:03'),(128,485,'2006-02-15 10:05:03'),(128,516,'2006-02-15 10:05:03'),(128,564,'2006-02-15 10:05:03'),(128,614,'2006-02-15 10:05:03'),(128,650,'2006-02-15 10:05:03'),(128,665,'2006-02-15 10:05:03'),(128,671,'2006-02-15 10:05:03'),(128,693,'2006-02-15 10:05:03'),(128,696,'2006-02-15 10:05:03'),(128,759,'2006-02-15 10:05:03'),(128,774,'2006-02-15 10:05:03'),(128,814,'2006-02-15 10:05:03'),(128,899,'2006-02-15 10:05:03'),(128,912,'2006-02-15 10:05:03'),(128,944,'2006-02-15 10:05:03'),(128,949,'2006-02-15 10:05:03'),(128,965,'2006-02-15 10:05:03'),(129,56,'2006-02-15 10:05:03'),(129,89,'2006-02-15 10:05:03'),(129,101,'2006-02-15 10:05:03'),(129,166,'2006-02-15 10:05:03'),(129,202,'2006-02-15 10:05:03'),(129,230,'2006-02-15 10:05:03'),(129,247,'2006-02-15 10:05:03'),(129,249,'2006-02-15 10:05:03'),(129,348,'2006-02-15 10:05:03'),(129,367,'2006-02-15 10:05:03'),(129,391,'2006-02-15 10:05:03'),(129,418,'2006-02-15 10:05:03'),(129,431,'2006-02-15 10:05:03'),(129,452,'2006-02-15 10:05:03'),(129,471,'2006-02-15 10:05:03'),(129,520,'2006-02-15 10:05:03'),(129,597,'2006-02-15 10:05:03'),(129,602,'2006-02-15 10:05:03'),(129,640,'2006-02-15 10:05:03'),(129,669,'2006-02-15 10:05:03'),(129,684,'2006-02-15 10:05:03'),(129,705,'2006-02-15 10:05:03'),(129,805,'2006-02-15 10:05:03'),(129,826,'2006-02-15 10:05:03'),(129,834,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Granting Global USAGE Privilege to 'sally'@'%' in MySQL\nDESCRIPTION: This SQL statement grants the `USAGE` privilege to the user 'sally'@'%' on all databases and tables (`*.*`). The `USAGE` privilege allows the user to connect to the MySQL server but does not grant any specific database or table-level permissions by itself. Requires the user 'sally'@'%' to exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-57.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Insert Lower Boundary Checksum\nDESCRIPTION: Calculates and stores count of records below the lower boundary of a chunk. Uses FORCE INDEX for primary key and orders results by column 'i'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `issue_519`.`t` FORCE INDEX(`PRIMARY`) WHERE ((`i` < ?)) ORDER BY `i` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Creating Address Table in Sakila Database\nDESCRIPTION: Creates the address table in the Sakila database with foreign key relationship to the city table. Uses InnoDB engine and includes columns for address details, phone, and last update timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL auto_increment,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) default NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) default NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8;\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Displaying Index Summary Header in Percona Toolkit\nDESCRIPTION: This code snippet shows the header for an index summary report, likely generated by a Percona Toolkit command. It includes a separator line and a title for the summary section.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/key-types-k.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plaintext\nCODE:\n```\n# ########################################################################\n# Summary of indexes                                                      \n# ########################################################################\n```\n\n----------------------------------------\n\nTITLE: Measuring Query Performance on Table 'one' Using SQL\nDESCRIPTION: A set of SQL commands is used to extract performance data for the `one` table, recording essential metrics such as response time and query size. Dependencies include the presence of the table `one`. Outputs are specifically formatted for Percona Toolkit use, measuring query efficiency and resource utilization.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow049.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'one'\\G\nSHOW CREATE TABLE `one`\\G\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT one FROM one WHERE id=?\\G\n```\n\n----------------------------------------\n\nTITLE: Time Series Performance Metrics Data\nDESCRIPTION: Raw data containing performance measurements over time with fields for ID, timestamp, multiple numeric metrics, duration values, and reference IDs. The data appears to be storing system or application monitoring metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_11\n\nLANGUAGE: csv\nCODE:\n```\n8436,1236698400,4,0.189,300,301,7256314,1236699917\n```\n\n----------------------------------------\n\nTITLE: Describing waits_by_host_by_latency View Structure in MySQL\nDESCRIPTION: Shows the structure of the waits_by_host_by_latency view, which lists wait events by host. It includes fields for host, event, total occurrences, and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_110\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc waits_by_host_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event         | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Creating the 'rental' Table in SQL\nDESCRIPTION: This SQL snippet defines the `rental` table using the InnoDB engine to track movie rentals. It includes an auto-incrementing `rental_id` (primary key), `rental_date`, `inventory_id`, `customer_id`, `return_date`, and `staff_id`. A unique key constraint ensures that a specific inventory item cannot be rented by the same customer at the exact same time. Foreign keys link `inventory_id`, `customer_id`, and `staff_id` to their respective tables. Indexes are created on these foreign key columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Plugins Table in MySQL\nDESCRIPTION: This SQL snippet defines the 'plugin' table for managing plugins. Each plugin has a name and a specified dynamic library file, integrating additional functionalities into MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger for Rental Table in MySQL\nDESCRIPTION: This SQL script creates a trigger 'rental_date' for the 'rental' table to automatically set the rental date to the current timestamp when inserting a new record.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE */ /*!50017 DEFINER=`msandbox`@`%` */ /*!50003 TRIGGER `rental_date` BEFORE INSERT ON `rental` FOR EACH ROW SET NEW.rental_date = NOW() */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Querying numeric values from foo table in MySQL\nDESCRIPTION: A series of simple SELECT queries that retrieve numeric values from the 'foo' table. Each query is accompanied by performance metrics including Query_time (0.000899), Lock_time (0), and information about rows sent and examined (both 0). The queries are executed by the same user from IP 1.2.3.4 across sequential thread IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1485 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1486 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1487 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1488 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1489 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1490 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1491 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1492 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1493 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1494 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1495 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1496 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1497 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1498 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1499 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1500 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1501 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1502 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1503 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1504 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1505 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1506 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1507 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1508 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1509 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1510 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1511 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1512 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1513 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1514 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1515 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1516 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1517 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1518 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1519 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1520 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1521 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1522 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1523 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1524 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1525 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1526 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1527 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1528 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1529 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1530 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1531 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1532 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1533 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Database Selection and Character Set Configuration\nDESCRIPTION: SQL commands for switching to a specific database and setting UTF-8 character encoding. Shows repeated pattern of database connection setup.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow011.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse db;\nSET NAMES utf8;\n```\n\n----------------------------------------\n\nTITLE: Using pt-galera-log-explainer to Find Node Information by IP (Shell)\nDESCRIPTION: This shell command demonstrates how to use the `pt-galera-log-explainer` tool to identify the node name and associated UUIDs for a specific IP address (172.17.0.2) by searching through Galera log files located in the `tests/logs/upgrade/` directory. The `whois` subcommand is used for this lookup, and the `--no-color` flag disables colored output. It requires the `pt-galera-log-explainer` tool (part of Percona Toolkit) and access to the specified log files. The expected output is a tree structure showing the IP, its corresponding nodename, and the UUIDs associated with that node over time found within the logs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ pt-galera-log-explainer whois 172.17.0.2 --no-color  tests/logs/upgrade/*\n```\n\nLANGUAGE: text\nCODE:\n```\nip:\n└── 172.17.0.2\n    ├── nodename:\n    │   └── node1 (2023-03-12 19:35:07.644683 +0000 UTC)\n    │\n    └── uuid:\n        ├── 1d3ea8f5 (2023-03-12 07:24:13.789261 +0000 UTC)\n        ├── 54ab931e (2023-03-12 07:43:08.563339 +0000 UTC)\n        ├── fecde235 (2023-03-12 08:46:48.963504 +0000 UTC)\n        ├── a07872e1 (2023-03-12 08:49:41.206124 +0000 UTC)\n        ├── 60da0bf9-aa9c (2023-03-12 12:29:48.873397 +0000 UTC)\n        ├── 35b62086-902c (2023-03-12 13:04:23.979636 +0000 UTC)\n        ├── ca2c2a5f-a82a (2023-03-12 19:35:05.878879 +0000 UTC)\n        └── eefb9c8a-b69a (2023-03-12 19:43:17.133756 +0000 UTC)\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet\nDESCRIPTION: TCP packet containing MySQL server's response to the insert query, sent from localhost:3306 back to localhost:38381. Shows acknowledgment data in hex format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump007.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 003f 2ac9 4000 4006 11e6 7f00 0001\n7f00 0001 0cea 95ed be35 a35c be95 2c21\n8018 0200 fe33 0000 0101 080a 00bd a97d\n00bd a97c 0700 0001 0001 0002 0001 00\n```\n\n----------------------------------------\n\nTITLE: Granting Specific Privileges to User sally in MySQL\nDESCRIPTION: These SQL commands are used to create and modify the user 'sally', granting them multiple privileges like INSERT and SELECT on specific tables and columns, along with general database usage rights. This aids in setting up user permissions succinctly.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-revoke-80.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\nGRANT INSERT (`city`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\nGRANT SELECT (`city_id`) ON `sakila`.`city` TO `sally`@`%`;\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Querying Single User by ID - SQL\nDESCRIPTION: Fetches all columns for a user with a given id, limited to a single result row. Utilized for retrieving full user profile or state by primary key. Requires SELECT access and a valid id value. Suitable for applications expecting a unique user per id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users WHERE id=2484131 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Database Column Information\nDESCRIPTION: SQL query to extract information about all columns in database tables, including data types, character sets, and other attributes from the INFORMATION_SCHEMA.COLUMNS table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_json_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, COLUMN_DEFAULT, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, CHARACTER_SET_NAME, COLLATION_NAME, COLUMN_TYPE, COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql')\n```\n\n----------------------------------------\n\nTITLE: Checking Rows After Upper Chunk Boundary in MySQL\nDESCRIPTION: This query counts rows that fall after the upper boundary of a chunk and stores the count in the checksums table. It helps verify complete data coverage by ensuring no gaps between chunks during the checksum process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx003.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `issue_519`.`t` FORCE INDEX(`y`) WHERE ((`y` > ?)) ORDER BY `y` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.columns_priv` Table in SQL\nDESCRIPTION: Defines the `columns_priv` table in the `mysql` database. This table stores column-level privileges granted to users, specifying which users have 'Select', 'Insert', 'Update', or 'References' permissions on specific columns within tables. The primary key combines Host, User, Db, Table_name, and Column_name for unique identification.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`User`,`Db`,`Table_name`,`Column_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Queries in MySQL\nDESCRIPTION: A series of SELECT queries retrieving a single incrementing number from a table named 'foo'. Each query is executed with consistent timing metrics and no InnoDB statistics available. These queries are likely used for testing or benchmarking database performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1191 FROM foo;\nSELECT 1192 FROM foo;\nSELECT 1193 FROM foo;\n# ... (additional similar queries)\nSELECT 1238 FROM foo;\nSELECT 1239 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: REPLACE Statement\nDESCRIPTION: REPLACE operation setting column foo to 'bar' in table t\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow001.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nreplace into t set foo='bar';\n```\n\n----------------------------------------\n\nTITLE: Defining Stored Procedures Table in MySQL\nDESCRIPTION: This snippet describes the 'proc' table for saving stored procedure and function metadata. It captures essential execution properties and access privileges associated with MySQL procedures.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Table with Numeric Selection\nDESCRIPTION: This SQL snippet represents a series of SELECT queries executed on the 'foo' table. Each query selects a different numeric value, ranging from 498 to 547. The queries are executed by the same user from the same IP address, with consistent performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 498 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 499 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 500 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.plugin` Table in SQL\nDESCRIPTION: Defines the `plugin` table in the `mysql` database. This table lists installed server plugins, storing the plugin name and the name of the shared library file (`dl`) containing the plugin code.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL x$schema_flattened_keys Structure\nDESCRIPTION: Shows the table structure for x$schema_flattened_keys, a helper view that presents flattened index information used by the schema_redundant_indexes view to identify unnecessary indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.x$schema_flattened_keys;\n+----------------+-------------+------+-----+---------+-------+\n| Field          | Type        | Null | Key | Default | Extra |\n+----------------+-------------+------+-----+---------+-------+\n| table_schema   | varchar(64) | NO   |     |         |       |\n| table_name     | varchar(64) | NO   |     |         |       |\n| index_name     | varchar(64) | NO   |     |         |       |\n| non_unique     | bigint(1)   | YES  |     | NULL    |       |\n| subpart_exists | bigint(1)   | YES  |     | NULL    |       |\n| index_columns  | text        | YES  |     | NULL    |       |\n+----------------+-------------+------+-----+---------+-------+\n6 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using Plugins with pt-table-checksum via Command Line (Bash)\nDESCRIPTION: Introduces the `--plugin` option for `pt-table-checksum`, similar to its functionality in `pt-online-schema-change`. This allows extending the tool's behavior by specifying a custom Perl module to load.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Example usage with a plugin file\npt-table-checksum --plugin /path/to/MyPlugin.pm [other_options]\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Sample Database Tables\nDESCRIPTION: Defines the structure for several tables in the Sakila sample database, including actor, address, category, city, country, customer, and film. These tables represent entities in a fictional DVD rental business and demonstrate various MySQL features.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8\n\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8\n\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8\n\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8\n\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Locking Table Using SQL LOCK Statement - SQL\nDESCRIPTION: This snippet represents a SQL command that locks the tables 'foo' and 'bar', as recorded by query profiling output. It is used to prevent concurrent access to these tables during critical operations, ensuring data integrity. Required privileges include LOCK TABLES, and the statement expects the table names as input; outputs are implicit through database locking (no returned records). Limitations include possible deadlocks or blocked queries if used excessively.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow037_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nLOCK foo bar\n```\n\n----------------------------------------\n\nTITLE: Creating help_relation Table in MySQL\nDESCRIPTION: SQL statement for creating the help_relation table which maps relationships between help topics and keywords. It uses a composite primary key to establish the many-to-many relationship.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation';\n```\n\n----------------------------------------\n\nTITLE: Describing schema_tables_with_full_table_scans View in MySQL\nDESCRIPTION: Shows the structure of the schema_tables_with_full_table_scans view, which identifies tables being accessed by full table scans and provides statistics on rows scanned and latency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_64\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_tables_with_full_table_scans;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| object_schema     | varchar(64)         | YES  |     | NULL    |       |\n| object_name       | varchar(64)         | YES  |     | NULL    |       |\n| rows_full_scanned | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency           | text                | YES  |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: MySQL IO Global Wait by Bytes Example Data\nDESCRIPTION: Sample output showing IO statistics by different event types, including read/write counts, total bytes transferred, and latency metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from io_global_by_wait_by_bytes;\n+--------------------+--------+---------------+-------------+-------------+-------------+------------+------------+-----------+-------------+---------------+-------------+-----------------+\n| event_name         | total  | total_latency | min_latency | avg_latency | max_latency | count_read | total_read | avg_read  | count_write | total_written | avg_written | total_requested |\n+--------------------+--------+---------------+-------------+-------------+-------------+------------+------------+-----------+-------------+---------------+-------------+-----------------+\n| myisam/dfile       | 163681 | 983.13 ms     | 379.08 ns   | 6.01 us     | 22.06 ms    |      68737 | 127.31 MiB | 1.90 KiB  |     1012221 | 121.52 MiB    | 126 bytes   | 248.83 MiB      |\n| myisam/kfile       |   1775 | 375.13 ms     | 1.02 us     | 211.34 µs   | 35.15 ms    |      54066 | 9.97 MiB   | 193 bytes |      428257 | 12.40 MiB     | 30 bytes    | 22.37 MiB       |\n...\n```\n\n----------------------------------------\n\nTITLE: Database Schema Overview\nDESCRIPTION: A text-based representation of the database schema showing tables, views, stored procedures, triggers, and other database objects across multiple databases (bluh, meh, mysql, percona, performance_schema).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Schema #####################################################\n\n  Database           Tables Views SPs Trigs Funcs   FKs Partn\n  bluh                    1                                  \n  meh                     1                                  \n  mysql                  22                                  \n  percona                 1                                  \n  performance_schema                                         \n\n  Database           MyISAM InnoDB\n  bluh                    1       \n  meh                            1\n  mysql                  22       \n  percona                        1\n  performance_schema              \n\n  Database           BTREE\n  bluh                    \n  meh                     \n  mysql                 31\n  percona                2\n  performance_schema      \n\n                       i   t   b   b   c   t   s   e   l   d   t   s   b   v   f\n                       n   e   i   l   h   i   e   n   o   a   i   m   i   a   l\n                       t   x   n   o   a   m   t   u   n   t   n   a   g   r   o\n                           t   a   b   r   e       m   g   e   l   i   c   a\n                               r           s           b   t   i   l   n   h   t\n                               y           t           l   i   n   i   t   a    \n                                           a           o   m   t   n       r    \n                                           m           b   e       t            \n                                           p                                    \n  Database           === === === === === === === === === === === === === === ===\n  bluh                 1   1   1   1                                            \n  meh                                  1                                        \n  mysql               19   2       4  63   8   6  77   5   4   3   3   8   1    \n  percona              3   2           4   1                               1   1\n  performance_schema                                                            \n```\n\n----------------------------------------\n\nTITLE: Parsing MySQL Slow Query Log Analysis Results in JSON\nDESCRIPTION: This JSON structure contains detailed analysis of MySQL slow query logs, including query fingerprints, performance metrics, and table information. It provides insights into query execution times, lock times, rows examined, and other crucial performance indicators.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002-anon_no_vertical.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"classes\": [\n    {\n      \"attribute\": \"fingerprint\",\n      \"checksum\": \"45FE45AEC222350466825DDC008FFA89\",\n      \"distillate\": \"UPDATE db?.tuningdetail_?_? db?.gonzo\",\n      \"fingerprint\": \"update d?tuningdetail_?_? n inner join d?gonzo a using(gonzo) set n.column? = a.column?, n.word? = a.word?\",\n      \"histograms\": {\n        \"Query_time\": [0,0,0,0,0,1,0,0]\n      },\n      \"metrics\": {\n        \"Filesort\": {\"yes\": \"0\"},\n        \"Filesort_on_disk\": {\"yes\": \"0\"},\n        \"Full_join\": {\"yes\": \"0\"},\n        \"Full_scan\": {\"yes\": \"1\"},\n        \"Lock_time\": {\n          \"avg\": \"0.000091\",\n          \"max\": \"0.000091\",\n          \"median\": \"0.000091\",\n          \"min\": \"0.000091\",\n          \"pct\": \"0.125000\",\n          \"pct_95\": \"0.000091\",\n          \"stddev\": \"0.000000\",\n          \"sum\": \"0.000091\"\n        },\n        \"Merge_passes\": {\n          \"avg\": \"0\",\n          \"max\": \"0\",\n          \"median\": \"0\",\n          \"min\": \"0\",\n          \"pct\": \"0\",\n          \"pct_95\": \"0\",\n          \"stddev\": \"0\",\n          \"sum\": \"0\"\n        },\n        \"QC_Hit\": {\"yes\": \"0\"},\n        \"Query_length\": {\n          \"avg\": \"129\",\n          \"max\": \"129\",\n          \"median\": \"129\",\n          \"min\": \"129\",\n          \"pct\": \"0\",\n          \"pct_95\": \"129\",\n          \"stddev\": \"0\",\n          \"sum\": \"129\"\n        },\n        \"Query_time\": {\n          \"avg\": \"0.726052\",\n          \"max\": \"0.726052\",\n          \"median\": \"0.726052\",\n          \"min\": \"0.726052\",\n          \"pct\": \"0.125000\",\n          \"pct_95\": \"0.726052\",\n          \"stddev\": \"0.000000\",\n          \"sum\": \"0.726052\"\n        },\n        \"Rows_examined\": {\n          \"avg\": \"62951\",\n          \"max\": \"62951\",\n          \"median\": \"62951\",\n          \"min\": \"62951\",\n          \"pct\": \"0\",\n          \"pct_95\": \"62951\",\n          \"stddev\": \"0\",\n          \"sum\": \"62951\"\n        },\n        \"Rows_sent\": {\n          \"avg\": \"0\",\n          \"max\": \"0\",\n          \"median\": \"0\",\n          \"min\": \"0\",\n          \"pct\": \"0\",\n          \"pct_95\": \"0\",\n          \"stddev\": \"0\",\n          \"sum\": \"0\"\n        },\n        \"Tmp_table\": {\"yes\": \"0\"},\n        \"Tmp_table_on_disk\": {\"yes\": \"0\"},\n        \"db\": {\"value\": \"db1\"},\n        \"host\": {\"value\": \"\"},\n        \"user\": {\"value\": \"[SQL_SLAVE]\"}\n      },\n      \"query_count\": 1,\n      \"tables\": [\n        {\n          \"create\": \"SHOW CREATE TABLE `db2`.`tuningdetail_21_265507`\",\n          \"status\": \"SHOW TABLE STATUS FROM `db2` LIKE 'tuningdetail_21_265507'\"\n        },\n        {\n          \"create\": \"SHOW CREATE TABLE `db1`.`gonzo`\",\n          \"status\": \"SHOW TABLE STATUS FROM `db1` LIKE 'gonzo'\"\n        }\n      ],\n      \"ts_max\": \"2007-12-18 11:48:27\",\n      \"ts_min\": \"2007-12-18 11:48:27\"\n    }\n  ],\n  \"global\": {\n    \"files\": [\n      {\n        \"name\": \"slow002.txt\",\n        \"size\": 3841\n      }\n    ],\n    \"metrics\": {\n      \"Filesort\": {\"cnt\": \"0\"},\n      \"Filesort_on_disk\": {\"cnt\": \"0\"},\n      \"Full_join\": {\"cnt\": \"0\"},\n      \"Full_scan\": {\"cnt\": \"1\"},\n      \"InnoDB_IO_r_bytes\": {\n        \"avg\": \"0\",\n        \"max\": \"0\",\n        \"median\": \"0\",\n        \"min\": \"0\",\n        \"pct_95\": \"0\",\n        \"stddev\": \"0\",\n        \"sum\": \"0\"\n      },\n      \"InnoDB_IO_r_ops\": {\n        \"avg\": \"0\",\n        \"max\": \"0\",\n        \"median\": \"0\",\n        \"min\": \"0\",\n        \"pct_95\": \"0\",\n        \"stddev\": \"0\",\n        \"sum\": \"0\"\n      },\n      \"InnoDB_IO_r_wait\": {\n        \"avg\": \"0.000000\",\n        \"max\": \"0.000000\",\n        \"median\": \"0.000000\",\n        \"min\": \"0.000000\",\n        \"pct_95\": \"0.000000\",\n        \"stddev\": \"0.000000\",\n        \"sum\": \"0.000000\"\n      },\n      \"InnoDB_pages_distinct\": {\n        \"avg\": \"17\",\n        \"max\": \"24\",\n        \"median\": \"17\",\n        \"min\": \"11\",\n        \"pct_95\": \"23\",\n        \"stddev\": \"3\",\n        \"sum\": \"107\"\n      },\n      \"InnoDB_queue_wait\": {\n        \"avg\": \"0.000000\",\n        \"max\": \"0.000000\",\n        \"median\": \"0.000000\",\n        \"min\": \"0.000000\",\n        \"pct_95\": \"0.000000\",\n        \"stddev\": \"0.000000\",\n        \"sum\": \"0.000000\"\n      },\n      \"InnoDB_rec_lock_wait\": {\n        \"avg\": \"0.000000\",\n        \"max\": \"0.000000\",\n        \"median\": \"0.000000\",\n        \"min\": \"0.000000\",\n        \"pct_95\": \"0.000000\",\n        \"stddev\": \"0.000000\",\n        \"sum\": \"0.000000\"\n      },\n      \"Lock_time\": {\n        \"avg\": \"0.000038\",\n        \"max\": \"0.000091\",\n        \"median\": \"0.000026\",\n        \"min\": \"0.000000\",\n        \"pct_95\": \"0.000089\",\n        \"stddev\": \"0.000028\",\n        \"sum\": \"0.000304\"\n      },\n      \"Merge_passes\": {\n        \"avg\": \"0\",\n        \"max\": \"0\",\n        \"median\": \"0\",\n        \"min\": \"0\",\n        \"pct_95\": \"0\",\n        \"stddev\": \"0\",\n        \"sum\": \"0\"\n      },\n      \"QC_Hit\": {\"cnt\": \"0\"},\n      \"Query_length\": {\n        \"avg\": \"62\",\n        \"max\": \"129\",\n        \"median\": \"62\",\n        \"min\": \"5\",\n        \"pct_95\": \"124\",\n        \"stddev\": \"34\",\n        \"sum\": \"502\"\n      },\n      \"Query_time\": {\n        \"avg\": \"0.095260\",\n        \"max\": \"0.726052\",\n        \"median\": \"0.000516\",\n        \"min\": \"0.000012\",\n        \"pct_95\": \"0.705093\",\n        \"stddev\": \"0.231765\",\n        \"sum\": \"0.762080\"\n      },\n      \"Rows_examined\": {\n        \"avg\": \"7868\",\n        \"max\": \"62951\",\n        \"median\": \"0\",\n        \"min\": \"0\",\n        \"pct_95\": \"61003\",\n        \"stddev\": \"20174\",\n        \"sum\": \"62951\"\n      },\n      \"Rows_sent\": {\n        \"avg\": \"0\",\n        \"max\": \"0\",\n        \"median\": \"0\",\n        \"min\": \"0\",\n        \"pct_95\": \"0\",\n        \"stddev\": \"0\",\n        \"sum\": \"0\"\n      },\n      \"Tmp_table\": {\"cnt\": \"0\"},\n      \"Tmp_table_on_disk\": {\"cnt\": \"0\"}\n    },\n    \"query_count\": 8,\n    \"unique_query_count\": 7\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with Implicit ASC Orders\nDESCRIPTION: Retrieves all products ordered by name and shape in ascending order using implicit ascending order (no ASC keyword).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow048.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `products` ORDER BY name, shape;\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Database Query Session\nDESCRIPTION: Demonstrates a sequence of SQL commands including session initialization, database selection, and a simple SELECT query from a table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006-session-3.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- START SESSION 30\n\nuse foo\n\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: SELECT All Columns with LIMIT\nDESCRIPTION: Query selecting all columns from table 't2' with a LIMIT clause of 1 row. Includes an inline comment and execution statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/rawlog001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n/* Hello, world! */ SELECT * FROM t2 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Switching MySQL Database Context\nDESCRIPTION: These SQL statements switch the active database context in MySQL. The `USE` command changes the default database for subsequent commands first to `mysql`, then to `percona_test`, and finally to `sakila`, which is the target database for the view definitions that follow.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nUSE `mysql`;\n```\n\nLANGUAGE: sql\nCODE:\n```\nUSE `percona_test`;\n```\n\nLANGUAGE: sql\nCODE:\n```\nUSE `sakila`;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in SQL\nDESCRIPTION: Defines the payment table schema tracking customer payments for rentals. Contains foreign keys to customer, staff and rental tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Character Set Configuration\nDESCRIPTION: SET NAMES command to configure UTF-8 character encoding, executed once with 899μs execution time and no lock time. Accessed on database 'db' by user 'meow' from host 1.2.3.8.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow019_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET NAMES utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Delete Trigger in MySQL\nDESCRIPTION: Trigger that removes corresponding film_text entries when a film is deleted. Maintains referential integrity between film and film_text tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\nCREATE TRIGGER `del_film` AFTER DELETE ON `film` FOR EACH ROW BEGIN\n    DELETE FROM film_text WHERE film_id = old.film_id;\n  END;;\n```\n\n----------------------------------------\n\nTITLE: Describing memory_global_by_current_bytes Views in MySQL (SQL)\nDESCRIPTION: Shows the table structure for the `memory_global_by_current_bytes` view and its underlying `x$memory_global_by_current_bytes` table using the DESC command in MySQL. These views show current global memory usage broken down by allocation type (event_name).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_37\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_global_by_current_bytes;\n+-------------------+--------------+------+-----+---------+-------+\n| Field             | Type         | Null | Key | Default | Extra |\n+-------------------+--------------+------+-----+---------+-------+\n| event_name        | varchar(128) | NO   |     | NULL    |       |\n| current_count     | bigint(20)   | NO   |     | NULL    |       |\n| current_alloc     | text         | YES  |     | NULL    |       |\n| current_avg_alloc | text         | YES  |     | NULL    |       |\n| high_count        | bigint(20)   | NO   |     | NULL    |       |\n| high_alloc        | text         | YES  |     | NULL    |       |\n| high_avg_alloc    | text         | YES  |     | NULL    |       |\n+-------------------+--------------+------+-----+---------+-------+\n7 rows in set (0.08 sec)\n\nmysql> desc x$memory_global_by_current_bytes;\n+-------------------+---------------+------+-----+---------+-------+\n| Field             | Type          | Null | Key | Default | Extra |\n+-------------------+---------------+------+-----+---------+-------+\n| event_name        | varchar(128)  | NO   |     | NULL    |       |\n| current_count     | bigint(20)    | NO   |     | NULL    |       |\n| current_alloc     | bigint(20)    | NO   |     | NULL    |       |\n| current_avg_alloc | decimal(23,4) | NO   |     | 0.0000  |       |\n| high_count        | bigint(20)    | NO   |     | NULL    |       |\n| high_alloc        | bigint(20)    | NO   |     | NULL    |       |\n| high_avg_alloc    | decimal(23,4) | NO   |     | 0.0000  |       |\n+-------------------+---------------+------+-----+---------+-------+\n7 rows in set (0.16 sec)\n```\n\n----------------------------------------\n\nTITLE: Administrator Quit Command with MySQL - SQL\nDESCRIPTION: This command issues an administrative quit, closing the current session/connection in the database server. There are no dependencies beyond an established session; this action has no effect on persisted data and does not return a result set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump-1402776_report.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nadministrator command: Quit\\G\n```\n\n----------------------------------------\n\nTITLE: Describing Global Total Memory Usage Tables - MySQL SQL\nDESCRIPTION: This structure description details the 'memory_global_total' and 'x$memory_global_total' tables, which sum total allocated memory for the MySQL server instance. Only one row is produced, making it suitable for quick overall usage checks. Differences between sys and raw types include text-encoded versus decimal values; these require no input parameters but depend on a running performance schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_41\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_global_total;\n+-----------------+------+------+-----+---------+-------+\n| Field           | Type | Null | Key | Default | Extra |\n+-----------------+------+------+-----+---------+-------+\n| total_allocated | text | YES  |     | NULL    |       |\n+-----------------+------+------+-----+---------+-------+\n1 row in set (0.07 sec)\n\nmysql> desc x$memory_global_total;\n+-----------------+---------------+------+-----+---------+-------+\n| Field           | Type          | Null | Key | Default | Extra |\n+-----------------+---------------+------+-----+---------+-------+\n| total_allocated | decimal(41,0) | YES  |     | NULL    |       |\n+-----------------+---------------+------+-----+---------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Showing MySQL Table Status\nDESCRIPTION: This command displays the status information for the 'foo' table in the 'db1' database. It's used to gather metadata about the table structure and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-event-1h.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `db1` LIKE 'foo'\n```\n\n----------------------------------------\n\nTITLE: Creating Triggers for Customer and Film Tables\nDESCRIPTION: Defines triggers for the 'customer' and 'film' tables in the Sakila database. These triggers handle automatic date setting and text updates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n/*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n/*!50003 SET @saved_col_connection = @@collation_connection */ ;\n/*!50003 SET character_set_client  = latin1 */ ;\n/*!50003 SET character_set_results = latin1 */ ;\n/*!50003 SET collation_connection  = latin1_swedish_ci */ ;\n/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n/*!50003 SET sql_mode              = '' */ ;\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER customer_create_date BEFORE INSERT ON customer\n\tFOR EACH ROW SET NEW.create_date = NOW() */;;\nDELIMITER ;\n/*!50003 SET sql_mode              = @saved_sql_mode */ ;\n/*!50003 SET character_set_client  = @saved_cs_client */ ;\n/*!50003 SET character_set_results = @saved_cs_results */ ;\n/*!50003 SET collation_connection  = @saved_col_connection */ ;\n/*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n/*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n/*!50003 SET @saved_col_connection = @@collation_connection */ ;\n/*!50003 SET character_set_client  = latin1 */ ;\n/*!50003 SET character_set_results = latin1 */ ;\n/*!50003 SET collation_connection  = latin1_swedish_ci */ ;\n/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER' */ ;\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `ins_film` AFTER INSERT ON `film` FOR EACH ROW BEGIN\n    INSERT INTO film_text (film_id, title, description)\n        VALUES (new.film_id, new.title, new.description);\n  END */;;\nDELIMITER ;\n/*!50003 SET sql_mode              = @saved_sql_mode */ ;\n/*!50003 SET character_set_client  = @saved_cs_client */ ;\n/*!50003 SET character_set_results = @saved_cs_results */ ;\n/*!50003 SET collation_connection  = @saved_col_connection */ ;\n/*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n/*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n/*!50003 SET @saved_col_connection = @@collation_connection */ ;\n/*!50003 SET character_set_client  = latin1 */ ;\n/*!50003 SET character_set_results = latin1 */ ;\n/*!50003 SET collation_connection  = latin1_swedish_ci */ ;\n/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER' */ ;\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN\n    IF (old.title != new.title) or (old.description != new.description)\n    THEN\n        UPDATE film_text\n            SET title=new.title,\n                description=new.description,\n                film_id=new.film_id\n        WHERE film_id=old.film_id;\n    END IF;\n  END */;;\nDELIMITER ;\n/*!50003 SET sql_mode              = @saved_sql_mode */ ;\n```\n\n----------------------------------------\n\nTITLE: Capturing TCP Packet Hex Dump (Server to Client - Response)\nDESCRIPTION: This snippet contains a hexadecimal dump of a 68-byte TCP packet sent from server 10.55.200.15 (port 3306) back to client 10.55.200.31 (port 64987) at 2009-06-09 16:53:17.112346. The hex dump represents the payload, likely a response in the MySQL protocol sequence or other server-side communication being analyzed, captured in standard tcpdump format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump016.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-06-09 16:53:17.112346 IP 10.55.200.15.3306 > 10.55.200.31.64987: tcp 68\n\t0x0000:  4508 0078 17b6 4000 4006 7e25 0a37 c80f\n\t0x0010:  0a37 c81f 0cea fddb 5f8d 5d8c 97df aafe\n\t0x0020:  8018 ffff 34c1 0000 0101 080a 4133 5db0\n\t0x0030:  1de9 6b04 0700 0002 0000 0002 0000 0000\n\t0x0040:  0000 0000 0000 0000 0000 0000 0000 0000\n\t0x0050:  0000 0000 0000 0000 0000 0000 0000 0000\n\t0x0060:  0000 0000 0000 0000 0000 0000 0000 0000\n\t0x0070:  0000 0000 0000 0000 0000 0000\n```\n\n----------------------------------------\n\nTITLE: Example SELECT Query from 'bar' Table in SQL\nDESCRIPTION: This SQL snippet shows an example query belonging to a specific class analyzed. It selects the 'foo' column from the 'bar' table where the 'id' column equals 2. This specific query instance is used to represent the class fingerprinted as 'select foo from bar where id=?'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report02.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT foo FROM bar WHERE id=2\n```\n\n----------------------------------------\n\nTITLE: Database Performance Monitoring Records - SQL Values\nDESCRIPTION: Time series data containing performance metrics including timestamps, system IDs, and various measurements. Each record contains an ID, timestamp, metric type, value, and additional metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\n700,2,201.07,300,299,7256314,1236699918),(8451,1236698700,3,59.982,300,299,7256314,1236699918),(8451,1236698700,4,0.06,300,299,7256314,1236699918),(8451,1236698700,5,0.0,300,299,7256314,1236699918),(8451,1236698700,6,22.0,300,299,7256314,1236699918),(8451,1236698700,7,0.0,300,299,7256314,1236699918),(8451,1236698700,8,0.0,300,299,7256314,1236699918)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL ndb_binlog_index Table in SQL\nDESCRIPTION: This SQL statement defines the `ndb_binlog_index` table, typically within the `mysql` database, used specifically in NDB Cluster (MySQL Cluster) setups. It maps binary log file positions (`Position`, `File`) to NDB epochs (`epoch`) and tracks the number of inserts, updates, deletes, and schema operations per epoch for replication purposes. The table uses the MyISAM engine and latin1 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: InnoDB Buffer Stats Table Structure\nDESCRIPTION: Shows the structure of innodb_buffer_stats_by_table and x$innodb_buffer_stats_by_table views, which provide information about buffer pool usage per table including allocated space, data size, pages, and cached rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc innodb_buffer_stats_by_table;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| object_name   | text          | YES  |     | NULL    |       |\n| allocated     | text          | YES  |     | NULL    |       |\n| data          | text          | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n8 rows in set (0.09 sec)\n\nmysql> desc x$innodb_buffer_stats_by_table;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| object_name   | text          | YES  |     | NULL    |       |\n| allocated     | decimal(43,0) | YES  |     | NULL    |       |\n| data          | decimal(43,0) | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | NO   |     | 0       |       |\n+---------------+---------------+------+-----+---------+-------+\n8 rows in set (0.18 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring Percona Server Sandbox Instance - INI Format\nDESCRIPTION: This INI snippet sets up both client and server parameters for launching a Percona Server for MySQL instance in a sandboxed environment. It specifies unique ports, socket files, paths for data directories, InnoDB memory allocation, log file locations, and server identification. Required dependencies include a locally installed Percona Server and a sandbox directory structure. Inputs are configuration parameters such as 'user', 'password', 'datadir', and memory settings; outputs are used directly by the MySQL client and server binaries. Limitation: this configuration is appropriate for local testing and not production use.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc004.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Configuration File #########################################\n              Config File | /tmp/12345/my.sandbox.cnf\n\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n# Memory management library ##################################\n# The End ####################################################\n```\n\n----------------------------------------\n\nTITLE: Query Calculation and Execution in SQL\nDESCRIPTION: This SQL query calculates the difference in minutes between the current timestamp and a specified timestamp, then induces a sleep function for performance monitoring or throttling. It requires a MySQL database connection to execute. The inputs are current system time and a fixed past timestamp, outputting the calculated time difference and sleep action.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/004/select_function.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP('2012-09-16 10:16:36')) / 60, SLEEP(1)\n```\n\n----------------------------------------\n\nTITLE: Joining Users to Character Table for User Lists by Account ID - SQL\nDESCRIPTION: Fetches user id and name fields for users joined to a 't' table on 'characterid', filtered by accountid and sorted by user name. Useful for complex user-directory listings involving user-character relationships. Assumes existence of 't' with the fields as indicated; requires SELECT privilege and potentially a suitable index for performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT users.id,users.name FROM users, t WHERE t.accountid='5992' AND t.characterid=users.id ORDER BY users.name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT users.id,users.name FROM users, t WHERE t.accountid='14247' AND t.characterid=users.id ORDER BY users.name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT users.id,users.name FROM users, t WHERE t.accountid='3745' AND t.characterid=users.id ORDER BY users.name\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT users.id,users.name FROM users, t WHERE t.accountid='252989' AND t.characterid=users.id ORDER BY users.name\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL View film_list\nDESCRIPTION: Creates or replaces the MySQL view `film_list` in the `sakila` database. This view provides a list of films with their ID (FID), title, description, category name, rental price, length, rating, and a comma-separated list of actors who appeared in the film. It uses `GROUP_CONCAT` to aggregate actor names and sets `SQL SECURITY DEFINER`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `film_list`*/;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(`actor`.`first_name`,_utf8' ',`actor`.`last_name`) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */;\n```\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: TCP Network Traffic Log Entries\nDESCRIPTION: These lines represent captured TCP network traffic logs. Each entry shows a timestamp, the protocol (IP), source IP address and port, destination IP address and port (often 3306, the default MySQL port), and details about the TCP segment (e.g., size). This format is typical of tools like tcpdump and is used for network monitoring and analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/simple-tcpdump/simpletcp001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2011-04-04 18:57:43.804195 IP 10.10.18.253.58297 > 10.10.18.40.3306: tcp 132\n2011-04-04 18:57:43.804465 IP 10.10.18.40.3306 > 10.10.18.253.58297: tcp 2920\n2011-04-04 18:57:43.804473 IP 10.10.18.40.3306 > 10.10.18.253.58297: tcp 76\n2011-04-04 18:57:43.805481 IP 10.10.18.253.40135 > 10.10.18.40.3306: tcp 819\n2011-04-04 18:57:43.805801 IP 10.10.18.253.52726 > 10.10.18.40.3306: tcp 183\n2011-04-04 18:57:43.806003 IP 10.10.18.40.3306 > 10.10.18.253.52726: tcp 66\n2011-04-04 18:57:43.806026 IP 10.10.18.40.3306 > 10.10.18.253.40135: tcp 11680\n2011-04-04 18:57:43.806032 IP 10.10.18.40.3306 > 10.10.18.253.40135: tcp 340\n```\n\n----------------------------------------\n\nTITLE: UPDATE Query with Single Column Value\nDESCRIPTION: SQL UPDATE statement for the foo.bar table, setting the biz column to a numeric value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow002-limit-3.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nupdate d?va?oncept?upload set va?oncept?id = ? where va?oncept?upload='6994465'\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from upper_oob.t Table in SQL\nDESCRIPTION: These SQL statements delete individual records from the 'upper_oob.t' table where the 'id' matches specific values. Each statement is limited to deleting one record at a time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/upper-oob-print.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM `upper_oob`.`t` WHERE `id`='100' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='101' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='102' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='103' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='104' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='105' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='106' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='107' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='108' LIMIT 1;\nDELETE FROM `upper_oob`.`t` WHERE `id`='109' LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Data Insertion\nDESCRIPTION: Inserts data into the vendor11gonzo table in db3 database with makef and bizzle columns\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact')\n```\n\n----------------------------------------\n\nTITLE: Select Query Reporting in SQL\nDESCRIPTION: This SQL snippet retrieves a static string value labeled 'greeting'. It serves as a placeholder or test query and is meant to demonstrate a basic SELECT operation within the context of a larger query analysis report. There are no dependencies, and the query simply outputs the phrase 'hello world' in a structured format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump012.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect \"hello world\" as greeting\\G\n```\n\n----------------------------------------\n\nTITLE: Formatting Byte Values in MySQL\nDESCRIPTION: Illustrates the format_bytes function that converts raw byte values to human-readable sizes with appropriate units (PiB, TiB, MiB, etc.). This improves readability when working with large storage values from Performance Schema or other monitoring outputs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_108\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.format_bytes(2348723492723746) AS size;\n+----------+\n| size     |\n+----------+\n| 2.09 PiB |\n+----------+\n1 row in set (0.00 sec)\n\nmysql> SELECT sys.format_bytes(2348723492723) AS size;\n+----------+\n| size     |\n+----------+\n| 2.14 TiB |\n+----------+\n1 row in set (0.00 sec)\n\nmysql> SELECT sys.format_bytes(23487234) AS size;\n+-----------+\n| size      |\n+-----------+\n| 22.40 MiB |\n+-----------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Counting Database First-Level Names\nDESCRIPTION: EXPLAIN query that counts distinct first-level database names by extracting the substring before the first underscore in schema names from INFORMATION_SCHEMA.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT COUNT(*) FROM ( SELECT DISTINCT SUBSTRING_INDEX(SCHEMA_NAME, '_', 1) DB_first_level FROM INFORMATION_SCHEMA.SCHEMATA WHERE TRUE ) t\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.func` Table in SQL\nDESCRIPTION: Defines the `func` table in the `mysql` database. This table registers user-defined functions (UDFs), storing their name, return type indicator (`ret`), shared library file (`dl`), and type (function or aggregate).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `ret` tinyint NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Querying Numeric Values from MySQL Database\nDESCRIPTION: A series of simple SQL SELECT statements querying numeric values from a table named 'foo'. Each query includes performance metadata such as query time (0.000899s), lock time, rows examined, and thread information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1240 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1241 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1242 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1243 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1244 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1245 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1246 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1247 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1248 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1249 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1250 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1251 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1252 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1253 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1254 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1255 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1256 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1257 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1258 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1259 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1260 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1261 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1262 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1263 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1264 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1265 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1266 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1267 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1268 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1269 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1270 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1271 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1272 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1273 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1274 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1275 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1276 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1277 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1278 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1279 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1280 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1281 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1282 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1283 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1284 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1285 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1286 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1287 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1288 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Count Query with Single Column Condition\nDESCRIPTION: Queries counting records matching a specific value in column a or b\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect count(a) from t2 where a='BBBBBBBB';\n```\n\n----------------------------------------\n\nTITLE: Delete Trigger for Online Schema Change\nDESCRIPTION: Trigger that deletes corresponding rows from the new table when rows are deleted from the original table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/capsync003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TRIGGER mk_osc_del AFTER DELETE ON `osc`.`t` FOR EACH ROW DELETE IGNORE FROM `osc`.`__new_t` WHERE `osc`.`__new_t`.`id` = OLD.`id`\n```\n\n----------------------------------------\n\nTITLE: Timestamp Marker Line (Text)\nDESCRIPTION: This line format acts as a separator between blocks of disk statistics. It starts with 'TS' followed by a space and a high-precision Unix timestamp (seconds since the epoch), indicating when the subsequent block of statistics was recorded.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nTS 1283888701.358144000\n```\n\n----------------------------------------\n\nTITLE: Creating procs_priv Table in MySQL\nDESCRIPTION: SQL statement for creating the procs_priv table which stores procedure and function privileges. It includes columns for host, database, user, routine information, grantor, privilege specification, and timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges';\n```\n\n----------------------------------------\n\nTITLE: Calculating Checksums for sakila.film_actor Table in MySQL\nDESCRIPTION: This SQL query calculates checksums for chunks of data in the 'film_actor' table of the 'sakila' database. It uses the FNV_64 hash function and handles composite primary key (actor_id, film_id).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(FNV_64(`actor_id`, `film_id`, UNIX_TIMESTAMP(`last_update`)) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `sakila`.`film_actor` FORCE INDEX(`PRIMARY`) WHERE ((`actor_id` > ?) OR (`actor_id` = ? AND `film_id` >= ?)) AND ((`actor_id` < ?) OR (`actor_id` = ? AND `film_id` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Selecting All Rows with Limit in SQL - SQL\nDESCRIPTION: This snippet retrieves all columns from table 't2', limiting the result to a single row. The preceding comment serves as an inline note or placeholder for developers. The snippet assumes the existence of the 't2' table in the target database. Results consist of the first available row, with additional rows ignored due to the LIMIT 1 clause.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/rawlogs/rawlog002.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/* Hello, world! */ SELECT * FROM t2 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: MySQL Foreign Key Error Example\nDESCRIPTION: Illustrates a foreign key constraint error where the referenced table doesn't have an appropriate index or the data types don't match. The error occurred in the child table referencing a parent table's parent_id column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCONSTRAINT child_ibfk_1 FOREIGN KEY (parent_id) REFERENCES parent (parent_id)\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries with Performance Metrics\nDESCRIPTION: A series of SELECT queries targeting the foo table, each selecting a sequential number from 101 to 150. Each query has consistent performance metrics with query time of 0.000899 seconds, no lock time, and no rows sent or examined. All queries are executed by the same user from IP 1.2.3.4.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 101 FROM foo;\n...through...\nSELECT 150 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE Operation in MySQL\nDESCRIPTION: This snippet shows a DELETE operation being executed on the 'foo' table in the 'db' database, removing a record with id 42.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog004.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nuse db/*!*/;\nSET TIMESTAMP=1256194800/*!*/;\nDELETE FROM `foo` WHERE `id` = 42\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Creating Sales By Film Category View Table\nDESCRIPTION: Creates a temporary table structure for the sales_by_film_category view that tracks sales totals by film category.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sales_by_film_category` (\n  `category` varchar(25),\n  `total_sales` decimal(27,2)\n) ENGINE=MyISAM\n```\n\n----------------------------------------\n\nTITLE: Granting Database Permissions SQL\nDESCRIPTION: These SQL snippets demonstrate how to grant specific permissions to the user 'sally' on different elements of a database. The dependencies include a database environment where the 'sakila' and 'test' databases exist. Required parameters include the database table or field names, and expected modifications in 'sally's' access rights are shown via the grant statements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Grants for 'sally'@'%'\nGRANT INSERT (city), SELECT, SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Creating global_grants Table - MySQL SQL\nDESCRIPTION: Describes the `global_grants` table supporting extended privilege assignments in MySQL. Each record links a user/host combination to a named privilege, also tracking 'WITH GRANT OPTION'. Rows are created/updated by grant management DDL statements and used for privilege expansion checks. Relies on standard character sets and collations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `global_grants` (\n  `USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `PRIV` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `WITH_GRANT_OPTION` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`USER`,`HOST`,`PRIV`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Extended global grants'\n\n```\n\n----------------------------------------\n\nTITLE: Establishing Help Keywords Table in MySQL\nDESCRIPTION: This snippet creates a 'help_keyword' table used to store searchable keywords. It's vital for indexing and quick retrieval of help content within the MySQL database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Show Create Table Query\nDESCRIPTION: Query to display the CREATE TABLE statement that created the specified tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30m.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `db1`.`foo'\n```\n\n----------------------------------------\n\nTITLE: Failed Insert Operation with Foreign Key Violation\nDESCRIPTION: SQL insert statement that triggers a foreign key constraint violation. Attempts to insert value 1 into column 'a' of table t2, where column 'a' is a foreign key referencing table t1.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is002-fke.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t2(a) values(1)\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL statements_with_full_table_scans View Example\nDESCRIPTION: Demonstrates how to query the statements_with_full_table_scans view, showing a sample result with details about a specific SQL statement that performed a full table scan, including execution count, latency, and row statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_full_table_scans limit 1\\G\n*************************** 1. row ***************************\n                   query: SELECT * FROM `schema_tables_w ... ex_usage` . `COUNT_READ` DESC\n                      db: sys\n              exec_count: 1\n           total_latency: 88.20 ms\n     no_index_used_count: 1\nno_good_index_used_count: 0\n       no_index_used_pct: 100\n               rows_sent: 0\n           rows_examined: 1501\n           rows_sent_avg: 0\n       rows_examined_avg: 1501\n              first_seen: 2014-03-07 13:58:20\n               last_seen: 2014-03-07 13:58:20\n                  digest: 64baecd5c1e1e1651a6b92e55442a288\n```\n\n----------------------------------------\n\nTITLE: Memory Usage by Host Structure\nDESCRIPTION: Table structure for memory_by_host_by_current_bytes and x$memory_by_host_by_current_bytes views tracking memory allocation by host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\ndesc memory_by_host_by_current_bytes;\ndesc x$memory_by_host_by_current_bytes;\n```\n\n----------------------------------------\n\nTITLE: Full Table Scan Query with Performance Metrics\nDESCRIPTION: Simple SELECT query performing a full table scan on 'foo' table. Average query time is 0.726052 seconds, examining 62,951 rows with minimal lock time (0.000091s). Query cache is not used and no temporary tables or file sorts are performed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Checksum SELECT Queries\nDESCRIPTION: Complex SELECT queries using CRC32 checksums to verify data integrity during replication, including both FOR UPDATE and LOCK IN SHARE MODE variants\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_560_output_2.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*issue_560.buddy_list:1/1*/ 0 AS chunk_num, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `player_id`, `buddy_id`)) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `issue_560`.`buddy_list` FORCE INDEX (`PRIMARY`) WHERE (((`player_id` < '350') OR (`player_id` = '350' AND `buddy_id` <= '2454'))) AND ((((`player_id` > '301') OR (`player_id` = '301' AND `buddy_id` >= '887')) AND ((`player_id` < '350') OR (`player_id` = '350' AND `buddy_id` <= '2454')))) FOR UPDATE\n```\n\n----------------------------------------\n\nTITLE: Creating Film_Text Table in MySQL\nDESCRIPTION: This SQL script creates the 'film_text' table to store film titles and descriptions for full-text searching. It uses the MyISAM engine for better full-text search performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY  (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL EXPLAIN Output for a Single Row\nDESCRIPTION: This text block shows the output generated by a tool (likely from Percona Toolkit) analyzing a MySQL EXPLAIN statement for the first row of a query plan. It details how the query accesses table 't' using the PRIMARY key with a 'const' access type, indicating optimal performance for this part of the query, likely involving a lookup based on a constant value against the primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report031.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# *************************** 1. row ***************************\n#            id: 1\n#   select_type: SIMPLE\n#         table: t\n#    partitions: NULL\n#          type: const\n# possible_keys: PRIMARY\n#           key: PRIMARY\n#       key_len: 4\n#           ref: const\n#          rows: 1\n#         Extra: NULL\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data for Index Merge Testing in MySQL\nDESCRIPTION: Inserts test records to demonstrate specific behaviors with index merge queries. Records are strategically inserted to show different combinations of matching keys.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t1 (key1, key2, key3, key4, filler1) values (100, 100, -1, -1, 'key1-key2');\ninsert into t1 (key1, key2, key3, key4, filler1) values (-1, -1, 100, 100, 'key4-key3');\n```\n\n----------------------------------------\n\nTITLE: Creating Language Reference Table\nDESCRIPTION: Defines a simple lookup table for film languages with auto-incrementing ID and timestamp tracking.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Generating an Execution Plan for a Query Using EXPLAIN PARTITIONS - SQL\nDESCRIPTION: The EXPLAIN /*!50100 PARTITIONS*/ modifier is used to analyze how MySQL will execute the SELECT statement on the 'products' table, particularly regarding partition usage (only available in MySQL 5.1.0+). This provides insight into the query plan and can help identify optimization opportunities. There are no additional dependencies beyond the correct MySQL version and relevant privileges. Input: a SQL query; Output: parsed execution plan including partition information if applicable.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow048.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\\nSELECT * FROM `products` ORDER BY name, shape asc\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Category Table in Sakila Database\nDESCRIPTION: Creates the category table in the Sakila database to store film categories. Uses InnoDB engine with auto-incrementing primary key and includes columns for category name and last update timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL auto_increment,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL\nDESCRIPTION: Creates store location table with manager assignment and address relationship using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint unsigned NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Context and Querying bar_tbl\nDESCRIPTION: A query sequence that first sets the database context to 'bar' and then selects data from 'bar_tbl'. This pattern appears multiple times in the log for thread_id 20.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nuse bar;\nSELECT col FROM bar_tbl;\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Settings - INI - INI\nDESCRIPTION: This snippet contains the contents of a MySQL configuration file (my.sandbox.cnf) segmented into [client] and [mysqld] sections. It details connection parameters (user, password, port, socket), server settings (paths, memory and engine parameters, log locations) for a Percona Server instance, and is intended to be used as an input for server startup. Key parameters include port, socket, data directory, InnoDB and MyISAM memory buffers, and replication settings. The file must be placed in the correct path and referenced when starting the Percona Server process. No application-level logic is implemented; values must be updated to match deployment requirements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp005.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n```\n\n----------------------------------------\n\nTITLE: SQL Query Selecting Records for 'emily'\nDESCRIPTION: SQL query to select all columns from table d.t where name equals 'emily'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump033.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from d.t where name=\"emily\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Replication Group Configuration Tables\nDESCRIPTION: Defines schemas for managing replication group configuration including member actions and version tracking.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `replication_group_configuration_version` (\n  `name` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'The configuration name.',\n  `version` bigint unsigned NOT NULL COMMENT 'The version of the configuration name.',\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='The group configuration version.'\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'foo' in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'foo' table in the 'db1' database. It includes table status and create table information for context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-2009-07-08.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `db1` LIKE 'foo'\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `db1`.`foo`\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM foo\\G\n```\n\n----------------------------------------\n\nTITLE: Displaying Active TCP Connections with netstat or ss Command Output\nDESCRIPTION: This snippet shows the output of a network monitoring command (likely netstat or ss with -p flag) displaying active TCP connections on a server. The output shows various connections, primarily to MySQL (port 3306), SSH (port 22), and LDAP (port 389) services. The server appears to be hosting a MySQL database with multiple client connections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(No info could be read for \"-p\": geteuid()=1046 but you should be root.)\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:5666            0.0.0.0:*               LISTEN      -                   \ntcp        0      0 10.8.0.75:3306          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:44865         TIME_WAIT   -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.77:58758         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:47708         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:51071         10.8.0.12:389           ESTABLISHED -                   \ntcp        0      0 10.8.0.75:52300         10.8.0.12:389           ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:39260         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:37570         192.168.5.77:3306       ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.14:36304         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:39230         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:39293         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:39527         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:56551         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:44850         TIME_WAIT   -                   \ntcp        0      0 10.8.0.75:51074         10.8.0.12:389           ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:60170         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:51072         10.8.0.12:389           ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:39331         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:60757         10.8.0.12:389           ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:48498         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:55517         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          192.168.5.77:59328      ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:60164         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:60165         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:60166         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:60167         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:48549         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.14:39633         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:39229         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:47700         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:56552         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:51073         10.8.0.12:389           TIME_WAIT   -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:45926         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:48328         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:22            10.8.0.65:51612         ESTABLISHED -                   \ntcp        0      0 10.8.0.75:3306          10.8.0.76:45925         ESTABLISHED -                   \n```\n\n----------------------------------------\n\nTITLE: Displaying Block Device Metrics - Plain Text\nDESCRIPTION: This code snippet presents a tabular text output of block device performance data, likely generated by a Linux system monitoring tool such as one included in the Percona Toolkit. The table reports on various statistical metrics including MB/sec read and written, concurrent read/write operations, response times, device busy percentage, and ongoing processes for each device present. No dependencies beyond the monitoring tool itself are required and the input is real-time system data sampled at a moment in time. The output is intended for human inspection or further automated parsing for system diagnostics and performance tuning.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_int_diskstats-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device     rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n{279} ram0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram2           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram3           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram4           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram5           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram6           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram7           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram8           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram9           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram10          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram11          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram12          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram13          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram14          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} ram15          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sda            0.0    0.0     2.1     0.0    0.0     0.1   0%      0\n{279} sda1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sda2           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sda3           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sda4           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sda5           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sda6           0.0    0.0     2.1     0.0    0.0     0.1   0%      0\n{279} sdb            0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sdb1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sdc           11.7    0.9     1.3     4.0    0.2     0.6  97%      0\n{279} sdc1          11.7    0.9     1.3     4.0    0.2     0.6  97%      0\n{279} dm-0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} dm-1           0.0    0.0     4.0     0.0    0.0     0.4   0%      0\n{279} dm-2           0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n{279} dm-3           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} dm-4           0.0    0.0     3.9     0.0    0.0     0.1   0%      0\n{279} dm-5           0.0    0.0     0.0     0.0    0.0     0.3   0%      0\n{279} dm-6           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sr0            0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sdd            0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} sr1            0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} md0            0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} emcpowera      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} emcpowera1     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{279} dm-7          11.7    1.0     1.3     4.0    0.2     0.6  97%      0\n```\n\n----------------------------------------\n\nTITLE: Executing MIN/MAX Query in MySQL with Performance Metrics\nDESCRIPTION: MySQL log entry with a SELECT query that retrieves minimum and maximum ID values from a table. The log includes detailed execution statistics showing query time and lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow008.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 6  Schema: db2\n# Query_time: 0.018799  Lock_time: 0.009453  Rows_sent: 0  Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT MIN(id),MAX(id) FROM tbl;\n```\n\n----------------------------------------\n\nTITLE: Updating Table with JOIN Condition in MySQL\nDESCRIPTION: This SQL query updates table t1 by joining it with table t2 using a common 'id' column. It sets the 'foo' column in t1 to 'bar' where the corresponding 'foo' in t2 is not null.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE t1 AS a JOIN t2 AS b USING (id) SET a.foo=\"bar\" WHERE b.foo IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into MySQL Table with Parameter Bindings - SQL\nDESCRIPTION: This snippet shows a parameterized SQL statement for inserting values into a table named 't' with two columns: 'id' and 'username'. The placeholders in the statement 'values(?+)' indicate the values will be supplied later, possibly using prepared statements or query binding. This is a common operation for batch inserts or for reducing the risk of SQL injection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/003/insert_truncate_warning_results.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t (id, username) values(?+)\n```\n\n----------------------------------------\n\nTITLE: Comparing SQL performance report differences using diff\nDESCRIPTION: This diff shows changes in a SQL performance report, including modifications to overall statistics, Apdex scores, and individual query metrics. It compares two versions of the report, likely before and after a database optimization.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/diff002.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n2c2\n< # Overall: 8 total, 7 unique, 0 QPS, 0x concurrency ______________________\n---\n> # Overall: 8 total, 1 unique, 0 QPS, 0x concurrency ______________________\n24c24\n< # Scores: Apdex = 1.00 [1.0]*, V/M = 0.00\n---\n> # Scores: Apdex = NS [0.0]*, V/M = 0.00\n68,69c68\n< #    1 0x66825DDC008FFA89  0.7261 95.3%     1 0.7261 1.00  0.00 UPDATE db?.tuningdetail_?_? db?.gonzo\n< # MISC 0xMISC              0.0360  4.7%     7 0.0051   NS   0.0 <6 ITEMS>\n---\n> #    1 0x66825DDC008FFA89  0.7261 95.3%     1 0.7261   NS  0.00 UPDATE db?.tuningdetail_?_? db?.gonzo\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Session Configuration Parameters in Binary Log\nDESCRIPTION: Initial configuration of MySQL session parameters including max_insert_delayed_threads and COMPLETION_TYPE. These settings ensure proper behavior of subsequent commands in the binary log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n```\n\n----------------------------------------\n\nTITLE: Selecting MySQL Version Comment - SQL\nDESCRIPTION: Executes a SQL SELECT query to retrieve the MySQL server version comment using the @@version_comment system variable, limited to a single result. The EXPLAIN statement prefixed by /*!50100 PARTITIONS*/ enables partition information for MySQL 5.1.0+ when available. There are no dependencies besides a running MySQL-compatible database, and input parameters are implicit (system context). The query is used primarily for rapid diagnostics or identifying the database server flavor, with the output being a text string describing the server version or vendor.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump017_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nselect @@version_comment limit 1\\G\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Record by ID in SQL\nDESCRIPTION: This SQL query selects the 'id' column from the 'tbl' table in the 'db1' database where the 'id' equals 1. It's a targeted query that examines only one row.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-inheritance.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nuse db1;\nSELECT id FROM tbl WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Selecting from Table 't' in SQL\nDESCRIPTION: This snippet performs a basic SELECT operation on a table named 't'. It retrieves data from the table 't'. The surrounding text provides a unique identifier `Query_id: 0x9F683436FE68935AF28708D8F2920792.1` for this specific query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT t\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into vendor11gonzo Table\nDESCRIPTION: SQL insert statement adding data to vendor11gonzo table in db3 database with makef and bizzle columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact')\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status in SQL (Query 1 Context)\nDESCRIPTION: Retrieves status information for table 't' within the database 'd'. This command is typically used for administrative purposes or by tools like Percona Toolkit to gather context about the tables involved in a query. The \\G terminator suggests execution in a command-line client for vertical output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `d` LIKE 't'\\G\n```\n\n----------------------------------------\n\nTITLE: Displaying PostgreSQL Configuration Parameters (ini)\nDESCRIPTION: This configuration block lists various settings for a PostgreSQL 9.6.17 server. It includes parameters related to connections (`max_connections`), memory (`shared_buffers`, `maintenance_work_mem`), WAL (Write-Ahead Logging) (`fsync`, `full_page_writes`), query planning (`enable_seqscan`, `random_page_cost`), logging (`log_destination`, `log_statement`), replication (`max_wal_senders`), security (`ssl`), locale (`lc_collate`), and file locations (`config_file`, `hba_file`). This output is typically generated using the `SHOW ALL;` SQL command or reflects the active contents of the `postgresql.conf` and related configuration files.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n    commit_siblings                               : 5\n    config_file                                   : /var/lib/postgresql/data/postgresql.conf\n    constraint_exclusion                          : partition\n    cpu_index_tuple_cost                          : 0.005\n    cpu_operator_cost                             : 0.0025\n    cpu_tuple_cost                                : 0.01\n    cursor_tuple_fraction                         : 0.1\n    data_checksums                                : off\n    data_directory                                : /var/lib/postgresql/data\n    data_sync_retry                               : off\n    DateStyle                                     : ISO, MDY\n    db_user_namespace                             : off\n    deadlock_timeout                              : 1000\n    debug_assertions                              : off\n    debug_pretty_print                            : on\n    debug_print_parse                             : off\n    debug_print_plan                              : off\n    debug_print_rewritten                         : off\n    default_statistics_target                     : 100\n    default_tablespace                            : \n    default_text_search_config                    : pg_catalog.english\n    default_transaction_deferrable                : off\n    default_transaction_isolation                 : read committed\n    default_transaction_read_only                 : off\n    default_with_oids                             : off\n    dynamic_library_path                          : $libdir\n    dynamic_shared_memory_type                    : posix\n    effective_cache_size                          : 524288\n    effective_io_concurrency                      : 1\n    enable_bitmapscan                             : on\n    enable_hashagg                                : on\n    enable_hashjoin                               : on\n    enable_indexonlyscan                          : on\n    enable_indexscan                              : on\n    enable_material                               : on\n    enable_mergejoin                              : on\n    enable_nestloop                               : on\n    enable_seqscan                                : on\n    enable_sort                                   : on\n    enable_tidscan                                : on\n    escape_string_warning                         : on\n    event_source                                  : PostgreSQL\n    exit_on_error                                 : off\n    external_pid_file                             : \n    extra_float_digits                            : 2\n    force_parallel_mode                           : off\n    from_collapse_limit                           : 8\n    fsync                                         : on\n    full_page_writes                              : on\n    geqo                                          : on\n    geqo_effort                                   : 5\n    geqo_generations                              : 0\n    geqo_pool_size                                : 0\n    geqo_seed                                     : 0\n    geqo_selection_bias                           : 2\n    geqo_threshold                                : 12\n    gin_fuzzy_search_limit                        : 0\n    gin_pending_list_limit                        : 4096\n    hba_file                                      : /var/lib/postgresql/data/pg_hba.conf\n    hot_standby                                   : off\n    hot_standby_feedback                          : off\n    huge_pages                                    : try\n    ident_file                                    : /var/lib/postgresql/data/pg_ident.conf\n    idle_in_transaction_session_timeout           : 0\n    ignore_checksum_failure                       : off\n    ignore_system_indexes                         : off\n    integer_datetimes                             : on\n    IntervalStyle                                 : postgres\n    join_collapse_limit                           : 8\n    krb_caseins_users                             : off\n    krb_server_keyfile                            : FILE:/etc/postgresql-common/krb5.keytab\n    lc_collate                                    : en_US.utf8\n    lc_ctype                                      : en_US.utf8\n    lc_messages                                   : en_US.utf8\n    lc_monetary                                   : en_US.utf8\n    lc_numeric                                    : en_US.utf8\n    lc_time                                       : en_US.utf8\n    listen_addresses                              : *\n    lo_compat_privileges                          : off\n    local_preload_libraries                       : \n    lock_timeout                                  : 0\n    log_autovacuum_min_duration                   : -1\n    log_checkpoints                               : off\n    log_connections                               : off\n    log_destination                               : stderr\n    log_directory                                 : pg_log\n    log_disconnections                            : off\n    log_duration                                  : off\n    log_error_verbosity                           : default\n    log_executor_stats                            : off\n    log_file_mode                                 : 0600\n    log_filename                                  : postgresql-%Y-%m-%d_%H%M%S.log\n    log_hostname                                  : off\n    log_line_prefix                               : \n    log_lock_waits                                : off\n    log_min_duration_statement                    : -1\n    log_min_error_statement                       : error\n    log_min_messages                              : warning\n    log_parser_stats                              : off\n    log_planner_stats                             : off\n    log_replication_commands                      : off\n    log_rotation_age                              : 1440\n    log_rotation_size                             : 10240\n    log_statement                                 : none\n    log_statement_stats                           : off\n    log_temp_files                                : -1\n    log_timezone                                  : Etc/UTC\n    log_truncate_on_rotation                      : off\n    logging_collector                             : off\n    maintenance_work_mem                          : 65536\n    max_connections                               : 100\n    max_files_per_process                         : 1000\n    max_function_args                             : 100\n    max_identifier_length                         : 63\n    max_index_keys                                : 32\n    max_locks_per_transaction                     : 64\n    max_parallel_workers_per_gather               : 0\n    max_pred_locks_per_transaction                : 64\n    max_prepared_transactions                     : 0\n    max_replication_slots                         : 0\n    max_stack_depth                               : 2048\n    max_standby_archive_delay                     : 30000\n    max_standby_streaming_delay                   : 30000\n    max_wal_senders                               : 0\n    max_wal_size                                  : 64\n    max_worker_processes                          : 8\n    min_parallel_relation_size                    : 1024\n    min_wal_size                                  : 5\n    old_snapshot_threshold                        : -1\n    operator_precedence_warning                   : off\n    parallel_setup_cost                           : 1000\n    parallel_tuple_cost                           : 0.1\n    password_encryption                           : on\n    port                                          : 5432\n    post_auth_delay                               : 0\n    pre_auth_delay                                : 0\n    quote_all_identifiers                         : off\n    random_page_cost                              : 4\n    replacement_sort_tuples                       : 150000\n    restart_after_crash                           : on\n    row_security                                  : on\n    search_path                                   : \"$user\", public\n    segment_size                                  : 131072\n    seq_page_cost                                 : 1\n    server_encoding                               : UTF8\n    server_version                                : 9.6.17\n    server_version_num                            : 90617\n    session_preload_libraries                     : \n    session_replication_role                      : origin\n    shared_buffers                                : 16384\n    shared_preload_libraries                      : \n    sql_inheritance                               : on\n    ssl                                           : off\n    ssl_ca_file                                   : \n    ssl_cert_file                                 : server.crt\n    ssl_ciphers                                   : HIGH:MEDIUM:+3DES:!aNULL\n    ssl_crl_file                                  : \n    ssl_ecdh_curve                                : prime256v1\n    ssl_key_file                                  : server.key\n    ssl_prefer_server_ciphers                     : on\n    standard_conforming_strings                   : on\n    statement_timeout                             : 0\n    stats_temp_directory                          : pg_stat_tmp\n    superuser_reserved_connections                : 3\n    synchronize_seqscans                          : on\n    synchronous_commit                            : on\n    synchronous_standby_names                     : \n    syslog_facility                               : local0\n    syslog_ident                                  : postgres\n    syslog_sequence_numbers                       : on\n    syslog_split_messages                         : on\n    tcp_keepalives_count                          : 9\n    tcp_keepalives_idle                           : 7200\n```\n\n----------------------------------------\n\nTITLE: Creating Help Keyword Table in MySQL\nDESCRIPTION: Creates a table to manage help keywords, using unique identifiers and names to correlate with help content. It uses the MyISAM storage engine and utf8 character set. This setup ensures efficient searching and categorization of keywords.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords';\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table\nDESCRIPTION: Creates the store table containing store locations with manager and address associations. Includes foreign key constraints linking to staff and address tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Displaying System Hardware Information with dmidecode Output (Plaintext)\nDESCRIPTION: This text represents the output of the 'dmidecode' command (version 2.9), which retrieves detailed hardware information from the system's DMI/SMBIOS tables (version 2.6). It includes details about the BIOS, system manufacturer/model (Supermicro X8DTN), processors (Intel Xeon X5670), cache memory hierarchy, expansion slots (PCI, PCI Express), and other system components. This output is typically used for hardware inventory, diagnostics, and system analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-005.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# dmidecode 2.9\nSMBIOS 2.6 present.\n66 structures occupying 3552 bytes.\nTable at 0x0009C800.\n\nHandle 0x0000, DMI type 0, 24 bytes\nBIOS Information\n\tVendor: American Megatrends Inc.\n\tVersion: 080016 \n\tRelease Date: 03/08/2010\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 4096 kB\n\tCharacteristics:\n\t\tISA is supported\n\t\tPCI is supported\n\t\tPNP is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tESCD support is available\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 KB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tCGA/mono video services are supported (int 10h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tLS-120 boot is supported\n\t\tATAPI Zip drive boot is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\tBIOS Revision: 8.16\n\nHandle 0x0001, DMI type 1, 27 bytes\nSystem Information\n\tManufacturer: Supermicro\n\tProduct Name: X8DTN\n\tVersion: 1234567890\n\tSerial Number: 1234567890\n\tUUID: 00020003-0004-0005-0006-000700080009\n\tWake-up Type: Power Switch\n\tSKU Number: 1234567890\n\tFamily: Server\n\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: Supermicro\n\tProduct Name: X8DTN\n\tVersion: 2.0       \n\tSerial Number: 1234567890\n\tAsset Tag: 1234567890\n\tFeatures:\n\t\tBoard is a hosting board\n\t\tBoard is replaceable\n\tLocation In Chassis: 1234567890\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n\nHandle 0x0003, DMI type 3, 21 bytes\nChassis Information\n\tManufacturer: Supermicro\n\tType: Main Server Chassis\n\tLock: Not Present\n\tVersion: 1234567890\n\tSerial Number: 1234567890.\n\tAsset Tag: To Be Filled By O.E.M.\n\tBoot-up State: Safe\n\tPower Supply State: Safe\n\tThermal State: Safe\n\tSecurity Status: None\n\tOEM Information: 0x00000000\n\tHeight: Unspecified\n\tNumber Of Power Cords: 1\n\tContained Elements: 0\n\nHandle 0x0004, DMI type 4, 42 bytes\nProcessor Information\n\tSocket Designation: CPU 1\n\tType: Central Processor\n\tFamily: Xeon\n\tManufacturer: Intel            \n\tID: C2 06 02 00 FF FB EB BF\n\tSignature: Type 0, Family 6, Model 44, Stepping 2\n\tFlags:\n\t\tFPU (Floating-point unit on-chip)\n\t\tVME (Virtual mode extension)\n\t\tDE (Debugging extension)\n\t\tPSE (Page size extension)\n\t\tTSC (Time stamp counter)\n\t\tMSR (Model specific registers)\n\t\tPAE (Physical address extension)\n\t\tMCE (Machine check exception)\n\t\tCX8 (CMPXCHG8 instruction supported)\n\t\tAPIC (On-chip APIC hardware supported)\n\t\tSEP (Fast system call)\n\t\tMTRR (Memory type range registers)\n\t\tPGE (Page global enable)\n\t\tMCA (Machine check architecture)\n\t\tCMOV (Conditional move instruction supported)\n\t\tPAT (Page attribute table)\n\t\tPSE-36 (36-bit page size extension)\n\t\tCLFSH (CLFLUSH instruction supported)\n\t\tDS (Debug store)\n\t\tACPI (ACPI supported)\n\t\tMMX (MMX technology supported)\n\t\tFXSR (Fast floating-point save and restore)\n\t\tSSE (Streaming SIMD extensions)\n\t\tSSE2 (Streaming SIMD extensions 2)\n\t\tSS (Self-snoop)\n\t\tHTT (Hyper-threading technology)\n\t\tTM (Thermal monitor supported)\n\t\tPBE (Pending break enabled)\n\tVersion: Intel(R) Xeon(R) CPU           X5670  @ 2.93GHz     \n\tVoltage: Unknown\n\tExternal Clock: 133 MHz\n\tMax Speed: 2933 MHz\n\tCurrent Speed: 2933 MHz\n\tStatus: Populated, Enabled\n\tUpgrade: Other\n\tL1 Cache Handle: 0x0005\n\tL2 Cache Handle: 0x0006\n\tL3 Cache Handle: 0x0007\n\tSerial Number: To Be Filled By O.E.M.\n\tAsset Tag: To Be Filled By O.E.M.\n\tPart Number: To Be Filled By O.E.M.\n\tCore Count: 6\n\tCore Enabled: 6\n\tThread Count: 12\n\tCharacteristics:\n\t\t64-bit capable\n\nHandle 0x0005, DMI type 7, 19 bytes\nCache Information\n\tSocket Designation: L1-Cache\n\tConfiguration: Enabled, Not Socketed, Level 1\n\tOperational Mode: Write Through\n\tLocation: Internal\n\tInstalled Size: 384 KB\n\tMaximum Size: 384 KB\n\tSupported SRAM Types:\n\t\tOther\n\tInstalled SRAM Type: Other\n\tSpeed: Unknown\n\tError Correction Type: Parity\n\tSystem Type: Instruction\n\tAssociativity: 4-way Set-associative\n\nHandle 0x0006, DMI type 7, 19 bytes\nCache Information\n\tSocket Designation: L2-Cache\n\tConfiguration: Enabled, Not Socketed, Level 2\n\tOperational Mode: Write Through\n\tLocation: Internal\n\tInstalled Size: 1536 KB\n\tMaximum Size: 1536 KB\n\tSupported SRAM Types:\n\t\tOther\n\tInstalled SRAM Type: Other\n\tSpeed: Unknown\n\tError Correction Type: Single-bit ECC\n\tSystem Type: Unified\n\tAssociativity: 8-way Set-associative\n\nHandle 0x0007, DMI type 7, 19 bytes\nCache Information\n\tSocket Designation: L3-Cache\n\tConfiguration: Enabled, Not Socketed, Level 3\n\tOperational Mode: Write Back\n\tLocation: Internal\n\tInstalled Size: 12288 KB\n\tMaximum Size: 12288 KB\n\tSupported SRAM Types:\n\t\tOther\n\tInstalled SRAM Type: Other\n\tSpeed: Unknown\n\tError Correction Type: Single-bit ECC\n\tSystem Type: Unified\n\tAssociativity: 16-way Set-associative\n\nHandle 0x0008, DMI type 4, 42 bytes\nProcessor Information\n\tSocket Designation: CPU 2\n\tType: Central Processor\n\tFamily: Xeon\n\tManufacturer: Intel            \n\tID: C2 06 02 00 FF FB EB BF\n\tSignature: Type 0, Family 6, Model 44, Stepping 2\n\tFlags:\n\t\tFPU (Floating-point unit on-chip)\n\t\tVME (Virtual mode extension)\n\t\tDE (Debugging extension)\n\t\tPSE (Page size extension)\n\t\tTSC (Time stamp counter)\n\t\tMSR (Model specific registers)\n\t\tPAE (Physical address extension)\n\t\tMCE (Machine check exception)\n\t\tCX8 (CMPXCHG8 instruction supported)\n\t\tAPIC (On-chip APIC hardware supported)\n\t\tSEP (Fast system call)\n\t\tMTRR (Memory type range registers)\n\t\tPGE (Page global enable)\n\t\tMCA (Machine check architecture)\n\t\tCMOV (Conditional move instruction supported)\n\t\tPAT (Page attribute table)\n\t\tPSE-36 (36-bit page size extension)\n\t\tCLFSH (CLFLUSH instruction supported)\n\t\tDS (Debug store)\n\t\tACPI (ACPI supported)\n\t\tMMX (MMX technology supported)\n\t\tFXSR (Fast floating-point save and restore)\n\t\tSSE (Streaming SIMD extensions)\n\t\tSSE2 (Streaming SIMD extensions 2)\n\t\tSS (Self-snoop)\n\t\tHTT (Hyper-threading technology)\n\t\tTM (Thermal monitor supported)\n\t\tPBE (Pending break enabled)\n\tVersion: Intel(R) Xeon(R) CPU           X5670  @ 2.93GHz     \n\tVoltage: Unknown\n\tExternal Clock: 133 MHz\n\tMax Speed: 2933 MHz\n\tCurrent Speed: 2933 MHz\n\tStatus: Populated, Enabled\n\tUpgrade: Other\n\tL1 Cache Handle: 0x0009\n\tL2 Cache Handle: 0x000A\n\tL3 Cache Handle: 0x000B\n\tSerial Number: To Be Filled By O.E.M.\n\tAsset Tag: To Be Filled By O.E.M.\n\tPart Number: To Be Filled By O.E.M.\n\tCore Count: 6\n\tCore Enabled: 6\n\tThread Count: 12\n\tCharacteristics:\n\t\t64-bit capable\n\nHandle 0x0009, DMI type 7, 19 bytes\nCache Information\n\tSocket Designation: L1-Cache\n\tConfiguration: Enabled, Not Socketed, Level 1\n\tOperational Mode: Write Through\n\tLocation: Internal\n\tInstalled Size: 384 KB\n\tMaximum Size: 384 KB\n\tSupported SRAM Types:\n\t\tOther\n\tInstalled SRAM Type: Other\n\tSpeed: Unknown\n\tError Correction Type: Parity\n\tSystem Type: Instruction\n\tAssociativity: 4-way Set-associative\n\nHandle 0x000A, DMI type 7, 19 bytes\nCache Information\n\tSocket Designation: L2-Cache\n\tConfiguration: Enabled, Not Socketed, Level 2\n\tOperational Mode: Write Through\n\tLocation: Internal\n\tInstalled Size: 1536 KB\n\tMaximum Size: 1536 KB\n\tSupported SRAM Types:\n\t\tOther\n\tInstalled SRAM Type: Other\n\tSpeed: Unknown\n\tError Correction Type: Single-bit ECC\n\tSystem Type: Unified\n\tAssociativity: 8-way Set-associative\n\nHandle 0x000B, DMI type 7, 19 bytes\nCache Information\n\tSocket Designation: L3-Cache\n\tConfiguration: Enabled, Not Socketed, Level 3\n\tOperational Mode: Write Back\n\tLocation: Internal\n\tInstalled Size: 12288 KB\n\tMaximum Size: 12288 KB\n\tSupported SRAM Types:\n\t\tOther\n\tInstalled SRAM Type: Other\n\tSpeed: Unknown\n\tError Correction Type: Single-bit ECC\n\tSystem Type: Unified\n\tAssociativity: 16-way Set-associative\n\nHandle 0x000C, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI0\n\tType: x8 PCI Express\n\tCurrent Usage: Available\n\tLength: Short\n\tID: 7\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x000D, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI1\n\tType: 64-bit PCI-X\n\tCurrent Usage: Available\n\tLength: Short\n\tID: 1\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x000E, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI2\n\tType: 64-bit PCI-X\n\tCurrent Usage: Available\n\tLength: Short\n\tID: 2\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x000F, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI3\n\tType: 64-bit PCI-X\n\tCurrent Usage: Available\n\tLength: Short\n\tID: 3\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x0010, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI4\n\tType: x16 PCI Express\n\tCurrent Usage: Available\n\tLength: Long\n\tID: 4\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x0011, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI5\n\tType: x8 PCI Express\n\tCurrent Usage: Available\n\tLength: Long\n\tID: 5\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x0012, DMI type 9, 17 bytes\nSystem Slot Information\n\tDesignation: PCI6\n\tType: x8 PCI Express\n\tCurrent Usage: In Use\n\tLength: Long\n\tID: 6\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tOpening is shared\n\t\tPME signal is supported\n\nHandle 0x0013, DMI type 11, 5 bytes\nOEM Strings\n\tString 1: To Be Filled By O.E.M.\n\tString 2: To Be Filled By O.E.M.\n\nHandle 0x0014, DMI type 15, 55 bytes\nSystem Event Log\n\tArea Length: 1008 bytes\n\tHeader Start Offset: 0x0810\n\tData Start Offset: 0x0810\n\tAccess Method: General-purpose non-volatile data functions\n\tAccess Address: 0x0001\n\tStatus: Valid, Not Full\n\tChange Token: 0x00000000\n\tHeader Format: No Header\n\tSupported Log Type Descriptors: 15\n\tDescriptor 1: Single-bit ECC memory error\n```\n\n----------------------------------------\n\nTITLE: Querying Incremental Values from MySQL Table\nDESCRIPTION: This snippet represents a series of SQL queries selecting incrementing integer values from a table named 'foo'. Each query is executed with consistent performance metrics and no InnoDB statistics available.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_25\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1387 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1388 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1389 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1390 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1391 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Checksum Tool Configuration Options\nDESCRIPTION: POD (Plain Old Documentation) format documentation describing the command-line options for the mk-table-checksum tool. Includes options for connection settings, filtering, output formatting, and help commands.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_05.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n=pod\n\n=head1 NAME\n\nmk-table-checksum - Perform an online replication consistency check, or\nchecksum MySQL tables efficiently on one or many servers.\n\n=head1 OPTIONS\n\nL<\"--schema\"> is restricted to option groups Connection, Filter, Output, Help.\n\n=over\n\n=item --algorithm\n\ntype: string\n\nChecksum algorithm (ACCUM|CHECKSUM|BIT_XOR).\n\n=item --databases\n\nshort form: -d; type: hash; group: Filter\n\nOnly checksum this comma-separated list of databases.\n\n=item --defaults-file\n\nshort form: -F; type: string; group: Connection\n\nOnly read mysql options from the given file.\n\n=item --explain-hosts\n\ngroup: Help\n\nExplain hosts.\n\n=item --help\n\ngroup: Help\n\nShow help and exit.\n\n=item --schema\n\nChecksum C<SHOW CREATE TABLE> intead of table data.\n\nThis option is only allowed with options from the following groups\n(MAGIC_schema_groups):\n\n   Connection Filter Output Help\n\nOptions from other groups, like L<\"--slave-lag\">, are not allowed.\n\n=item --tab\n\ngroup: Output\n\nPrint tab-separated output, not column-aligned output.\n\n=item --version\n\ngroup: Help\n\nShow version and exit.\n\n=back\n\n=head1 VERSION\n\nThis manual page documents Ver @VERSION@ Distrib @DISTRIB@ $Revision: 3535 $.\n\n=cut\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Table\nDESCRIPTION: Defines the structure for the user table in the mysql schema, which stores user account information and global privileges. It includes numerous columns for various privilege types, SSL settings, resource limits, and authentication details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_user_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',\n  `plugin` char(64) COLLATE utf8_bin NOT NULL DEFAULT 'mysql_native_password',\n  `authentication_string` text COLLATE utf8_bin,\n  `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `password_last_changed` timestamp NULL DEFAULT NULL,\n  `password_lifetime` smallint(5) unsigned DEFAULT NULL,\n  `account_locked` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining Customer List View Structure in Sakila Database\nDESCRIPTION: Creates the structure for the customer_list view in the Sakila database that will provide a combined view of customer information including their address, contact details, and associated store.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 CREATE TABLE `customer_list` (\n  `ID` smallint(5) unsigned,\n  `name` varchar(91),\n  `address` varchar(50),\n  `zip code` varchar(10),\n  `phone` varchar(20),\n  `city` varchar(50),\n  `country` varchar(50),\n  `notes` varchar(6),\n  `SID` tinyint(3) unsigned\n) */;\n```\n\n----------------------------------------\n\nTITLE: Defining nicer_but_slower_film_list View in MySQL Sakila Database\nDESCRIPTION: Creates a view similar to film_list but formats actor names with uppercase first letters. This results in a more visually appealing output but with slower performance due to string manipulation functions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_43\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `nicer_but_slower_film_list`*/;\n/*!50001 DROP VIEW IF EXISTS `nicer_but_slower_film_list`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `nicer_but_slower_film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(concat(ucase(substr(`actor`.`first_name`,1,1)),lcase(substr(`actor`.`first_name`,2,length(`actor`.`first_name`))),_utf8' ',concat(ucase(substr(`actor`.`last_name`,1,1)),lcase(substr(`actor`.`last_name`,2,length(`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Creating help_topic Table for Help Topics - MySQL - SQL\nDESCRIPTION: Defines the help_topic table, providing the structure for storing individual help topics, their descriptions, examples, categories, and URLs. Employs unique and primary keys on topic identifiers and names to ensure fast, reliable access. Used internally by MySQL to serve help queries and requires MyISAM engine support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: PHPMyAdmin Bookmark Query\nDESCRIPTION: Query to retrieve bookmarks for a specific user or shared bookmarks\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog005.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `label`, `id`, `query`, `dbase` AS `db`, IF (`user` = '', true, false) AS `shared` FROM `phpmyadmin`.`pma__bookmark` WHERE `user` = '' OR `user` = 'root'\n```\n\n----------------------------------------\n\nTITLE: Querying Unused Indexes - MySQL sys schema - SQL\nDESCRIPTION: This SQL snippet demonstrates how to query the sys.schema_unused_indexes view to list potentially unused indexes in MySQL. No external dependencies are required, but access permissions to the sys schema are necessary. The command returns columns for schema, table, and index names, and the sample shows how to limit the output to five rows for a quick overview.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_68\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_unused_indexes limit 5;\n+--------------------+---------------------+--------------------+\n| object_schema      | object_name         | index_name         |\n+--------------------+---------------------+--------------------+\n| mem30__bean_config | plists              | path               |\n| mem30__config      | group_selections    | name               |\n| mem30__config      | notification_groups | name               |\n| mem30__config      | user_form_defaults  | FKC1AEF1F9E7EE2CFB |\n| mem30__enterprise  | whats_new_entries   | entryId            |\n+--------------------+---------------------+--------------------+\n```\n\n----------------------------------------\n\nTITLE: Querying Records from foo Table in MySQL\nDESCRIPTION: A series of SELECT queries that retrieve numeric values from a table called 'foo'. Each query has consistent performance metrics with 0.000899 query time, 0.000000 lock time, and returns 0 rows while examining 0 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1828 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1829 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1830 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1831 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1832 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1833 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1834 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1835 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1836 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1837 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1838 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1839 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1840 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1841 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1842 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1843 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1844 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1845 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1846 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1847 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1848 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1849 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1850 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1851 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1852 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1853 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1854 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1855 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1856 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1857 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1858 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1859 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1860 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1861 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1862 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1863 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1864 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1865 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1866 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1867 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1868 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1869 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1870 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1871 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1872 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1873 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1874 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1875 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1876 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Replacing Data in MySQL Table\nDESCRIPTION: This SQL snippet replaces a row with the value 'bar' in the 'foo' table. Metrics for query execution, such as query time and lock time, are provided. The replace operation requires a unique key/constraint to function correctly.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow058.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 7  Schema: db\n# Query_time: 0.018799  Lock_time: 0.009453  Rows_sent: 0  Rows_examined: 0\nREPLACE `foo` VALUES(\"bar\");\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 7  Schema: db\n# Query_time: 0.018799  Lock_time: 0.009453  Rows_sent: 0  Rows_examined: 0\nreplace `foo` values(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Defining Film-Category Relationship Table in MySQL\nDESCRIPTION: This snippet creates the 'film_category' join table, which connects films to their categories in the Sakila database. The table enforces referential integrity using foreign keys with ON UPDATE CASCADE and uses a composite primary key for fast lookups. It's vital for representing the many-to-many association between 'film' and 'category' tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query with Subquery in MySQL\nDESCRIPTION: This SQL query selects a column named '12_13_foo' from a derived table (subquery) that selects a column named '12foo' from a table named '123_bar'. The derived table is aliased as '123baz'. The query took 2 seconds to execute according to the slow query log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow004.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect 12_13_foo from (select 12foo from 123_bar) as 123baz;\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.category Table in SQL\nDESCRIPTION: This SQL statement creates the `category` table within the Sakila sample database. It stores film categories, featuring an auto-incrementing primary key `category_id`, the category name, and an automatically updated `last_update` timestamp. The table employs the InnoDB engine and `utf8mb3` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `category` (\n  `category_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating inventory_in_stock Function in MySQL\nDESCRIPTION: This function checks if a specific inventory item is currently in stock by examining rental records.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION `inventory_in_stock`(p_inventory_id INT) RETURNS tinyint(1)\n    READS SQL DATA\nBEGIN\n    DECLARE v_rentals INT;\n    DECLARE v_out     INT;\n\n    SELECT COUNT(*) INTO v_rentals\n    FROM rental\n    WHERE inventory_id = p_inventory_id;\n\n    IF v_rentals = 0 THEN\n      RETURN TRUE;\n    END IF;\n\n    SELECT COUNT(rental_id) INTO v_out\n    FROM inventory LEFT JOIN rental USING(inventory_id)\n    WHERE inventory.inventory_id = p_inventory_id\n    AND rental.return_date IS NULL;\n\n    IF v_out > 0 THEN\n      RETURN FALSE;\n    ELSE\n      RETURN TRUE;\n    END IF;\nEND\n```\n\n----------------------------------------\n\nTITLE: Creating raw_data Table in MySQL\nDESCRIPTION: Defines a table for storing raw data with a composite primary key across date, hour, and entity properties. Uses default values for required fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump002.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS `raw_data`;\nCREATE TABLE `raw_data` (\n  `date` date NOT NULL DEFAULT '0000-00-00',\n  `hour` tinyint(4) NOT NULL DEFAULT '0',\n  `entity_property_1` varchar(16) NOT NULL DEFAULT '',\n  `entity_property_2` varchar(16) NOT NULL DEFAULT '',\n  `data_1` varchar(16) DEFAULT NULL,\n  `data_2` varchar(16) DEFAULT NULL,\n  PRIMARY KEY (`date`,`hour`,`entity_property_1`,`entity_property_2`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Creating help_relation Table - MySQL SQL\nDESCRIPTION: Defines the `help_relation` table establishing a relationship between help keywords and topics, supporting many-to-many keyword-topic mapping in MySQL's help system. This enables efficient cross-references for HELP lookups. Requires the help_keyword and help_topic tables as dependencies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int unsigned NOT NULL,\n  `help_keyword_id` int unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='keyword-topic relation'\n\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL func Table in SQL\nDESCRIPTION: This SQL statement defines the `func` table within the `mysql` database. It stores information about user-defined functions (UDFs), including the function name (`name`), return type indicator (`ret`), dynamic library file (`dl`), and type (function or aggregate). The table uses the MyISAM engine and utf8 character set with utf8_bin collation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Running pt-mongodb-summary from Command Line (Bash)\nDESCRIPTION: This bash snippet demonstrates how to run the pt-mongodb-summary tool with its available command-line options. Dependencies include pt-mongodb-summary installed within the Percona Toolkit and appropriate privileges (clusterAdmin or root in MongoDB). You may specify a host/IP and port, as well as authentication and output options. The main parameters are options (e.g., -u, -p) and the target host:port. Output will be written in the specified format (text by default) or as JSON. SSH or direct access to the MongoDB instance on the specified port is required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-mongodb-summary.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n   pt-mongodb-summary [OPTIONS] [HOST:[PORT]]\n```\n\n----------------------------------------\n\nTITLE: MySQL User Summary Sample Query\nDESCRIPTION: Example query showing user activity data including statement counts, latency metrics, and memory usage for different users.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_86\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary\\G\n*************************** 1. row ***************************\n                  user: root\n            statements: 4981\n     statement_latency: 26.54 s\n statement_avg_latency: 5.33 ms\n           table_scans: 74\n              file_ios: 7792\n       file_io_latency: 40.08 s\n   current_connections: 1\n     total_connections: 2\n          unique_hosts: 1\n        current_memory: 3.57 MiB\ntotal_memory_allocated: 83.37 MiB\n```\n\n----------------------------------------\n\nTITLE: Querying Statements With Errors or Warnings Example Output - SQL\nDESCRIPTION: Presents a sample output from selecting the statements_with_errors_or_warnings view, indicating how error and warning statistics for queries are returned. The example displays execution count, error and warning counts and rates, as well as seen timestamps and digest. Inputs are a LIMIT query, output is a tabular result with error/warning-focused aggregation for a normalized query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_83\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_errors_or_warnings LIMIT 1\\G\n*************************** 1. row ***************************\n      query: CREATE OR REPLACE ALGORITHM =  ... _delete` AS `rows_deleted` ...\n         db: sys\n exec_count: 2\n     errors: 1\n  error_pct: 50.0000\n   warnings: 0\nwarning_pct: 0.0000\n first_seen: 2014-03-07 12:56:54\n  last_seen: 2014-03-07 13:01:01\n     digest: 943a788859e623d5f7798ba0ae0fd8a9\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry with COUNT Query\nDESCRIPTION: A slow query log entry showing execution details of a SELECT COUNT operation on table X. The query took 2 seconds to execute with no lock time and examined no rows while returning 1 row.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow023.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 071015 21:43:52\n# User@Host: root[root] @ localhost []\n# Query_time: 2  Lock_time: 0  Rows_sent: 1  Rows_examined: 0\n/* SELECT count(*) FROM X instance */ select count(*) as A from X\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into Database Table in SQL\nDESCRIPTION: This SQL code snippet demonstrates inserting multiple rows into a database table. Each row contains three values: two integers and a timestamp. The timestamp is consistent across all insertions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n(85,421,'2006-02-15 10:05:03'),(85,446,'2006-02-15 10:05:03'),(85,461,'2006-02-15 10:05:03'),\n(85,475,'2006-02-15 10:05:03'),(85,478,'2006-02-15 10:05:03'),(85,522,'2006-02-15 10:05:03'),\n(85,543,'2006-02-15 10:05:03'),(85,558,'2006-02-15 10:05:03'),(85,591,'2006-02-15 10:05:03'),\n(85,630,'2006-02-15 10:05:03'),(85,678,'2006-02-15 10:05:03'),(85,711,'2006-02-15 10:05:03'),\n(85,761,'2006-02-15 10:05:03'),(85,812,'2006-02-15 10:05:03'),(85,869,'2006-02-15 10:05:03'),\n(85,875,'2006-02-15 10:05:03'),(85,895,'2006-02-15 10:05:03'),(85,957,'2006-02-15 10:05:03'),\n(85,960,'2006-02-15 10:05:03'),(86,137,'2006-02-15 10:05:03'),(86,163,'2006-02-15 10:05:03'),\n(86,196,'2006-02-15 10:05:03'),(86,216,'2006-02-15 10:05:03'),(86,249,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: INSERT IGNORE Operation on film_actor Table\nDESCRIPTION: Inserts values into film_actor table using INSERT IGNORE to skip rows that would cause duplicate key errors. Query executed in 2s with 167.33k query size.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow024.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO `film_actor` VALUES (1,1,'2006-02-15 10:05:03') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from bar_tbl Table in MySQL\nDESCRIPTION: A simple SELECT query retrieving the 'col' column from the 'bar_tbl' table in the 'bar' database. The query was executed by SQL_SLAVE user with 12μs execution time and no rows examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006-order-by-re.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: MySQL Executable Information\nDESCRIPTION: Details the path to the MySQL server executable (`mysqld`) being used by the instances and indicates whether the binary contains debugging symbols.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# MySQL Executable ###########################################\n       Path to executable | /home/sveta/mysqlpackages/Percona-Server-8.0.32-24-Linux.x86_64.glibc2.35/bin/mysqld\n              Has symbols | Yes\n```\n\n----------------------------------------\n\nTITLE: Creating Component Table in SQL\nDESCRIPTION: This SQL snippet creates the component table to store component data with unique component_ids and component_urn. Dependencies: MySQL database. The primary key is component_id with an auto-increment constraint.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `component` (\n  `component_id` int unsigned NOT NULL AUTO_INCREMENT,\n  `component_group_id` int unsigned NOT NULL,\n  `component_urn` text NOT NULL,\n  PRIMARY KEY (`component_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='Components'\n```\n\n----------------------------------------\n\nTITLE: Normalizing File Paths in MySQL\nDESCRIPTION: Demonstrates the format_path function which standardizes file paths by replacing absolute data directory paths with the @@datadir variable reference. This makes output more portable across different system configurations and normalizes path separators between operating systems.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_109\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select @@datadir;\n+-----------------------------------------------+\n| @@datadir                                     |\n+-----------------------------------------------+\n| /Users/mark/sandboxes/SmallTree/AMaster/data/ |\n+-----------------------------------------------+\n1 row in set (0.06 sec)\n\nmysql> select format_path('/Users/mark/sandboxes/SmallTree/AMaster/data/mysql/proc.MYD') AS path;\n+--------------------------+\n| path                     |\n+--------------------------+\n| @@datadir/mysql/proc.MYD |\n+--------------------------+\n1 row in set (0.03 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Current User Function\nDESCRIPTION: EXPLAIN query to show the execution plan for retrieving the current MySQL user. Uses the USER() function to return the current username and hostname.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT USER()\n```\n\n----------------------------------------\n\nTITLE: MySQL Select Query - Stable Performance Table\nDESCRIPTION: Query selecting less_variable_column from steady_table with consistent execution time around 1 second. Shows stable performance pattern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect less_variable_column from steady_table;\n```\n\n----------------------------------------\n\nTITLE: Lower Boundary Checksum Query\nDESCRIPTION: Processes records before the lower boundary of the current chunk, using rental_date and inventory_id as key columns for ordering.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/n-chunk-index-cols.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`rental` FORCE INDEX(`rental_date`) WHERE ((`rental_date` < ?) OR (`rental_date` = ? AND `inventory_id` < ?)) ORDER BY `rental_date`, `inventory_id`, `customer_id` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Displaying I/O Performance Metrics for Linux Devices\nDESCRIPTION: This snippet shows a tabular output of I/O performance metrics for various devices in a Linux system. It includes timestamps, device names, read/write speeds, concurrency, response times, busy percentages, and in-progress I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 36.1 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 sda           0.0    0.0     0.0     0.0    0.0     0.4   1%      0\n 36.1 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 36.1 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with String Pattern\nDESCRIPTION: A SELECT query examining records where column 'c' matches a specific string pattern containing what appears to be a sprintf formatting code. The query took 2 seconds to execute, with no lock time, returning 1 row.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow043.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t where c = 'the %d looks like a sprintf code'\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Procedure Privileges Table (procs_priv)\nDESCRIPTION: Defines the structure for the procs_priv table in the mysql database, which stores procedure privileges. It includes columns for host, database, user, routine name, type, grantor, privileges, and timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges'\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Performance Analysis\nDESCRIPTION: A slow query analysis showing a triple table self-join on table 'a'. The query took 2 seconds to execute with no lock time and examined no rows while returning 1 row. Query execution shows potential performance issues with the self-join pattern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow028.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from a, a, a\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'a'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `a`\n```\n\n----------------------------------------\n\nTITLE: Describing IO Global Wait by Latency Tables Structure\nDESCRIPTION: Details the structure of io_global_by_wait_by_latency and x$io_global_by_wait_by_latency tables, which focus on I/O latency metrics including read, write, and misc latency statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_29\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc io_global_by_wait_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| event_name    | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n| read_latency  | text                | YES  |     | NULL    |       |\n| write_latency | text                | YES  |     | NULL    |       |\n| misc_latency  | text                | YES  |     | NULL    |       |\n| count_read    | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_read    | text                | YES  |     | NULL    |       |\n| avg_read      | text                | YES  |     | NULL    |       |\n| count_write   | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_written | text                | YES  |     | NULL    |       |\n| avg_written   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL Table\nDESCRIPTION: SQL statement to remove the redundant 'domain' index from the 'test.domains' table. The index is identified as a duplicate of the 'unique_key_domain' index since both are defined on the same column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/simple_dupe_bug_1217013.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `test`.`domains` DROP INDEX `domain`;\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query on 'foo1' Table (SQL)\nDESCRIPTION: This SQL snippet represents a query being executed by a MySQL process identified as Id 1. The process, initiated by 'user1' from '1.2.3.4:3333' against the 'foo' database, is running a `SELECT *` query on the `foo1` table. It has been running for 4 seconds and is currently in a 'Locked' state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset006.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from foo1;\n```\n\n----------------------------------------\n\nTITLE: Executing and Explaining a SELECT Query - MySQL - SQL\nDESCRIPTION: This snippet demonstrates the execution of a MySQL SELECT statement on table 'd.t' using an EXECUTE command, followed by its EXPLAIN output for performance analysis. It queries for rows where the column 'i' equals \"3\". The snippet assumes an existing prepared statement context, and EXPLAIN is used with MySQL's partitioning comment syntax to analyze the execution plan. The query expects the 'd.t' table to exist and for column 'i' to be indexed for optimal performance. The input is a fixed value (\"3\") provided as a string.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nEXECUTE SELECT i FROM d.t WHERE i=\"3\"\\G\n# Converted for EXPLAIN\n# EXPLAIN /*!50100 PARTITIONS*/\nSELECT i FROM d.t WHERE i=\"3\"\\G\n```\n\n----------------------------------------\n\nTITLE: REPLACE Operation on film_actor Table\nDESCRIPTION: Performs a REPLACE operation into film_actor table which deletes and reinserts data if duplicate key exists. Query executed in 2s with 167.33k query size.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow024.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `film_actor` VALUES (1,1,'2006-02-15 10:05:03') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: InnoDB Table Stats Creation - MySQL\nDESCRIPTION: Creates system table for storing InnoDB table statistics including row counts and index sizes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS `innodb_table_stats` (\n  `database_name` varchar(64) COLLATE utf8_bin NOT NULL,\n  `table_name` varchar(64) COLLATE utf8_bin NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `n_rows` bigint(20) unsigned NOT NULL,\n  `clustered_index_size` bigint(20) unsigned NOT NULL,\n  `sum_of_other_index_sizes` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`database_name`,`table_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from foo_tbl in foo Schema\nDESCRIPTION: A simple SELECT query retrieving the 'col' column from the 'foo_tbl' table in the 'foo' schema. This query appears multiple times in the log with minimal execution time and resource usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT col FROM foo_tbl;\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Session Configuration in Binary Log\nDESCRIPTION: Sets up various session-level configurations for a MySQL server, including character set, time zone, and SQL mode settings. This appears at the beginning of a binary log file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog-CRC32.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 4\n#140702 15:12:21 server id 12345  end_log_pos 120 CRC32 0xdb20dc67 \tStart: binlog v 4, server v 5.6.17-log created 140702 15:12:21\n# Warning: this binlog is either in use or was not closed properly.\nBINLOG '\nhUu0Uw85MAAAdAAAAHgAAAABAAQANS42LjE3LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAWfc\nINs=\n'/*!*/;\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with Explicit ASC Orders\nDESCRIPTION: Retrieves all products ordered by name and shape in ascending order with explicit ASC keywords.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow048.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `products` ORDER BY name ASC, shape ASC;\n```\n\n----------------------------------------\n\nTITLE: Displaying Checksum Results for Multiple Database Tables\nDESCRIPTION: This snippet shows the output of a database checksum operation. It includes columns for errors, differences, rows, chunks, skipped items, and the table name. The results cover tables from different schemas including percona_test, sakila, and sys.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/static-chunk-size-results-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERRORS DIFFS ROWS CHUNKS SKIPPED TABLE\n0 0 29 1 0 percona_test.checksums\n0 0 1 1 0 percona_test.sentinel\n0 0 200 1 0 sakila.actor\n0 0 603 1 0 sakila.address\n0 0 16 1 0 sakila.category\n0 0 600 1 0 sakila.city\n0 0 109 1 0 sakila.country\n0 0 599 1 0 sakila.customer\n0 0 1000 1 0 sakila.film\n0 0 5462 8 0 sakila.film_actor\n0 0 1000 1 0 sakila.film_category\n0 0 1000 1 0 sakila.film_text\n0 0 4581 7 0 sakila.inventory\n0 0 6 1 0 sakila.language\n0 0 16049 19 0 sakila.payment\n0 0 16044 19 0 sakila.rental\n0 0 2 1 0 sakila.staff\n0 0 2 1 0 sakila.store\n0 0 6 1 0 sys.sys_config\n```\n\n----------------------------------------\n\nTITLE: Simple update of foo.bar table in MySQL\nDESCRIPTION: A basic UPDATE operation setting the biz field to '91848182522' in the foo.bar table. This query took approximately 530us to execute and accessed 18 distinct pages in InnoDB.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE foo.bar\nSET    biz = '91848182522'\n```\n\n----------------------------------------\n\nTITLE: Deallocating Prepared Statement in SQL\nDESCRIPTION: This SQL snippet uses the `DEALLOCATE PREPARE` command to release a specific prepared statement, identified here by the handle '4'. This frees up server resources (memory, plan cache) associated with that prepared statement. It's typically executed when the prepared statement will no longer be needed. Requires a prepared statement with the handle '4' to exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump033.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDEALLOCATE PREPARE 4\\G\n```\n\n----------------------------------------\n\nTITLE: Querying I/O Wait Statistics in MySQL\nDESCRIPTION: Shows global I/O statistics grouped by wait events, including total latency, read/write metrics, and data transfer sizes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM io_global_by_wait_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Joining Tree, ResaChain, TreeCode, and PoolInstance Tables in MySQL\nDESCRIPTION: This SQL query joins multiple tables (tree, RESACHAIN, treeCODE, POOLINSTANCE) to retrieve specific columns based on various conditions, including active status and partner IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nselect tree0_.treeid as col_0_0_, treecode1_.partnercode as col_1_0_, tree0_.partnerid as col_2_0_, tree0_.qcnscrsid as col_3_0_, tree0_.qcnscountryid as col_4_0_, tree0_.qcnscityid as col_5_0_, treecode1_.isactive as col_6_0_, resachain2_.isactive as col_7_0_, tree0_.name as col_8_0_ from tree tree0_, RESACHAIN resachain2_, treeCODE treecode1_, POOLINSTANCE poolinstan3_ where tree0_.poolinstanceid=poolinstan3_.poolinstanceid and tree0_.qcnscrsid=resachain2_.qcnscrsid and tree0_.isactive=1 and tree0_.qcnstreecode='SE100116' and poolinstan3_.pooltemplateid=17 and tree0_.treestatustypeid=1 and (tree0_.qcnsstatusid in (1671 , 1673)) and (tree0_.partnerid in (1 , 2 , 3 , 4)) and tree0_.treeid=treecode1_.treeid\n```\n\n----------------------------------------\n\nTITLE: Creating func Table in MySQL\nDESCRIPTION: SQL statement for creating the func table which stores user-defined functions. It includes columns for function name, return type, library path, and function type with appropriate collation settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions';\n```\n\n----------------------------------------\n\nTITLE: Describing Global Memory Usage Tables - MySQL SQL\nDESCRIPTION: This snippet provides the structure for 'memory_global_by_current_bytes' and 'x$memory_global_by_current_bytes', which capture memory use globally by event/type, including columns for current and high watermarks. Both tables are crucial for administrators seeking a breakdown of total server memory usage across various allocation categories. Requires sys and Performance Schema; columns differ in format between human-readable and raw types.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_global_by_current_bytes;\n+-------------------+--------------+------+-----+---------+-------+\n| Field             | Type         | Null | Key | Default | Extra |\n+-------------------+--------------+------+-----+---------+-------+\n| event_name        | varchar(128) | NO   |     | NULL    |       |\n| current_count     | bigint(20)   | NO   |     | NULL    |       |\n| current_alloc     | text         | YES  |     | NULL    |       |\n| current_avg_alloc | text         | YES  |     | NULL    |       |\n| high_count        | bigint(20)   | NO   |     | NULL    |       |\n| high_alloc        | text         | YES  |     | NULL    |       |\n| high_avg_alloc    | text         | YES  |     | NULL    |       |\n+-------------------+--------------+------+-----+---------+-------+\n7 rows in set (0.08 sec)\n\nmysql> desc x$memory_global_by_current_bytes;\n+-------------------+---------------+------+-----+---------+-------+\n| Field             | Type          | Null | Key | Default | Extra |\n+-------------------+---------------+------+-----+---------+-------+\n| event_name        | varchar(128)  | NO   |     | NULL    |       |\n| current_count     | bigint(20)    | NO   |     | NULL    |       |\n| current_alloc     | bigint(20)    | NO   |     | NULL    |       |\n| current_avg_alloc | decimal(23,4) | NO   |     | 0.0000  |       |\n| high_count        | bigint(20)    | NO   |     | NULL    |       |\n| high_alloc        | bigint(20)    | NO   |     | NULL    |       |\n| high_avg_alloc    | decimal(23,4) | NO   |     | 0.0000  |       |\n+-------------------+---------------+------+-----+---------+-------+\n7 rows in set (0.16 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining Topic Types and Configuration Syntax - Plain Text\nDESCRIPTION: This snippet contains explicit Natural Docs configuration instructions for defining new topic types and controlling their behavior. It covers directives such as 'Topic Type', 'Plural', 'Keywords', 'Index', 'Scope', and class hierarchy management. The section outlines available options, defaults, and how these settings affect the output structure, supporting highly customizable documentation generation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/config/NaturalDocs/Topics.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n#-------------------------------------------------------------------------------\n# SYNTAX:\n#\n# Topic Type: [name]\n# Alter Topic Type: [name]\n#    Creates a new topic type or alters one from the main file.  Each type gets\n#    its own index and behavior settings.  Its name can have letters, numbers,\n#    spaces, and these characters: - / . '\n#\n# Plural: [name]\n#    Sets the plural name of the topic type, if different.\n#\n# Keywords:\n#    [keyword]\n#    [keyword], [plural keyword]\n#    ...\n#    Defines or adds to the list of keywords for the topic type.  They may only\n#    contain letters, numbers, and spaces and are not case sensitive.  Plural\n#    keywords are used for list topics.  You can redefine keywords found in the\n#    main topics file.\n#\n# Index: [yes|no]\n#    Whether the topics get their own index.  Defaults to yes.  Everything is\n#    included in the general index regardless of this setting.\n#\n# Scope: [normal|start|end|always global]\n#    How the topics affects scope.  Defaults to normal.\n#    normal        - Topics stay within the current scope.\n#    start         - Topics start a new scope for all the topics beneath it,\n#                    like class topics.\n#    end           - Topics reset the scope back to global for all the topics\n#                    beneath it.\n#    always global - Topics are defined as global, but do not change the scope\n#                    for any other topics.\n#\n# Class Hierarchy: [yes|no]\n#    Whether the topics are part of the class hierarchy.  Defaults to no.\n#\n# Page Title If First: [yes|no]\n#    Whether the topic's title becomes the page title if it's the first one in\n#    a file.  Defaults to no.\n#\n# Break Lists: [yes|no]\n#    Whether list topics should be broken into individual topics in the output.\n#    Defaults to no.\n#\n# Can Group With: [type], [type], ...\n#    Defines a list of topic types that this one can possibly be grouped with.\n#    Defaults to none.\n#-------------------------------------------------------------------------------\n\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from foo2 Table in SQL\nDESCRIPTION: This SQL query retrieves all columns (`*`) from the table named `foo2`. The surrounding context indicates it's part of an active database process (Id: 2, User: user1, Host: 1.2.3.4:5455, db: foo) that has been executing for 5 seconds and is currently in a 'Locked' state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from foo2;\n```\n\n----------------------------------------\n\nTITLE: Viewing Active TCP Connections with netstat\nDESCRIPTION: This output displays active TCP connections on a Linux system, showing listening services (MySQL, memcached, NRPE, etc.) and numerous TIME_WAIT connections to MySQL. The output includes protocol, queue status, local/foreign addresses, connection state, and process information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   \ntcp        0      0 0.0.0.0:5666                0.0.0.0:*                   LISTEN      3487/nrpe           \ntcp        0      0 10.17.85.70:9989            0.0.0.0:*                   LISTEN      8394/perl           \ntcp        0      0 127.0.0.1:199               0.0.0.0:*                   LISTEN      6137/snmpd          \ntcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      14469/mysqld        \ntcp        0      0 0.0.0.0:11212               0.0.0.0:*                   LISTEN      9000/memcached      \ntcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN      5719/portmap        \ntcp        0      0 0.0.0.0:850                 0.0.0.0:*                   LISTEN      5756/rpc.statd      \ntcp        0      0 127.0.0.1:631               0.0.0.0:*                   LISTEN      8348/cupsd          \ntcp        0      0 127.0.0.1:25                0.0.0.0:*                   LISTEN      8747/sendmail: acce \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44812           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45791           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34777           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34265           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44813           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45534           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47070           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46302           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34520           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44814           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46813           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36315           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44815           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45276           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45788           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36314           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34266           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44808           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45275           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36317           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36103          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35335          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34269           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44809           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45530           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35334          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44810           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45273           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34271           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34783           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44811           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46808           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36100          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35844          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44804           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45527           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34769           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35793           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44805           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46806           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34256           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36362          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36106          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44806           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45269           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45525           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47061           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34515           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36361          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44807           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45012           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45268           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34770           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36104          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44800           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47059           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46291           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45779           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35855          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36309           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44801           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45010           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34516           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36110          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44802           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46801           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44803           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46032           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34262           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44828           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44829           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45006           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35272           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35016           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35858          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34248           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45261           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46541           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44830           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45005           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35857          TIME_WAIT   -                   \n```\n\n----------------------------------------\n\nTITLE: Querying Fruit from Trees Table in SQL\nDESCRIPTION: A simple SELECT query to retrieve the 'fruit' column from the 'trees' table. This query uses an index on the 'fruit' column for efficient retrieval.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_1-80.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Explaining and Selecting MySQL Version Comment - SQL\nDESCRIPTION: Runs an EXPLAIN using the MySQL partitioning extension (if supported by server version) on a SELECT statement that retrieves the current server's version comment. Dependencies include a MySQL server (version 5.1 or greater for partition support) and suitable client access. The only significant parameter is the retrieval of @@version_comment. The expected output is query plan information and a single string value with the server version comment. The EXPLAIN modifier is used for diagnostic purposes, and partition information may only display if supported.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump002_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nselect @@version_comment limit 1\\G\n```\n\n----------------------------------------\n\nTITLE: Generating a Single SQL File using Bash Script\nDESCRIPTION: This bash script creates a single SQL file for the MySQL sys schema with options for version, user, and other parameters. Required dependencies are bash and access to the sys schema files. Outputs a file with naming such as sys_<sys_version>_<mysql_version_identifier>_inline.sql.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./generate_sql_file.sh -v 57 -u \"'mark'@'localhost'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n./generate_sql_file.sh -v 56 -b -u CURRENT_USER\n```\n\nLANGUAGE: bash\nCODE:\n```\n./generate_sql_file.sh -v 57 -m\n```\n\n----------------------------------------\n\nTITLE: Defining the 'time_zone_transition' Table for Zone Transitions - MySQL - SQL\nDESCRIPTION: Defines 'time_zone_transition', recording when time zone transitions occur and mapping to specific transition types and time zone IDs. Supports chronological querying of offset changes. Composite primary key ensures quick lookups by time zone and time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_transition` (\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  `Transition_time` bigint(20) NOT NULL,\n  `Transition_type_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`Time_zone_id`,`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zone transitions'\n```\n\n----------------------------------------\n\nTITLE: Executing REPLACE Statement in MySQL\nDESCRIPTION: This SQL snippet executes a `REPLACE` statement on the `foo` table within the `db` database. The query (ID 0xC6846BD8C9A8209BF33473286088142B) inserted or replaced rows with the value \"bar\". Performance metrics indicate it was executed twice with an average execution time of 19ms and lock time of 9ms. The `\\G` suggests execution via the mysql client for vertical output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow058.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nreplace `foo` values(\"bar\")\\G\n```\n\n----------------------------------------\n\nTITLE: DELETE Operation\nDESCRIPTION: DELETE statement removing records from table t where id is less than 1000\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow001.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndelete from t where id < 1000;\n```\n\n----------------------------------------\n\nTITLE: Selecting and Ordering Rows from the products Table Using SQL\nDESCRIPTION: Executes a SELECT query to retrieve all columns from the 'products' table, ordering the results first by 'name' and then by 'shape' in ascending order. This operation is fundamental for displaying sorted product data and may be used in reporting or analytics tools interfacing with the products database. There are no non-standard dependencies, but efficient operation may depend on indexing the 'name' and 'shape' columns. Input: the existing 'products' table; Output: all rows sorted. Performance may be impacted for large tables without proper indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow048.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM `products` ORDER BY name, shape asc\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Tables\nDESCRIPTION: Defines the structure for three tables in the percona_test schema: checksums, load_data, and sentinel. These tables are likely used for testing purposes in the Percona Toolkit project.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nCREATE TABLE `load_data` (\n  `i` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nCREATE TABLE `sentinel` (\n  `id` int(11) NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Staff List View in MySQL\nDESCRIPTION: This SQL snippet creates a view named 'staff_list' with selected columns from the staff table and related information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff_list` (\n  `ID` tinyint(3) unsigned,\n  `name` varchar(91),\n  `address` varchar(50),\n  `zip code` varchar(10),\n  `phone` varchar(20),\n  `city` varchar(50),\n  `country` varchar(50),\n  `SID` tinyint(3) unsigned\n) ENGINE=MyISAM;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_keyword` Table in SQL\nDESCRIPTION: Defines the `help_keyword` table in the `mysql` database. Part of the server's help system, this table stores keywords used to look up help topics, containing a unique ID and the keyword name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query with EXPLAIN Output\nDESCRIPTION: A basic SELECT query retrieving fruit data from trees table, showing both the query and its EXPLAIN plan. Query executed with minimal resource usage (12us execution time) and no rows examined or returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-51.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Identifying MySQL Lock Wait Causing Deadlock (Text)\nDESCRIPTION: This text snippet from the deadlock log indicates the specific lock the transaction (trx id 3BF88F886) was waiting for. The transaction required an AUTO-INC lock mode on the table `db`.`gr_v3_response_log` to proceed with the INSERT operation, but this lock could not be granted, leading to the deadlock.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-deadlock-logger/samples/bug_1195034.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTABLE LOCK table `db`.`gr_v3_response_log` trx id 3BF88F886 lock mode AUTO-INC waiting\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Performance for Table 'three' Using SQL\nDESCRIPTION: Provides a detailed performance analysis for the `three` table through SQL queries to capture execution metrics. The prerequisite is the availability of the table `three`. This snippet specifically measures execution parameters without altering the data, focusing on resource usage and completion time constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow049.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'three'\\G\nSHOW CREATE TABLE `three`\\G\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT three FROM three WHERE id=?\\G\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Full Table Scans Structure\nDESCRIPTION: Shows the table structure for statements_with_full_table_scans and x$statements_with_full_table_scans views. These tables track queries that perform full table scans, including metrics like execution count, latency, and row statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_84\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_full_table_scans;\n+--------------------------+------------------------+------+-----+---------------------+-------+\n| Field                    | Type                   | Null | Key | Default             | Extra |\n+--------------------------+------------------------+------+-----+---------------------+-------+\n| query                    | longtext               | YES  |     | NULL                |       |\n| db                       | varchar(64)            | YES  |     | NULL                |       |\n| exec_count               | bigint(20) unsigned    | NO   |     | NULL                |       |\n| total_latency            | text                   | YES  |     | NULL                |       |\n| no_index_used_count      | bigint(20) unsigned    | NO   |     | NULL                |       |\n| no_good_index_used_count | bigint(20) unsigned    | NO   |     | NULL                |       |\n| no_index_used_pct        | decimal(24,0)          | NO   |     | 0                   |       |\n| rows_sent                | bigint(20) unsigned    | NO   |     | NULL                |       |\n| rows_examined            | bigint(20) unsigned    | NO   |     | NULL                |       |\n| rows_sent_avg            | decimal(21,0) unsigned | YES  |     | NULL                |       |\n| rows_examined_avg        | decimal(21,0) unsigned | YES  |     | NULL                |       |\n| first_seen               | timestamp              | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen                | timestamp              | NO   |     | 0000-00-00 00:00:00 |       |\n| digest                   | varchar(32)            | YES  |     | NULL                |       |\n+--------------------------+------------------------+------+-----+---------------------+-------+\n```\n\n----------------------------------------\n\nTITLE: Querying numeric values from a table in MySQL\nDESCRIPTION: Series of 50 similar SELECT queries that retrieve numeric values (1-50) from a table named 'foo'. Each query has the same execution parameters with a query time of 0.000899 seconds, lock time of 0, and no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 2 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 3 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 4 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 5 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 6 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 7 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 8 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 9 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 10 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 11 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 12 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 13 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 14 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 15 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 16 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 17 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 18 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 19 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 20 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 21 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 22 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 23 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 24 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 25 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 26 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 27 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 28 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 29 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 30 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 31 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 32 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 33 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 34 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 35 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 36 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 37 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 38 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 39 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 40 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 41 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 42 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 43 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 44 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 45 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 46 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 47 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 48 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 49 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 50 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Processlist Table Structure\nDESCRIPTION: Shows the structure of the 'processlist' table in MySQL Performance Schema, including field names, types, and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_45\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc processlist;\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| Field                  | Type                                     | Null | Key | Default | Extra |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\n| command                | varchar(16)                              | YES  |     | NULL    |       |\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\n| statement_latency      | text                                     | YES  |     | NULL    |       |\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\n| lock_latency           | text                                     | YES  |     | NULL    |       |\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| full_scan              | varchar(3)                               | NO   |     |         |       |\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\n| last_statement_latency | text                                     | YES  |     | NULL    |       |\n| current_memory         | text                                     | YES  |     | NULL    |       |\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\n| last_wait_latency      | text                                     | YES  |     | NULL    |       |\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\n| trx_latency            | text                                     | YES  |     | NULL    |       |\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n28 rows in set (0.04 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying a Nonexistent Table in MySQL (SQL)\nDESCRIPTION: This snippet attempts to select all data from a table named 'nonexistent_table' within the 'sakila' database, after switching to the database using the 'USE' command. Dependencies include an active MySQL session with the 'sakila' database present, though the target table does not exist. The expected output is a MySQL error indicating the table does not exist, which is useful for testing error handling or simulating failed queries in database logging scenarios.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow004.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# Time: 071015 21:43:52\\n# User@Host: root[root] @ localhost []\\n# Query_time: 2  Lock_time: 0  Rows_sent: 1  Rows_examined: 0\\nuse sakila;\\nselect * from nonexistent_table;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# Time: 071015 21:43:52\\n# User@Host: root[root] @ localhost []\\n# Query_time: 2  Lock_time: 0  Rows_sent: 1  Rows_examined: 0\\nuse sakila;\\nselect * from nonexistent_table;\n```\n\n----------------------------------------\n\nTITLE: Database Selection and Transaction Management in MySQL\nDESCRIPTION: This snippet demonstrates selecting a database, setting autocommit to false, and committing a transaction in MySQL. It includes multiple separate commands executed in sequence.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow013.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nuse abc;\nSET autocommit=0;\ncommit;\n```\n\n----------------------------------------\n\nTITLE: Creating Column Privileges Table - MySQL - SQL\nDESCRIPTION: This CREATE TABLE statement defines the 'columns_priv' system table for managing column-level privileges in MySQL. Dependencies include an underlying MySQL server using the MyISAM storage engine, UTF-8 collation, and proper privilege set definitions. The table enforces integrity using a compound primary key across Host, Db, User, Table_name, and Column_name; key parameters such as Column_priv store specific granted actions. The table is automatically updated via timestamps and supports privileges like Select, Insert, Update, and References.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic MySQL Table with Single Integer Column\nDESCRIPTION: SQL command creating a simple MyISAM table named 't1' with a nullable integer column 'a'. The table uses Latin1 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/log001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `t1` (\n  `a` int(11) default NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Inserting Film Actor Relationships in MySQL\nDESCRIPTION: Bulk REPLACE INTO statement for inserting film-actor relationships with IDs and timestamps into the film_actor table. Each record contains (film_id, actor_id, last_update) values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `film_actor` VALUES (1,1,'2006-02-15 10:05:03'),(1,23,'2006-02-15 10:05:03'),(1,25,'2006-02-15 10:05:03'),(1,106,'2006-02-15 10:05:03'),(1,140,'2006-02-15 10:05:03'),(1,166,'2006-02-15 10:05:03'),(1,277,'2006-02-15 10:05:03'),(1,361,'2006-02-15 10:05:03'),(1,438,'2006-02-15 10:05:03'),(1,499,'2006-02-15 10:05:03'),(1,506,'2006-02-15 10:05:03'),(1,509,'2006-02-15 10:05:03'),(1,605,'2006-02-15 10:05:03'),(1,635,'2006-02-15 10:05:03'),(1,749,'2006-02-15 10:05:03'),(1,832,'2006-02-15 10:05:03'),(1,939,'2006-02-15 10:05:03'),(1,970,'2006-02-15 10:05:03'),(1,980,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Select Count Query\nDESCRIPTION: This query counts the number of entries in the 'blah' table where 'col' is greater than 2, using EXPLAIN to evaluate query execution. This operation expects the 'blah' table in the database 'db1' to be set up.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum-with-Locktime-distro.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /\\*!50100 PARTITIONS\\*/ SELECT COUNT(*) FROM blah WHERE col > 2\\G\n```\n\n----------------------------------------\n\nTITLE: Inserting from Select Statement into Table - SQL\nDESCRIPTION: This snippet demonstrates how to insert multiple rows into table 't' by selecting all matches from the 'monkeys' table. The columns in both tables must be compatible for the operation to succeed. The INSERT INTO ... SELECT statement allows for batch copying of data, with all rows from 'monkeys' inserted into 't'. Proper permissions and structure alignment are required to avoid runtime errors.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/rawlogs/rawlog002.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO t SELECT * FROM monkeys\n```\n\n----------------------------------------\n\nTITLE: Analyzing InnoDB Semaphore Wait on Block Lock (Text)\nDESCRIPTION: This text snippet shows multiple threads waiting for an S-lock (shared lock) on an RW-latch (Read-Write latch) located at memory address 0x7f4bedbf8810 ('&block->lock'). The wait occurs in the source file 'btr/btr0cur.c' at line 523. A writer thread (ID 139960567171408) holds an exclusive lock, causing the readers to wait. This indicates lock contention on a specific block, potentially during B-tree cursor operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139960959441232 has waited at btr/btr0cur.c line 523 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 140055980632400 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139959747754320 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 140055943625040 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 140055978502480 has waited at btr/btr0cur.c line 523 for 0.0000 seconds the semaphore:\nS-lock on RW-latch at 0x7f4bedbf8810 '&block->lock'\na writer (thread id 139960567171408) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0pcur.c line 260\nLast time write locked in file btr/btr0cur.c line 523\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Server Status Variables\nDESCRIPTION: This snippet shows a list of MySQL server status variables and their values. It includes various metrics related to server operations, query execution, and database engine performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mext/samples/mext-001.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n| Com_lock_tables                   | 0        |\n| Com_optimize                      | 0        |\n| Com_preload_keys                  | 0        |\n| Com_prepare_sql                   | 0        |\n| Com_purge                         | 0        |\n| Com_purge_before_date             | 0        |\n| Com_rename_table                  | 0        |\n| Com_repair                        | 0        |\n| Com_replace                       | 0        |\n| Com_replace_select                | 0        |\n| Com_reset                         | 0        |\n| Com_restore_table                 | 0        |\n| Com_revoke                        | 0        |\n| Com_revoke_all                    | 0        |\n| Com_rollback                      | 0        |\n| Com_savepoint                     | 0        |\n| Com_select                        | 0        |\n| Com_set_option                    | 0        |\n| Com_show_binlog_events            | 0        |\n| Com_show_binlogs                  | 0        |\n| Com_show_charsets                 | 0        |\n| Com_show_collations               | 0        |\n| Com_show_column_types             | 0        |\n| Com_show_create_db                | 0        |\n| Com_show_create_table             | 0        |\n| Com_show_databases                | 0        |\n| Com_show_errors                   | 0        |\n| Com_show_fields                   | 0        |\n| Com_show_grants                   | 0        |\n| Com_show_innodb_status            | 0        |\n| Com_show_keys                     | 0        |\n| Com_show_logs                     | 0        |\n| Com_show_master_status            | 0        |\n| Com_show_ndb_status               | 0        |\n| Com_show_new_master               | 0        |\n| Com_show_open_tables              | 0        |\n| Com_show_privileges               | 0        |\n| Com_show_processlist              | 0        |\n| Com_show_slave_hosts              | 0        |\n| Com_show_slave_status             | 0        |\n| Com_show_status                   | 1        |\n| Com_show_storage_engines          | 0        |\n| Com_show_tables                   | 0        |\n| Com_show_triggers                 | 0        |\n| Com_show_variables                | 0        |\n| Com_show_warnings                 | 0        |\n| Com_slave_start                   | 0        |\n| Com_slave_stop                    | 0        |\n| Com_stmt_close                    | 0        |\n| Com_stmt_execute                  | 0        |\n| Com_stmt_fetch                    | 0        |\n| Com_stmt_prepare                  | 0        |\n| Com_stmt_reset                    | 0        |\n| Com_stmt_send_long_data           | 0        |\n| Com_truncate                      | 0        |\n| Com_unlock_tables                 | 0        |\n| Com_update                        | 0        |\n| Com_update_multi                  | 0        |\n| Com_xa_commit                     | 0        |\n| Com_xa_end                        | 0        |\n| Com_xa_prepare                    | 0        |\n| Com_xa_recover                    | 0        |\n| Com_xa_rollback                   | 0        |\n| Com_xa_start                      | 0        |\n| Compression                       | 0        |\n| Connections                       | 0        |\n| Created_tmp_disk_tables           | 0        |\n| Created_tmp_files                 | 0        |\n| Created_tmp_tables                | 1        |\n| Delayed_errors                    | 0        |\n| Delayed_insert_threads            | 0        |\n| Delayed_writes                    | 0        |\n| Flush_commands                    | 0        |\n| Handler_commit                    | 0        |\n| Handler_delete                    | 0        |\n| Handler_discover                  | 0        |\n| Handler_prepare                   | 0        |\n| Handler_read_first                | 0        |\n| Handler_read_key                  | 0        |\n| Handler_read_next                 | 0        |\n| Handler_read_prev                 | 0        |\n| Handler_read_rnd                  | 0        |\n| Handler_read_rnd_next             | 253      |\n| Handler_rollback                  | 0        |\n| Handler_savepoint                 | 0        |\n| Handler_savepoint_rollback        | 0        |\n| Handler_update                    | 0        |\n| Handler_write                     | 252      |\n| Innodb_buffer_pool_pages_data     | 0        |\n| Innodb_buffer_pool_pages_dirty    | 0        |\n| Innodb_buffer_pool_pages_flushed  | 0        |\n| Innodb_buffer_pool_pages_free     | 0        |\n| Innodb_buffer_pool_pages_misc     | 0        |\n| Innodb_buffer_pool_pages_total    | 0        |\n| Innodb_buffer_pool_read_ahead_rnd | 0        |\n| Innodb_buffer_pool_read_ahead_seq | 0        |\n| Innodb_buffer_pool_read_requests  | 0        |\n| Innodb_buffer_pool_reads          | 0        |\n| Innodb_buffer_pool_wait_free      | 0        |\n| Innodb_buffer_pool_write_requests | 0        |\n| Innodb_data_fsyncs                | 0        |\n| Innodb_data_pending_fsyncs        | 0        |\n| Innodb_data_pending_reads         | 0        |\n| Innodb_data_pending_writes        | 0        |\n| Innodb_data_read                  | 0        |\n| Innodb_data_reads                 | 0        |\n| Innodb_data_writes                | 0        |\n| Innodb_data_written               | 0        |\n| Innodb_dblwr_pages_written        | 0        |\n| Innodb_dblwr_writes               | 0        |\n| Innodb_log_waits                  | 0        |\n| Innodb_log_write_requests         | 0        |\n| Innodb_log_writes                 | 0        |\n| Innodb_os_log_fsyncs              | 0        |\n| Innodb_os_log_pending_fsyncs      | 0        |\n| Innodb_os_log_pending_writes      | 0        |\n| Innodb_os_log_written             | 0        |\n| Innodb_page_size                  | 0        |\n| Innodb_pages_created              | 0        |\n| Innodb_pages_read                 | 0        |\n| Innodb_pages_written              | 0        |\n| Innodb_row_lock_current_waits     | 0        |\n| Innodb_row_lock_time              | 0        |\n| Innodb_row_lock_time_avg          | 0        |\n| Innodb_row_lock_time_max          | 0        |\n| Innodb_row_lock_waits             | 0        |\n| Innodb_rows_deleted               | 0        |\n| Innodb_rows_inserted              | 0        |\n| Innodb_rows_read                  | 0        |\n| Innodb_rows_updated               | 0        |\n| Key_blocks_not_flushed            | 0        |\n| Key_blocks_unused                 | 0        |\n| Key_blocks_used                   | 0        |\n| Key_read_requests                 | 0        |\n| Key_reads                         | 0        |\n| Key_write_requests                | 0        |\n| Key_writes                        | 0        |\n| Last_query_cost                   | 0        |\n| Max_used_connections              | 0        |\n| Ndb_cluster_node_id               | 0        |\n| Ndb_config_from_host              | 0        |\n| Ndb_config_from_port              | 0        |\n| Ndb_number_of_data_nodes          | 0        |\n| Not_flushed_delayed_rows          | 0        |\n| Open_files                        | 0        |\n| Open_streams                      | 0        |\n| Open_tables                       | 0        |\n| Opened_tables                     | 0        |\n| Prepared_stmt_count               | 0        |\n| Qcache_free_blocks                | 0        |\n| Qcache_free_memory                | 0        |\n| Qcache_hits                       | 0        |\n| Qcache_inserts                    | 0        |\n| Qcache_lowmem_prunes              | 0        |\n| Qcache_not_cached                 | 0        |\n| Qcache_queries_in_cache           | 0        |\n| Qcache_total_blocks               | 0        |\n| Questions                         | 1        |\n| Rpl_status                        | 0        |\n| Select_full_join                  | 0        |\n| Select_full_range_join            | 0        |\n| Select_range                      | 0        |\n| Select_range_check                | 0        |\n| Select_scan                       | 1        |\n| Slave_open_temp_tables            | 0        |\n| Slave_retried_transactions        | 0        |\n| Slave_running                     | 0        |\n| Slow_launch_threads               | 0        |\n| Slow_queries                      | 0        |\n| Sort_merge_passes                 | 0        |\n| Sort_range                        | 0        |\n| Sort_rows                         | 0        |\n| Sort_scan                         | 0        |\n| Ssl_accept_renegotiates           | 0        |\n| Ssl_accepts                       | 0        |\n| Ssl_callback_cache_hits           | 0        |\n| Ssl_cipher                        | 0        |\n| Ssl_cipher_list                   | 0        |\n| Ssl_client_connects               | 0        |\n| Ssl_connect_renegotiates          | 0        |\n| Ssl_ctx_verify_depth              | 0        |\n| Ssl_ctx_verify_mode               | 0        |\n| Ssl_default_timeout               | 0        |\n| Ssl_finished_accepts              | 0        |\n| Ssl_finished_connects             | 0        |\n| Ssl_session_cache_hits            | 0        |\n| Ssl_session_cache_misses          | 0        |\n| Ssl_session_cache_mode            | 0        |\n| Ssl_session_cache_overflows       | 0        |\n| Ssl_session_cache_size            | 0        |\n| Ssl_session_cache_timeouts        | 0        |\n| Ssl_sessions_reused               | 0        |\n| Ssl_used_session_cache_entries    | 0        |\n| Ssl_verify_depth                  | 0        |\n| Ssl_verify_mode                   | 0        |\n| Ssl_version                       | 0        |\n| Table_locks_immediate             | 0        |\n| Table_locks_waited                | 0        |\n| Tc_log_max_pages_used             | 0        |\n| Tc_log_page_size                  | 0        |\n| Tc_log_page_waits                 | 0        |\n| Threads_cached                    | 0        |\n| Threads_connected                 | 0        |\n| Threads_created                   | 0        |\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries from MySQL Slow Query Log\nDESCRIPTION: Series of SELECT statements retrieving sequential numeric values from table 'foo'. Each query runs with 0.000899 seconds query time, 0 lock time, and examines 0 rows. Queries are executed by user@1.2.3.4 on db schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1142 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Transaction Causing Deadlock (SQL)\nDESCRIPTION: This SQL statement is an INSERT operation targeting the `db.gr_v3_response_log` table. It was part of transaction 3BF88F886, which was active for 0 seconds and caused a deadlock while attempting to acquire an AUTO-INC lock. The specific values being inserted are truncated ('...') in the log output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-deadlock-logger/samples/bug_1195034.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO gr_v3_response_log (query_key, time_received, time_to_respond, status, raw_response, api_host, api_path, api_client) VALUES ('...\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Record by ID Using MySQL SQL\nDESCRIPTION: This snippet switches the database context to 'db1' and queries the 'tbl' table for a record with 'id' equal to 1. Performance diagnostics from Percona Toolkit precede the statement, enabling analysis of query efficiency. Dependencies include the existence of 'db1' and 'tbl', with access permissions. Input is implicit in the query; output is the row(s) matching the specified ID. The main constraint is that the ID must exist in 'tbl'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 1.726052  Lock_time: 0.010093  Rows_sent: 1  Rows_examined: 1\\n# QC_Hit: No  Full_scan: No  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db1;\\nSELECT id FROM tbl WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Fixing pt-agent Uninstallation (Bash)\nDESCRIPTION: Fixes an issue (bug 1251726) where `pt-agent --uninstall` would fail if the agent process was currently running. The uninstallation process should now handle this scenario more gracefully. Note: `pt-agent` was replaced by `percona-agent`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# General usage for uninstallation\npt-agent --uninstall\n```\n\n----------------------------------------\n\nTITLE: Displaying Device I/O Performance Metrics in Plaintext\nDESCRIPTION: This snippet shows a tabular representation of I/O performance metrics for various storage devices. It includes data on read/write rates, concurrency, response times, and device utilization percentages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 40.1 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sda           0.0    0.0     4.0     0.0    0.0     0.1   1%      0\n 40.1 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sda6          0.0    0.0     4.0     0.0    0.0     0.1   1%      0\n 40.1 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 dm-6          0.0    0.0     4.0     0.1    0.0     0.1   1%      0\n 40.1 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 40.1 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry 1\nDESCRIPTION: Slow query log entry showing a SELECT query with performance metrics including query time of 0.000173 seconds, lock time of 0.000048 seconds, examining 18 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow044.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 100525 10:22:00\n# User@Host: foo[foo] @ [host]\n# Thread_id: 342 Schema:  Last_errno: 1 Killed: 2\n# Query_time: 0.000173 Lock_time: 0.000048 Rows_sent: 18 Rows_examined: 18\nselect /*this is only parsable by slowlog-to-outfile, not by mqd*/ foo;\n```\n\n----------------------------------------\n\nTITLE: MySQL Select Query with Performance Metrics\nDESCRIPTION: A MySQL SELECT query with multiple JOIN conditions and comparison operators. The query includes execution metrics like query time (0.000173s), lock time (0.000048s), and row statistics (18 rows sent/examined/read).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow046.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000173 Lock_time: 0.000048 Rows_sent: 18 Rows_examined: 18 Rows_affected: 0 Rows_read: 18\nselect abc, XYZ FROM `a tbl`, `t-2` WHERE 1 != 2 AND 3<>3 OR \"�\" OR '\"`\"';\n```\n\n----------------------------------------\n\nTITLE: Analyzing Installed Memory Device Configuration\nDESCRIPTION: This snippet details the configuration of an installed memory device, including its size, form factor, speed, manufacturer, and other specifications.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-005.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0017, DMI type 17, 28 bytes\nMemory Device\n\tArray Handle: 0x0015\n\tError Information Handle: Not Provided\n\tTotal Width: 72 bits\n\tData Width: 64 bits\n\tSize: 16384 MB\n\tForm Factor: DIMM\n\tSet: None\n\tLocator: P1-DIMM1A\n\tBank Locator: BANK0\n\tType: <OUT OF SPEC>\n\tType Detail: Other\n\tSpeed: 1066 MHz (0.9 ns)\n\tManufacturer: Hyundai       \n\tSerial Number: 6ABA301E\n\tAsset Tag:             \n\tPart Number: HMT42GR7AMR4C-G7  \n```\n\n----------------------------------------\n\nTITLE: Select Query with Where Clause\nDESCRIPTION: SELECT query filtering records from foo table with a WHERE condition. Query time: 0.000002s, Lock time: 0s, Rows sent: 5, Rows examined: 3.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow020.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM foo\nWHERE bar = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Checksums Table Creation - MySQL\nDESCRIPTION: Creates a table for storing checksums with a varchar primary key and unsigned int checksum field.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE percona_test.checksums(\n          db_tbl varchar(128) not null primary key,\n          checksum int unsigned not null)\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with EXPLAIN Analysis\nDESCRIPTION: Simple SELECT query retrieving fruit data from trees table, using an index scan. The query executed in 12 microseconds with no lock time and accessed 3 rows via the 'fruit' index.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_2-51.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from foo1 Table in SQL\nDESCRIPTION: This SQL query selects all columns (`*`) from the table named `foo1`. It's shown within the context of an active database process (Id: 1, User: user1, Host: 1.2.3.4:3333, db: foo) which has been running for 4 seconds and is currently in a 'Locked' state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from foo1;\n```\n\n----------------------------------------\n\nTITLE: Conditional Update Query in MySQL\nDESCRIPTION: This query updates the 'boop' column in the bizzle.bat table to a specific value where the 'fillze' column matches a given condition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE bizzle.bat\nSET    boop='bop: 899'\nWHERE  fillze='899'\n```\n\n----------------------------------------\n\nTITLE: Selecting Database in SQL Session\nDESCRIPTION: SQL command to set the active database to 'bar' at the beginning of a session.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006-session-2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse bar\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Database with Metadata Logging - SQL\nDESCRIPTION: These SQL code snippets demonstrate simple 'SELECT' queries retrieving individual constant values (thread IDs) from a table named 'foo', alongside Percona Toolkit or MySQL slow query log metadata headers. Each log entry provides details on the user, schema, query time, lock time, rows sent, and whether InnoDB statistics are available. The code requires a running MySQL-compatible database and assumes the 'foo' table exists. Inputs are the thread ID constants and outputs are single-row, single-column results per query. The context targets query profiling and auditing, not application-level data retrieval.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 747 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 747 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 748 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 748 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 749 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 749 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 750 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 750 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 751 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 751 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 752 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 752 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 753 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 753 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 754 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 754 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 755 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 755 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 756 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 756 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 757 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 757 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 758 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 758 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 759 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 759 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 760 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 760 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 761 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 761 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 762 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 762 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 763 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 763 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 764 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 764 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 765 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 765 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 766 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 766 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 767 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 767 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 768 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 768 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 769 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 769 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 770 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 770 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 771 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 771 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 772 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 772 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 773 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 773 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 774 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 774 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 775 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 775 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 776 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 776 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 777 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 777 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 778 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 778 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 779 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 779 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 780 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 780 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 781 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 781 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 782 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 782 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 783 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 783 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 784 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 784 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 785 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 785 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 786 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 786 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 787 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 787 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 788 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 788 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 789 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 789 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 790 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 790 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 791 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 791 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 792 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 792 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 793 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 793 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 794 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 794 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\\n# Thread_id: 795 Schema: db\\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\\n# No InnoDB statistics available for this query\\nSELECT 795 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Configuring PodioSync Connection Parameters\nDESCRIPTION: Example configuration file showing the connection parameters needed for PodioSync to connect to both Podio and target SQL database. It includes credentials for Podio API and database connection details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npodio:\n  client_id: PODIO_CLIENT_ID\n  client_secret: PODIO_CLIENT_SECRET\n  username: PODIO_USERNAME\n  password: PODIO_PASSWORD\n\ndatabase:\n  connection_string: 'mssql+pyodbc://username:password@host/database?driver=ODBC+Driver+17+for+SQL+Server'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Patch MySQL Version with version_patch Function\nDESCRIPTION: Example of using the sys.version_patch function to obtain the patch release version number of the MySQL Server. Returns a TINYINT UNSIGNED value representing the patch version component.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_135\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT VERSION(), sys.version_patch();\n+--------------------------------------+---------------------+\n| VERSION()                            | sys.version_patch() |\n+--------------------------------------+---------------------+\n| 5.7.9-enterprise-commercial-advanced | 9                   |\n+--------------------------------------+---------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating store table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the store table, which represents physical store locations. It includes foreign key constraints referencing the staff and address tables, and uses auto-increment for the store_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_40\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint unsigned NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying Fruit from Trees Table in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table. It's a simple SELECT statement that retrieves all fruit entries from the trees table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Querying schema_index_statistics Example - SQL\nDESCRIPTION: This example selects five rows from the 'schema_index_statistics' table to return sample index contention and latency statistics for different indexes. The query output shows schema, table, index, and performance data suitable for tuning efforts or monitoring index-level contention. Input: none required beyond table access; Output: per-index usage and timing stats in tabular form.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_54\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_index_statistics limit 5;\n+------------------+-------------+------------+---------------+----------------+---------------+----------------+--------------+----------------+--------------+----------------+\n| table_schema     | table_name  | index_name | rows_selected | select_latency | rows_inserted | insert_latency | rows_updated | update_latency | rows_deleted | delete_latency |\n+------------------+-------------+------------+---------------+----------------+---------------+----------------+--------------+----------------+--------------+----------------+\n| mem              | mysqlserver | PRIMARY    |          6208 | 108.27 ms      |             0 | 0 ps           |         5470 | 1.47 s         |            0 | 0 ps           |\n| mem              | innodb      | PRIMARY    |          4666 | 76.27 ms       |             0 | 0 ps           |         4454 | 571.47 ms      |            0 | 0 ps           |\n| mem              | connection  | PRIMARY    |          1064 | 20.98 ms       |             0 | 0 ps           |         1064 | 457.30 ms      |            0 | 0 ps           |\n| mem              | environment | PRIMARY    |          5566 | 151.17 ms      |             0 | 0 ps           |          694 | 252.57 ms      |            0 | 0 ps           |\n| mem              | querycache  | PRIMARY    |          1698 | 27.99 ms       |             0 | 0 ps           |         1698 | 371.72 ms      |            0 | 0 ps           |\n+------------------+-------------+------------+---------------+----------------+---------------+----------------+--------------+----------------+--------------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Distinct Additional Content Value Query\nDESCRIPTION: Query to fetch distinct additional content values based on city and partner filters. Joins tree code and tree tables with additional content information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct treeaddit0_.value as col_0_0_ from treeADDITIONALCONTENT treeaddit0_, treeCODE treecode1_, tree tree4_ where treecode1_.treeid=tree4_.treeid and treeaddit0_.treecodeid=treecode1_.treecodeid and (treecode1_.treeid in (select tree2_.treeid from tree tree2_ where tree2_.qcnscityid=788013)) and treeaddit0_.additionaltypeid=4 and tree4_.partnerid=4\n```\n\n----------------------------------------\n\nTITLE: Creating help_keyword Table for Help Keywords - MySQL - SQL\nDESCRIPTION: Defines the help_keyword table, mapping keyword phrases to unique IDs for MySQL's online help documentation system. The table enforces uniqueness with both primary and unique keys on IDs and names. It is designed to support keyword-based help topic retrieval and requires a UTF-8 compatible MySQL server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Session Parameters\nDESCRIPTION: Configures session-specific settings for foreign key checks, SQL auto-null, unique checks, and SQL mode.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog002.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET TIMESTAMP=1248268919/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=1, @@session.unique_checks=1/*!*/;\nSET @@session.sql_mode=0/*!*/;\n/*!\\C latin1 *//*!*/;\nSET @@session.character_set_client=8,@@session.collation_connection=8,@@session.collation_server=8/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Querying User Statement Type Summary in MySQL\nDESCRIPTION: Example query showing statement execution statistics per user, including counts, latency metrics, and resource usage statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_102\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from user_summary_by_statement_type;\n```\n\n----------------------------------------\n\nTITLE: Querying User ID by Name in MySQL\nDESCRIPTION: This query selects a user ID from the users table where the name equals 'baouong'. The slow query log shows it took 0.000652 seconds with a lock time of 0.000109 seconds, returning 1 row after examining 1 row.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/microslow001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id FROM users WHERE name='baouong';\n```\n\n----------------------------------------\n\nTITLE: Insert Table Chunk Checksum\nDESCRIPTION: Calculates and stores checksum for a specific chunk of table data using CRC32 hash of concatenated column values. Uses FORCE INDEX to ensure primary key usage and includes boundary conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `i`, `y`, CRC32(`t`), CONCAT(ISNULL(`t`)))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `issue_519`.`t` FORCE INDEX(`PRIMARY`) WHERE ((`i` >= ?)) AND ((`i` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: MySQL File I/O Type Summary Table Structure\nDESCRIPTION: Shows the structure for user_summary_by_file_io_type and x$user_summary_by_file_io_type views that break down file I/O by event type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_88\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_file_io_type;\n+-------------+---------------------+------+-----+---------+-------+\n| Field       | Type                | Null | Key | Default | Extra |\n+-------------+---------------------+------+-----+---------+-------+\n| user        | varchar(32)         | YES  |     | NULL    |       |\n| event_name  | varchar(128)        | NO   |     | NULL    |       |\n| total       | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency     | text                | YES  |     | NULL    |       |\n| max_latency | text                | YES  |     | NULL    |       |\n+-------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Updating Table 'a' in MySQL Database (Transaction 2)\nDESCRIPTION: This SQL statement is part of the second transaction involved in the deadlock. It attempts to update the 'movie_id' column for a different row in table 'a'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-deadlock-logger/samples/bug_1082104.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate a set movie_id=98 where id =4\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Statistics (Snapshot 4 - Partial)\nDESCRIPTION: This snippet shows the beginning of the fourth snapshot of disk I/O statistics, captured at timestamp 4.0. It includes the header and data for the RAM disks and the primary sda device and its partitions. The data follows the same metric format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  4.0 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 sda           0.0    0.0     1.0     0.0    0.0     0.0   0%      0\n  4.0 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Optimization Parameters\nDESCRIPTION: Parameters affecting query optimization, join behavior, and sort operations\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_7\n\nLANGUAGE: mysql\nCODE:\n```\n--optimizer_prune_level[=#] \n--optimizer_search_depth[=#] \n--join_buffer_size=# \n--key_buffer_size=# \n--max_join_size=# \n--max_length_for_sort_data=#\n```\n\n----------------------------------------\n\nTITLE: Defining sakila.film_category Table Schema (Partial SQL)\nDESCRIPTION: This SQL snippet shows the beginning of the `CREATE TABLE` statement for the `film_category` table in the `sakila` database. It is intended to link films and categories. The snippet defines the `film_id` column, which is expected to be part of a composite primary key and a foreign key referencing the `film` table. The full definition would also include `category_id` and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint unsigned NOT NULL,\n```\n\n----------------------------------------\n\nTITLE: Defining the 'func' Table for User-Defined Functions - MySQL - SQL\nDESCRIPTION: Defines 'func' table for storing user-defined functions metadata, including name, return type, dynamic library reference, and function type. Used by MySQL to manage internal and aggregate functions introduced by users. Relies on correct referencing of external dynamic libraries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) collate utf8_bin NOT NULL default '',\n  `ret` tinyint(1) NOT NULL default '0',\n  `dl` char(128) collate utf8_bin NOT NULL default '',\n  `type` enum('function','aggregate') character set utf8 NOT NULL,\n  PRIMARY KEY  (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Creating Time Zone Related Tables in MySQL\nDESCRIPTION: Schema definitions for time zone related tables including time_zone, time_zone_leap_second, time_zone_name, time_zone_transition, and time_zone_transition_type tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones';\n```\n\n----------------------------------------\n\nTITLE: Displaying InnoDB Monitor Output\nDESCRIPTION: A complete InnoDB status report showing database internals including semaphores, foreign key errors, transactions, file I/O, buffer pool statistics, and row operations. The report indicates a foreign key constraint failure when inserting data into table t2.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is002.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=====================================\n070915 15:34:37 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 24 seconds\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 7, signal count 7\nMutex spin waits 0, rounds 60, OS waits 0\nRW-shared spins 14, OS waits 7; RW-excl spins 1, OS waits 0\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n070915 15:10:24 Transaction:\nTRANSACTION 0 3358, ACTIVE 0 sec, process no 5202, OS thread id 1141152064 inserting, thread declared inside InnoDB 500\nmysql tables in use 1, locked 1\n3 lock struct(s), heap size 368, undo log entries 1\nMySQL thread id 6, query id 162 localhost root update\ninsert into t2(a) values(1)\nForeign key constraint fails for table `test/t2`:\n,\n  CONSTRAINT `t2_ibfk_1` FOREIGN KEY (`a`) REFERENCES `t1` (`a`)\nTrying to add in child table, in index `a` tuple:\nDATA TUPLE: 2 fields;\n 0: len 4; hex 80000001; asc     ;; 1: len 6; hex 000000000200; asc       ;;\n\nBut in parent table `test/t1`, in index `PRIMARY`,\nthe closest match we can find is record:\nPHYSICAL RECORD: n_fields 1; compact format; info bits 0\n 0: len 8; hex 696e66696d756d00; asc infimum ;;\n\n------------\nTRANSACTIONS\n------------\nTrx id counter 0 3359\nPurge done for trx's n:o < 0 3357 undo n:o < 0 0\nHistory list length 8\nTotal number of lock structs in row lock hash table 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 0 0, not started, process no 5202, OS thread id 1141152064\nMySQL thread id 8, query id 169 localhost root\nshow innodb status\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for i/o request (insert buffer thread)\nI/O thread 1 state: waiting for i/o request (log thread)\nI/O thread 2 state: waiting for i/o request (read thread)\nI/O thread 3 state: waiting for i/o request (write thread)\nPending normal aio reads: 0, aio writes: 0,\n ibuf aio reads: 0, log i/o's: 0, sync i/o's: 0\nPending flushes (fsync) log: 0; buffer pool: 0\n42 OS file reads, 63 OS file writes, 55 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2,\n0 inserts, 0 merged recs, 0 merges\nHash table size 17393, used cells 0, node heap has 1 buffer(s)\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 0 68906\nLog flushed up to   0 68906\nLast checkpoint at  0 68906\n0 pending log writes, 0 pending chkp writes\n31 log i/o's done, 0.00 log i/o's/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 20556394; in additional pool allocated 713728\nBuffer pool size   512\nFree buffers       480\nDatabase pages     31\nModified db pages  0\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages read 33, created 15, written 54\n0.00 reads/s, 0.00 creates/s, 0.00 writes/s\nNo buffer pool page gets since the last printout\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n1 read views open inside InnoDB\nMain thread process no. 5202, id 1140881728, state: waiting for server activity\nNumber of rows inserted 0, updated 0, deleted 0, read 0\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n```\n\n----------------------------------------\n\nTITLE: Listing Replication Conflicts\nDESCRIPTION: List replication failures in Galera 4 using pt-galera-log-explainer. Output can be displayed in JSON or YAML format, providing detailed insights into replication issues.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer conflicts [--json|--yaml] *.log\n```\n\n----------------------------------------\n\nTITLE: Querying Memory Usage by Thread - MySQL SQL\nDESCRIPTION: This query selects the first five rows from 'sys.memory_by_thread_by_current_bytes', yielding per-thread memory consumption statistics. It's useful for real-time monitoring of resource usage, and expects a MySQL 5.7+ server with the Performance Schema and sys schema enabled. Inputs include no parameters; outputs are table-formatted rows showing thread IDs, users, and detailed memory usage. Limitations include accuracy dependent on schema support and instrumentation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_36\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.memory_by_thread_by_current_bytes limit 5;\n+-----------+----------------+--------------------+-------------------+-------------------+-------------------+-----------------+\n| thread_id | user           | current_count_used | current_allocated | current_avg_alloc | current_max_alloc | total_allocated |\n+-----------+----------------+--------------------+-------------------+-------------------+-------------------+-----------------+\n|         1 | sql/main       |              29333 | 166.02 MiB        | 5.80 KiB          | 131.13 MiB        | 196.00 MiB      |\n|        55 | root@localhost |                175 | 1.04 MiB          | 6.09 KiB          | 350.86 KiB        | 67.37 MiB       |\n|        58 | root@localhost |                236 | 368.13 KiB        | 1.56 KiB          | 312.05 KiB        | 130.34 MiB      |\n|       904 | root@localhost |                 32 | 18.00 KiB         | 576 bytes         | 16.00 KiB         | 6.68 MiB        |\n|       970 | root@localhost |                 12 | 16.80 KiB         | 1.40 KiB          | 16.00 KiB         | 1.20 MiB        |\n+-----------+----------------+--------------------+-------------------+-------------------+-------------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Query in MySQL\nDESCRIPTION: This snippet represents a series of similar SELECT queries executed on the 'foo' table. Each query selects a single integer value, with the value incrementing for each subsequent query. The queries are accompanied by performance metrics and user information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1044 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Preparing and Explaining a Parameterized Query - MySQL - SQL\nDESCRIPTION: Prepares a parameterized SELECT query using placeholders for three columns and presents its EXPLAIN plan for performance analysis. This snippet relies on a MySQL-compatible environment and requires that the table 'd.t3' exists with columns named 'v', 'c', and 'f'. Inputs include parameter values for v, c, and f; outputs are matching rows from the table or EXPLAIN results. Used for profiling and optimizing query execution in reporting or diagnostic contexts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump024.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nPREPARE SELECT * FROM d.t3 WHERE v=? OR c=? OR f=?\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# EXPLAIN /*!50100 PARTITIONS*/\\nSELECT * FROM d.t3 WHERE v=? OR c=? OR f=?\\G\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL schema_index_statistics Structure\nDESCRIPTION: Shows the structure of schema_index_statistics and its raw counterpart x$schema_index_statistics which provide metrics on index usage including rows affected and latency for different operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_50\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_index_statistics;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| table_schema   | varchar(64)         | YES  |     | NULL    |       |\n| table_name     | varchar(64)         | YES  |     | NULL    |       |\n| index_name     | varchar(64)         | YES  |     | NULL    |       |\n| rows_selected  | bigint(20) unsigned | NO   |     | NULL    |       |\n| select_latency | text                | YES  |     | NULL    |       |\n| rows_inserted  | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency | text                | YES  |     | NULL    |       |\n| rows_updated   | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency | text                | YES  |     | NULL    |       |\n| rows_deleted   | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency | text                | YES  |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n11 rows in set (0.17 sec)\n\nmysql> desc x$schema_index_statistics;\n+----------------+---------------------+------+-----+---------+-------+\n| Field          | Type                | Null | Key | Default | Extra |\n+----------------+---------------------+------+-----+---------+-------+\n| table_schema   | varchar(64)         | YES  |     | NULL    |       |\n| table_name     | varchar(64)         | YES  |     | NULL    |       |\n| index_name     | varchar(64)         | YES  |     | NULL    |       |\n| rows_selected  | bigint(20) unsigned | NO   |     | NULL    |       |\n| select_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_inserted  | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_updated   | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_deleted   | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n+----------------+---------------------+------+-----+---------+-------+\n11 rows in set (0.42 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Insert Packet Capture\nDESCRIPTION: TCP packet containing a MySQL insert statement sent from localhost:38381 to localhost:3306. The packet includes timestamp, IP information, and hex dump showing the query 'insert into t values(current_date)'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump007.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 005b a04e 4000 4006 9c44 7f00 0001\n7f00 0001 95ed 0cea be95 2bfa be35 a35c\n8018 0212 fe4f 0000 0101 080a 00bd a97c\n00bd 9b95 2300 0000 0369 6e73 6572 7420\n696e 746f 2074 2076 616c 7565 7328 6375\n7272 656e 745f 6461 7465 29\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry - Final Query\nDESCRIPTION: Final slow query log entry showing a longer-running query in schema 'db2' with higher query and lock times, followed by session termination.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow019.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 7  Schema: db2\n# Query_time: 0.018799  Lock_time: 0.009453  Rows_sent: 9  Rows_examined: 2\n# No InnoDB statistics available for this query\nuse db2;\n# administrator command: Quit;\n```\n\n----------------------------------------\n\nTITLE: TCP Connection Status Output\nDESCRIPTION: Network connection status showing TCP connections including established MySQL connections on port 3306, listening services on ports 80, 443, 22, and Java processes. Output includes connection states, process IDs, and service names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp        0      0 10.17.146.20:3306           10.17.85.100:54362          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46699           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:40571          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47978           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48234           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:45930           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.100:54360          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46957           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60514           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.100:54355          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48224           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.200:56435          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47715           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.100:54352          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46949           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.200:56438          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35689           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47974           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60520           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35703           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:53864          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48248           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:45944           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60534           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47739           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46459           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48253           ESTABLISHED -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46973           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:45948           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48255           ESTABLISHED -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48254           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.200:56429          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:58976          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47216           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46194           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46706           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46453           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:45941           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48245           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60539           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60538           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46711           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35704           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46198           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:45671          ESTABLISHED 14469/mysqld        \ntcp        0      0 :::34570                    :::*                        LISTEN      9064/java           \ntcp        0      0 :::34571                    :::*                        LISTEN      9064/java           \ntcp        0      0 :::34572                    :::*                        LISTEN      9064/java           \ntcp        0      0 :::34573                    :::*                        LISTEN      9064/java           \ntcp        0      0 :::80                       :::*                        LISTEN      8789/httpd          \ntcp        0      0 :::22                       :::*                        LISTEN      8332/sshd           \ntcp        0      0 :::443                      :::*                        LISTEN      8789/httpd          \ntcp        0  62448 ::ffff:208.43.215.4:22      ::ffff:74.86.244.122:39224  ESTABLISHED 16736/0             \n```\n\n----------------------------------------\n\nTITLE: Adding Values to SQL Mode Using list_add in MySQL\nDESCRIPTION: Example showing how to add 'ANSI_QUOTES' to the current SQL mode using the sys.list_add() function. The function takes the current value of @@sql_mode and adds the specified value to the comma-separated list.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_122\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select @@sql_mode;\n+-----------------------------------------------------------------------------------+\n| @@sql_mode                                                                        |\n+-----------------------------------------------------------------------------------+\n| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> set sql_mode = sys.list_add(@@sql_mode, 'ANSI_QUOTES');\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> select @@sql_mode;\n+-----------------------------------------------------------------------------------------------+\n| @@sql_mode                                                                                    |\n+-----------------------------------------------------------------------------------------------+\n| ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: MySQL Query for Brazilian Cities\nDESCRIPTION: SQL query that joins city and country tables to find Brazilian cities starting with 'A'. The query includes timing metrics from the slow query log showing execution time of 0.0003 seconds and examining 1 row.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect country.country, city.city from city join country using (country_id) where country = 'Brazil' and city like 'A%' limit 1;\n```\n\n----------------------------------------\n\nTITLE: Describing innodb_buffer_stats_by_schema Tables in MySQL\nDESCRIPTION: Shows the structure of innodb_buffer_stats_by_schema and x$innodb_buffer_stats_by_schema tables, which aggregate InnoDB buffer pool statistics by schema. These tables track metrics like memory allocation, page counts, and cached rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc innodb_buffer_stats_by_schema;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| allocated     | text          | YES  |     | NULL    |       |\n| data          | text          | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n7 rows in set (0.08 sec)\n\nmysql> desc x$innodb_buffer_stats_by_schema;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| allocated     | decimal(43,0) | YES  |     | NULL    |       |\n| data          | decimal(43,0) | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | NO   |     | 0       |       |\n+---------------+---------------+------+-----+---------+-------+\n7 rows in set (0.12 sec)\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries with Performance Metrics\nDESCRIPTION: A series of SELECT queries executed by the same user with identical performance characteristics (Query_time: 0.000899, Lock_time: 0.000000). Each query selects a single numeric value from the 'foo' table with no InnoDB statistics available.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 51 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Creating Table Privileges Management Table in MySQL\nDESCRIPTION: Schema definition for the tables_priv table that manages table-level privileges including SELECT, INSERT, UPDATE and other permissions for users.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges';\n```\n\n----------------------------------------\n\nTITLE: Creating help_relation Table for Keyword-Topic Relationships - MySQL - SQL\nDESCRIPTION: Creates the help_relation table to map relationships between help keywords and help topics within MySQL's help system. Includes composite primary key to ensure unique keyword-topic pairs and enables efficient lookups of topics related to a given keyword. Depends on the structural integrity of help_keyword and help_topic tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Altering Table Keys in MySQL\nDESCRIPTION: This SQL code snippet demonstrates how to alter a MySQL database table by dropping non-unique keys. The command targets the `inventory` table within the `sakila` database and removes two specific keys. This operation requires access to the database with permissions to alter tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow005-report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `sakila`.`inventory` DROP KEY `idx_fk_film_id`, DROP KEY `idx_store_id_film_id`; -- type:non-unique\n```\n\n----------------------------------------\n\nTITLE: Updating vab3concept1id in vab3concept1upload table\nDESCRIPTION: An UPDATE query that sets the vab3concept1id field to a specific value for a particular record identified by vab3concept1upload='6994465'. This query took 33ms to execute without examining any rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE db4.vab3concept1upload\nSET    vab3concept1id = '91848182522'\nWHERE  vab3concept1upload='6994465'\n```\n\n----------------------------------------\n\nTITLE: Fetching Table Creation DDL in SQL\nDESCRIPTION: This SQL command fetches the `CREATE TABLE` statement for the table 'tbl' in the 'foodb' database. This is often used in query analysis to understand the table's structure, including columns, data types, indexes, and constraints, which significantly affect query performance. The `\\G` terminator requests vertical output format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report003.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `foodb`.`tbl`\\G\n```\n\n----------------------------------------\n\nTITLE: Retrieving MySQL Server Status\nDESCRIPTION: This query retrieves the current status of the MySQL server. It's executed with high execution time and lock time, affecting 226 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW STATUS\\G\n```\n\n----------------------------------------\n\nTITLE: InnoDB Configuration Details\nDESCRIPTION: A detailed overview of the InnoDB storage engine configuration, including buffer pool settings, log file configuration, concurrency settings, and transaction statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# InnoDB #####################################################\n                  Version | 1.1.8-rel24.1\n         Buffer Pool Size | 128.0M\n         Buffer Pool Fill | 2%\n        Buffer Pool Dirty | 0%\n           File Per Table | OFF\n                Page Size | 16k\n            Log File Size | 2 * 5.0M = 10.0M\n          Log Buffer Size | 8M\n             Flush Method | \n      Flush Log At Commit | 1\n               XA Support | ON\n                Checksums | ON\n              Doublewrite | ON\n          R/W I/O Threads | 4 4\n             I/O Capacity | 200\n       Thread Concurrency | 0\n      Concurrency Tickets | 500\n       Commit Concurrency | 0\n      Txn Isolation Level | REPEATABLE-READ\n        Adaptive Flushing | ON\n      Adaptive Checkpoint | \n           Checkpoint Age | 0\n             InnoDB Queue | 0 queries inside InnoDB, 0 queries in queue\n       Oldest Transaction | 0 Seconds\n         History List Len | 30\n               Read Views | 1\n         Undo Log Entries | 0 transactions, 0 total undo, 0 max undo\n        Pending I/O Reads | 0 buf pool reads, 0 normal AIO, 0 ibuf AIO, 0 preads\n       Pending I/O Writes | 0 buf pool (0 LRU, 0 flush list, 0 page); 0 AIO, 0 sync, 0 log IO (0 log, 0 chkp); 0 pwrites\n      Pending I/O Flushes | 0 buf pool, 0 log\n       Transaction States | 1xnot started\n```\n\n----------------------------------------\n\nTITLE: Inserting values into db1.conch table\nDESCRIPTION: A simple INSERT operation adding a new record into the db1.conch table with values for word3 and vid83 columns. This query executed in 530us and accessed 18 distinct pages in InnoDB.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO db1.conch (word3, vid83)\nVALUES ('211', '18')\n```\n\n----------------------------------------\n\nTITLE: Examining Memory Array Mapped Address\nDESCRIPTION: This snippet provides information about the memory array mapped address, including starting and ending addresses, range size, and physical array handle.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-005.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0016, DMI type 19, 15 bytes\nMemory Array Mapped Address\n\tStarting Address: 0x00000000000\n\tEnding Address: 0x00C3FFFFFFF\n\tRange Size: 49 GB\n\tPhysical Array Handle: 0x0015\n\tPartition Width: 0\n```\n\n----------------------------------------\n\nTITLE: Querying Table with Incremental IDs in MySQL\nDESCRIPTION: A pattern of SELECT queries retrieving incremental numeric values from table 'foo'. Each query is executed by the same user from the same IP address with consistent execution metrics. The query time is consistently 0.000899 seconds with no rows returned despite being examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1632 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Inserting Fixed Values into Table Using SQL in MySQL\nDESCRIPTION: This snippet inserts a NULL 'id' and a fixed 'username' into table 't'. The query highlights potential warning scenarios where a long username is truncated, as indicated by warning message 'Data truncated for column \\'username\\''. The snippet is executed in a MySQL context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/003/insert_truncate_warning.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO t (id, username) VALUES (NULL, 'long_username')\n```\n\n----------------------------------------\n\nTITLE: Querying sakila.city table - MySQL\nDESCRIPTION: Basic SELECT query targeting the sakila.city table with a query ID. The query appears to be a partial or incomplete statement as it's missing the field list and has a standalone WHERE clause without conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/create-table-defs-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nQuery_id: 0x0574833D9173C28E1E0BF7001F0D58BB.1\nSELECT sakila.city\nWHERE sakila.city\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Transaction Start\nDESCRIPTION: This snippet shows the beginning of a MySQL transaction. It's a simple 'BEGIN' statement, which marks the start of a new transaction in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow003_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN\\G\n```\n\n----------------------------------------\n\nTITLE: Executing Complex SQL Query - MySQL\nDESCRIPTION: This SQL snippet selects specific fields from 'users' and 'ppls_ranks' where the condition matches. It's essential for retrieving user details based on provided ranks and orders by 'ppl_rank'. Prerequisite: Existence of 'users' and 'ppls_ranks' tables with respective fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT users.name, users.accountid, users.ppl_rank, users.level, users.id, ppls_ranks.name AS rankname FROM users, ppls_ranks WHERE users.ppl=385699 AND ppls_ranks.rank=users.ppl_rank AND ppls_ranks.ppl=385699 ORDER BY users.ppl_rank\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from 'forest' Table in SQL\nDESCRIPTION: This SQL query deletes records from the 'forest' table in the 'db3' database where the 'animal' column equals 'dead'. It's a high-impact query that examines many rows and uses temporary tables and filesort operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-inheritance.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nuse db3;\nDELETE FROM forest WHERE animal = 'dead';\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyring Plugins Status in SQL\nDESCRIPTION: The SQL snippet presents a command to show the current status of various keyring plugins. This snippet is essential for understanding the encryption status within the MySQL instance. It particularly shows 'keyring_file' as 'ACTIVE', indicating that keyring_file plugin is currently active.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc005.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n+--------------+---------------+\n| PLUGIN_NAME  | PLUGIN_STATUS |\n+--------------+---------------+\n| keyring_file | ACTIVE        |\n+--------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Creating the 'film_actor' Junction Table in SQL\nDESCRIPTION: This SQL snippet defines the `film_actor` junction table using the InnoDB engine. It represents the many-to-many relationship between films and actors. It contains `actor_id` and `film_id` columns, forming a composite primary key. Foreign keys link `actor_id` to the `actor` table and `film_id` to the `film` table, both with ON UPDATE CASCADE. An index is also created on `film_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL SHOW PROCESSLIST Output Example\nDESCRIPTION: This snippet shows the formatted output for a single row from the MySQL `SHOW PROCESSLIST` command. It details the status of connection ID 7, which is performing a 'Binlog Dump' operation, typically used for replication. The state indicates it has sent the current binary log contents and is waiting for new events.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset008.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n*************************** 1. row ***************************\n     Id: 7\n   User: msandbox\n   Host: localhost:53246\n     db: NULL\nCommand: Binlog Dump\n   Time: 1174\n  State: Has sent all binlog to slave; waiting for binlog to be updated\n   Info: NULL\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Search Table in SQL\nDESCRIPTION: Defines a MyISAM table for full-text searching of film titles and descriptions. Includes FULLTEXT index for efficient text searching.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL File IO Type Events by Host - SQL\nDESCRIPTION: Demonstrates querying the host_summary_by_file_io_type table for IO event statistics by host and event name. Returns total operation count, accumulated latency, and max latency for each event/host pair. Relies on an operational MySQL Performance Schema and adequate event data. This aids in diagnosing latency by IO type (e.g., FRM, innodb_data_file) but does not include underlying cause details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n  mysql> select * from host_summary_by_file_io_type;\n  +------------+--------------------------------------+-------+---------------+-------------+\n  | host       | event_name                           | total | total_latency | max_latency |\n  +------------+--------------------------------------+-------+---------------+-------------+\n  | hal1       | wait/io/file/sql/FRM                 |   871 | 168.15 ms     | 18.48 ms    |\n  | hal1       | wait/io/file/innodb/innodb_data_file |   173 | 129.56 ms     | 34.09 ms    |\n  | hal1       | wait/io/file/innodb/innodb_log_file  |    20 | 77.53 ms      | 60.66 ms    |\n  | hal1       | wait/io/file/myisam/dfile            |    40 | 6.54 ms       | 4.58 ms     |\n  | hal1       | wait/io/file/mysys/charset           |     3 | 4.79 ms       | 4.71 ms     |\n  | hal1       | wait/io/file/myisam/kfile            |    67 | 4.38 ms       | 300.04 us   |\n  | hal1       | wait/io/file/sql/ERRMSG              |     5 | 2.72 ms       | 1.69 ms     |\n  | hal1       | wait/io/file/sql/pid                 |     3 | 266.30 us     | 185.47 us   |\n  | hal1       | wait/io/file/sql/casetest            |     5 | 246.81 us     | 150.19 us   |\n  | hal1       | wait/io/file/sql/global_ddl_log      |     2 | 21.24 us      | 18.59 us    |\n  | hal2       | wait/io/file/sql/file_parser         |  1422 | 4.80 s        | 135.14 ms   |\n  | hal2       | wait/io/file/sql/FRM                 |   865 | 85.82 ms      | 9.81 ms     |\n  | hal2       | wait/io/file/myisam/kfile            |  1073 | 37.14 ms      | 15.79 ms    |\n  | hal2       | wait/io/file/myisam/dfile            |  2991 | 25.53 ms      | 5.25 ms     |\n  | hal2       | wait/io/file/sql/dbopt               |    20 | 1.07 ms       | 153.07 us   |\n  | hal2       | wait/io/file/sql/misc                |     4 | 59.71 us      | 33.75 us    |\n  | hal2       | wait/io/file/archive/data            |     1 | 13.91 us      | 13.91 us    |\n  +------------+--------------------------------------+-------+---------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Defining the 'db' Table for Database Privileges - MySQL - SQL\nDESCRIPTION: Defines the 'db' table for storing database-level privilege information, mapping users to privilege permissions (e.g., Select, Insert, Update) per database. Each field represents a privilege type, with enums restricting possible values. Required for MySQL privilege checks at the database level. Table uses composite primary key and allows efficient lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  PRIMARY KEY  (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with IN Clause in MySQL\nDESCRIPTION: A MySQL query that selects 'id' values from table 't' in database 'issue_611' where the id matches any value in the provided list (1, 2, or 3). This appears to be a simple lookup query using an IN clause.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow-issue-611.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id FROM issue_611.t WHERE id IN (1,2,3);\n```\n\n----------------------------------------\n\nTITLE: Replace Into Query with Subselect\nDESCRIPTION: Replaces records in test4.tbl9 using data selected from joined tables test3.tblo and test3.tbl2 with various conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nreplace into test4.tbl9(tbl5, day, todo, comment)\n select distinct o.tbl5, date(o.col3), 'misc', right('foo', 50)\n      from test3.tblo as o\n         inner join test3.tbl2 as e on o.animal = e.animal and o.oid = e.oid\n      where e.tblo is not null\n         and o.col1 > 0\n         and o.tbl2 is null\n         and o.col3 >= date_sub(current_date, interval 30 day)/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Querying schema_auto_increment_columns Example - SQL\nDESCRIPTION: This query selects five rows from the 'schema_auto_increment_columns' view, returning a cross-schema summary of auto increment column usage and statistics. It serves as a demonstration of output fields (schema, table, column, type, signed info, and increment stats) and the format of sample data. Intended for users seeking to audit or report on usage of auto-increment columns across a MySQL instance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_51\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_auto_increment_columns limit 5;\n+-------------------+-------------------+-------------+-----------+-------------+-----------+-------------+---------------------+----------------+----------------------+\n| table_schema      | table_name        | column_name | data_type | column_type | is_signed | is_unsigned | max_value           | auto_increment | auto_increment_ratio |\n+-------------------+-------------------+-------------+-----------+-------------+-----------+-------------+---------------------+----------------+----------------------+\n| test              | t1                | i           | tinyint   | tinyint(4)  |         1 |           0 |                 127 |             34 |               0.2677 |\n| mem__advisor_text | template_meta     | hib_id      | int       | int(11)     |         1 |           0 |          2147483647 |            516 |               0.0000 |\n| mem__advisors     | advisor_schedules | schedule_id | int       | int(11)     |         1 |           0 |          2147483647 |            249 |               0.0000 |\n| mem__advisors     | app_identity_path | hib_id      | int       | int(11)     |         1 |           0 |          2147483647 |            251 |               0.0000 |\n| mem__bean_config  | plists            | id          | bigint    | bigint(20)  |         1 |           0 | 9223372036854775807 |              1 |               0.0000 |\n+-------------------+-------------------+-------------+-----------+-------------+-----------+-------------+---------------------+----------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Noteworthy MySQL Technologies Overview\nDESCRIPTION: A summary of supported and enabled database technologies, showing that features like Full Text Indexing, Foreign Keys, Partitioning, and other advanced MySQL features are not enabled in this instance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Noteworthy Technologies ####################################\n       Full Text Indexing | No\n         Geospatial Types | No\n             Foreign Keys | No\n             Partitioning | No\n       InnoDB Compression | No\n                      SSL | No\n     Explicit LOCK TABLES | No\n           Delayed Insert | No\n          XA Transactions | No\n              NDB Cluster | No\n      Prepared Statements | No\n Prepared statement count | 0\n```\n\n----------------------------------------\n\nTITLE: Handling Lower Boundary for sakila.film_actor Table Checksum in MySQL\nDESCRIPTION: This SQL query handles the lower boundary of the chunk being processed for the 'film_actor' table. It counts rows below the current chunk's lower boundary, considering the composite primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`film_actor` FORCE INDEX(`PRIMARY`) WHERE ((`actor_id` < ?) OR (`actor_id` = ? AND `film_id` < ?)) ORDER BY `actor_id`, `film_id` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL TCP Connection States with netstat\nDESCRIPTION: This is the output of a netstat command showing TCP connections to MySQL servers on port 3306. It displays connection details including local address, remote address, connection state, and associated processes. Most connections are in TIME_WAIT state with a few active ESTABLISHED connections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp        0      0 10.17.146.20:3306           10.36.34.68:35510           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45744           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35497           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35955          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45742           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46510           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:54113           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34219           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47277           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45741           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46253           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34730           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46508           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41827           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45227           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41828           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45226           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34479           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45225           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35956          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35758           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35700          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34478           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47272           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46248           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45480           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45992           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45736           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36001           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34208           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47014           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:42089           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34467           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35491           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35449          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36003           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45989           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46500           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36261           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36223          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35711          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34981           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47011           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46243           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36478          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36004           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34471           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35965          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35709          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46497           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45985           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36006           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36476          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47264           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41839           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46687           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34905           TIME_WAIT   -                   \ntcp        0   1194 10.17.146.20:3306           10.36.34.68:36441           ESTABLISHED -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35929           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45406           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35714          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35416           TIME_WAIT   -                   \ntcp        0    717 10.17.146.20:3306           10.36.34.68:36440           ESTABLISHED -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34907           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35163           TIME_WAIT   -                   \ntcp        0    165 10.17.146.20:3306           10.36.34.68:36442           ESTABLISHED -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36189           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34141           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46426           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46170           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35676           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35679           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46168           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45912           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34910           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34654           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45143           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46167           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34897           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45654           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36176           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35920           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41882           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46421           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35155           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36233          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45908           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45652           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46932           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36232          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35922           TIME_WAIT   -                   \n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL Table\nDESCRIPTION: SQL command to remove a redundant unique index 'domain' from test.domains table, as it duplicates the functionality of unique_key_domain index. Both indexes constrain the domain column with identical uniqueness requirements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/simple_dupe_bug_1402730.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `test`.`domains` DROP INDEX `domain`;\n```\n\n----------------------------------------\n\nTITLE: Query for ID Range Analysis in SQL\nDESCRIPTION: Retrieves the minimum and maximum ID values from table 'tbl'. Has 19ms execution time with 9ms lock time. Executed by user 'meow' on host '1.2.3.8' in database 'db2'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow008_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MIN(id),MAX(id) FROM tbl\n```\n\n----------------------------------------\n\nTITLE: REPLACE Operations on buddy_list Table\nDESCRIPTION: Series of REPLACE INTO operations inserting new records into buddy_list table with player_id and buddy_id pairs\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_560_output_2.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `issue_560`.`buddy_list`(`player_id`, `buddy_id`) VALUES ('333', '3414');\nREPLACE INTO `issue_560`.`buddy_list`(`player_id`, `buddy_id`) VALUES ('334', '6626');\nREPLACE INTO `issue_560`.`buddy_list`(`player_id`, `buddy_id`) VALUES ('486', '1660');\n```\n\n----------------------------------------\n\nTITLE: Defining User Summary by Stages Table Structure\nDESCRIPTION: SQL table definitions for user_summary_by_stages and x$user_summary_by_stages views showing performance statistics for different SQL execution stages per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_90\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_stages;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| user          | varchar(32)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Reading Tab-Delimited Data with Mixed Types\nDESCRIPTION: Sample data in tab-separated format showing different data types: integers, text strings with special characters, floating point numbers, NULL values (represented as \\N), and ISO-format timestamps. Each row contains 8 columns with consistent formatting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/outfile001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\ta\tsome text\t3.14\t5.08\tHere's more complex text that has \"quotes\", and maybe a comma.\t2009-08-19 08:48:08\t2009-08-19 08:48:08\n2\t\tthe char and text are blank, the\t\\N\t5.09\t\t2009-08-19 08:49:17\t2009-08-19 08:49:17\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query with Performance Metrics\nDESCRIPTION: A basic SELECT query executed multiple times with performance metrics. Each execution shows a query time of 0.726052 seconds, examining 62,951 rows with full table scan and no temporary tables or file sorts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.726052  Lock_time: 0.000091  Rows_sent: 0  Rows_examined: 62951\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n# No InnoDB statistics available for this query\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'host' Table for Host Privileges - MySQL - SQL\nDESCRIPTION: Defines the 'host' table to store privileges assigned to specific hosts in MySQL, merged with database privileges. Each record grants one or more privilege flags on databases from hosts, using composite keys for identity. Used by MySQL for host-based access control.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  PRIMARY KEY  (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining NDB Binlog Index Table\nDESCRIPTION: Defines the `ndb_binlog_index` table for storing binary log index information related to NDB storage engine operations. Each row signifies log offsets and counts of data modifications, crucial for replication setups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Querying Fruit from Trees Table in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table. It's a simple SELECT statement without any conditions or joins.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow007.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT fruit FROM trees;\n```\n\n----------------------------------------\n\nTITLE: Checksumming Table Chunks in MySQL with Percona Toolkit\nDESCRIPTION: SQL query that computes checksums for a chunk of data in the test.ascii table. It calculates a count and CRC32 hash for rows within specified boundaries, storing results in the percona.checksums table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/char-chunk-ascii-explain.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `i`, convert(`c` using utf8mb4))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `test`.`ascii` FORCE INDEX(`c`) WHERE ((`c` >= ?)) AND ((`c` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Status Variables\nDESCRIPTION: SQL query to get all MySQL status variables. This provides information about server statistics and performance metrics since the server was started.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_json_report.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW GLOBAL STATUS\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Session Settings\nDESCRIPTION: Sets various MySQL session parameters including max_insert_delayed_threads and COMPLETION_TYPE.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\n```\n\n----------------------------------------\n\nTITLE: Describing memory_global_total Views in MySQL (SQL)\nDESCRIPTION: Shows the table structure for the `memory_global_total` view and its underlying `x$memory_global_total` table using the DESC command in MySQL. These views provide the total memory allocated globally within the server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc memory_global_total;\n+-----------------+------+------+-----+---------+-------+\n| Field           | Type | Null | Key | Default | Extra |\n+-----------------+------+------+-----+---------+-------+\n| total_allocated | text | YES  |     | NULL    |       |\n+-----------------+------+------+-----+---------+-------+\n1 row in set (0.07 sec)\n\nmysql> desc x$memory_global_total;\n+-----------------+---------------+------+-----+---------+-------+\n| Field           | Type          | Null | Key | Default | Extra |\n+-----------------+---------------+------+-----+---------+-------+\n| total_allocated | decimal(41,0) | YES  |     | NULL    |       |\n+-----------------+---------------+------+-----+---------+-------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying 'col' from 'foo_tbl' in MySQL\nDESCRIPTION: This query selects the 'col' column from the 'foo_tbl' table in the 'foo' database. It has a relatively low query rate of 0.05 QPS and minimal execution time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_4.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: Setting Up Film Actor Relationship Table in SQL\nDESCRIPTION: Presents the `film_actor` table, representing a many-to-many relationship between `film` and `actor` entities with necessary foreign key constraints for database integrity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_actor` (\n  `actor_id` smallint(5) unsigned NOT NULL,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`,`film_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: InnoDB Warning Log Output\nDESCRIPTION: Log entries showing multiple threads experiencing long semaphore wait times, primarily on RW-latches and mutexes. The logs show thread IDs, wait locations, and semaphore details including lock modes and wait durations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog007.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n091121 13:17:58InnoDB: Warning: cannot find a free slot for an undo log. Do you have too\nInnoDB: many active transactions running concurrently?\n091121 13:17:58InnoDB: Warning: cannot find a free slot for an undo log. Do you have too\nInnoDB: many active transactions running concurrently?\n```\n\n----------------------------------------\n\nTITLE: Querying Single Key Combinations in MySQL\nDESCRIPTION: Demonstrates querying with specific key combinations after inserting test data. The EXPLAIN and results show how the optimizer uses index merge for key1=100 AND key2=100.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nexplain select key1,key2,filler1 from t1 where key1=100 and key2=100;\nselect key1,key2,filler1 from t1 where key1=100 and key2=100;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Table\nDESCRIPTION: This SQL snippet demonstrates inserting a row into the 'vendor11gonzo' table in the 'db3' database. It inserts two values: an empty string for the 'makef' column and 'Exact' for the 'bizzle' column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow032-rewritten.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact');\n```\n\n----------------------------------------\n\nTITLE: Querying Numeric Values from MySQL Tables\nDESCRIPTION: A series of MySQL SELECT queries that fetch numeric values from a table named 'foo'. Each query selects a different numeric ID value corresponding to the thread ID. These queries have consistent execution times of 0.000899 seconds with no rows being returned despite examining 0 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1779 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1780 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1781 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1782 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1783 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1784 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1785 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1786 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1787 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1788 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1789 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1790 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1791 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1792 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1793 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1794 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1795 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1796 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1797 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1798 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1799 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1800 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1801 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1802 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1803 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1804 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1805 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1806 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1807 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1808 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1809 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1810 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1811 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1812 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1813 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1814 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1815 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1816 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1817 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1818 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1819 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1820 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1821 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1822 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1823 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1824 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1825 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1826 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1827 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Tree Information by ID in SQL\nDESCRIPTION: SQL query that retrieves comprehensive tree information from the tree table by filtering on a specific tree ID. It selects multiple columns including geographical coordinates, status information, and various identifiers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nselect tree0_.treeid as treeid7_0_, tree0_.partnermasterid as partnerm2_7_0_, tree0_.name as name7_0_, tree0_.lon as lon7_0_, tree0_.lat as lat7_0_, tree0_.lockedby as lockedby7_0_, tree0_.closure as closure7_0_, tree0_.rawtreeinfo as rawhote12_7_0_, tree0_.timestamp as timestamp7_0_, tree0_.qcnstreecode as qcnshot14_7_0_, tree0_.matchcount as matchcount7_0_, tree0_.singlevariant as singlev16_7_0_, tree0_.isactive as isactive7_0_, tree0_.poolinstanceid as poolins18_7_0_, tree0_.treestatustypeid as treest19_7_0_, tree0_.treematchtypeid as treema20_7_0_, tree0_.qcnscityid as qcnscityid7_0_, tree0_.qcnsstatusid as qcnssta22_7_0_, tree0_.qcnscrsid as qcnscrsid7_0_, tree0_.qcnscountryid as qcnscou24_7_0_, tree0_.qcnsclassificationid as qcnscla25_7_0_, tree0_.partnerid as partnerid7_0_, tree0_.qcnsrating as qcnsrating7_0_ from tree tree0_ where tree0_.treeid=54400\n```\n\n----------------------------------------\n\nTITLE: Creating the `columns_priv` Table - MySQL Privilege Management - SQL\nDESCRIPTION: Defines the `columns_priv` table to store per-column privilege assignments for MySQL users. Requires MySQL with MyISAM storage, supporting UTF8 character set and bin collation for case sensitivity. Key parameters include Host, Db, User, Table_name, Column_name, and Column_priv; the composite primary key ensures uniqueness by column. Input is internal system grants, output is privilege control at the column level for SELECT, INSERT, UPDATE, and REFERENCES.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Table_name` char(64) collate utf8_bin NOT NULL default '',\n  `Column_name` char(64) collate utf8_bin NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') character set utf8 NOT NULL default '',\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Defining help_keyword Table in SQL\nDESCRIPTION: Creates the `help_keyword` table in the `mysql` database for the server's help system. It stores keywords that can be used to search for help topics. Each keyword has a unique ID and name. This table is linked to `help_topic` via the `help_relation` table. It uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL test.domains Table\nDESCRIPTION: This SQL command removes the duplicate 'domain' index from the test.domains table. The index is redundant because it's a duplicate of the 'unique_key_domain' constraint.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/simple_dupe_bug_1217013_80.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `test`.`domains` DROP INDEX `domain`;\n```\n\n----------------------------------------\n\nTITLE: Profiling SELECT Query on Trees Table (SQL)\nDESCRIPTION: This snippet shows the output of a query profiling tool, analyzing the performance of a SELECT query on the 'trees' table. It includes metrics such as response time, number of calls, and a normalized query ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_4.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Profile\n# Rank Query ID                            Response time Calls R/Call V/M \n# ==== =================================== ============= ===== ====== ====\n#    1 0x88F3D65BE48113F18E306CDB7A800841  0.0000 100.0%     1 0.0000  0.00 SELECT trees\n```\n\n----------------------------------------\n\nTITLE: MySQL Performance Data Insert Values\nDESCRIPTION: SQL insert values containing performance metrics data points. Each row includes server ID, timestamp, metric ID, metric value, interval length, sample count, and collection metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n(8393,1236698400,1,0.0,300,300,7256314,1236699916),(8393,1236698400,2,201.36,300,300,7256314,1236699916),(8393,1236698400,3,60.024,300,300,7256314,1236699916)\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Status and Query Explain\nDESCRIPTION: A set of SQL commands to show table status, create table statement, and explain plan for a SELECT query on table 'foo' in database 'db1'. Includes performance metrics showing 0.00 QPS with 12us average execution time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-until-date.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `db1` LIKE 'foo'\\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `db1`.`foo`\\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\\G\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Insert Query\nDESCRIPTION: This SQL query inserts values into the 'tbl' table. It includes full scan operations, and it is necessary to have a 'tbl' table in the 'db2' database beforehand.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum-with-Locktime-distro.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO tbl VALUES ('a', 'b')\\G\n```\n\n----------------------------------------\n\nTITLE: Configuring PCI Bus Memory Mappings\nDESCRIPTION: This snippet details the memory mapping configuration for various PCI buses. It shows the I/O port ranges and memory ranges assigned to different PCI buses in the system hierarchy.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-001.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nbus: 00 index 0 io port: [0, ffff]\nbus: 00 index 1 mmio: [0, ffffffffffffffff]\nbus: 04 index 0 mmio: [0, 0]\nbus: 04 index 1 mmio: [f2000000, f7ffffff]\nbus: 04 index 2 mmio: [0, 0]\nbus: 04 index 3 mmio: [0, 0]\n```\n\n----------------------------------------\n\nTITLE: Cross-Database Sleep Query\nDESCRIPTION: SQL query executing a 2-second sleep operation on table 'n' in the test database while connected to sakila database. Query took 2 seconds with no lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse sakila;\nselect sleep(2) from test.n;\n```\n\n----------------------------------------\n\nTITLE: MySQL Network Packet Capture\nDESCRIPTION: A series of TCP packet captures showing MySQL protocol traffic including handshakes, authentication and queries. The packets show communication between clients at 192.168.28.223/224 and a MySQL server at 192.168.28.213.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump011.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-04-15 17:12:21.885518 IP 192.168.28.223.34033 > 192.168.28.213.mysql: tcp 0\n\t0x0000:  4500 003c 9c73 4000 4006 e343 c0a8 1cdf\n\t0x0010:  c0a8 1cd5 84f1 0cea 0f55 56b0 0000 0000\n\t0x0020:  a002 16d0 420f 0000 0204 05b4 0402 080a\n\t0x0030:  7177 cac3 0000 0000 0103 0307\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Unknown Column Error in Perl\nDESCRIPTION: This snippet performs a SQL query that results in an error due to an unknown column. The statement is wrapped in a Perl DBI method and attempts to select from a non-existent column in a table. It requires DBD::mysql as a dependency and demonstrates capturing the error message caused by this query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_both_hosts.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect nonexistent_col from test.t\n```\n\nLANGUAGE: Perl\nCODE:\n```\nDBD::mysql::st execute failed: Unknown column 'nonexistent_col' in 'field list' [for Statement \"select nonexistent_col from test.t\"]\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from Empty Table Using MySQL SQL\nDESCRIPTION: Switches to 'db2' and executes a SELECT * FROM foo; with Percona log details. No rows are sent or examined, meaning the table is empty or inaccessible. This scenario is useful for logging or checking empty-result queries. Requirements: MySQL, 'db2', and an accessible 'foo' table (even if empty or with no matching rows).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 0.726052  Lock_time: 0.100091  Rows_sent: 0  Rows_examined: 0\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db2;\\nINSERT INTO tbl VALUES ('a', 'b');\n```\n\n----------------------------------------\n\nTITLE: Explaining SELECT Query on 'blah' Table in SQL\nDESCRIPTION: Retrieves the execution plan for a query selecting all columns from the 'blah' table where the 'id' column is not NULL. The `/*!50100 PARTITIONS*/` comment ensures compatibility or specific behavior related to partitions in MySQL 5.1.0 and later. This query (ID 0xC99AD0397C9C8DCAA4EAD36B5CEB1C13) had a high execution time (avg 950ms) as per the report.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM blah WHERE id IS NOT NULL\\G\n```\n\n----------------------------------------\n\nTITLE: Setting Session Variables and Modes in MySQL - SQL\nDESCRIPTION: This snippet sets various session-level variables and SQL mode options in MySQL, preparing the session environment before executing data manipulation statements. Dependencies include a running MySQL server (version-dependent for some directives) and appropriate privileges to modify session variables. Parameters such as foreign_key_checks, sql_auto_is_null, unique_checks, sql_mode, and character set/collation influence how SQL statements behave and interact with the schema. Expected inputs are SQL command lines, and outputs are changes in the session's environment, affecting subsequent SQL commands. These statements must be executed before critical operations to ensure environmental consistency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/relay-binlog001-at-1708.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\nSET TIMESTAMP=1252592783/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=1, @@session.unique_checks=1/*!*/;\nSET @@session.sql_mode=0/*!*/;\n/*!\\C latin1 *//*!*/;\nSET @@session.character_set_client=8,@@session.collation_connection=8,@@session.collation_server=8/*!*/;\n```\n\n----------------------------------------\n\nTITLE: XtraBackup Configuration for Disabling Version Check\nDESCRIPTION: Configuration snippet showing how to permanently disable version checking in Percona XtraBackup's configuration file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/version-check.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[xtrabackup]\nno-version-check\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry with SQL Query Fragment\nDESCRIPTION: This snippet shows a MySQL slow query log entry followed by a SQL query fragment. The log entry contains detailed performance metrics for a query executed by a SQL slave, including execution time and optimization information. The query fragment appears to select a constant value of 0 with the alias 'counter'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow005.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 071218 11:48:27 # User@Host: [SQL_SLAVE] @  []\n# Thread_id: 10\n# Query_time: 0.000012  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\n# QC_Hit: No  Full_scan: No  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n# No InnoDB statistics available for this query\nfoo\nbar\n\t\t\t0 AS counter\nbaz;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_relation` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.help_relation` table, which links help topics to help keywords within the MySQL server-side help system. It acts as a mapping table between `help_topic` and `help_keyword`. The table uses the InnoDB storage engine with `STATS_PERSISTENT=0`, and its primary key is a composite of `help_keyword_id` and `help_topic_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Creating Help Keywords Table\nDESCRIPTION: Defines the `help_keyword` table which stores keywords related to help topics. This table aids in indexing help topics for better search capabilities within the MySQL help framework.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database System Variables\nDESCRIPTION: SQL query to get global MySQL system variables. This provides configuration information about how the server is currently configured.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_json_report.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW GLOBAL VARIABLES\n```\n\n----------------------------------------\n\nTITLE: Correcting Password Prompt Output for pt-show-grant (Bash)\nDESCRIPTION: Fixes the behavior of the `--ask-pass` option for `pt-show-grant`. The password prompt \"Enter password:\" is now correctly directed to STDERR instead of STDOUT, preventing it from interfering with script output or being captured unintentionally.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Example usage, prompt goes to STDERR\npt-show-grant --ask-pass [other_options]\n```\n\n----------------------------------------\n\nTITLE: Creating help_category Table in SQL\nDESCRIPTION: Describes the 'help_category' table, which structures help categories for a MySQL help system. Includes fields such as help_category_id and name, with a primary key on the help_category_id for unique identification, important for categorizing help documentation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: MySQL TCP Connection Status List\nDESCRIPTION: Network connection status output showing TCP connections to MySQL servers on port 3306. Shows source/destination IPs, connection states, and process information for MySQL daemon.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp        0      0 10.17.146.20:3306           10.17.85.86:46006           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46024           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48074           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46026           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46282           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35780           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47565           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47564           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46796           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46284           TIME_WAIT   -\n```\n\n----------------------------------------\n\nTITLE: Optimizing Duplicate Clustered Index in SQL\nDESCRIPTION: This SQL command addresses issue #295 by dropping the duplicate clustered index 'b_a' and adding a new, simplified index. It optimizes the table structure by removing redundant index information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/issue_295-51.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `issue_295`.`t` DROP INDEX `b_a`, ADD INDEX `b_a` (`b`);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Payment Table\nDESCRIPTION: An INSERT statement adding a record to the payment table in the sakila database. Contains values for payment ID, customer ID, staff ID, rental ID, amount, and timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `payment` VALUES (1,1,1,76,'2.99','2005-05-25 11:30:37','2006-02-16 05:12:30') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: Creating Sales By Store View Table\nDESCRIPTION: Creates a temporary table structure for the sales_by_store view that tracks total sales by store location and manager.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sales_by_store` (\n  `store` varchar(101),\n  `manager` varchar(91),\n  `total_sales` decimal(27,2)\n) ENGINE=MyISAM\n```\n\n----------------------------------------\n\nTITLE: Preparing a Parameterized SELECT Query - MySQL - SQL\nDESCRIPTION: This snippet shows how to prepare a parameterized SELECT statement in MySQL, enabling efficient repeated execution by compiling the query once and reusing it with different values for the placeholder. Requires a valid MySQL connection and privileges for PREPARE statements; the placeholder '?' is replaced at EXECUTE time. Input is a parameterized integer (i), and output is the queried result from column 'i' in table 'd.t'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump021.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nPREPARE SELECT i FROM d.t WHERE i=?\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT i FROM d.t WHERE i=?\\G\n```\n\n----------------------------------------\n\nTITLE: Select Query TCP Packet\nDESCRIPTION: TCP packet capture showing a simple SQL select query 'select \"hello world\" as greeting' between localhost ports 36777 and 12345\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump038.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 0059 6eb2 4000 4006 cde2 7f00 0001\n7f00 0001 8fa9 3039 ac8a 8413 ad16 9219\n8018 0201 fe4d 0000 0101 080a 0024 f99a\n0024 ed0a 2100 0000 0373 656c 6563 7420\n2268 656c 6c6f 2077 6f72 6c64 2220 6173\n2067 7265 6574 696e 67\n```\n\n----------------------------------------\n\nTITLE: Executing a Bound Query Against MySQL Table - SQL\nDESCRIPTION: Executes a SQL SELECT query with concrete parameter values (bound to initial parameterized statement). The query retrieves rows from the 'd.t3' table where column 'v' is 'hello world', or 'c' is 'a', or 'f' is '1.23'. Requires preparation of the query and assignment of parameter values. Input values must be type-compatible with respective columns. Output is the result set matching any of the conditions. Assumes all inputs exist in the specified table and schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump023.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nEXECUTE SELECT * FROM d.t3 WHERE v=\\\"hello world\\\" OR c=\\\"a\\\" OR f=\\\"1.23\\\"\\G\n```\n\n----------------------------------------\n\nTITLE: Inserting Record into vendor11gonzo Table in MySQL\nDESCRIPTION: Inserts a new record into db3.vendor11gonzo table. It sets the 'makef' column to an empty string and 'bizzle' column to 'Exact'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET timestamp=1197996507;\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact');\n```\n\n----------------------------------------\n\nTITLE: Reporting SQL Execution Error via Perl DBD::mysql\nDESCRIPTION: This text snippet shows the error message generated by the Perl DBD::mysql driver when attempting to execute the problematic SQL query 'select nonexistent_col from test.t'. The error explicitly states that the column `nonexistent_col` is unknown within the table's field list. According to the report context, this error occurred on both hosts being analyzed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_both_hosts_results.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDBD::mysql::st execute failed: Unknown column 'nonexistent_col' in 'field list' [for Statement \"select nonexistent_col from test.t\"]\n```\n\n----------------------------------------\n\nTITLE: MySQL Schema Statistics\nDESCRIPTION: Database schema overview showing table counts, storage engine distribution, and index types across different databases including mysql, percona_test, and sakila.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp007.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  Database     Tables Views SPs Trigs Funcs   FKs Partn\n  mysql            22                                  \n  percona_test      3                                  \n  sakila           16     7   3     6     3    22      \n\n  Database     MyISAM InnoDB\n  mysql            22       \n  percona_test             3\n  sakila            8     15\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement in MySQL\nDESCRIPTION: This SQL command retrieves the CREATE TABLE statement for the 'trees' table in the 'food' database. It's useful for examining the exact structure and constraints of the table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_2-80.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Executing SELECT Query on 'bar' Table in MySQL\nDESCRIPTION: This SQL query selects the 'foo' column from the 'bar' table where the 'id' is 1. It's part of a slow query log entry with various execution metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow059.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT foo FROM bar WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Checking Rows Before Lower Chunk Boundary in MySQL\nDESCRIPTION: This query counts rows that fall before the lower boundary of a chunk and stores the count in the checksums table. It provides verification data for ensuring complete chunk coverage during the checksum process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx003.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `issue_519`.`t` FORCE INDEX(`y`) WHERE ((`y` < ?)) ORDER BY `y` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Enabling Background Thread Instrumentation in Performance Schema\nDESCRIPTION: Enables all background thread instrumentation within Performance Schema. Takes no parameters and returns a summary of enabled threads.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_143\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_background_threads();\n+-------------------------------+\n| summary                       |\n+-------------------------------+\n| Enabled 18 background threads |\n+-------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Displaying Enabled Performance Schema Configuration in MySQL\nDESCRIPTION: Shows all enabled Performance Schema components including instruments and threads based on boolean parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_152\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_enabled(TRUE, TRUE);\n```\n\n----------------------------------------\n\nTITLE: IO Global File Latency Structure Definition\nDESCRIPTION: Shows the table structure for io_global_by_file_by_latency and x$io_global_by_file_by_latency views that track IO latency by file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\ndesc io_global_by_file_by_latency;\ndesc x$io_global_by_file_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into d3.t Table\nDESCRIPTION: These SQL statements insert two rows with values '1' and '2' into the 'x' column of the 't' table in the 'd3' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_631_output_2.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `d3`.`t`(`x`) VALUES ('1');\nINSERT INTO `d3`.`t`(`x`) VALUES ('2');\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Collation Connection\nDESCRIPTION: SQL command to set the collation connection to UTF-8 Unicode case-insensitive. This ensures proper character encoding for database interactions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET collation_connection = 'utf8mb4_unicode_ci'\n```\n\n----------------------------------------\n\nTITLE: Updating biz Column in foo.bar Table in MySQL\nDESCRIPTION: Updates the biz column in foo.bar table with a specific value. This operation is performed without any WHERE clause, potentially affecting all records.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE foo.bar\nSET    biz = '91848182522';\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Status Log Output\nDESCRIPTION: Comprehensive MySQL server status log showing memory usage, locks, cache statistics, and performance metrics. The log captures multiple snapshots of server status including memory allocation, thread counts, lock status, key cache performance, handler statistics and table status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog009.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n080523  7:26:27 [Warning] 'db' entry 'test nagios@4fa060606e2d579a' ignored in --skip-name-resolve mode.\n\nMemory status:\nNon-mmapped space allocated from system: 94777344\nNumber of free chunks:\t\t\t 1359\nNumber of fastbin blocks:\t\t 0\nNumber of mmapped regions:\t\t 17\nSpace in mmapped regions:\t\t 276152320\nMaximum total allocated space:\t\t 0\nSpace available in freed fastbin blocks: 0\nTotal allocated space:\t\t\t 41663312\nTotal free space:\t\t\t 53114032\nTop-most, releasable space:\t\t 19783856\nEstimated memory (with thread stack):    375123968\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from 'bar' Table in MySQL\nDESCRIPTION: This SQL query selects all records from the 'bar' table. It is executed in different databases (db1 and db2) with identical performance characteristics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30s.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows Using SQL Queries - SQL\nDESCRIPTION: This snippet demonstrates how to perform a basic SQL SELECT query to retrieve a row from table 't' where the id column equals 1. No external dependencies are needed, but the table 't' must exist in the connected database. The query returns all columns of the matching row; if no row matches, the result will be empty. Useful for fetching specific records by primary key.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/rawlogs/rawlog002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT c FROM t WHERE id=1\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query in Network Packet\nDESCRIPTION: A SQL SELECT query sent from client to server requesting data from table t2 with WHERE conditions on columns i and j. The query is embedded within a TCP packet.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump022.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT i,j FROM d.t2 WHERE i=? AND j=?\n```\n\n----------------------------------------\n\nTITLE: InnoDB Thread Lock Analysis Log\nDESCRIPTION: System log showing multiple threads waiting on semaphores with details about lock types (S-locks, X-locks), thread IDs, wait durations, and lock locations. The log culminates in a server crash due to excessive wait times.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog007.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nnumber of readers 0, waiters flag 1\nLast time read locked in file btr0sea.c line 746\nLast time write locked in file btr0cur.c line 2184\nInnoDB: Warning: a long semaphore wait:\n--Thread 1640958304 has waited at btr0sea.c line 916 for 757.00 seconds the semaphore:\nS-lock on RW-latch at 0x2a96d920b8 created in file btr0sea.c line 139\na writer (thread id 1799514464) has reserved it in mode  wait exclusive\n[...]\nInnoDB: Error: semaphore wait has lasted > 600 seconds\nInnoDB: We intentionally crash the server, because it appears to be hung.\n091205  4:49:04InnoDB: Assertion failure in thread 1525901664 in file srv0srv.c line 2093\n```\n\n----------------------------------------\n\nTITLE: Defining host Table in SQL\nDESCRIPTION: Creates the `host` table within the `mysql` database. Although structured similarly to the `db` table for storing privileges, its comment indicates its role is merged with database privileges. It historically held host-specific access control information, keyed primarily by Host and Db. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating Event Scheduler Table - MySQL - SQL\nDESCRIPTION: This CREATE TABLE statement provides the schema for the 'event' table, used to track scheduled events in MySQL. The table includes event names, scheduling information, SQL code (body), execution status, ownership details, and SQL mode options. It uses MyISAM storage and UTF-8 charset, requiring binary collation for several columns. Fields like interval_field allow storing temporal intervals, and several status fields control execution states. The schema supports flexibility for different event lifecycle stages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(93) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Disabling Background Thread Instrumentation in Performance Schema\nDESCRIPTION: Disables all background thread instrumentation within Performance Schema. Takes no parameters and returns a summary of disabled threads.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_139\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_background_threads();\n+--------------------------------+\n| summary                        |\n+--------------------------------+\n| Disabled 18 background threads |\n+--------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Selecting Fruit Data from Trees Table in MySQL\nDESCRIPTION: Simple SELECT query retrieving fruit data from the trees table. Query executed with minimal resource usage (12us execution time) and no locks or row examinations. Query execution plan shows a SIMPLE select type with system table access.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux Disk I/O Statistics Output\nDESCRIPTION: Raw output from Linux disk I/O statistics showing performance metrics for various storage devices. Each line contains device major/minor numbers, device name, and multiple I/O statistics fields including reads/writes completed, sectors read/written, and time spent on I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/small.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTS 1327510183.999864000 2012-01-25T10:49:43\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 85958345 9208182 2671393219 2437232103 534745472 846486004 11060949804 2055733214 0 545004133 197929077\n   8   16 sdb 145329387 10397919 3590114436 2492237855 144339343 483516380 5022900680 109665849 0 699286942 2601866162\n 253    0 dm-0 3698313 0 441982922 21577627 73403824 0 591870680 1142786158 0 43867871 1164431995\n```\n\n----------------------------------------\n\nTITLE: Setting PTDEBUG Environment Variable for Verbose Debugging in Perl\nDESCRIPTION: This snippet demonstrates how to enable verbose debugging output in Maatkit tools by setting the PTDEBUG environment variable to 1 before running the tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_04.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nPTDEBUG=1 mk-....\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Packet (Client to Server)\nDESCRIPTION: TCP packet containing a MySQL protocol query 'select \"hello world\" as greeting' sent from client (127.0.0.1:42167) to server (192.168.1.1:3307)\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump012.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 0059 6eb2 4000 4006 cde2 7f00 0001\n7f00 0001 a4b7 0cea ac8a 8413 ad16 9219\n8018 0201 fe4d 0000 0101 080a 0024 f99a\n0024 ed0a 2100 0000 0373 656c 6563 7420\n2268 656c 6c6f 2077 6f72 6c64 2220 6173\n2067 7265 6574 696e 67\n```\n\n----------------------------------------\n\nTITLE: Update Query Joining Two Tables\nDESCRIPTION: Updates column1 and word3 in tuningdetail_21_265507 table using values from gonzo table with a join condition. Execution time: 726ms.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\n```\n\n----------------------------------------\n\nTITLE: Executing EXPLAIN on MySQL Query\nDESCRIPTION: This command performs an EXPLAIN operation on the SELECT query to analyze its execution plan. The PARTITIONS hint is used for MySQL version 5.1 and later to include partitioning information in the output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-yyyy-mm-dd.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: MySQL Client-Server Network Packet Exchange\nDESCRIPTION: Hexadecimal dump of network packets showing MySQL protocol communication including TCP handshake, MySQL initial handshake packet, authentication, and status commands. Each packet includes IP headers, TCP headers and MySQL protocol data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump010.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4500 003c 49b0 4000 4006 35ff c0a8 1ce9\nc0a8 1cd3 8f6b 0cea c9e2 67d5 0000 0000\na002 16d0 782d 0000 0204 05b4 0402 080a\n0183 2e65 0000 0000 0103 0307\n```\n\nLANGUAGE: hex\nCODE:\n```\n4500 003c 0000 4000 4006 7faf c0a8 1cd3\nc0a8 1ce9 0cea 8f6b 1f07 6c96 c9e2 67d6\na012 16a0 2106 0000 0204 05b4 0402 080a\n7164 5a44 0183 2e65 0103 0307\n```\n\n----------------------------------------\n\nTITLE: SQL Query Selecting Records for 'carl'\nDESCRIPTION: SQL query to select all columns from table d.t where name equals 'carl'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump033.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from d.t where name=\"carl\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from Subquery in MySQL\nDESCRIPTION: This SQL query inserts data into table t1 by selecting columns x, y, and z from table t2 where x is not null. It demonstrates the use of INSERT ... SELECT statement for data insertion.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow002.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into t1 (a, b, c) select x, y, z from t2 where x is not null;\n```\n\n----------------------------------------\n\nTITLE: SQL Query Selecting Records for 'adam'\nDESCRIPTION: SQL query to select all columns from table d.t where name equals 'adam'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump033.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from d.t where name=\"adam\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Update Query in MySQL\nDESCRIPTION: Updates the 'vab3concept1id' column with a conditional WHERE clause in table 'db4.vab3concept1upload'. Query execution time is 33ms with 28us lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_orderbyreport.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE db4.vab3concept1upload\nSET    vab3concept1id = '91848182522'\nWHERE  vab3concept1upload='6994465'\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into 'sakila' Database in MySQL Binary Log\nDESCRIPTION: Records an INSERT statement into the 'film' table of the 'sakila' database. This entry in the binary log captures the exact SQL statement executed, including all column values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog-CRC32.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nuse `sakila`/*!*/;\nSET TIMESTAMP=1404326011/*!*/;\ninsert into film values (NULL,\"Contact\",\"Extraterrestrials contact earth\", 2005, 1,1,24,5.55,120,25,'PG','Trailers',now())\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Table Schema in Sakila Database\nDESCRIPTION: Defines the actor table schema with auto-incrementing ID, name fields and timestamp for the Sakila sample database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Initializing AHCI SATA Controller\nDESCRIPTION: This snippet shows the initialization of an AHCI SATA controller, including version information and port details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-005.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nahci 0000:00:1f.2: version 3.0\nACPI: PCI Interrupt 0000:00:1f.2[B] -> GSI 19 (level, low) -> IRQ 58\nahci 0000:00:1f.2: AHCI 0001.0200 32 slots 6 ports 3 Gbps 0x3f impl SATA mode\nahci 0000:00:1f.2: flags: 64bit ncq sntf stag pm led clo pio slum part ems \nPCI: Setting latency timer of device 0000:00:1f.2 to 64\n```\n\n----------------------------------------\n\nTITLE: MySQL Wait Classes Global Latency Structure\nDESCRIPTION: Table structure definitions for wait_classes_global_by_latency and its raw counterpart, showing fields for analyzing wait event classes by total latency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_105\n\nLANGUAGE: SQL\nCODE:\n```\ndesc wait_classes_global_by_latency;\ndesc x$wait_classes_global_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Complex Index Merge Query with Multiple Conditions\nDESCRIPTION: SQL query demonstrating index merge functionality with multiple AND conditions and its explain plan output\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nwhere st_a=1 and swt1a=1 and swt2a=1 and st_b=1 and swt1b=1 and swt2b=1;\n```\n\n----------------------------------------\n\nTITLE: Querying Course Section Data in MySQL\nDESCRIPTION: This SQL query selects multiple columns from the course_section table for a specific course_section_id. It retrieves various details about the course section including its ID, course ID, code, description, and status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump039.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT course_section_id, course_id, code, description, ext_id, board_id, status, location\nFROM   course_section\nWHERE  course_section_id = '145813'\n```\n\n----------------------------------------\n\nTITLE: Creating Nicer but Slower Film List View in MySQL\nDESCRIPTION: Creates the `nicer_but_slower_film_list` view, similar to `film_list`, but formats actor names with capitalization. It aggregates film data including titles, descriptions, categories, and rental rates. Relationships are formed by joining `film`, `category`, `film_category`, `film_actor`, and `actor`. Results are grouped by film ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_31\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `nicer_but_slower_film_list*/;\n/*!50001 DROP VIEW IF EXISTS `nicer_but_slower_film_list*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `nicer_but_slower_film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(concat(ucase(substr(`actor`.`first_name`,1,1)),lcase(substr(`actor`.`first_name`,2,length(`actor`.`first_name`))),_utf8' ',concat(ucase(substr(`actor`.`last_name`,1,1)),lcase(substr(`actor`.`last_name`,2,length(`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: MySQL Process List Results\nDESCRIPTION: Output from MySQL SHOW PROCESSLIST command showing sleeping connections to the aetecjc database. The output includes connection metadata such as thread ID, user, host, database, command state, and idle time in seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/processlist-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n*************************** 102. row ***************************\n     Id: 3475990041\n   User: etace\n   Host: 10.36.34.66:42963\n     db: aetecjc\nCommand: Sleep\n   Time: 87\n  State: \n   Info: NULL\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records with Query Cache Hit Using MySQL SQL\nDESCRIPTION: This snippet shows a SELECT * FROM foo statement against the 'db1' database, with Percona commentary indicating a query cache hit (QC_Hit: Yes). This facilitates analysis of caching behavior. Requirements include MySQL with query cache enabled, and a 'foo' table in 'db1'. All rows are returned; presence of query cache is a factor for output speed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n# Time: 090805 12:00:27\\n# Thread_id: 2\\n# Query_time: 0.726052  Lock_time: 0.100091  Rows_sent: 9  Rows_examined: 51\\n# QC_Hit: Yes  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db1;\\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Inventory Table\nDESCRIPTION: An INSERT statement adding a record to the inventory table in the sakila database. Contains values for inventory ID, film ID, store ID, and last update timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `inventory` VALUES (1,1,1,'2006-02-15 12:09:17') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: Counting Rows Before Lower Chunk Boundary in SQL\nDESCRIPTION: This SQL query counts rows in the `osc.t2` table that fall strictly before the lower boundary of the current chunk, or are NULL if the boundary is not NULL. It uses `FORCE INDEX(\\`c\\`)`, orders by the index key `c`, and inserts the count along with chunk metadata into the `percona.checksums` table with a fixed CRC of '0'. Placeholders (`?`) are used for metadata and the boundary value. The comment `/*past lower chunk*/` clarifies its role in handling edge cases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/oversize-chunks.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `osc`.`t2` FORCE INDEX(`c`) WHERE (((? IS NOT NULL AND `c` IS NULL) OR (`c` < ?))) ORDER BY `c` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Inserting Bulk Data into SQL Table\nDESCRIPTION: This snippet shows a portion of SQL INSERT statements for bulk loading data into a table. The table has two columns - an integer ID and a datetime timestamp. All rows have the same timestamp value of '2006-02-15 10:05:03'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n(61,767,'2006-02-15 10:05:03'),(61,780,'2006-02-15 10:05:03'),(61,831,'2006-02-15 10:05:03'),(61,832,'2006-02-15 10:05:03'),(61,990,'2006-02-15 10:05:03'),(62,6,'2006-02-15 10:05:03'),(62,42,'2006-02-15 10:05:03'),(62,54,'2006-02-15 10:05:03'),(62,100,'2006-02-15 10:05:03'),(62,101,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Address Data Insertion - MySQL\nDESCRIPTION: Inserts address data with location details and timestamp information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `address` VALUES (1,'47 MySakila Drive',NULL,'Alberta',300,'','','2006-02-15 11:45:30')\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared SELECT Statement - MySQL - SQL\nDESCRIPTION: Demonstrates execution of a precompiled SELECT statement in MySQL with an explicit parameter value. The query fetches the value of column 'i' from the 'd.t' table where 'i' equals '3'. Dependencies include a previously prepared matching statement and an existing table structure; outputs the corresponding row(s) from table 'd.t'. Proper data types and values should be supplied as parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump021.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nEXECUTE SELECT i FROM d.t WHERE i=\"3\"\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT i FROM d.t WHERE i=\"3\"\\G\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records Using MySQL SQL\nDESCRIPTION: This snippet switches the active database to 'db1' and retrieves all columns from the 'foo' table using a SELECT statement. It is accompanied by diagnostic comments generated by Percona Toolkit, summarizing query performance (e.g., Query_time, Lock_time). Required dependencies include a running MySQL environment and the presence of the 'db1' database with a 'foo' table. The input is implicit (the schema), and the output is all rows from 'foo'; constraints are that the table must exist and user permissions must allow the operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# Time: 090805 11:00:27\\n# Thread_id: 1\\n# Query_time: 0.726052  Lock_time: 0.100091  Rows_sent: 9  Rows_examined: 51\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db1;\\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query on 'foo2' Table (SQL)\nDESCRIPTION: This SQL snippet shows a query executed by MySQL process Id 2. Connected as 'user1' from '1.2.3.4:5455' to the 'foo' database, this process is executing `SELECT *` on the `foo2` table. The query has been active for 9 seconds and the process state is reported as 'Locked'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset006.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from foo2;\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Performance Data Structure in Perl\nDESCRIPTION: A complex Perl hash structure containing MySQL query analysis data including execution metrics, row counts, lock times, and InnoDB statistics. Data is grouped by normalized query fingerprints with detailed execution statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow002-limit-3.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n$VAR1 = {attribute_types => {Filesort_on_disk => 'bool',Tmp_table_on_disk => 'bool',Error_no => 'string',Filesort => 'bool',Full_join => 'bool',Full_scan => 'bool',InnoDB_IO_r_bytes => 'num',InnoDB_IO_r_ops => 'num',InnoDB_IO_r_wait => 'num',InnoDB_pages_distinct => 'num',InnoDB_queue_wait => 'num',InnoDB_rec_lock_wait => 'num',Killed => 'bool',Last_errno => 'string',Lock_time => 'num',Merge_passes => 'num',QC_Hit => 'bool',Query_time => 'num',Rows_examined => 'num',Rows_sent => 'num',Statement_id => 'string',Status_code => 'string',Thread_id => 'string',Tmp_table => 'bool',bytes => 'num',db => 'string',host => 'string',key_print => 'string',pos_in_log => 'num',ts => 'string',user => 'string',val => 'string'}};\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement for Trees Table in MySQL\nDESCRIPTION: This SQL command displays the CREATE TABLE statement for the 'trees' table in the 'food' database. It's useful for viewing the table structure and definitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-57.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\\G\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Server Status Counters and Performance Metrics in Percona Toolkit\nDESCRIPTION: A comprehensive output from Percona Toolkit showing MySQL status counters measured over time, including query statistics, InnoDB metrics, handler operations, and various server performance indicators. The output includes per-day and per-second rates, as well as configuration information about key Percona Server features, table cache, query cache, and plugins.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp007.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Status Counters (Wait 10 Seconds) ##########################\nVariable                                Per day  Per second     11 secs\nBinlog_cache_disk_use                       900                        \nBinlog_cache_use                           3500                        \nBinlog_stmt_cache_use                       900                        \nBytes_received                       3000000000       35000         200\nBytes_sent                           3000000000       35000        2250\nCom_admin_commands                         1750                        \nCom_begin                                   900                        \nCom_change_db                              1750                        \nCom_checksum                                900                        \nCom_commit                                 1750                        \nCom_create_db                              1750                        \nCom_create_function                        2500                        \nCom_create_procedure                       2500                        \nCom_create_table                          17500                        \nCom_create_trigger                         5000                        \nCom_create_view                            6000                        \nCom_drop_db                                 900                        \nCom_drop_table                              900                        \nCom_insert                              1000000          10            \nCom_load                                    900                        \nCom_rollback                                900                        \nCom_select                                15000                       1\nCom_set_option                            10000                        \nCom_show_engine_status                      900                        \nCom_show_status                             900                        \nCom_show_tables                             900                        \nCom_show_variables                         1750                        \nCom_update                                  900                        \nConnections                               12500                       1\nCreated_tmp_files                          6000                        \nCreated_tmp_tables                         3500                       6\nFlush_commands                              900                        \nHandler_commit                           125000           1            \nHandler_prepare                          100000           1            \nHandler_read_first                        17500                        \nHandler_read_key                          15000                        \nHandler_read_rnd_next                  45000000         500          40\nHandler_rollback                          12500                        \nHandler_update                             5000                        \nHandler_write                          45000000         500          40\nInnodb_adaptive_hash_cells            125000000        1500            \nInnodb_adaptive_hash_heap_buffers          5000                        \nInnodb_adaptive_hash_hash_searches    125000000        1250            \nInnodb_adaptive_hash_non_hash_searches    50000000         500            \nInnodb_background_log_sync                30000                        \nInnodb_buffer_pool_pages_flushed         700000           8            \nInnodb_buffer_pool_pages_old             200000           2            \nInnodb_buffer_pool_read_requests      400000000        4500            \nInnodb_buffer_pool_write_requests     200000000        2500            \nInnodb_checkpoint_max_age            7000000000       80000            \nInnodb_checkpoint_target_age         7000000000       80000            \nInnodb_data_fsyncs                       100000           1            \nInnodb_data_writes                       900000           9            \nInnodb_data_written                 30000000000      350000            \nInnodb_dblwr_pages_written               600000           6            \nInnodb_dblwr_writes                       15000                        \nInnodb_dict_tables                        22500                        \nInnodb_ibuf_segment_size                   1750                        \nInnodb_ibuf_size                            900                        \nInnodb_log_write_requests              15000000         175            \nInnodb_log_writes                         60000                        \nInnodb_lsn_current                   8000000000       90000            \nInnodb_lsn_flushed                   8000000000       90000            \nInnodb_lsn_last_checkpoint           8000000000       90000            \nInnodb_master_thread_1_second_loops       30000                        \nInnodb_master_thread_10_second_loops        2500                        \nInnodb_master_thread_background_loops        3500                        \nInnodb_master_thread_main_flush_loops        3500                        \nInnodb_master_thread_sleeps               30000                        \nInnodb_max_trx_id                        800000           8            \nInnodb_mem_adaptive_hash              600000000        7000            \nInnodb_mem_dictionary                 200000000        2250            \nInnodb_mem_total                    30000000000      350000            \nInnodb_mutex_os_waits                      3500                        \nInnodb_mutex_spin_rounds                 200000           2            \nInnodb_mutex_spin_waits                   12500                        \nInnodb_oldest_view_low_limit_trx_id      700000           8            \nInnodb_os_log_fsyncs                      80000                        \nInnodb_os_log_written                8000000000       90000            \nInnodb_pages_created                     600000           7            \nInnodb_pages_written                     700000           8            \nInnodb_rows_inserted                   40000000         500            \nInnodb_rows_read                       40000000         500            \nInnodb_s_lock_os_waits                    22500                        \nInnodb_s_lock_spin_rounds                600000           7            \nInnodb_s_lock_spin_waits                  22500                        \nInnodb_x_lock_os_waits                     7000                        \nInnodb_x_lock_spin_rounds                225000           2            \nKey_read_requests                      25000000         300            \nKey_reads                                   900                        \nKey_write_requests                     10000000         125            \nKey_writes                               200000           2            \nOpen_table_definitions                    50000                        \nOpened_files                             200000           2           4\nOpened_table_definitions                  80000                        \nOpened_tables                             80000                        \nQueries                                 1000000          10           3\nQuestions                                150000           1           3\nSelect_scan                                4500                        \nTable_locks_immediate                    175000           1            \nThreads_created                           12500                       1\nUptime                                    90000           1           1\nbinlog_commits                             4500                        \nbinlog_group_commits                       4500                        \nwsrep_local_index                   4000000000000    45000000            \n# Table cache ################################################\n                     Size | 400\n                    Usage | 15%\n# Key Percona Server features ################################\n      Table & Index Stats | Disabled\n     Multiple I/O Threads | Enabled\n     Corruption Resilient | Enabled\n      Durable Replication | Disabled\n     Import InnoDB Tables | Disabled\n     Fast Server Restarts | Disabled\n         Enhanced Logging | Disabled\n     Replica Perf Logging | Disabled\n      Response Time Hist. | Disabled\n          Smooth Flushing | Enabled\n      HandlerSocket NoSQL | Not Supported\n           Fast Hash UDFs | Unknown\n# Percona XtraDB Cluster #####################################\n                 wsrep_on | OFF\n# Plugins ####################################################\n       InnoDB compression | ACTIVE\n# Query cache ################################################\n         query_cache_type | ON\n                     Size | 0.0\n                    Usage | 0%\n         HitToInsertRatio | 0%\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status in MySQL\nDESCRIPTION: This SQL command shows the status of the 'trees' table in the 'food' database. It's used to retrieve metadata about the table structure and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-55.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Query Performance Analysis Data Structure in Perl\nDESCRIPTION: This Perl code defines a complex data structure for storing and analyzing MySQL query performance metrics. It includes attribute types, query fingerprints, performance statistics, and sample queries with their associated metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow043.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n$VAR1 = {\n  attribute_types => {\n    Error_no => 'string',\n    Killed => 'bool',\n    Last_errno => 'string',\n    Lock_time => 'num',\n    Query_time => 'num',\n    Rows_examined => 'num',\n    Rows_sent => 'num',\n    Statement_id => 'string',\n    Status_code => 'string',\n    Thread_id => 'string',\n    bytes => 'num',\n    host => 'string',\n    key_print => 'string',\n    pos_in_log => 'num',\n    ts => 'string',\n    user => 'string',\n    val => 'string'\n  },\n  groupby => 'fingerprint',\n  results => {\n    classes => {\n      'select * from t where c = ?' => {\n        Lock_time => {\n          all => {'0' => 1},\n          cnt => 1,\n          last => 0,\n          max => 0,\n          min => 0,\n          sum => 0\n        },\n        Query_time => {\n          all => {'298' => 1},\n          cnt => 1,\n          last => 2,\n          max => 2,\n          min => 2,\n          sum => 2\n        },\n        Rows_examined => {\n          all => {'0' => 1},\n          cnt => 1,\n          last => 0,\n          max => 0,\n          min => 0,\n          sum => 0\n        },\n        Rows_sent => {\n          all => {'284' => 1},\n          cnt => 1,\n          last => 1,\n          max => 1,\n          min => 1,\n          sum => 1\n        },\n        bytes => {\n          all => {'368' => 1},\n          cnt => 1,\n          last => 60,\n          max => 60,\n          min => 60,\n          sum => 60\n        },\n        host => {\n          cnt => 1,\n          max => 'localhost',\n          min => 'localhost',\n          unq => {localhost => 1}\n        },\n        pos_in_log => {\n          all => {'0' => 1},\n          cnt => 1,\n          last => 0,\n          max => 0,\n          min => 0,\n          sum => 0\n        },\n        ts => {\n          cnt => 1,\n          max => '071015 21:43:52',\n          min => '071015 21:43:52',\n          unq => {'071015 21:43:52' => 1}\n        },\n        user => {\n          cnt => 1,\n          max => 'root',\n          min => 'root',\n          unq => {root => 1}\n        }\n      }\n    },\n    globals => {\n      Lock_time => {\n        all => {'0' => 1},\n        cnt => 1,\n        max => 0,\n        min => 0,\n        sum => 0\n      },\n      Query_time => {\n        all => {'298' => 1},\n        cnt => 1,\n        max => 2,\n        min => 2,\n        sum => 2\n      },\n      Rows_examined => {\n        all => {'0' => 1},\n        cnt => 1,\n        max => 0,\n        min => 0,\n        sum => 0\n      },\n      Rows_sent => {\n        all => {'284' => 1},\n        cnt => 1,\n        max => 1,\n        min => 1,\n        sum => 1\n      },\n      bytes => {\n        all => {'368' => 1},\n        cnt => 1,\n        max => 60,\n        min => 60,\n        sum => 60\n      },\n      host => {\n        cnt => 1,\n        max => 'localhost',\n        min => 'localhost'\n      },\n      pos_in_log => {\n        all => {'0' => 1},\n        cnt => 1,\n        max => 0,\n        min => 0,\n        sum => 0\n      },\n      ts => {\n        cnt => 1,\n        max => '071015 21:43:52',\n        min => '071015 21:43:52'\n      },\n      user => {\n        cnt => 1,\n        max => 'root',\n        min => 'root'\n      }\n    },\n    samples => {\n      'select * from t where c = ?' => {\n        Lock_time => '0',\n        Query_time => '2',\n        Rows_examined => '0',\n        Rows_sent => '1',\n        arg => 'select * from t where c = \\'the %d looks like a sprintf code\\'',\n        bytes => 60,\n        cmd => 'Query',\n        fingerprint => 'select * from t where c = ?',\n        host => 'localhost',\n        ip => '',\n        pos_in_log => 0,\n        ts => '071015 21:43:52',\n        user => 'root'\n      }\n    }\n  },\n  worst => 'Query_time'\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Default Instrument Status Using ps_is_instrument_default_enabled in MySQL\nDESCRIPTION: Example showing how to check if an instrument is enabled by default using the sys.ps_is_instrument_default_enabled() function. The function takes an instrument name parameter and returns 'YES' or 'NO'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_126\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_instrument_default_enabled('statement/sql/select');\n+--------------------------------------------------------------+\n| sys.ps_is_instrument_default_enabled('statement/sql/select') |\n+--------------------------------------------------------------+\n| YES                                                          |\n+--------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account IDs with PMS IDs for a Specific Client in MySQL\nDESCRIPTION: SQL query that selects account IDs and their corresponding PMS IDs for client ID 681. It only returns accounts that have non-null PMS IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT  T.id as id,    T.pms_id as pmsId FROM     `account` T WHERE    T.client_id = 681    AND T.pms_id IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: MySQL Lock Tables Command with Performance Metrics\nDESCRIPTION: MySQL statement that acquires a READ lock on table 'foo' and a WRITE lock on table 'bar'. Query time was 1ms with 2ms lock time, returning 3 rows after examining 4 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow037.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 071218 11:48:27\n# Query_time: 0.001000  Lock_time: 0.002000  Rows_sent: 3  Rows_examined: 4\nLOCK TABLES foo READ, bar WRITE;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Information for Group_ Table in SQL\nDESCRIPTION: This SQL command retrieves status information for the table named 'Group_'. This is executed as part of the query analysis to understand the characteristics of the tables involved in the main `UPDATE` query. The `\\G` terminator requests vertical output format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow050.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'Group_'\\G\n```\n\n----------------------------------------\n\nTITLE: System Disk Device Performance Statistics\nDESCRIPTION: Raw performance statistics output for various disk devices showing metrics like read/write rates and utilization. The columns appear to represent version number, device name, and various performance metrics including utilization percentage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-004.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n  5.1 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 sda       19.6    0.4     0.3     5.3    0.1     0.2  37%      0\n  5.1 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 sda3      19.6    0.4     0.3     5.3    0.1     0.2  37%      0\n  5.1 sr0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 md0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.1 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration Parameters\nDESCRIPTION: Detailed listing of MySQL server variables and their configured values, including system settings, buffer sizes, cache configurations, and various operational parameters. The configuration appears to be from a sandbox installation with server ID 12345.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/show-variables/vars001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmax_write_lock_count            | 18446744073709551615\nmin_examined_row_limit          | 0\nmulti_range_count               | 256\nmyisam_data_pointer_size        | 6\nmyisam_max_sort_file_size       | 9223372036853727232\nmyisam_recover_options          | OFF\nmyisam_repair_threads           | 1\nmyisam_sort_buffer_size         | 8388608\nmyisam_stats_method             | nulls_unequal\nmyisam_use_mmap                 | OFF\nnet_buffer_length               | 16384\nnet_read_timeout                | 30\nnet_retry_count                 | 10\nnet_write_timeout               | 60\nnew                             | OFF\nold                             | OFF\nold_alter_table                 | OFF\nold_passwords                   | OFF\nopen_files_limit                | 1024\noptimizer_prune_level           | 1\noptimizer_search_depth          | 62\noptimizer_switch                | index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on\npid_file                        | /tmp/12345/data/mysql_sandbox12345.pid\nplugin_dir                      | /home/daniel/mysql_binaries/mysql-5.1.34-linux-x86_64-glibc23/lib/plugin\nport                            | 12345\npreload_buffer_size             | 32768\nprofiling                       | OFF\nprofiling_history_size          | 15\nprotocol_version                | 10\npseudo_thread_id                | 7\nquery_alloc_block_size          | 8192\nquery_cache_limit               | 1048576\nquery_cache_min_res_unit        | 4096\nquery_cache_size                | 0\nquery_cache_type                | ON\nquery_cache_wlock_invalidate    | OFF\nquery_prealloc_size             | 8192\nrand_seed1                      |\nrand_seed2                      |\nrange_alloc_block_size          | 4096\nread_buffer_size                | 131072\nread_only                       | OFF\nread_rnd_buffer_size            | 262144\nrelay_log                       | mysql-relay-bin\nrelay_log_index                 |\nrelay_log_info_file             | relay-log.info\nrelay_log_purge                 | ON\nrelay_log_space_limit           | 0\nreport_host                     | 127.0.0.1\nreport_password                 |\nreport_port                     | 12345\nreport_user                     |\nrpl_recovery_rank               | 0\nsecure_auth                     | OFF\nsecure_file_priv                |\nserver_id                       | 12345\nskip_external_locking           | ON\nskip_networking                 | OFF\nskip_show_database              | OFF\nslave_compressed_protocol       | OFF\nslave_exec_mode                 | STRICT\nslave_load_tmpdir               | /tmp\nslave_net_timeout               | 3600\nslave_skip_errors               |\nslave_transaction_retries       | 10\nslow_launch_time                | 2\nslow_query_log                  | OFF\nslow_query_log_file             | /tmp/12345/data/mysql_sandbox12345-slow.log\nsocket                          | /tmp/12345/mysql_sandbox12345.sock\nsort_buffer_size                | 2097144\nsql_auto_is_null                | ON\nsql_big_selects                 | ON\nsql_big_tables                  | OFF\nsql_buffer_result               | OFF\nsql_log_bin                     | ON\nsql_log_off                     | OFF\nsql_log_update                  | ON\n```\n\n----------------------------------------\n\nTITLE: Describing session_ssl_status View - SQL\nDESCRIPTION: Lists the structure of the session_ssl_status view using DESC, providing information on thread ID, SSL version, SSL cipher, and session reuse count. Requires Percona's sys schema with support for SSL monitoring fields. Useful for monitoring and troubleshooting secure MySQL connections by exposing details of encryption and session reuse; output presents the data types and nullability of the relevant columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_78\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.session_ssl_status;\n+---------------------+---------------------+------+-----+---------+-------+\n| Field               | Type                | Null | Key | Default | Extra |\n+---------------------+---------------------+------+-----+---------+-------+\n| thread_id           | bigint(20) unsigned | NO   |     | NULL    |       |\n| ssl_version         | varchar(1024)       | YES  |     | NULL    |       |\n| ssl_cipher          | varchar(1024)       | YES  |     | NULL    |       |\n| ssl_sessions_reused | varchar(1024)       | YES  |     | NULL    |       |\n+---------------------+---------------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tree Details with Partner and ResaChain Information\nDESCRIPTION: Complex SQL query that joins multiple tables (tree, RESACHAIN, treeCODE, POOLINSTANCE) to retrieve tree information along with partner and reservation chain details. Includes filtering by active status and partner IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect tree0_.treeid as col_0_0_, treecode1_.partnercode as col_1_0_, tree0_.partnerid as col_2_0_, tree0_.qcnscrsid as col_3_0_, tree0_.qcnscountryid as col_4_0_, tree0_.qcnscityid as col_5_0_, treecode1_.isactive as col_6_0_, resachain2_.isactive as col_7_0_, tree0_.name as col_8_0_ from tree tree0_, RESACHAIN resachain2_, treeCODE treecode1_, POOLINSTANCE poolinstan3_ where tree0_.poolinstanceid=poolinstan3_.poolinstanceid and tree0_.qcnscrsid=resachain2_.qcnscrsid and tree0_.isactive=1 and tree0_.qcnstreecode='TH100861' and poolinstan3_.pooltemplateid=17 and tree0_.treestatustypeid=1 and (tree0_.qcnsstatusid in (1671 , 1673)) and (tree0_.partnerid in (1 , 2 , 3 , 4)) and tree0_.treeid=treecode1_.treeid\n```\n\n----------------------------------------\n\nTITLE: Disk I/O Statistics Snapshot 2 with Timestamp\nDESCRIPTION: This block shows a timestamp (`TS 1326806199.782176000 2012-01-17T10:16:39`) followed by another snapshot of disk I/O statistics in the same format as the previous block. The timestamp indicates the precise moment the data was collected. Comparing the numerical values in this snapshot with those from the previous one allows for calculating I/O performance metrics (like IOPS, throughput, and latency) over the interval between the timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/switch_to_sample.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1326806199.782176000 2012-01-17T10:16:39\n   1       0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1       1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1       2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1       3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1       4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1       5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1       6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1       7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1       8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1       9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1      10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1      11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1      12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1      13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1      14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1      15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   7       0 loop0 0 0 0 0 0 0 0 0 0 0 0\n   7       1 loop1 0 0 0 0 0 0 0 0 0 0 0\n   7       2 loop2 0 0 0 0 0 0 0 0 0 0 0\n   7       3 loop3 0 0 0 0 0 0 0 0 0 0 0\n   7       4 loop4 0 0 0 0 0 0 0 0 0 0 0\n   7       5 loop5 0 0 0 0 0 0 0 0 0 0 0\n   7       6 loop6 0 0 0 0 0 0 0 0 0 0 0\n   7       7 loop7 0 0 0 0 0 0 0 0 0 0 0\n   8       0 sda 50032 15372 1551175 589373 631149 1755538 19096536 4151503 0 678570 4751870\n   8       1 sda1 39 560 1285 1156 0 0 0 0 0 1020 1156\n   8       2 sda2 132 7184 7890 2523 0 0 0 0 0 2140 2523\n   8       3 sda3 48600 567 1477874 562406 629586 1715580 18764368 4137760 0 657920 4711820\n   8       4 sda4 1242 7042 63822 22896 1563 39958 332168 13743 0 27116 36736\n   8      16 sdb 57 633 1719 473 0 0 0 0 0 356 473\n   8      17 sdb1 40 605 1359 236 0 0 0 0 0 153 236\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'columns_priv' Privilege Table - SQL\nDESCRIPTION: Defines the 'columns_priv' table, which stores column-level privileges for specific users in specific databases and tables. This table uses a composite primary key of host, db, user, table_name, and column_name, ensuring uniqueness for each privilege entry. Requires MySQL MyISAM engine, UTF-8 encoding, and the privilege set is encoded using the SET type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Language Table in MySQL\nDESCRIPTION: Creates a simple lookup table for language information with automatic timestamps using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.columns_priv` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.columns_priv` table, which stores column-level privileges granted to users for specific tables within databases. It uses the MyISAM storage engine and specifies utf8 character set and collation. The primary key is a composite key consisting of Host, Db, User, Table_name, and Column_name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Executing and Explaining SQL Select Query\nDESCRIPTION: This snippet executes a SELECT statement with specific conditions and demonstrates its conversion for EXPLAIN plan analysis. It features querying a database table with parameters set as NULL and a specific value, aiding in understanding the query structure and analysis using EXPLAIN. It runs in a SQL-supported environment without needing extra libraries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump022.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nEXECUTE SELECT i,j FROM d.t2 WHERE i=NULL AND j=\\\"5\\\"\\G\n# Converted for EXPLAIN\n# EXPLAIN /*!50100 PARTITIONS*/\nSELECT i,j FROM d.t2 WHERE i=NULL AND j=\\\"5\\\"\\G\n```\n\n----------------------------------------\n\nTITLE: Analyzing SELECT Query on 'bar' Table in MySQL\nDESCRIPTION: This snippet presents the analysis of a SELECT query on the 'bar' table, executed across 'db1' and 'db2' databases. It includes performance metrics, query time distribution, and an EXPLAIN plan.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-untl-1d.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Checksum Results\nDESCRIPTION: Tabular output showing checksum verification results for multiple database tables. Each row shows ERRORS, DIFFS, ROWS, and SKIPPED counts followed by the table name. The output covers system tables, test tables, and sample database tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/default-results-8.4.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nERRORS DIFFS ROWS SKIPPED TABLE\n0 0 0 0 mysql.columns_priv\n0 0 0 0 mysql.component\n0 0 2 0 mysql.db\n0 0 0 0 mysql.default_roles\n0 1 2 0 mysql.engine_cost\n0 0 0 0 mysql.func\n0 0 53 0 mysql.help_category\n0 0 985 0 mysql.help_keyword\n0 0 2043 0 mysql.help_relation\n0 0 701 0 mysql.help_topic\n0 0 0 0 mysql.password_history\n0 0 0 0 mysql.plugin\n0 0 0 0 mysql.procs_priv\n0 1 1 0 mysql.proxies_priv\n0 0 0 0 mysql.replication_asynchronous_connection_failover\n0 0 0 0 mysql.replication_asynchronous_connection_failover_managed\n0 0 1 0 mysql.replication_group_configuration_version\n0 0 2 0 mysql.replication_group_member_actions\n0 0 0 0 mysql.role_edges\n0 1 6 0 mysql.server_cost\n0 0 0 0 mysql.servers\n0 0 2 0 mysql.tables_priv\n0 0 0 0 mysql.time_zone\n0 0 0 0 mysql.time_zone_leap_second\n0 0 0 0 mysql.time_zone_name\n0 0 0 0 mysql.time_zone_transition\n0 0 0 0 mysql.time_zone_transition_type\n0 1 5 0 mysql.user\n0 0 29 0 percona_test.checksums\n0 0 1 0 percona_test.sentinel\n0 0 200 0 sakila.actor\n0 0 603 0 sakila.address\n0 0 16 0 sakila.category\n0 0 600 0 sakila.city\n0 0 109 0 sakila.country\n0 0 599 0 sakila.customer\n0 0 1000 0 sakila.film\n0 0 5462 0 sakila.film_actor\n0 0 1000 0 sakila.film_category\n0 0 1000 0 sakila.film_text\n0 0 4581 0 sakila.inventory\n0 0 6 0 sakila.language\n0 0 16049 0 sakila.payment\n0 0 16044 0 sakila.rental\n0 0 2 0 sakila.staff\n0 0 2 0 sakila.store\n0 0 6 0 sys.sys_config\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet Hex Dump\nDESCRIPTION: TCP packet from MySQL server (127.0.0.1:mysql) to client (1.2.3.4:34162) containing 11 bytes of response data. Shows IP header and payload in hexadecimal format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump027.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 003f 6d42 4000 4006 68c3 0a38 a82d\n0a38 a80e 0cea 8572 2b4a b32d add8 a69f\n8018 018d 64dd 0000 0101 080a e506 a3de\n54e0 4da2 0700 0001 0000 0002 0000 00\n```\n\n----------------------------------------\n\nTITLE: MySQL sleep() Query with Fully Qualified Table Name\nDESCRIPTION: A SQL query that calls the sleep() function for 2 seconds on table 'n' in the test database using a fully qualified table name. This query has the same 2s execution time as Query 2 but uses a different query format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow001_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect sleep(2) from test.n\n```\n\n----------------------------------------\n\nTITLE: Analyzing SELECT Query on 'foo' Table in MySQL\nDESCRIPTION: This snippet shows the analysis of a SELECT query on the 'foo' table in the 'db1' database. It includes performance metrics, query time distribution, and an EXPLAIN plan.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-untl-1d.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet Captures for MySQL Communication\nDESCRIPTION: This snippet shows a series of TCP packet captures between a MySQL client and server. It includes details such as IP addresses, port numbers, packet sizes, and hexadecimal packet contents. The captures demonstrate the MySQL connection process, including the initial handshake and authentication.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump009.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-04-15 17:08:08.719460 IP 192.168.28.233.36715 > 192.168.28.211.mysql: tcp 0\n\t0x0000:  4500 003c 49b0 4000 4006 35ff c0a8 1ce9\n\t0x0010:  c0a8 1cd3 8f6b 0cea c9e2 67d5 0000 0000\n\t0x0020:  a002 16d0 782d 0000 0204 05b4 0402 080a\n\t0x0030:  0183 2e65 0000 0000 0103 0307\n2009-04-15 17:08:08.719472 IP 192.168.28.211.mysql > 192.168.28.233.36715: tcp 0\n\t0x0000:  4500 003c 0000 4000 4006 7faf c0a8 1cd3\n\t0x0010:  c0a8 1ce9 0cea 8f6b 1f07 6c96 c9e2 67d6\n\t0x0020:  a012 16a0 2106 0000 0204 05b4 0402 080a\n\t0x0030:  7164 5a44 0183 2e65 0103 0307\n2009-04-15 17:08:08.719592 IP 192.168.28.233.36715 > 192.168.28.211.mysql: tcp 0\n\t0x0000:  4500 0034 49b1 4000 4006 3606 c0a8 1ce9\n\t0x0010:  c0a8 1cd3 8f6b 0cea c9e2 67d6 1f07 6c97\n\t0x0020:  8010 002e 6644 0000 0101 080a 0183 2e65\n\t0x0030:  7164 5a44\n2009-04-15 17:08:08.719687 IP 192.168.28.211.mysql > 192.168.28.233.36715: tcp 64\n\t0x0000:  4508 0074 36d3 4000 4006 489c c0a8 1cd3\n\t0x0010:  c0a8 1ce9 0cea 8f6b 1f07 6c97 c9e2 67d6\n\t0x0020:  8018 002e bb73 0000 0101 080a 7164 5a45\n\t0x0030:  0183 2e65 3c00 0000 0a34 2e31 2e32 322d\n\t0x0040:  6d61 782d 6c6f 6700 85b4 4416 3a3b 5728\n\t0x0050:  5f26 3d43 002c a208 0200 0000 0000 0000\n\t0x0060:  0000 0000 0000 0075 463c 3845 3267 3368\n\t0x0070:  325d 5e00\n2009-04-15 17:08:08.719802 IP 192.168.28.233.36715 > 192.168.28.211.mysql: tcp 0\n\t0x0000:  4500 0034 49b2 4000 4006 3605 c0a8 1ce9\n\t0x0010:  c0a8 1cd3 8f6b 0cea c9e2 67d6 1f07 6cd7\n\t0x0020:  8010 002e 6603 0000 0101 080a 0183 2e65\n\t0x0030:  7164 5a45\n2009-04-15 17:08:08.735550 IP 192.168.28.233.36715 > 192.168.28.211.mysql: tcp 65\n\t0x0000:  4508 0075 49b3 4000 4006 35bb c0a8 1ce9\n\t0x0010:  c0a8 1cd3 8f6b 0cea c9e2 67d6 1f07 6cd7\n\t0x0020:  8018 002e 9ab8 0000 0101 080a 0183 2e75\n\t0x0030:  7164 5a45 3d00 0001 85a2 0000 0000 0040\n\t0x0040:  0800 0000 0000 0000 0000 0000 0000 0000\n\t0x0050:  0000 0000 0000 0000 6d6f 6e69 746f 7200\n\t0x0060:  14a6 1c8e 3fc6 64ed 4369 a0f3 af66 887e\n\t0x0070:  4ce8 03b2 fb\n2009-04-15 17:08:08.735564 IP 192.168.28.211.mysql > 192.168.28.233.36715: tcp 0\n\t0x0000:  4508 0034 36d4 4000 4006 48db c0a8 1cd3\n\t0x0010:  c0a8 1ce9 0cea 8f6b 1f07 6cd7 c9e2 6817\n\t0x0020:  8010 002e 65a3 0000 0101 080a 7164 5a54\n\t0x0030:  0183 2e75\n2009-04-15 17:08:08.735586 IP 192.168.28.211.mysql > 192.168.28.233.36715: tcp 5\n\t0x0000:  4508 0039 36d5 4000 4006 48d5 c0a8 1cd3\n\t0x0010:  c0a8 1ce9 0cea 8f6b 1f07 6cd7 c9e2 6817\n\t0x0020:  8018 002e bb38 0000 0101 080a 7164 5a54\n\t0x0030:  0183 2e75 0100 0002 fe\n```\n\n----------------------------------------\n\nTITLE: Querying Four Table in MySQL\nDESCRIPTION: SELECT query on 'four' table with query time of 300 seconds. Uses parameterized query for id field with no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow049.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT four FROM four WHERE id=?;\n```\n\n----------------------------------------\n\nTITLE: Querying Client Features with Feature ID 27 in MySQL\nDESCRIPTION: SQL query that retrieves client IDs where feature ID 27 is enabled. It joins client, client_feature, and edition_feature tables to ensure the feature is enabled at both client and edition levels.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT client.id\nFROM `client`, client_feature, edition_feature\nWHERE ( client.id = client_feature.client_id )\nAND ( client_feature.feature_id = '27' )\nAND ( edition_feature.client_edition_id = client.client_edition_id )\nAND ( edition_feature.feature_id = client_feature.feature_id )\nAND ( client_feature.is_enabled = 1 )\n```\n\n----------------------------------------\n\nTITLE: MySQL Version Comment Query in TCP Packet Capture\nDESCRIPTION: A TCP packet capture showing a client (127.0.0.1) sending the SQL query 'SELECT @@version_comment LIMIT 1' to a MySQL server (10.10.10.14). The hexdump reveals both the query packet structure and the server's response containing '(Ubuntu)' in the version information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump017.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect @@version_comment limit 1\n```\n\nLANGUAGE: hexdump\nCODE:\n```\n0x0000:  4508 0059 283f 4000 4006 1456 7f00 0001\n0x0010:  7f00 0001 e222 0cea 0ab4 d3fe 0b4b fcb5\n0x0020:  8018 0201 fe4d 0000 0101 080a 0034 fb91\n0x0030:  0034 fb91 2100 0000 0373 656c 6563 7420\n0x0040:  4040 7665 7273 696f 6e5f 636f 6d6d 656e\n0x0050:  7420 6c69 6d69 7420 31\n```\n\n----------------------------------------\n\nTITLE: Selecting Test Column in Sakila Database (MySQL)\nDESCRIPTION: This query selects the 'n' column from a table in the 'sakila' database. It has an execution time of 2 seconds and returns 1 row. The query is executed by the root user from localhost.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow001_distillreport.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT test.n\n```\n\n----------------------------------------\n\nTITLE: Show Create Table Commands\nDESCRIPTION: Commands to show the CREATE TABLE statements for the tuningdetail and gonzo tables involved in the query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `db2`.`tuningdetail_21_265507`\\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `db1`.`gonzo`\\G\n```\n\n----------------------------------------\n\nTITLE: Creating event Table in SQL\nDESCRIPTION: Defines the 'event' table for MySQL event scheduling, detailing fields for managing events attributes like their execution time and status. Requires MySQL as a dependency and includes a PRIMARY KEY on db and name. Considerations include ENUM fields for interval_field and status which dictate event scheduling and state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Defining Wait Classes Global Latency Structure in MySQL\nDESCRIPTION: SQL structure definitions for wait_classes_global_by_latency and x$wait_classes_global_by_latency views that track total latency metrics for wait event classes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_98\n\nLANGUAGE: SQL\nCODE:\n```\ndesc wait_classes_global_by_latency;\ndesc x$wait_classes_global_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'foo' - First Execution\nDESCRIPTION: Simple SELECT query on table 'foo' executed by SQL_SLAVE user in db1 database. Query took 12us with no lock time and returned no rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30s-3iter.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL User Table\nDESCRIPTION: This SQL snippet performs a simple SELECT query on the mysql.user table to check for its existence and accessibility. It's typically used to verify database connectivity and user permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 FROM mysql.user LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows of Data in MySQL\nDESCRIPTION: This SQL snippet shows a partial INSERT statement for adding multiple rows of data to a table. Each row contains three values: an ID, a numeric value, and a timestamp. The data appears to be part of a larger batch insert operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n,(74,484,'2006-02-15 10:05:03'),(74,503,'2006-02-15 10:05:03'),(74,537,'2006-02-15 10:05:03'),\n// ... many more rows ...\n(85,383,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Defining the 'help_category' Table for Help System Categories - MySQL - SQL\nDESCRIPTION: Establishes the 'help_category' table storing categories of help topics within MySQL, with support for parent/child relationships and URLs for external references. Required for organizing help system metadata for user queries. Dependencies include foreign key relationships on 'help_category_id' and 'name'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned default NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY  (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Inserting Into MySQL Table using SQL\nDESCRIPTION: This SQL snippet demonstrates executing an INSERT operation into table 't' with 'id' and 'username' columns. The query execution may result in warnings or errors if data constraints are violated, such as truncating a string to fit within a column. The environment is a MySQL database accessed via Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/003/insert_truncate_warning.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into t (id, username) values(?+)\n```\n\n----------------------------------------\n\nTITLE: Batch Insert with Range Condition (Second Batch)\nDESCRIPTION: Performs a locked read and insert operation copying rows where id is between 4 and 5 from table 't' to '__new_t'. Uses IGNORE to skip duplicates and LOCK IN SHARE MODE for concurrency control.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/osc/copyins003.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT IGNORE INTO osc.__new_t (`id`, `space col`) SELECT `id`, `space col` FROM osc.t WHERE (id >= 4 AND id < 6) LOCK IN SHARE MODE\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamped User Data in MySQL\nDESCRIPTION: A series of INSERT statements adding user ID mappings with timestamps from February 15, 2006. Each row contains a numeric ID pair and a datetime value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n(50,303,'2006-02-15 10:05:03'),(50,306,'2006-02-15 10:05:03'),...,(61,766,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Inserting Article Data with IGNORE in MySQL\nDESCRIPTION: This query inserts a record into the articles table with an ID and body, using INSERT IGNORE to prevent errors if the record already exists. The query took 0.001943 seconds with a lock time of 0.000145 seconds, examining and returning 0 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/microslow001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO articles (id, body,)VALUES(3558268,'sample text');\n```\n\n----------------------------------------\n\nTITLE: MySQL INSERT Operations\nDESCRIPTION: Series of INSERT statements with binary log metadata including timestamps, server ID, thread ID, execution time, and error codes\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog005.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into foo values (12)/*!*/;\ninsert into foo values (12)/*!*/;\ninsert into foo values (13)/*!*/;\ninsert into foo values (13)/*!*/;\ninsert into foo values (13)/*!*/;\ninsert into foo values (18)/*!*/;\ninsert into foo values (23)/*!*/;\ninsert into bar values (8)/*!*/;\ninsert into bar values (10)/*!*/;\ninsert into bar values (12)/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Creating Staff List View\nDESCRIPTION: Creates a view displaying staff information including contact details and store assignment, joining with address and location tables\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `staff_list` AS select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,_utf8' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`staff` `s` join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Queries in MySQL with Timing Information\nDESCRIPTION: A collection of simple SELECT queries against the 'foo' table, each selecting a different sequential number. Every query has identical performance metrics: 0.000899 seconds query time, 0 lock time, and 0 rows examined. These queries appear to be executed by the same user from the same IP address across multiple thread IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1877 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Querying Variable Column from Unsteady Table in MySQL\nDESCRIPTION: This SQL query selects a highly variable column from an unstable table, resulting in inconsistent and often longer query execution times. The query is executed multiple times with varying performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nselect very_variable_column from unsteady_table;\n```\n\n----------------------------------------\n\nTITLE: MySQL Performance Metrics Data Sample\nDESCRIPTION: Time series data showing MySQL server performance metrics with timestamps and measurement values. Contains server IDs, timestamps, metric types, measurements, intervals and related metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n4,0.174,300,300,7256314,1236699916\n8360,1236698700,5,0.0,300,300,7256314,1236699916\n8360,1236698700,6,20.0,300,300,7256314,1236699916\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Open Files for MySQL Daemon (mysqld)\nDESCRIPTION: This output, likely from a command like 'lsof', lists the files currently opened by the MySQL daemon process with PID 21219. It details various file descriptors (FD), types (DIR, CHR, REG), device numbers, sizes, node numbers, and associated file paths, including data files (ibdata1, ibdata2), log files (error.log, slow-query.log, mysql-bin.*), temporary files, and standard streams.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/004-samples.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCOMMAND   PID  USER   FD   TYPE             DEVICE          SIZE      NODE NAME\nmysqld  21219 mysql  cwd    DIR               8,17          4096    409603 /data/data\nmysqld  21219 mysql    0r   CHR                1,3                    4906 /dev/null\nmysqld  21219 mysql    1u   REG                8,6         17423  19071075 /var/log/mysql/error.log\nmysqld  21219 mysql    2u   REG                8,6         17423  19071075 /var/log/mysql/error.log\nmysqld  21219 mysql    3w   REG                8,6          1334  19071001 /var/log/mysql/slow-query.log\nmysqld  21219 mysql    4u   REG               8,17          6494    409629 /data/binlogs/mysql-bin.index\nmysqld  21219 mysql    5uW  REG               8,17    2097152000    409624 /data/data/ibdata1\nmysqld  21219 mysql    6u   REG                8,6          5402  21299212 /tmp/ib1LLekh (deleted)\nmysqld  21219 mysql    7u   REG               8,17            21 342253570 /data/tmp/ibgFmgEX (deleted)\nmysqld  21219 mysql    8u   REG                8,6             0  21299213 /tmp/ib4r3hYD (deleted)\nmysqld  21219 mysql    9u   REG               8,17             0 342253571 /data/tmp/ibZOff4r (deleted)\nmysqld  21219 mysql   10uW  REG               8,17    7707033600    409712 /data/data/ibdata2\nmysqld  21219 mysql   11uW  REG               8,17    2097152000    409737 /data/data/ib_logfile0\nmysqld  21219 mysql   12uW  REG               8,17    2097152000    409664 /data/data/ib_logfile1\nmysqld  21219 mysql   13w   REG               8,17      25745098    409742 /data/binlogs/mysql-bin.001856\n```\n\n----------------------------------------\n\nTITLE: Creating help_keyword Table in SQL\nDESCRIPTION: Defines the 'help_keyword' table used in a MySQL help system to record help-related keywords. This table is essential for indexing keywords for efficient retrieval and includes a primary uniqueness constraint on help_keyword_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Multi-Table JOIN Query\nDESCRIPTION: SELECT query joining multiple tables with aliases using implicit join syntax\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t1, t2 as x, t3 y, z;\n```\n\n----------------------------------------\n\nTITLE: Updating Table with INNER JOIN in MySQL\nDESCRIPTION: This SQL query updates table t1 by performing an INNER JOIN with table t2 using the 'id' column. It sets the 'foo' column in t1 to 'bar' where the id in t2 is 1.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow002.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE t1 INNER JOIN t2 USING (id) SET t1.foo=\"bar\" WHERE t2.id=1;\n```\n\n----------------------------------------\n\nTITLE: Updating Visitor Address IDs in MySQL\nDESCRIPTION: SQL UPDATE query that sets visitor address_id to address_id_in_pms for client ID 184. It uses a JOIN with the visitor table and a LEFT JOIN with the address table, updating only records where the address has a PMS ID or the address_id is null.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE     visitor V    JOIN visitor V1 USE KEY (client_id) ON (V1.id = V.id)    LEFT JOIN address A ON (A.id = V1.address_id)    SET     V.address_id = V.address_id_in_pms   WHERE    V1.client_id = 184    AND (     A.pms_id IS NOT NULL      OR V1.address_id IS NULL    )\n```\n\n----------------------------------------\n\nTITLE: Setting Character Encoding to UTF-8 in MySQL\nDESCRIPTION: SQL command to set the connection character encoding to UTF-8. This ensures proper handling of multi-byte character sets in the database connection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow055.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET NAMES utf8;\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Client and Server Settings\nDESCRIPTION: This configuration defines basic settings for MySQL client connectivity and server initialization. The client section specifies the default port and socket location, while the server section sets UTF-8 character encoding for new connections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/quoted_cnf.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nport        = 3306\nsocket      = /var/run/mysqld/mysqld.sock\n\n[mysqld]\ninit-connect='SET NAMES utf8'\n```\n\n----------------------------------------\n\nTITLE: Committing Transaction in MySQL Binary Log\nDESCRIPTION: Records the COMMIT statement for the transaction in the binary log. This entry marks the successful completion of the transaction.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog-CRC32.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCOMMIT/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_stages Tables in MySQL\nDESCRIPTION: The DESC command output shown reveals the schema for the host_summary_by_stages and x$host_summary_by_stages tables. These tables summarize different MySQL operation stages for each host, focusing on total latency per stage. Accessible to users with appropriate permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_stages;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.06 sec)\n\nmysql> desc x$host_summary_by_stages;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| avg_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.81 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating store location table in SQL\nDESCRIPTION: Creates the store table for tracking rental store locations. Features a unique constraint on manager_staff_id to ensure each store has a unique manager, and foreign key relationships to staff and address tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Session Parameters in Binary Log\nDESCRIPTION: Sets various session-level parameters including timestamp, thread ID, and multiple MySQL-specific settings. This configuration is typically found at the start of a transaction in a binary log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog-CRC32.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET TIMESTAMP=1404326011/*!*/;\nSET @@session.pseudo_thread_id=14/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;\nSET @@session.sql_mode=1073741824/*!*/;\nSET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;\n/*!\\C utf8 *//*!*/;\nSET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;\nSET @@session.time_zone='SYSTEM'/*!*/;\nSET @@session.lc_time_names=0/*!*/;\nSET @@session.collation_database=DEFAULT/*!*/;\nBEGIN\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Status Counters Over Time Intervals\nDESCRIPTION: This output shows various MySQL status variables and their calculated rates per day, per second, and over a 10-second interval. It provides insights into server activity, resource usage (like temporary tables, connections, InnoDB operations), and command frequencies. Variables prefixed with 'Com_' count specific SQL commands, 'Handler_' track storage engine operations, 'Innodb_' provide InnoDB specific metrics, and 'wsrep_' relate to Galera Cluster.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp006.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Status Counters (Wait 10 Seconds) ##########################\nVariable                                Per day  Per second     10 secs\nBinlog_cache_disk_use                        35                        \nBinlog_cache_use                            150                        \nBinlog_stmt_cache_use                        35                        \nBytes_received                        125000000        1250         225\nBytes_sent                             25000000         300        2500\nCom_admin_commands                           35                        \nCom_alter_table                              70                        \nCom_begin                                    35                        \nCom_change_db                              2000                        \nCom_checksum                                 35                        \nCom_commit                                   70                        \nCom_create_db                                70                        \nCom_create_function                         100                        \nCom_create_procedure                        100                        \nCom_create_table                            700                        \nCom_create_trigger                          200                        \nCom_create_view                             250                        \nCom_drop_db                                  35                        \nCom_drop_table                               35                        \nCom_flush                                    70                        \nCom_insert                                35000                        \nCom_load                                     35                        \nCom_rollback                                 35                        \nCom_select                                10000                       1\nCom_set_option                            12500                        \nCom_show_binlogs                            400                        \nCom_show_create_db                          100                        \nCom_show_create_func                        100                        \nCom_show_create_proc                        100                        \nCom_show_create_table                      3500                        \nCom_show_create_trigger                     200                        \nCom_show_databases                          450                        \nCom_show_engine_status                      400                        \nCom_show_fields                            1750                        \nCom_show_function_status                    100                        \nCom_show_master_status                      400                        \nCom_show_plugins                            400                        \nCom_show_procedure_status                   100                        \nCom_show_processlist                        400                        \nCom_show_slave_status                       400                        \nCom_show_status                             600                        \nCom_show_table_status                      1750                        \nCom_show_tables                             250                        \nCom_show_triggers                          1750                        \nCom_show_variables                          400                        \nCom_update                                   35                        \nConnections                                7000                       1\nCreated_tmp_disk_tables                    8000                       1\nCreated_tmp_files                           250                        \nCreated_tmp_tables                        35000                       6\nFlush_commands                              100                        \nHandler_commit                             8000                        \nHandler_prepare                            6000                        \nHandler_read_first                          900                        \nHandler_read_key                            800                        \nHandler_read_next                          1250                        \nHandler_read_rnd_next                   2250000          25          45\nHandler_rollback                           1000                        \nHandler_update                              200                        \nHandler_write                           2000000          25          45\nInnodb_adaptive_hash_cells              5000000          60            \nInnodb_adaptive_hash_heap_buffers           200                        \nInnodb_adaptive_hash_hash_searches      4500000          50            \nInnodb_adaptive_hash_non_hash_searches     1750000          20            \nInnodb_background_log_sync                 1500                        \nInnodb_buffer_pool_pages_flushed          30000                        \nInnodb_buffer_pool_pages_old               8000                        \nInnodb_buffer_pool_read_requests       15000000         175            \nInnodb_buffer_pool_write_requests       8000000          90            \nInnodb_checkpoint_max_age             250000000        3000            \nInnodb_checkpoint_target_age          250000000        3000            \nInnodb_data_fsyncs                         4500                        \nInnodb_data_writes                        35000                        \nInnodb_data_written                  1250000000       15000            \nInnodb_dblwr_pages_written                25000                        \nInnodb_dblwr_writes                         600                        \nInnodb_dict_tables                          900                        \nInnodb_history_list_length                   35                        \nInnodb_ibuf_segment_size                     70                        \nInnodb_ibuf_size                             35                        \nInnodb_log_write_requests                600000           7            \nInnodb_log_writes                          2500                        \nInnodb_lsn_current                    300000000        3500            \nInnodb_lsn_flushed                    300000000        3500            \nInnodb_lsn_last_checkpoint            300000000        3500            \nInnodb_master_thread_1_second_loops        1500                        \nInnodb_master_thread_10_second_loops         150                        \nInnodb_master_thread_background_loops         100                        \nInnodb_master_thread_main_flush_loops         100                        \nInnodb_master_thread_sleeps                1500                        \nInnodb_max_trx_id                         30000                        \nInnodb_mem_adaptive_hash               22500000         250            \nInnodb_mem_dictionary                   8000000          90            \nInnodb_mem_total                     1250000000       12500            \nInnodb_mutex_os_waits                       200                        \nInnodb_mutex_spin_rounds                   9000                        \nInnodb_mutex_spin_waits                     400                        \nInnodb_oldest_view_low_limit_trx_id       30000                        \nInnodb_os_log_fsyncs                       3000                        \nInnodb_os_log_written                 300000000        3500            \nInnodb_pages_created                      25000                        \nInnodb_pages_written                      30000                        \nInnodb_purge_trx_id                       30000                        \nInnodb_rows_inserted                    1750000          20            \nInnodb_rows_read                        1750000          20            \nInnodb_s_lock_os_waits                      800                        \nInnodb_s_lock_spin_rounds                 25000                        \nInnodb_s_lock_spin_waits                    800                        \nInnodb_x_lock_os_waits                      300                        \nInnodb_x_lock_spin_rounds                  9000                        \nKey_read_requests                          1500                        \nKey_reads                                    35                        \nKey_write_requests                          400                        \nKey_writes                                  400                        \nOpen_table_definitions                     1750                        \nOpened_files                              45000                       4\nOpened_table_definitions                   3500                        \nOpened_tables                              4000                        \nQueries                                   80000                       4\nQuestions                                 50000                       4\nSelect_scan                                8000                        \nSort_scan                                    70                        \nTable_locks_immediate                      7000                        \nThreads_created                            7000                       1\nUptime                                    90000           1           1\nbinlog_commits                              175                        \nbinlog_group_commits                        175                        \nwsrep_protocol_version                      150                        \nwsrep_last_committed                       1750                        \nwsrep_replicated                           1750                        \nwsrep_replicated_bytes                125000000        1250            \nwsrep_received                              400                        \nwsrep_received_bytes                      22500                        \nwsrep_local_commits                         150                        \nwsrep_local_state                           150                        \nwsrep_cert_index_size                   2500000          30            \n```\n\n----------------------------------------\n\nTITLE: Insert Statement with Multiple Values\nDESCRIPTION: Inserts a single row with multiple column values into table t2\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t2 values ('ab', 'ab', 'uh', 'oh');\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL statements_with_full_table_scans View Structure\nDESCRIPTION: Shows the structure of the statements_with_full_table_scans view, which contains information about SQL statements that perform full table scans. It includes fields for query details, execution counts, latency, and row statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_77\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_full_table_scans;\n+--------------------------+------------------------+------+-----+---------------------+-------+\n| Field                    | Type                   | Null | Key | Default             | Extra |\n+--------------------------+------------------------+------+-----+---------------------+-------+\n| query                    | longtext               | YES  |     | NULL                |       |\n| db                       | varchar(64)            | YES  |     | NULL                |       |\n| exec_count               | bigint(20) unsigned    | NO   |     | NULL                |       |\n| total_latency            | text                   | YES  |     | NULL                |       |\n| no_index_used_count      | bigint(20) unsigned    | NO   |     | NULL                |       |\n| no_good_index_used_count | bigint(20) unsigned    | NO   |     | NULL                |       |\n| no_index_used_pct        | decimal(24,0)          | NO   |     | 0                   |       |\n| rows_sent                | bigint(20) unsigned    | NO   |     | NULL                |       |\n| rows_examined            | bigint(20) unsigned    | NO   |     | NULL                |       |\n| rows_sent_avg            | decimal(21,0) unsigned | YES  |     | NULL                |       |\n| rows_examined_avg        | decimal(21,0) unsigned | YES  |     | NULL                |       |\n| first_seen               | timestamp              | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen                | timestamp              | NO   |     | 0000-00-00 00:00:00 |       |\n| digest                   | varchar(32)            | YES  |     | NULL                |       |\n+--------------------------+------------------------+------+-----+---------------------+-------+\n14 rows in set (0.04 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL statements_with_runtimes_in_95th_percentile View Structure\nDESCRIPTION: Shows the structure of the statements_with_runtimes_in_95th_percentile view, which lists SQL statements with average runtimes in the top 95th percentile. It includes fields for query details, execution counts, latency statistics, and row information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_79\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_runtimes_in_95th_percentile;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| full_scan         | varchar(1)          | NO   |     |                     |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| err_count         | bigint(20) unsigned | NO   |     | NULL                |       |\n| warn_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | text                | YES  |     | NULL                |       |\n| max_latency       | text                | YES  |     | NULL                |       |\n| avg_latency       | text                | YES  |     | NULL                |       |\n| rows_sent         | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sent_avg     | decimal(21,0)       | NO   |     | 0                   |       |\n| rows_examined     | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_examined_avg | decimal(21,0)       | NO   |     | 0                   |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n16 rows in set (0.11 sec)\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Performance Metrics (Text Output)\nDESCRIPTION: This text block shows formatted output from a system monitoring tool, detailing disk I/O performance statistics. It includes metrics such as read/write megabytes per second (rd_mb_s, wr_mb_s), read/write concurrency (rd_cnc, wr_cnc), read/write response time (rd_rt, wr_rt), device busy percentage (busy), and requests in progress (in_prg) for devices like ram0, cciss/c0d0, dm-0, and md0. The initial '{4}' likely signifies a sample identifier or timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_int_diskstats-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device       rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n{4} ram0             0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{4} cciss/c0d0       0.0    0.0     0.0     0.5    0.0     0.1   0%      0\n{4} cciss/c0d0p1     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{4} cciss/c0d0p2     0.0    0.0     0.0     0.5    0.0     0.1   0%      0\n{4} cciss/c0d1       9.6   11.5    25.1    23.3    0.1     0.1 102%      0\n{4} cciss/c1d0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n{4} dm-0             0.0    0.0     0.0     0.4    0.1     0.7   0%      0\n{4} md0              0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Defining NDB Binlog Index Table in MySQL\nDESCRIPTION: The 'ndb_binlog_index' table records positions of binlog events for NDB Cluster, crucial for replication and recovery procedures within MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` int(10) unsigned NOT NULL,\n  `updates` int(10) unsigned NOT NULL,\n  `deletes` int(10) unsigned NOT NULL,\n  `schemaops` int(10) unsigned NOT NULL,\n  `orig_server_id` int(10) unsigned NOT NULL,\n  `orig_epoch` bigint(20) unsigned NOT NULL,\n  `gci` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Query Packet\nDESCRIPTION: TCP packet containing MySQL protocol SELECT query from client to server. Shows the query 'SELECT * FROM d.t WHERE 1 LIMIT 1;' in the payload.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump025.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 005b e9a4 4000 4006 52ee 7f00 0001\\n7f00 0001 bdc9 3039 9bdb f8b0 9c96 8a16\\n8018 0101 fe4f 0000 0101 080a 0059 2162\\n0059 1e7d 2300 0000 1653 454c 4543 5420\\n2a20 4652 4f4d 2064 2e74 2057 4845 5245\\n2031 204c 494d 4954 2031 3b\n```\n\n----------------------------------------\n\nTITLE: Checking Lower Boundary Chunks in MySQL\nDESCRIPTION: Verifies and records count of records below the lower boundary of the current chunk. Uses FORCE INDEX for performance optimization and includes ordering by index columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `issue_519`.`t` FORCE INDEX(`myidx`) WHERE ((`i` < ?) OR (`i` = ? AND `y` < ?)) ORDER BY `i`, `y` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Disk I/O Statistics Output\nDESCRIPTION: Raw output from Linux disk I/O monitoring showing detailed statistics for block devices including RAM disks, loop devices, and physical disks (xvda, xvdb). Each line contains metrics like reads/writes completed, sectors read/written, and time spent on I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/bug-1035311.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n 253       0 dm-0 215065268 0 8655081894 973717744 436103273 0 15617440416 519420990 0 1165286320 1493863404\n 253       1 dm-1 27721 0 387490 788600 550917 0 7550552 8271600 0 622960 9060290\n 253       2 dm-2 2256 0 48194 29430 61331 0 508992 355400 0 138920 384830\n 253       3 dm-3 1529 0 12226 19800 78364 0 627376 681430 0 223790 701230\n```\n\n----------------------------------------\n\nTITLE: MySQL Client SET SESSION Packet\nDESCRIPTION: Client packet sending SET SESSION sql_mode command to set STRICT_ALL_TABLES mode. Shows complete TCP/IP frame with MySQL protocol data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump030.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 0061 2efa 4000 4006 a6df 0a38 a818\n0a38 a82d ed18 0cea 84f4 1e9a af5e 90dc\n8018 002e c064 0000 0101 080a 0844 30a6\nee9b 5944 2900 0000 1653 4554 2053 4553\n5349 4f4e 2073 716c 5f6d 6f64 653d 2253\n5452 4943 545f 414c 4c5f 5441 424c 4553\n22\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Connection Log Entries\nDESCRIPTION: This snippet shows multiple MySQL connection log entries, including a failed connection attempt, successful connections from different users and hosts, and the start of a transaction. It demonstrates various connection scenarios and query initiation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog004.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n12345 Connect\tAccess denied for user 'nobody'@'localhost' (using password: NO)\n12345 Connect\tnobody@localhost as  on \n31519 Query\tBEGIN\n98765 Connect\tpayments_r@1.2.3.4 on sar\n```\n\n----------------------------------------\n\nTITLE: Selecting All Columns from 'foo' Table in MySQL\nDESCRIPTION: This query selects all columns from the 'foo' table. It performs a full scan and examines 51 rows, sending 9 rows as a result. The query time is 0.726052 seconds with a lock time of 0.100091 seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow034.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Executing Another SELECT Query on 'bar' Table in MySQL\nDESCRIPTION: This SQL query selects the 'foo' column from the 'bar' table where the 'id' is 2. It's similar to the previous query but with a different id value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow059.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT foo FROM bar WHERE id=2;\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Attempt Packet Capture\nDESCRIPTION: Network traffic capture showing TCP packets exchanged during a MySQL connection attempt that resulted in an 'Access denied' error. Shows client-server handshake, MySQL protocol version 5.0.67, and authentication attempt for user 'msandbox'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump003.txt#2025-04-22_snippet_0\n\nLANGUAGE: tcpdump\nCODE:\n```\n2009-04-12 12:41:46.347100 IP 127.0.0.1.44488 > 127.0.0.1.3306: tcp 0\n\t0x0000:  4500 003c d799 4000 4006 6520 7f00 0001\n\t0x0010:  7f00 0001 adc8 0cea 4a1e ee65 0000 0000\n\t0x0020:  a002 8018 620f 0000 0204 400c 0402 080a\n\t0x0030:  004c 39fc 0000 0000 0103 0306\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Events from Pro Database in MySQL\nDESCRIPTION: This query selects all columns from the 'events' table in the 'pro' database for a specific set of event IDs. It includes performance metrics showing a relatively high number of rows examined compared to rows sent.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow029.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse pro;\nSELECT * FROM `events`     WHERE (`events`.`id` IN (51118,51129,50893,50567,50817,50834,50608,50815,51023,50903,50820,50003,50890,50673,50596,50553,50618,51103,50578,50732,51021));\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Plan Tree Structure\nDESCRIPTION: Displays a hierarchical query execution plan showing a dependent subquery with index operations on film_actor and actor tables. The plan shows index lookups and scans with their corresponding keys, possible keys, key lengths, and estimated row counts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/dependent_subquery.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDEPENDENT SUBQUERY\n+- Filter with WHERE\n|  +- Index lookup\n|     key            film_actor->PRIMARY\n|     possible_keys  PRIMARY\n|     key_len        2\n|     ref            actor.actor_id\n|     rows           13\n+- Index scan\n   key            actor->PRIMARY\n   key_len        2\n   rows           200\n```\n\n----------------------------------------\n\nTITLE: Querying Upload Status with Username Construction in MySQL\nDESCRIPTION: SQL query that retrieves upload log information for clients with a status containing 'prog'. It constructs a username field as a JSON-like array format and joins multiple tables to get client information associated with the logs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nselect concat('[',cl_username,', cl_username,']') as username, h.client_id, l.time, l.message from upload_log l left join extractor_log_history h on (h.id=l.log_report_id) left join client c on (c.id=h.client_id) where h.client_id in (select client_id from upload_filling_status where status like '%prog%') and (message like 'Filling initial.%' or  message like 'Filling diff.%') order by time desc limit 3\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status in SQL (Query 2 Context)\nDESCRIPTION: Retrieves status information for table 't' within the database 'd'. This command appears in the context of Query 2 analysis, likely used by Percona Toolkit to gather metadata related to the EXECUTE statement. The \\G terminator suggests execution in a command-line client for vertical output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `d` LIKE 't'\\G\n```\n\n----------------------------------------\n\nTITLE: Unsafe Search Cache Insert Statement\nDESCRIPTION: INSERT IGNORE statement for populating search cache with word match counts. Uses JOIN operation between search and index tables with word filtering.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO fud26_search_cache (srch_query, query_type, expiry, msg_id, n_match) SELECT 'eb081c4be7a9fd8c5aa647f44e6e6365', 0, 1250326725, msg_id, count(*) as word_count FROM fud26_search s INNER JOIN fud26_index i ON i.word_id=s.id WHERE word IN('ejgkkvqduyhzjqwynkf') GROUP BY msg_id ORDER BY word_count DESC LIMIT 500\n```\n\n----------------------------------------\n\nTITLE: MySQL Host Summary View Structure (5.7)\nDESCRIPTION: View structure for summarizing statement activity, file IO and connections by host. Includes both formatted and raw data versions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n+------------------------+---------------+------+-----+---------+-------+\n| Field                  | Type          | Null | Key | Default | Extra |\n+------------------------+---------------+------+-----+---------+-------+\n| host                   | varchar(60)   | YES  |     | NULL    |       |\n| statements             | decimal(64,0) | YES  |     | NULL    |       |\n| statement_latency      | text          | YES  |     | NULL    |       |\n| statement_avg_latency  | text          | YES  |     | NULL    |       |\n| table_scans            | decimal(65,0) | YES  |     | NULL    |       |\n| file_ios               | decimal(64,0) | YES  |     | NULL    |       |\n| file_io_latency        | text          | YES  |     | NULL    |       |\n| current_connections    | decimal(41,0) | YES  |     | NULL    |       |\n| total_connections      | decimal(41,0) | YES  |     | NULL    |       |\n| unique_users           | bigint(21)    | NO   |     | 0       |       |\n| current_memory         | text          | YES  |     | NULL    |       |\n| total_memory_allocated | text          | YES  |     | NULL    |       |\n+------------------------+---------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query Equivalent\nDESCRIPTION: The equivalent SELECT query for the UPDATE operation, showing the columns and join conditions that are being used to update the data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002_no_vertical.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect  n.column1 = a.column1, n.word3 = a.word3 from db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo)\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Table in MySQL Database\nDESCRIPTION: SQL definition for the customer table in the Sakila database. Contains customer information including personal details, address references, and account activity status. Includes foreign key constraints to the store and address tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Executing Port Selection Queries in MySQL SQL\nDESCRIPTION: This snippet executes a simple query to retrieve the current MySQL server port using the '@@port' system variable. It offers insight into port discrepancies between different hosts. The queries capture differences in port output, specifically comparing ports 12345 and 12348 across different executions. It assumes connectivity to a running MySQL instance where @@port is a valid identifier.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/008/fingerprint-grouping-and-max-examples-issue-1421405.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect @@port;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n@ row 1\n< 12345\n> 12348\n\nselect @@port;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n@ row 1\n< 12345\n> 12348\n\nselect @@port;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n@ row 1\n< 12345\n> 12348\n\nselect @@port;\n```\n\n----------------------------------------\n\nTITLE: MySQL Transaction Begin Statement\nDESCRIPTION: Initiates a new database transaction\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN\n```\n\n----------------------------------------\n\nTITLE: Executing UPDATE Query on MySQL Table\nDESCRIPTION: This SQL snippet updates the 'boop' column in the 'bat' table of the 'bizzle' database. It sets the value to 'bop: 899' where the 'fillze' column equals '899'. The query is part of a performance analysis report.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_filtered.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE bizzle.bat\nSET    boop='bop: 899'\nWHERE  fillze='899'\\G\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Information from MySQL/Percona XtraDB Cluster\nDESCRIPTION: SQL query to retrieve a list of all non-system databases. The query excludes databases with names 'information_schema', 'performance_schema', and 'mysql' which are considered system databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_json_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN ('information_schema', 'performance_schema', 'mysql') ORDER BY SCHEMA_NAME\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into MySQL Table\nDESCRIPTION: This SQL snippet shows an INSERT statement adding multiple rows to a table named 'foo'. The query inserts two sets of values, each containing three columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow018.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `foo` VALUES (1, 2, 3),(4, 5, 6);\n```\n\n----------------------------------------\n\nTITLE: Host Summary View Structure in MySQL\nDESCRIPTION: Describes the structure of the host_summary view, which summarizes statement activity, file IO, and connections by host. It includes fields such as host, statements, statement_latency, and more.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n+------------------------+---------------+------+-----+---------+-------+\n| Field                  | Type          | Null | Key | Default | Extra |\n+------------------------+---------------+------+-----+---------+-------+\n| host                   | varchar(60)   | YES  |     | NULL    |       |\n| statements             | decimal(64,0) | YES  |     | NULL    |       |\n| statement_latency      | text          | YES  |     | NULL    |       |\n| statement_avg_latency  | text          | YES  |     | NULL    |       |\n| table_scans            | decimal(65,0) | YES  |     | NULL    |       |\n| file_ios               | decimal(64,0) | YES  |     | NULL    |       |\n| file_io_latency        | text          | YES  |     | NULL    |       |\n| current_connections    | decimal(41,0) | YES  |     | NULL    |       |\n| total_connections      | decimal(41,0) | YES  |     | NULL    |       |\n| unique_users           | bigint(21)    | NO   |     | 0       |       |\n| current_memory         | text          | YES  |     | NULL    |       |\n| total_memory_allocated | text          | YES  |     | NULL    |       |\n+------------------------+---------------+------+-----+---------+-------+\n```\n\nLANGUAGE: sql\nCODE:\n```\nmysql> desc x$host_summary;\n+------------------------+---------------+------+-----+---------+-------+\n| Field                  | Type          | Null | Key | Default | Extra |\n+------------------------+---------------+------+-----+---------+-------+\n| host                   | varchar(60)   | YES  |     | NULL    |       |\n| statements             | decimal(64,0) | YES  |     | NULL    |       |\n| statement_latency      | decimal(64,0) | YES  |     | NULL    |       |\n| statement_avg_latency  | decimal(65,4) | YES  |     | NULL    |       |\n| table_scans            | decimal(65,0) | YES  |     | NULL    |       |\n| file_ios               | decimal(64,0) | YES  |     | NULL    |       |\n| file_io_latency        | decimal(64,0) | YES  |     | NULL    |       |\n| current_connections    | decimal(41,0) | YES  |     | NULL    |       |\n| total_connections      | decimal(41,0) | YES  |     | NULL    |       |\n| unique_users           | bigint(21)    | NO   |     | 0       |       |\n| current_memory         | decimal(63,0) | YES  |     | NULL    |       |\n| total_memory_allocated | decimal(64,0) | YES  |     | NULL    |       |\n+------------------------+---------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Checksumming Rows Above Upper Boundary in SQL\nDESCRIPTION: This SQL query counts rows that exceed the upper boundary of a chunk in the sakila.city table. It's used to ensure complete table coverage in the checksum process by capturing rows that might be outside the main chunk ranges.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx005.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` > ?)) AND (country_id > 100) ORDER BY `city_id` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Next Chunk Boundary Query\nDESCRIPTION: Retrieves the next chunk boundary using rental_date and inventory_id columns with SQL_NO_CACHE directive to ensure fresh reads.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/n-chunk-index-cols.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `rental_date`, `rental_date`, `inventory_id` FROM `sakila`.`rental` FORCE INDEX(`rental_date`) WHERE ((`rental_date` > ?) OR (`rental_date` = ? AND `inventory_id` >= ?)) ORDER BY `rental_date`, `inventory_id`, `customer_id` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Management Table\nDESCRIPTION: Defines inventory tracking table with store and film relationships. Includes composite index for store and film lookups.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Querying foo Table with Primary Key in MySQL\nDESCRIPTION: SQL queries selecting all columns from the 'foo' table filtered by primary key. These queries have fast execution times of approximately 0.000012 seconds with no rows examined or returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow053.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo WHERE id=1;\n\nSELECT * FROM foo WHERE id=2;\n\nSELECT * FROM foo WHERE id=3;\n\nSELECT * FROM foo WHERE id=4;\n\nSELECT * FROM foo WHERE id=5;\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Command-Line Options\nDESCRIPTION: Lists the primary command-line options that can be used when starting the MySQL server. These options control default file loading behavior and allow for printing the argument list.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqld_01_issue_58.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThe following options may be given as the first argument:\n--print-defaults        Print the program argument list and exit\n--no-defaults           Don't read default options from any options file\n--defaults-file=#       Only read default options from the given file #\n--defaults-extra-file=# Read this file after the global files are read\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Process File Descriptors\nDESCRIPTION: This snippet shows the output of a command (likely lsof) that displays open file descriptors for MySQL processes. It includes details such as process ID, user, file descriptor number, and file paths.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/003-samples.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMMAND     PID      USER   FD      TYPE             DEVICE        SIZE       NODE NAME\nmysqld     6562     baron  cwd       DIR               253,0       4096    2621555 /data/data/abd_2dia\nmysqld     2362     mysql 7792uW     REG               8,33 28189917184  255188681 /data/data/abd_2dia/aia_227_223.ibd\nmysqld     2362     mysql  586uW     REG               8,33 18270388224  255182733 /data/data/abd_2dia/aia_227_228.ibd\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into 'tbl' Table in SQL\nDESCRIPTION: These SQL queries insert new records into the 'tbl' table in the 'db2' database. Each query inserts a pair of values ('a', 'b') and ('c', 'd') respectively.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-inheritance.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nuse db2;\nINSERT INTO tbl VALUES ('a', 'b');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nuse db2;\nINSERT INTO tbl VALUES ('c', 'd');\n```\n\n----------------------------------------\n\nTITLE: Retrieving DDL for 'foo' Table in SQL\nDESCRIPTION: Displays the `CREATE TABLE` statement for the table named 'foo'. Understanding the table definition, including indexes and data types, is essential for analyzing the performance and execution plan of queries accessing this table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow053.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `foo`\\G\n```\n\n----------------------------------------\n\nTITLE: Tracing MySQL Process System Calls\nDESCRIPTION: This snippet shows the output of a system call tracer (likely strace) for MySQL processes. It captures various system calls related to file operations, including pread, open, getdents64, _llseek, read, and select.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/003-samples.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nProcess 2362 attached with 81 threads - interrupt to quit\n[pid 20974] pread(7792, \"\"..., 16384, 24540512256) = 16384 <0.000369>\n[pid 22782] pread(586,  <unfinished ...>\n[pid 22782] <... pread resumed> \"\"..., 16384, 12687884288) = 16384 <0.006348>\n[pid  6594] open(\"./\", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 30 <0.000096>\n[pid  6594] getdents64(30, /* 9 entries */, 32768) = 264 <0.000164>\n[pid  6594] getdents64(30, /* 0 entries */, 32768) = 0 <0.000146>\n[pid  6594] close(30)                   = 0 <0.000098>\n[pid  6594] open(\"./test/db.opt\", O_RDONLY|O_LARGEFILE) = 30 <0.000054>\n[pid  6594] _llseek(30, 0, [0], SEEK_CUR) = 0 <0.000043>\n[pid  6594] _llseek(30, 0, [65], SEEK_END) = 0 <0.000041>\n[pid  6594] _llseek(30, 0, [0], SEEK_SET) = 0 <0.000043>\n[pid  6594] read(30, \"\"..., 65)         = 65 <0.000062>\n[pid  6594] close(30)                   = 0 <0.000045>\n[pid  6594] pread64(32, \"\"..., 13, 4339) = 13 <0.000017>\n[pid  6576] select(0, NULL, NULL, NULL, {1, 0} <unfinished ...>\n[pid  6575] <... select resumed> )      = 0 (Timeout) <1.001175>\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw MySQL Packet Hex Dumps in Plaintext\nDESCRIPTION: This snippet presents a chronological set of MySQL network traffic interactions in hexadecimal format, as output from a network capture or packet sniffing tool. The data includes source and destination IPs, ports, TCP flags, and payload data, followed by indented hex+ASCII dump blocks detailing the raw packet bytes. Intended for network engineers or DBAs seeking to reverse-engineer, debug, or audit low-level MySQL queries or responses without explicit parsing; requires familiarity with TCP/IP and binary parsing, and tools such as tcpdump or Wireshark.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump018.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-07-27 08:28:41.723445 IP 127.0.0.1.42275 > 10.0.0.1.3306: tcp 22\\n\\t0x0000:  4508 004a c2df 4000 4006 79c4 7f00 0001\\n\\t0x0010:  7f00 0001 a523 3039 05dd 8edb 0643 855a\\n\\t0x0020:  8018 0101 fe3e 0000 0101 080a 000d 5ed8\\n\\t0x0030:  000d 5420 1200 0000 0373 656c 6563 7420\\n\\t0x0040:  2a20 6672 6f6d 2066 6f6f\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-07-27 08:28:41.723651 IP 10.0.0.1.3306 > 127.0.0.1.42275: tcp 64\\n\\t0x0000:  4508 0074 d005 4000 4006 6c74 7f00 0001\\n\\t0x0010:  7f00 0001 3039 a523 0643 855a 05dd 8ef1\\n\\t0x0020:  8018 0100 fe68 0000 0101 080a 000d 5ed8\\n\\t0x0030:  000d 5ed8 0100 0001 011f 0000 0203 6465\\n\\t0x0040:  6601 6403 666f 6f03 666f 6f01 6901 690c\\n\\t0x0050:  3f00 0b00 0000 0300 0000 0000 0500 0003\\n\\t0x0060:  fe00 0002 0002 0000 0401 3105 0000 05fe\\n\\t0x0070:  0000 0200\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-07-27 08:28:41.723708 IP 127.0.0.1.42275 > 10.0.0.1.3306: tcp 0\\n\\t0x0000:  4508 0034 c2e0 4000 4006 79d9 7f00 0001\\n\\t0x0010:  7f00 0001 a523 3039 05dd 8ef1 0643 859a\\n\\t0x0020:  8010 0101 c3e6 0000 0101 080a 000d 5ed8\\n\\t0x0030:  000d 5ed8\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-07-27 08:29:34.232545 IP 127.0.0.1.34233 > 10.0.0.2.3306: tcp 22\\n\\t0x0000:  4508 004a 7047 4000 4006 cc5c 7f00 0001\\n\\t0x0010:  7f00 0001 85b9 303b 31e0 0bf0 3288 3f0d\\n\\t0x0020:  8018 0101 fe3e 0000 0101 080a 000d 9220\\n\\t0x0030:  000d 8211 1200 0000 0373 656c 6563 7420\\n\\t0x0040:  2a20 6672 6f6d 2062 6172\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-07-27 08:29:34.232748 IP 10.0.0.2.3306 > 127.0.0.1.34233: tcp 64\\n\\t0x0000:  4508 0074 4807 4000 4006 f472 7f00 0001\\n\\t0x0010:  7f00 0001 303b 85b9 3288 3f0d 31e0 0c06\\n\\t0x0020:  8018 0100 fe68 0000 0101 080a 000d 9220\\n\\t0x0030:  000d 9220 0100 0001 011f 0000 0203 6465\\n\\t0x0040:  6601 6403 6261 7203 6261 7201 6a01 6a0c\\n\\t0x0050:  3f00 0b00 0000 0300 0000 0000 0500 0003\\n\\t0x0060:  fe00 0002 0002 0000 0401 3205 0000 05fe\\n\\t0x0070:  0000 0200\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-07-27 08:29:34.232787 IP 127.0.0.1.34233 > 10.0.0.2.3306: tcp 0\\n\\t0x0000:  4508 0034 7048 4000 4006 cc71 7f00 0001\\n\\t0x0010:  7f00 0001 85b9 303b 31e0 0c06 3288 3f4d\\n\\t0x0020:  8010 0101 edae 0000 0101 080a 000d 9220\\n\\t0x0030:  000d 9220\n```\n\n----------------------------------------\n\nTITLE: Basic Select Query Without Comments\nDESCRIPTION: Simple SQL select statement retrieving column c from table t with id condition\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset010.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect c from t where id='foo';\n```\n\n----------------------------------------\n\nTITLE: Replacing Checksums for Records Below Lower Boundary in sakila.city Table\nDESCRIPTION: This query counts records with country_id below the lower boundary and replaces the corresponding entry in percona.checksums. It targets records where country_id is greater than 100 but less than a specified parameter.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx004.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`city` FORCE INDEX(`idx_fk_country_id`) WHERE ((`country_id` < ?)) AND (country_id > 100) ORDER BY `country_id` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in SQL\nDESCRIPTION: Defines the store table schema for rental store locations. Contains foreign keys to staff (manager) and address tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining User Stage Summary Tables in MySQL\nDESCRIPTION: SQL table definitions for user_summary_by_stages and x$user_summary_by_stages views showing stage execution statistics per user. Includes fields for tracking event counts and latencies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_97\n\nLANGUAGE: SQL\nCODE:\n```\ndesc user_summary_by_stages;\ndesc x$user_summary_by_stages;\n```\n\n----------------------------------------\n\nTITLE: Defining percona_test.sentinel Table Schema (SQL)\nDESCRIPTION: This SQL snippet creates the `sentinel` table within the `percona_test` database. It includes an integer primary key column `id` and a `ping` column of type varchar(64) to store status or heartbeat information. The table uses the InnoDB storage engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sentinel` (\n  `id` int NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Linux Disk I/O Statistics Format\nDESCRIPTION: Raw disk I/O statistics data from /proc/diskstats showing major/minor device numbers, device names, and various read/write metrics including operations, sectors, and timing information. Data is captured at 1-second intervals with timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query Output Format Example\nDESCRIPTION: Sample output from the pt-mongodb-query-digest tool showing query statistics including QPS, ratio of documents examined to returned, execution time, and other performance metrics for a specific MongoDB query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-mongodb-query-digest.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Query 3:  0.06 QPS, ID 0b906bd86148def663d11b402f3e41fa\n# Ratio    1.00  (docs examined/returned)\n# Time range: 2017-02-03 16:01:37.484 -0300 ART to 2017-02-03 16:02:08.43 -0300 ART\n# Attribute            pct     total        min         max        avg         95%        stddev      median\n# ==================   ===   ========    ========    ========    ========    ========     =======    ========\n# Count (docs)                   100\n# Exec Time ms           2         3           0           1           0           0           0           0\n# Docs Examined          5      7.50K      75.00       75.00       75.00       75.00        0.00       75.00\n# Docs Returned         92      7.50K      75.00       75.00       75.00       75.00        0.00       75.00\n# Bytes recv             1    106.12M       1.06M       1.06M       1.06M       1.06M       0.00        1.06M\n# String:\n# Namespaces          samples.col1\n# Operation           query\n# Fingerprint         find,shardVersion\n# Query               {\"find\":\"col1\",\"shardVersion\":[0,\"000000000000000000000000\"]}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL\nDESCRIPTION: This SQL command removes a duplicate index named 'domain' from the 'domains' table in the 'test' database. The index is redundant due to the presence of another unique key 'unique_key_domain' with the same column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/simple_dupe_bug_1402730_80.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `test`.`domains` DROP INDEX `domain`;\n```\n\n----------------------------------------\n\nTITLE: Preparing a Parameterized Query in MySQL - SQL\nDESCRIPTION: Prepares a SQL statement with placeholders to allow execution with variable parameters using MySQL's PREPARE mechanism. The query selects all columns from the 'd.t3' table where any of columns 'v', 'c', or 'f' matches a parameter. Dependencies include an active MySQL connection and presence of table 'd.t3'. Parameters (? parameters) must be bound before execution. Input parameters are dynamic; output is the result set of matching rows. Limitations include requiring compatible datatypes and existing table schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump023.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nPREPARE SELECT * FROM d.t3 WHERE v=? OR c=? OR f=?\\G\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Output (iostat-like)\nDESCRIPTION: This snippet displays sample output from a disk I/O monitoring tool, resembling the output of `iostat`. It shows detailed read and write statistics for various block devices identified (e.g., ram0, cciss/c0d0, dm-0, md0). Key metrics include reads/writes per second (rd_s, wr_s), average block size in KB (rd_avkb, wr_avkb), megabytes per second (rd_mb_s, wr_mb_s), merge percentage (rd_mrg, wr_mrg), concurrency (rd_cnc, wr_cnc), response time (rd_rt, wr_rt), device busy percentage (busy), requests in progress (in_prg), total IOPS (io_s), average queue time (qtime), and average service time (stime). The first line is a header describing the columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_diskstats-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device          rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n{4} ram0             0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{4} cciss/c0d0       0.0     0.0     0.0     0%    0.0     0.0    17.7    28.1     0.5    86%    0.0     0.1   0%      0    17.7    0.1   0.0\n{4} cciss/c0d0p1     0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{4} cciss/c0d0p2     0.0     0.0     0.0     0%    0.0     0.0    17.7    28.1     0.5    86%    0.0     0.1   0%      0    17.7    0.1   0.0\n{4} cciss/c0d1     458.1    21.5     9.6     0%   11.5    25.1   985.0    24.2    23.3     0%    0.1     0.1 102%      0  1443.1    7.3   0.7\n{4} cciss/c1d0       0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{4} dm-0             0.0     0.0     0.0     0%    0.0     0.0    99.3     4.0     0.4     0%    0.1     0.7   0%      0    99.3    0.7   0.0\n{4} md0              0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'time_zone_leap_second' Table\nDESCRIPTION: Drops the existing `time_zone_leap_second` table if it exists and then creates it. This table stores information about leap second transitions, including the transition time and the correction amount. It uses the MyISAM engine and the utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Table structure for table `time_zone_leap_second`\n--\n\nDROP TABLE IF EXISTS `time_zone_leap_second`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: MySQL IO Global Wait by Latency Table Structure\nDESCRIPTION: Schema definitions for io_global_by_wait_by_latency and x$io_global_by_wait_by_latency tables that track IO statistics based on operation latency. Includes detailed field definitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc io_global_by_wait_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| event_name    | varchar(128)        | YES  |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n| read_latency  | text                | YES  |     | NULL    |       |\n| write_latency | text                | YES  |     | NULL    |       |\n| misc_latency  | text                | YES  |     | NULL    |       |\n| count_read    | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_read    | text                | YES  |     | NULL    |       |\n| avg_read      | text                | YES  |     | NULL    |       |\n| count_write   | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_written | text                | YES  |     | NULL    |       |\n| avg_written   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Query Packet\nDESCRIPTION: Network packet containing a MySQL SELECT query requesting all columns from table d.t with multiple OR conditions in the WHERE clause\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump029.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 0083 3224 4000 4006 0a47 7f00 0001\\n7f00 0001 8e90 3039 0042 df58 00ea 6a19\\n8018 0101 fe77 0000 0101 080a 0011 ed34\\n0011 ed34 4b00 0000 1653 454c 4543 5420\\n2a20 4652 4f4d 2064 2e74 2057 4845 5245\\n2069 3d3f 204f 5220 753d 3f20 4f52 2076\\n3d3f 204f 5220 643d 3f20 4f52 2066 3d3f\\n204f 5220 7420 3e20 3f20 4f52 2064 7420\\n3e20 3f\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query SELECT Statement\nDESCRIPTION: A SELECT query executed on the film_text table that took 2 seconds to complete, with 0 lock time. The query returned 1 row while examining 0 rows according to the slow query log metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow006.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from film_text;\n```\n\n----------------------------------------\n\nTITLE: SELECT Query from tbl in db1 Database with Ordering\nDESCRIPTION: A SQL query selecting 'foo' from table 'tbl' with a WHERE condition and ORDER BY clause. This query is executed in the 'db1' database and is shown with EXPLAIN output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT foo \n                         FROM tbl\n                         WHERE col=12345\n                         ORDER BY col\n```\n\n----------------------------------------\n\nTITLE: Displaying Structured Host and Query Stats - Text\nDESCRIPTION: This snippet presents host-specific configuration and query statistics in a log-style, plain text format. It includes visible comment headers to separate sections, host blocks with DSN listings, and simple statistics enumerated as key-value pairs. No external dependencies are required; the file assumes manual populating or automated generation by higher-level logic, and key outputs include the displayed diagnostic data for each host and an overall summary of query handling outcomes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/001/insert.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#-----------------------------------------------------------------------\\n# Logs\\n#-----------------------------------------------------------------------\\n\\nFile: ...\\nSize: 216\\n\\n#-----------------------------------------------------------------------\\n# Hosts\\n#-----------------------------------------------------------------------\\n\\nhost1:\\n\\n  DSN:       h=127.1,P=12345\\n  hostname:  ...\\n  MySQL:     ...\\n\\nhost2:\\n\\n  DSN:       h=127.1,P=12348\\n  hostname:  ...\\n  MySQL:     ...\\n\\n#-----------------------------------------------------------------------\\n# Stats\\n#-----------------------------------------------------------------------\\n\\nfailed_queries        0\\nnot_select            1\\nqueries_filtered      0\\nqueries_no_diffs      0\\nqueries_read          1\\nqueries_with_diffs    0\\nqueries_with_errors   0\n```\n\n----------------------------------------\n\nTITLE: Selecting Column 'n' in Test Database (MySQL)\nDESCRIPTION: This query selects the 'n' column from a table in the 'test' database. It has an execution time of 2 seconds and returns 1 row. The query is executed by the root user from localhost.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow001_distillreport.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT n\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Table\nDESCRIPTION: This SQL snippet inserts a row with the value 'bar' into the 'foo' table. The operation's metrics such as query time and lock time are noted. The table 'foo' should exist with compatible schema for the insert operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow058.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 7  Schema: db\n# Query_time: 0.018799  Lock_time: 0.009453  Rows_sent: 0  Rows_examined: 0\nINSERT `foo` VALUES(\"bar\");\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 7  Schema: db\n# Query_time: 0.018799  Lock_time: 0.009453  Rows_sent: 0  Rows_examined: 0\ninsert `foo` values(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Query with Multiple OR Conditions\nDESCRIPTION: This SQL query selects all columns from table 'd.t' with multiple OR conditions on various fields. It demonstrates a complex WHERE clause with multiple parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump034.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM d.t WHERE i=? OR u=? OR v=? OR d=? OR f=? OR t > ? OR dt > ? OR i2=? OR i3=? OR i4=?\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Condition in blah\nDESCRIPTION: This SQL SELECT COUNT statement counts the rows in the 'blah' table where 'col' is greater than 2. The database involved is 'db1'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*) FROM blah WHERE col > 2\\G\n```\n\n----------------------------------------\n\nTITLE: INSERT Statement\nDESCRIPTION: INSERT operation adding a row with three values into table t\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t values (1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Querying Moderator Table from user_sfn Schema\nDESCRIPTION: SQL commands to switch to the user_sfn schema and query all data from the moderator table. This query is executed by user_user from a remote host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow016.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse user_sfn;\nSELECT * FROM moderator;\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Database Checksum Results\nDESCRIPTION: This snippet shows the output of a checksum operation on MySQL databases. It includes columns for errors, differences, row counts, and skipped rows for each table across different databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/default-results-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERRORS DIFFS ROWS SKIPPED TABLE\n0 0 0 0 mysql.columns_priv\n0 0 1 0 mysql.component\n0 0 2 0 mysql.db\n0 0 0 0 mysql.default_roles\n0 1 2 0 mysql.engine_cost\n0 0 0 0 mysql.func\n0 0 53 0 mysql.help_category\n0 0 985 0 mysql.help_keyword\n0 0 2043 0 mysql.help_relation\n0 0 701 0 mysql.help_topic\n0 0 0 0 mysql.password_history\n0 0 0 0 mysql.plugin\n0 0 0 0 mysql.procs_priv\n0 1 1 0 mysql.proxies_priv\n0 0 0 0 mysql.replication_asynchronous_connection_failover\n0 0 0 0 mysql.replication_asynchronous_connection_failover_managed\n0 0 1 0 mysql.replication_group_configuration_version\n0 0 2 0 mysql.replication_group_member_actions\n0 0 0 0 mysql.role_edges\n0 1 6 0 mysql.server_cost\n0 0 0 0 mysql.servers\n0 0 2 0 mysql.tables_priv\n0 0 0 0 mysql.time_zone\n0 0 0 0 mysql.time_zone_leap_second\n0 0 0 0 mysql.time_zone_name\n0 0 0 0 mysql.time_zone_transition\n0 0 0 0 mysql.time_zone_transition_type\n0 1 5 0 mysql.user\n0 0 29 0 percona_test.checksums\n0 0 1 0 percona_test.sentinel\n0 0 200 0 sakila.actor\n0 0 603 0 sakila.address\n0 0 16 0 sakila.category\n0 0 600 0 sakila.city\n0 0 109 0 sakila.country\n0 0 599 0 sakila.customer\n0 0 1000 0 sakila.film\n0 0 5462 0 sakila.film_actor\n0 0 1000 0 sakila.film_category\n0 0 1000 0 sakila.film_text\n0 0 4581 0 sakila.inventory\n0 0 6 0 sakila.language\n0 0 16049 0 sakila.payment\n0 0 16044 0 sakila.rental\n0 0 2 0 sakila.staff\n0 0 2 0 sakila.store\n0 0 6 0 sys.sys_config\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT INTO Query\nDESCRIPTION: Example of SELECT INTO query type that was causing issues with pt-upgrade tool\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT...INTO\n```\n\n----------------------------------------\n\nTITLE: Comparing Database Performance Analysis Reports in Diff Format\nDESCRIPTION: This diff output shows changes between two database performance analysis reports, including differences in query counts, Apdex scores, and database reference formatting. The changes highlight modifications to statistical summaries and table reference formats.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/diff001.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n2c2\n< # Overall: 15 total, 10 unique, 0.00 QPS, 0.00x concurrency ______________\n---\n> # Overall: 15 total, 4 unique, 0.00 QPS, 0.00x concurrency _______________\n24c24\n< # Scores: Apdex = 0.50 [1.0]*, V/M = 0.00\n---\n> # Scores: Apdex = NS [0.0]*, V/M = 0.00\n37d36\n< # Databases    foo\n50,51c49,50\n< #    SHOW TABLE STATUS FROM `foo` LIKE 'a'\\G\n< #    SHOW CREATE TABLE `foo`.`a`\\G\n---\n> #    SHOW TABLE STATUS LIKE 'a'\\G\n> #    SHOW CREATE TABLE `a`\\G\n57c56\n< # Scores: Apdex = 1.00 [1.0]*, V/M = 0.00\n---\n> # Scores: Apdex = NS [0.0]*, V/M = 0.00\n101,103c100,101\n< #    1 0x182FF6A853858893  2.0000 72.4%     1 2.0000 0.50  0.00 SELECT a\n< #    2 0x66825DDC008FFA89  0.7261 26.3%     1 0.7261 1.00  0.00 UPDATE db?.tuningdetail_?_? db?.gonzo\n< # MISC 0xMISC              0.0361  1.3%    13 0.0028   NS   0.0 <8 ITEMS>\n---\n> #    1 0x182FF6A853858893  2.0000 72.4%     1 2.0000   NS  0.00 SELECT a\n> #    2 0x66825DDC008FFA89  0.7261 26.3%     1 0.7261   NS  0.00 UPDATE db?.tuningdetail_?_? db?.gonzo\n```\n\n----------------------------------------\n\nTITLE: Identifying PostgreSQL Summary Tool Used\nDESCRIPTION: This snippet indicates that the `pg_gather` script/tool is used to generate a summary report for Percona Distribution for PostgreSQL, which is then included in the collected data (specifically in `summary.txt`). Requires `psql` client to be installed and in PATH.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"pg_gather\"\n```\n\n----------------------------------------\n\nTITLE: Handling Upper Boundary for sakila.city Table Checksum in MySQL\nDESCRIPTION: This SQL query handles the upper boundary of the chunk being processed for the 'city' table. It counts rows above the current chunk's upper boundary and stores a placeholder checksum.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` > ?)) ORDER BY `city_id` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Querying User Rooms in MySQL\nDESCRIPTION: This SQL query selects the 'here' column from the users_rooms table for a specific user ID. It's being executed multiple times with different user IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT here FROM users_rooms WHERE userid=2269527\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Table Structure for View 'film_list' - SQL\nDESCRIPTION: Sets up a temporary table structure named 'film_list' to facilitate view creation and manipulation. The definition provides fields necessary for displaying film details for queries or reporting. No inputs or outputs, but table schema mimics expected output of a view; requires MySQL and no direct dependencies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `film_list` (\n  `FID` smallint(5) unsigned,\n  `title` varchar(255),\n  `description` text,\n  `category` varchar(25),\n  `price` decimal(4,2),\n  `length` smallint(5) unsigned,\n  `rating` enum('G','PG','PG-13','R','NC-17'),\n  `actors` varchar(341)\n) ENGINE=MyISAM */;\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Date Trigger in MySQL\nDESCRIPTION: This trigger automatically sets the rental_date field to the current timestamp (NOW()) whenever a new record is inserted into the rental table. It is defined with the DEFINER as msandbox user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER rental_date BEFORE INSERT ON rental\n\tFOR EACH ROW SET NEW.rental_date = NOW() */\n```\n\n----------------------------------------\n\nTITLE: Loading Data from Second External File into MySQL Table\nDESCRIPTION: SQL command to load data from a different text file into the same MySQL database table. Similar to the previous command but with a different source file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow051.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nLOAD DATA INFILE '/tmp/bar.txt' INTO TABLE db.tbl;\n```\n\n----------------------------------------\n\nTITLE: Describing x$schema_tables_with_full_table_scans Structure in MySQL\nDESCRIPTION: Shows the structure of the x$schema_tables_with_full_table_scans view, similar to schema_tables_with_full_table_scans but with raw numeric latency values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_72\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_tables_with_full_table_scans;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| object_schema     | varchar(64)         | YES  |     | NULL    |       |\n| object_name       | varchar(64)         | YES  |     | NULL    |       |\n| rows_full_scanned | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency           | bigint(20) unsigned | NO   |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Handling Lower Boundary for sakila.city Table Checksum in MySQL\nDESCRIPTION: This SQL query handles the lower boundary of the chunk being processed for the 'city' table. It counts rows below the current chunk's lower boundary and stores a placeholder checksum.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/fnv64-sakila-city.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` < ?)) ORDER BY `city_id` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Querying Table Data from Logs with SQL - SQL\nDESCRIPTION: This snippet executes a SELECT * FROM foo SQL query, typically found in database log analysis. It shows example performance metadata, such as query execution time and locking time. Dependencies include access to a SQL database and permissions to execute SELECT statements; no additional client libraries are specified. The main parameter is the table name (foo) and the output includes all rows and columns from that table. This pattern is often used in performance analysis and database monitoring.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slowlogwriter002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 1.123456  Lock_time: 0.000001  Rows_sent: 0  Rows_examined: 0\nselect * from foo;\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Transaction Table\nDESCRIPTION: Defines payment transaction records with customer, staff, and rental relationships. Includes amount and payment date tracking.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Linux Disk I/O Statistics Output\nDESCRIPTION: Raw disk I/O statistics from Linux showing performance metrics for various devices including RAM disks (ram0-ram15), loop devices (loop0-loop7), physical disks (xvda, xvdb) and their partitions. Each line contains 11 fields showing reads, writes, sectors read/written and timing information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/bug-1035311.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n   1       0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1       1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1       2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   ...\n 202       0 xvda 403365 10093 9823440 7028220 491504 495661 11069224 10230070 0 3676660 17257790\n 202      16 xvdb 204328254 10730367 8655242734 343325754 384710125 40724809 15617500899 2443393806 0 1164772220 2788126400\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Packet\nDESCRIPTION: TCP packet containing MySQL protocol SELECT query 'SELECT i FROM d.t WHERE i=?'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump021.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 0054 b468 4000 4006 8831 7f00 0001\\n7f00 0001 e4fb 3039 47e2 1612 4850 bc0a\\n8018 0101 fe48 0000 0101 080a 000f a420\\n000f a13c 1c00 0000 1653 454c 4543 5420\\n6920 4652 4f4d 2064 2e74 2057 4845 5245\\n2069 3d3f\n```\n\n----------------------------------------\n\nTITLE: Kernel Boot and Hardware Initialization Log\nDESCRIPTION: System boot log showing initialization of hardware components including ACPI, PCI bridges, USB controllers, and CPU power states. Contains detailed IRQ routing, memory allocation, and driver loading information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-005.txt#2025-04-22_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nchecking if image is initramfs... it is\nFreeing initrd memory: 3379k freed\nNET: Registered protocol family 16\nACPI: bus type pci registered\nPCI: Using MMCONFIG at e0000000\nACPI: Interpreter enabled\nACPI: Using IOAPIC for interrupt routing\nACPI: No dock devices found.\n[...truncated for brevity...]\nusb usb3: configuration #1 chosen from 1 choice\nhub 3-0:1.0: USB hub found\nhub 3-0:1.0: 2 ports detected\nusb 1-3: new high speed USB device using ehci_hcd and address 2\n```\n\n----------------------------------------\n\nTITLE: Creating Global Grants Table in SQL\nDESCRIPTION: This SQL script initializes the global_grants table to manage extended global grants in a MySQL database. The primary key is a composite of USER, HOST, and PRIV, with another column for WITH_GRANT_OPTION. It is used to delineate global user privileges and options.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `global_grants` (\n  `USER` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `HOST` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `PRIV` char(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `WITH_GRANT_OPTION` enum('N','Y') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`USER`,`HOST`,`PRIV`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Extended global grants'\n```\n\n----------------------------------------\n\nTITLE: Creating percona_test.load_data Table in SQL\nDESCRIPTION: This SQL statement defines a simple table named `load_data` in the `percona_test` database. It contains a single integer column `i` which allows NULL values. This table is likely used for testing data loading operations or performance benchmarks. It uses the InnoDB engine and `utf8mb4` character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `load_data` (\n  `i` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: MySQL Product Selection with Large IN Clause\nDESCRIPTION: A slow query selecting product IDs and images with status and description filters, plus a large IN clause containing over 1000 product IDs. The query took 413.14 seconds with minimal lock time (0.007 seconds) and returned 20 rows after examining 268 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow027.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 413.146036  Lock_time: 0.007260 Rows_sent: 20  Rows_examined: 268\nuse db1;\nSET timestamp=1233570292;\nselect id, img from products p where p.status = 5 and p.desc = 'foo' and p.id in (85875,326904,290144,43492,207351,60944,273124,216747,302570,125414,187147,325111,360842,56627,47517,244936,172742,160378,216571,105703,70503,195646,329729,58520,332769,320997,183912,327088,316953,71612,69377,261126,294549,100552,75799,362998,276460,209980,128768,245969,71305,311656,344400,250863,257901,206849,297971,244904,279277,275868,179418,166333,202439,152249,211079,60522,330722,113493,271106,319670,320276,222161,60031,228324,190035,326792,350280,259921,363915,203526,191854,69735,340014,125476,248833,123738,97404,78277,56719,151175,216945,348845,207973,276208,204988,263401,137855,95743,226421,279379,121056,103239,246131,315178,339633,109239,156294,306081,118255,147157,292553,360339,56727,212239,203446,256867,244850,350269,174426,134836,207653,174376,177232,278460,51159,169682,223512,329279,286052,244840,203458,315752,183475,53089,270797,188569,352276,186896,131695,53071,256039,135220,265511,105980,116950,292999,245987,148217,270531,165058,163029,78015,202249,95705,325397,170877,189398,216803,80530,56683,88462,53111,69156,319678,182678,342457,363552,47459,280102,117034,163049,312840,125464,206251,341251,56679,222781,270433,209760,293268,283909,329731,120220,106160,280350,247998,74534,221769,181127,50671,54438,165216,330315,262057,342227,252341,292951,243470,84521,51165,230677,197985,178752,272654,281197,188503,100083,358133,259413,246339,53574,139526,212164,166861,171317,215048,95727,62486,288992,311478,62490,164574,274606,134894,205562,56075,330291,168268,358475,177867,203347,205456,326369,56175,199638,210439,45538,157044,275383,199123,346587,122697,197414,107573,76782,207395,154679,118501,259808,250114,81731,123017,305735,61806,363950,230029,135555,206949,301328,164934,125436,65038,204289,170927,174320,221713,140254,169858,168732,329081,254305,100394,353939,206183,299465,344564,337716,95717,186879,212028,276956,328075,292699,258203,168077,249223,133776,74546,259135,112971,48283,182015,222537,200628,302302,178474,305205,274454,83492,106472,97171,172009,129365,337854,78771,70142,219847,72959,160499,216295,159247,279601,76786,312197,53478,279125,201200,203532,231741,289798,210537,208806,47249,193099,127355,195385,132132,267484,345807,98832,292165,175350,260110,58659,224751,227665,163019,251852,194518,120166,199652,215445,190929,363705,42899,206839,184239,65074,327542,208460,190917,231807,211361,280812,326784,175344,207739,304567,363474,275682,215625,323903,144069,194221,81828,211271,258687,190121,61526,59822,295812,194087,96130,189418,279358,222257,328209,329735,209764,262053,165214,357662,126676,160240,179450,243594,324213,249674,167718,329723,58550,60602,184077,261390,127021,133868,285276,215391,98611,332383,56635,200440,108414,339197,255704,146642,312003,69731,61974,284592,249339,69326,60279,76298,314153,204710,132790,45544,60954,66410,344762,253979,205480,350148,324223,296300,69619,300210,99887,162019,248118,94957,261162,283615,340238,205398,227081,253243,265317,108516,206073,340066,56179,122057,193321,113990,181819,356679,252842,261765,143159,179168,205056,175496,86136,86908,53107,315428,357957,241375,42482,331538,50695,355263,293498,220780,107913,207940,191948,194227,266224,134940,301369,87064,132144,157716,329505,350646,54422,125501,71806,58981,214027,355563,272666,43079,140835,198672,60526,268792,293790,264564,70999,244914,202393,249894,223421,139272,243622,250531,209984,337066,87747,186022,212296,191760,181097,95352,210921,138521,188463,358025,259639,337844,308747,51179,330285,248553,308583,269424,252722,130863,230155,206415,261234,352868,83370,212406,229132,292993,300032,342427,284380,316843,247124,345095,200017,344534,78945,93445,128782,65410,147101,122695,69138,315418,56623,332363,286068,345595,243192,289806,204339,60548,156290,332885,220794,312971,132128,355649,216003,188591,350308,204782,186902,69964,126123,89312,132786,248383,224068,334192,79440,223430,271645,183044,226863,295848,238561,203466,200622,220964,164944,80461,204097,52879,161989,275499,290058,295044,229599,178747,340380,189364,355864,179220,112094,193073,132576,105377,172661,179055,164051,64924,203460,125452,340250,315424,245966,333183,58840,184245,210929,334772,184661,249217,206775,175698,340356,247118,268440,105669,348046,92331,272576,171007,212232,199184,259829,345589,236433,116157,178368,257889,209716,308955,71001,179069,50165,266765,201470,180981,208938,100560,300050,251115,327212,279703,281025,316134,154251,96128,245821,213065,209986,161735,59757,109065,201340,56081,208708,86902,314726,221489,193145,305749,257219,232464,167941,214543,71987,306643,357391,304933,272405,314263,336937,191931,51233,163880,246835,345303,212198,287779,106052,206903,280668,98036,323859,273186,297171,291029,51163,326788,88195,108932,161431,80059,268294,352324,132184,181309,133766,81311,135529,49991,360510,162677,70981,243378,132082,187750,112376,71897,76798,355431,81124,344194,205020,134954,74883,246225,130697,357999,79063,58777,80670,168738,81128,158354,330613,337554,212200,271665,66883,160621,68974,258983,129136,341373,357666,270219,270089,306109,292567,187029,213861,272031,293927,212330,56257,236543,301202,205098,247030,109071,147125,280646,73731,214551,213891,65854,259813,209334,283931,212306,346397,73743,79436,72977,196735,204466,364052,203371,202588,296082,125156,178372,206201,194261,297497,293254,259659,297491,225501,222193,282775,346527,363387,61484,263689,148414,133990,346435,211069,329717,110337,341955,217198,282143,199544,189094,62496,160681,332745,184529,342443,334256,142172,251429,71259,289218,157572,246199,199200,299882,253993,225715,206143,216335,154401,208236,155250,70741,197200,209766,203103,182085,115284,190873,206008,148087,170650,229637,189182,245919,321069,65686,266625,164938,203454,211311,349990,123297,228817,50717,262685,83770,350286,283428,74006,164976,200538,51618,52775,338226,109113,261456,191616,278757,197428,317952,127346,57803,113691,318532,178462,79366,193061,76603,350942,69365,93393,293905,289236,347580,217867,279047,216703,72983,330013,185068,207950,219172,275341,313034,276630,80644,153616,250931,318608,334612,45147,197979,196233,111770,269937,284051,253817,277968,189859,124904,303580,68984,355445,293073,70515,248483,189176,118795,170252,178243,42510,243084,127366,263715,231553,141254,72497,68896,337039,59958,199214,226793,138371,190359,162155,75871,345555,70178,127379,281331,276792,170881,145171,127301,68980,104421,227411,84235,289248,74532,124878,298453,351046,223433,258191,270709,72011,129048,172487,125386,197608,54881,246249,251383,199230,304350,100023,64996,301554,268919,96324,252365,112969,223416,198213,205750,214163,256253,321518,302210,275377,110524,69162,178294,341425,284606,229192,337502,271134,363186,169744,211263,203281,355896,154117,106030,212316,229865,335092,165042,222181,180122,194083,188687,308949,280694,126640,99169,127623,239806,345625,197967,125424,187156,65076,178760,323755,259891,253186,323905,186789,342449,52222,215249,296150,250152,339844,109795,136631,79123,252207,315198,185603,292587,248052,340234,357413,342501,143163,271142,205892,213353,190017,107323,168724,252698,178288,328757,99875,256421,332561,210595,270617,291769,212876,121060,210749,83588,284966,202317,288968,180776,65340,87052,327556,192238,138825,214641,238549,285706,350530,359039,80005,279582,121943,362360,264789,351355,214918,279369,327676,310305,364013,124591,159127,83088,211307,345185,338723,248937,184027,210691,245976,212464,275880,184861,127057,187980,223453,290048,189883,168720,57060,264194,344168,68430,215397,76762,269486,54865,86645,323568,189390,75094,220810,166664,66472,58236,350316,360263,261312,178519,190628,332621,186787,231797,266599,165936,214890,317387,302960,155702,59489,206555,276852,164722,209250,291177,300026,141489,235328,183239,186605,140412,161799,126873,160430,329763,79143,182914,209768,252265,363454,108410,79266,343686,322001,49303,226713,100185,104108,68926,55771,266264,59826,67002,74284,57939,344420,334878,344532,326285,93465,234268,261693,317091,254517,128347,80451,224088,329743,64356,264354,319766,295036,230131,201270,255300,231759,340102,293258,320535,273110,95430,141907,43484,284392,285830,103766,355886,229601,100898,104803,264496,125817,329525,107517,205268,127356,362325,178931,222525,148085,76294,111930,352304,266242,332761,56083,349749,174550,179216,183738,125011,278921,238665,155880,50167,173232,267983,133206,241488,350516,351024,276602,319756,177018,280210,228302,356183,98840,86152,183742,176219,142002,208132,313841,67788,302658,106134,205894,74526,233788,68894,290062,76806,298223,259497,196851,269207,114724,206977,295366,125398,187432,285972,343260,270035,72391,337708,181645,297419,187968,259575,251934,41914,301806,86533,202916,277277,201640,56093,204760,263409,112178,361307,324103,225367,211331,191934,232345,153502,58872,158122,302536,329438,146892,322741,270023,267616,250018,136039,104415,287799,348052,330265,226429,254313,125471,186070,204359,75567,205396,308471,136571,180766,204700,199170,256115,57989,65090,125526,305183,195081,113602,245242,204718,279701,358515,310203,239713,251978,236916,244856,199644,202347,244920,211277,340312,323029,317085,76469,204712,123959,214477,57136,129467,283731,57200,312009,171441,181641,190115,213067,345893,247074,182424,291165,187936,229939,121325,199228,197210,162587,42036,253188,73392,126740,191883,189893,162835,259913,135014,81613,324829,154577,300737,114830,297573,170330,162585,60598,339986,244954,198950,174662,199640,85867,354383,210927,136735,153494,331010,222965,100558,115925,284624,146044,68780,113996,132136,54470,242784,126644,212248,217130,312331,250034,276978,42242,325751,78779,363678,187752,214561,162679,126521,282121,66847,77863,357913,205856,172688,229627,188040,279323,242104,158472,221447,60010,293053,200306,352436,253757,62869,99493,60938,307674,187007,60411,186118,256363,65064,178583,126700,154195,177998,352290,172756,276982,69164,121963,218363,247208)\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Client Query Packet\nDESCRIPTION: This snippet shows the hexadecimal dump of a TCP packet sent from the MySQL client to the server, containing a SQL query. The packet includes the query text 'select \"paris in the the spring\" as trick'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump036.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0x0000:  4508 0062 2840 4000 4006 144c 7f00 0001\n0x0010:  7f00 0001 e222 0cea 0ab4 d423 0b4b fd04\n0x0020:  8018 0201 fe56 0000 0101 080a 0034 fb91\n0x0030:  0034 fb91 2a00 0000 0373 656c 6563 7420\n0x0040:  2270 6172 6973 2069 6e20 7468 6520 7468\n0x0050:  6520 7370 7269 6e67 2220 6173 2074 7269\n0x0060:  636b\n```\n\n----------------------------------------\n\nTITLE: Schema Information and Data Deletion - SQL\nDESCRIPTION: Administrative query to show table structure and DELETE operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow038.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW FIELDS FROM tbl2;\nDELETE FROM tbl3 WHERE 1=1;\n```\n\n----------------------------------------\n\nTITLE: Querying Variable Column in MySQL\nDESCRIPTION: SQL query that selects the 'very_variable_column' from 'unsteady_table'. This query demonstrates inconsistent performance with query times ranging from ~1.2 to ~4.9 seconds as shown in the slow query log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect very_variable_column from unsteady_table;\n```\n\n----------------------------------------\n\nTITLE: Creating staff table in SQL for Sakila database\nDESCRIPTION: This SQL statement creates the staff table, which stores information about employees. It includes foreign key constraints referencing the address and store tables, and uses auto-increment for the staff_id.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_39\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Describing waits_by_user_by_latency View Structure in MySQL\nDESCRIPTION: Shows the structure of the waits_by_user_by_latency view, which lists wait events by user. It includes fields for user, event, total occurrences, and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_107\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc waits_by_user_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| user          | varchar(32)         | YES  |     | NULL    |       |\n| event         | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Capturing TCP Packet Hex Dump (Server to Client)\nDESCRIPTION: This snippet shows a hexadecimal dump of a 68-byte TCP packet sent from server 10.55.200.15 (port 3306) to client 10.55.200.31 (port 64987) at 2009-06-09 16:53:17.111346. The dump includes offsets and hexadecimal byte values, representing the packet's payload, likely part of a MySQL protocol exchange. This format is typical of network analysis tools like tcpdump.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump016.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-06-09 16:53:17.111346 IP 10.55.200.15.3306 > 10.55.200.31.64987: tcp 68\n\t0x0000:  4508 0078 17b6 4000 4006 7e25 0a37 c80f\n\t0x0010:  0a37 c81f 0cea fddb 5f8d 5d8b 97df aafe\n\t0x0020:  8018 ffff 34c1 0000 0101 080a 4133 5db0\n\t0x0030:  1de9 6b04 4000 0000 0a34 2e31 2e32 342d\n\t0x0040:  7072 6f2d 6770 6c2d 6c6f 6700 325e 4c02\n\t0x0050:  3f71 3c75 5b45 2837 002c a208 0200 0000\n\t0x0060:  0000 0000 0000 0000 0000 007c 2e6c 5955\n\t0x0070:  2140 6041 665b 7700 da7d d3aa\n```\n\n----------------------------------------\n\nTITLE: Listing Percona Server for MySQL Specific Resources Collected\nDESCRIPTION: This snippet enumerates the custom resource definitions (CRDs) specific to Percona Server for MySQL that `pt-k8s-debug-collector` gathers when targeting MySQL using the `--resource ps` flag. It includes resources related to backups, restores, and the server instances themselves.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"perconaservermysqlbackups\",\n\"perconaservermysqlrestores\",\n\"perconaservermysqls\"\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL TCP Connection Status\nDESCRIPTION: This snippet shows the output of a command (likely netstat or ss) that displays active TCP connections to MySQL servers. It includes information such as local and remote IP addresses, ports, connection state, and the process ID of mysqld for established connections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp        0      0 10.17.85.70:3306            10.17.85.90:55363           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35725           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35724           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34956           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34700           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46729           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36181          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35470           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35412          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45191           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46983           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35931          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36187          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46214           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35456           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46725           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36441          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45444           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46468           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35202           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35928          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36440          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35423          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35205           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46210           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45698           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45442           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34948           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:57421           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45441           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45953           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41806           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36231           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36189          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34951           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45952           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36444          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34950           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35769           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34489           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45247           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35768           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34488           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35515           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35771           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36449          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41842           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45245           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47037           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35514           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35424          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:42099           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45244           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36285           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36199          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35687          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34493           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34237           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34236           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:44986           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:42101           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46010           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36197          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35775           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47289           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46265           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46009           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36286           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45240           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34481           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34993           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36459          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36017           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45239           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36016           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35946          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34995           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45749           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36274           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41851           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46771           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47027           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35764           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35694          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:44978           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46258           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34743           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:42110           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45233           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36204          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35766           TIME_WAIT   -                   \n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate row_id Index\nDESCRIPTION: SQL command to remove a redundant UNIQUE KEY constraint that duplicates the PRIMARY KEY on the row_id column. The uniqueness constraint is unnecessary since the PRIMARY KEY already ensures uniqueness.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/bug-894140.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `test`.`bug_894140` DROP INDEX `row_id`;\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Protocol Communication in Network Packets\nDESCRIPTION: This packet capture shows the complete connection sequence between MySQL client (mysqlslap) and server, including the TCP handshake, server greeting (version 5.6.28-76.1), authentication using mysql_native_password, and the client sending a DROP SCHEMA command. The trace reveals details about the client environment (Debian Linux) and MySQL client library version (5.7.14-8).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump-1402776.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2016-12-15 17:07:52.040695 IP 127.0.0.1.38784 > 127.0.0.1.3307: tcp 0\n\t0x0000:  4500 003c 4dfe 4000 4006 eebb 7f00 0001  E..<M.@.@.......\n\t0x0010:  7f00 0001 9780 0ceb ddee a941 0000 0000  ...........A....\n\t0x0020:  a002 aaaa fe30 0000 0204 ffd7 0402 080a  .....0..........\n\t0x0030:  0007 e4bf 0000 0000 0103 0307            ............\n2016-12-15 17:07:52.040707 IP 127.0.0.1.3307 > 127.0.0.1.38784: tcp 0\n\t0x0000:  4500 003c 0000 4000 4006 3cba 7f00 0001  E..<..@.@.<.....\n\t0x0010:  7f00 0001 0ceb 9780 2396 e82d ddee a942  ........#..-...B\n\t0x0020:  a012 aaaa fe30 0000 0204 ffd7 0402 080a  .....0..........\n\t0x0030:  0007 e4bf 0007 e4bf 0103 0307            ............\n2016-12-15 17:07:52.040716 IP 127.0.0.1.38784 > 127.0.0.1.3307: tcp 0\n\t0x0000:  4500 0034 4dff 4000 4006 eec2 7f00 0001  E..4M.@.@.......\n\t0x0010:  7f00 0001 9780 0ceb ddee a942 2396 e82e  ...........B#...\n\t0x0020:  8010 0156 fe28 0000 0101 080a 0007 e4bf  ...V.(..........\n\t0x0030:  0007 e4bf                                ....\n2016-12-15 17:07:52.041135 IP 127.0.0.1.3307 > 127.0.0.1.38784: tcp 83\n\t0x0000:  4500 0087 0c91 4000 4006 2fde 7f00 0001  E.....@.@./.....\n\t0x0010:  7f00 0001 0ceb 9780 2396 e82e ddee a942  ........#......B\n\t0x0020:  8018 0156 fe7b 0000 0101 080a 0007 e4bf  ...V.{..........\n\t0x0030:  0007 e4bf 4f00 0000 0a35 2e36 2e32 382d  ....O....5.6.28-\n\t0x0040:  3736 2e31 00f2 0e00 002c 215c 3077 2a66  76.1.....,!\\0w*f\n\t0x0050:  4800 fff7 0802 007f 8015 0000 0000 0000  H...............\n\t0x0060:  0000 0000 7124 5c24 3c43 7a5e 482d 475e  ....q$\\$<Cz^H-G^\n\t0x0070:  006d 7973 716c 5f6e 6174 6976 655f 7061  .mysql_native_pa\n\t0x0080:  7373 776f 7264 00                        ssword.\n2016-12-15 17:07:52.041173 IP 127.0.0.1.38784 > 127.0.0.1.3307: tcp 0\n\t0x0000:  4500 0034 4e00 4000 4006 eec1 7f00 0001  E..4N.@.@.......\n\t0x0010:  7f00 0001 9780 0ceb ddee a942 2396 e881  ...........B#...\n\t0x0020:  8010 0156 fe28 0000 0101 080a 0007 e4bf  ...V.(..........\n\t0x0030:  0007 e4bf                                ....\n2016-12-15 17:07:52.041815 IP 127.0.0.1.38784 > 127.0.0.1.3307: tcp 204\n\t0x0000:  4500 0100 4e01 4000 4006 edf4 7f00 0001  E...N.@.@.......\n\t0x0010:  7f00 0001 9780 0ceb ddee a942 2396 e881  ...........B#...\n\t0x0020:  8018 0156 fef4 0000 0101 080a 0007 e4bf  ...V............\n\t0x0030:  0007 e4bf c800 0001 85a2 bf81 0000 0040  ...............@\n\t0x0040:  0800 0000 0000 0000 0000 0000 0000 0000  ................\n\t0x0050:  0000 0000 0000 0000 726f 6f74 0014 21e9  ........root..!.\n\t0x0060:  e204 ad30 445e a329 dcec 336a 309d c995  ...0D^.)..3j0...\n\t0x0070:  8bfa 6d79 7371 6c5f 6e61 7469 7665 5f70  ..mysql_native_p\n\t0x0080:  6173 7377 6f72 6400 7703 5f6f 7310 6465  assword.w._os.de\n\t0x0090:  6269 616e 2d6c 696e 7578 2d67 6e75 0c5f  bian-linux-gnu._\n\t0x00a0:  636c 6965 6e74 5f6e 616d 6508 6c69 626d  client_name.libm\n\t0x00b0:  7973 716c 045f 7069 6405 3135 3937 320f  ysql._pid.15972.\n\t0x00c0:  5f63 6c69 656e 745f 7665 7273 696f 6e08  _client_version.\n\t0x00d0:  352e 372e 3134 2d38 095f 706c 6174 666f  5.7.14-8._platfo\n\t0x00e0:  726d 0678 3836 5f36 340c 7072 6f67 7261  rm.x86_64.progra\n\t0x00f0:  6d5f 6e61 6d65 096d 7973 716c 736c 6170  m_name.mysqlslap\n2016-12-15 17:07:52.041818 IP 127.0.0.1.3307 > 127.0.0.1.38784: tcp 0\n\t0x0000:  4500 0034 0c92 4000 4006 3030 7f00 0001  E..4..@.@.00....\n\t0x0010:  7f00 0001 0ceb 9780 2396 e881 ddee aa0e  ........#.......\n\t0x0020:  8010 015e fe28 0000 0101 080a 0007 e4bf  ...^.(..........\n\t0x0030:  0007 e4bf                                ....\n2016-12-15 17:07:52.041966 IP 127.0.0.1.3307 > 127.0.0.1.38784: tcp 11\n\t0x0000:  4500 003f 0c93 4000 4006 3024 7f00 0001  E..?..@.@.0$....\n\t0x0010:  7f00 0001 0ceb 9780 2396 e881 ddee aa0e  ........#.......\n\t0x0020:  8018 015e fe33 0000 0101 080a 0007 e4bf  ...^.3..........\n\t0x0030:  0007 e4bf 0700 0002 0000 0002 0000 00    ...............\n2016-12-15 17:07:52.042001 IP 127.0.0.1.38784 > 127.0.0.1.3307: tcp 38\n\t0x0000:  4500 005a 4e02 4000 4006 ee99 7f00 0001  E..ZN.@.@.......\n\t0x0010:  7f00 0001 9780 0ceb ddee aa0e 2396 e88c  ............#...\n\t0x0020:  8018 0156 fe4e 0000 0101 080a 0007 e4bf  ...V.N..........\n\t0x0030:  0007 e4bf 2200 0000 0344 524f 5020 5343  ....\"....DROP.SC\n\t0x0040:  4845 4d41 2049 4620 4558 4953 5453 2060  HEMA.IF.EXISTS.`\n\t0x0050:  6d79 7371 6c73 6c61 7060                 mysqlslap`\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Session Settings in SQL\nDESCRIPTION: This snippet sets various MySQL session parameters including max_insert_delayed_threads, completion_type, and other session-specific settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog004.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\nSET TIMESTAMP=1256194800/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=1, @@session.unique_checks=1/*!*/;\nSET @@session.sql_mode=0/*!*/;\n/*!\\C latin1 *//*!*/;\nSET @@session.character_set_client=8,@@session.collation_connection=8,@@session.collation_server=8/*!*/;\nBEGIN\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Creating help_topic Table in MySQL\nDESCRIPTION: SQL statement for creating the help_topic table which stores the actual help content. It includes columns for topic ID, name, category, description, examples, and URL with appropriate indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics';\n```\n\n----------------------------------------\n\nTITLE: Describing io_global_by_file_by_bytes Table Structure in MySQL\nDESCRIPTION: These SQL queries describe the structure of the io_global_by_file_by_bytes and x$io_global_by_file_by_bytes tables. These tables show I/O statistics grouped by file, including read and write counts, total bytes, and averages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\ndesc io_global_by_file_by_bytes;\n```\n\nLANGUAGE: SQL\nCODE:\n```\ndesc x$io_global_by_file_by_bytes;\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Command Packet\nDESCRIPTION: Client command packet following session setup. Shows TCP/IP frame with MySQL protocol command data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump030.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n4508 0042 2efb 4000 4006 a6fd 0a38 a818\n0a38 a82d ed18 0cea 84f4 1ec7 af5e 90ec\n8018 002e 90ed 0000 0101 080a 0844 30a6\nee9b 5945 0a00 0000 1701 0000 0000 0100\n0000\n```\n\n----------------------------------------\n\nTITLE: Using user_chos Schema in MySQL\nDESCRIPTION: SQL command to switch to the user_chos database. This snippet shows two equivalent ways to select a database schema - with and without backticks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow016.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse user_chos;\nUSE `user_chos`;\n```\n\n----------------------------------------\n\nTITLE: MySQL sleep() Query in Test Database\nDESCRIPTION: A SQL query that calls the sleep() function for 2 seconds on table 'n' in the test database. This query has 2s execution time and appears to be used for testing or demonstration purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow001_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect sleep(2) from n\n```\n\n----------------------------------------\n\nTITLE: Database Monitoring Time Series Data\nDESCRIPTION: Raw performance monitoring data rows containing server IDs, timestamps, metric IDs, measurement values, intervals and record metadata. Data appears to track system metrics like CPU, memory and other resource utilization over time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n(8432,1236699917),(8432,1236699000,2,202.661,300,298,7256314,1236699917),(8432,1236699000,3,59.994,300,298,7256314,1236699917)...\n```\n\n----------------------------------------\n\nTITLE: SQL Update Query with Join\nDESCRIPTION: Update query that modifies column1 and word3 fields in tuningdetail table by joining with gonzo table. The query examines 62,951 rows and takes approximately 0.73 seconds to execute.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\n```\n\n----------------------------------------\n\nTITLE: Inserting Fixed Values into a Table - SQL\nDESCRIPTION: This SQL snippet inserts a new row into the 't' table, specifying values 'foo' and 'bar' for columns 'a' and 'b' respectively. No additional database extensions are required, but the table 't' and columns 'a', 'b' must exist. This pattern adds a single data row with explicit field values; errors will occur if field types mismatch or constraints are violated.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/rawlogs/rawlog002.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO t (a, b) VALUES ('foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into 'tbl' Table in MySQL\nDESCRIPTION: These queries insert values into the 'tbl' table. Each INSERT statement adds a pair of values, likely into two columns. The queries have very short execution times and don't examine any rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow034.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO tbl VALUES ('a', 'b');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO tbl VALUES ('c', 'd');\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Command Response\nDESCRIPTION: Server response packet to client command. Contains TCP/IP header and MySQL protocol response data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump030.txt#2025-04-22_snippet_3\n\nLANGUAGE: hex\nCODE:\n```\n4508 003f c9cb 4000 4006 0c30 0a38 a82d\n0a38 a818 0cea ed18 af5e 90ec 84f4 1ed5\n8018 002e 64e7 0000 0101 080a ee9b 5945\n0844 30a6 0700 0001 0000 0002 0000 00\n```\n\n----------------------------------------\n\nTITLE: Selecting Column from bar_tbl in bar Database\nDESCRIPTION: A simple SELECT query retrieving the 'col' column from the 'bar_tbl' table in the 'bar' database. This query was executed by the SQL_SLAVE user with an average execution time of 12μs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_5.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: Modifying SQL Mode with list_drop Function in MySQL\nDESCRIPTION: Shows how to remove a value from the SQL mode using the sys.list_drop function. This example removes the 'ONLY_FULL_GROUP_BY' mode from the current SQL mode setting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_113\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select @@sql_mode;\n+-----------------------------------------------------------------------------------------------+\n| @@sql_mode                                                                                    |\n+-----------------------------------------------------------------------------------------------+\n| ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> set sql_mode = sys.list_drop(@@sql_mode, 'ONLY_FULL_GROUP_BY');\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> select @@sql_mode;\n+----------------------------------------------------------------------------+\n| @@sql_mode                                                                 |\n+----------------------------------------------------------------------------+\n| ANSI_QUOTES,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+----------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Inspecting MySQL Table Status and Structure\nDESCRIPTION: These commands are used to retrieve the status and structure of the 'foo' table in the 'db1' database. They provide detailed information about the table's properties and definition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-yyyy-mm-dd.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `db1` LIKE 'foo'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `db1`.`foo`\n```\n\n----------------------------------------\n\nTITLE: Terminating Query Process 4 using SQL KILL\nDESCRIPTION: This SQL command uses `KILL` to terminate the database query associated with process ID 4. The comment indicates the query has been running for 6 seconds and might be related to 'fruit=orange' and selecting from a 'fuits' table. This is typically used to stop long-running or problematic queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-kill/samples/kill-recset011-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nKILL 4 (Query 6 sec) /* fruit=orange */ select 1 from fuits;\n```\n\n----------------------------------------\n\nTITLE: Summarizing Index Analysis Results in SQL\nDESCRIPTION: This snippet provides a summary of the index analysis results. It shows the count of duplicate indexes, total duplicate indexes, and total indexes in the schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/nosql_output.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n# Size Duplicate Indexes   0\n# Total Duplicate Indexes  1\n# Total Indexes            2\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in SQL\nDESCRIPTION: Defines the rental table schema tracking film rentals by customers. Contains foreign keys to inventory, customer and staff tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int(11) NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint(8) unsigned NOT NULL,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Table in MySQL Database\nDESCRIPTION: SQL definition for the inventory table in the Sakila database. Tracks physical copies of films available at each store location. Contains foreign key constraints to the film and store tables, with a composite index for efficient store-specific inventory queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Configuring PCI Bridges and Windows\nDESCRIPTION: This snippet shows the configuration of PCI bridges, including their secondary bus numbers and memory windows. It details the I/O, memory, and prefetch window settings for various PCI bridges in the system.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npci 0000:05:00.0: PCI bridge, secondary bus 0000:06\npci 0000:05:00.0:   IO window: disabled\npci 0000:05:00.0:   MEM window: 0xf4000000-0xf7ffffff\npci 0000:05:00.0:   PREFETCH window: disabled\npci 0000:05:01.0: PCI bridge, secondary bus 0000:08\npci 0000:05:01.0:   IO window: disabled\npci 0000:05:01.0:   MEM window: disabled\npci 0000:05:01.0:   PREFETCH window: disabled\n```\n\n----------------------------------------\n\nTITLE: Modifying SQL Mode with list_add Function in MySQL\nDESCRIPTION: Demonstrates how to add a value to the SQL mode using the sys.list_add function. This example adds the 'ANSI_QUOTES' mode to the current SQL mode setting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_112\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select @@sql_mode;\n+-----------------------------------------------------------------------------------+\n| @@sql_mode                                                                        |\n+-----------------------------------------------------------------------------------+\n| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> set sql_mode = sys.list_add(@@sql_mode, 'ANSI_QUOTES');\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> select @@sql_mode;\n+-----------------------------------------------------------------------------------------------+\n| @@sql_mode                                                                                    |\n+-----------------------------------------------------------------------------------------------+\n| ANSI_QUOTES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+-----------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Disk I/O Statistics with Timestamps in Plaintext Format\nDESCRIPTION: A series of disk I/O statistics collected at regular intervals with Unix timestamps. Each entry includes read/write operations counts, sectors read/written, and timing information for disk partitions sda3 and sda4. The data appears to be collected approximately every second between timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-005.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1298130003.073935000\n   8    3 sda3 4257315954 34043324 136169413346 1922644483 492348396 547079617 32764474048 248191881 0 1348454960 2169768832\n   8    3 sda4 4257315954 34043324 136169413346 1922644483 492348396 547079617 32764474048 248191881 0 1348454960 2169768832\nTS 1298130004.088149000\n   8    3 sda3 4257317380 34043342 136169458914 1922645044 492348443 547079711 32764476920 248191896 0 1348455373 2169769408\n   8    3 sda4 4257317380 34043342 136169458914 1922645044 492348443 547079711 32764476920 248191896 0 1348455373 2169769408\nTS 1298130005.102035000\n   8    3 sda3 4257318982 34043364 136169510082 1922645662 492348609 547079803 32764487248 248191947 1 1348455841 2169770075\n   8    3 sda4 4257318982 34043364 136169510082 1922645662 492348609 547079803 32764487248 248191947 1 1348455841 2169770075\nTS 1298130006.116158000\n   8    3 sda3 4257320297 34043384 136169552098 1922646173 492348661 547079889 32764489872 248191964 1 1348456262 2169770603\n   8    3 sda4 4257320297 34043384 136169552098 1922646173 492348661 547079889 32764489872 248191964 1 1348456262 2169770603\nTS 1298130007.131062000\n   8    3 sda3 4257321748 34043394 136169598530 1922646672 492348736 547079990 32764494448 248191983 0 1348456671 2169771121\n   8    3 sda4 4257321748 34043394 136169598530 1922646672 492348736 547079990 32764494448 248191983 0 1348456671 2169771121\nTS 1298130008.145277000\n   8    3 sda3 4257323024 34043406 136169639330 1922647105 492348897 547080080 32764505520 248192043 0 1348457045 2169771613\n   8    3 sda4 4257323024 34043406 136169639330 1922647105 492348897 547080080 32764505520 248192043 0 1348457045 2169771613\n```\n\n----------------------------------------\n\nTITLE: Example SQL Update Query in Transaction\nDESCRIPTION: An SQL update query modifying player_buildings data within transaction 7C6E3AC6. This query updates building properties including setting building_id to 121, resetting leisure_start to null, changing state to 'clean', and updating state_date and growth_start values for a specific player_id and corner.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate player_buildings set building_id=121, leisure_start=null, state='clean', state_date='2010-03-20 15:46:20.0', growth_start=null where player_id=100000180864920 and corner=32382\n```\n\n----------------------------------------\n\nTITLE: Creating Time Zone Table in MySQL\nDESCRIPTION: Creates the time_zone table that stores basic time zone information including a unique ID and whether leap seconds are used. Uses MyISAM engine with UTF-8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL auto_increment,\n  `Use_leap_seconds` enum('Y','N') NOT NULL default 'N',\n  PRIMARY KEY  (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_file_io_type Tables in MySQL\nDESCRIPTION: These DESCRIBE commands illustrate the schema of the host_summary_by_file_io_type and x$host_summary_by_file_io_type tables. They summarize file I/O operations by event type for each host. Required dependencies: none, beyond a MySQL instance containing these tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_file_io_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.70 sec)\n\nmysql> desc x$host_summary_by_file_io_type;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event_name    | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Case for Duplicate Keys in SQL\nDESCRIPTION: This snippet defines a test case for duplicate keys in a database table. It specifies two keys: 'a' and 'a_2', where 'a' is a left-prefix of 'a_2'. The column types for 'a' and 'b' are also defined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/nosql_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# Key definitions:\n#   KEY `a` (`a`),\n#   KEY `a_2` (`a`,`b`)\n# Column types:\n#\t  `a` int(11) default null\n#\t  `b` int(11) default null\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Creation Statement for 'foo' in SQL\nDESCRIPTION: This SQL command is used to obtain the `CREATE TABLE` definition for the `foo` table located in the `maindb` database. The `\\G` modifier requests vertically formatted output. It's executed as part of the analysis process for queries interacting with the 'foo' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report02.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `maindb`.`foo`\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with Mixed ASC Syntax 1\nDESCRIPTION: Retrieves all products ordered by name (explicit ASC) and shape (implicit ASC) in ascending order.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow048.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `products` ORDER BY name asc, shape;\n```\n\n----------------------------------------\n\nTITLE: Creating Checksums Table in MySQL\nDESCRIPTION: Defines a simple table for storing checksums with a varchar field for database/table name and an unsigned int for the checksum value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration File Paths\nDESCRIPTION: Default configuration file paths that MySQL server reads in sequential order for loading settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/etc/my.cnf ~/.my.cnf /etc/my.cnf\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Sandbox Environment\nDESCRIPTION: This INI file configures a MySQL sandbox environment using Percona Server 5.1. It sets up parameters such as user credentials, network settings, file paths, and memory allocation. Essential sections are [client] for connection details and [mysqld] for server settings, both critical for initializing and maintaining the MySQL instance. Dependencies include having MySQL installed and access to the specified directories.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp003.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux System Messages with Less Command\nDESCRIPTION: A bash command being executed to view system messages using the 'dmesg' command piped to 'less' for pagination. This shows the user is examining kernel logs on a Percona database server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npercona@db2:/var/lib/mysql$ dmesg | less\n```\n\n----------------------------------------\n\nTITLE: Defining the 'proc' Table for Stored Procedures and Functions - MySQL - SQL\nDESCRIPTION: Establishes the 'proc' table to securely track stored procedures and functions, including type, specific name, language, body, parameter list, definer, timestamps, and SQL mode. Used internally by MySQL for procedure discovery and execution. Inputs include names, code blobs, and privilege information; output is internal reference for execution and management.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) character set utf8 collate utf8_bin NOT NULL default '',\n  `name` char(64) NOT NULL default '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL default '',\n  `language` enum('SQL') NOT NULL default 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL default 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL default 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL default 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` char(64) NOT NULL default '',\n  `body` longblob NOT NULL,\n  `definer` char(77) character set utf8 collate utf8_bin NOT NULL default '',\n  `created` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL default '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE') NOT NULL default '',\n  `comment` char(64) character set utf8 collate utf8_bin NOT NULL default '',\n  PRIMARY KEY  (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'\n```\n\n----------------------------------------\n\nTITLE: Issuing an Administrator Quit Command - MySQL - SQL\nDESCRIPTION: This snippet issues the MySQL administrator command 'Quit', signaling the end of the session or connection. This command requires administrative privileges and does not produce a query result but closes the current MySQL session cleanly. There are no parameters or outputs; used as a session terminator.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump021.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nadministrator command: Quit\\G\n```\n\n----------------------------------------\n\nTITLE: Select All Records Query\nDESCRIPTION: Simple SELECT query retrieving all records from foo table. Query time: 0.018799s, Lock time: 0.009453s, Rows sent: 9, Rows examined: 2.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow020.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Checksum Results in Tabular Format\nDESCRIPTION: This snippet shows the output of a database checksum operation in a tabular format. It lists various tables from different schemas (percona_test, sakila, sys) along with their checksum statistics including errors, differences, row counts, chunk counts, and skipped rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/static-chunk-size-results-5.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERRORS DIFFS ROWS CHUNKS SKIPPED TABLE\n0 0 23 1 0 percona_test.checksums\n0 0 1 1 0 percona_test.sentinel\n0 0 200 1 0 sakila.actor\n0 0 603 1 0 sakila.address\n0 0 16 1 0 sakila.category\n0 0 600 1 0 sakila.city\n0 0 109 1 0 sakila.country\n0 0 599 1 0 sakila.customer\n0 0 1000 1 0 sakila.film\n0 0 5462 8 0 sakila.film_actor\n0 0 1000 1 0 sakila.film_category\n0 0 1000 1 0 sakila.film_text\n0 0 4581 7 0 sakila.inventory\n0 0 6 1 0 sakila.language\n0 0 16049 19 0 sakila.payment\n0 0 16044 19 0 sakila.rental\n0 0 2 1 0 sakila.staff\n0 0 2 1 0 sakila.store\n0 0 6 1 0 sys.sys_config\n```\n\n----------------------------------------\n\nTITLE: Select Query on bar_tbl\nDESCRIPTION: Simple SELECT query on bar_tbl with performance metrics showing 0.30 QPS and 12us execution time. Query executed by SQL_SLAVE user accessing the bar database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_2.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: Database Use and Insert Multiple Values\nDESCRIPTION: Query switching to specified database and inserting multiple values into a table. Query time: 0.000899s, Lock time: 0s, Rows sent: 0, Rows examined: 3.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow020.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse db;\nINSERT INTO tbl\nVALUES\n               (1), (2),\n      (3);\n```\n\n----------------------------------------\n\nTITLE: Sleep Query on Test Database\nDESCRIPTION: SQL query executing a 2-second sleep operation on table 'n' in the test database. Query took 2 seconds with no lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse test;\nselect sleep(2) from n;\n```\n\n----------------------------------------\n\nTITLE: Querying schema_tables_with_full_table_scans in MySQL\nDESCRIPTION: Demonstrates a sample query on the schema_tables_with_full_table_scans view, showing the top 5 tables with full table scans, ordered by the number of rows scanned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_73\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_tables_with_full_table_scans limit 5;\n+--------------------+--------------------------------+-------------------+-----------+\n| object_schema      | object_name                    | rows_full_scanned | latency   |\n+--------------------+--------------------------------+-------------------+-----------+\n| mem30__instruments | fsstatistics                   |          10207042 | 13.10 s   |\n| mem30__instruments | preparedstatementapidata       |            436428 | 973.27 ms |\n| mem30__instruments | mysqlprocessactivity           |            411702 | 282.07 ms |\n| mem30__instruments | querycachequeriesincachedata   |            374011 | 767.15 ms |\n| mem30__instruments | rowaccessesdata                |            322321 | 1.55 s    |\n+--------------------+--------------------------------+-------------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Creating Table 'a' in 'test' Database\nDESCRIPTION: This SQL snippet creates a table named 'a' in the 'test' database with two columns: an auto-incrementing smallint 'c1' and a varchar 'c2'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `a` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: MySQL Network Packet Capture - Client UPDATE Query\nDESCRIPTION: TCP packet showing MySQL UPDATE query from client. Contains timestamp, IP details, and hex dump of packet content.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump031.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-12-07 20:54:54.794787 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 11\n   0x0000:  4508 003f 853b 4000 3f06 447d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2d f9d9 232a 5e2b\n   0x0020:  8010 09e4 f28b 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 0f00 0000 0355 5044 4154 45\n```\n\n----------------------------------------\n\nTITLE: MySQL Binary Log Event with Delete Operation\nDESCRIPTION: A MySQL binary log event showing a delete operation from test2.t table. The event includes server ID (21), position information (498008762), timestamp (071208 12:12:12), and thread details. The log is wrapped with MySQL session variable settings and a rollback statement added by the mysqlbinlog utility.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog007.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 498008762\n#071208 12:12:12 server id 21  end_log_pos 28  Query\tthread_id=103374\texec_time=20661\terror_code=0\ndelete from test2.t where a=1/*!*/;\n# End of log file\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n```\n\n----------------------------------------\n\nTITLE: Determining Next Chunk Boundary in MySQL\nDESCRIPTION: This query determines the next chunk boundary by selecting values from the 'y' column that are greater than or equal to a specified value. It uses the SQL_NO_CACHE directive to ensure fresh data and LIMIT to retrieve only the required rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx003.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `y` FROM `issue_519`.`t` FORCE INDEX(`y`) WHERE ((`y` >= ?)) ORDER BY `y` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: Creates the staff table to store employee information including personal details, authentication credentials, and store assignment. Links to address and store tables with foreign key constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-sakila-payment.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL General Query Log Entries\nDESCRIPTION: Sample MySQL general query log showing connection activities and SQL queries. The log entries include timestamps, connection IDs, user information, database selection, and actual SQL queries executed against the database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog003.txt#2025-04-22_snippet_0\n\nLANGUAGE: mysql\nCODE:\n```\n051007   21:55:24\t     42 Connect     root@localhost on db1\n\t\t                 42 Query       SELECT foo \n                         FROM tbl\n                         WHERE col=12345\n                         ORDER BY col\n\t\t                 42 Quit\n               \t     11 Connect     root@localhost on  \n\t\t                 11 Init DB     my_webstats\n\t\t                 11 Query       SELECT DISTINCT col FROM tbl WHERE foo=20061219\n               \t     11 Quit       \n```\n\n----------------------------------------\n\nTITLE: Parsing Disk I/O Statistics in Linux\nDESCRIPTION: This snippet shows the format of disk I/O statistics as typically found in /proc/diskstats on Linux systems. It includes device numbers, device names, and various I/O metrics such as reads, writes, and I/O times.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489578 163771322 245685 758231064 452645854 198296093 66 218109270 0 621587876 976428779\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n 253    0 dm-0 1418194 0 27251106 5776302 27005257 0 216042056 57460474 0 5590540 63255191\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998424 6091475969 49403814720 2173805892 0 919421325 3016071595\n```\n\n----------------------------------------\n\nTITLE: Creating Latin1 Table in MySQL\nDESCRIPTION: Creates a table named 'test2' with the same structure as test1 but using Latin1 character set. This shows different character encoding options available in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `test2` (\n  `kwid` int(10) unsigned NOT NULL default '0',\n  `keyword` varchar(80) NOT NULL default ''\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: SQL Query Selecting Records for 'bob'\nDESCRIPTION: SQL query to select all columns from table d.t where name equals 'bob'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump033.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from d.t where name=\"bob\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Row into Table Using MySQL SQL\nDESCRIPTION: This snippet inserts the values ('a', 'b') into the 'tbl' table of 'db2'. The surrounding Percona-style comments capture timing and diagnostic data. Necessary prerequisites include a MySQL environment and an 'tbl' table in 'db2' compatible with these column values. No output is produced unless there is an error; permissions and schema compatibility are required.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 0.000052  Lock_time: 0.010091  Rows_sent: 0  Rows_examined: 0\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db2;\\nINSERT INTO tbl VALUES ('c', 'd');\n```\n\n----------------------------------------\n\nTITLE: Listing Network Interface Details and Statistics (Text Output)\nDESCRIPTION: This text output displays the configuration and statistics for multiple network interfaces (loopback, ethernet, wireless, virtualbox) on a system. It includes details like interface flags (UP, BROADCAST), MTU, MAC address (link/ether), operational state, queueing discipline (qdisc), and counters for received (RX) and transmitted (TX) bytes, packets, errors, and dropped packets. This type of output is typically generated by commands like `ip addr` or `ifconfig` on Linux/Unix-like systems for network diagnostics and monitoring.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/ip-s-link-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    RX: bytes  packets  errors  dropped overrun mcast   \n    3246978    26907    0       0       0       0      \n    TX: bytes  packets  errors  dropped carrier collsns \n    3246978    26907    0       0       0       0      \n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 90:e6:ba:f3:9c:70 brd ff:ff:ff:ff:ff:ff\n    RX: bytes  packets  errors  dropped overrun mcast   \n    176275034  28646545 0       0       0       3012   \n    TX: bytes  packets  errors  dropped carrier collsns \n    117557001  880398   0       0       3       0      \n3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP qlen 1000\n    link/ether 00:25:d3:e4:dc:62 brd ff:ff:ff:ff:ff:ff\n    RX: bytes  packets  errors  dropped overrun mcast   \n    49106414   81338    0       0       0       0      \n    TX: bytes  packets  errors  dropped carrier collsns \n    19024970   94127    0       0       0       0      \n4: vboxnet0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN qlen 1000\n    link/ether 0a:00:27:00:00:00 brd ff:ff:ff:ff:ff:ff\n    RX: bytes  packets  errors  dropped overrun mcast   \n    0          0        0       0       0       0      \n    TX: bytes  packets  errors  dropped carrier collsns \n    0          0        0       0       0       0      \n```\n\n----------------------------------------\n\nTITLE: Explain Query Format\nDESCRIPTION: The equivalent SELECT query format used for EXPLAIN analysis of the update operation. Shows the columns and join conditions being evaluated.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_top_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect  n.column1 = a.column1, n.word3 = a.word3 from db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \\G\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Administrative Quit Command - Shell\nDESCRIPTION: Issues an administrator-level Quit command to end the current MySQL client session. Requires an active terminal session connected to MySQL. No parameters are needed. Successfully executes without further output, apart from terminating the session or process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump002_report.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nadministrator command: Quit\\G\n```\n\n----------------------------------------\n\nTITLE: Querying 'foo' Table in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'foo' table. It is executed multiple times with consistent query time and no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow033.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Large Insert TCP Packet\nDESCRIPTION: TCP packet capture showing a large SQL insert query containing a news article about Federal Reserve policy between localhost ports 36777 and 12345\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump038.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 4034 f13e 4000 4006 0b7b 7f00 0001\n7f00 0001 8fa9 3039 5665 689f 562a d060\n8018 0101 3e29 0000 0101 080a 0081 bc77\n0081 9a1f 5e48 0000 0369 6e73 6572 7420...\n```\n\n----------------------------------------\n\nTITLE: Select Query with Spaced Comment\nDESCRIPTION: SQL select statement with a differently formatted inline comment /* def */ retrieving column c from table t\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset010.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect c/* def */ from t where id='foo';\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with IGNORE in MySQL\nDESCRIPTION: This snippet demonstrates an INSERT IGNORE operation on the 'user' table, inserting a new record with id, f_id, and the current timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog004.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSET TIMESTAMP=1256194803/*!*/;\nSET @@session.time_zone='SYSTEM'/*!*/;\ninsert ignore into user (id,f_id,c_date) values (17, 18, now())\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Querying host_summary_by_statement_type in MySQL\nDESCRIPTION: Example query showing how to retrieve performance data from the host_summary_by_statement_type table. The result shows metrics like total count, latency statistics, and row operations for different statement types (create_view, select, stmt, etc.) executed by a specific host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from host_summary_by_statement_type;\n+------+----------------------+--------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| host | statement            | total  | total_latency | max_latency | lock_latency | rows_sent | rows_examined | rows_affected | full_scans |\n+------+----------------------+--------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| hal  | create_view          |   2063 | 00:05:04.20   | 463.58 ms   | 1.42 s       |         0 |             0 |             0 |          0 |\n| hal  | select               |    174 | 40.87 s       | 28.83 s     | 858.13 ms    |      5212 |        157022 |             0 |         82 |\n| hal  | stmt                 |   6645 | 15.31 s       | 491.78 ms   | 0 ps         |         0 |             0 |          7951 |          0 |\n| hal  | call_procedure       |     17 | 4.78 s        | 1.02 s      | 37.94 ms     |         0 |             0 |            19 |          0 |\n| hal  | create_table         |     19 | 3.04 s        | 431.71 ms   | 0 ps         |         0 |             0 |             0 |          0 |\n...                         \n+------+----------------------+--------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Character Set\nDESCRIPTION: SQL command to set the character set to UTF-8 for the current connection. This ensures proper encoding for multi-byte Unicode characters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET CHARACTER SET 'utf8mb4'\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Capture\nDESCRIPTION: A captured MySQL protocol packet containing a SELECT query retrieving the color3 field from fb_settings table with a user_id filter condition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump011.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSELECT color3 FROM fb_settings WHERE user_id='112311420'\n```\n\n----------------------------------------\n\nTITLE: MySQL Transaction BEGIN Statement in Slow Query Log\nDESCRIPTION: A simple BEGIN transaction statement captured in a MySQL slow query log. The log entry includes execution time, lock time, rows statistics, and query optimization details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n```\n\n----------------------------------------\n\nTITLE: Describing x$schema_table_statistics_with_buffer View in MySQL\nDESCRIPTION: Shows the structure of the x$schema_table_statistics_with_buffer view, which is similar to schema_table_statistics_with_buffer but provides raw data without formatting.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_62\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_table_statistics_with_buffer;\n+----------------------------+---------------------+------+-----+---------+-------+\n| Field                      | Type                | Null | Key | Default | Extra |\n+----------------------------+---------------------+------+-----+---------+-------+\n| table_schema               | varchar(64)         | YES  |     | NULL    |       |\n| table_name                 | varchar(64)         | YES  |     | NULL    |       |\n| rows_fetched               | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency              | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_inserted              | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency             | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_updated               | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency             | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_deleted               | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency             | bigint(20) unsigned | NO   |     | NULL    |       |\n| io_read_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read                    | decimal(41,0)       | YES  |     | NULL    |       |\n| io_read_latency            | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write_requests          | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write                   | decimal(41,0)       | YES  |     | NULL    |       |\n| io_write_latency           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency            | decimal(42,0)       | YES  |     | NULL    |       |\n| innodb_buffer_allocated    | decimal(43,0)       | YES  |     | NULL    |       |\n| innodb_buffer_data         | decimal(43,0)       | YES  |     | NULL    |       |\n| innodb_buffer_free         | decimal(44,0)       | YES  |     | NULL    |       |\n| innodb_buffer_pages        | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_hashed | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_old    | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_rows_cached  | decimal(44,0)       | YES  |     | 0       |       |\n+----------------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Setup for Staff Table with Address Relation in SQL\nDESCRIPTION: The `staff` table is designed to store staff details, utilizing foreign keys to connect with the `address` and `store` tables, supporting binary data for pictures and secure password storage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Go Tools Testing and Sandbox Lifecycle Management\nDESCRIPTION: Shell commands for managing Go tools in Percona Toolkit, including building, testing, and managing a MongoDB sandbox environment. Requires a Go development environment and make.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nmake env-up\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake linux-amd64\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake env-down\n```\n\n----------------------------------------\n\nTITLE: Identifying MySQL Summary Tool Used\nDESCRIPTION: This snippet indicates that the `pt-mysql-summary` tool is used to generate a summary report for Percona Server for MySQL, which is then included in the collected data (specifically in `summary.txt`). Requires `pt-mysql-summary` and `mysql` client to be installed and in PATH.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"pt-mysql-summary\"\n```\n\n----------------------------------------\n\nTITLE: Querying Tree Data with Country Code Filter in SQL\nDESCRIPTION: SQL query that retrieves tree information by joining multiple tables including tree, RESACHAIN, treeCODE, and POOLINSTANCE. The query filters by specific country code (e.g., 'AT130780') and various status conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nselect tree0_.treeid as col_0_0_, treecode1_.partnercode as col_1_0_, tree0_.partnerid as col_2_0_, tree0_.qcnscrsid as col_3_0_, tree0_.qcnscountryid as col_4_0_, tree0_.qcnscityid as col_5_0_, treecode1_.isactive as col_6_0_, resachain2_.isactive as col_7_0_, tree0_.name as col_8_0_ from tree tree0_, RESACHAIN resachain2_, treeCODE treecode1_, POOLINSTANCE poolinstan3_ where tree0_.poolinstanceid=poolinstan3_.poolinstanceid and tree0_.qcnscrsid=resachain2_.qcnscrsid and tree0_.isactive=1 and tree0_.qcnstreecode='AT130780' and poolinstan3_.pooltemplateid=17 and tree0_.treestatustypeid=1 and (tree0_.qcnsstatusid in (1671 , 1673)) and (tree0_.partnerid in (1 , 2 , 3 , 4)) and tree0_.treeid=treecode1_.treeid\n```\n\n----------------------------------------\n\nTITLE: Selecting Category ID from Auction Category Map\nDESCRIPTION: Query to retrieve category_id from auction_category_map table for a specific auction_id. Simple single-table SELECT query with equality condition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category_id\n                FROM auction_category_map \n                WHERE auction_id = '3015563'\n```\n\n----------------------------------------\n\nTITLE: Querying 'col' from 'bar_tbl' in MySQL\nDESCRIPTION: This SQL query selects the 'col' column from the 'bar_tbl' table in the 'bar' database. It's executed by the SQL_SLAVE user with a frequency of 0.30 QPS and an average execution time of 12us.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_1.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: Profiled MySQL JOIN Query with GROUP BY and ORDER BY\nDESCRIPTION: A SQL query that joins table 't' with itself, groups by column 'a', counts occurrences, and orders results by count in descending order with a limit of 10 rows. This query is being profiled for performance analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect t.a, count(*) from t join t t2 using(a) group by 1 order by 2 desc limit 10\n```\n\n----------------------------------------\n\nTITLE: Querying Variable Column from Unsteady Table - SQL\nDESCRIPTION: SELECT query retrieving very_variable_column from unsteady_table. Shows inconsistent query times ranging from ~1.2 to 4.8 seconds, with no lock time and examining 0 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect very_variable_column from unsteady_table;\n```\n\n----------------------------------------\n\nTITLE: Counting Hidden Navigation Items\nDESCRIPTION: EXPLAIN query that counts hidden navigation items per database for the 'root' user in phpMyAdmin. Results are grouped by database name to show counts for each database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT `db_name`, COUNT(*) AS `count` FROM `phpmyadmin`.`pma__navigationhiding` WHERE `username`='root' GROUP BY `db_name`\n```\n\n----------------------------------------\n\nTITLE: Query Next Chunk Boundary\nDESCRIPTION: Retrieves the next chunk boundary using SQL_NO_CACHE to ensure fresh results. Selects column 'i' with specific boundary conditions and limit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx001.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `i` FROM `issue_519`.`t` FORCE INDEX(`PRIMARY`) WHERE ((`i` >= ?)) ORDER BY `i` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Committing Transaction in MySQL\nDESCRIPTION: This snippet shows the COMMIT statement used to finalize a transaction in the MySQL binary log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog004.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCOMMIT/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Listing PXC Summary Data Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet shows the summary data collected for PXC, which is stored in the summary.txt file. It uses the pt-mysql-summary tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pt-mysql-summary\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry - Database Switch\nDESCRIPTION: Log entry showing database context switch and character set configuration, followed by query execution metrics for schema 'db2'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow019.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 6  Schema: db2\n# Query_time: 0.000899  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 3\n# No InnoDB statistics available for this query\nuse db;\nSET NAMES utf8;\n```\n\n----------------------------------------\n\nTITLE: Capturing MySQL SELECT Query Network Packet in Hexdump Format\nDESCRIPTION: This hexdump shows a TCP packet containing a MySQL SELECT query from client 192.168.28.223 to server 192.168.28.213. The query retrieves product information including IDs, images, titles, and prices from a table named 'tproducts' with specific filtering conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump000.txt#2025-04-22_snippet_0\n\nLANGUAGE: hexdump\nCODE:\n```\n0x0000:  4508 0161 7dc5 4000 4006 00c5 c0a8 1cdf\n0x0010:  c0a8 1cd5 dc8e 0cea adc4 5111 ad6f 995e\n0x0020:  8018 005b 0987 0000 0101 080a 62e6 32e7\n0x0030:  62e4 a103 2901 0000 0353 454c 4543 5420\n0x0040:  6469 7374 696e 6374 2074 702e 6964 2c20\n0x0050:  7470 2e70 726f 6475 6374 5f69 6d61 6765\n0x0060:  5f6c 696e 6b20 6173 2069 6d67 2c20 7470\n0x0070:  2e69 6e6e 6572 5f76 6572 7365 3220 6173\n0x0080:  2074 6974 6c65 2c20 7470 2e70 7269 6365\n0x0090:  2046 524f 4d20 7470 726f 6475 6374 7320\n0x00a0:  7470 2c20 6667 6966 745f 6c69 6e6b 2065\n0x00b0:  2057 4845 5245 2074 702e 7072 6f64 7563\n0x00c0:  745f 6465 7363 203d 2027 6667 6966 7427\n0x00d0:  2041 4e44 2074 702e 6964 3d65 2e70 726f\n0x00e0:  6475 6374 5f69 6420 2061 6e64 2074 702e\n0x00f0:  7072 6f64 7563 745f 7374 6174 7573 3d35\n0x0100:  2041 4e44 2065 2e63 6174 5f69 6420 696e\n0x0110:  2028 322c 3131 2c2d 3129 2041 4e44 2074\n0x0120:  702e 696e 7369 6465 5f69 6d61 6765 203d\n0x0130:  2027 456e 676c 6973 6827 2020 4f52 4445\n0x0140:  5220 4259 2074 702e 7072 696e 7461 626c\n0x0150:  6520 6465 7363 204c 494d 4954 2030 2c20\n0x0160:  38\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from 'forest' Table with Condition in MySQL\nDESCRIPTION: This query deletes rows from the 'forest' table where the 'animal' column equals 'dead'. It performs a full scan, examines 1928472 rows, and uses temporary tables and filesort on disk. The query time is 1349.000052 seconds with an equally long lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow034.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM forest WHERE animal = 'dead';\n```\n\n----------------------------------------\n\nTITLE: MySQL Replication Pattern Example\nDESCRIPTION: Example pattern for restricting replication to tables matching specific wildcards using replicate-wild-do-table\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_2\n\nLANGUAGE: mysql\nCODE:\n```\nreplicate-wild-do-table=foo%.bar%\n```\n\n----------------------------------------\n\nTITLE: Administrator Command Execution - MySQL - SQL\nDESCRIPTION: This snippet records the administrator command 'Connect' executed in the MySQL server, referenced within a performance profiling document. It is intended to log administrative operations, such as connections, as part of query analysis. The context indicates monitoring of connection attempts along with associated errors (e.g., packets out of order), with dependencies on a running MySQL server instance and administrator privileges. The primary input is the 'Connect' command executed by the admin; outputs are internal state changes and associated event logs, not query result sets.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump043_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nadministrator command: Connect\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Sleep Query Execution\nDESCRIPTION: A MySQL query execution log showing a 10-second sleep command with detailed performance metrics including query time, lock time, and row statistics. The query was executed by root user from localhost.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow060.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET timestamp=1405358212;\nselect sleep(10);\n```\n\n----------------------------------------\n\nTITLE: Executing Sleep Function in MySQL\nDESCRIPTION: SQL queries that select the sleep(2) function from table 'n', causing a 2-second delay. These queries appear in MySQL slow query logs with a query time of 2 seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow014.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse test;\nselect sleep(2) from n;\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Status for Trees Table in MySQL\nDESCRIPTION: This SQL command shows the table status for the 'trees' table in the 'food' database. It provides metadata about the table, such as row count, data length, and update time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-57.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\\G\n```\n\n----------------------------------------\n\nTITLE: Executing SQL INSERT Statement\nDESCRIPTION: This snippet shows an SQL INSERT statement being executed with a specific timestamp. It inserts data into the 'vendor11gonzo' table in the 'db3' database, with values for 'makef' and 'bizzle' columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow032.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET timestamp=1197996507;\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact');\n```\n\n----------------------------------------\n\nTITLE: Executing Cross-Database Sleep Query\nDESCRIPTION: This SQL query selects the result of the sleep() function from a table 'n' in the 'test' database while being executed in the context of the 'sakila' database. The sleep duration is set to 2 seconds, demonstrating cross-database querying.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow021.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nuse sakila;\nselect sleep(2) from test.n;\n```\n\n----------------------------------------\n\nTITLE: Querying Stable Column from Steady Table - SQL\nDESCRIPTION: SELECT query retrieving less_variable_column from steady_table. Shows consistent query times around ~1 second, with no lock time and examining 0 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect less_variable_column from steady_table;\n```\n\n----------------------------------------\n\nTITLE: Keyring Plugin Status in MySQL\nDESCRIPTION: SQL query result showing the active keyring plugins in the MySQL server. This indicates that keyring_file plugin is currently active, which is used for storing encryption keys.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n+--------------+---------------+\n| PLUGIN_NAME  | PLUGIN_STATUS |\n+--------------+---------------+\n| keyring_file | ACTIVE        |\n+--------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Event Table Structure\nDESCRIPTION: This table structure declaration outlines the storage format for MySQL events. It includes important metadata such as the scheduling of event execution and status.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Capture - MySQL Server Error Response\nDESCRIPTION: Network packet showing MySQL server responding with a syntax error message\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump040.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2009-11-01 14:54:44.293453 IP 127.0.0.1.3306 > 127.0.0.1.39640: tcp 159\n\t0x0000:  4508 00d3 3c33 4000 4006 ffe7 7f00 0001\n\t0x0010:  7f00 0001 0cea 9ad8 554a e601 5554 0a26\n\t0x0020:  8018 0200 fec7 0000 0101 080a 0020 147c\n\t0x0030:  0020 147c 9b00 0001 ff28 0423 3432 3030\n\t0x0040:  3059 6f75 2068 6176 6520 616e 2065 7272\n\t0x0050:  6f72 2069 6e20 796f 7572 2053 514c 2073\n\t0x0060:  796e 7461 783b 2063 6865 636b 2074 6865\n\t0x0070:  206d 616e 7561 6c20 7468 6174 2063 6f72\n\t0x0080:  7265 7370 6f6e 6473 2074 6f20 796f 7572\n\t0x0090:  204d 7953 514c 2073 6572 7665 7220 7665\n\t0x00a0:  7273 696f 6e20 666f 7220 7468 6520 7269\n\t0x00b0:  6768 7420 7379 6e74 6178 2074 6f20 7573\n\t0x00c0:  6520 6e65 6172 2027 2720 6174 206c 696e\n\t0x00d0:  6520 31\n```\n\n----------------------------------------\n\nTITLE: Failed DELETE Query on Corrupted Table in MySQL Slave\nDESCRIPTION: A DELETE SQL query that failed on a MySQL slave server due to table corruption in bugs_eventum.eventum_note. The error indicates a problem with the key file that requires repair. The query attempted to delete multiple records based on not_iss_id values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM\n                    bugs_eventum.eventum_note\n                 WHERE\n                    not_iss_id IN (384, 385, 101056, 101057, 101058, 101067, 101070, 101156, 101163, 101164, 101175, 101232, 101309, 101433, 101434, 101435, 101436, 101437, 101454, 101476, 101488, 101490, 101506, 101507, 101530, 101531, 101573, 101574, 101575, 101583, 101586, 101587, 101588, 101589, 101590, 101729, 101730, 101791, 101865, 102382)\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamp Data in MySQL Database\nDESCRIPTION: A segment of SQL INSERT statement containing user IDs, item IDs, and timestamps. Each row has the format (user_id, item_id, timestamp) where the timestamp is fixed at '2006-02-15 10:05:03' for all entries. This appears to be part of a bulk data insertion operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n0:05:03'),(14,255,'2006-02-15 10:05:03'),(14,258,'2006-02-15 10:05:03'),(14,284,'2006-02-15 10:05:03'),(14,292,'2006-02-15 10:05:03'),(14,370,'2006-02-15 10:05:03'),(14,415,'2006-02-15 10:05:03'),(14,417,'2006-02-15 10:05:03'),(14,418,'2006-02-15 10:05:03'),(14,454,'2006-02-15 10:05:03'),(14,472,'2006-02-15 10:05:03'),(14,475,'2006-02-15 10:05:03'),(14,495,'2006-02-15 10:05:03'),(14,536,'2006-02-15 10:05:03'),(14,537,'2006-02-15 10:05:03'),(14,612,'2006-02-15 10:05:03'),(14,688,'2006-02-15 10:05:03'),(14,759,'2006-02-15 10:05:03'),(14,764,'2006-02-15 10:05:03'),(14,847,'2006-02-15 10:05:03'),(14,856,'2006-02-15 10:05:03'),(14,890,'2006-02-15 10:05:03'),(14,908,'2006-02-15 10:05:03'),(14,919,'2006-02-15 10:05:03'),(14,948,'2006-02-15 10:05:03'),(14,970,'2006-02-15 10:05:03'),(15,31,'2006-02-15 10:05:03'),(15,89,'2006-02-15 10:05:03'),(15,91,'2006-02-15 10:05:03'),(15,108,'2006-02-15 10:05:03'),(15,125,'2006-02-15 10:05:03'),(15,236,'2006-02-15 10:05:03'),(15,275,'2006-02-15 10:05:03'),(15,280,'2006-02-15 10:05:03'),(15,326,'2006-02-15 10:05:03'),(15,342,'2006-02-15 10:05:03'),(15,414,'2006-02-15 10:05:03'),(15,445,'2006-02-15 10:05:03'),(15,500,'2006-02-15 10:05:03'),(15,502,'2006-02-15 10:05:03'),(15,541,'2006-02-15 10:05:03'),(15,553,'2006-02-15 10:05:03'),(15,594,'2006-02-15 10:05:03'),(15,626,'2006-02-15 10:05:03'),(15,635,'2006-02-15 10:05:03'),(15,745,'2006-02-15 10:05:03'),(15,783,'2006-02-15 10:05:03'),(15,795,'2006-02-15 10:05:03'),(15,817,'2006-02-15 10:05:03'),(15,886,'2006-02-15 10:05:03'),(15,924,'2006-02-15 10:05:03'),(15,949,'2006-02-15 10:05:03'),(15,968,'2006-02-15 10:05:03'),(15,985,'2006-02-15 10:05:03'),(16,80,'2006-02-15 10:05:03'),(16,87,'2006-02-15 10:05:03'),(16,101,'2006-02-15 10:05:03'),(16,121,'2006-02-15 10:05:03'),(16,155,'2006-02-15 10:05:03'),(16,177,'2006-02-15 10:05:03'),(16,218,'2006-02-15 10:05:03'),(16,221,'2006-02-15 10:05:03'),(16,267,'2006-02-15 10:05:03'),(16,269,'2006-02-15 10:05:03'),(16,271,'2006-02-15 10:05:03'),(16,280,'2006-02-15 10:05:03'),(16,287,'2006-02-15 10:05:03'),(16,345,'2006-02-15 10:05:03'),(16,438,'2006-02-15 10:05:03'),(16,453,'2006-02-15 10:05:03'),(16,455,'2006-02-15 10:05:03'),(16,456,'2006-02-15 10:05:03'),(16,503,'2006-02-15 10:05:03'),(16,548,'2006-02-15 10:05:03'),(16,582,'2006-02-15 10:05:03'),(16,583,'2006-02-15 10:05:03'),(16,717,'2006-02-15 10:05:03'),(16,758,'2006-02-15 10:05:03'),(16,779,'2006-02-15 10:05:03'),(16,886,'2006-02-15 10:05:03'),(16,967,'2006-02-15 10:05:03'),(17,96,'2006-02-15 10:05:03'),(17,119,'2006-02-15 10:05:03'),(17,124,'2006-02-15 10:05:03'),(17,127,'2006-02-15 10:05:03'),(17,154,'2006-02-15 10:05:03'),(17,199,'2006-02-15 10:05:03'),(17,201,'2006-02-15 10:05:03'),(17,236,'2006-02-15 10:05:03'),(17,280,'2006-02-15 10:05:03'),(17,310,'2006-02-15 10:05:03'),(17,313,'2006-02-15 10:05:03'),(17,378,'2006-02-15 10:05:03'),(17,457,'2006-02-15 10:05:03'),(17,469,'2006-02-15 10:05:03'),(17,478,'2006-02-15 10:05:03'),(17,500,'2006-02-15 10:05:03'),(17,515,'2006-02-15 10:05:03'),(17,521,'2006-02-15 10:05:03'),(17,573,'2006-02-15 10:05:03'),(17,603,'2006-02-15 10:05:03'),(17,606,'2006-02-15 10:05:03'),(17,734,'2006-02-15 10:05:03'),(17,770,'2006-02-15 10:05:03'),(17,794,'2006-02-15 10:05:03'),(17,800,'2006-02-15 10:05:03'),(17,853,'2006-02-15 10:05:03'),(17,873,'2006-02-15 10:05:03'),(17,874,'2006-02-15 10:05:03'),(17,880,'2006-02-15 10:05:03'),(17,948,'2006-02-15 10:05:03'),(17,957,'2006-02-15 10:05:03'),(17,959,'2006-02-15 10:05:03'),(18,44,'2006-02-15 10:05:03'),(18,84,'2006-02-15 10:05:03'),(18,144,'2006-02-15 10:05:03'),(18,172,'2006-02-15 10:05:03'),(18,268,'2006-02-15 10:05:03'),(18,279,'2006-02-15 10:05:03'),(18,280,'2006-02-15 10:05:03'),(18,321,'2006-02-15 10:05:03'),(18,386,'2006-02-15 10:05:03'),(18,460,'2006-02-15 10:05:03'),(18,462,'2006-02-15 10:05:03'),(18,484,'2006-02-15 10:05:03'),(18,536,'2006-02-15 10:05:03'),(18,561,'2006-02-15 10:05:03'),(18,612,'2006-02-15 10:05:03'),(18,717,'2006-02-15 10:05:03'),(18,808,'2006-02-15 10:05:03'),(18,842,'2006-02-15 10:05:03'),(18,863,'2006-02-15 10:05:03'),(18,883,'2006-02-15 10:05:03'),(18,917,'2006-02-15 10:05:03'),(18,944,'2006-02-15 10:05:03'),(19,2,'2006-02-15 10:05:03'),(19,3,'2006-02-15 10:05:03'),(19,144,'2006-02-15 10:05:03'),(19,152,'2006-02-15 10:05:03'),(19,182,'2006-02-15 10:05:03'),(19,208,'2006-02-15 10:05:03'),(19,212,'2006-02-15 10:05:03'),(19,217,'2006-02-15 10:05:03'),(19,266,'2006-02-15 10:05:03'),(19,404,'2006-02-15 10:05:03'),(19,428,'2006-02-15 10:05:03'),(19,473,'2006-02-15 10:05:03'),(19,490,'2006-02-15 10:05:03'),(19,510,'2006-02-15 10:05:03'),(19,513,'2006-02-15 10:05:03'),(19,644,'2006-02-15 10:05:03'),(19,670,'2006-02-15 10:05:03'),(19,673,'2006-02-15 10:05:03'),(19,711,'2006-02-15 10:05:03'),(19,750,'2006-02-15 10:05:03'),(19,752,'2006-02-15 10:05:03'),(19,756,'2006-02-15 10:05:03'),(19,771,'2006-02-15 10:05:03'),(19,785,'2006-02-15 10:05:03'),(19,877,'2006-02-15 10:05:03'),(20,1,'2006-02-15 10:05:03'),(20,54,'2006-02-15 10:05:03'),(20,63,'2006-02-15 10:05:03'),(20,140,'2006-02-15 10:05:03'),(20,146,'2006-02-15 10:05:03'),(20,165,'2006-02-15 10:05:03'),(20,231,'2006-02-15 10:05:03'),(20,243,'2006-02-15 10:05:03'),(20,269,'2006-02-15 10:05:03'),(20,274,'2006-02-15 10:05:03'),(20,348,'2006-02-15 10:05:03'),(20,366,'2006-02-15 10:05:03'),(20,445,'2006-02-15 10:05:03'),(20,478,'2006-02-15 10:05:03'),(20,492,'2006-02-15 10:05:03'),(20,499,'2006-02-15 10:05:03'),(20,527,'2006-02-15 10:05:03'),(20,531,'2006-02-15 10:05:03'),(20,538,'2006-02-15 10:05:03'),(20,589,'2006-02-15 10:05:03'),(20,643,'2006-02-15 10:05:03'),(20,652,'2006-02-15 10:05:03'),(20,663,'2006-02-15 10:05:03'),(20,714,'2006-02-15 10:05:03'),(20,717,'2006-02-15 10:05:03'),(20,757,'2006-02-15 10:05:03'),(20,784,'2006-02-15 10:05:03'),(20,863,'2006-02-15 10:05:03'),(20,962,'2006-02-15 10:05:03'),(20,977,'2006-02-15 10:05:03'),(21,6,'2006-02-15 10:05:03'),(21,87,'2006-02-15 10:05:03'),(21,88,'2006-02-15 10:05:03'),(21,142,'2006-02-15 10:05:03'),(21,159,'2006-02-15 10:05:03'),(21,179,'2006-02-15 10:05:03'),(21,253,'2006-02-15 10:05:03'),(21,281,'2006-02-15 10:05:03'),(21,321,'2006-02-15 10:05:03'),(21,398,'2006-02-15 10:05:03'),(21,426,'2006-02-15 10:05:03'),(21,429,'2006-02-15 10:05:03'),(21,497,'2006-02-15 10:05:03'),(21,507,'2006-02-15 10:05:03'),(21,530,'2006-02-15 10:05:03'),(21,680,'2006-02-15 10:05:03'),(21,686,'2006-02-15 10:05:03'),(21,700,'2006-02-15 10:05:03'),(21,702,'2006-02-15 10:05:03'),(21,733,'2006-02-15 10:05:03'),(21,734,'2006-02-15 10:05:03'),(21,798,'2006-02-15 10:05:03'),(21,804,'2006-02-15 10:05:03'),(21,887,'2006-02-15 10:05:03'),(21,893,'2006-02-15 10:05:03'),(21,920,'2006-02-15 10:05:03'),(21,983,'2006-02-15 10:05:03'),(22,9,'2006-02-15 10:05:03'),(22,23,'2006-02-15 10:05:03'),(22,56,'2006-02-15 10:05:03'),(22,89,'2006-02-15 10:05:03'),(22,111,'2006-02-15 10:05:03'),(22,146,'2006-02-15 10:05:03'),(22,291,'2006-02-15 10:05:03'),(22,294,'2006-02-15 10:05:03'),(22,349,'2006-02-15 10:05:03'),(22,369,'2006-02-15 10:05:03'),(22,418,'2006-02-15 10:05:03'),(22,430,'2006-02-15 10:05:03'),(22,483,'2006-02-15 10:05:03'),(22,491,'2006-02-15 10:05:03'),(22,495,'2006-02-15 10:05:03'),(22,536,'2006-02-15 10:05:03'),(22,600,'2006-02-15 10:05:03'),(22,634,'2006-02-15 10:05:03'),(22,648,'2006-02-15 10:05:03'),(22,688,'2006-02-15 10:05:03'),(22,731,'2006-02-15 10:05:03'),(22,742,'2006-02-15 10:05:03'),(22,775,'2006-02-15 10:05:03'),(22,802,'2006-02-15 10:05:03'),(22,912,'2006-02-15 10:05:03'),(22,964,'2006-02-15 10:05:03'),(23,6,'2006-02-15 10:05:03'),(23,42,'2006-02-15 10:05:03'),(23,78,'2006-02-15 10:05:03'),(23,105,'2006-02-15 10:05:03'),(23,116,'2006-02-15 10:05:03'),(23,117,'2006-02-15 10:05:03'),(23,125,'2006-02-15 10:05:03'),(23,212,'2006-02-15 10:05:03'),(23,226,'2006-02-15 10:05:03'),(23,235,'2006-02-15 10:05:03'),(23,254,'2006-02-15 10:05:03'),(23,367,'2006-02-15 10:05:03'),(23,370,'2006-02-15 10:05:03'),(23,414,'2006-02-15 10:05:03'),(23,419,'2006-02-15 10:05:03'),(23,435,'2006-02-15 10:05:03'),(23,449,'2006-02-15 10:05:03'),(23,491,'2006-02-15 10:05:03'),(23,536,'2006-02-15 10:05:03'),(23,549,'2006-02-15 10:05:03'),(23,636,'2006-02-15 10:05:03'),(23,649,'2006-02-15 10:05:03'),(23,673,'2006-02-15 10:05:03'),(23,691,'2006-02-15 10:05:03'),(23,766,'2006-02-15 10:05:03'),(23,782,'2006-02-15 10:05:03'),(23,804,'2006-02-15 10:05:03'),(23,820,'2006-02-15 10:05:03'),(23,826,'2006-02-15 10:05:03'),(23,833,'2006-02-15 10:05:03'),(23,842,'2006-02-15 10:05:03'),(23,853,'2006-02-15 10:05:03'),(23,855,'2006-02-15 10:05:03'),(23,856,'2006-02-15 10:05:03'),(23,935,'2006-02-15 10:05:03'),(23,981,'2006-02-15 10:05:03'),(23,997,'2006-02-15 10:05:03'),(24,3,'2006-02-15 10:05:03'),(24,83,'2006-02-15 10:05:03'),(24,112,'2006-02-15 10:05:03'),(24,126,'2006-02-15 10:05:03'),(24,148,'2006-02-15 10:05:03'),(24,164,'2006-02-15 10:05:03'),(24,178,'2006-02-15 10:05:03'),(24,194,'2006-02-15 10:05:03'),(24,199,'2006-02-15 10:05:03'),(24,242,'2006-02-15 10:05:03'),(24,256,'2006-02-15 10:05:03'),(24,277,'2006-02-15 10:05:03'),(24,335,'2006-02-15 10:05:03'),(24,405,'2006-02-15 10:05:03'),(24,463,'2006-02-15 10:05:03'),(24,515,'2006-02-15 10:05:03'),(24,585,'2006-02-15 10:05:03'),(24,603,'2006-02-15 10:05:03'),(24,653,'2006-02-15 10:05:03'),(24,704,'2006-02-15 10:05:03'),(24,781,'2006-02-15 10:05:03'),(24,829,'2006-02-15 10:05:03'),(24,832,'2006-02-15 10:05:03'),(24,969,'2006-02-15 10:05:03'),(25,21,'2006-02-15 10:05:03'),(25,86,'2006-02-15 10:05:03'),(25,153,'2006-02-15 10:05:03'),(25,179,'2006-02-15 10:05:03'),(25,204,'2006-02-15 10:05:03'),(25,213,'2006-02-15 10:05:03'),(25,226,'2006-02-15 10:05:03'),(25,245,'2006-02-15 10:05:03'),(25,311,'2006-02-15 10:05:03'),(25,404,'2006-02-15 10:05:03'),(25,411,'2006-02-15 10:05:03'),(25,420,'2006-02-15 10:05:03'),(25,538,'2006-02-15 10:05:03'),(25,564,'2006-02-15 10:05:03'),(25,583,'2006-02-15 10:05:03'),(25,606,'2006-02-15 10:05:03'),(25,688,'2006-02-15 10:05:03'),(25,697,'2006-02-15 10:05:03'),(25,755,'2006-02-15 10:05:03'),(25,871,'2006-02-15 10:05:03'),(25,914,'20\n```\n\n----------------------------------------\n\nTITLE: Logging Disk I/O Statistics in Linux\nDESCRIPTION: This snippet shows the format of disk I/O statistics logged periodically on a Linux system. It includes metrics for various devices such as RAM disks, loop devices, and physical disks (sda, sdb) with their partitions. Each line represents a device or partition with 11 space-separated values indicating different I/O metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/switch_to_sample.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1326806192.762187000 2012-01-17T10:16:32\n   1       0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1       1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   ...\n   8       0 sda 50032 15372 1551175 589373 631146 1755536 19096496 4151503 0 678570 4751870\n   8       1 sda1 39 560 1285 1156 0 0 0 0 0 1020 1156\n   8       2 sda2 132 7184 7890 2523 0 0 0 0 0 2140 2523\n   8       3 sda3 48600 567 1477874 562406 629583 1715578 18764328 4137760 0 657920 4711820\n   8       4 sda4 1242 7042 63822 22896 1563 39958 332168 13743 0 27116 36736\n   8      16 sdb 57 633 1719 473 0 0 0 0 0 356 473\n   8      17 sdb1 40 605 1359 236 0 0 0 0 0 153 236\n```\n\n----------------------------------------\n\nTITLE: Example Filesystem Usage Output (Plaintext)\nDESCRIPTION: This snippet displays example output lines from a filesystem usage command (like `df`). Each line details a mounted filesystem, including its device path (e.g., /dev/mapper/VolGroup00-LogVol00), total size, used space, available space, usage percentage, mount point, and filesystem type (e.g., ext3, tmpfs).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/df-mount-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/dev/mapper/VolGroup00-LogVol00 62G 33G 26G 56% / on / type ext3 (rw)\n/dev/mapper/VolGroup01-MySQLData00 67G 13G 52G 20% /var/lib/mysql on /var/lib/mysql type ext3 (rw)\n/dev/sda3 190M 20M 161M 11% /boot on /boot type ext3 (rw)\ntmpfs 7.9G 0 7.9G 0% /dev/shm on /dev/shm type tmpfs (rw)\n```\n\n----------------------------------------\n\nTITLE: Granting Global USAGE Privilege\nDESCRIPTION: This SQL statement grants the basic 'USAGE' privilege to the user 'sally'@'%' on all databases and tables (*.*). The USAGE privilege allows a user to connect to the MySQL server but grants no specific permissions on database objects by itself.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-84.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT USAGE ON *.* TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: MySQL Foreign Key Constraint Error\nDESCRIPTION: Error message showing a failed foreign key constraint where column 'a' attempts to reference table t4 but the reference cannot be resolved. This typically occurs during table creation or modification when the referenced table doesn't exist or isn't accessible.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-fk-error-logger/samples/is003-fke.txt#2025-04-22_snippet_0\n\nLANGUAGE: mysql\nCODE:\n```\nError in foreign key constraint of table test/#sql-1452_9:\\nforeign key (a) references t4(a):\\nCannot resolve table name close to:\\n(a)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointment Information with Patient Details in MySQL\nDESCRIPTION: SQL query that selects appointment information joined with visitor (patient) details. The query formats dates and times for display and includes office information. It uses LEFT JOIN to include appointments even when visitor information might be missing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT\nappointment.patient_id AS PId,\nvisitor.first_name AS FName,\nvisitor.last_name AS LName,\nDATE(appointment.datetime) AS Date,\nappointment.office_id AS OfficeId,\n0 AS ProcId,\nappointment.state AS Status,\nappointment.state_modified AS StatusChanged,\ntime(appointment.datetime) AS RawTime,\nTIME_FORMAT(TIME(appointment.datetime), '%l:%i %p') AS Time,\nDATE_FORMAT(DATE(appointment.datetime), '%W, %M %e') AS DateFormated,\noffice.name AS office_name\nFROM\nappointment\nLEFT JOIN visitor ON visitor.id = appointment.patient_id\nAND visitor.client_id = appointment\n```\n\n----------------------------------------\n\nTITLE: Selecting ID from 'tbl' Table with Condition in MySQL\nDESCRIPTION: This query selects the 'id' column from the 'tbl' table where the id equals 1. It doesn't perform a full scan and examines only 1 row. The query time is 1.726052 seconds with a lock time of 0.010093 seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow034.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT id FROM tbl WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet\nDESCRIPTION: Server acknowledgment packet in response to SET SESSION command. Contains TCP/IP header and MySQL protocol response data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump030.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 0044 c9ca 4000 4006 0c2c 0a38 a82d\n0a38 a818 0cea ed18 af5e 90dc 84f4 1ec7\n8018 002e 64ec 0000 0101 080a ee9b 5945\n0844 30a6 0c00 0001 0001 0000 0000 0000\n0000 0000\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.help_relation` Table in SQL\nDESCRIPTION: Defines the `help_relation` table in the `mysql` database. This table acts as a mapping between help topics and help keywords within the server's help system, linking `help_topic_id` to `help_keyword_id`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int unsigned NOT NULL,\n  `help_keyword_id` int unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Show Full Process List Query\nDESCRIPTION: Administrative SQL command to display complete MySQL process list\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset010.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nshow full processlist\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Startup Configuration\nDESCRIPTION: MySQL server version 5.1.30 startup configuration showing TCP port and named pipe settings\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow031.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nD:\\MySQL\\MySQL Server 5.1\\bin\\mysqld, Version: 5.1.30-community-log (MySQL Community Server (GPL)). started with:\\nTCP Port: 3306, Named Pipe: (null)\n```\n\n----------------------------------------\n\nTITLE: Representing TCP Packet Hexdump with Metadata - Plain Text\nDESCRIPTION: Each snippet records a single TCP network packet, showing the timestamp, directional flow, and both decimal and hexadecimal byte-array data. These logs do not require dependencies but are typically produced by packet sniffing tools like tcpdump. Inputs include timestamp, source/destination IPs and ports, and payload in hex format, while the output is the formatted log for review. Limitations include non-parsable values for automated analysis and absence of protocol decoding beyond raw byte display.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump013.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.544462 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 0\\n\\t0x0000:  4500 0040 f52e 4000 3e06 9661 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 372f 0000 0000\\n\\t0x0020:  b002 ffff 9edf 0000 0204 05b4 0103 0303\\n\\t0x0030:  0101 080a 22f5 83d2 0000 0000 0402 0000\\n\\t0x0040:  2a3f 2e1a\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.544585 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 0\\n\\t0x0000:  4500 0040 c249 4000 4006 c746 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f0ed 3a17 3730\\n\\t0x0020:  b012 ffff 36b7 0000 0204 05b4 0103 0303\\n\\t0x0030:  0101 080a 40e0 fd21 22f5 83d2 0402 0000\\n\\t0x0040:  51c3 c8b3\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.556080 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 0\\n\\t0x0000:  4500 0034 fb3a 4000 3e06 9061 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3730 3927 f0ee\\n\\t0x0020:  8010 ffff 7684 0000 0101 080a 22f5 83d2\\n\\t0x0030:  40e0 fd21 cf1d 1115\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.556328 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 0\\n\\t0x0000:  4500 0034 5d02 4000 4006 2c9a 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f0ee 3a17 3730\\n\\t0x0020:  8010 ffff 7684 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d2 b0e6 7e29\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.556580 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 68\\n\\t0x0000:  4508 0078 7f30 4000 4006 0a20 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f0ee 3a17 3730\\n\\t0x0020:  8018 ffff ec20 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d2 4000 0000 0a34 2e31 2e32 342d\\n\\t0x0040:  7072 6f2d 6770 6c2d 6c6f 6700 4cc4 3302\\n\\t0x0050:  3d30 7623 4927 247d 002c a208 0200 0000\\n\\t0x0060:  0000 0000 0000 0000 0000 006b 2261 4822\\n\\t0x0070:  6d25 6a69 5034 5100 8bf0 a668\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.566200 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 0\\n\\t0x0000:  4508 0034 5864 4000 3e06 3330 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3730 3927 f132\\n\\t0x0020:  8010 ffff 7640 0000 0101 080a 22f5 83d2\\n\\t0x0030:  40e0 fd21 c551 a064\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.566574 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 73\\n\\t0x0000:  4508 007d f03e 4000 3e06 9b0c 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3730 3927 f132\\n\\t0x0020:  8018 ffff 9001 0000 0101 080a 22f5 83d2\\n\\t0x0030:  40e0 fd21 4500 0001 ada6 0300 0000 0001\\n\\t0x0040:  0800 0000 0000 0000 0000 0000 0000 0000\\n\\t0x0050:  0000 0000 0000 0000 6c75 636b 0014 aead\\n\\t0x0060:  d3e8 e806 b176 64f1 b098 6cd7 bee9 ef76\\n\\t0x0070:  a95f 6e65 706f 6f6c 5f66 7472 000a e1b3\\n\\t0x0080:  7e\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.566824 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 0\\n\\t0x0000:  4508 0034 f237 4000 4006 975c 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f132 3a17 3779\\n\\t0x0020:  8010 ffff 75f7 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d2 a1e7 37ba\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.566947 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 5\\n\\t0x0000:  4508 0039 012d 4000 4006 8862 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f132 3a17 3779\\n\\t0x0020:  8018 ffff 76e7 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d2 0100 0002 fe95 56e9 67\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.577691 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 0\\n\\t0x0000:  4508 0034 9a20 4000 3e06 f173 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3779 3927 f137\\n\\t0x0020:  8010 ffff 75f1 0000 0101 080a 22f5 83d3\\n\\t0x0030:  40e0 fd21 54ba 2fdf\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.578566 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 13\\n\\t0x0000:  4508 0041 066d 4000 3e06 851a 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3779 3927 f137\\n\\t0x0020:  8018 ffff 20af 0000 0101 080a 22f5 83d3\\n\\t0x0030:  40e0 fd21 0900 0003 5543 5648 4b4e 5550\\n\\t0x0040:  005f 910e 88\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.578816 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 0\\n\\t0x0000:  4508 0034 8206 4000 4006 078e 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f137 3a17 3786\\n\\t0x0020:  8010 ffff 75e4 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d3 4e31 6791\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.578817 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 11\\n\\t0x0000:  4508 003f f708 4000 4006 9280 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f137 3a17 3786\\n\\t0x0020:  8018 ffff 6ecb 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d3 0700 0004 0000 0002 0000 0034\\n\\t0x0040:  4654 33\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.584813 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 0\\n\\t0x0000:  4508 0034 626d 4000 3e06 2927 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3786 3927 f142\\n\\t0x0020:  8010 ffff 75d9 0000 0101 080a 22f5 83d3\\n\\t0x0030:  40e0 fd21 96cf fa49\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.586310 IP 10.54.212.171.49663 > 10.55.200.15.3306: tcp 26\\n\\t0x0000:  4508 004e 266f 4000 3e06 650b 0a36 d4ab\\n\\t0x0010:  0a37 c80f c1ff 0cea 3a17 3786 3927 f142\\n\\t0x0020:  8018 ffff d5a3 0000 0101 080a 22f5 83d3\\n\\t0x0030:  40e0 fd21 1300 0000 0000 000f 0000 0003\\n\\t0x0040:  7368 6f77 2064 6174 6162 6173 6573 188d\\n\\t0x0050:  06f4\n```\n\nLANGUAGE: text\nCODE:\n```\n2009-06-03 10:52:24.586562 IP 10.55.200.15.3306 > 10.54.212.171.49663: tcp 0\\n\\t0x0000:  4508 0034 3675 4000 4006 531f 0a37 c80f\\n\\t0x0010:  0a36 d4ab 0cea c1ff 3927 f142 3a17 37a0\\n\\t0x0020:  8010 ffff 75bf 0000 0101 080a 40e0 fd21\\n\\t0x0030:  22f5 83d3 d578 0ed6\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Delete Query\nDESCRIPTION: This SQL snippet deletes entries from the 'forest' table where the 'animal' column is set to 'dead'. It's converted for use with EXPLAIN, highlighting full scan and filesort operations. Dependencies include a MySQL database with a \"forest\" table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum-with-Locktime-distro.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM forest WHERE animal = 'dead'\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /\\*!50100 PARTITIONS\\*/ select * from  forest WHERE animal = 'dead'\\G\n```\n\n----------------------------------------\n\nTITLE: Checking Upper Boundaries in MySQL Table Checksumming\nDESCRIPTION: SQL query that counts rows above the upper boundary of a chunk in the test.ascii table. This helps ensure all rows are accounted for during checksumming, storing the count in percona.checksums table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/char-chunk-ascii-explain.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `test`.`ascii` FORCE INDEX(`c`) WHERE ((`c` > ?)) ORDER BY `c` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Basic BEGIN Transaction Statement in MySQL\nDESCRIPTION: A simple BEGIN statement that starts a new transaction in MySQL. This appears to be used frequently in the analyzed queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamp Records in MySQL Database\nDESCRIPTION: This SQL code snippet contains a portion of an INSERT statement with multiple value tuples. Each tuple contains three values: what appears to be a user ID (ranging from 107-118), a record ID, and a timestamp ('2006-02-15 10:05:03').\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n107,454,'2006-02-15 10:05:03'),(107,458,'2006-02-15 10:05:03'),(107,467,'2006-02-15 10:05:03'),(107,520,'2006-02-15 10:05:03'),(107,534,'2006-02-15 10:05:03'),(107,548,'2006-02-15 10:05:03'),(107,571,'2006-02-15 10:05:03'),(107,574,'2006-02-15 10:05:03'),(107,603,'2006-02-15 10:05:03'),(107,606,'2006-02-15 10:05:03'),(107,637,'2006-02-15 10:05:03'),(107,774,'2006-02-15 10:05:03'),(107,781,'2006-02-15 10:05:03'),(107,796,'2006-02-15 10:05:03'),(107,831,'2006-02-15 10:05:03'),(107,849,'2006-02-15 10:05:03'),(107,859,'2006-02-15 10:05:03'),(107,879,'2006-02-15 10:05:03'),(107,905,'2006-02-15 10:05:03'),(107,973,'2006-02-15 10:05:03'),(107,977,'2006-02-15 10:05:03'),(108,1,'2006-02-15 10:05:03'),(108,6,'2006-02-15 10:05:03'),(108,9,'2006-02-15 10:05:03'),(108,137,'2006-02-15 10:05:03'),(108,208,'2006-02-15 10:05:03'),(108,219,'2006-02-15 10:05:03'),(108,242,'2006-02-15 10:05:03'),(108,278,'2006-02-15 10:05:03'),(108,302,'2006-02-15 10:05:03'),(108,350,'2006-02-15 10:05:03'),(108,378,'2006-02-15 10:05:03'),(108,379,'2006-02-15 10:05:03'),(108,495,'2006-02-15 10:05:03'),(108,507,'2006-02-15 10:05:03'),(108,517,'2006-02-15 10:05:03'),(108,561,'2006-02-15 10:05:03'),(108,567,'2006-02-15 10:05:03'),(108,648,'2006-02-15 10:05:03'),(108,652,'2006-02-15 10:05:03'),(108,655,'2006-02-15 10:05:03'),(108,673,'2006-02-15 10:05:03'),(108,693,'2006-02-15 10:05:03'),(108,696,'2006-02-15 10:05:03'),(108,702,'2006-02-15 10:05:03'),(108,721,'2006-02-15 10:05:03'),(108,733,'2006-02-15 10:05:03'),(108,741,'2006-02-15 10:05:03'),(108,744,'2006-02-15 10:05:03'),(108,887,'2006-02-15 10:05:03'),(108,892,'2006-02-15 10:05:03'),(108,894,'2006-02-15 10:05:03'),(108,920,'2006-02-15 10:05:03'),(108,958,'2006-02-15 10:05:03'),(108,966,'2006-02-15 10:05:03'),(109,12,'2006-02-15 10:05:03'),(109,48,'2006-02-15 10:05:03'),(109,77,'2006-02-15 10:05:03'),(109,157,'2006-02-15 10:05:03'),(109,174,'2006-02-15 10:05:03'),(109,190,'2006-02-15 10:05:03'),(109,243,'2006-02-15 10:05:03'),(109,281,'2006-02-15 10:05:03'),(109,393,'2006-02-15 10:05:03'),(109,463,'2006-02-15 10:05:03'),(109,622,'2006-02-15 10:05:03'),(109,657,'2006-02-15 10:05:03'),(109,694,'2006-02-15 10:05:03'),(109,700,'2006-02-15 10:05:03'),(109,732,'2006-02-15 10:05:03'),(109,753,'2006-02-15 10:05:03'),(109,785,'2006-02-15 10:05:03'),(109,786,'2006-02-15 10:05:03'),(109,863,'2006-02-15 10:05:03'),(109,885,'2006-02-15 10:05:03'),(109,955,'2006-02-15 10:05:03'),(109,967,'2006-02-15 10:05:03'),(110,8,'2006-02-15 10:05:03'),(110,27,'2006-02-15 10:05:03'),(110,62,'2006-02-15 10:05:03'),(110,120,'2006-02-15 10:05:03'),(110,126,'2006-02-15 10:05:03'),(110,156,'2006-02-15 10:05:03'),(110,292,'2006-02-15 10:05:03'),(110,343,'2006-02-15 10:05:03'),(110,360,'2006-02-15 10:05:03'),(110,369,'2006-02-15 10:05:03'),(110,435,'2006-02-15 10:05:03'),(110,513,'2006-02-15 10:05:03'),(110,525,'2006-02-15 10:05:03'),(110,539,'2006-02-15 10:05:03'),(110,545,'2006-02-15 10:05:03'),(110,625,'2006-02-15 10:05:03'),(110,650,'2006-02-15 10:05:03'),(110,801,'2006-02-15 10:05:03'),(110,912,'2006-02-15 10:05:03'),(110,961,'2006-02-15 10:05:03'),(110,987,'2006-02-15 10:05:03'),(111,61,'2006-02-15 10:05:03'),(111,78,'2006-02-15 10:05:03'),(111,98,'2006-02-15 10:05:03'),(111,162,'2006-02-15 10:05:03'),(111,179,'2006-02-15 10:05:03'),(111,194,'2006-02-15 10:05:03'),(111,325,'2006-02-15 10:05:03'),(111,359,'2006-02-15 10:05:03'),(111,382,'2006-02-15 10:05:03'),(111,403,'2006-02-15 10:05:03'),(111,407,'2006-02-15 10:05:03'),(111,414,'2006-02-15 10:05:03'),(111,474,'2006-02-15 10:05:03'),(111,489,'2006-02-15 10:05:03'),(111,508,'2006-02-15 10:05:03'),(111,555,'2006-02-15 10:05:03'),(111,603,'2006-02-15 10:05:03'),(111,608,'2006-02-15 10:05:03'),(111,643,'2006-02-15 10:05:03'),(111,669,'2006-02-15 10:05:03'),(111,679,'2006-02-15 10:05:03'),(111,680,'2006-02-15 10:05:03'),(111,699,'2006-02-15 10:05:03'),(111,731,'2006-02-15 10:05:03'),(111,732,'2006-02-15 10:05:03'),(111,737,'2006-02-15 10:05:03'),(111,744,'2006-02-15 10:05:03'),(111,777,'2006-02-15 10:05:03'),(111,847,'2006-02-15 10:05:03'),(111,894,'2006-02-15 10:05:03'),(111,919,'2006-02-15 10:05:03'),(111,962,'2006-02-15 10:05:03'),(111,973,'2006-02-15 10:05:03'),(112,34,'2006-02-15 10:05:03'),(112,37,'2006-02-15 10:05:03'),(112,151,'2006-02-15 10:05:03'),(112,173,'2006-02-15 10:05:03'),(112,188,'2006-02-15 10:05:03'),(112,231,'2006-02-15 10:05:03'),(112,312,'2006-02-15 10:05:03'),(112,322,'2006-02-15 10:05:03'),(112,443,'2006-02-15 10:05:03'),(112,450,'2006-02-15 10:05:03'),(112,565,'2006-02-15 10:05:03'),(112,603,'2006-02-15 10:05:03'),(112,606,'2006-02-15 10:05:03'),(112,654,'2006-02-15 10:05:03'),(112,666,'2006-02-15 10:05:03'),(112,700,'2006-02-15 10:05:03'),(112,728,'2006-02-15 10:05:03'),(112,772,'2006-02-15 10:05:03'),(112,796,'2006-02-15 10:05:03'),(112,817,'2006-02-15 10:05:03'),(112,829,'2006-02-15 10:05:03'),(112,856,'2006-02-15 10:05:03'),(112,865,'2006-02-15 10:05:03'),(112,869,'2006-02-15 10:05:03'),(112,988,'2006-02-15 10:05:03'),(113,35,'2006-02-15 10:05:03'),(113,84,'2006-02-15 10:05:03'),(113,116,'2006-02-15 10:05:03'),(113,181,'2006-02-15 10:05:03'),(113,218,'2006-02-15 10:05:03'),(113,249,'2006-02-15 10:05:03'),(113,258,'2006-02-15 10:05:03'),(113,292,'2006-02-15 10:05:03'),(113,322,'2006-02-15 10:05:03'),(113,353,'2006-02-15 10:05:03'),(113,403,'2006-02-15 10:05:03'),(113,525,'2006-02-15 10:05:03'),(113,642,'2006-02-15 10:05:03'),(113,656,'2006-02-15 10:05:03'),(113,674,'2006-02-15 10:05:03'),(113,680,'2006-02-15 10:05:03'),(113,700,'2006-02-15 10:05:03'),(113,719,'2006-02-15 10:05:03'),(113,723,'2006-02-15 10:05:03'),(113,726,'2006-02-15 10:05:03'),(113,732,'2006-02-15 10:05:03'),(113,748,'2006-02-15 10:05:03'),(113,838,'2006-02-15 10:05:03'),(113,890,'2006-02-15 10:05:03'),(113,921,'2006-02-15 10:05:03'),(113,969,'2006-02-15 10:05:03'),(113,981,'2006-02-15 10:05:03'),(114,13,'2006-02-15 10:05:03'),(114,68,'2006-02-15 10:05:03'),(114,90,'2006-02-15 10:05:03'),(114,162,'2006-02-15 10:05:03'),(114,188,'2006-02-15 10:05:03'),(114,194,'2006-02-15 10:05:03'),(114,210,'2006-02-15 10:05:03'),(114,237,'2006-02-15 10:05:03'),(114,254,'2006-02-15 10:05:03'),(114,305,'2006-02-15 10:05:03'),(114,339,'2006-02-15 10:05:03'),(114,420,'2006-02-15 10:05:03'),(114,425,'2006-02-15 10:05:03'),(114,452,'2006-02-15 10:05:03'),(114,538,'2006-02-15 10:05:03'),(114,619,'2006-02-15 10:05:03'),(114,757,'2006-02-15 10:05:03'),(114,807,'2006-02-15 10:05:03'),(114,827,'2006-02-15 10:05:03'),(114,841,'2006-02-15 10:05:03'),(114,861,'2006-02-15 10:05:03'),(114,866,'2006-02-15 10:05:03'),(114,913,'2006-02-15 10:05:03'),(114,961,'2006-02-15 10:05:03'),(114,993,'2006-02-15 10:05:03'),(115,49,'2006-02-15 10:05:03'),(115,52,'2006-02-15 10:05:03'),(115,245,'2006-02-15 10:05:03'),(115,246,'2006-02-15 10:05:03'),(115,277,'2006-02-15 10:05:03'),(115,302,'2006-02-15 10:05:03'),(115,379,'2006-02-15 10:05:03'),(115,383,'2006-02-15 10:05:03'),(115,391,'2006-02-15 10:05:03'),(115,428,'2006-02-15 10:05:03'),(115,506,'2006-02-15 10:05:03'),(115,531,'2006-02-15 10:05:03'),(115,607,'2006-02-15 10:05:03'),(115,615,'2006-02-15 10:05:03'),(115,661,'2006-02-15 10:05:03'),(115,671,'2006-02-15 10:05:03'),(115,686,'2006-02-15 10:05:03'),(115,703,'2006-02-15 10:05:03'),(115,714,'2006-02-15 10:05:03'),(115,740,'2006-02-15 10:05:03'),(115,754,'2006-02-15 10:05:03'),(115,846,'2006-02-15 10:05:03'),(115,887,'2006-02-15 10:05:03'),(115,952,'2006-02-15 10:05:03'),(115,955,'2006-02-15 10:05:03'),(115,966,'2006-02-15 10:05:03'),(115,985,'2006-02-15 10:05:03'),(115,994,'2006-02-15 10:05:03'),(116,36,'2006-02-15 10:05:03'),(116,48,'2006-02-15 10:05:03'),(116,88,'2006-02-15 10:05:03'),(116,90,'2006-02-15 10:05:03'),(116,105,'2006-02-15 10:05:03'),(116,128,'2006-02-15 10:05:03'),(116,336,'2006-02-15 10:05:03'),(116,338,'2006-02-15 10:05:03'),(116,384,'2006-02-15 10:05:03'),(116,412,'2006-02-15 10:05:03'),(116,420,'2006-02-15 10:05:03'),(116,451,'2006-02-15 10:05:03'),(116,481,'2006-02-15 10:05:03'),(116,492,'2006-02-15 10:05:03'),(116,584,'2006-02-15 10:05:03'),(116,606,'2006-02-15 10:05:03'),(116,622,'2006-02-15 10:05:03'),(116,647,'2006-02-15 10:05:03'),(116,653,'2006-02-15 10:05:03'),(116,742,'2006-02-15 10:05:03'),(116,784,'2006-02-15 10:05:03'),(116,844,'2006-02-15 10:05:03'),(116,939,'2006-02-15 10:05:03'),(116,956,'2006-02-15 10:05:03'),(117,10,'2006-02-15 10:05:03'),(117,15,'2006-02-15 10:05:03'),(117,42,'2006-02-15 10:05:03'),(117,167,'2006-02-15 10:05:03'),(117,178,'2006-02-15 10:05:03'),(117,190,'2006-02-15 10:05:03'),(117,197,'2006-02-15 10:05:03'),(117,224,'2006-02-15 10:05:03'),(117,246,'2006-02-15 10:05:03'),(117,273,'2006-02-15 10:05:03'),(117,298,'2006-02-15 10:05:03'),(117,316,'2006-02-15 10:05:03'),(117,337,'2006-02-15 10:05:03'),(117,395,'2006-02-15 10:05:03'),(117,423,'2006-02-15 10:05:03'),(117,432,'2006-02-15 10:05:03'),(117,459,'2006-02-15 10:05:03'),(117,468,'2006-02-15 10:05:03'),(117,550,'2006-02-15 10:05:03'),(117,578,'2006-02-15 10:05:03'),(117,707,'2006-02-15 10:05:03'),(117,710,'2006-02-15 10:05:03'),(117,738,'2006-02-15 10:05:03'),(117,739,'2006-02-15 10:05:03'),(117,778,'2006-02-15 10:05:03'),(117,783,'2006-02-15 10:05:03'),(117,785,'2006-02-15 10:05:03'),(117,797,'2006-02-15 10:05:03'),(117,812,'2006-02-15 10:05:03'),(117,831,'2006-02-15 10:05:03'),(117,864,'2006-02-15 10:05:03'),(117,887,'2006-02-15 10:05:03'),(117,926,'2006-02-15 10:05:03'),(118,35,'2006-02-15 10:05:03'),(118,39,'2006-02-15 10:05:03'),(118,41,'2006-02-15 10:05:03'),(118,49,'2006-02-15 10:05:03'),(118,55,'2006-02-15 10:05:03'),(118,136,'2006-02-15 10:05:03'),(118,141,'2006-02-15 10:05:03'),(118,151,'2006-02-15 10:05:03'),(118,311,'2006-02-15 10:05:03'),(118,384,'2006-02-15 10:05:03'),(118,399,'2006-02-15 10:05:03'),(118,499,'2006-02-15 10:05:03'),(118,517,'2006-02-15 10:05:03'),(118,553,'2006-02-15 10:05:03'),(118,558,'2006-02-15 10:05:03'),(118,572,'2006-02-15 10:05:03'),(118,641,'2006-02-15 10:05:03'),(118,656,'2006-02-15 10:05:03'),(118,695,'2006-02-15 10:05:03'),(118,735,'2006-02-15 10:05:03'),(118,788,'2006-02-15 1\n```\n\n----------------------------------------\n\nTITLE: MySQL Percona Server Query Log Example\nDESCRIPTION: A MySQL query log from Percona Server showing server startup information and two administrator commands. The log includes detailed query execution metrics such as query time, lock time, rows affected, and various optimization flags.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow-pt-243.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/sbin/mysqld, Version: 5.0.77-percona-b13-log (MySQL Percona Edition (GPL)). started with:\nTcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock\nTime                 Id Command    Argument\n# Time: 090311 18:11:50\n# User@Host: root[root] @ alonghotnamelikelocalhost []\n# Thread_id: 47  Schema: \n# Query_time: 0.017850  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0  Rows_affected: 0  Rows_read: 0\n# QC_Hit: No  Full_scan: No  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n# administrator command: Refresh;\n# User@Host: root[root] @ alonghotnamelikelocalhost []\n# Thread_id: 47  Schema: \n# Query_time: 0.000002  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0  Rows_affected: 0  Rows_read: 0\n# QC_Hit: No  Full_scan: No  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n# administrator command: Quit;\n```\n\n----------------------------------------\n\nTITLE: Creating sakila.film_text Table with Full-Text Index in SQL\nDESCRIPTION: This SQL snippet defines the `film_text` table, designed to store film titles and descriptions potentially for full-text searching. It uses the MyISAM engine, which supports FULLTEXT indexes. A primary key is defined on `film_id`, and a FULLTEXT index (`idx_title_description`) is created on the `title` and `description` columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: JOIN with WHERE Clause\nDESCRIPTION: SELECT query joining tables a and b using aliases and WHERE clause for id matching\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow001.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from a as t1, b as t2 where t1.id=t2.id;\n```\n\n----------------------------------------\n\nTITLE: Creating Replication Async Connection Failover Table in MySQL\nDESCRIPTION: Defines table structure for managing asynchronous replication connection failover settings. Includes channel configuration, host details, port, network namespace and weighting for failover priority.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `replication_asynchronous_connection_failover` (\n  `Channel_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT 'The replication channel name that connects source and replica.',\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL COMMENT 'The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.',\n  `Port` int unsigned NOT NULL COMMENT 'The source port that the replica will attempt to switch over the replication connection to in case of a failure.',\n  `Network_namespace` char(64) NOT NULL COMMENT 'The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.',\n  `Weight` tinyint unsigned NOT NULL COMMENT 'The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.',\n  `Managed_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '' COMMENT 'The name of the group which this server belongs to.',\n  PRIMARY KEY (`Channel_name`,`Host`,`Port`,`Network_namespace`,`Managed_name`),\n  KEY `Channel_name` (`Channel_name`,`Managed_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='The source configuration details'\n```\n\n----------------------------------------\n\nTITLE: SQL Query in Network Packet\nDESCRIPTION: SQL SELECT query transmitted in TCP packet requesting data from table t3 with multiple OR conditions\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump023.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM d.t3 WHERE v=? OR c=? OR f=?\n```\n\n----------------------------------------\n\nTITLE: Inserting Multilingual Data into Latin1 Table\nDESCRIPTION: Inserts the same multilingual data into the 'test2' table with Latin1 encoding. This may lead to character encoding issues with non-Latin characters like Cyrillic.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `test2` VALUES\n(1,'watching'),(2,'poet'),(3,'просмотра'),(4,'Поэту')\n```\n\n----------------------------------------\n\nTITLE: Retrieving phpMyAdmin Bookmarks\nDESCRIPTION: EXPLAIN query that fetches bookmarks from the phpMyAdmin bookmark table. Retrieves bookmarks that are either shared (user='') or belong specifically to the 'root' user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT `label`, `id`, `query`, `dbase` AS `db`, IF (`user` = '', true, false) AS `shared` FROM `phpmyadmin`.`pma__bookmark` WHERE `user` = '' OR `user` = 'root'\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Slow Query Log Entry\nDESCRIPTION: This snippet shows a MySQL slow query log entry with various performance metrics, including query time, lock time, and InnoDB-specific statistics. It provides detailed information about a specific database operation for performance analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow032.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n# User@Host: [SQL_SLAVE] @  []\n# Thread_id: 10\n# Query_time: 0.000512  Lock_time: 0.000077  Rows_sent: 0  Rows_examined: 0\n# QC_Hit: No  Full_scan: No  Full_join: Yes  Tmp_table: No  Tmp_table_on_disk: No\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\n#   InnoDB_IO_r_ops: 1  InnoDB_IO_r_bytes: 2  InnoDB_IO_r_wait: 3.000003\n#   InnoDB_rec_lock_wait: 0.400004  InnoDB_queue_wait: 0.000005\n#   InnoDB_pages_distinct: 24\n```\n\n----------------------------------------\n\nTITLE: Querying All Records from 'foo' Table in MySQL\nDESCRIPTION: This SQL query selects all columns and rows from the 'foo' table. The query takes approximately 0.73 seconds to execute, examining 62,951 rows without returning any results. It performs a full table scan without using the query cache or temporary tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow030.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Committing MySQL Transaction\nDESCRIPTION: This query commits the current transaction in MySQL. It has a very low execution time and doesn't affect any rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncommit\\G\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into MySQL Database Table\nDESCRIPTION: Inserts empty string and 'Exact' values into columns m and b respectively of table v in database db.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow035.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO db.v (m, b) VALUES ('', 'Exact');\n```\n\n----------------------------------------\n\nTITLE: Creating Updated Latin1 Table with DEFAULT Keyword\nDESCRIPTION: Creates a new version of the 'test2' table using explicit DEFAULT keyword in column definitions with Latin1 character set. This matches the updated syntax used for test1.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `test2` (\n  `kwid` int(10) unsigned NOT NULL DEFAULT '0',\n  `keyword` varchar(80) NOT NULL DEFAULT ''\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Server Process Information (Shell Output)\nDESCRIPTION: This output line details a running MySQL server process (`mysqld`). It includes the user (`mysql`), process ID (`3271`), parent PID (`1`), CPU usage (`33`), start date (`Jan17`), TTY (`?`), cumulative CPU time (`2-14:46:30`), and the full command with arguments specifying configuration files (`my.cnf`), directories (`basedir`, `datadir`), PID file, and socket file. This type of output is typically generated by process listing commands like `ps`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/ps-mysqld-004.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmysql     3271     1 33 Jan17 ?        2-14:46:30 /usr/sbin/mysqld --defaults-file=/var/lib/mysql/my.cnf --basedir=/usr --datadir=/var/lib/mysql/data/ --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Capture - MySQL Server Unknown Variable Error\nDESCRIPTION: Network packet showing MySQL server response indicating unknown system variable 'nono'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump040.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n2009-11-01 14:54:52.813941 IP 127.0.0.1.3306 > 127.0.0.1.39640: tcp 43\n\t0x0000:  4508 005f 3c34 4000 4006 005b 7f00 0001\n\t0x0010:  7f00 0001 0cea 9ad8 554a e6a0 5554 0a3e\n\t0x0020:  8018 0200 fe53 0000 0101 080a 0020 1cce\n\t0x0030:  0020 1cce 2700 0001 ffa9 0423 4859 3030\n\t0x0040:  3055 6e6b 6e6f 776e 2073 7973 7465 6d20\n\t0x0050:  7661 7269 6162 6c65 2027 6e6f 6e6f 27\n```\n\n----------------------------------------\n\nTITLE: MySQL Client ACK Packet\nDESCRIPTION: TCP acknowledgment packet sent from client (localhost:38381) back to MySQL server confirming receipt of response. Contains no payload data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump007.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n4508 0034 a04f 4000 4006 9c6a 7f00 0001\n7f00 0001 95ed 0cea be95 2c21 be35 a367\n8010 0212 3308 0000 0101 080a 00bd a97d\n00bd a97d\n```\n\n----------------------------------------\n\nTITLE: Describing x$waits_by_host_by_latency View Structure in MySQL\nDESCRIPTION: Displays the structure of the x$waits_by_host_by_latency view, which is similar to waits_by_host_by_latency but with latency fields as bigint for raw data analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_111\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$waits_by_host_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| host          | varchar(60)         | YES  |     | NULL    |       |\n| event         | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| avg_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Setting Database and Character Encoding in MySQL\nDESCRIPTION: MySQL log entry followed by commands to select a database and set UTF-8 character encoding. The log contains execution metadata including thread ID and schema information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow008.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 6  Schema: db2 \n# Query_time: 0.000899  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\n# No InnoDB statistics available for this query\nuse db;\nSET NAMES utf8;\n```\n\n----------------------------------------\n\nTITLE: Querying Data from foo Table\nDESCRIPTION: This SQL SELECT statement retrieves all columns from the table 'foo'. It involves querying the database 'db1'. There are no specific constraints mentioned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo\\G\n```\n\n----------------------------------------\n\nTITLE: Running LSI Utility Command on Linux\nDESCRIPTION: Command to run the LSI Logic MPT Configuration Utility with interactive and scan options on a Linux system. This utility is used to view and configure LSI storage controllers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/lsiutil-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLinux/lsiutil.x86_64 -i -s\n```\n\n----------------------------------------\n\nTITLE: Granting Column-Specific SELECT on test.t\nDESCRIPTION: This SQL command grants the 'sally'@'%' user the permission to SELECT data from specific columns ('DateCreated', 'PaymentStat', 'PckPrice', 'SANumber') within the 't' table of the 'test' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-84.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT (`DateCreated`, `PaymentStat`, `PckPrice`, `SANumber`) ON `test`.`t` TO `sally`@`%`;\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement in SQL (Query 2 Context)\nDESCRIPTION: Displays the SQL statement needed to recreate table 't' in database 'd', shown within the analysis context of Query 2. This provides schema details relevant to the analyzed EXECUTE statement. The \\G terminator is for vertical output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `d`.`t`\\G\n```\n\n----------------------------------------\n\nTITLE: Staff Table Definition\nDESCRIPTION: Creates the staff table with fields for managing employee information including personal details, authentication, and store assignments. Includes foreign key constraints for store and address relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: MySQL Session Cleanup\nDESCRIPTION: Final cleanup operations including delimiter reset, rollback and completion type restoration\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog003.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;\n# End of log file\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n```\n\n----------------------------------------\n\nTITLE: Querying with Calculated Field - MySQL - SQL\nDESCRIPTION: Selects the result of the expression 'b = b + 30' from table 't' where 'user_id' is 1, typically as part of an EXPLAIN analysis or to demonstrate computation in SELECT. Assumes existing columns 'b' and 'user_id' in table 't'; no external dependencies. The output is the evaluation of the expression for matching records—may not represent best practice for production, but serves for query plan purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow056.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect  b = b + 30 from t where  user_id=1\\G\n```\n\n----------------------------------------\n\nTITLE: Switching to 'db2' Database in MySQL\nDESCRIPTION: This command switches the current database context to 'db2'. It's typically used before performing operations on tables within that specific database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow034.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nuse db2;\n```\n\n----------------------------------------\n\nTITLE: MySQL Transaction Lock Analysis Output\nDESCRIPTION: Shows detailed MySQL transaction information including locks held by multiple transactions on citydb database tables. Includes transaction states, lock modes (IX, X), lock types (TABLE LOCK, RECORD LOCKS), and transaction visibility information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.002.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nTABLE LOCK table `citydb`.`players` trx id 7C6E3A65 lock mode IX\nRECORD LOCKS space id 148 page no 114612 n bits 552 index `PRIMARY` of table `citydb`.`city_grid` trx id 7C6E3A60 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3A60 lock mode IX\nRECORD LOCKS space id 149 page no 621059 n bits 360 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3A60 lock_mode X locks rec but not gap\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry 2\nDESCRIPTION: Second slow query log entry with similar SELECT query showing performance metrics including query time of 0.000173 seconds, lock time of 0.000048 seconds, examining 19 rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow044.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: foo[foo] @ [host]\n# Thread_id: 342 Schema:  Last_errno: 3 Killed: 4\n# Query_time: 0.000173 Lock_time: 0.000048 Rows_sent: 19 Rows_examined: 19\nselect /*this is only parsable by slowlog-to-outfile, not by mqd*/ foo;\n```\n\n----------------------------------------\n\nTITLE: Defining Film Description Full-Text Table in MySQL\nDESCRIPTION: This statement creates the 'film_text' table, storing film titles and descriptions, optimized for full-text searching on these fields. It uses the MyISAM engine for full-text indexing and sets up a fulltext key on both title and description columns. Designed for fast retrieval of film details by text search.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Server Monitoring Data Records\nDESCRIPTION: Time-series monitoring data showing various server metrics including timestamps, resource usage values, and reference IDs. Each row represents a monitoring sample with multiple data points collected at regular intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n300,300,7256314,1236699916),(8370,1236698400,9,0.0,300,299,7256314,1236699916),(8370,1236698400,10,0.0,300,299,7256314,1236699916)...\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Dump Between Local Ports\nDESCRIPTION: Network packet capture showing TCP communication between localhost ports 12345 and 62133, including handshake packets and data transfer. Each packet includes timestamp, IP details, and hexadecimal dump of packet contents.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump042.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4510 0040 b290 4000 4006 0000 7f00 0001\n7f00 0001 f2b5 3039 58cf 8e7c 0000 0000\nb002 ffff fe34 0000 0204 3fd8 0103 0303\n0101 080a 0580 fe1f 0000 0000 0402 0000\n```\n\nLANGUAGE: hex\nCODE:\n```\n4508 0070 e5f9 4000 4006 0000 7f00 0001\n7f00 0001 3039 f2b5 1c49 dad1 58cf 8e7d\n8018 ffff fe64 0000 0101 080a 0580 fe1f\n0580 fe1f 3800 0000 0a35 2e31 2e35 332d\n6c6f 6700 1800 0000 6553 5179 332d 2925\n00ff f708 0200 0000 0000 0000 0000 0000\n0000 007b 6154 5f62 4d3d 274a 2269 6900\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from History Table in SQL\nDESCRIPTION: These SQL statements delete individual records from the 'history' table in the 'bug918056' database. Each statement targets a specific combination of 'uid' and 'nid' values, limiting the deletion to one record per query. This approach allows for precise control over which records are removed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/bug-918056-print.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM `bug918056`.`history` WHERE `uid`='1' AND `nid`='14' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='1' AND `nid`='1591' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='1' AND `nid`='11501' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='1' AND `nid`='12648' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='1' AND `nid`='12652' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='1045' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='1046' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='11556' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12166' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12598' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12599' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12601' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12602' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12603' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12606' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12607' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12609' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12616' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12617' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12618' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12621' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12623' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12624' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12626' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12627' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12628' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12632' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12651' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12652' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12672' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12674' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12675' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12677' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12678' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12680' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12682' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12694' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12733' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12734' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='20' AND `nid`='12738' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='12' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='14' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='16' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='191' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='307' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='339' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='340' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='901' LIMIT 1;\nDELETE FROM `bug918056`.`history` WHERE `uid`='21' AND `nid`='1039' LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: MySQL Administrator Quit Command\nDESCRIPTION: Administrative command showing user session termination. Command executed by chessguest user from localhost with zero impact on rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow041.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# administrator command: Quit;\n```\n\n----------------------------------------\n\nTITLE: Setting Character Sets and Session SQL Modes in MySQL SQL File - SQL\nDESCRIPTION: These snippets initialize and restore the client character set, results encoding, collation, and SQL mode session variables. This ensures that subsequent schema modifications and triggers use consistent encoding and SQL behavior. Dependencies include a running MySQL environment supporting session variables and compatible versioned comments (as used by Percona and MySQL tools).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 SET character_set_client  = latin1 */ ;\n/*!50003 SET character_set_results = latin1 */ ;\n/*!50003 SET collation_connection  = latin1_swedish_ci */ ;\n/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER' */ ;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 SET sql_mode              = @saved_sql_mode */ ;\n/*!50003 SET character_set_client  = @saved_cs_client */ ;\n/*!50003 SET character_set_results = @saved_cs_results */ ;\n/*!50003 SET collation_connection  = @saved_col_connection */ ;\n/*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n/*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n/*!50003 SET @saved_col_connection = @@collation_connection */ ;\n```\n\n----------------------------------------\n\nTITLE: Counting Trees with Specific Status and Code Existence in SQL\nDESCRIPTION: SQL query that counts trees filtered by pool instance ID and tree status type. It uses an EXISTS clause to further filter for trees that have corresponding entries in the treeCODE table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nselect count(tree0_.treeid) as col_0_0_ from tree tree0_ where tree0_.poolinstanceid=601 and tree0_.treestatustypeid=3 and (exists (select 1 from treeCODE treecode1_ where tree0_.treeid=treeid))\n```\n\n----------------------------------------\n\nTITLE: Selecting and Joining Tables 'a' and 'b' in SQL\nDESCRIPTION: This snippet outlines SELECT operations on tables or aliases 'a' and 'b', followed by JOIN operations between them. The syntax `JOIN a` and `JOIN b` is abbreviated and might represent a simplified or pseudo-code representation of a JOIN clause. The surrounding text provides a unique identifier `Query_id: 0x04C9C44F502569388745D03011B0E1CE.1`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow001.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a\nSELECT b\nJOIN a\nJOIN b\n```\n\n----------------------------------------\n\nTITLE: Transaction and Character Set Configuration - SQL\nDESCRIPTION: Transaction initiation and character set configuration commands.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow038.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN;\nuse db5;\nSET NAMES utf8;\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Values with User IDs, Item IDs and Timestamps\nDESCRIPTION: This SQL code snippet contains values to be inserted into a database table. Each tuple includes what appears to be a user ID (ranging from 164-176), an item ID, and a uniform timestamp of '2006-02-15 10:05:03'. This is likely part of a larger INSERT statement for a relational database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n(164,324,'2006-02-15 10:05:03'),(164,347,'2006-02-15 10:05:03'),(164,367,'2006-02-15 10:05:03'),(164,431,'2006-02-15 10:05:03'),(164,448,'2006-02-15 10:05:03'),(164,469,'2006-02-15 10:05:03'),(164,545,'2006-02-15 10:05:03'),(164,610,'2006-02-15 10:05:03'),(164,613,'2006-02-15 10:05:03'),(164,673,'2006-02-15 10:05:03'),(164,681,'2006-02-15 10:05:03'),(164,698,'2006-02-15 10:05:03'),(164,801,'2006-02-15 10:05:03'),(164,820,'2006-02-15 10:05:03'),(164,832,'2006-02-15 10:05:03'),(164,834,'2006-02-15 10:05:03'),(164,851,'2006-02-15 10:05:03'),(164,884,'2006-02-15 10:05:03'),(164,908,'2006-02-15 10:05:03'),(164,957,'2006-02-15 10:05:03'),(164,984,'2006-02-15 10:05:03'),(165,72,'2006-02-15 10:05:03'),(165,95,'2006-02-15 10:05:03'),(165,146,'2006-02-15 10:05:03'),(165,204,'2006-02-15 10:05:03'),(165,253,'2006-02-15 10:05:03'),(165,286,'2006-02-15 10:05:03'),(165,360,'2006-02-15 10:05:03'),(165,375,'2006-02-15 10:05:03'),(165,395,'2006-02-15 10:05:03'),(165,421,'2006-02-15 10:05:03'),(165,437,'2006-02-15 10:05:03'),(165,473,'2006-02-15 10:05:03'),(165,607,'2006-02-15 10:05:03'),(165,644,'2006-02-15 10:05:03'),(165,659,'2006-02-15 10:05:03'),(165,693,'2006-02-15 10:05:03'),(165,737,'2006-02-15 10:05:03'),(165,779,'2006-02-15 10:05:03'),(165,798,'2006-02-15 10:05:03'),(165,807,'2006-02-15 10:05:03'),(165,809,'2006-02-15 10:05:03'),(165,832,'2006-02-15 10:05:03'),(165,833,'2006-02-15 10:05:03'),(165,947,'2006-02-15 10:05:03'),(165,948,'2006-02-15 10:05:03'),(165,962,'2006-02-15 10:05:03'),(166,25,'2006-02-15 10:05:03'),(166,38,'2006-02-15 10:05:03'),(166,55,'2006-02-15 10:05:03'),(166,61,'2006-02-15 10:05:03'),(166,68,'2006-02-15 10:05:03'),(166,86,'2006-02-15 10:05:03'),(166,146,'2006-02-15 10:05:03'),(166,255,'2006-02-15 10:05:03'),(166,297,'2006-02-15 10:05:03'),(166,306,'2006-02-15 10:05:03'),(166,326,'2006-02-15 10:05:03'),(166,361,'2006-02-15 10:05:03'),(166,366,'2006-02-15 10:05:03'),(166,426,'2006-02-15 10:05:03'),(166,580,'2006-02-15 10:05:03'),(166,622,'2006-02-15 10:05:03'),(166,674,'2006-02-15 10:05:03'),(166,714,'2006-02-15 10:05:03'),(166,788,'2006-02-15 10:05:03'),(166,867,'2006-02-15 10:05:03'),(166,944,'2006-02-15 10:05:03'),(166,1000,'2006-02-15 10:05:03'),(167,17,'2006-02-15 10:05:03'),(167,25,'2006-02-15 10:05:03'),(167,63,'2006-02-15 10:05:03'),(167,72,'2006-02-15 10:05:03'),(167,107,'2006-02-15 10:05:03'),(167,120,'2006-02-15 10:05:03'),(167,191,'2006-02-15 10:05:03'),(167,294,'2006-02-15 10:05:03'),(167,319,'2006-02-15 10:05:03'),(167,339,'2006-02-15 10:05:03'),(167,341,'2006-02-15 10:05:03'),(167,496,'2006-02-15 10:05:03'),(167,554,'2006-02-15 10:05:03'),(167,626,'2006-02-15 10:05:03'),(167,628,'2006-02-15 10:05:03'),(167,672,'2006-02-15 10:05:03'),(167,692,'2006-02-15 10:05:03'),(167,717,'2006-02-15 10:05:03'),(167,734,'2006-02-15 10:05:03'),(167,794,'2006-02-15 10:05:03'),(167,800,'2006-02-15 10:05:03'),(167,802,'2006-02-15 10:05:03'),(167,856,'2006-02-15 10:05:03'),(167,864,'2006-02-15 10:05:03'),(167,882,'2006-02-15 10:05:03'),(167,923,'2006-02-15 10:05:03'),(168,32,'2006-02-15 10:05:03'),(168,56,'2006-02-15 10:05:03'),(168,92,'2006-02-15 10:05:03'),(168,115,'2006-02-15 10:05:03'),(168,188,'2006-02-15 10:05:03'),(168,196,'2006-02-15 10:05:03'),(168,208,'2006-02-15 10:05:03'),(168,237,'2006-02-15 10:05:03'),(168,241,'2006-02-15 10:05:03'),(168,255,'2006-02-15 10:05:03'),(168,305,'2006-02-15 10:05:03'),(168,336,'2006-02-15 10:05:03'),(168,387,'2006-02-15 10:05:03'),(168,433,'2006-02-15 10:05:03'),(168,438,'2006-02-15 10:05:03'),(168,519,'2006-02-15 10:05:03'),(168,602,'2006-02-15 10:05:03'),(168,619,'2006-02-15 10:05:03'),(168,626,'2006-02-15 10:05:03'),(168,652,'2006-02-15 10:05:03'),(168,678,'2006-02-15 10:05:03'),(168,685,'2006-02-15 10:05:03'),(168,804,'2006-02-15 10:05:03'),(168,807,'2006-02-15 10:05:03'),(168,826,'2006-02-15 10:05:03'),(168,841,'2006-02-15 10:05:03'),(168,886,'2006-02-15 10:05:03'),(168,889,'2006-02-15 10:05:03'),(168,892,'2006-02-15 10:05:03'),(168,927,'2006-02-15 10:05:03'),(168,959,'2006-02-15 10:05:03'),(169,6,'2006-02-15 10:05:03'),(169,78,'2006-02-15 10:05:03'),(169,93,'2006-02-15 10:05:03'),(169,246,'2006-02-15 10:05:03'),(169,248,'2006-02-15 10:05:03'),(169,289,'2006-02-15 10:05:03'),(169,301,'2006-02-15 10:05:03'),(169,326,'2006-02-15 10:05:03'),(169,349,'2006-02-15 10:05:03'),(169,372,'2006-02-15 10:05:03'),(169,398,'2006-02-15 10:05:03'),(169,434,'2006-02-15 10:05:03'),(169,505,'2006-02-15 10:05:03'),(169,564,'2006-02-15 10:05:03'),(169,571,'2006-02-15 10:05:03'),(169,634,'2006-02-15 10:05:03'),(169,642,'2006-02-15 10:05:03'),(169,673,'2006-02-15 10:05:03'),(169,694,'2006-02-15 10:05:03'),(169,727,'2006-02-15 10:05:03'),(169,778,'2006-02-15 10:05:03'),(169,815,'2006-02-15 10:05:03'),(169,847,'2006-02-15 10:05:03'),(169,849,'2006-02-15 10:05:03'),(169,894,'2006-02-15 10:05:03'),(169,897,'2006-02-15 10:05:03'),(169,954,'2006-02-15 10:05:03'),(169,992,'2006-02-15 10:05:03'),(169,998,'2006-02-15 10:05:03'),(170,7,'2006-02-15 10:05:03'),(170,15,'2006-02-15 10:05:03'),(170,27,'2006-02-15 10:05:03'),(170,33,'2006-02-15 10:05:03'),(170,102,'2006-02-15 10:05:03'),(170,139,'2006-02-15 10:05:03'),(170,180,'2006-02-15 10:05:03'),(170,184,'2006-02-15 10:05:03'),(170,212,'2006-02-15 10:05:03'),(170,299,'2006-02-15 10:05:03'),(170,322,'2006-02-15 10:05:03'),(170,358,'2006-02-15 10:05:03'),(170,416,'2006-02-15 10:05:03'),(170,508,'2006-02-15 10:05:03'),(170,537,'2006-02-15 10:05:03'),(170,705,'2006-02-15 10:05:03'),(170,758,'2006-02-15 10:05:03'),(170,764,'2006-02-15 10:05:03'),(170,868,'2006-02-15 10:05:03'),(170,877,'2006-02-15 10:05:03'),(170,886,'2006-02-15 10:05:03'),(170,925,'2006-02-15 10:05:03'),(170,993,'2006-02-15 10:05:03'),(170,996,'2006-02-15 10:05:03'),(171,49,'2006-02-15 10:05:03'),(171,146,'2006-02-15 10:05:03'),(171,166,'2006-02-15 10:05:03'),(171,181,'2006-02-15 10:05:03'),(171,219,'2006-02-15 10:05:03'),(171,273,'2006-02-15 10:05:03'),(171,296,'2006-02-15 10:05:03'),(171,318,'2006-02-15 10:05:03'),(171,342,'2006-02-15 10:05:03'),(171,397,'2006-02-15 10:05:03'),(171,447,'2006-02-15 10:05:03'),(171,450,'2006-02-15 10:05:03'),(171,466,'2006-02-15 10:05:03'),(171,549,'2006-02-15 10:05:03'),(171,560,'2006-02-15 10:05:03'),(171,566,'2006-02-15 10:05:03'),(171,608,'2006-02-15 10:05:03'),(171,625,'2006-02-15 10:05:03'),(171,645,'2006-02-15 10:05:03'),(171,701,'2006-02-15 10:05:03'),(171,761,'2006-02-15 10:05:03'),(171,779,'2006-02-15 10:05:03'),(171,849,'2006-02-15 10:05:03'),(171,872,'2006-02-15 10:05:03'),(171,892,'2006-02-15 10:05:03'),(171,898,'2006-02-15 10:05:03'),(171,903,'2006-02-15 10:05:03'),(171,953,'2006-02-15 10:05:03'),(172,57,'2006-02-15 10:05:03'),(172,100,'2006-02-15 10:05:03'),(172,148,'2006-02-15 10:05:03'),(172,215,'2006-02-15 10:05:03'),(172,302,'2006-02-15 10:05:03'),(172,345,'2006-02-15 10:05:03'),(172,368,'2006-02-15 10:05:03'),(172,385,'2006-02-15 10:05:03'),(172,423,'2006-02-15 10:05:03'),(172,487,'2006-02-15 10:05:03'),(172,493,'2006-02-15 10:05:03'),(172,529,'2006-02-15 10:05:03'),(172,538,'2006-02-15 10:05:03'),(172,567,'2006-02-15 10:05:03'),(172,609,'2006-02-15 10:05:03'),(172,639,'2006-02-15 10:05:03'),(172,649,'2006-02-15 10:05:03'),(172,661,'2006-02-15 10:05:03'),(172,667,'2006-02-15 10:05:03'),(172,710,'2006-02-15 10:05:03'),(172,744,'2006-02-15 10:05:03'),(172,758,'2006-02-15 10:05:03'),(172,771,'2006-02-15 10:05:03'),(172,833,'2006-02-15 10:05:03'),(172,959,'2006-02-15 10:05:03'),(173,49,'2006-02-15 10:05:03'),(173,55,'2006-02-15 10:05:03'),(173,74,'2006-02-15 10:05:03'),(173,80,'2006-02-15 10:05:03'),(173,106,'2006-02-15 10:05:03'),(173,154,'2006-02-15 10:05:03'),(173,162,'2006-02-15 10:05:03'),(173,188,'2006-02-15 10:05:03'),(173,235,'2006-02-15 10:05:03'),(173,313,'2006-02-15 10:05:03'),(173,379,'2006-02-15 10:05:03'),(173,405,'2006-02-15 10:05:03'),(173,491,'2006-02-15 10:05:03'),(173,496,'2006-02-15 10:05:03'),(173,529,'2006-02-15 10:05:03'),(173,550,'2006-02-15 10:05:03'),(173,564,'2006-02-15 10:05:03'),(173,571,'2006-02-15 10:05:03'),(173,592,'2006-02-15 10:05:03'),(173,688,'2006-02-15 10:05:03'),(173,753,'2006-02-15 10:05:03'),(173,757,'2006-02-15 10:05:03'),(173,852,'2006-02-15 10:05:03'),(173,857,'2006-02-15 10:05:03'),(173,921,'2006-02-15 10:05:03'),(173,928,'2006-02-15 10:05:03'),(173,933,'2006-02-15 10:05:03'),(174,11,'2006-02-15 10:05:03'),(174,61,'2006-02-15 10:05:03'),(174,168,'2006-02-15 10:05:03'),(174,298,'2006-02-15 10:05:03'),(174,352,'2006-02-15 10:05:03'),(174,442,'2006-02-15 10:05:03'),(174,451,'2006-02-15 10:05:03'),(174,496,'2006-02-15 10:05:03'),(174,610,'2006-02-15 10:05:03'),(174,618,'2006-02-15 10:05:03'),(174,622,'2006-02-15 10:05:03'),(174,659,'2006-02-15 10:05:03'),(174,677,'2006-02-15 10:05:03'),(174,705,'2006-02-15 10:05:03'),(174,722,'2006-02-15 10:05:03'),(174,780,'2006-02-15 10:05:03'),(174,797,'2006-02-15 10:05:03'),(174,809,'2006-02-15 10:05:03'),(174,827,'2006-02-15 10:05:03'),(174,830,'2006-02-15 10:05:03'),(174,852,'2006-02-15 10:05:03'),(174,853,'2006-02-15 10:05:03'),(174,879,'2006-02-15 10:05:03'),(174,982,'2006-02-15 10:05:03'),(175,9,'2006-02-15 10:05:03'),(175,29,'2006-02-15 10:05:03'),(175,67,'2006-02-15 10:05:03'),(175,129,'2006-02-15 10:05:03'),(175,155,'2006-02-15 10:05:03'),(175,190,'2006-02-15 10:05:03'),(175,191,'2006-02-15 10:05:03'),(175,362,'2006-02-15 10:05:03'),(175,405,'2006-02-15 10:05:03'),(175,424,'2006-02-15 10:05:03'),(175,439,'2006-02-15 10:05:03'),(175,442,'2006-02-15 10:05:03'),(175,483,'2006-02-15 10:05:03'),(175,591,'2006-02-15 10:05:03'),(175,596,'2006-02-15 10:05:03'),(175,616,'2006-02-15 10:05:03'),(175,719,'2006-02-15 10:05:03'),(175,729,'2006-02-15 10:05:03'),(175,772,'2006-02-15 10:05:03'),(175,778,'2006-02-15 10:05:03'),(175,828,'2006-02-15 10:05:03'),(175,842,'2006-02-15 10:05:03'),(175,890,'2006-02-15 10:05:03'),(175,908,'2006-02-15 10:05:03'),(175,977,'2006-02-15 10:05:03'),(175,978,'2006-02-15 10:05:03'),(175,998,'2006-02-15 10:05:03'),(176,13,'2006-02-15 10:05:03'),(176,73,'2006-02-15 10:05:03'),(176,89,'2006-02-15 10:05:03'),(176,150,'2006-0\n```\n\n----------------------------------------\n\nTITLE: Listing Disk Scheduler Configuration\nDESCRIPTION: Shows disk scheduler types and queue sizes for various block devices including nvme, dm, and standard disks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndm-0 | 128\ndm-1 | 128\ndm-2 | 128\ndm-3 | 128\ndm-4 | 128\ndm-5 | 128\ndm-6 | 128\ndm-7 | 128\nnvme0n1 | [none] 1023\nnvme1n1 | [none] 1023\nsda | [mq-deadline] 256\nsdb | [mq-deadline] 256\nsdc | [mq-deadline] 256\nsr0 | [mq-deadline] 64\n```\n\n----------------------------------------\n\nTITLE: Creating Table 'a' in 'test2' Database\nDESCRIPTION: This SQL snippet creates a table named 'a' in the 'test2' database with two columns: an auto-incrementing smallint 'c1' and a varchar 'c2'. This table has the same structure as the 'a' table in the 'test' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump001.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `a` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Character Set and SQL Mode for MySQL\nDESCRIPTION: This snippet adjusts the character set for client-server interaction and sets the SQL mode to enforce strict SQL standards. Key parameters include character_set_client and sql_mode, ensuring compatibility and data integrity across sessions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\n\"/*!50003 SET character_set_client  = @saved_cs_client */ ;\\n/*!50003 SET character_set_results = @saved_cs_results */ ;\\n/*!50003 SET collation_connection  = @saved_col_connection */ ;\\n...\n```\n\nLANGUAGE: SQL\nCODE:\n```\n\"/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER' */ ;\\nDELIMITER ;;\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Setting InnoDB Log File Size in MySQL\nDESCRIPTION: Specifies the size of each log file in an InnoDB log group. This parameter affects the recovery time and overall performance of InnoDB.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n--innodb-log-file-size=# \n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Time Series Data\nDESCRIPTION: Large dataset containing server performance metrics including timestamps, server IDs, measurements, and durations. Each record has consistent structure with numeric values for various monitoring metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\n8366,1236698400,7,0.0,300,300,7256314,1236699916\n8366,1236698400,8,0.0,300,300,7256314,1236699916\n8366,1236698700,9,0.0,300,299,7256314,1236699916\n```\n\n----------------------------------------\n\nTITLE: MySQL MyISAM Configuration Parameters\nDESCRIPTION: MyISAM storage engine specific parameters for controlling index handling, sorting, and table operations\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_5\n\nLANGUAGE: mysql\nCODE:\n```\n--myisam_block_size=# \n--myisam_data_pointer_size=# \n--myisam_max_sort_file_size=# \n--myisam_repair_threads=# \n--myisam_sort_buffer_size=# \n--myisam_stats_method=name\n```\n\n----------------------------------------\n\nTITLE: Parsing Disk Performance Monitoring Logs in Percona Toolkit\nDESCRIPTION: A series of timestamped disk I/O statistics showing detailed metrics for various storage devices. The data is organized in columns showing major/minor device numbers, device names, read/write operations, sectors, and timing information. The metrics are collected at regular 1-second intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/bug-1035311.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1344561790.012145298 2012-08-09 21:23:10\n   1       0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1       1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1       2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1       3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1       4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1       5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1       6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1       7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1       8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1       9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1      10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1      11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1      12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1      13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1      14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1      15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   7       0 loop0 0 0 0 0 0 0 0 0 0 0 0\n   7       1 loop1 0 0 0 0 0 0 0 0 0 0 0\n   7       2 loop2 0 0 0 0 0 0 0 0 0 0 0\n   7       3 loop3 0 0 0 0 0 0 0 0 0 0 0\n   7       4 loop4 0 0 0 0 0 0 0 0 0 0 0\n   7       5 loop5 0 0 0 0 0 0 0 0 0 0 0\n   7       6 loop6 0 0 0 0 0 0 0 0 0 0 0\n   7       7 loop7 0 0 0 0 0 0 0 0 0 0 0\n 202       0 xvda 403324 10092 9822296 7027820 491405 495594 11064776 10228900 1 3676040 17256240\n 202       1 xvda1 374901 4606 9354930 6292210 98601 194011 2340904 5690100 1 2951600 12123450\n 202       2 xvda2 2119 147 18128 24540 1080 4035 40968 24340 0 5070 48880\n 202       3 xvda3 26224 5339 448598 710920 391723 297548 8682904 4514460 0 827200 5225670\n 202      16 xvdb 204322927 10730363 8654807494 343215904 384700785 40723343 15617098115 2443223186 3 1164749100 2787845720\n 202      17 xvdb1 204322845 10730363 8654806838 343215734 384700784 40723343 15617098115 2443223186 3 1164749680 2786863940\n   9       0 md0 0 0 0 0 0 0 0 0 0 0 0\n 253       0 dm-0 215061833 0 8654805862 973640744 436094815 0 15617098267 519250180 3 1165270180 1493615624\n 253       1 dm-1 27721 0 387490 788600 550811 0 7546680 8270690 0 622660 9059380\n 253       2 dm-2 2256 0 48194 29430 61331 0 508992 355400 0 138920 384830\n 253       3 dm-3 1529 0 12226 19800 78346 0 627232 680870 0 223590 700670\n```\n\n----------------------------------------\n\nTITLE: Creating Table 'a' in MySQL - SQL\nDESCRIPTION: Defines a table named 'a' with two columns: an unsigned AUTO_INCREMENT small integer 'c1' that cannot be null, and a non-null varchar(45) 'c2'. This snippet can be used to initialize the table 'a' in a specified database such as 'test' or 'test2'. Key parameters include 'c1' as a primary key candidate and 'c2' for storing text data, both required. No explicit primary key or indexes are defined; foreign key constraints are not present.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/dump001-twice.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `a` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User Defined Functions Table - MySQL - SQL\nDESCRIPTION: This statement creates the 'func' table for storing user-defined function metadata in MySQL. The table holds the function's name, return type, associated dynamic library, and category (function or aggregate). It uses MyISAM and binary collation for utf8 columns. Each function name serves as a primary key, and the table enables tracking and managing user-supplied code extensions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `ret` tinyint(1) NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Wait Events by Latency\nDESCRIPTION: An example SQL query showing the output of selecting from the waits_global_by_latency table, which displays various wait events in MySQL ordered by their latency times. This provides insights into potential performance bottlenecks in the database system.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_105\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from waits_global_by_latency;\n+-----------------------------------------------------+---------+---------------+-------------+-------------+\n| events                                              | total   | total_latency | avg_latency | max_latency |\n+-----------------------------------------------------+---------+---------------+-------------+-------------+\n| wait/io/file/sql/file_parser                        | 14936   | 00:01:06.64   | 4.46 ms     | 231.88 ms   |\n| wait/io/file/innodb/innodb_data_file                |    6133 | 6.31 s        | 1.03 ms     | 147.56 ms   |\n| wait/io/file/sql/FRM                                |   12677 | 2.83 s        | 223.37 us   | 40.86 ms    |\n| wait/io/file/myisam/dfile                           |   28446 | 754.40 ms     | 26.52 us    | 308.79 ms   |\n| wait/io/file/myisam/kfile                           |    7572 | 491.17 ms     | 64.87 us    | 88.76 ms    |\n| wait/io/file/sql/relaylog                           |       9 | 252.28 ms     | 28.03 ms    | 144.17 ms   |\n| wait/io/file/sql/binlog                             |      76 | 242.87 ms     | 3.20 ms     | 153.72 ms   |\n| wait/io/file/sql/binlog_index                       |      21 | 173.07 ms     | 8.24 ms     | 81.83 ms    |\n| wait/io/file/sql/dbopt                              |     184 | 149.52 ms     | 812.62 us   | 15.46 ms    |\n| wait/io/file/innodb/innodb_log_file                 |      20 | 117.17 ms     | 5.86 ms     | 36.53 ms    |\n| wait/synch/mutex/mysys/IO_CACHE::append_buffer_lock | 1197128 | 99.27 ms      | 82.56 ns    | 161.03 us   |\n| wait/io/file/csv/metadata                           |       8 | 86.60 ms      | 10.82 ms    | 50.32 ms    |\n| wait/io/file/sql/relaylog_index                     |      10 | 60.10 ms      | 6.01 ms     | 48.04 ms    |\n| wait/io/file/sql/ERRMSG                             |       5 | 35.41 ms      | 7.08 ms     | 31.78 ms    |\n| wait/io/file/sql/misc                               |      28 | 22.40 ms      | 800.06 us   | 15.30 ms    |\n| wait/io/file/mysys/charset                          |       3 | 7.46 ms       | 2.49 ms     | 4.13 ms     |\n| wait/io/file/sql/casetest                           |       5 | 6.01 ms       | 1.20 ms     | 5.86 ms     |\n| wait/io/file/sql/pid                                |       3 | 5.96 ms       | 1.99 ms     | 3.06 ms     |\n| wait/synch/rwlock/sql/MDL_lock::rwlock              |    1396 | 420.58 us     | 301.22 ns   | 874.64 ns   |\n| wait/io/file/csv/data                               |       4 | 297.46 us     | 74.37 us    | 111.93 us   |\n| wait/io/file/mysys/cnf                              |       5 | 154.97 us     | 30.99 us    | 58.87 us    |\n| wait/io/file/archive/data                           |       4 | 82.71 us      | 20.68 us    | 40.74 us    |\n| wait/synch/mutex/myisam/MYISAM_SHARE::intern_lock   |      90 | 19.23 us      | 213.38 ns   | 576.81 ns   |\n| wait/io/file/sql/global_ddl_log                     |       2 | 18.64 us      | 9.32 us     | 16.40 us    |\n| wait/synch/mutex/innodb/trx_mutex                   |     108 | 8.23 us       | 76.15 ns    | 365.69 ns   |\n+-----------------------------------------------------+---------+---------------+-------------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Bypassing Index Check in pt-online-schema-change using Bash\nDESCRIPTION: Fixes the `--nocheck-plan` option for `pt-online-schema-change`. This option now correctly allows the tool to proceed even if MySQL reports it won't use an index (like a HASH index) for a SELECT operation during the schema change process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Example usage\npt-online-schema-change --nocheck-plan --alter \"ENGINE=InnoDB\" D=mydb,t=mytable --execute\n```\n\n----------------------------------------\n\nTITLE: Displaying TCP Connection Status for MySQL Servers\nDESCRIPTION: This is command output showing TCP connection status information for MySQL servers listening on port 3306. It displays source/destination IP addresses, connection states (mostly TIME_WAIT and some ESTABLISHED), and associated process IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntcp        0      0 10.17.146.20:3306           10.36.34.66:47144           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46888           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34592           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35616           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35322          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45606           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45350           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:39717           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35619           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36131           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46885           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:39716           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34338           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45348           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45604           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46884           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47140           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35839          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45091           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35838          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36093          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36391           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35367           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46881           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45857           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34854           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35622           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45344           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46472           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:40858          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46988           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46977           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46465           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35727           TIME_WAIT   -                   \ntcp        0    165 10.17.146.20:3306           10.17.85.86:48256           ESTABLISHED -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35725           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48002           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46982           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47494           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35720           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60567           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48024           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:45979           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35733           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46494           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:45982           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46480           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47504           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47253           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35739           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46484           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46742           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47766           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60583           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35751           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46504           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47275           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46507           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:44219          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47021           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:43709          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48044           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:44223          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46510           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60587           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48037           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47269           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.202:44213          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47271           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60584           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.100:54410          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48056           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47544           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46011           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47035           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46010           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.14.82.200:56494          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47805           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46268           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47551           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46782           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46001           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47537           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46768           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46512           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:59314           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46002           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46004           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.88:60601           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:47287           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48055           ESTABLISHED 14469/mysqld        \n```\n\n----------------------------------------\n\nTITLE: Creating proc Table in MySQL\nDESCRIPTION: SQL statement for creating the proc table which stores stored procedures and functions. It includes columns for database, name, type, language, security settings, parameters, body, and various metadata about the routine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proc` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `type` enum('FUNCTION','PROCEDURE') NOT NULL,\n  `specific_name` char(64) NOT NULL DEFAULT '',\n  `language` enum('SQL') NOT NULL DEFAULT 'SQL',\n  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',\n  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',\n  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',\n  `param_list` blob NOT NULL,\n  `returns` longblob NOT NULL,\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`,`type`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures';\n```\n\n----------------------------------------\n\nTITLE: Select Query with Different ID Value\nDESCRIPTION: SQL select statement retrieving column c from table t with different id value 'bar'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset010.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect c from t where id='bar';\n```\n\n----------------------------------------\n\nTITLE: Analyzing Simple SELECT Query Performance\nDESCRIPTION: A basic SELECT query executed twice with 12μs average execution time. The query was run by SQL_SLAVE user on db1 database, showing minimal resource usage with no lock time and no rows examined or returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-event-25h.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `db1` LIKE 'foo'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `db1`.`foo`\n```\n\n----------------------------------------\n\nTITLE: Querying Fruits Table with Different Fruit Filters in MySQL\nDESCRIPTION: This snippet shows multiple SQL queries selecting from a 'fuits' table with different fruit filters. The queries use inline comments to specify the fruit type being queried. Note that 'fuits' might be a typo for 'fruits'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset011.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/* fruit=apple */ select 1 from fuits;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/* fruit=orange */ select 1 from fuits;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n/* fruit=pear */ select 1 from fuits;\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry with SELECT Statement\nDESCRIPTION: A slow query log entry showing a SELECT query executed from localhost with timing metrics. The log includes timestamp, client connection details, query execution time, lock time, and row statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow036.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 071218 11:48:27\n# Client: 127.0.0.1:12345\n# Query_time: 0.000000  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\nselect * from foo;\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Capture - MySQL Client Select Command\nDESCRIPTION: Network packet showing MySQL client sending a SELECT command to server on localhost port 3306\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump040.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-11-01 14:54:44.293137 IP 127.0.0.1.39640 > 127.0.0.1.3306: tcp 11\n\t0x0000:  4508 003f d741 4000 4006 656d 7f00 0001\n\t0x0010:  7f00 0001 9ad8 0cea 5554 0a1b 554a e601\n\t0x0020:  8018 0222 fe33 0000 0101 080a 0020 147c\n\t0x0030:  001f ac28 0700 0000 0373 656c 6563 74\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Data Packet\nDESCRIPTION: Server response containing the actual query result data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump025.txt#2025-04-22_snippet_4\n\nLANGUAGE: hex\nCODE:\n```\n4508 0074 97e3 4000 4006 a496 7f00 0001\\n7f00 0001 3039 bdc9 9c96 8a4e 9bdb f8e5\\n8018 0100 fe68 0000 0101 080a 0059 2162\\n0059 2162 0100 0001 011b 0000 0203 6465\\n6601 6401 7401 7401 6901 690c 3f00 0b00\\n0000 0300 0000 0000 0500 0003 fe00 0022\\n0006 0000 0400 0001 0000 0005 0000 05fe\\n0000 2200\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Privileges Table in MySQL\nDESCRIPTION: Establishes the 'host' table to define access control for host-level privileges, including permissions like select, insert, update, and delete, measured with binary enums ('N', 'Y'). This table plays a vital role in host-specific data rights management.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `host`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N'\n```\n\n----------------------------------------\n\nTITLE: Running Perl Tests in Percona Toolkit\nDESCRIPTION: Instructions to run tests for a specific program within the Percona Toolkit using the Perl 'prove' command. It includes options for verbosity and specific test selection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${HOME}/perldev/percona-toolkit\nprove -v t/pt-stalk/\n```\n\nLANGUAGE: Shell\nCODE:\n```\nprove -vw t/pt-stalk/\n```\n\nLANGUAGE: Shell\nCODE:\n```\nprove -v t/pt-stalk/option_sanity.t\n```\n\n----------------------------------------\n\nTITLE: Creating Sales by Store View in MySQL\nDESCRIPTION: Creates `sales_by_store` view, presenting total sales by store location. It joins tables such as `payment`, `rental`, `inventory`, `store`, `address`, `city`, `country`, and `staff`. The view aggregates sales data by store and orders it by country and city names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `sales_by_store*/;\n/*!50001 DROP VIEW IF EXISTS `sales_by_store*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `sales_by_store` AS select concat(`c`.`city`,_utf8',',`cy`.`country`) AS `store`,concat(`m`.`first_name`,_utf8' ',`m`.`last_name`) AS `manager`,sum(`p`.`amount`) AS `total_sales` from (((((((`payment` `p` join `rental` `r` on((`p`.`rental_id` = `r`.`rental_id`))) join `inventory` `i` on((`r`.`inventory_id` = `i`.`inventory_id`))) join `store` `s` on((`i`.`store_id` = `s`.`store_id`))) join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` `c` on((`a`.`city_id` = `c`.`city_id`))) join `country` `cy` on((`c`.`country_id` = `cy`.`country_id`))) join `staff` `m` on((`s`.`manager_staff_id` = `m`.`staff_id`))) group by `s`.`store_id` order by `cy`.`country`,`c`.`city` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Displaying Checksumming Results for Database Table\nDESCRIPTION: This snippet shows the output of a table checksumming operation, likely performed using a tool from Percona Toolkit. It displays various statistics for the 'test.ascii' table, including the number of errors, differences, rows, chunks, and skipped entries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/char-chunk-ascii.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nERRORS DIFFS ROWS CHUNKS SKIPPED TABLE\n0 0 142 10 0 test.ascii\n```\n\n----------------------------------------\n\nTITLE: Executing Complex SQL Query on MySQL Server\nDESCRIPTION: This SQL query selects data from multiple joined tables in the Facebook eCard system, filtering by initiated_by values and other conditions. It retrieves information about eCard groups, cards, products, and messages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump011.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect unix_timestamp(g.send_date) as date, g.id, g.initiated_by, c.intended_for, tp.product_image_link as img, m.message_text FROM fb_ecard_cards_group_new g INNER JOIN fb_ecard_cards_new c ON g.id=c.group_id INNER JOIN tproducts tp ON g.ecard_id=tp.id INNER JOIN fb_ecard_cards_msg_new m ON g.id=m.card_id WHERE g.initiated_by IN ('515577827','515577827','537184422','544527679','553382865','554427931','564105642','565959910','571043777','577983476','604999544','609746040','643634093','661092539','667324553','668273332','688353999','693931113','696600450','701437378','752783771','770064185','817899882','824434569','1000931732','1006207251','1013829282','1017582959','1032262938','1042647578','1051162344','1082477761','1092215949','1098651140','1098710570','1104291181','1107461983','1112016965','1118002393','1120207763','1126025674','1132718923','1133391346','1135254115','1137379498','1145835184','1160592233','1166883573','1169598408','1173121559','1181021018','1183771664','1186503654','1246595048','1258428520','1269725159','1283625851','1293538197','1301979928','1309119888','1320828517','1325201932','1350104223','1356804350','1357645161','1373764453','1379127659','1379868594','1381869552','1382316871','1386850304','1393351555','1406061345','1407249494','1409854946','1410232438','1416186904','1438796605','1440916951','1442795948','1447248104','1455833541','1457605782','1459993367','1467020705','1468279700','1468842824','1500035039','1510417352','1512554422','1524580576','1528555408','1531244078','1532587161','1534894918','1538166090','1543391617','1544587387','1551690993','1557592318','1582882357','1589115283','1617923001','1617979824','1634252954','1647176994') and g.send_date < now() AND g.private = 0 AND g.initiated_by NOT IN ('671574375','804269802','671152956') AND c.intended_for NOT IN ('671574375','804269802','671152956')\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variable for Maatkit Tools\nDESCRIPTION: Example showing how to enable verbose debugging output in Maatkit tools using the PTDEBUG environment variable\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_01.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPTDEBUG=1 mk-....\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Performance Using Percona Toolkit SQL\nDESCRIPTION: This SQL snippet is used to analyze performance metrics for the `two` table, providing execution and concurrency statistics. Dependencies include a table `two` existing in the database. The input is a table name, and the output is performance data for that specific query. It's limited by the accuracy of the Percona Toolkit and assumes SQL is version 5.1 or later for partition support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow049.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'two'\\G\nSHOW CREATE TABLE `two`\\G\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT two FROM two WHERE id=?\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with Performance Metrics\nDESCRIPTION: SELECT query with execution metrics showing query time of 0.000173 seconds, examining 18 rows and sending 4152 bytes. Includes metadata like thread ID, schema, and transaction ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow045.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET timestamp=1274159461;\nselect /*not for mqd*/ col from tbl;\n```\n\n----------------------------------------\n\nTITLE: Selecting Column from foo_tbl in foo Database\nDESCRIPTION: A simple SELECT query retrieving the 'col' column from the 'foo_tbl' table in the 'foo' database. This query was executed by the SQL_SLAVE user with an average execution time of 12μs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_5.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: Illustrating Harmless PodSecurityPolicy Deprecation Warning\nDESCRIPTION: This snippet shows an example warning message related to deprecated PodSecurityPolicy resources encountered when running `pt-k8s-debug-collector` on Kubernetes versions 1.21-1.24. The documentation clarifies that this specific warning is harmless, does not affect data collection, and can be safely ignored as the tool maintains backward compatibility.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n2022/12/15 17:43:16 Error: get resource podsecuritypolicies in namespace default: error: <nil>, stderr: Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+\n , stdout: apiVersion: v1\n    items: []\n    kind: List\n    metadata:\n      resourceVersion: \"\"\n```\n\n----------------------------------------\n\nTITLE: Examining MySQL Server Response Packet\nDESCRIPTION: This snippet displays the hexadecimal dump of a TCP packet sent from the MySQL server to the client, containing the server's response during the connection phase. It includes server version information and authentication data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump036.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0x0000:  4508 0079 07eb 4000 4006 348a 7f00 0001\n0x0010:  7f00 0001 0cea e222 0b4b fc65 0ab4 d3b6\n0x0020:  8018 0200 fe6d 0000 0101 080a 0034 fb8e\n0x0030:  0034 fb8e 4100 0000 0a35 2e30 2e36 372d\n0x0040:  3075 6275 6e74 7536 2d6c 6f67 0008 0000\n0x0050:  0058 4530 5e6c 2366 5c00 2ca2 0802 0000\n0x0060:  0000 0000 0000 0000 0000 0000 7762 6450\n0x0070:  4444 6759 6a29 2a36 00\n```\n\n----------------------------------------\n\nTITLE: Selecting Incremental Values from MySQL Table\nDESCRIPTION: This SQL query selects a single incremental value from a table named 'foo'. The query is repeated multiple times with different values, ranging from 1730 to 1779. Each query has associated performance metrics and user information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_32\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 1730 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Creating `mysql.db` Table in SQL\nDESCRIPTION: This SQL statement defines the schema for the `mysql.db` table, which stores database-level privileges granted to users. It lists various privilege types (Select, Insert, Update, etc.) as ENUM('N','Y') columns. The table uses the MyISAM storage engine with utf8 character set and collation. The primary key is a composite of Host, Db, and User, and there's an additional index on the User column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `db` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`,`User`),\n  KEY `User` (`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Test Table 'a' in SQL\nDESCRIPTION: This SQL snippet defines the structure of table 'a' with two columns: 'c1' and 'c2'. It requires a MySQL database server with permissions to create tables. Column 'c1' is a small integer with auto-increment, and 'c2' is a varchar of up to 45 characters. The auto-increment feature is used to automatically generate unique values for 'c1'. Both fields are mandatory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/multiple-files.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `a` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Table Creation with Indexed Char Columns\nDESCRIPTION: Creates a table t2 with character columns and partial key indexes on columns a and b\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ncreate table t2 (\na char(10),\nb char(10),\nfiller1 char(255),\nfiller2 char(255),\nkey(a(5)),\nkey(b(5))\n);\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Administrator Quit Command\nDESCRIPTION: This is an administrator command to quit the MySQL session. It has the lowest execution time among all queries and doesn't affect any rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nadministrator command: Quit\\G\n```\n\n----------------------------------------\n\nTITLE: Listing MySQL Related Processes via PS Command Output\nDESCRIPTION: This snippet shows the output of a process listing command (like `ps aux | grep mysqld`), displaying information about running MySQL server (`mysqld`), its safe wrapper (`mysqld_safe`), a related `logger` process, and the `grep` command itself. Key details include the user running the process, Process ID (PID), Parent Process ID (PPID), CPU usage (%), start time, terminal (TTY), cumulative CPU time (TIME), and the command with arguments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/ps-mysqld-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nroot     11524 28295  0 00:17 pts/1    00:00:00 grep mysqld\nmysql    14469 19521 74 Feb08 ?        79-20:57:40 /usr/sbin/mysqld --basedir=/ --datadir=/var/lib/mysql --user=mysql --pid-file=/var/lib/mysql/db1.pm.com.pid --skip-external-locking --socket=/var/lib/mysql/mysql.sock\nroot     14470 19521  0 Feb08 ?        00:00:00 logger -p daemon.err -t mysqld_safe -i -t mysqld\nroot     19521     1  0  2009 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe --datadir=/var/lib/mysql --pid-file=/var/lib/mysql/db1.pm.com.pid\n```\n\n----------------------------------------\n\nTITLE: Database Switch Command\nDESCRIPTION: SQL command for switching to database db2.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow011.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse db2;\n```\n\n----------------------------------------\n\nTITLE: Querying schema_table_statistics_with_buffer in MySQL\nDESCRIPTION: Demonstrates a sample query on the schema_table_statistics_with_buffer view, showing various statistics for a single table including row operations, I/O, and buffer pool usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_70\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_table_statistics_with_buffer limit 1\\G\n*************************** 1. row ***************************\n                 table_schema: mem\n                   table_name: mysqlserver\n                 rows_fetched: 27087\n                fetch_latency: 442.72 ms\n                rows_inserted: 2\n               insert_latency: 185.04 us\n                 rows_updated: 5096\n               update_latency: 1.39 s\n                 rows_deleted: 0\n               delete_latency: 0 ps\n             io_read_requests: 2565\n                io_read_bytes: 1121627\n              io_read_latency: 10.07 ms\n            io_write_requests: 1691\n               io_write_bytes: 128383\n             io_write_latency: 14.17 ms\n             io_misc_requests: 2698\n              io_misc_latency: 433.66 ms\n          innodb_buffer_pages: 19\n   innodb_buffer_pages_hashed: 19\n      innodb_buffer_pages_old: 19\ninnodb_buffer_bytes_allocated: 311296\n     innodb_buffer_bytes_data: 1924\n    innodb_buffer_rows_cached: 2\n```\n\n----------------------------------------\n\nTITLE: List Command Usage - Bash\nDESCRIPTION: Shows how to use the list command to view key events chronologically from Galera logs with various filtering options\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer [flags] list { --all | [--states] [--views] [--events] [--sst] [--applicative] } <paths ...>\n```\n\n----------------------------------------\n\nTITLE: Listing tmpfs Mount Points and Configurations\nDESCRIPTION: Configuration details for multiple tmpfs mounts showing filesystem type, size, mount options, and paths. The entries include various security settings like SELinux labels, file modes, user/group IDs, and access permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntmpfs                       19G   0% tmpfs    rw,relatime,seclabel,size=1024k,mode=700                                                                                                                                                                                                                                                                                                                                                                       /run/user/10125\ntmpfs                       19G   0% tmpfs    rw,nosuid,nodev,seclabel                                                                                                                                                                                                                                                                                                                                                                       /run/user/10201\ntmpfs                       19G   0% tmpfs    rw,nosuid,nodev,seclabel,mode=755                                                                                                                                                                                                                                                                                                                                                              /run/user/10201\n```\n\n----------------------------------------\n\nTITLE: Checking Account Enabled Status Using ps_is_account_enabled in MySQL\nDESCRIPTION: Example showing how to check if an account is enabled for instrumentation within Performance Schema using the sys.ps_is_account_enabled() function. The function takes hostname and username parameters and returns 'YES' or 'NO'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_124\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_account_enabled('localhost', 'root');\n+------------------------------------------------+\n| sys.ps_is_account_enabled('localhost', 'root') |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: SQL Select Query Equivalent\nDESCRIPTION: The equivalent SELECT query showing the data being modified by the UPDATE statement, joining tuningdetail table with gonzo table to compare column values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/json/slow002.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect  n.column1 = a.column1, n.word3 = a.word3 from db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo)\n```\n\n----------------------------------------\n\nTITLE: Dropping Duplicate Index in MySQL Table - SQL\nDESCRIPTION: Removes an unnecessary duplicate index 'A' from the table 'test.UPPER_TEST' to optimize index usage. Requires access to an existing MySQL instance and the 'test.UPPER_TEST' table schema as described. The 'ALTER TABLE' statement drops the redundant index, assuming the column 'A' is already covered by the PRIMARY KEY. No input parameters are needed. The command should be executed with caution, as it will affect the table's index structure. The output is an altered table schema with the duplicate index removed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/uppercase_names.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `test`.`UPPER_TEST` DROP INDEX `A`;\n```\n\n----------------------------------------\n\nTITLE: Index Summary Header Comments\nDESCRIPTION: Header comment block that introduces a section for displaying database index summary information. Indicates that the total number of indexes is 2.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/issue_269.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ########################################################################\n# Summary of indexes                                                      \n# ########################################################################\n\n# Total Indexes  2\n```\n\n----------------------------------------\n\nTITLE: Replacing into Table 't' using SELECT DUAL in SQL\nDESCRIPTION: This snippet demonstrates a REPLACE operation into table 't'. Similar to INSERT, the values are potentially derived from `SELECT DUAL`. REPLACE works like INSERT, but if an old row has the same value as a new row for a PRIMARY KEY or UNIQUE index, the old row is deleted before the new row is inserted. The surrounding text provides a unique identifier `Query_id: 0xEEA372545CD429D8EB871CD2B5729EA1.1`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow001.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE t\nSELECT DUAL\n```\n\n----------------------------------------\n\nTITLE: Managing User Grants in MySQL - SQL\nDESCRIPTION: Defines a database user 'sally' with access from any host ('%'), sets up her authentication scheme to use native MySQL passwords with no extra requirements, and grants her specific INSERT and SELECT permissions on certain columns in the 'sakila' and 'test' databases. Assumes an existing MySQL database instance and that appropriate administrative privileges are available to execute these commands. The main parameters are the username/host combination and column-level privileges for involved tables. The input is executed directly as SQL statements; the output is a modified privilege set for the specified user. No checks or constraints beyond what MySQL enforces are implemented.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-separate-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS 'sally'@'%';\nALTER USER 'sally'@'%' IDENTIFIED WITH 'mysql_native_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK;\nGRANT INSERT (city) ON `sakila`.`city` TO 'sally'@'%';\nGRANT SELECT (DateCreated, PaymentStat, PckPrice, SANumber) ON `test`.`t` TO 'sally'@'%';\nGRANT SELECT (city_id) ON `sakila`.`city` TO 'sally'@'%';\nGRANT USAGE ON *.* TO 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: SQL Mode Setting Example\nDESCRIPTION: SQL query attribute demonstrating the usage of SQL_NO_CACHE in pt-stalk for queries related to locks and transactions\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSQL_NO_CACHE\n```\n\n----------------------------------------\n\nTITLE: Setting Key Buffer Size in MySQL\nDESCRIPTION: Defines the size of the buffer used for index blocks in MyISAM tables. Increasing this value can improve index handling for reads and multiple writes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n--key_buffer_size=# \n```\n\n----------------------------------------\n\nTITLE: Displaying BIOS Information in Plaintext\nDESCRIPTION: This snippet provides detailed information about the system BIOS, including vendor, version, release date, and various supported features and characteristics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-006.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0000, DMI type 0, 24 bytes\nBIOS Information\n        Vendor: Intel Corp.\n        Version: WYLPT10H.86A.0027.2014.0710.1904\n        Release Date: 07/10/2014\n        Address: 0xF0000\n        Runtime Size: 64 kB\n        ROM Size: 6656 kB\n        Characteristics:\n                PCI is supported\n                BIOS is upgradeable\n                BIOS shadowing is allowed\n                Boot from CD is supported\n                Selectable boot is supported\n                BIOS ROM is socketed\n                EDD is supported\n                5.25\"/1.2 MB floppy services are supported (int 13h)\n                3.5\"/720 kB floppy services are supported (int 13h)\n                3.5\"/2.88 MB floppy services are supported (int 13h)\n                Print screen service is supported (int 5h)\n                Serial services are supported (int 14h)\n                Printer services are supported (int 17h)\n                ACPI is supported\n                USB legacy is supported\n                BIOS boot specification is supported\n                Targeted content distribution is supported\n                UEFI is supported\n        BIOS Revision: 4.6\n```\n\n----------------------------------------\n\nTITLE: Dropping Non-Unique Index from Sakila Database Table in SQL\nDESCRIPTION: This SQL command removes the non-unique index 'idx_title_description' from the 'film_text' table in the 'sakila' database. It's used to modify the table structure, potentially for performance optimization or schema changes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow001-report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `sakila`.`film_text` DROP KEY `idx_title_description`; -- type:non-unique\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT VALUES Statement with User-Item Timestamps\nDESCRIPTION: A portion of an SQL INSERT VALUES statement containing user IDs, item IDs, and timestamp data. Each tuple consists of what appears to be a user ID, an item ID, and a timestamp in the format 'YYYY-MM-DD HH:MM:SS' from February 15, 2006.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n(198,858,'2006-02-15 10:05:03'),(198,871,'2006-02-15 10:05:03'),(198,886,'2006-02-15 10:05:03'),(198,892,'2006-02-15 10:05:03'),(198,924,'2006-02-15 10:05:03'),(198,952,'2006-02-15 10:05:03'),(198,997,'2006-02-15 10:05:03'),(199,67,'2006-02-15 10:05:03'),(199,84,'2006-02-15 10:05:03'),(199,145,'2006-02-15 10:05:03'),(199,159,'2006-02-15 10:05:03'),(199,216,'2006-02-15 10:05:03'),(199,432,'2006-02-15 10:05:03'),(199,541,'2006-02-15 10:05:03'),(199,604,'2006-02-15 10:05:03'),(199,640,'2006-02-15 10:05:03'),(199,689,'2006-02-15 10:05:03'),(199,730,'2006-02-15 10:05:03'),(199,784,'2006-02-15 10:05:03'),(199,785,'2006-02-15 10:05:03'),(199,886,'2006-02-15 10:05:03'),(199,953,'2006-02-15 10:05:03'),(200,5,'2006-02-15 10:05:03'),(200,49,'2006-02-15 10:05:03'),(200,80,'2006-02-15 10:05:03'),(200,116,'2006-02-15 10:05:03'),(200,121,'2006-02-15 10:05:03'),(200,149,'2006-02-15 10:05:03'),(200,346,'2006-02-15 10:05:03'),(200,419,'2006-02-15 10:05:03'),(200,462,'2006-02-15 10:05:03'),(200,465,'2006-02-15 10:05:03'),(200,474,'2006-02-15 10:05:03'),(200,537,'2006-02-15 10:05:03'),(200,538,'2006-02-15 10:05:03'),(200,544,'2006-02-15 10:05:03'),(200,714,'2006-02-15 10:05:03'),(200,879,'2006-02-15 10:05:03'),(200,912,'2006-02-15 10:05:03'),(200,945,'2006-02-15 10:05:03'),(200,958,'2006-02-15 10:05:03'),(200,993,'2006-02-15 10:05:03');\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Server Crash and Memory Usage\nDESCRIPTION: This snippet provides information about a MySQL server crash, including potential causes and memory usage calculations. It details key buffer sizes and connection information to help diagnose the issue.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog004.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nkey_buffer_size=67108864\nread_buffer_size=131072\nmax_used_connections=2\nmax_threads=128\nthreads_connected=2\nIt is possible that mysqld could use up to \nkey_buffer_size + (read_buffer_size + sort_buffer_size)*max_threads = 345366 K\nbytes of memory\nHope that's ok; if not, decrease some variables in the equation.\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Query Performance\nDESCRIPTION: This snippet shows a detailed performance analysis of a MySQL query, including execution time, lock time, rows affected, and query size. It also provides information about the database, user, and query time distribution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-yyyy-mm-dd.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Host Connection Configuration (plaintext)\nDESCRIPTION: Defines connection parameters for two distinct database hosts (host1 and host2). Each host entry specifies a Data Source Name (DSN) including the host address ('h') and port ('P'), along with placeholders for hostname and MySQL details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/007/null.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhost1:\n\n  DSN:       h=127.1,P=12345\n  hostname:  ...\n  MySQL:     ...\n\nhost2:\n\n  DSN:       h=127.1,P=12348\n  hostname:  ...\n  MySQL:     ...\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL schema_object_overview Example\nDESCRIPTION: Example query showing the output of schema_object_overview with a count of different database object types across schemas. Note that this query may be resource-intensive on large databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_53\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_object_overview;\n+--------------------+---------------+-------+\n| db                 | object_type   | count |\n+--------------------+---------------+-------+\n| information_schema | SYSTEM VIEW   |    60 |\n| mysql              | BASE TABLE    |    31 |\n| mysql              | INDEX (BTREE) |    69 |\n| performance_schema | BASE TABLE    |    76 |\n| sys                | BASE TABLE    |     1 |\n| sys                | FUNCTION      |    12 |\n| sys                | INDEX (BTREE) |     1 |\n| sys                | PROCEDURE     |    22 |\n| sys                | TRIGGER       |     2 |\n| sys                | VIEW          |    91 |\n+--------------------+---------------+-------+\n10 rows in set (1.58 sec)\n```\n\n----------------------------------------\n\nTITLE: Updating User Room Details - MySQL\nDESCRIPTION: This SQL update query modifies the 'here', 'date', and 'level' of a user's room entry in 'users_rooms', identified by 'userid'. This requires the 'users_rooms' table to have the respective fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE users_rooms SET here=4502, date=UNIX_TIMESTAMP(), level='56' WHERE userid=1623270\n```\n\n----------------------------------------\n\nTITLE: Describing user_summary and x$user_summary Table Structures in MySQL\nDESCRIPTION: Shows the structure of user_summary and x$user_summary tables, which contain aggregated user performance metrics. These tables include fields for statement counts, latencies, file I/O statistics, connection counts, and memory usage per MySQL user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_91\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary;\n+------------------------+---------------+------+-----+---------+-------+\n| Field                  | Type          | Null | Key | Default | Extra |\n+------------------------+---------------+------+-----+---------+-------+\n| user                   | varchar(32)   | YES  |     | NULL    |       |\n| statements             | decimal(64,0) | YES  |     | NULL    |       |\n| statement_latency      | text          | YES  |     | NULL    |       |\n| statement_avg_latency  | text          | YES  |     | NULL    |       |\n| table_scans            | decimal(65,0) | YES  |     | NULL    |       |\n| file_ios               | decimal(64,0) | YES  |     | NULL    |       |\n| file_io_latency        | text          | YES  |     | NULL    |       |\n| current_connections    | decimal(41,0) | YES  |     | NULL    |       |\n| total_connections      | decimal(41,0) | YES  |     | NULL    |       |\n| unique_hosts           | bigint(21)    | NO   |     | 0       |       |\n| current_memory         | text          | YES  |     | NULL    |       |\n| total_memory_allocated | text          | YES  |     | NULL    |       |\n+------------------------+---------------+------+-----+---------+-------+\n12 rows in set (0.00 sec)\n\nmysql> desc x$user_summary;\n+------------------------+---------------+------+-----+---------+-------+\n| Field                  | Type          | Null | Key | Default | Extra |\n+------------------------+---------------+------+-----+---------+-------+\n| user                   | varchar(32)   | YES  |     | NULL    |       |\n| statements             | decimal(64,0) | YES  |     | NULL    |       |\n| statement_latency      | decimal(64,0) | YES  |     | NULL    |       |\n| statement_avg_latency  | decimal(65,4) | NO   |     | 0.0000  |       |\n| table_scans            | decimal(65,0) | YES  |     | NULL    |       |\n| file_ios               | decimal(64,0) | YES  |     | NULL    |       |\n| file_io_latency        | decimal(64,0) | YES  |     | NULL    |       |\n| current_connections    | decimal(41,0) | YES  |     | NULL    |       |\n| total_connections      | decimal(41,0) | YES  |     | NULL    |       |\n| unique_hosts           | bigint(21)    | NO   |     | 0       |       |\n| current_memory         | decimal(63,0) | YES  |     | NULL    |       |\n| total_memory_allocated | decimal(64,0) | YES  |     | NULL    |       |\n+------------------------+---------------+------+-----+---------+-------+\n12 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Defining plugin Table (Partial) in SQL\nDESCRIPTION: Begins the creation of the `plugin` table within the `mysql` database. This table is intended to store information about server plugins that are installed. The provided snippet only defines the `name` column for the plugin. The full definition would likely include other metadata like status or library file. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `plugin` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from 'foo' Table in MySQL\nDESCRIPTION: This SQL query selects all records from the 'foo' table. It is executed multiple times across different databases and time periods, with consistent performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30s.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Initializing Transaction in MySQL\nDESCRIPTION: Starts a new transaction in MySQL. This is typically used to group multiple SQL operations into a single atomic unit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN;\n```\n\n----------------------------------------\n\nTITLE: MySQL SELECT Query with Mixed ASC Syntax 2\nDESCRIPTION: Retrieves all products ordered by name (implicit ASC) and shape (explicit ASC) in ascending order.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow048.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `products` ORDER BY name, shape asc;\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Request Packet\nDESCRIPTION: Client request packet containing 'SHOW DATABASES' command sent from 10.54.212.171:49663 to MySQL server 10.55.200.15:3306\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump014.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 004e 266f 4000 3e06 650b 0a36 d4ab\n0a37 c80f c1ff 0cea 3a17 3786 3927 f142\n8018 ffff d5a3 0000 0101 080a 22f5 83d3\n40e0 fd21 1300 0000 0000 000f 0000 0003\n7368 6f77 2064 6174 6162 6173 6573 188d\n06f4\n```\n\n----------------------------------------\n\nTITLE: Querying Wait Classes by Average Latency in MySQL\nDESCRIPTION: Example query showing wait classes ordered by average latency, excluding idle events, with metrics for total counts and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_97\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from wait_classes_global_by_avg_latency where event_class != 'idle';\n```\n\n----------------------------------------\n\nTITLE: Describing SQL Tables with Temporary Tables\nDESCRIPTION: This snippet details the structure of `statements_with_temp_tables`, which includes fields like `query`, `exec_count`, and `total_latency`. It is primarily used for analyzing SQL statements that use temporary tables, highlighting their memory and disk behavior.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_83\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_temp_tables;\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| Field                    | Type                | Null | Key | Default             | Extra |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| query                    | longtext            | YES  |     | NULL                |       |\n| db                       | varchar(64)         | YES  |     | NULL                |       |\n| exec_count               | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency            | text                | YES  |     | NULL                |       |\n| memory_tmp_tables        | bigint(20) unsigned | NO   |     | NULL                |       |\n| disk_tmp_tables          | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_tmp_tables_per_query | decimal(21,0)       | NO   |     | 0                   |       |\n| tmp_tables_to_disk_pct   | decimal(24,0)       | NO   |     | 0                   |       |\n| first_seen               | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen                | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest                   | varchar(32)         | YES  |     | NULL                |       |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n11 rows in set (0.30 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$statements_with_temp_tables;\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| Field                    | Type                | Null | Key | Default             | Extra |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| query                    | longtext            | YES  |     | NULL                |       |\n| db                       | varchar(64)         | YES  |     | NULL                |       |\n| exec_count               | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency            | bigint(20) unsigned | NO   |     | NULL                |       |\n| memory_tmp_tables        | bigint(20) unsigned | NO   |     | NULL                |       |\n| disk_tmp_tables          | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_tmp_tables_per_query | decimal(21,0)       | NO   |     | 0                   |       |\n| tmp_tables_to_disk_pct   | decimal(24,0)       | NO   |     | 0                   |       |\n| first_seen               | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen                | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest                   | varchar(32)         | YES  |     | NULL                |       |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n11 rows in set (0.05 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'time_zone' Table\nDESCRIPTION: Drops the existing `time_zone` table if it exists and then creates it. This table stores basic time zone information, including a unique ID and whether leap seconds are used. It uses the MyISAM engine and the utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Table structure for table `time_zone`\n--\n\nDROP TABLE IF EXISTS `time_zone`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux Disk I/O Statistics with Timestamps\nDESCRIPTION: This output shows disk performance metrics from the Linux /proc filesystem, collected at regular intervals with timestamps. Each row represents a device with columns showing major/minor device numbers, device name, and various I/O statistics including reads/writes completed, sectors read/written, and time spent on I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n 253    3 dm-3 39108 0 317138 171804 76791397 0 614331176 174357398 0 6519480 174576802\n 253    4 dm-4 4462420 0 101415522 11644533 30110879 0 240887032 29641962 0 8894649 41287596\n 253    5 dm-5 652603 0 18833426 916973 6500866 0 52006928 4317032 0 2440835 5234205\n 253    6 dm-6 444430083 0 51182351338 795935257 496946085 0 12885040288 119566976 0 583872980 915518335\n  11    0 sr0 0 0 0 0 0 0 0 0 0 0 0\n   8   48 sdd 0 0 0 0 0 0 0 0 0 0 0\n  11    1 sr1 0 0 0 0 0 0 0 0 0 0 0\n   9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998376 6091475836 49403813272 2173805774 0 919421207 3016071477\nTS 1283888705.370218000\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT Statements with Timestamp Data\nDESCRIPTION: SQL INSERT statements adding records with user IDs and timestamps to a database table. All timestamps are set to '2006-02-15 10:05:03', suggesting this is test data or a data migration script.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n0:05:03'),(176,162,'2006-02-15 10:05:03'),(176,238,'2006-02-15 10:05:03'),(176,252,'2006-02-15 10:05:03'),(176,303,'2006-02-15 10:05:03'),(176,320,'2006-02-15 10:05:03'),(176,401,'2006-02-15 10:05:03'),(176,417,'2006-02-15 10:05:03'),(176,441,'2006-02-15 10:05:03'),(176,458,'2006-02-15 10:05:03'),(176,461,'2006-02-15 10:05:03'),(176,517,'2006-02-15 10:05:03'),(176,521,'2006-02-15 10:05:03'),(176,543,'2006-02-15 10:05:03'),(176,573,'2006-02-15 10:05:03'),(176,699,'2006-02-15 10:05:03'),(176,726,'2006-02-15 10:05:03'),(176,740,'2006-02-15 10:05:03'),(176,746,'2006-02-15 10:05:03'),(176,758,'2006-02-15 10:05:03'),(176,802,'2006-02-15 10:05:03'),(176,827,'2006-02-15 10:05:03'),(176,839,'2006-02-15 10:05:03'),(176,859,'2006-02-15 10:05:03'),(176,872,'2006-02-15 10:05:03'),(176,946,'2006-02-15 10:05:03'),(177,12,'2006-02-15 10:05:03'),(177,39,'2006-02-15 10:05:03'),(177,52,'2006-02-15 10:05:03'),(177,55,'2006-02-15 10:05:03'),(177,86,'2006-02-15 10:05:03'),(177,175,'2006-02-15 10:05:03'),(177,188,'2006-02-15 10:05:03'),(177,235,'2006-02-15 10:05:03'),(177,237,'2006-02-15 10:05:03'),(177,289,'2006-02-15 10:05:03'),(177,363,'2006-02-15 10:05:03'),(177,401,'2006-02-15 10:05:03'),(177,433,'2006-02-15 10:05:03'),(177,458,'2006-02-15 10:05:03'),(177,522,'2006-02-15 10:05:03'),(177,543,'2006-02-15 10:05:03'),(177,563,'2006-02-15 10:05:03'),(177,649,'2006-02-15 10:05:03'),(177,683,'2006-02-15 10:05:03'),(177,684,'2006-02-15 10:05:03'),(177,726,'2006-02-15 10:05:03'),(177,751,'2006-02-15 10:05:03'),(177,763,'2006-02-15 10:05:03'),(177,764,'2006-02-15 10:05:03'),(177,827,'2006-02-15 10:05:03'),(177,910,'2006-02-15 10:05:03'),(177,956,'2006-02-15 10:05:03'),(178,30,'2006-02-15 10:05:03'),(178,34,'2006-02-15 10:05:03'),(178,109,'2006-02-15 10:05:03'),(178,146,'2006-02-15 10:05:03'),(178,160,'2006-02-15 10:05:03'),(178,164,'2006-02-15 10:05:03'),(178,194,'2006-02-15 10:05:03'),(178,197,'2006-02-15 10:05:03'),(178,273,'2006-02-15 10:05:03'),(178,311,'2006-02-15 10:05:03'),(178,397,'2006-02-15 10:05:03'),(178,483,'2006-02-15 10:05:03'),(178,517,'2006-02-15 10:05:03'),(178,537,'2006-02-15 10:05:03'),(178,587,'2006-02-15 10:05:03'),(178,708,'2006-02-15 10:05:03'),(178,733,'2006-02-15 10:05:03'),(178,744,'2006-02-15 10:05:03'),(178,762,'2006-02-15 10:05:03'),(178,930,'2006-02-15 10:05:03'),(178,974,'2006-02-15 10:05:03'),(178,983,'2006-02-15 10:05:03'),(178,1000,'2006-02-15 10:05:03'),(179,24,'2006-02-15 10:05:03'),(179,27,'2006-02-15 10:05:03'),(179,65,'2006-02-15 10:05:03'),(179,85,'2006-02-15 10:05:03'),(179,109,'2006-02-15 10:05:03'),(179,131,'2006-02-15 10:05:03'),(179,159,'2006-02-15 10:05:03'),(179,193,'2006-02-15 10:05:03'),(179,250,'2006-02-15 10:05:03'),(179,291,'2006-02-15 10:05:03'),(179,353,'2006-02-15 10:05:03'),(179,415,'2006-02-15 10:05:03'),(179,463,'2006-02-15 10:05:03'),(179,468,'2006-02-15 10:05:03'),(179,489,'2006-02-15 10:05:03'),(179,566,'2006-02-15 10:05:03'),(179,588,'2006-02-15 10:05:03'),(179,650,'2006-02-15 10:05:03'),(179,698,'2006-02-15 10:05:03'),(179,732,'2006-02-15 10:05:03'),(179,737,'2006-02-15 10:05:03'),(179,769,'2006-02-15 10:05:03'),(179,811,'2006-02-15 10:05:03'),(179,817,'2006-02-15 10:05:03'),(179,852,'2006-02-15 10:05:03'),(179,924,'2006-02-15 10:05:03'),(179,931,'2006-02-15 10:05:03'),(179,960,'2006-02-15 10:05:03'),(179,976,'2006-02-15 10:05:03'),(180,12,'2006-02-15 10:05:03'),(180,33,'2006-02-15 10:05:03'),(180,144,'2006-02-15 10:05:03'),(180,195,'2006-02-15 10:05:03'),(180,258,'2006-02-15 10:05:03'),(180,441,'2006-02-15 10:05:03'),(180,506,'2006-02-15 10:05:03'),(180,561,'2006-02-15 10:05:03'),(180,609,'2006-02-15 10:05:03'),(180,622,'2006-02-15 10:05:03'),(180,628,'2006-02-15 10:05:03'),(180,657,'2006-02-15 10:05:03'),(180,724,'2006-02-15 10:05:03'),(180,729,'2006-02-15 10:05:03'),(180,732,'2006-02-15 10:05:03'),(180,777,'2006-02-15 10:05:03'),(180,809,'2006-02-15 10:05:03'),(180,811,'2006-02-15 10:05:03'),(180,820,'2006-02-15 10:05:03'),(180,824,'2006-02-15 10:05:03'),(180,847,'2006-02-15 10:05:03'),(180,869,'2006-02-15 10:05:03'),(180,874,'2006-02-15 10:05:03'),(180,955,'2006-02-15 10:05:03'),(180,963,'2006-02-15 10:05:03'),(181,5,'2006-02-15 10:05:03'),(181,40,'2006-02-15 10:05:03'),(181,74,'2006-02-15 10:05:03'),(181,78,'2006-02-15 10:05:03'),(181,83,'2006-02-15 10:05:03'),(181,152,'2006-02-15 10:05:03'),(181,195,'2006-02-15 10:05:03'),(181,233,'2006-02-15 10:05:03'),(181,286,'2006-02-15 10:05:03'),(181,301,'2006-02-15 10:05:03'),(181,311,'2006-02-15 10:05:03'),(181,381,'2006-02-15 10:05:03'),(181,387,'2006-02-15 10:05:03'),(181,403,'2006-02-15 10:05:03'),(181,409,'2006-02-15 10:05:03'),(181,420,'2006-02-15 10:05:03'),(181,437,'2006-02-15 10:05:03'),(181,456,'2006-02-15 10:05:03'),(181,507,'2006-02-15 10:05:03'),(181,522,'2006-02-15 10:05:03'),(181,539,'2006-02-15 10:05:03'),(181,542,'2006-02-15 10:05:03'),(181,546,'2006-02-15 10:05:03'),(181,579,'2006-02-15 10:05:03'),(181,596,'2006-02-15 10:05:03'),(181,604,'2006-02-15 10:05:03'),(181,609,'2006-02-15 10:05:03'),(181,625,'2006-02-15 10:05:03'),(181,744,'2006-02-15 10:05:03'),(181,816,'2006-02-15 10:05:03'),(181,836,'2006-02-15 10:05:03'),(181,868,'2006-02-15 10:05:03'),(181,870,'2006-02-15 10:05:03'),(181,874,'2006-02-15 10:05:03'),(181,892,'2006-02-15 10:05:03'),(181,907,'2006-02-15 10:05:03'),(181,911,'2006-02-15 10:05:03'),(181,921,'2006-02-15 10:05:03'),(181,991,'2006-02-15 10:05:03'),(182,33,'2006-02-15 10:05:03'),(182,160,'2006-02-15 10:05:03'),(182,301,'2006-02-15 10:05:03'),(182,324,'2006-02-15 10:05:03'),(182,346,'2006-02-15 10:05:03'),(182,362,'2006-02-15 10:05:03'),(182,391,'2006-02-15 10:05:03'),(182,413,'2006-02-15 10:05:03'),(182,421,'2006-02-15 10:05:03'),(182,437,'2006-02-15 10:05:03'),(182,590,'2006-02-15 10:05:03'),(182,639,'2006-02-15 10:05:03'),(182,668,'2006-02-15 10:05:03'),(182,677,'2006-02-15 10:05:03'),(182,679,'2006-02-15 10:05:03'),(182,695,'2006-02-15 10:05:03'),(182,714,'2006-02-15 10:05:03'),(182,720,'2006-02-15 10:05:03'),(182,819,'2006-02-15 10:05:03'),(182,828,'2006-02-15 10:05:03'),(182,845,'2006-02-15 10:05:03'),(182,864,'2006-02-15 10:05:03'),(182,940,'2006-02-15 10:05:03'),(182,990,'2006-02-15 10:05:03'),(183,32,'2006-02-15 10:05:03'),(183,40,'2006-02-15 10:05:03'),(183,71,'2006-02-15 10:05:03'),(183,113,'2006-02-15 10:05:03'),(183,313,'2006-02-15 10:05:03'),(183,388,'2006-02-15 10:05:03'),(183,389,'2006-02-15 10:05:03'),(183,390,'2006-02-15 10:05:03'),(183,495,'2006-02-15 10:05:03'),(183,520,'2006-02-15 10:05:03'),(183,576,'2006-02-15 10:05:03'),(183,636,'2006-02-15 10:05:03'),(183,715,'2006-02-15 10:05:03'),(183,850,'2006-02-15 10:05:03'),(183,862,'2006-02-15 10:05:03'),(183,914,'2006-02-15 10:05:03'),(183,941,'2006-02-15 10:05:03'),(183,949,'2006-02-15 10:05:03'),(183,983,'2006-02-15 10:05:03'),(184,35,'2006-02-15 10:05:03'),(184,87,'2006-02-15 10:05:03'),(184,146,'2006-02-15 10:05:03'),(184,169,'2006-02-15 10:05:03'),(184,221,'2006-02-15 10:05:03'),(184,336,'2006-02-15 10:05:03'),(184,371,'2006-02-15 10:05:03'),(184,452,'2006-02-15 10:05:03'),(184,486,'2006-02-15 10:05:03'),(184,492,'2006-02-15 10:05:03'),(184,500,'2006-02-15 10:05:03'),(184,574,'2006-02-15 10:05:03'),(184,580,'2006-02-15 10:05:03'),(184,597,'2006-02-15 10:05:03'),(184,615,'2006-02-15 10:05:03'),(184,640,'2006-02-15 10:05:03'),(184,642,'2006-02-15 10:05:03'),(184,650,'2006-02-15 10:05:03'),(184,661,'2006-02-15 10:05:03'),(184,684,'2006-02-15 10:05:03'),(184,745,'2006-02-15 10:05:03'),(184,772,'2006-02-15 10:05:03'),(184,787,'2006-02-15 10:05:03'),(184,867,'2006-02-15 10:05:03'),(184,959,'2006-02-15 10:05:03'),(184,966,'2006-02-15 10:05:03'),(184,967,'2006-02-15 10:05:03'),(184,969,'2006-02-15 10:05:03'),(184,985,'2006-02-15 10:05:03'),(185,7,'2006-02-15 10:05:03'),(185,95,'2006-02-15 10:05:03'),(185,138,'2006-02-15 10:05:03'),(185,265,'2006-02-15 10:05:03'),(185,286,'2006-02-15 10:05:03'),(185,360,'2006-02-15 10:05:03'),(185,411,'2006-02-15 10:05:03'),(185,427,'2006-02-15 10:05:03'),(185,437,'2006-02-15 10:05:03'),(185,448,'2006-02-15 10:05:03'),(185,494,'2006-02-15 10:05:03'),(185,510,'2006-02-15 10:05:03'),(185,518,'2006-02-15 10:05:03'),(185,554,'2006-02-15 10:05:03'),(185,560,'2006-02-15 10:05:03'),(185,571,'2006-02-15 10:05:03'),(185,584,'2006-02-15 10:05:03'),(185,631,'2006-02-15 10:05:03'),(185,665,'2006-02-15 10:05:03'),(185,694,'2006-02-15 10:05:03'),(185,730,'2006-02-15 10:05:03'),(185,761,'2006-02-15 10:05:03'),(185,818,'2006-02-15 10:05:03'),(185,845,'2006-02-15 10:05:03'),(185,880,'2006-02-15 10:05:03'),(185,882,'2006-02-15 10:05:03'),(185,919,'2006-02-15 10:05:03'),(185,920,'2006-02-15 10:05:03'),(185,965,'2006-02-15 10:05:03'),(185,973,'2006-02-15 10:05:03'),(186,95,'2006-02-15 10:05:03'),(186,187,'2006-02-15 10:05:03'),(186,208,'2006-02-15 10:05:03'),(186,228,'2006-02-15 10:05:03'),(186,237,'2006-02-15 10:05:03'),(186,422,'2006-02-15 10:05:03'),(186,482,'2006-02-15 10:05:03'),(186,508,'2006-02-15 10:05:03'),(186,552,'2006-02-15 10:05:03'),(186,579,'2006-02-15 10:05:03'),(186,637,'2006-02-15 10:05:03'),(186,648,'2006-02-15 10:05:03'),(186,654,'2006-02-15 10:05:03'),(186,729,'2006-02-15 10:05:03'),(186,983,'2006-02-15 10:05:03'),(186,994,'2006-02-15 10:05:03'),(187,17,'2006-02-15 10:05:03'),(187,25,'2006-02-15 10:05:03'),(187,29,'2006-02-15 10:05:03'),(187,51,'2006-02-15 10:05:03'),(187,73,'2006-02-15 10:05:03'),(187,76,'2006-02-15 10:05:03'),(187,98,'2006-02-15 10:05:03'),(187,110,'2006-02-15 10:05:03'),(187,127,'2006-02-15 10:05:03'),(187,168,'2006-02-15 10:05:03'),(187,222,'2006-02-15 10:05:03'),(187,224,'2006-02-15 10:05:03'),(187,297,'2006-02-15 10:05:03'),(187,354,'2006-02-15 10:05:03'),(187,379,'2006-02-15 10:05:03'),(187,417,'2006-02-15 10:05:03'),(187,435,'2006-02-15 10:05:03'),(187,441,'2006-02-15 10:05:03'),(187,474,'2006-02-15 10:05:03'),(187,499,'2006-02-15 10:05:03'),(187,538,'2006-02-15 10:05:03'),(187,548,'2006-02-15 10:05:03'),(187,561,'2006-02-15 10:05:03'),(187,617,'2006-02-15 10:05:03'),(187,625,'2006-02-15 10:05:03'),(187,664,'2006-02-15 10:05:03'),(187,671,'2006-02-15 10:05:03'),(187,768,\n```\n\n----------------------------------------\n\nTITLE: MySQL Network Connection Status\nDESCRIPTION: Output from netstat or ss command showing TCP connections to MySQL servers. Lists connections to port 3306 with their current states, including established connections and connections in TIME_WAIT state. Shows connections between multiple hosts with process IDs for mysqld.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp        0      0 10.17.85.70:3306            10.14.82.200:56338          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:48129           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.17.85.88:35599           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.17.85.86:46336           TIME_WAIT   -\n```\n\n----------------------------------------\n\nTITLE: Query Performance Report Output\nDESCRIPTION: Detailed performance statistics for a single query execution. Shows execution time, lock time, rows processed, and other key metrics. Query was executed on 2007-10-15 with 2s execution time and minimal resource usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow010_reportbyfile.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Item 1: 0 QPS, 0x concurrency, ID 0x38D5CD7BAB40E2BDE0976A52E15A18AC at byte 0\n# This item is included in the report because it matches --limit.\n# Scores: V/M = 0.00\n# Time range: all events occurred at 2007-10-15 21:43:52\n# Attribute    pct   total     min     max     avg     95%  stddev  median\n# ============ === ======= ======= ======= ======= ======= ======= =======\n# Count        100       1\n# Exec time    100      2s      2s      2s      2s      2s       0      2s\n# Lock time      0       0       0       0       0       0       0       0\n# Rows sent    100       1       1       1       1       1       0       1\n# Rows examine   0       0       0       0       0       0       0       0\n# Query size   100      91      91      91      91      91       0      91\n# line         100     417     417     417     417     417       0     417\n# String:\n# Hosts        localhost\n# url          d217d035a34ac9e693b41d4c2&limit=500&offset=0\n# Users        root\n# Query_time distribution\n#   1us\n#  10us\n# 100us\n#   1ms\n#  10ms\n# 100ms\n#    1s  ################################################################\n#  10s+\n```\n\n----------------------------------------\n\nTITLE: MySQL Administrator Quit Command\nDESCRIPTION: Administrator quit command with performance metrics showing 19ms execution time and 9ms lock time across 2 executions. Accessed across two databases (db1, db2) by user 'meow' from host 1.2.3.8.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow019_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nadministrator command: Quit\n```\n\n----------------------------------------\n\nTITLE: Disabling Foreign Key Handling in pt-online-schema-change (Bash)\nDESCRIPTION: Adds a warning and confirmation prompt when using `alter-foreign-keys-method=\"none\"` with `pt-online-schema-change`. This option disables the tool's built-in foreign key handling, which can potentially break constraints, so explicit user confirmation is now required to proceed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Example usage, requires confirmation\npt-online-schema-change --alter-foreign-keys-method=none --alter \"ENGINE=InnoDB\" D=mydb,t=mytable --execute\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Query Packet\nDESCRIPTION: TCP packet showing MySQL client sending 'select 5 from foo' query to localhost server on port 3306\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump004.txt#2025-04-22_snippet_0\n\nLANGUAGE: raw\nCODE:\n```\n2009-04-12 12:58:02.035751 IP 127.0.0.1.60439 > 127.0.0.1.3306: tcp 22\n\t0x0000:  4508 004a fe56 4000 4006 3e4d 7f00 0001\n\t0x0010:  7f00 0001 ec17 0cea b75e 316d b698 c3fd\n\t0x0020:  8018 0201 fe3e 0000 0101 080a 004f f2ce\n\t0x0030:  004f d4bb 1200 0000 0373 656c 6563 7420\n\t0x0040:  3520 6672 6f6d 2066 6f6f\n```\n\n----------------------------------------\n\nTITLE: Selecting Fruit from Trees in MySQL\nDESCRIPTION: This SQL query selects the 'fruit' column from the 'trees' table. The query uses an index scan and is expected to return a single row. It's executed with minimal resource usage, taking only 12 microseconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Describing waits_global_by_latency View Structure in MySQL\nDESCRIPTION: Shows the structure of the waits_global_by_latency view, which lists global wait events. It includes fields for events, total occurrences, and various latency measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_113\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc waits_global_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| events        | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | text                | YES  |     | NULL    |       |\n| avg_latency   | text                | YES  |     | NULL    |       |\n| max_latency   | text                | YES  |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Percona Test Tables Schema\nDESCRIPTION: CREATE TABLE statements for Percona toolkit test tables including checksums, load_data and sentinel. These tables are used for testing and validation purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Capture - MySQL Client Set Global Command\nDESCRIPTION: Network packet showing MySQL client attempting to set a global variable 'nono'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump040.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2009-11-01 14:54:52.813612 IP 127.0.0.1.39640 > 127.0.0.1.3306: tcp 24\n\t0x0000:  4508 004c d743 4000 4006 655e 7f00 0001\n\t0x0010:  7f00 0001 9ad8 0cea 5554 0a26 554a e6a0\n\t0x0020:  8018 0233 fe40 0000 0101 080a 0020 1cce\n\t0x0030:  0020 147c 1400 0000 0373 6574 2067 6c6f\n\t0x0040:  6261 6c20 6e6f 6e6f 203d 2032\n```\n\n----------------------------------------\n\nTITLE: Extracting SQL Comments from Events in Perl\nDESCRIPTION: This Perl code snippet extracts SQL comments enclosed in /* ... */ from the 'Info' field of an event object. It uses a regular expression to capture the comment text and assigns it to the 'comment' key within the event object. The snippet also includes an optional debugging statement controlled by the PTDEBUG flag.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-kill/samples/filter001.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nmy ($comment) = $event->{Info} =~ m!/\\*(.+?)\\*/!;\nPTDEBUG && _d('comment:', $comment);\n$event->{comment} = $comment;\n1\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Launch Command\nDESCRIPTION: Command to start MySQL server 5.0.82 Community Server with optional configuration parameters. The server binary is located in a custom installation directory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp001.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/home/daniel/mysql_binaries/mysql-5.0.82-linux-x86_64-glibc23/bin/mysqld [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: MySQL Response Packet (Server to Client)\nDESCRIPTION: TCP packet containing the MySQL protocol response from server (192.168.1.1:3307) back to client (127.0.0.1:42167) with the query results\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump012.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 007d 7c81 4000 4006 bfef 7f00 0001\n7f00 0001 0cea a4b7 ad16 9219 ac8a 8438\n8018 0200 fe71 0000 0101 080a 0024 f99a\n0024 f99a 0100 0001 011e 0000 0203 6465\n6600 0000 0867 7265 6574 696e 6700 0c08\n000b 0000 00fd 0100 1f00 0005 0000 03fe\n0000 0200 0c00 0004 0b68 656c 6c6f 2077\n6f72 6c64 0500 0005 fe00 0002 00\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration with Comments\nDESCRIPTION: MySQL configuration file showing different parameter setting patterns including user credentials, quoted strings with special characters, and boolean flags. Demonstrates both inline and standalone comments using # and ; symbols.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mycnf-kc-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\nuser=mysql # comment\npassword=\"password # still part of it!\"# comment\nsomething='something ; or # another'      # comment\n;semicolon=\"start of line comment with ;\"\n#pound=\"start of line comment with #\"\n   ;spacecolon\n   #spacepound\nlog_bin # bool with comment\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Creation Syntax in MySQL\nDESCRIPTION: This SQL command retrieves the exact `CREATE TABLE` statement used to define the structure of the MySQL table named 'foo'. Backticks are used around the table name, and `\\G` requests vertical output suitable for console display. Requires the 'foo' table to exist.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow054.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `foo`\\G\n```\n\n----------------------------------------\n\nTITLE: Defining Host Privileges Table\nDESCRIPTION: The `host` table is designed to manage privileges at the host level, synchronized with database-specific privileges for efficient MySQL user management.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `host` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',\n  PRIMARY KEY (`Host`,`Db`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Host privileges;  Merged with database privileges'\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Performance Schema Instruments\nDESCRIPTION: Enables Performance Schema instruments matching a given pattern. Allows enabling specific types of instruments or all instruments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_145\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_instrument('wait/synch/mutex');\n+-------------------------+\n| summary                 |\n+-------------------------+\n| Enabled 155 instruments |\n+-------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_instrument('wait/io/socket/sql/server_tcpip_socket');\n+-----------------------+\n| summary               |\n+-----------------------+\n| Enabled 1 instruments |\n+-----------------------+\n1 row in set (0.00 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_instrument('');\n+-------------------------+\n| summary                 |\n+-------------------------+\n| Enabled 547 instruments |\n+-------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Status in Percona Toolkit Report\nDESCRIPTION: This snippet shows a MySQL SHOW STATUS command executed as part of the performance analysis. It's included in the report due to matching a specified limit condition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report_fingerprint_user.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STATUS\\G\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Index in MySQL Table\nDESCRIPTION: SQL command to remove a redundant index 'a' that duplicates the PRIMARY KEY on column 'a'. The table structure shows both indexes on the same column with int(11) type.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/issue_1192.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `issue_1192`.`issue_1192` DROP INDEX `a`;\n```\n\n----------------------------------------\n\nTITLE: Disk I/O Statistics Sample Data Format\nDESCRIPTION: Raw disk I/O statistics data showing device major/minor numbers, device names, and various performance counters including reads/writes completed, sectors read/written, and time spent on I/O operations. Data is timestamped with TS markers showing collection time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n253    3 dm-3 39108 0 317138 171804 76791646 0 614333168 174357398 0 6519480 174576802\n253    4 dm-4 4462420 0 101415522 11644533 30111152 0 240889216 29642112 0 8894662 41287746\n253    5 dm-5 652603 0 18833426 916973 6500904 0 52007232 4317034 0 2440836 5234207\n```\n\n----------------------------------------\n\nTITLE: Querying 'col' from 'foo_tbl' in MySQL\nDESCRIPTION: This SQL query selects the 'col' column from the 'foo_tbl' table in the 'foo' database. It's executed by the SQL_SLAVE user with a frequency of 0.05 QPS and an average execution time of 12us.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006_AR_1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Session Parameters and Insert Operation\nDESCRIPTION: Sets maximum delayed threads to 0, configures completion type, and performs an insert operation into 'foo' table. Includes special MySQL directive comments and delimiter settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog006.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 498006722\n#071207 12:02:50 server id 21  end_log_pos 498006652 \tPontificate thread_id=104168\texec_time=20664\terror_code=0\ninsert into foo values (12)/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Database and Tables\nDESCRIPTION: Creates the 'sakila' database and defines multiple tables including 'actor', 'address', 'category', 'city', 'country', 'customer', and 'film'. Sets up foreign key relationships and indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `sakila` /*!40100 DEFAULT CHARACTER SET latin1 */;\n\nUSE `sakila`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\n/*!50001 CREATE TABLE `actor_info` (\n  `actor_id` smallint(5) unsigned,\n  `first_name` varchar(45),\n  `last_name` varchar(45),\n  `film_info` varchar(341)\n) ENGINE=MyISAM */;\nSET character_set_client = @saved_cs_client;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `address` (\n  `address_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `address` varchar(50) NOT NULL,\n  `address2` varchar(50) DEFAULT NULL,\n  `district` varchar(20) NOT NULL,\n  `city_id` smallint(5) unsigned NOT NULL,\n  `postal_code` varchar(10) DEFAULT NULL,\n  `phone` varchar(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`address_id`),\n  KEY `idx_fk_city_id` (`city_id`),\n  CONSTRAINT `fk_address_city` FOREIGN KEY (`city_id`) REFERENCES `city` (`city_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `category` (\n  `category_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(25) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `city` (\n  `city_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `city` varchar(50) NOT NULL,\n  `country_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`city_id`),\n  KEY `idx_fk_country_id` (`country_id`),\n  CONSTRAINT `fk_city_country` FOREIGN KEY (`country_id`) REFERENCES `country` (`country_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `customer` (\n  `customer_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `email` varchar(50) DEFAULT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `create_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`customer_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  KEY `idx_last_name` (`last_name`),\n  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=600 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\n/*!50001 CREATE TABLE `customer_list` (\n  `ID` smallint(5) unsigned,\n  `name` varchar(91),\n  `address` varchar(50),\n  `zip code` varchar(10),\n  `phone` varchar(20),\n  `city` varchar(50),\n  `country` varchar(50),\n  `notes` varchar(6),\n  `SID` tinyint(3) unsigned\n) ENGINE=MyISAM */;\nSET character_set_client = @saved_cs_client;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8;\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Defining Query Analysis Data Structure in Perl\nDESCRIPTION: A comprehensive Perl data structure storing MySQL query metrics and statistics. It contains attribute type definitions, grouped results by query fingerprint, global statistics, and query samples with detailed performance metrics like Query_time, Lock_time, and scan information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow006.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n$VAR1 = {attribute_types => {Filesort_on_disk => 'bool',Tmp_table_on_disk => 'bool',Error_no => 'string',Filesort => 'bool',Full_join => 'bool',Full_scan => 'bool',Lock_time => 'num',Merge_passes => 'num',QC_Hit => 'bool',Query_time => 'num',Rows_examined => 'num',Rows_sent => 'num',Statement_id => 'string',Status_code => 'string',Tmp_table => 'bool',bytes => 'num',db => 'string',host => 'string',key_print => 'string',pos_in_log => 'num',ts => 'string',user => 'string',val => 'string'},groupby => 'fingerprint',results => {classes => {'select col from bar_tbl' => {Filesort_on_disk => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Tmp_table_on_disk => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Filesort => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Full_join => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Full_scan => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Lock_time => {all => {'0' => 3},cnt => 3,last => '0.000000',max => '0.000000',min => '0.000000',sum => '0'},Merge_passes => {all => {'0' => 3},cnt => 3,last => 0,max => 0,min => 0,sum => 0},QC_Hit => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Query_time => {all => {'51' => 3},cnt => 3,last => '0.000012',max => '0.000012',min => '0.000012',sum => '3.6e-05'},Rows_examined => {all => {'0' => 3},cnt => 3,last => 0,max => 0,min => 0,sum => 0},Rows_sent => {all => {'0' => 3},cnt => 3,last => 0,max => 0,min => 0,sum => 0},Tmp_table => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},bytes => {all => {'348' => 3},cnt => 3,last => 23,max => 23,min => 23,sum => 69},db => {cnt => 3,max => 'bar',min => 'bar',unq => {bar => 3}},host => {cnt => 3,max => '',min => '',unq => {'' => 3}},pos_in_log => {all => {'419' => 1,'427' => 1,'433' => 1},cnt => 3,last => 1445,max => 1445,min => 725,sum => 3253},ts => {cnt => 3,max => '071218 11:49:07',min => '071218 11:48:57',unq => {'071218 11:48:57' => 1,'071218 11:49:05' => 1,'071218 11:49:07' => 1}},user => {cnt => 3,max => '[SQL_SLAVE]',min => '[SQL_SLAVE]',unq => {'[SQL_SLAVE]' => 3}}},'select col from foo_tbl' => {Filesort_on_disk => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Tmp_table_on_disk => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Filesort => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Full_join => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Full_scan => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Lock_time => {all => {'0' => 3},cnt => 3,last => '0.000000',max => '0.000000',min => '0.000000',sum => '0'},Merge_passes => {all => {'0' => 3},cnt => 3,last => 0,max => 0,min => 0,sum => 0},QC_Hit => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},Query_time => {all => {'51' => 3},cnt => 3,last => '0.000012',max => '0.000012',min => '0.000012',sum => '3.6e-05'},Rows_examined => {all => {'0' => 3},cnt => 3,last => 0,max => 0,min => 0,sum => 0},Rows_sent => {all => {'0' => 3},cnt => 3,last => 0,max => 0,min => 0,sum => 0},Tmp_table => {cnt => 3,max => 0,min => 0,sum => 0,unq => {'0' => 3}},bytes => {all => {'348' => 3},cnt => 3,last => 23,max => 23,min => 23,sum => 69},db => {cnt => 3,max => 'foo',min => 'foo',unq => {foo => 3}},host => {cnt => 3,max => '',min => '',unq => {'' => 3}},pos_in_log => {all => {'0' => 1,'404' => 1,'437' => 1},cnt => 3,last => 1803,max => 1803,min => 0,sum => 2166},ts => {cnt => 3,max => '071218 11:49:30',min => '071218 11:48:27',unq => {'071218 11:48:27' => 1,'071218 11:48:57' => 1,'071218 11:49:30' => 1}},user => {cnt => 3,max => '[SQL_SLAVE]',min => '[SQL_SLAVE]',unq => {'[SQL_SLAVE]' => 3}}}},globals => {Filesort_on_disk => {cnt => 6,max => 0,min => 0,sum => 0},Tmp_table_on_disk => {cnt => 6,max => 0,min => 0,sum => 0},Filesort => {cnt => 6,max => 0,min => 0,sum => 0},Full_join => {cnt => 6,max => 0,min => 0,sum => 0},Full_scan => {cnt => 6,max => 0,min => 0,sum => 0},Lock_time => {all => {'0' => 6},cnt => 6,max => '0.000000',min => '0.000000',sum => '0'},Merge_passes => {all => {'0' => 6},cnt => 6,max => 0,min => 0,sum => 0},QC_Hit => {cnt => 6,max => 0,min => 0,sum => 0},Query_time => {all => {'51' => 6},cnt => 6,max => '0.000012',min => '0.000012',sum => '7.2e-05'},Rows_examined => {all => {'0' => 6},cnt => 6,max => 0,min => 0,sum => 0},Rows_sent => {all => {'0' => 6},cnt => 6,max => 0,min => 0,sum => 0},Tmp_table => {cnt => 6,max => 0,min => 0,sum => 0},bytes => {all => {'348' => 6},cnt => 6,max => 23,min => 23,sum => 138},db => {cnt => 6,max => 'foo',min => 'bar'},host => {cnt => 6,max => '',min => ''},pos_in_log => {all => {'0' => 1,'404' => 1,'419' => 1,'427' => 1,'433' => 1,'437' => 1},cnt => 6,max => 1803,min => 0,sum => 5419},ts => {cnt => 6,max => '071218 11:49:30',min => '071218 11:48:27'},user => {cnt => 6,max => '[SQL_SLAVE]',min => '[SQL_SLAVE]'}},samples => {'select col from bar_tbl' => {Filesort_on_disk => 'No',Tmp_table_on_disk => 'No',Filesort => 'No',Full_join => 'No',Full_scan => 'No',Lock_time => '0.000000',Merge_passes => '0',QC_Hit => 'No',Query_time => '0.000012',Rows_examined => '0',Rows_sent => '0',Thread_id => '20',Tmp_table => 'No',arg => 'SELECT col FROM bar_tbl',bytes => 23,cmd => 'Query',db => 'bar',fingerprint => 'select col from bar_tbl',host => '',ip => '',pos_in_log => 1445,ts => '071218 11:49:07',user => '[SQL_SLAVE]'},'select col from foo_tbl' => {Filesort_on_disk => 'No',Tmp_table_on_disk => 'No',Filesort => 'No',Full_join => 'No',Full_scan => 'No',Lock_time => '0.000000',Merge_passes => '0',QC_Hit => 'No',Query_time => '0.000012',Rows_examined => '0',Rows_sent => '0',Thread_id => '30',Tmp_table => 'No',arg => 'SELECT col FROM foo_tbl',bytes => 23,cmd => 'Query',db => 'foo',fingerprint => 'select col from foo_tbl',host => '',ip => '',pos_in_log => 1803,ts => '071218 11:49:30',user => '[SQL_SLAVE]'}}},worst => 'Query_time'};\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring MySQL User 'sally'\nDESCRIPTION: This SQL snippet first creates the user 'sally'@'%' if it does not already exist. It then modifies the user to use the 'caching_sha2_password' authentication plugin, sets password expiration to default, ensures the account is unlocked, and configures default password history and reuse policies.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-84.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER IF NOT EXISTS `sally`@`%`;\nALTER USER `sally`@`%` IDENTIFIED WITH 'caching_sha2_password' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT PASSWORD REQUIRE CURRENT DEFAULT;\n```\n\n----------------------------------------\n\nTITLE: Database Alteration Event Summary\nDESCRIPTION: Summary of events that occurred during the table alteration process, including insert operations and MySQL warnings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-online-schema-change/samples/stats-execute-5.5.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Event              Count\n# ================== =====\n# INSERT                 1\n# mysql_warning_1592     1\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Query and Thread Information at Crash Time\nDESCRIPTION: This snippet provides information about the query being executed and thread status at the time of the MySQL server crash. It includes the specific CHECK TABLE command and thread ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog004.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nthd->query at 0xf9b1670 = CHECK TABLE `rates`  FOR UPGRADE\nthd->thread_id=15\nthd->killed=NOT_KILLED\n```\n\n----------------------------------------\n\nTITLE: Running pt-galera-log-explainer\nDESCRIPTION: The primary command for using pt-galera-log-explainer. It supports various options and flags to process Galera logs, providing a command-line interface for customizing log analysis based on time or node-specific information. Events can be listed, node details can be queried, and conflicts can be detected.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer [--since=] [--until=] [-vv] [--merge-by-directory] [--pxc-operator] <command> <paths ...>\n```\n\n----------------------------------------\n\nTITLE: Querying IO Global Wait Latency in MySQL\nDESCRIPTION: Shows global I/O statistics grouped by event type, including total latency, read/write metrics, and data transfer amounts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM io_global_by_wait_by_latency;\n```\n\n----------------------------------------\n\nTITLE: Language Table Creation - MySQL\nDESCRIPTION: Creates language lookup table with auto-incrementing ID, name and timestamp fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `language` (\n  `language_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `name` char(20) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`language_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Shell Script Improvements for SQL File Generation\nDESCRIPTION: Updates to the generate_sql_file.sh script including output directory changes, default user configuration, and binary log handling improvements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/NEWS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenerate_sql_file.sh\n * Generated files are now output in to a \"gen\" directory\n * Added using a new default \"mysql.sys@localhost\" user\n * Added a warning to the top of the generated integration file\n * Improved the option of skipping binary logs\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice Template for GNU AGPL-Licensed Programs\nDESCRIPTION: This snippet provides a template for the copyright notice to be included at the start of each source file in a program licensed under the GNU AGPL. It includes placeholders for the program name, year, and author, as well as standard text explaining the license terms and lack of warranty.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/License.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Establishing Help Relation Table in MySQL\nDESCRIPTION: Creates the 'help_relation' table in MySQL to map the relationships between help topics and their keywords, facilitating efficient navigation and cross-referencing within help documents.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `help_relation`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query from Table t\nDESCRIPTION: Basic SELECT query retrieving column 'c' from table 't' with a primary key lookup condition. Shows execution metrics and query profiling data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/rawlog001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT c FROM t WHERE id=1\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Tables with JOIN and Specific ID in MySQL\nDESCRIPTION: This SQL query updates both t1 and t2 tables by joining them on the 'id' column. It sets 'foo' in t1 to 'bar' and 'foo' in t2 to 'bat' where the id in t1 is 1.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow002.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE t1 AS a JOIN t2 AS b USING (id) SET a.foo=\"bar\", b.foo=\"bat\" WHERE a.id=1;\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Management Operations\nDESCRIPTION: Final table management operations including truncate and drop table commands\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog003.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET TIMESTAMP=1252690717/*!*/;\ntruncate table t\n/*!*/;\nSET TIMESTAMP=1252690720/*!*/;\ndrop table t\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Inserting Record into conch Table with Auto-increment in MySQL\nDESCRIPTION: Inserts a new record into db1.conch table, setting the auto-increment ID and timestamp before insertion. It populates word3 and vid83 columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow002.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET insert_id=34484549,timestamp=1197996507;\nINSERT INTO db1.conch (word3, vid83)\nVALUES ('211', '18');\n```\n\n----------------------------------------\n\nTITLE: Querying 'host2_col' from a Test Table Using SQL\nDESCRIPTION: This SQL command attempts to fetch the column 'host2_col' from the 'test.t' table. It requires that the 'host2_col' exists in the table schema; if not, an error similar to the logged one will occur. Inputs are the table name and the expected column; output is the result set if successful or an error otherwise.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host1_results.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect host2_col from test.t\n```\n\n----------------------------------------\n\nTITLE: Show Table Status Query\nDESCRIPTION: Metadata query to show table status information for specific tables in the databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30m.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `db1` LIKE 'foo'\n```\n\n----------------------------------------\n\nTITLE: Describing x$schema_tables_with_full_table_scans View in MySQL\nDESCRIPTION: Shows the structure of the x$schema_tables_with_full_table_scans view, which is similar to schema_tables_with_full_table_scans but provides raw latency data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_65\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_tables_with_full_table_scans;\n+-------------------+---------------------+------+-----+---------+-------+\n| Field             | Type                | Null | Key | Default | Extra |\n+-------------------+---------------------+------+-----+---------+-------+\n| object_schema     | varchar(64)         | YES  |     | NULL    |       |\n| object_name       | varchar(64)         | YES  |     | NULL    |       |\n| rows_full_scanned | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency           | bigint(20) unsigned | NO   |     | NULL    |       |\n+-------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Whois Command Usage - Bash\nDESCRIPTION: Shows how to use the whois command to lookup node information\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer [flags] whois [--json] [--type { nodename | ip | uuid | auto }] <information to search> <paths ...>\n```\n\n----------------------------------------\n\nTITLE: MySQL SHOW TABLE Commands\nDESCRIPTION: Administrative commands to show table status and creation details for table 't' in database 'issue_1196'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output-5.7.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `issue_1196` LIKE 't'\\G\nSHOW CREATE TABLE `issue_1196`.`t`\\G\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into Database Table in SQL\nDESCRIPTION: This SQL code snippet demonstrates inserting multiple rows into a database table. Each row contains two integer values and a fixed timestamp. The pattern suggests bulk data insertion for a specific date and time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n(176,162,'2006-02-15 10:05:03'),(176,238,'2006-02-15 10:05:03'),(176,252,'2006-02-15 10:05:03'),\n(176,303,'2006-02-15 10:05:03'),(176,320,'2006-02-15 10:05:03'),(176,401,'2006-02-15 10:05:03'),\n(176,417,'2006-02-15 10:05:03'),(176,441,'2006-02-15 10:05:03'),(176,458,'2006-02-15 10:05:03'),\n(176,461,'2006-02-15 10:05:03'),(176,517,'2006-02-15 10:05:03'),(176,521,'2006-02-15 10:05:03'),\n/* ... many more rows ... */\n(187,664,'2006-02-15 10:05:03'),(187,671,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Creation Date Trigger in MySQL\nDESCRIPTION: Trigger definition that automatically sets the create_date field to the current timestamp when inserting new customers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\nCREATE TRIGGER customer_create_date BEFORE INSERT ON customer\n\tFOR EACH ROW SET NEW.create_date = NOW();;\n```\n\n----------------------------------------\n\nTITLE: MySQL Binary Data Hexdump\nDESCRIPTION: Hexadecimal dump of binary data containing references to 'msandbox' and 'mysql', possibly representing database protocol or file format data\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysql_proto_003.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n8da2 0300 0000 0001\n0800 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 6d73 616e 6462 6f78\n0014 0f4d 1025 acab c345 188f f9e0 54e5\n1e5e fbc9 423e 6d79 7371 6c00\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary View Table Structure for nicer_but_slower_film_list - MySQL SQL\nDESCRIPTION: Defines a temporary table structure for the view 'nicer_but_slower_film_list'. Useful for schema migrations or db restores where the view needs to be represented temporarily as a normal table. This does not persist actual view logic but reserves structure.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/one-db.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `nicer_but_slower_film_list` (\n  `FID` smallint(5) unsigned,\n  `title` varchar(255),\n  `description` text,\n  `category` varchar(25),\n  `price` decimal(4,2),\n  `length` smallint(5) unsigned,\n  `rating` enum('G','PG','PG-13','R','NC-17'),\n  `actors` varchar(341)\n) ENGINE=MyISAM */;\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'foo' - Second Execution\nDESCRIPTION: Repeated SELECT query on table 'foo' executed by SQL_SLAVE user in db1 database. Query took 12us with no lock time and returned no rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30s-3iter.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into d2.t Table\nDESCRIPTION: This SQL statement inserts a single row with value '1' into the 'x' column of the 't' table in the 'd2' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_631_output_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `d2`.`t`(`x`) VALUES ('1');\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Processed Value for --replace (Plaintext)\nDESCRIPTION: Shows the resulting value (`FALSE`) assigned to the `--replace` option after command-line arguments have been parsed, assuming the option was not explicitly provided by the user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--replace     FALSE\n```\n\n----------------------------------------\n\nTITLE: MySQL Query TCP Packet Exchange\nDESCRIPTION: Network capture showing a TCP conversation between MySQL client (port 48259) and server (port 3306) on localhost. Includes packet headers and payload data showing a SELECT query and server response.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump006.txt#2025-04-22_snippet_0\n\nLANGUAGE: tcpdump\nCODE:\n```\n2010-04-12 20:46:10.776694 IP 127.0.0.1.48259 > 127.0.0.1.3306: tcp 20\n\t0x0000:  4508 0048 3d5b 4000 4006 ff4a 7f00 0001\n\t0x0010:  7f00 0001 bc83 0cea 4b67 c79b 4b65 e905\n\t0x0020:  8018 0222 fe3c 0000 0101 080a 00bb 1937\n\t0x0030:  00bb 060a 1000 0000 0373 656c 6563 7420\n\t0x0040:  2a20 6672 6f6d 2074\n2010-04-12 20:46:10.776899 IP 127.0.0.1.3306 > 127.0.0.1.48259: tcp 81\n\t0x0000:  4508 0085 1d66 4000 4006 1f03 7f00 0001\n\t0x0010:  7f00 0001 0cea bc83 4b65 e905 4b67 c7af\n\t0x0020:  8018 0200 fe79 0000 0101 080a 00bb 1937\n\t0x0030:  00bb 1937 0100 0001 011e 0000 0203 6465\n\t0x0040:  6604 7465 7374 0174 0174 0161 0161 0c3f\n\t0x0050:  000b 0000 0003 0000 0000 0005 0000 03fe\n\t0x0060:  0000 2200 0200 0004 0131 0200 0005 0131\n\t0x0070:  0200 0006 0131 0200 0007 0132 0500 0008\n\t0x0080:  fe00 0022 00\n2010-04-12 20:46:10.776928 IP 127.0.0.1.48259 > 127.0.0.1.3306: tcp 0\n\t0x0000:  4508 0034 3d5c 4000 4006 ff5d 7f00 0001\n\t0x0010:  7f00 0001 bc83 0cea 4b67 c7af 4b65 e956\n\t0x0020:  8010 0222 3174 0000 0101 080a 00bb 1937\n\t0x0030:  00bb 1937\n```\n\n----------------------------------------\n\nTITLE: Switching Database and Querying in SQL\nDESCRIPTION: This snippet shows how to switch between databases and perform SELECT queries on different tables. It demonstrates the use of the 'use' statement to change the active database and SELECT statements to retrieve data from tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006-session-1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- START SESSION 10\n\nuse foo\n\nSELECT col FROM foo_tbl\n\nSELECT col FROM foo_tbl\n\nuse bar\n\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: Defining columns_priv Table in SQL\nDESCRIPTION: Creates the `columns_priv` table within the `mysql` database to store column-level privileges. It records which users have specific permissions (Select, Insert, Update, References) on particular columns within tables across different databases and hosts. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Privilege Tables\nDESCRIPTION: Creates tables for storing MySQL user privileges and access rights at table and column level.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating the `time_zone` Table - MySQL Time Zone Definitions - SQL\nDESCRIPTION: Defines the `time_zone` table to register all supported time zones, with a unique Time_zone_id (auto incremented) and a flag for leap seconds usage. Intended for internal use by MySQL for datetime functions and conversions. Relies on MyISAM, utf8 character set, and is populated during time zone setup procedures.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone` (\n  `Time_zone_id` int(10) unsigned NOT NULL auto_increment,\n  `Use_leap_seconds` enum('Y','N') NOT NULL default 'N',\n  PRIMARY KEY  (`Time_zone_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Time zones'\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Log Entry Format Example\nDESCRIPTION: Sample format of a MySQL query log entry showing the timestamp in format 'YYMMDD HH:MM:SS' and a user@host line where the actual user information has been truncated. This represents the header portion of a slow query log entry that would typically be followed by query details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow015.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Time: 081114 13:04:02\n# User@Host: truncated\n```\n\n----------------------------------------\n\nTITLE: Checking Development Environment for Dependencies\nDESCRIPTION: A Shell utility command that verifies whether all required tools for the Percona Toolkit are correctly installed. Missing Perl modules can be installed using CPAN.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nutil/check-dev-env\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo perl -MCPAN -e \"shell\"\ncpan[1]> install File::Slurp\n...\n```\n\n----------------------------------------\n\nTITLE: Capturing MySQL Server Response Packet in Hexdump Format\nDESCRIPTION: This hexdump shows the MySQL server's response packet containing the query results. The packet includes database field definitions and multiple product records with information like product IDs, image links, titles, and prices that match the criteria specified in the SELECT query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump000.txt#2025-04-22_snippet_1\n\nLANGUAGE: hexdump\nCODE:\n```\n0x0000:  4508 02f2 330d 4000 4006 49ec c0a8 1cd5\n0x0010:  c0a8 1cdf 0cea dc8e ad6f 995e adc4 523e\n0x0020:  8018 003e bde9 0000 0101 080a 62e4 a103\n0x0030:  62e6 32e7 0100 0001 0429 0000 0203 6465\n0x0040:  6604 6263 616c 0274 7009 7470 726f 6475\n0x0050:  6374 7302 6964 0269 640c 3f00 0b00 0000\n0x0060:  0301 0000 0000 3a00 0003 0364 6566 0462\n0x0070:  6361 6c02 7470 0974 7072 6f64 7563 7473\n0x0080:  0369 6d67 1270 726f 6475 6374 5f69 6d61\n0x0090:  6765 5f6c 696e 6b0c 0800 ffff 0000 fc10\n0x00a0:  0000 0000 3600 0004 0364 6566 0462 6361\n0x00b0:  6c02 7470 0974 7072 6f64 7563 7473 0574\n0x00c0:  6974 6c65 0c69 6e6e 6572 5f76 6572 7365\n0x00d0:  320c 0800 ff00 0000 fd00 0000 0000 2f00\n0x00e0:  0005 0364 6566 0462 6361 6c02 7470 0974\n0x00f0:  7072 6f64 7563 7473 0570 7269 6365 0570\n0x0100:  7269 6365 0c3f 0015 0000 0000 0000 0400\n0x0110:  0001 0000 06fe 3d00 0007 0632 3236 3839\n0x0120:  341f 6264 6179 5f63 616b 655f 616e 696d\n0x0130:  6174 6564 5f33 3433 3235 3334 352e 6769\n0x0140:  660c 4461 6e63 696e 6720 4361 6b65 0832\n0x0150:  3030 2e30 3030 303d 0000 0806 3232 3530\n0x0160:  3338 257a 6667 6966 7473 6a6f 686e 6272\n0x0170:  6f77 6e62 6461 7963 616b 6563 6f6e 7665\n0x0180:  7274 6564 2e6a 7067 0e59 756d 6d79 2046\n0x0190:  726f 7374 696e 67fb 3700 0009 0632 3230\n0x01a0:  3333 371f 7a66 6769 6674 7362 6361 6c62\n0x01b0:  6972 7468 6461 7933 5f6f 7061 6762 6e2e\n0x01c0:  6a70 670e 4b69 7373 6573 2043 7570 6361\n0x01d0:  6b65 fb3d 0000 0a06 3232 3530 3335 267a\n0x01e0:  6667 6966 7473 6a6f 686e 6264 6179 7769\n0x01f0:  7468 6865 6172 7473 636f 6e76 6572 7465\n0x0200:  642e 6a70 670d 466c 7969 6e67 2057 6973\n0x0210:  6865 73fb 3000 000b 0632 3235 3033 3619\n0x0220:  7a66 6769 6674 736a 6f68 6e62 6967 7072\n0x0230:  6573 656e 742e 6a70 670d 4a75 6d62 6f20\n0x0240:  5072 6573 656e 74fb 3b00 000c 0632 3235\n0x0250:  3034 3421 7a66 6769 6674 736a 6f68 6e6b\n0x0260:  6964 775f 6361 6b65 636f 6e76 6572 7465\n0x0270:  642e 6a70 670a 4d69 6e65 204d 696e 6521\n0x0280:  0630 2e30 3030 3028 0000 0d06 3232 3839\n0x0290:  3133 1062 6561 7262 6972 7468 6461 792e\n0x02a0:  6a70 6708 5361 6420 4265 6172 0630 2e30\n0x02b0:  3030 3032 0000 0e06 3232 3839 3232 1473\n0x02c0:  6c69 6365 6361 6b65 6265 6c61 7465 642e\n0x02d0:  6a70 670e 476f 7420 4c65 6674 6f76 6572\n0x02e0:  733f 0630 2e30 3030 3005 0000 0ffe 0000\n0x02f0:  0200\n```\n\n----------------------------------------\n\nTITLE: Configuring InnoDB Buffer Pool Size in MySQL\nDESCRIPTION: Sets the size of the memory buffer InnoDB uses to cache data and indexes of its tables. This is a crucial parameter for optimizing InnoDB performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n--innodb-buffer-pool-size=# \n```\n\n----------------------------------------\n\nTITLE: Creating Sakila Film Rental Database Tables\nDESCRIPTION: Creates the core tables for the Sakila sample database including film, customer, actor, and related junction tables. Includes proper foreign key constraints and indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `actor` (\n  `actor_id` smallint(5) unsigned NOT NULL auto_increment,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`actor_id`),\n  KEY `idx_actor_last_name` (`last_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Querying bar Table with Primary Key in MySQL\nDESCRIPTION: SQL queries selecting all columns from the 'bar' table filtered by primary key. Includes two identical queries with id=11 and one with id=12 showing a slower execution time (0.050012 seconds).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow053.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM bar WHERE id=11;\n\nSELECT * FROM bar WHERE id=11;\n\nSELECT * FROM bar WHERE id=12;\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Administrative Connect Command - Shell\nDESCRIPTION: Executes an administrator-level command to establish a connection to the MySQL database. Requires MySQL client tools and user access to the target instance. This command typically performs actions such as logging in for further administration. No input or output parameters beyond the standard client interaction. It does not return query results but initiates or manages sessions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump002_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadministrator command: Connect\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Binary Log Delete Operation with Delimiters\nDESCRIPTION: A MySQL binary log entry showing a delete operation with position markers, timestamp, and server details. Includes rollback and completion type settings with MySQL-specific delimiters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog008.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER /*!*/;\n# at 498008762\n#100429 08:23:12 server id 12345  end_log_pos 28  Query\tthread_id=10\texec_time=0  error_code=0\ndelete from t where a=1/*!*/;\n# End of log file\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Values Data\nDESCRIPTION: A series of SQL value tuples containing two integer columns and a timestamp column fixed at '2006-02-15 10:05:03'. The data appears to be paired identifiers with timestamps, possibly representing relationships or log entries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n(141,740,'2006-02-15 10:05:03'),(141,752,'2006-02-15 10:05:03'),(141,768,'2006-02-15 10:05:03')...\n```\n\n----------------------------------------\n\nTITLE: Timestamped Disk I/O Statistics Snapshot\nDESCRIPTION: This snippet shows how disk I/O statistics are captured with timestamps. Each snapshot begins with a 'TS' line indicating the Unix timestamp of the capture, followed by the statistics for each device.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1283888785.616937000\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489582 163771322 245685 758231076 452645883 198296112 66 218109272 0 621587890 976428793\n 253    0 dm-0 1418194 0 27251106 5776302 27005267 0 216042136 57460474 0 5590540 63255191\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Data from Table\nDESCRIPTION: Basic SQL query that retrieves values from the 'col' column in the 'bar_tbl' table. This query is repeated in the session, suggesting it might be used for testing or demonstration purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow006-session-2.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM bar_tbl\n```\n\n----------------------------------------\n\nTITLE: InnoDB Long Semaphore Wait Warning Log Entry\nDESCRIPTION: Standard InnoDB warning log entry showing thread contention on semaphore locks. Contains thread ID, wait location, wait duration, semaphore type, and lock status information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog007.txt#2025-04-22_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nInnoDB: Warning: a long semaphore wait:\\n--Thread 1597606240 has waited at btr0sea.c line 1383 for 562.00 seconds the semaphore:\\nX-lock on RW-latch at 0x2a96d920b8 created in file btr0sea.c line 139\\na writer (thread id 1799514464) has reserved it in mode  wait exclusive\\nnumber of readers 0, waiters flag 1\\nLast time read locked in file btr0sea.c line 746\\nLast time write locked in file btr0cur.c line 2184\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records in db3 Using MySQL SQL\nDESCRIPTION: These snippets switch to 'db3' and retrieve all records from the 'foo' table, each accompanied by diagnostic comments to support Percona log parsing. This is useful for repeated SELECT activity monitoring, especially on tables prone to performance fluctuations. Dependencies and constraints mirror previous SELECT operations; result is all rows from 'foo'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 0.526052  Lock_time: 0.037091  Rows_sent: 7  Rows_examined: 0\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db3;\\nSELECT * FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 0.526052  Lock_time: 0.037091  Rows_sent: 7  Rows_examined: 0\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: No  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: No  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db3;\\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword-Topic Relation Table in MySQL\nDESCRIPTION: This SQL code defines 'help_relation', a table that maps help topics to their related keywords, facilitating more precise help searches in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Table Creation and Insert Operations Log\nDESCRIPTION: Log entries showing MySQL query fingerprints for CREATE TABLE statements and INSERT operations, including execution statistics and query type identifiers. Shows creation of multiple tables including customer, address, film, inventory and other related tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n#    8 0x4393885182E112A2E5109B9F2BF996BE   1.0000  1.8%     1 1.0000  0.00 INSERT customer\n#    9 0x6846663BC60B4FF9D62F1A6D5A67AFA8   1.0000  1.8%     1 1.0000  0.00 INSERT address\n#   10 0x45781B86D83AE665EE462EEBC76A46F2   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE percona_test.checksums\n#   11 0x68FBF2932AA49582C57D5EA5160B0E9F   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE innodb_table_stats `innodb_table_stats`\n#   12 0xCBD4B02B76FCD5BCD8657A03D0724524   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE payment `payment`\n#   13 0x1B49B966156BD5391405E69931A1FC8D   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE language `language`\n#   14 0xFFDE0605772D1BD0E771A1D1EAD499BA   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE inventory `inventory`\n#   15 0x661E3CA5D82B964A4E763A2FA103490D   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE film `film`\n#   16 0x1161695D97D5E56D8A38006583244505   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE film_text `film_text`\n#   17 0xE9F9A7EE464D666B0FD12A9C9BF3E41F   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE film_category `film_category`\n#   18 0xB25BC072BED6DE4E7677746C22CD9F16   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE film_actor `film_actor`\n#   19 0x98D4A6F51806DA45C1D332032F48BCE1   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE customer `customer`\n#   20 0x90C64F5E9B49C9003E8F75B2422F47B7   1.0000  1.8%     1 1.0000  0.00 CREATE TABLE country `country`\n# MISC 0xMISC                               6.0000 10.5%    95 0.0632   0.0 <72 ITEMS>\n```\n\n----------------------------------------\n\nTITLE: Matching MySQL Signal Errors in Percona Toolkit\nDESCRIPTION: This regex pattern is designed to match MySQL error messages indicating that the server received a signal. It captures the signal number, which can be useful for diagnosing server crashes or forced shutdowns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/patterns.txt#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\nmysql got signal \\d\n```\n\n----------------------------------------\n\nTITLE: DELETE Operations on buddy_list Table\nDESCRIPTION: Series of DELETE operations removing records from buddy_list table with specific player_id and buddy_id combinations\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_560_output_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM `issue_560`.`buddy_list` WHERE `player_id`='333' AND `buddy_id`='0' LIMIT 1;\nDELETE FROM `issue_560`.`buddy_list` WHERE `player_id`='334' AND `buddy_id`='0' LIMIT 1;\nDELETE FROM `issue_560`.`buddy_list` WHERE `player_id`='486' AND `buddy_id`='0' LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Example String Parameter Values from Query Analysis Report (Plaintext)\nDESCRIPTION: Displays example string values observed for a parameter named 'foo' within the analyzed query (ID 0x56A78B46A896465882860EDA9A88FCC5). It shows two distinct example values ('Hi. I'm a...', 'Me too! I'...') each accounting for 50% of the occurrences. This snippet is part of a Percona Toolkit report detailing query performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report011.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# String:\n# foo          Hi.  I'm a... (1/50%), Me too! I'... (1/50%)\n```\n\n----------------------------------------\n\nTITLE: Examining InnoDB Assertion Failure in MySQL Error Log\nDESCRIPTION: This snippet details an InnoDB assertion failure, including the thread ID, file, and line number where the failure occurred. It also provides advice on submitting a bug report and checking for tablespace corruption.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog004.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n090902 11:08:43  InnoDB: Assertion failure in thread 1312495936 in file fil/fil0fil.c line 752\nInnoDB: Failing assertion: ret\nInnoDB: We intentionally generate a memory trap.\nInnoDB: Submit a detailed bug report to http://bugs.mysql.com.\nInnoDB: If you get repeated assertion failures or crashes, even\nInnoDB: immediately after the mysqld startup, there may be\nInnoDB: corruption in the InnoDB tablespace. Please refer to\nInnoDB: http://dev.mysql.com/doc/refman/5.1/en/forcing-recovery.html\nInnoDB: about forcing recovery.\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Attempts for pt-table-checksum in Bash\nDESCRIPTION: Introduces the `--replicate-check-retries` option for the `pt-table-checksum` tool to handle potential inconsistencies when resuming checks, especially with Percona XtraDB Cluster. Setting `N` (e.g., 3) specifies the number of times to retry a discrepant checksum. The default is 1 (no retries).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example usage, setting retries to 3\npt-table-checksum --replicate-check-retries 3 [other_options]\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Table Structure for View 'nicer_but_slower_film_list' - SQL\nDESCRIPTION: This snippet creates a temporary table used as an underlying structure for the 'nicer_but_slower_film_list' view, mirroring fields needed for advanced film listing queries. It establishes the schema needed for further transformation or reporting. No foreign keys or unique constraints beyond what is defined in fields themselves.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `nicer_but_slower_film_list` (\n  `FID` smallint(5) unsigned,\n  `title` varchar(255),\n  `description` text,\n  `category` varchar(25),\n  `price` decimal(4,2),\n  `length` smallint(5) unsigned,\n  `rating` enum('G','PG','PG-13','R','NC-17'),\n  `actors` varchar(341)\n) ENGINE=MyISAM */;\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL x$processlist Table Structure\nDESCRIPTION: Displays the structure of the 'x$processlist' table in MySQL Performance Schema, showing field names, types, and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_46\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$processlist;\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| Field                  | Type                                     | Null | Key | Default | Extra |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\n| command                | varchar(16)                              | YES  |     | NULL    |       |\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\n| statement_latency      | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\n| lock_latency           | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| full_scan              | varchar(3)                               | NO   |     |         |       |\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\n| last_statement_latency | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| current_memory         | decimal(41,0)                            | YES  |     | NULL    |       |\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\n| last_wait_latency      | varchar(20)                              | YES  |     | NULL    |       |\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\n| trx_latency            | bigint(20) unsigned                      | YES  |     | NULL    |       |\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\n+------------------------+------------------------------------------+------+-----+---------+-------+\n28 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating payment tracking table in SQL\nDESCRIPTION: Creates the payment table for storing rental payment transactions. Includes foreign key relationships to customer, staff, and rental records with appropriate update and delete behaviors.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Response ACK\nDESCRIPTION: Client acknowledgment packet for the server's field definition response.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump025.txt#2025-04-22_snippet_3\n\nLANGUAGE: hex\nCODE:\n```\n4508 0042 e9a5 4000 4006 5306 7f00 0001\\n7f00 0001 bdc9 3039 9bdb f8d7 9c96 8a4e\\n8018 0101 fe36 0000 0101 080a 0059 2162\\n0059 2162 0a00 0000 1702 0000 0000 0100\\n0000\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL 95th Percentile Runtime Structure\nDESCRIPTION: Defines the structure of views that track queries with runtimes in the 95th percentile, including detailed performance metrics and helper views for latency distribution analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_86\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_runtimes_in_95th_percentile;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| full_scan         | varchar(1)          | NO   |     |                     |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| err_count         | bigint(20) unsigned | NO   |     | NULL                |       |\n| warn_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | text                | YES  |     | NULL                |       |\n| max_latency       | text                | YES  |     | NULL                |       |\n| avg_latency       | text                | YES  |     | NULL                |       |\n| rows_sent         | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sent_avg     | decimal(21,0)       | NO   |     | 0                   |       |\n| rows_examined     | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_examined_avg | decimal(21,0)       | NO   |     | 0                   |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Status Commands\nDESCRIPTION: Commands to show table status and structure for debugging purposes\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/issue_1196-output-8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `issue_1196` LIKE 't'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `issue_1196`.`t`\n```\n\n----------------------------------------\n\nTITLE: Loading Data from External File into MySQL Table\nDESCRIPTION: SQL command to load data from a text file into a MySQL database table. The command specifies the source file path and the target table in the database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow051.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nLOAD DATA INFILE '/tmp/foo.txt' INTO TABLE db.tbl;\n```\n\n----------------------------------------\n\nTITLE: Summarizing Network Connections in Plaintext\nDESCRIPTION: This snippet provides a summary of network connections, including connections from remote IP addresses, to local IP addresses, top local ports, and connection states.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n# Network Connections ########################################\n  Connections from remote IP addresses\n    10.10.1.31          1\n    10.10.4.99         60\n    10.10.8.124         1\n    34.83.110.184       1\n    35.164.176.181      1\n    49.206.39.19        1\n    127.0.0.1         800\n    172.17.0.3         15\n    185.117.120.39      1\n    186.48.240.119      2\n    189.4.76.225        2\n    208.85.240.29       1\n  Connections to local IP addresses\n    10.10.8.141        70\n    127.0.0.1         800\n    172.17.0.1         15\n  Connections to top 10 local ports\n    10050              60\n    37018              25\n    37022              25\n    37023              20\n    37024              20\n    37025              25\n    37026              20\n    37027              20\n    37028              25\n    37029              20\n  States of connections\n    CLOSE_WAIT          2\n    ESTABLISHED       800\n    FIN_WAIT2           1\n    LISTEN            100\n    TIME_WAIT          70\n```\n\n----------------------------------------\n\nTITLE: Executing Sleep Query in Test Database\nDESCRIPTION: This SQL query selects the result of the sleep() function from a table 'n' in the 'test' database. The sleep duration is set to 2 seconds, likely used for testing or debugging purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow021.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nuse test;\nselect sleep(2) from n;\n```\n\n----------------------------------------\n\nTITLE: MySQL Session Configuration\nDESCRIPTION: Initial session configuration settings for delayed threads and completion type\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output via PTDEBUG Environment Variable in Shell\nDESCRIPTION: This shell command demonstrates how to enable verbose debugging output for any Maatkit/Percona Toolkit tool (represented generically as 'mk-....') by setting the 'PTDEBUG' environment variable to '1' before execution. This is useful for troubleshooting issues with the tool. Requires a shell environment and the target Maatkit/Percona Toolkit tool to be installed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_issue_140.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPTDEBUG=1 mk-....\n```\n\n----------------------------------------\n\nTITLE: Describing InnoDB Buffer Statistics Table Structure\nDESCRIPTION: Shows the structure of innodb_buffer_stats_by_table and x$innodb_buffer_stats_by_table views. These views provide information about buffer pool usage per table including allocated space, data size, page counts, and cached rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc innodb_buffer_stats_by_table;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| object_name   | text          | YES  |     | NULL    |       |\n| allocated     | text          | YES  |     | NULL    |       |\n| data          | text          | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n8 rows in set (0.09 sec)\n\nmysql> desc x$innodb_buffer_stats_by_table;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| object_schema | text          | YES  |     | NULL    |       |\n| object_name   | text          | YES  |     | NULL    |       |\n| allocated     | decimal(43,0) | YES  |     | NULL    |       |\n| data          | decimal(43,0) | YES  |     | NULL    |       |\n| pages         | bigint(21)    | NO   |     | 0       |       |\n| pages_hashed  | bigint(21)    | NO   |     | 0       |       |\n| pages_old     | bigint(21)    | NO   |     | 0       |       |\n| rows_cached   | decimal(44,0) | NO   |     | 0       |       |\n+---------------+---------------+------+-----+---------+-------+\n8 rows in set (0.18 sec)\n```\n\n----------------------------------------\n\nTITLE: Insert Upper Boundary Checksum\nDESCRIPTION: Calculates and stores count of records above the upper boundary of a chunk. Uses FORCE INDEX for primary key and orders results by column 'i'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `issue_519`.`t` FORCE INDEX(`PRIMARY`) WHERE ((`i` > ?)) ORDER BY `i` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamp Data in SQL\nDESCRIPTION: Batch SQL insert statements containing user IDs and timestamps from February 15, 2006. Each row contains a user ID followed by a numeric ID and timestamp value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n3'),(14,255,'2006-02-15 10:05:03'),(14,258,'2006-02-15 10:05:03'),[...truncated...]\n```\n\n----------------------------------------\n\nTITLE: Class Method References in Natural Docs Parser\nDESCRIPTION: Throughout the documentation, class methods are referenced using arrow notation (->). These represent the key processing steps and method calls in the Natural Docs parsing pipeline.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/File Parsing.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nNaturalDocs::Parser->Parse()\nNaturalDocs::Parser->ParseForInformation()\nNaturalDocs::Parser->ParseForBuild()\nNaturalDocs::Languages::Base->ParseFile()\nNaturalDocs::Languages::Simple->ParseFile()\nNaturalDocs::Parser->OnComment()\nNaturalDocs::Parser->CleanComment()\nNaturalDocs::Parser::Native->IsMine()\nNaturalDocs::Parser::Native->ParseComment()\nNaturalDocs::Parser::JavaDoc->IsMine()\nNaturalDocs::Parser::JavaDoc->ParseComment()\nNaturalDocs::Parser::Native->FormatBody()\nNaturalDocs::Parser::Native->RichFormatTextBlock()\nNaturalDocs::Parser->RepairPackages()\nNaturalDocs::Parser->MergeAutoTopics()\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into vendor11gonzo Table - MySQL\nDESCRIPTION: INSERT statement adding a new record to the vendor11gonzo table in db3 database. Sets 'makef' column to empty string and 'bizzle' column to 'Exact'. Query execution time was 512us with 77us lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow032.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact')\n```\n\n----------------------------------------\n\nTITLE: Insert Query with Multiple Values\nDESCRIPTION: Inserts values into word3 and vid83 columns of db1.conch table. Execution time: 530us.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO db1.conch (word3, vid83)\nVALUES ('211', '18')\n```\n\n----------------------------------------\n\nTITLE: Slave Host Connection Details\nDESCRIPTION: Displays information about hosts connected as slaves to the master instance. This snippet shows details for one connected slave, including its Server ID, Host IP, Port, the Master ID it's connected to, and its unique Slave UUID. This output likely corresponds to a command like `SHOW SLAVE HOSTS`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# Slave Hosts ################################################\n*************************** 1. row ***************************\n Server_id: 12346\n      Host: 127.0.0.1\n      Port: 12346\n Master_id: 12345\nSlave_UUID: 05c34f44-20c0-11ee-ad4c-7404f1a10a4a\n```\n\n----------------------------------------\n\nTITLE: Ignoring Keywords in Natural Docs - Plain Text\nDESCRIPTION: This snippet demonstrates how to prevent certain keywords from being recognized by Natural Docs. It provides both a one-line and list syntax for specifying 'Ignore Keywords'. No programming dependencies are needed as this is part of the documentation configuration. Keywords listed will not be indexed or highlighted, allowing finer control over documentation parsing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/config/NaturalDocs/Topics.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# If you'd like to prevent keywords from being recognized by Natural Docs, you\n# can do it like this:\n# Ignore Keywords: [keyword], [keyword], ...\n#\n# Or you can use the list syntax like how they are defined:\n# Ignore Keywords:\n#    [keyword]\n#    [keyword], [plural keyword]\n#    ...\n\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Basic Usage Command\nDESCRIPTION: Basic command syntax for starting the MySQL server with optional configuration parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/home/daniel/mysql_binaries/mysql-5.1.34-linux-x86_64-glibc23/bin/mysqld [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'bar' in MySQL\nDESCRIPTION: This SQL query selects all columns from the 'bar' table in the 'db2' database. It's executed by the SQL_SLAVE user and has minimal impact on performance, similar to the previous query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-yymmdd.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: Creating ndb_binlog_index Table - MySQL SQL\nDESCRIPTION: Describes the `ndb_binlog_index` table, used for NDB Cluster replication support. Tracks binlog file positions, operations counts, epochs, GCI, and files for failover and replication management. Populated by the replication subsystem; inputs are internal NDB operations, outputs support replication state recovery.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint unsigned NOT NULL,\n  `inserts` int unsigned NOT NULL,\n  `updates` int unsigned NOT NULL,\n  `deletes` int unsigned NOT NULL,\n  `schemaops` int unsigned NOT NULL,\n  `orig_server_id` int unsigned NOT NULL,\n  `orig_epoch` bigint unsigned NOT NULL,\n  `gci` int unsigned NOT NULL,\n  `next_position` bigint unsigned NOT NULL,\n  `next_file` varchar(255) NOT NULL,\n  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=latin1 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC\n\n```\n\n----------------------------------------\n\nTITLE: Examining MySQL Backtrace for Crash Diagnosis\nDESCRIPTION: This snippet shows a backtrace of the MySQL server at the time of the crash. It includes memory addresses and function calls, which can be useful for developers in diagnosing the root cause of the crash.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog004.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nstack_bottom = 0x4e3b0f20 thread_stack 0x40000\n/usr/sbin/mysqld(my_print_stacktrace+0x35)[0x83bd65]\n/usr/sbin/mysqld(handle_segfault+0x31d)[0x58dd4d]\n/lib64/libpthread.so.0[0x2b869c7984c0]\n/lib64/libc.so.6(gsignal+0x35)[0x2b869d2ad215]\n/lib64/libc.so.6(abort+0x110)[0x2b869d2aecc0]\n/usr/sbin/mysqld[0x741e55]\n/usr/sbin/mysqld[0x742078]\n/usr/sbin/mysqld[0x744b65]\n/usr/sbin/mysqld[0x7300a9]\n/usr/sbin/mysqld[0x728337]\n/usr/sbin/mysqld[0x7d135e]\n/usr/sbin/mysqld[0x7d1439]\n/usr/sbin/mysqld[0x7d1b18]\n/usr/sbin/mysqld[0x732e45]\n/usr/sbin/mysqld[0x73690b]\n/usr/sbin/mysqld[0x70b9b8]\n/usr/sbin/mysqld(_ZN7handler7ha_openEP8st_tablePKcii+0x3e)[0x66a50e]\n/usr/sbin/mysqld(_Z21open_table_from_shareP3THDP14st_table_sharePKcjjjP8st_tableb+0x597)[0x5e6cb7]\n/usr/sbin/mysqld[0x5db6fe]\n/usr/sbin/mysqld(_Z10open_tableP3THDP10TABLE_LISTP11st_mem_rootPbj+0x59c)[0x5dd0ac]\n/usr/sbin/mysqld(_Z11open_tablesP3THDPP10TABLE_LISTPjj+0x4cf)[0x5dddcf]\n/usr/sbin/mysqld(_Z28open_and_lock_tables_derivedP3THDP10TABLE_LISTb+0x67)[0x5de087]\n/usr/sbin/mysqld[0x684cef]\n/usr/sbin/mysqld(_Z17mysql_check_tableP3THDP10TABLE_LISTP15st_ha_check_opt+0x5e)[0x685cce]\n/usr/sbin/mysqld(_Z21mysql_execute_commandP3THD+0x28d8)[0x59d4e8]\n/usr/sbin/mysqld(_Z11mysql_parseP3THDPKcjPS2_+0x1dc)[0x5a07bc]\n/usr/sbin/mysqld(_Z16dispatch_command19enum_server_commandP3THDPcj+0xf98)[0x5a1778]\n/usr/sbin/mysqld(_Z10do_commandP3THD+0xe7)[0x5a1cd7]\n/usr/sbin/mysqld(handle_one_connection+0x592)[0x594c62]\n/lib64/libpthread.so.0[0x2b869c790367]\n/lib64/libc.so.6(clone+0x6d)[0x2b869d34ff7d]\n```\n\n----------------------------------------\n\nTITLE: MySQL Sleep Query with Slow Query Log Details\nDESCRIPTION: A slow query log entry showing a sleep(11) command execution with detailed timing metrics. The query took approximately 11 seconds to execute with no rows affected and minimal data transfer.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow061.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET timestamp=1405360304;\nselect sleep(11);\n```\n\n----------------------------------------\n\nTITLE: MySQL Batch Insert Values with IDs and Timestamps\nDESCRIPTION: This snippet contains a partial SQL VALUES clause with tuples consisting of two numeric IDs and a timestamp. The data follows the format (ID, reference_ID, timestamp) and appears to be prepared for a batch insert operation in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n(164,324,'2006-02-15 10:05:03'),(164,347,'2006-02-15 10:05:03'),(164,367,'2006-02-15 10:05:03'),(164,431,'2006-02-15 10:05:03'),(164,448,'2006-02-15 10:05:03'),(164,469,'2006-02-15 10:05:03'),(164,545,'2006-02-15 10:05:03'),(164,610,'2006-02-15 10:05:03'),(164,613,'2006-02-15 10:05:03'),(164,673,'2006-02-15 10:05:03'),(164,681,'2006-02-15 10:05:03'),(164,698,'2006-02-15 10:05:03'),(164,801,'2006-02-15 10:05:03'),(164,820,'2006-02-15 10:05:03'),(164,832,'2006-02-15 10:05:03'),(164,834,'2006-02-15 10:05:03'),(164,851,'2006-02-15 10:05:03'),(164,884,'2006-02-15 10:05:03'),(164,908,'2006-02-15 10:05:03'),(164,957,'2006-02-15 10:05:03'),(164,984,'2006-02-15 10:05:03'),(165,72,'2006-02-15 10:05:03'),(165,95,'2006-02-15 10:05:03'),(165,146,'2006-02-15 10:05:03'),(165,204,'2006-02-15 10:05:03'),(165,253,'2006-02-15 10:05:03'),(165,286,'2006-02-15 10:05:03'),(165,360,'2006-02-15 10:05:03'),(165,375,'2006-02-15 10:05:03'),(165,395,'2006-02-15 10:05:03'),(165,421,'2006-02-15 10:05:03'),(165,437,'2006-02-15 10:05:03'),(165,473,'2006-02-15 10:05:03'),(165,607,'2006-02-15 10:05:03'),(165,644,'2006-02-15 10:05:03'),(165,659,'2006-02-15 10:05:03'),(165,693,'2006-02-15 10:05:03'),(165,737,'2006-02-15 10:05:03'),(165,779,'2006-02-15 10:05:03'),(165,798,'2006-02-15 10:05:03'),(165,807,'2006-02-15 10:05:03'),(165,809,'2006-02-15 10:05:03'),(165,832,'2006-02-15 10:05:03'),(165,833,'2006-02-15 10:05:03'),(165,947,'2006-02-15 10:05:03'),(165,948,'2006-02-15 10:05:03'),(165,962,'2006-02-15 10:05:03'),(166,25,'2006-02-15 10:05:03'),(166,38,'2006-02-15 10:05:03'),(166,55,'2006-02-15 10:05:03'),(166,61,'2006-02-15 10:05:03'),(166,68,'2006-02-15 10:05:03'),(166,86,'2006-02-15 10:05:03'),(166,146,'2006-02-15 10:05:03'),(166,255,'2006-02-15 10:05:03'),(166,297,'2006-02-15 10:05:03'),(166,306,'2006-02-15 10:05:03'),(166,326,'2006-02-15 10:05:03'),(166,361,'2006-02-15 10:05:03'),(166,366,'2006-02-15 10:05:03'),(166,426,'2006-02-15 10:05:03'),(166,580,'2006-02-15 10:05:03'),(166,622,'2006-02-15 10:05:03'),(166,674,'2006-02-15 10:05:03'),(166,714,'2006-02-15 10:05:03'),(166,788,'2006-02-15 10:05:03'),(166,867,'2006-02-15 10:05:03'),(166,944,'2006-02-15 10:05:03'),(166,1000,'2006-02-15 10:05:03'),(167,17,'2006-02-15 10:05:03'),(167,25,'2006-02-15 10:05:03'),(167,63,'2006-02-15 10:05:03'),(167,72,'2006-02-15 10:05:03'),(167,107,'2006-02-15 10:05:03'),(167,120,'2006-02-15 10:05:03'),(167,191,'2006-02-15 10:05:03'),(167,294,'2006-02-15 10:05:03'),(167,319,'2006-02-15 10:05:03'),(167,339,'2006-02-15 10:05:03'),(167,341,'2006-02-15 10:05:03'),(167,496,'2006-02-15 10:05:03'),(167,554,'2006-02-15 10:05:03'),(167,626,'2006-02-15 10:05:03'),(167,628,'2006-02-15 10:05:03'),(167,672,'2006-02-15 10:05:03'),(167,692,'2006-02-15 10:05:03'),(167,717,'2006-02-15 10:05:03'),(167,734,'2006-02-15 10:05:03'),(167,794,'2006-02-15 10:05:03'),(167,800,'2006-02-15 10:05:03'),(167,802,'2006-02-15 10:05:03'),(167,856,'2006-02-15 10:05:03'),(167,864,'2006-02-15 10:05:03'),(167,882,'2006-02-15 10:05:03'),(167,923,'2006-02-15 10:05:03'),(168,32,'2006-02-15 10:05:03'),(168,56,'2006-02-15 10:05:03'),(168,92,'2006-02-15 10:05:03'),(168,115,'2006-02-15 10:05:03'),(168,188,'2006-02-15 10:05:03'),(168,196,'2006-02-15 10:05:03'),(168,208,'2006-02-15 10:05:03'),(168,237,'2006-02-15 10:05:03'),(168,241,'2006-02-15 10:05:03'),(168,255,'2006-02-15 10:05:03'),(168,305,'2006-02-15 10:05:03'),(168,336,'2006-02-15 10:05:03'),(168,387,'2006-02-15 10:05:03'),(168,433,'2006-02-15 10:05:03'),(168,438,'2006-02-15 10:05:03'),(168,519,'2006-02-15 10:05:03'),(168,602,'2006-02-15 10:05:03'),(168,619,'2006-02-15 10:05:03'),(168,626,'2006-02-15 10:05:03'),(168,652,'2006-02-15 10:05:03'),(168,678,'2006-02-15 10:05:03'),(168,685,'2006-02-15 10:05:03'),(168,804,'2006-02-15 10:05:03'),(168,807,'2006-02-15 10:05:03'),(168,826,'2006-02-15 10:05:03'),(168,841,'2006-02-15 10:05:03'),(168,886,'2006-02-15 10:05:03'),(168,889,'2006-02-15 10:05:03'),(168,892,'2006-02-15 10:05:03'),(168,927,'2006-02-15 10:05:03'),(168,959,'2006-02-15 10:05:03'),(169,6,'2006-02-15 10:05:03'),(169,78,'2006-02-15 10:05:03'),(169,93,'2006-02-15 10:05:03'),(169,246,'2006-02-15 10:05:03'),(169,248,'2006-02-15 10:05:03'),(169,289,'2006-02-15 10:05:03'),(169,301,'2006-02-15 10:05:03'),(169,326,'2006-02-15 10:05:03'),(169,349,'2006-02-15 10:05:03'),(169,372,'2006-02-15 10:05:03'),(169,398,'2006-02-15 10:05:03'),(169,434,'2006-02-15 10:05:03'),(169,505,'2006-02-15 10:05:03'),(169,564,'2006-02-15 10:05:03'),(169,571,'2006-02-15 10:05:03'),(169,634,'2006-02-15 10:05:03'),(169,642,'2006-02-15 10:05:03'),(169,673,'2006-02-15 10:05:03'),(169,694,'2006-02-15 10:05:03'),(169,727,'2006-02-15 10:05:03'),(169,778,'2006-02-15 10:05:03'),(169,815,'2006-02-15 10:05:03'),(169,847,'2006-02-15 10:05:03'),(169,849,'2006-02-15 10:05:03'),(169,894,'2006-02-15 10:05:03'),(169,897,'2006-02-15 10:05:03'),(169,954,'2006-02-15 10:05:03'),(169,992,'2006-02-15 10:05:03'),(169,998,'2006-02-15 10:05:03'),(170,7,'2006-02-15 10:05:03'),(170,15,'2006-02-15 10:05:03'),(170,27,'2006-02-15 10:05:03'),(170,33,'2006-02-15 10:05:03'),(170,102,'2006-02-15 10:05:03'),(170,139,'2006-02-15 10:05:03'),(170,180,'2006-02-15 10:05:03'),(170,184,'2006-02-15 10:05:03'),(170,212,'2006-02-15 10:05:03'),(170,299,'2006-02-15 10:05:03'),(170,322,'2006-02-15 10:05:03'),(170,358,'2006-02-15 10:05:03'),(170,416,'2006-02-15 10:05:03'),(170,508,'2006-02-15 10:05:03'),(170,537,'2006-02-15 10:05:03'),(170,705,'2006-02-15 10:05:03'),(170,758,'2006-02-15 10:05:03'),(170,764,'2006-02-15 10:05:03'),(170,868,'2006-02-15 10:05:03'),(170,877,'2006-02-15 10:05:03'),(170,886,'2006-02-15 10:05:03'),(170,925,'2006-02-15 10:05:03'),(170,993,'2006-02-15 10:05:03'),(170,996,'2006-02-15 10:05:03'),(171,49,'2006-02-15 10:05:03'),(171,146,'2006-02-15 10:05:03'),(171,166,'2006-02-15 10:05:03'),(171,181,'2006-02-15 10:05:03'),(171,219,'2006-02-15 10:05:03'),(171,273,'2006-02-15 10:05:03'),(171,296,'2006-02-15 10:05:03'),(171,318,'2006-02-15 10:05:03'),(171,342,'2006-02-15 10:05:03'),(171,397,'2006-02-15 10:05:03'),(171,447,'2006-02-15 10:05:03'),(171,450,'2006-02-15 10:05:03'),(171,466,'2006-02-15 10:05:03'),(171,549,'2006-02-15 10:05:03'),(171,560,'2006-02-15 10:05:03'),(171,566,'2006-02-15 10:05:03'),(171,608,'2006-02-15 10:05:03'),(171,625,'2006-02-15 10:05:03'),(171,645,'2006-02-15 10:05:03'),(171,701,'2006-02-15 10:05:03'),(171,761,'2006-02-15 10:05:03'),(171,779,'2006-02-15 10:05:03'),(171,849,'2006-02-15 10:05:03'),(171,872,'2006-02-15 10:05:03'),(171,892,'2006-02-15 10:05:03'),(171,898,'2006-02-15 10:05:03'),(171,903,'2006-02-15 10:05:03'),(171,953,'2006-02-15 10:05:03'),(172,57,'2006-02-15 10:05:03'),(172,100,'2006-02-15 10:05:03'),(172,148,'2006-02-15 10:05:03'),(172,215,'2006-02-15 10:05:03'),(172,302,'2006-02-15 10:05:03'),(172,345,'2006-02-15 10:05:03'),(172,368,'2006-02-15 10:05:03'),(172,385,'2006-02-15 10:05:03'),(172,423,'2006-02-15 10:05:03'),(172,487,'2006-02-15 10:05:03'),(172,493,'2006-02-15 10:05:03'),(172,529,'2006-02-15 10:05:03'),(172,538,'2006-02-15 10:05:03'),(172,567,'2006-02-15 10:05:03'),(172,609,'2006-02-15 10:05:03'),(172,639,'2006-02-15 10:05:03'),(172,649,'2006-02-15 10:05:03'),(172,661,'2006-02-15 10:05:03'),(172,667,'2006-02-15 10:05:03'),(172,710,'2006-02-15 10:05:03'),(172,744,'2006-02-15 10:05:03'),(172,758,'2006-02-15 10:05:03'),(172,771,'2006-02-15 10:05:03'),(172,833,'2006-02-15 10:05:03'),(172,959,'2006-02-15 10:05:03'),(173,49,'2006-02-15 10:05:03'),(173,55,'2006-02-15 10:05:03'),(173,74,'2006-02-15 10:05:03'),(173,80,'2006-02-15 10:05:03'),(173,106,'2006-02-15 10:05:03'),(173,154,'2006-02-15 10:05:03'),(173,162,'2006-02-15 10:05:03'),(173,188,'2006-02-15 10:05:03'),(173,235,'2006-02-15 10:05:03'),(173,313,'2006-02-15 10:05:03'),(173,379,'2006-02-15 10:05:03'),(173,405,'2006-02-15 10:05:03'),(173,491,'2006-02-15 10:05:03'),(173,496,'2006-02-15 10:05:03'),(173,529,'2006-02-15 10:05:03'),(173,550,'2006-02-15 10:05:03'),(173,564,'2006-02-15 10:05:03'),(173,571,'2006-02-15 10:05:03'),(173,592,'2006-02-15 10:05:03'),(173,688,'2006-02-15 10:05:03'),(173,753,'2006-02-15 10:05:03'),(173,757,'2006-02-15 10:05:03'),(173,852,'2006-02-15 10:05:03'),(173,857,'2006-02-15 10:05:03'),(173,921,'2006-02-15 10:05:03'),(173,928,'2006-02-15 10:05:03'),(173,933,'2006-02-15 10:05:03'),(174,11,'2006-02-15 10:05:03'),(174,61,'2006-02-15 10:05:03'),(174,168,'2006-02-15 10:05:03'),(174,298,'2006-02-15 10:05:03'),(174,352,'2006-02-15 10:05:03'),(174,442,'2006-02-15 10:05:03'),(174,451,'2006-02-15 10:05:03'),(174,496,'2006-02-15 10:05:03'),(174,610,'2006-02-15 10:05:03'),(174,618,'2006-02-15 10:05:03'),(174,622,'2006-02-15 10:05:03'),(174,659,'2006-02-15 10:05:03'),(174,677,'2006-02-15 10:05:03'),(174,705,'2006-02-15 10:05:03'),(174,722,'2006-02-15 10:05:03'),(174,780,'2006-02-15 10:05:03'),(174,797,'2006-02-15 10:05:03'),(174,809,'2006-02-15 10:05:03'),(174,827,'2006-02-15 10:05:03'),(174,830,'2006-02-15 10:05:03'),(174,852,'2006-02-15 10:05:03'),(174,853,'2006-02-15 10:05:03'),(174,879,'2006-02-15 10:05:03'),(174,982,'2006-02-15 10:05:03'),(175,9,'2006-02-15 10:05:03'),(175,29,'2006-02-15 10:05:03'),(175,67,'2006-02-15 10:05:03'),(175,129,'2006-02-15 10:05:03'),(175,155,'2006-02-15 10:05:03'),(175,190,'2006-02-15 10:05:03'),(175,191,'2006-02-15 10:05:03'),(175,362,'2006-02-15 10:05:03'),(175,405,'2006-02-15 10:05:03'),(175,424,'2006-02-15 10:05:03'),(175,439,'2006-02-15 10:05:03'),(175,442,'2006-02-15 10:05:03'),(175,483,'2006-02-15 10:05:03'),(175,591,'2006-02-15 10:05:03'),(175,596,'2006-02-15 10:05:03'),(175,616,'2006-02-15 10:05:03'),(175,719,'2006-02-15 10:05:03'),(175,729,'2006-02-15 10:05:03'),(175,772,'2006-02-15 10:05:03'),(175,778,'2006-02-15 10:05:03'),(175,828,'2006-02-15 10:05:03'),(175,842,'2006-02-15 10:05:03'),(175,890,'2006-02-15 10:05:03'),(175,908,'2006-02-15 10:05:03'),(175,977,'2006-02-15 10:05:03'),(175,978,'2006-02-15 10:05:03'),(175,998,'2006-02-15 10:05:03'),(176,13,'2006-02-15 10:05:03'),(176,73,'2006-02-15 10:05:03'),(176,89,'2006-02-15 10:05:03'),(176,150,'2006-02-15 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Filesystem Usage Statistics in Unix-like Systems\nDESCRIPTION: This snippet shows the output of a command like 'df' (disk free) in Unix-like systems. It displays information about the disk space usage of a network-mounted filesystem, including the total size, used space, available space, and usage percentage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/bash/diskspace002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFilesystem 1024-blocks Used Available Capacity Mounted on\n10.10.10.1:/vol/data_logs_01 498073600 235646464 262427136 48% /var/log\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet Hexdump Between Localhost Connections\nDESCRIPTION: A series of TCP packet hexdumps showing network traffic between 127.0.0.1 on ports 12345 and 36777. The data includes full packet headers and payload information in hexadecimal format with timestamps indicating the communication sequence.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump019.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n2009-08-12 17:24:00.010811 IP 127.0.0.1.12345 > 127.0.0.1.36777: tcp 0\n\t0x0000:  4508 0034 5877 4000 4006 e442 7f00 0001\n\t0x0010:  7f00 0001 3039 8fa9 562a d060 5665 a89f\n\t0x0020:  8010 0182 17d5 0000 0101 080a 0081 bc77\n\t0x0030:  0081 bc77\n2009-08-12 17:24:00.010863 IP 127.0.0.1.36777 > 127.0.0.1.12345: tcp 2146\n\t0x0000:  4508 0896 f13f 4000 4006 4318 7f00 0001\n\t0x0010:  7f00 0001 8fa9 3039 5665 a89f 562a d060\n\t0x0020:  8018 0101 068b 0000 0101 080a 0081 bc77\n\t0x0030:  0081 bc77 4958 4943 3e20 6669 6e69 7368\n\t0x0040:  6564 2075 7020 312e 3437 2070 6572 6365\n\t0x0050:  6e74 2e20 2256 616c 6964 6174 696e 6720\n\t0x0060:  7768 6174 2074 6865 2065 636f 6e6f 6d69\n\t0x0070:  6320 6461 7461 2061 7320 6c61 7465 2068\n\t0x0080:  6173 2073 686f 776e 2c20 7468 6520 4665\n\t0x0090:  6420 6573 7365 6e74 6961 6c6c 7920 7369\n\t0x00a0:  676e 616c 6c65 6420 746f 2074 6865 206d\n\t0x00b0:  6172 6b65 7420 7468 6174 2074 6869 7320\n\t0x00c0:  7265 6365 7373 696f 6e20 6973 206f 7665\n\t0x00d0:  7220 6279 2063 6861 6e67 696e 6720 6974\n\t0x00e0:  7320 746f 6e65 2066 726f 6d20 636f 6e74\n\t0x00f0:  7261 6374 696f 6e20 746f 206c 6576 656c\n\t0x0100:  6c69 6e67 206f 7574 2c22 2073 6169 6420\n\t0x0110:  4275 7274 2057 6869 7465 2c20 4368 6965\n\t0x0120:  6620 496e 7665 7374 6d65 6e74 204f 6666\n\t0x0130:  6963 6572 2061 7420 4c50 4c20 4669 6e61\n\t0x0140:  6e63 6961 6c20 696e 2042 6f73 746f 6e2e\n\t0x0150:  204e 4557 2059 4f52 4b20 5c28 5265 7574\n\t0x0160:  6572 735c 2920 2d20 552e 532e 2067 6f76\n\t0x0170:  6572 6e6d 656e 7420 626f 6e64 7320 6665\n\t0x0180:  6c6c 2077 6869 6c65 2073 746f 636b 7320\n\t0x0190:  6578 7465 6e64 6564 2067 6169 6e73 206f\n\t0x01a0:  6e20 5765 646e 6573 6461 7920 6166 7465\n\t0x01b0:  7220 7468 6520 4665 6465 7261 6c20 5265\n\t0x01c0:  7365 7276 6520 7361 6964 2069 6e20 6120\n\t0x01d0:  7374 6174 656d 656e 7420 7769 6c6c 2067\n\t0x01e0:  7261 6475 616c 6c79 2073 6c6f 7720 6974\n\t0x01f0:  7320 7061 6365 206f 6620 6275 7969 6e67\n\t0x0200:  2067 6f76 6572 6e6d 656e 7420 6465 6274\n\t0x0210:  2061 7320 7468 6520 6563 6f6e 6f6d 7920\n\t0x0220:  7761 7320 6c65 7665 6c6c 696e 6720 6f75\n\t0x0230:  742e 2054 6865 2046 6564 2066 696e 6973\n\t0x0240:  6865 6420 6120 7477 6f2d 6461 7920 706f\n\t0x0250:  6c69 6379 206d 6565 7469 6e67 206f 6e20\n\t0x0260:  5765 646e 6573 6461 792c 2061 6e64 206c\n\t0x0270:  6566 7420 6265 6e63 686d 6172 6b20 696e\n\t0x0280:  7465 7265 7374 2072 6174 6573 206e 6561\n\t0x0290:  7220 7a65 726f 2e20 5468 6520 4665 6420\n\t0x02a0:  616c 736f 2065 7874 656e 6465 6420 7468\n\t0x02b0:  6520 6475 7261 7469 6f6e 2062 7574 206e\n\t0x02c0:  6f74 2074 6865 2073 697a 6520 6f66 2069\n\t0x02d0:  7473 2070 726f 6772 616d 2074 6f20 6275\n\t0x02e0:  7920 552e 532e 2024 3330 3020 626c 6e20\n\t0x02f0:  2831 3832 2062 696c 6c69 6f6e 2070 6f75\n\t0x0300:  6e64 7329 206f 6620 552e 532e 2054 7265\n\t0x0310:  6173 7572 6965 732e 2022 5468 6520 6661\n\t0x0320:  6374 2074 6861 7420 7468 6579 2061 7265\n\t0x0330:  2065 7874 656e 6469 6e67 2074 6865 2074\n\t0x0340:  696d 6574 6162 6c65 2c20 6275 7420 6e6f\n\t0x0350:  7420 7468 6520 616d 6f75 6e74 206f 6620\n\t0x0360:  5472 6561 7375 7279 2070 7572 6368 6173\n\t0x0370:  6573 2073 686f 7773 2074 6861 7420 7468\n\t0x0380:  6579 2061 7265 2073 6565 696e 6720 736f\n\t0x0390:  6d65 206f 6620 7468 6520 7369 676e 7320\n\t0x03a0:  6f66 2074 6865 2072 6563 6f76 6572 7920\n\t0x03b0:  7468 6174 2074 6865 795c 2772 6520 7472\n\t0x03c0:  7969 6e67 2074 6f20 6372 6561 7465 2c20\n\t0x03d0:  616e 6420 7761 6e74 2074 6f20 6c65 7420\n\t0x03e0:  7468 6520 6561 726c 6965 7220 7075 7263\n\t0x03f0:  6861 7365 7320 7365 6173 6f6e 2c22 2073\n\t0x0400:  6169 6420 4461 6e69 656c 2050 656e 726f\n\t0x0410:  642c 2073 656e 696f 7220 696e 6475 7374\n\t0x0420:  7279 2061 6e61 6c79 7374 2061 7420 4361\n\t0x0430:  6c69 666f 726e 6961 2043 7265 6469 7420\n\t0x0440:  556e 696f 6e20 4c65 6167 7565 2069 6e20\n\t0x0450:  4f6e 7461 7269 6f2c 2043 616c 6966 6f72\n\t0x0460:  6e69 612e 2054 6865 2062 656e 6368 6d61\n\t0x0470:  726b 2031 302d 7965 6172 2055 2e53 2e20\n\t0x0480:  5472 6561 7375 7279 206e 6f74 6520 6665\n\t0x0490:  6c6c 2061 6674 6572 2074 6865 2073 7461\n\t0x04a0:  7465 6d65 6e74 2061 7320 626f 6e64 2064\n\t0x04b0:  6561 6c65 7273 2077 6572 6520 6469 7361\n\t0x04c0:  7070 6f69 6e74 6564 2074 6865 2046 6564\n\t0x04d0:  2064 6964 206e 6f74 2069 6e63 7265 6173\n\t0x04e0:  6520 7468 6520 616d 6f75 6e74 206f 6620\n\t0x04f0:  6465 6274 2069 7420 706c 616e 7320 746f\n\t0x0500:  2062 7579 2e20 5468 6520 6265 6e63 686d\n\t0x0510:  6172 6b20 656e 6465 6420 646f 776e 2031\n\t0x0520:  312f 3332 2c20 7769 7468 2074 6865 2079\n\t0x0530:  6965 6c64 2061 7420 332e 3732 2070 6572\n\t0x0540:  6365 6e74 2e20 5468 6520 4665 6420 6c61\n\t0x0550:  756e 6368 6564 2074 6865 2064 6562 7420\n\t0x0560:  6275 7969 6e67 2070 726f 6772 616d 2069\n\t0x0570:  6e20 4d61 7263 6820 7768 656e 2069 7420\n\t0x0580:  6861 6420 616c 7265 6164 7920 6368 6f70\n\t0x0590:  7065 6420 696e 7465 7265 7374 2072 6174\n\t0x05a0:  6573 2074 6f20 6e65 6172 207a 6572 6f20\n\t0x05b0:  6275 7420 7761 6e74 6564 2074 6f20 6f70\n\t0x05c0:  656e 2074 6865 206d 6f6e 6579 2074 6170\n\t0x05d0:  7320 6576 656e 2077 6964 6572 2074 6f20\n\t0x05e0:  7375 7070 6f72 7420 7468 6520 7374 7275\n\t0x05f0:  6767 6c69 6e67 2065 636f 6e6f 6d79 2e20\n\t0x0600:  5468 6520 4665 645c 2773 2054 7265 6173\n\t0x0610:  7572 7920 7075 7263 6861 7365 7320 7765\n\t0x0620:  7265 2070 7265 7669 6f75 736c 7920 7363\n\t0x0630:  6865 6475 6c65 6420 746f 2065 7870 6972\n\t0x0640:  6520 696e 2053 6570 7465 6d62 6572 2e20\n\t0x0650:  552e 532e 2073 746f 636b 7320 636f 6e74\n\t0x0660:  696e 7565 6420 746f 2072 6973 6520 6166\n\t0x0670:  7465 7220 7468 6520 4665 6420 7361 6964\n\t0x0680:  2074 6865 2065 636f 6e6f 6d79 2077 6173\n\t0x0690:  2073 686f 7769 6e67 2073 6967 6e73 206f\n\t0x06a0:  6620 6c65 7665 6c6c 696e 6720 6f75 7420\n\t0x06b0:  6166 7465 7220 3230 206d 6f6e 7468 7320\n\t0x06c0:  6f66 2072 6563 6573 7369 6f6e 2e20 5468\n\t0x06d0:  6520 446f 7720 4a6f 6e65 7320 696e 6475\n\t0x06e0:  7374 7269 616c 2061 7665 7261 6765 203c\n\t0x06f0:  2e44 4a49 3e20 636c 6f73 6564 2075 7020\n\t0x0700:  312e 3330 2070 6572 6365 6e74 2c20 5468\n\t0x0710:  6520 5374 616e 6461 7264 2026 2050 6f6f\n\t0x0720:  725c 2773 2035 3030 2049 6e64 6578 203c\n\t0x0730:  2e53 5058 3e20 656e 6465 6420 7570 2031\n\t0x0740:  2e31 3520 7065 7263 656e 7420 616e 6420\n\t0x0750:  5468 6520 4e61 7364 6171 2043 6f6d 706f\n\t0x0760:  7369 7465 2049 6e64 6578 203c 2e49 5849\n\t0x0770:  433e 2066 696e 6973 6865 6420 7570 2031\n\t0x0780:  2e34 3720 7065 7263 656e 742e 2022 5661\n\t0x0790:  6c69 6461 7469 6e67 2077 6861 7420 7468\n\t0x07a0:  6520 6563 6f6e 6f6d 6963 2064 6174 6120\n\t0x07b0:  6173 206c 6174 6520 6861 7320 7368 6f77\n\t0x07c0:  6e2c 2074 6865 2046 6564 2065 7373 656e\n\t0x07d0:  7469 616c 6c79 2073 6967 6e61 6c6c 6564\n\t0x07e0:  2074 6f20 7468 6520 6d61 726b 6574 2074\n\t0x07f0:  6861 7420 7468 6973 2072 6563 6573 7369\n\t0x0800:  6f6e 2069 7320 6f76 6572 2062 7920 6368\n\t0x0810:  616e 6769 6e67 2069 7473 2074 6f6e 6520\n\t0x0820:  6672 6f6d 2063 6f6e 7472 6163 7469 6f6e\n\t0x0830:  2074 6f20 6c65 7665 6c6c 696e 6720 6f75\n\t0x0840:  742c 2220 7361 6964 2042 7572 7420 5768\n\t0x0850:  6974 652c 2043 6869 6566 2049 6e76 6573\n\t0x0860:  746d 656e 7420 4f66 6669 6365 7220 6174\n\t0x0870:  204c 504c 2046 696e 616e 6369 616c 2069\n\t0x0880:  6e20 426f 7374 6f6e 2e2d 2d54 4845 2045\n\t0x0890:  4e44 2d2d 2729\n2009-08-12 17:24:00.011400 IP 127.0.0.1.12345 > 127.0.0.1.36777: tcp 11\n\t0x0000:  4508 003f 5878 4000 4006 e436 7f00 0001\n\t0x0010:  7f00 0001 3039 8fa9 562a d060 5665 b101\n\t0x0020:  8018 0182 fe33 0000 0101 080a 0081 bc77\n\t0x0030:  0081 bc77 0700 0001 0001 0002 0000 00\n2009-08-12 17:24:00.011409 IP 127.0.0.1.36777 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4508 0034 f140 4000 4006 4b79 7f00 0001\n\t0x0010:  7f00 0001 8fa9 3039 5665 b101 562a d06b\n\t0x0020:  8010 0101 0fe9 0000 0101 080a 0081 bc77\n\t0x0030:  0081 bc77\n```\n\n----------------------------------------\n\nTITLE: Creating the `help_relation` Table - MySQL Help Keyword-Topic Mapping - SQL\nDESCRIPTION: Constructs the `help_relation` table to establish a many-to-many mapping between help topics and keywords in MySQL's internal help system. The composite primary key on (help_keyword_id, help_topic_id) ensures fast lookups and no duplicates. Built with MyISAM storage, used by the help subsystem for mapping topic references.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Analyzing InnoDB Semaphore Wait Details (Text)\nDESCRIPTION: This text snippet shows multiple threads waiting for an S-lock (shared lock) on an RW-latch (Read-Write latch) located at memory address 0x905d33d0 ('&new_index->lock'). The wait occurs in the source file 'btr/btr0cur.c' at line 457. A writer thread (ID 139960165583184) holds an exclusive lock, causing the readers to wait. This pattern indicates lock contention on index operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139960926959952 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 140055942560080 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139960966629712 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 140055958800720 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139961183951184 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139960513390928 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139960924031312 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\nLANGUAGE: text\nCODE:\n```\n--Thread 139960959174992 has waited at btr/btr0cur.c line 457 for 1.0000 seconds the semaphore:\nS-lock on RW-latch at 0x905d33d0 '&new_index->lock'\na writer (thread id 139960165583184) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\n----------------------------------------\n\nTITLE: Querying Table 'bar'\nDESCRIPTION: Simple SELECT query on table 'bar' executed by SQL_SLAVE user in db1 database. Query took 12us with no lock time and returned no rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30s-3iter.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: Debug Environment Variable Usage for Percona Toolkit\nDESCRIPTION: Example showing how to enable verbose debugging output in Maatkit tools using the PTDEBUG environment variable\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_03.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPTDEBUG=1 mk-....\n```\n\n----------------------------------------\n\nTITLE: Displaying Row Differences in Text Output\nDESCRIPTION: This text snippet shows the differing rows found when comparing the results of the preceding SQL query across different hosts. The '-- 1.' indicates the first set of differences, '@ first 3 of 5 missing rows' describes the nature of the difference (rows missing on one host), and the lines starting with '>' represent the actual row data (columns: id, value, timestamp) present on one host but absent on the other.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/002/select_missing_rows_results.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-- 1.\n\n@ first 3 of 5 missing rows\n> 7,g,2013-01-01 00:00:07\n> 8,h,2013-01-01 00:00:08\n> 9,i,2013-01-01 00:00:09\n```\n\n----------------------------------------\n\nTITLE: SQL Row Insert Values for Database Table\nDESCRIPTION: This code snippet contains values portion of an SQL INSERT statement with three columns: two numeric IDs and a timestamp. All rows use the same timestamp value of '2006-02-15 10:05:03' while the numeric IDs vary.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n57,'2006-02-15 10:05:03'),(129,910,'2006-02-15 10:05:03'),(129,920,'2006-02-15 10:05:03'),(129,938,'2006-02-15 10:05:03'),(129,962,'2006-02-15 10:05:03'),(130,9,'2006-02-15 10:05:03'),(130,26,'2006-02-15 10:05:03'),(130,37,'2006-02-15 10:05:03'),(130,43,'2006-02-15 10:05:03'),(130,49,'2006-02-15 10:05:03'),(130,57,'2006-02-15 10:05:03'),(130,107,'2006-02-15 10:05:03'),(130,112,'2006-02-15 10:05:03'),(130,208,'2006-02-15 10:05:03'),(130,326,'2006-02-15 10:05:03'),(130,375,'2006-02-15 10:05:03'),(130,416,'2006-02-15 10:05:03'),(130,431,'2006-02-15 10:05:03'),(130,452,'2006-02-15 10:05:03'),(130,453,'2006-02-15 10:05:03'),(130,478,'2006-02-15 10:05:03'),(130,507,'2006-02-15 10:05:03'),(130,525,'2006-02-15 10:05:03'),(130,549,'2006-02-15 10:05:03'),(130,592,'2006-02-15 10:05:03'),(130,702,'2006-02-15 10:05:03'),(130,725,'2006-02-15 10:05:03'),(130,764,'2006-02-15 10:05:03'),(130,809,'2006-02-15 10:05:03'),(130,869,'2006-02-15 10:05:03'),(130,930,'2006-02-15 10:05:03'),(130,981,'2006-02-15 10:05:03'),(131,48,'2006-02-15 10:05:03'),(131,66,'2006-02-15 10:05:03'),(131,94,'2006-02-15 10:05:03'),(131,120,'2006-02-15 10:05:03'),(131,147,'2006-02-15 10:05:03'),(131,206,'2006-02-15 10:05:03'),(131,320,'2006-02-15 10:05:03'),(131,383,'2006-02-15 10:05:03'),(131,432,'2006-02-15 10:05:03'),(131,436,'2006-02-15 10:05:03'),(131,450,'2006-02-15 10:05:03'),(131,479,'2006-02-15 10:05:03'),(131,494,'2006-02-15 10:05:03'),(131,515,'2006-02-15 10:05:03'),(131,539,'2006-02-15 10:05:03'),(131,590,'2006-02-15 10:05:03'),(131,647,'2006-02-15 10:05:03'),(131,693,'2006-02-15 10:05:03'),(131,713,'2006-02-15 10:05:03'),(131,770,'2006-02-15 10:05:03'),(131,798,'2006-02-15 10:05:03'),(131,809,'2006-02-15 10:05:03'),(131,875,'2006-02-15 10:05:03'),(131,881,'2006-02-15 10:05:03'),(131,921,'2006-02-15 10:05:03'),(132,81,'2006-02-15 10:05:03'),(132,82,'2006-02-15 10:05:03'),(132,133,'2006-02-15 10:05:03'),(132,156,'2006-02-15 10:05:03'),(132,162,'2006-02-15 10:05:03'),(132,311,'2006-02-15 10:05:03'),(132,345,'2006-02-15 10:05:03'),(132,377,'2006-02-15 10:05:03'),(132,410,'2006-02-15 10:05:03'),(132,538,'2006-02-15 10:05:03'),(132,562,'2006-02-15 10:05:03'),(132,586,'2006-02-15 10:05:03'),(132,626,'2006-02-15 10:05:03'),(132,637,'2006-02-15 10:05:03'),(132,698,'2006-02-15 10:05:03'),(132,756,'2006-02-15 10:05:03'),(132,806,'2006-02-15 10:05:03'),(132,897,'2006-02-15 10:05:03'),(132,899,'2006-02-15 10:05:03'),(132,904,'2006-02-15 10:05:03'),(132,930,'2006-02-15 10:05:03'),(132,987,'2006-02-15 10:05:03'),(133,7,'2006-02-15 10:05:03'),(133,51,'2006-02-15 10:05:03'),(133,133,'2006-02-15 10:05:03'),(133,172,'2006-02-15 10:05:03'),(133,210,'2006-02-15 10:05:03'),(133,270,'2006-02-15 10:05:03'),(133,280,'2006-02-15 10:05:03'),(133,286,'2006-02-15 10:05:03'),(133,338,'2006-02-15 10:05:03'),(133,342,'2006-02-15 10:05:03'),(133,351,'2006-02-15 10:05:03'),(133,368,'2006-02-15 10:05:03'),(133,385,'2006-02-15 10:05:03'),(133,390,'2006-02-15 10:05:03'),(133,397,'2006-02-15 10:05:03'),(133,410,'2006-02-15 10:05:03'),(133,452,'2006-02-15 10:05:03'),(133,463,'2006-02-15 10:05:03'),(133,514,'2006-02-15 10:05:03'),(133,588,'2006-02-15 10:05:03'),(133,594,'2006-02-15 10:05:03'),(133,635,'2006-02-15 10:05:03'),(133,652,'2006-02-15 10:05:03'),(133,727,'2006-02-15 10:05:03'),(133,806,'2006-02-15 10:05:03'),(133,868,'2006-02-15 10:05:03'),(133,882,'2006-02-15 10:05:03'),(133,894,'2006-02-15 10:05:03'),(133,933,'2006-02-15 10:05:03'),(133,952,'2006-02-15 10:05:03'),(134,132,'2006-02-15 10:05:03'),(134,145,'2006-02-15 10:05:03'),(134,161,'2006-02-15 10:05:03'),(134,219,'2006-02-15 10:05:03'),(134,243,'2006-02-15 10:05:03'),(134,250,'2006-02-15 10:05:03'),(134,278,'2006-02-15 10:05:03'),(134,341,'2006-02-15 10:05:03'),(134,386,'2006-02-15 10:05:03'),(134,413,'2006-02-15 10:05:03'),(134,558,'2006-02-15 10:05:03'),(134,588,'2006-02-15 10:05:03'),(134,624,'2006-02-15 10:05:03'),(134,655,'2006-02-15 10:05:03'),(134,683,'2006-02-15 10:05:03'),(134,690,'2006-02-15 10:05:03'),(134,861,'2006-02-15 10:05:03'),(134,896,'2006-02-15 10:05:03'),(134,897,'2006-02-15 10:05:03'),(134,915,'2006-02-15 10:05:03'),(134,927,'2006-02-15 10:05:03'),(134,936,'2006-02-15 10:05:03'),(135,35,'2006-02-15 10:05:03'),(135,41,'2006-02-15 10:05:03'),(135,65,'2006-02-15 10:05:03'),(135,88,'2006-02-15 10:05:03'),(135,170,'2006-02-15 10:05:03'),(135,269,'2006-02-15 10:05:03'),(135,320,'2006-02-15 10:05:03'),(135,353,'2006-02-15 10:05:03'),(135,357,'2006-02-15 10:05:03'),(135,364,'2006-02-15 10:05:03'),(135,455,'2006-02-15 10:05:03'),(135,458,'2006-02-15 10:05:03'),(135,484,'2006-02-15 10:05:03'),(135,541,'2006-02-15 10:05:03'),(135,553,'2006-02-15 10:05:03'),(135,616,'2006-02-15 10:05:03'),(135,628,'2006-02-15 10:05:03'),(135,719,'2006-02-15 10:05:03'),(135,814,'2006-02-15 10:05:03'),(135,905,'2006-02-15 10:05:03'),(136,20,'2006-02-15 10:05:03'),(136,25,'2006-02-15 10:05:03'),(136,33,'2006-02-15 10:05:03'),(136,56,'2006-02-15 10:05:03'),(136,61,'2006-02-15 10:05:03'),(136,193,'2006-02-15 10:05:03'),(136,214,'2006-02-15 10:05:03'),(136,229,'2006-02-15 10:05:03'),(136,243,'2006-02-15 10:05:03'),(136,256,'2006-02-15 10:05:03'),(136,262,'2006-02-15 10:05:03'),(136,271,'2006-02-15 10:05:03'),(136,288,'2006-02-15 10:05:03'),(136,300,'2006-02-15 10:05:03'),(136,364,'2006-02-15 10:05:03'),(136,401,'2006-02-15 10:05:03'),(136,414,'2006-02-15 10:05:03'),(136,420,'2006-02-15 10:05:03'),(136,474,'2006-02-15 10:05:03'),(136,485,'2006-02-15 10:05:03'),(136,542,'2006-02-15 10:05:03'),(136,552,'2006-02-15 10:05:03'),(136,620,'2006-02-15 10:05:03'),(136,649,'2006-02-15 10:05:03'),(136,686,'2006-02-15 10:05:03'),(136,781,'2006-02-15 10:05:03'),(136,806,'2006-02-15 10:05:03'),(136,808,'2006-02-15 10:05:03'),(136,818,'2006-02-15 10:05:03'),(136,842,'2006-02-15 10:05:03'),(136,933,'2006-02-15 10:05:03'),(136,993,'2006-02-15 10:05:03'),(137,6,'2006-02-15 10:05:03'),(137,14,'2006-02-15 10:05:03'),(137,56,'2006-02-15 10:05:03'),(137,96,'2006-02-15 10:05:03'),(137,160,'2006-02-15 10:05:03'),(137,224,'2006-02-15 10:05:03'),(137,249,'2006-02-15 10:05:03'),(137,254,'2006-02-15 10:05:03'),(137,263,'2006-02-15 10:05:03'),(137,268,'2006-02-15 10:05:03'),(137,304,'2006-02-15 10:05:03'),(137,390,'2006-02-15 10:05:03'),(137,410,'2006-02-15 10:05:03'),(137,433,'2006-02-15 10:05:03'),(137,446,'2006-02-15 10:05:03'),(137,489,'2006-02-15 10:05:03'),(137,530,'2006-02-15 10:05:03'),(137,564,'2006-02-15 10:05:03'),(137,603,'2006-02-15 10:05:03'),(137,610,'2006-02-15 10:05:03'),(137,688,'2006-02-15 10:05:03'),(137,703,'2006-02-15 10:05:03'),(137,745,'2006-02-15 10:05:03'),(137,758,'2006-02-15 10:05:03'),(137,832,'2006-02-15 10:05:03'),(137,841,'2006-02-15 10:05:03'),(137,917,'2006-02-15 10:05:03'),(138,8,'2006-02-15 10:05:03'),(138,52,'2006-02-15 10:05:03'),(138,61,'2006-02-15 10:05:03'),(138,125,'2006-02-15 10:05:03'),(138,157,'2006-02-15 10:05:03'),(138,214,'2006-02-15 10:05:03'),(138,258,'2006-02-15 10:05:03'),(138,376,'2006-02-15 10:05:03'),(138,403,'2006-02-15 10:05:03'),(138,446,'2006-02-15 10:05:03'),(138,453,'2006-02-15 10:05:03'),(138,508,'2006-02-15 10:05:03'),(138,553,'2006-02-15 10:05:03'),(138,561,'2006-02-15 10:05:03'),(138,583,'2006-02-15 10:05:03'),(138,627,'2006-02-15 10:05:03'),(138,639,'2006-02-15 10:05:03'),(138,695,'2006-02-15 10:05:03'),(138,747,'2006-02-15 10:05:03'),(138,879,'2006-02-15 10:05:03'),(138,885,'2006-02-15 10:05:03'),(138,923,'2006-02-15 10:05:03'),(138,970,'2006-02-15 10:05:03'),(138,989,'2006-02-15 10:05:03'),(139,20,'2006-02-15 10:05:03'),(139,35,'2006-02-15 10:05:03'),(139,57,'2006-02-15 10:05:03'),(139,74,'2006-02-15 10:05:03'),(139,90,'2006-02-15 10:05:03'),(139,107,'2006-02-15 10:05:03'),(139,155,'2006-02-15 10:05:03'),(139,170,'2006-02-15 10:05:03'),(139,181,'2006-02-15 10:05:03'),(139,200,'2006-02-15 10:05:03'),(139,229,'2006-02-15 10:05:03'),(139,233,'2006-02-15 10:05:03'),(139,261,'2006-02-15 10:05:03'),(139,262,'2006-02-15 10:05:03'),(139,266,'2006-02-15 10:05:03'),(139,282,'2006-02-15 10:05:03'),(139,284,'2006-02-15 10:05:03'),(139,373,'2006-02-15 10:05:03'),(139,447,'2006-02-15 10:05:03'),(139,489,'2006-02-15 10:05:03'),(139,529,'2006-02-15 10:05:03'),(139,540,'2006-02-15 10:05:03'),(139,570,'2006-02-15 10:05:03'),(139,602,'2006-02-15 10:05:03'),(139,605,'2006-02-15 10:05:03'),(139,636,'2006-02-15 10:05:03'),(139,691,'2006-02-15 10:05:03'),(139,706,'2006-02-15 10:05:03'),(139,719,'2006-02-15 10:05:03'),(139,744,'2006-02-15 10:05:03'),(139,746,'2006-02-15 10:05:03'),(139,862,'2006-02-15 10:05:03'),(139,892,'2006-02-15 10:05:03'),(140,27,'2006-02-15 10:05:03'),(140,77,'2006-02-15 10:05:03'),(140,112,'2006-02-15 10:05:03'),(140,135,'2006-02-15 10:05:03'),(140,185,'2006-02-15 10:05:03'),(140,258,'2006-02-15 10:05:03'),(140,370,'2006-02-15 10:05:03'),(140,373,'2006-02-15 10:05:03'),(140,498,'2006-02-15 10:05:03'),(140,509,'2006-02-15 10:05:03'),(140,576,'2006-02-15 10:05:03'),(140,587,'2006-02-15 10:05:03'),(140,599,'2006-02-15 10:05:03'),(140,608,'2006-02-15 10:05:03'),(140,647,'2006-02-15 10:05:03'),(140,665,'2006-02-15 10:05:03'),(140,670,'2006-02-15 10:05:03'),(140,693,'2006-02-15 10:05:03'),(140,702,'2006-02-15 10:05:03'),(140,729,'2006-02-15 10:05:03'),(140,730,'2006-02-15 10:05:03'),(140,731,'2006-02-15 10:05:03'),(140,736,'2006-02-15 10:05:03'),(140,742,'2006-02-15 10:05:03'),(140,778,'2006-02-15 10:05:03'),(140,820,'2006-02-15 10:05:03'),(140,830,'2006-02-15 10:05:03'),(140,835,'2006-02-15 10:05:03'),(140,857,'2006-02-15 10:05:03'),(140,923,'2006-02-15 10:05:03'),(140,934,'2006-02-15 10:05:03'),(140,999,'2006-02-15 10:05:03'),(141,43,'2006-02-15 10:05:03'),(141,67,'2006-02-15 10:05:03'),(141,188,'2006-02-15 10:05:03'),(141,191,'2006-02-15 10:05:03'),(141,207,'2006-02-15 10:05:03'),(141,223,'2006-02-15 10:05:03'),(141,341,'2006-02-15 10:05:03'),(141,358,'2006-02-15 10:05:03'),(141,380,'2006-02-15 10:05:03'),(141,395,'2006-02-15 10:05:03'),(141,467,'2006-02-15 10:05:03'),(141,491,'2006-02-15 10:05:03'),(141,589,'2006-02-15 10:05:03'),(141,607,'2006-02-15 10:05:03'),(141,673,'2006-02-15 10:05:03'),\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Tables\nDESCRIPTION: Defines the structure for three tables in the percona_test database: checksums, load_data, and sentinel. These tables are likely used for testing purposes in the Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n\nCREATE TABLE `load_data` (\n  `i` int(11) DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n\nCREATE TABLE `sentinel` (\n  `id` int(11) NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Executing and Explaining a Null-Filtered Query - MySQL - SQL\nDESCRIPTION: Executes a SELECT query against 'd.t3', filtering on NULL values for columns 'v', 'c', and 'f', and provides its EXPLAIN plan for review. This snippet assumes the table and columns exist in the database and highlights how queries behave with NULL comparisons. No input parameters are required, as NULL is used directly; outputs are rows where any column is NULL or the EXPLAIN plan's structure. The primary limitation is that 'col=NULL' is always FALSE unless the column is explicitly NULL, due to SQL's NULL handling.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump024.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nEXECUTE SELECT * FROM d.t3 WHERE v=NULL OR c=NULL OR f=NULL\\G\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# EXPLAIN /*!50100 PARTITIONS*/\\nSELECT * FROM d.t3 WHERE v=NULL OR c=NULL OR f=NULL\\G\n```\n\n----------------------------------------\n\nTITLE: Upper Boundary Checksum Query\nDESCRIPTION: Processes records after the upper boundary of the current chunk, using rental_date and inventory_id as key columns for ordering.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/n-chunk-index-cols.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`rental` FORCE INDEX(`rental_date`) WHERE ((`rental_date` > ?) OR (`rental_date` = ? AND `inventory_id` > ?)) ORDER BY `rental_date`, `inventory_id`, `customer_id` /*past upper chunk*/\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL x$ps_schema_table_statistics_io Structure\nDESCRIPTION: Shows the table structure for x$ps_schema_table_statistics_io which focuses specifically on I/O statistics for MySQL tables, including read/write counts, byte totals, and timing information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_59\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$ps_schema_table_statistics_io;\n+---------------------------+---------------+------+-----+---------+-------+\n| Field                     | Type          | Null | Key | Default | Extra |\n+---------------------------+---------------+------+-----+---------+-------+\n| table_schema              | varchar(64)   | YES  |     | NULL    |       |\n| table_name                | varchar(64)   | YES  |     | NULL    |       |\n| count_read                | decimal(42,0) | YES  |     | NULL    |       |\n| sum_number_of_bytes_read  | decimal(41,0) | YES  |     | NULL    |       |\n| sum_timer_read            | decimal(42,0) | YES  |     | NULL    |       |\n| count_write               | decimal(42,0) | YES  |     | NULL    |       |\n| sum_number_of_bytes_write | decimal(41,0) | YES  |     | NULL    |       |\n| sum_timer_write           | decimal(42,0) | YES  |     | NULL    |       |\n| count_misc                | decimal(42,0) | YES  |     | NULL    |       |\n| sum_timer_misc            | decimal(42,0) | YES  |     | NULL    |       |\n+---------------------------+---------------+------+-----+---------+-------+\n10 rows in set (0.10 sec)\n```\n\n----------------------------------------\n\nTITLE: Inventory Table Creation - MySQL\nDESCRIPTION: Creates inventory table linking films to stores with foreign key constraints and composite indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Linux Kernel Inode State\nDESCRIPTION: Displays current kernel inode states including dentry state, file number limits, and inode usage statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_006.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndentry-state | 456513\t375385\t45\t0\t141719\t0\nfile-nr | 30570\t0\t9223372036854775807\ninode-nr | 399300\t88416\n```\n\n----------------------------------------\n\nTITLE: Bulk Inserting Data with ON DUPLICATE KEY UPDATE in SQL\nDESCRIPTION: This SQL snippet performs a bulk insert of multiple data rows into an unspecified table. Each row contains several numeric values, likely representing identifiers, timestamps, and metrics. The `ON DUPLICATE KEY UPDATE created_at_date = created_at_date + 0` clause handles potential primary or unique key violations by effectively doing nothing (adding zero) to the `created_at_date` column if a duplicate key is found, preventing unintended updates to this specific field while still allowing the insertion/update logic to proceed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n00,300,7256314,1236699918),(8463,1236698100,9,0.0,300,300,7256314,1236699918),(8463,1236698100,10,0.0,300,300,7256314,1236699918),(8463,1236698100,1,0.0,300,300,7256314,1236699918),(8463,1236698100,2,203.079,300,300,7256314,1236699918),(8463,1236698100,3,59.98,300,300,7256314,1236699918),(8463,1236698100,4,0.093,300,300,7256314,1236699918),(8463,1236698100,5,0.0,300,300,7256314,1236699918),(8463,1236698100,6,22.0,300,300,7256314,1236699918),(8463,1236698100,7,0.0,300,300,7256314,1236699918),(8463,1236698100,8,0.0,300,300,7256314,1236699918),(8463,1236698400,9,0.0,300,300,7256314,1236699918),(8463,1236698400,10,0.0,300,300,7256314,1236699918),(8463,1236698400,1,0.0,300,300,7256314,1236699918),(8463,1236698400,2,203.722,300,300,7256314,1236699918),(8463,1236698400,3,60.001,300,300,7256314,1236699918),(8463,1236698400,4,0.093,300,300,7256314,1236699918),(8463,1236698400,5,0.0,300,300,7256314,1236699918),(8463,1236698400,6,22.0,300,300,7256314,1236699918),(8463,1236698400,7,0.0,300,300,7256314,1236699918),(8463,1236698400,8,0.0,300,300,7256314,1236699918),(8463,1236698700,9,0.0,300,300,7256314,1236699918),(8463,1236698700,10,0.0,300,300,7256314,1236699918),(8463,1236698700,1,0.0,300,300,7256314,1236699918),(8463,1236698700,2,203.48,300,300,7256314,1236699918),(8463,1236698700,3,59.992,300,300,7256314,1236699918),(8463,1236698700,4,0.093,300,300,7256314,1236699918),(8463,1236698700,5,0.0,300,300,7256314,1236699918),(8463,1236698700,6,22.0,300,300,7256314,1236699918),(8463,1236698700,7,0.0,300,300,7256314,1236699918),(8463,1236698700,8,0.0,300,300,7256314,1236699918),(8463,1236699000,9,0.0,300,299,7256314,1236699918),(8463,1236699000,10,0.0,300,299,7256314,1236699918),(8463,1236699000,1,0.0,300,299,7256314,1236699918),(8463,1236699000,2,204.224,300,299,7256314,1236699918),(8463,1236699000,3,59.978,300,299,7256314,1236699918),(8463,1236699000,4,0.092,300,299,7256314,1236699918),(8463,1236699000,5,0.0,300,299,7256314,1236699918),(8463,1236699000,6,22.0,300,299,7256314,1236699918),(8463,1236699000,7,0.0,300,299,7256314,1236699918),(8463,1236699000,8,0.0,300,299,7256314,1236699918),(8463,1236699300,9,0.0,300,300,7256314,1236699918),(8463,1236699300,10,0.0,300,300,7256314,1236699918),(8463,1236699300,1,0.0,300,300,7256314,1236699918),(8463,1236699300,2,203.269,300,300,7256314,1236699918),(8463,1236699300,3,59.978,300,300,7256314,1236699918),(8463,1236699300,4,0.092,300,300,7256314,1236699918),(8463,1236699300,5,0.0,300,300,7256314,1236699918),(8463,1236699300,6,21.0,300,300,7256314,1236699918),(8463,1236699300,7,0.0,300,300,7256314,1236699918),(8463,1236699300,8,0.0,300,300,7256314,1236699918) on duplicate key update created_at_date = created_at_date + 0;\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Block Device I/O Statistics\nDESCRIPTION: Raw output from Linux showing I/O statistics for block devices including physical disks (sda, sdb), RAM drives, device mapper volumes (dm-*), and other storage devices. Each line contains metrics like completed I/Os, sectors read/written, and timing data. Timestamps (TS) indicate periodic sampling.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n```\n\n----------------------------------------\n\nTITLE: Parsing InnoDB Monitor Output End Delimiter\nDESCRIPTION: Standard delimiter text that indicates the end of InnoDB monitor output in MySQL. This delimiter helps tools and scripts identify where the monitoring data section ends.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nEND OF INNODB MONITOR OUTPUT\n============================\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Schema Consumers\nDESCRIPTION: Disables Performance Schema consumers matching a given pattern. Allows disabling all consumers or specific types of consumers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_141\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_consumer('');\n+--------------------------+\n| summary                  |\n+--------------------------+\n| Disabled 15 consumers    |\n+--------------------------+\n1 row in set (0.02 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_disable_consumer('stage');\n+------------------------+\n| summary                |\n+------------------------+\n| Disabled 3 consumers   |\n+------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Structuring Class Hierarchy in HTML\nDESCRIPTION: This snippet shows the HTML structure for representing class hierarchies, including parent, current, and child classes with indentation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<ClassHierarchy>\n    <CHIndent>?\n        <CHType>\n            <CHEntry>\n                <a href>?\n                    Entry\n                </a href>\n            </CHEntry>\n        </CHType>\n    </CHIndent>?\n</ClassHierarchy>\n```\n\n----------------------------------------\n\nTITLE: Querying Two Table in MySQL\nDESCRIPTION: SELECT queries on 'two' table with high query time of 500 seconds. Uses parameterized query for id field with no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow049.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT two FROM two WHERE id=?;\n```\n\n----------------------------------------\n\nTITLE: Displaying disabled Performance Schema configuration with sys.ps_setup_show_disabled\nDESCRIPTION: This procedure shows all currently disabled Performance Schema configurations. It accepts parameters to control whether disabled instruments and threads are displayed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_138\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_show_disabled(TRUE, TRUE);\n+----------------------------+\n| performance_schema_enabled |\n+----------------------------+\n|                          1 |\n+----------------------------+\n1 row in set (0.00 sec)\n\n+--------------------+\n| enabled_users      |\n+--------------------+\n| 'mark'@'localhost' |\n+--------------------+\n1 row in set (0.00 sec)\n\n+-------------+----------------------+---------+-------+\n| object_type | objects              | enabled | timed |\n+-------------+----------------------+---------+-------+\n| EVENT       | mysql.%              | NO      | NO    |\n| EVENT       | performance_schema.% | NO      | NO    |\n| EVENT       | information_schema.% | NO      | NO    |\n| FUNCTION    | mysql.%              | NO      | NO    |\n| FUNCTION    | performance_schema.% | NO      | NO    |\n| FUNCTION    | information_schema.% | NO      | NO    |\n| PROCEDURE   | mysql.%              | NO      | NO    |\n| PROCEDURE   | performance_schema.% | NO      | NO    |\n| PROCEDURE   | information_schema.% | NO      | NO    |\n| TABLE       | mysql.%              | NO      | NO    |\n| TABLE       | performance_schema.% | NO      | NO    |\n| TABLE       | information_schema.% | NO      | NO    |\n| TRIGGER     | mysql.%              | NO      | NO    |\n| TRIGGER     | performance_schema.% | NO      | NO    |\n| TRIGGER     | information_schema.% | NO      | NO    |\n+-------------+----------------------+---------+-------+\n15 rows in set (0.00 sec)\n\n+----------------------------------+\n| disabled_consumers               |\n+----------------------------------+\n| events_stages_current            |\n| events_stages_history            |\n| events_stages_history_long       |\n| events_statements_history        |\n| events_statements_history_long   |\n| events_transactions_history      |\n| events_transactions_history_long |\n| events_waits_current             |\n| events_waits_history             |\n| events_waits_history_long        |\n+----------------------------------+\n10 rows in set (0.00 sec)\n\nEmpty set (0.00 sec)\n\n+---------------------------------------------------------------------------------------+-------+\n| disabled_instruments                                                                  | timed |\n+---------------------------------------------------------------------------------------+-------+\n| wait/synch/mutex/sql/TC_LOG_MMAP::LOCK_tc                                             | NO    |\n| wait/synch/mutex/sql/LOCK_des_key_file                                                | NO    |\n| wait/synch/mutex/sql/MYSQL_BIN_LOG::LOCK_commit                                       | NO    |\n...\n| memory/sql/servers_cache                                                              | NO    |\n| memory/sql/udf_mem                                                                    | NO    |\n| wait/lock/metadata/sql/mdl                                                            | NO    |\n+---------------------------------------------------------------------------------------+-------+\n547 rows in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Null Email in Pro Database\nDESCRIPTION: This query selects all columns from the 'users' table in the 'pro' database where either the email or new_email field is NULL. The query examines a large number of rows but returns no results.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow029.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM `users`     WHERE (email = NULL or new_email = NULL);\n```\n\n----------------------------------------\n\nTITLE: MySQL Sleep Query in Test Database\nDESCRIPTION: A MySQL query that executes the sleep() function for 2 seconds on the 'test' database. The query selects from table 'n' and is part of a slow query log entry.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow001-rewritten.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse test;\nselect sleep(2) from n;\n```\n\n----------------------------------------\n\nTITLE: Update Historical Metrics\nDESCRIPTION: Updates historical metric values in test2.tbl8 by shifting previous values and updating the most recent record.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog001.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nupdate test2.tbl8\n      set last2metric1 = last1metric1, last2time = last1time,\n         last1metric1 = last0metric1, last1time = last0time,\n         last0metric1 = ondeckmetric1, last0time = now()\n      where tbl8 in (10800712)/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Updating tuningdetail table using inner join in MySQL\nDESCRIPTION: An UPDATE query that joins the db2.tuningdetail_21_265507 table with db1.gonzo table using the gonzo column, setting column1 and word3 values from the joined table. This query examined approximately 61.48k rows and took 726ms to execute.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002-orderbynonexistent.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\n```\n\n----------------------------------------\n\nTITLE: Executing Show Status Query in MySQL\nDESCRIPTION: This snippet shows a simple 'show status' query executed in the MySQL database. It includes user and host information, as well as query performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow029.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse mysql;\nSET timestamp=1241453102;\nshow status;\n```\n\n----------------------------------------\n\nTITLE: MySQL Sleep Query in Sakila Database with Cross-Database Reference\nDESCRIPTION: A MySQL query that executes the sleep() function for 2 seconds while using the 'sakila' database but selecting from the 'n' table in the 'test' database. This demonstrates cross-database queries in a slow query log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow001-rewritten.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse sakila;\nselect sleep(2) from test.n;\n```\n\n----------------------------------------\n\nTITLE: Database Sync Operations for d2 and d3\nDESCRIPTION: Series of INSERT operations being performed on different database tables during synchronization. Includes metadata headers showing connection details and operation statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-sync/samples/issue_631_output_1.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Syncing D=d2,P=12345,h=127.1,p=...,t=t,u=msandbox\n# DELETE REPLACE INSERT UPDATE ALGORITHM START    END      EXIT DATABASE.TABLE\nINSERT INTO `d2`.`t`(`x`) VALUES ('1');\n#      0       0      1      0 GroupBy   00:00:00 00:00:00 2    d1.t\n# Syncing D=d3,P=12345,h=127.1,p=...,t=t,u=msandbox\n# DELETE REPLACE INSERT UPDATE ALGORITHM START    END      EXIT DATABASE.TABLE\nINSERT INTO `d3`.`t`(`x`) VALUES ('1');\nINSERT INTO `d3`.`t`(`x`) VALUES ('2');\n#      0       0      2      0 GroupBy   00:00:00 00:00:00 2    d1.t\n```\n\n----------------------------------------\n\nTITLE: Displaying Program Usage Syntax (Shell)\nDESCRIPTION: Shows the basic command-line syntax for executing the program, indicating that it accepts options following the program name. `$PROGRAM_NAME` is a placeholder for the actual script name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage: $PROGRAM_NAME <options>\n```\n\n----------------------------------------\n\nTITLE: Querying user_summary_by_file_io in MySQL Performance Schema\nDESCRIPTION: Example of querying the user_summary_by_file_io view which displays total file I/O operations and aggregated latency for each database user, including background threads (shown as user NULL).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_94\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary_by_file_io;\n+------------+-------+------------+\n| user       | ios   | io_latency |\n+------------+-------+------------+\n| root       | 26457 | 21.58 s    |\n| background |  1189 | 394.21 ms  |\n+------------+-------+------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Database in MySQL\nDESCRIPTION: Creates a new database named 'd'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog002.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncreate database d\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Output (Text/Log)\nDESCRIPTION: This snippet shows example output from a disk monitoring tool, likely `pt-diskstats` or a similar utility. It displays time-series I/O metrics captured at one-second intervals for various block devices. The header line (`#ts device rd_mb_s ...`) explains the meaning of each column: timestamp, device name, read MB/s, read concurrency, read response time, write MB/s, write concurrency, write response time, busy percentage, and in-progress I/O.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_switch_to_sample.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n1.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sdb        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sdb1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n2.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sda4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sdb        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n2.0 sdb1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n3.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sda4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sdb        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n3.0 sdb1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n4.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sda        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sda3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sda4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sdb        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.0 sdb1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n5.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n5.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Checksumming Rows Below Lower Boundary in SQL\nDESCRIPTION: This SQL query counts rows that fall below the lower boundary of a chunk in the sakila.city table. It's used as part of the table checksum process to identify rows that might be missed in the main chunk checksums.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx005.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*), '0' FROM `sakila`.`city` FORCE INDEX(`PRIMARY`) WHERE ((`city_id` < ?)) AND (country_id > 100) ORDER BY `city_id` /*past lower chunk*/\n```\n\n----------------------------------------\n\nTITLE: Example of Browser Detection HTML Structure\nDESCRIPTION: Shows how browser-specific styles are applied using JavaScript. The script detects browser type and version, then adds corresponding classes to help CSS target specific browsers for compatibility fixes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n    <browser type>?\n        <browser version>?\n\n        Page Content\n\n        <browser version>?\n    <browser type>?\n</body>\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status for Trees Table in MySQL\nDESCRIPTION: This SQL command displays the status information for the 'trees' table in the 'food' database. It provides metadata about the table structure and properties.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-80.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\n----------------------------------------\n\nTITLE: Authentication Command: Connect\nDESCRIPTION: MySQL administrator command for connecting to the database. Used by both phpmyadmin and root users from localhost.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nadministrator command: Connect\n```\n\n----------------------------------------\n\nTITLE: MySQL Network Packet Capture - Server Response\nDESCRIPTION: TCP packet showing MySQL server response with query execution results. Contains timestamp, IP details, hex dump and decoded message showing 1 row matched and changed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump031.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2009-12-07 20:54:54.795250 IP 127.0.0.1.mysql > 1.2.3.4.35957: tcp 50\n   0x0000:  4508 0066 f4c8 4000 4006 d965 ac14 101f\n   0x0010:  ac14 0414 0cea 8c75 232a 5e2b 1e2e 052d\n   0x0020:  8018 2028 6cb4 0000 0101 080a 482f 087a\n   0x0030:  4814 fa1a 2e00 0001 0001 0002 0028 526f\n   0x0040:  7773 206d 6174 6368 6564 3a20 3120 2043\n   0x0050:  6861 6e67 6564 3a20 3120 2057 6172 6e69\n   0x0060:  6e67 733a 2030\n```\n\n----------------------------------------\n\nTITLE: CPU Information Output Format\nDESCRIPTION: Raw CPU information data showing detailed specifications for two processor cores of an Intel Core2 Duo T5750 CPU. Includes processor features, cache details, and CPU flags.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/cpuinfo01.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprocessor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 15\nmodel name\t: Intel(R) Core(TM)2 Duo CPU     T5750  @ 2.00GHz\nstepping\t: 13\ncpu MHz\t\t: 1000.000\ncache size\t: 2048 KB\nphysical id\t: 0\nsiblings\t: 2\ncore id\t\t: 0\ncpu cores\t: 2\napicid\t\t: 0\ninitial apicid\t: 0\nfpu\t\t: yes\nfpu_exception\t: yes\ncpuid level\t: 10\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good pni dtes64 monitor ds_cpl est tm2 ssse3 cx16 xtpr pdcm lahf_lm\nbogomips\t: 3989.52\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 36 bits physical, 48 bits virtual\npower management:\n\nprocessor\t: 1\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 15\nmodel name\t: Intel(R) Core(TM)2 Duo CPU     T5750  @ 2.00GHz\nstepping\t: 13\ncpu MHz\t\t: 1000.000\ncache size\t: 2048 KB\nphysical id\t: 0\nsiblings\t: 2\ncore id\t\t: 1\ncpu cores\t: 2\napicid\t\t: 1\ninitial apicid\t: 1\nfpu\t\t: yes\nfpu_exception\t: yes\ncpuid level\t: 10\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good pni dtes64 monitor ds_cpl est tm2 ssse3 cx16 xtpr pdcm lahf_lm\nbogomips\t: 3990.00\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 36 bits physical, 48 bits virtual\npower management:\n```\n\n----------------------------------------\n\nTITLE: Defining C# Language in Natural Docs Configuration\nDESCRIPTION: Configures C# language support with full language parsing through a dedicated Perl package.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_3\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: C#\n\n   Extension: cs\n   Ignore Prefix in Index: @\n   Full Language Support: NaturalDocs::Languages::CSharp\n```\n\n----------------------------------------\n\nTITLE: MySQL Slave Replication Initialization Log\nDESCRIPTION: Log entry showing the initialization of a slave SQL thread starting replication from a specific binary log position.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSlave SQL thread initialized, starting replication in log 'mpb-bin.000519' at position 4, relay log './web-relay-bin.000001' position: 4\n```\n\n----------------------------------------\n\nTITLE: Querying foo database table in MySQL\nDESCRIPTION: A simple SELECT query retrieving a column from foo_tbl in the foo database. This query was executed multiple times with identical performance metrics showing minimal query time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006-first2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse foo;\nSELECT col FROM foo_tbl;\n```\n\n----------------------------------------\n\nTITLE: Creating System Configuration Table in MySQL\nDESCRIPTION: Defines system configuration table for storing variables and their values with change tracking using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sys_config` (\n  `variable` varchar(128) NOT NULL,\n  `value` varchar(128) DEFAULT NULL,\n  `set_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `set_by` varchar(128) DEFAULT NULL,\n  PRIMARY KEY (`variable`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: Describing x$schema_table_statistics_with_buffer Structure in MySQL\nDESCRIPTION: Shows the structure of the x$schema_table_statistics_with_buffer view, which is similar to schema_table_statistics_with_buffer but with raw numeric values instead of formatted strings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_69\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_table_statistics_with_buffer;\n+----------------------------+---------------------+------+-----+---------+-------+\n| Field                      | Type                | Null | Key | Default | Extra |\n+----------------------------+---------------------+------+-----+---------+-------+\n| table_schema               | varchar(64)         | YES  |     | NULL    |       |\n| table_name                 | varchar(64)         | YES  |     | NULL    |       |\n| rows_fetched               | bigint(20) unsigned | NO   |     | NULL    |       |\n| fetch_latency              | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_inserted              | bigint(20) unsigned | NO   |     | NULL    |       |\n| insert_latency             | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_updated               | bigint(20) unsigned | NO   |     | NULL    |       |\n| update_latency             | bigint(20) unsigned | NO   |     | NULL    |       |\n| rows_deleted               | bigint(20) unsigned | NO   |     | NULL    |       |\n| delete_latency             | bigint(20) unsigned | NO   |     | NULL    |       |\n| io_read_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_read                    | decimal(41,0)       | YES  |     | NULL    |       |\n| io_read_latency            | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write_requests          | decimal(42,0)       | YES  |     | NULL    |       |\n| io_write                   | decimal(41,0)       | YES  |     | NULL    |       |\n| io_write_latency           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_requests           | decimal(42,0)       | YES  |     | NULL    |       |\n| io_misc_latency            | decimal(42,0)       | YES  |     | NULL    |       |\n| innodb_buffer_allocated    | decimal(43,0)       | YES  |     | NULL    |       |\n| innodb_buffer_data         | decimal(43,0)       | YES  |     | NULL    |       |\n| innodb_buffer_free         | decimal(44,0)       | YES  |     | NULL    |       |\n| innodb_buffer_pages        | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_hashed | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_pages_old    | bigint(21)          | YES  |     | 0       |       |\n| innodb_buffer_rows_cached  | decimal(44,0)       | YES  |     | 0       |       |\n+----------------------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Switching Database and Restoring Settings in MySQL\nDESCRIPTION: Switches to the MySQL database and restores all the original system settings that were modified during the view creation process. This ensures the database environment returns to its initial state after the operation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\nUSE `mysql`;\n/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;\n\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n\n-- Dump completed on 2011-05-21  6:58:44\n```\n\n----------------------------------------\n\nTITLE: Displaying Benchmark Execution Times in Percona Toolkit Format\nDESCRIPTION: This line shows the formatted output of a performance benchmark report from Percona Toolkit. The line displays a series of execution time measurements with various durations, providing a tabular view of performance metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/proclist001.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Exec time    100      9s      2s      4s      3s      4s   786ms      3s\n```\n\n----------------------------------------\n\nTITLE: Reporting Erroneous SQL Query from Percona Toolkit Analysis\nDESCRIPTION: This SQL snippet represents a query identified and reported by a Percona Toolkit analysis under class '0F88A9418F511C18'. The query failed because it attempted to select a column (`nonexistent_col`) that does not exist in the specified table (`test.t`), leading to an SQL error.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_both_hosts_results.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect nonexistent_col from test.t\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect nonexistent_col from test.t\n```\n\n----------------------------------------\n\nTITLE: Generic Query Template in Percona Toolkit Report (SQL)\nDESCRIPTION: This SQL snippet represents a generic query template or class identified by the Percona Toolkit analysis. The `?` likely acts as a placeholder for host-specific identifiers (e.g., '1' or '2') to form actual executed queries. This template is associated with query class 883A4BC43021922E in the report.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host2_results.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect host?_col from test.t\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Disk I/O Stats Output\nDESCRIPTION: Raw output of Linux disk I/O statistics showing timestamped performance metrics for various storage devices. Each line contains major and minor device numbers followed by device name and multiple performance counters including read/write operations, sectors read/written, and processing time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTS 1281367519\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999682 83425310 811400340 12711047 0 6869437 20744582\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999331 83425040 811399096 12710251 0 6866885 20740511\n104   16 cciss/c0d1 1172444169 44249324 49905804480 3910112166 3461426338 29008876 138140456491 445486927 19 164987623 60581634\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512224 0 44097792 3486922 0 1438723 5640971\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367521\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999728 83425570 811402788 12711087 0 6869439 20744622\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999377 83425300 811401544 12710291 0 6866887 20740551\n104   16 cciss/c0d1 1172445102 44249324 49905846120 3910134507 3461428308 29008877 138140550075 445487158 18 164989469 60604229\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512530 0 44100240 3487167 0 1438725 5641216\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367523\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999760 83425680 811403924 12711100 0 6869440 20744635\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999409 83425410 811402680 12710304 0 6866888 20740564\n104   16 cciss/c0d1 1172445848 44249325 49905881344 3910154917 3461429428 29008878 138140601807 445487273 17 164991287 60624777\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512530 0 44100240 3487167 0 1438725 5641216\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367524\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999764 83425707 811404172 12711100 0 6869440 20744635\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999413 83425437 811402928 12710304 0 6866888 20740564\n104   16 cciss/c0d1 1172446696 44249328 49905917496 3910176524 3461431407 29008878 138140700196 445487503 9 164993065 60646578\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512530 0 44100240 3487167 0 1438725 5641216\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367526\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999806 83426057 811407308 12711120 0 6869442 20744655\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999455 83425787 811406064 12710324 0 6866890 20740584\n104   16 cciss/c0d1 1172447376 44249329 49905942352 3910192741 3461433233 29008880 138140790476 445487714 5 164994787 60662861\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512919 0 44103352 3487398 0 1438727 5641447\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Creating Film_Text Table Schema in MySQL\nDESCRIPTION: SQL definition for the 'film_text' table in the Sakila database that stores film titles and descriptions for full-text searching. Uses the MyISAM engine to support FULLTEXT indexing on the title and description columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Describing schema_unused_indexes View in MySQL\nDESCRIPTION: Shows the structure of the schema_unused_indexes view, which identifies indexes that have had no events against them. This view is useful for finding potentially unnecessary indexes, excluding PRIMARY keys.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_67\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc schema_unused_indexes;\n+---------------+-------------+------+-----+---------+-------+\n| Field         | Type        | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| object_schema | varchar(64) | YES  |     | NULL    |       |\n| object_name   | varchar(64) | YES  |     | NULL    |       |\n| index_name    | varchar(64) | YES  |     | NULL    |       |\n+---------------+-------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Database Selection Query Log Entry\nDESCRIPTION: Slow query log entry showing a database selection command with execution metrics. Shows minimal resource usage with 0 rows affected.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow056.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET timestamp=1111111111;\nuse test_db;\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Request Packet Hex Dump\nDESCRIPTION: TCP packet from client (1.2.3.4:34162) to MySQL server (127.0.0.1:mysql) containing 9 bytes of data. Shows IP header and payload in hexadecimal format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump027.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 003d 3872 4000 4006 9d95 0a38 a80e\n0a38 a82d 8572 0cea add8 a696 2b4a b32d\n8018 07d3 fa4e 0000 0101 080a 54e0 4da2\ne506 a3de 0500 0000 1a33 0000 00\n```\n\n----------------------------------------\n\nTITLE: MySQL Instance Overview Table\nDESCRIPTION: This section displays a table summarizing the running MySQL sandbox instances, listing their port number, data directory path, niceness level, OOM score adjustment, and socket file path.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Instances ##################################################\n  Port  Data Directory             Nice OOM Socket\n  ===== ========================== ==== === ======\n  12345 /tmp/12345/data            0    0   /tmp/12345/mysql_sandbox12345.sock\n  12346 /tmp/12346/data            0    0   /tmp/12346/mysql_sandbox12346.sock\n  12347 /tmp/12347/data            0    0   /tmp/12347/mysql_sandbox12347.sock\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Server Variables\nDESCRIPTION: This SQL query result shows a comprehensive list of MySQL server variables and their values. It provides insights into the server's configuration, including performance settings, file paths, and version information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/show-variables/vars004.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n*************************** 167. row ***************************\nVariable_name: old_passwords\n        Value: OFF\n*************************** 168. row ***************************\nVariable_name: open_files_limit\n        Value: 1024\n*************************** 169. row ***************************\nVariable_name: optimizer_prune_level\n        Value: 1\n*************************** 170. row ***************************\nVariable_name: optimizer_search_depth\n        Value: 62\n*************************** 171. row ***************************\nVariable_name: pid_file\n        Value: /tmp/12345/data/mysql_sandbox12345.pid\n*************************** 172. row ***************************\nVariable_name: plugin_dir\n        Value: \n*************************** 173. row ***************************\nVariable_name: port\n        Value: 12345\n*************************** 174. row ***************************\nVariable_name: preload_buffer_size\n        Value: 32768\n*************************** 175. row ***************************\nVariable_name: profiling\n        Value: OFF\n*************************** 176. row ***************************\nVariable_name: profiling_history_size\n        Value: 15\n*************************** 177. row ***************************\nVariable_name: protocol_version\n        Value: 10\n*************************** 178. row ***************************\nVariable_name: query_alloc_block_size\n        Value: 8192\n*************************** 179. row ***************************\nVariable_name: query_cache_limit\n        Value: 1048576\n*************************** 180. row ***************************\nVariable_name: query_cache_min_res_unit\n        Value: 4096\n*************************** 181. row ***************************\nVariable_name: query_cache_size\n        Value: 0\n*************************** 182. row ***************************\nVariable_name: query_cache_type\n        Value: ON\n*************************** 183. row ***************************\nVariable_name: query_cache_wlock_invalidate\n        Value: OFF\n*************************** 184. row ***************************\nVariable_name: query_prealloc_size\n        Value: 8192\n*************************** 185. row ***************************\nVariable_name: range_alloc_block_size\n        Value: 4096\n*************************** 186. row ***************************\nVariable_name: read_buffer_size\n        Value: 131072\n*************************** 187. row ***************************\nVariable_name: read_only\n        Value: OFF\n*************************** 188. row ***************************\nVariable_name: read_rnd_buffer_size\n        Value: 262144\n*************************** 189. row ***************************\nVariable_name: relay_log\n        Value: mysql-relay-bin\n*************************** 190. row ***************************\nVariable_name: relay_log_index\n        Value: \n*************************** 191. row ***************************\nVariable_name: relay_log_info_file\n        Value: relay-log.info\n*************************** 192. row ***************************\nVariable_name: relay_log_purge\n        Value: ON\n*************************** 193. row ***************************\nVariable_name: relay_log_space_limit\n        Value: 0\n*************************** 194. row ***************************\nVariable_name: rpl_recovery_rank\n        Value: 0\n*************************** 195. row ***************************\nVariable_name: secure_auth\n        Value: OFF\n*************************** 196. row ***************************\nVariable_name: secure_file_priv\n        Value: \n*************************** 197. row ***************************\nVariable_name: server_id\n        Value: 12345\n*************************** 198. row ***************************\nVariable_name: skip_external_locking\n        Value: ON\n*************************** 199. row ***************************\nVariable_name: skip_networking\n        Value: OFF\n*************************** 200. row ***************************\nVariable_name: skip_show_database\n        Value: OFF\n*************************** 201. row ***************************\nVariable_name: slave_compressed_protocol\n        Value: OFF\n*************************** 202. row ***************************\nVariable_name: slave_load_tmpdir\n        Value: /tmp/\n*************************** 203. row ***************************\nVariable_name: slave_net_timeout\n        Value: 3600\n*************************** 204. row ***************************\nVariable_name: slave_skip_errors\n        Value: OFF\n*************************** 205. row ***************************\nVariable_name: slave_transaction_retries\n        Value: 10\n*************************** 206. row ***************************\nVariable_name: slow_launch_time\n        Value: 2\n*************************** 207. row ***************************\nVariable_name: socket\n        Value: /tmp/12345/mysql_sandbox12345.sock\n*************************** 208. row ***************************\nVariable_name: sort_buffer_size\n        Value: 2097144\n*************************** 209. row ***************************\nVariable_name: sql_big_selects\n        Value: ON\n*************************** 210. row ***************************\nVariable_name: sql_mode\n        Value: \n*************************** 211. row ***************************\nVariable_name: sql_notes\n        Value: ON\n*************************** 212. row ***************************\nVariable_name: sql_warnings\n        Value: OFF\n*************************** 213. row ***************************\nVariable_name: ssl_ca\n        Value: \n*************************** 214. row ***************************\nVariable_name: ssl_capath\n        Value: \n*************************** 215. row ***************************\nVariable_name: ssl_cert\n        Value: \n*************************** 216. row ***************************\nVariable_name: ssl_cipher\n        Value: \n*************************** 217. row ***************************\nVariable_name: ssl_key\n        Value: \n*************************** 218. row ***************************\nVariable_name: storage_engine\n        Value: MyISAM\n*************************** 219. row ***************************\nVariable_name: sync_binlog\n        Value: 0\n*************************** 220. row ***************************\nVariable_name: sync_frm\n        Value: ON\n*************************** 221. row ***************************\nVariable_name: system_time_zone\n        Value: MDT\n*************************** 222. row ***************************\nVariable_name: table_cache\n        Value: 64\n*************************** 223. row ***************************\nVariable_name: table_lock_wait_timeout\n        Value: 50\n*************************** 224. row ***************************\nVariable_name: table_type\n        Value: MyISAM\n*************************** 225. row ***************************\nVariable_name: thread_cache_size\n        Value: 0\n*************************** 226. row ***************************\nVariable_name: thread_stack\n        Value: 262144\n*************************** 227. row ***************************\nVariable_name: time_format\n        Value: %H:%i:%s\n*************************** 228. row ***************************\nVariable_name: time_zone\n        Value: SYSTEM\n*************************** 229. row ***************************\nVariable_name: timed_mutexes\n        Value: OFF\n*************************** 230. row ***************************\nVariable_name: tmp_table_size\n        Value: 33554432\n*************************** 231. row ***************************\nVariable_name: tmpdir\n        Value: /tmp/\n*************************** 232. row ***************************\nVariable_name: transaction_alloc_block_size\n        Value: 8192\n*************************** 233. row ***************************\nVariable_name: transaction_prealloc_size\n        Value: 4096\n*************************** 234. row ***************************\nVariable_name: tx_isolation\n        Value: REPEATABLE-READ\n*************************** 235. row ***************************\nVariable_name: updatable_views_with_limit\n        Value: YES\n*************************** 236. row ***************************\nVariable_name: version\n        Value: 5.0.82-log\n*************************** 237. row ***************************\nVariable_name: version_comment\n        Value: MySQL Community Server (GPL)\n*************************** 238. row ***************************\nVariable_name: version_compile_machine\n        Value: x86_64\n*************************** 239. row ***************************\nVariable_name: version_compile_os\n        Value: unknown-linux-gnu\n*************************** 240. row ***************************\nVariable_name: wait_timeout\n        Value: 28800\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Indexes in MongoDB - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the creation of two indexes on a MongoDB collection, where the second index is a prefix of the first. The example illustrates how tools or administrators may identify duplicate indexes based on key prefixing. The first index (idx_01) includes fields f1, f2, f3, and f4, while the second (idx_02) only includes f1, f2, and f3 in the same order. No external dependencies are required beyond access to a MongoDB shell with proper privileges. The inputs are the specific field signatures and index names; the output is the creation of the indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-mongodb-index-check.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.getSiblingDB(\"testdb\").test_col.createIndex({\"f1\": 1, \"f2\": -1, \"f3\": 1, \"f4\": 1}, {\"name\": \"idx_01\"});\ndb.getSiblingDB(\"testdb\").test_col.createIndex({\"f1\": 1, \"f2\": -1, \"f3\": 1}, {\"name\": \"idx_02\"});\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet\nDESCRIPTION: Server response packet containing result set metadata and row data for the SELECT query\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump029.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 01ee 84e4 4000 4006 b61b 7f00 0001\\n7f00 0001 3039 8e90 00ea 6a19 0042 dfa7\\n8018 0100 ffe2 0000 0101 080a 0011 ed34\\n0011 ed34 0c00 0001 0001 0000 0007 0007\\n0000 0000 1700 0002 0364 6566 0000 0001\\n3f00 0c3f 0000 0000 00fd 8000 0000 0017\\n0000 0303 6465 6600 0000 013f 000c 3f00\\n0000 0000 fd80 0000 0000 1700 0004 0364\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statement Selecting from Table d.t in SQL\nDESCRIPTION: This SQL snippet executes a prepared statement identified by a handle (implicitly derived from context like 'Statement id'). The underlying query selects all columns (`*`) from the table `d.t` filtering by the `name` column equal to \"adam\". Performance metrics indicate it's frequently executed (2.03k QPS) but potentially inefficient due to lack of index usage (100% No index use). Requires a pre-existing prepared statement and the table `d.t`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump033.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE select * from d.t where name=\"adam\"\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Query Packet Hexdump\nDESCRIPTION: TCP packet containing MySQL protocol client query 'SELECT \"hello world\" as greeting'. Shows packet headers and payload in hexadecimal format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump001.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n4508 0059 6eb2 4000 4006 cde2 7f00 0001\n7f00 0001 a4b7 0cea ac8a 8413 ad16 9219\n8018 0201 fe4d 0000 0101 080a 0024 f99a\n0024 ed0a 2100 0000 0373 656c 6563 7420\n2268 656c 6c6f 2077 6f72 6c64 2220 6173\n2067 7265 6574 696e 67\n```\n\n----------------------------------------\n\nTITLE: Generic SQL Query Pattern for Column Selection\nDESCRIPTION: Represents a general SQL query pattern identified within query class '883A4BC43021922E'. It selects a column, likely varying per host (indicated by `host?_col`), from the table `test.t`. This pattern forms the basis for the specific queries executed and compared across different hosts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect host?_col from test.t\n```\n\n----------------------------------------\n\nTITLE: MySQL Sleep Query Analysis\nDESCRIPTION: A slow query executing sleep(2) on table 'n' with accompanying SHOW and EXPLAIN commands. The query runs for exactly 2 seconds with minimal resource impact, executed twice from localhost by root user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow014_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `test` LIKE 'n'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `test`.`n`\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect sleep(2) from n\n```\n\n----------------------------------------\n\nTITLE: Linux Disk Scheduler Configuration\nDESCRIPTION: Shows disk scheduler settings and queue sizes for various block devices including dm devices, mmcblk, and NVMe drives.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_006.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndm-0 | 128\ndm-1 | 128\ndm-2 | 128\nmmcblk0 | [mq-deadline] 128\nnvme0n1 | [none] 127\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Stored Procedure rewards_report\nDESCRIPTION: Defines a MySQL stored procedure named `rewards_report`. This procedure identifies customers who meet specific monthly purchase frequency and total amount criteria within the last full month. It takes minimum purchases (`min_monthly_purchases`) and minimum amount (`min_dollar_amount_purchased`) as input, validates them, calculates the relevant date range, uses a temporary table (`tmpCustomer`) to store qualifying customer IDs, outputs the total count of rewardees (`count_rewardees`), and finally selects the details of these customers from the `customer` table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50020 DEFINER=`msandbox`@`%`*/ /*!50003 PROCEDURE `rewards_report`(\n    IN min_monthly_purchases TINYINT UNSIGNED\n    , IN min_dollar_amount_purchased DECIMAL(10,2) UNSIGNED\n    , OUT count_rewardees INT\n)\n    READS SQL DATA\n    COMMENT 'Provides a customizable report on best customers'\nproc: BEGIN\n\n    DECLARE last_month_start DATE;\n    DECLARE last_month_end DATE;\n\n    /*\n    If the minimum monthly purchases is 0, then exit the procedure.\n    Also, if the minimum dollar amount purchased is 0.00, then exit the procedure.\n    */\n    IF min_monthly_purchases = 0 THEN\n        SELECT 'Minimum monthly purchases parameter must be > 0';\n        LEAVE proc;\n    END IF;\n    IF min_dollar_amount_purchased = 0.00 THEN\n        SELECT 'Minimum monthly dollar amount purchased parameter must be > $0.00';\n        LEAVE proc;\n    END IF;\n\n    /* Determine the start and end dates for the previous month. */\n    SET last_month_start = DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH);\n    SET last_month_start = STR_TO_DATE(CONCAT(YEAR(last_month_start),'-',MONTH(last_month_start),'-01'),'%Y-%m-%d');\n    SET last_month_end = LAST_DAY(last_month_start);\n\n    /* Create a temporary storage area for Customer IDs */\n    CREATE TEMPORARY TABLE tmpCustomer (customer_id SMALLINT UNSIGNED NOT NULL PRIMARY KEY);\n\n    /* \n    Find all customers who rented at least once in the specified period.\n    */\n    INSERT INTO tmpCustomer (customer_id)\n    SELECT p.customer_id\n    FROM payment AS p\n    WHERE DATE(p.payment_date) BETWEEN last_month_start AND last_month_end\n    GROUP BY customer_id\n    HAVING SUM(p.amount) > min_dollar_amount_purchased\n    AND COUNT(customer_id) > min_monthly_purchases;\n\n    /* Populate the OUT parameter with the number of qualifying customers */\n    SELECT COUNT(*) FROM tmpCustomer INTO count_rewardees;\n\n    /*\n    Output the list of customers.\n    */\n    SELECT c.*\n    FROM tmpCustomer AS t\n    INNER JOIN customer AS c ON t.customer_id = c.customer_id;\n\n    /* Clean up the temporary table */\n    DROP TABLE tmpCustomer;\nEND */;;\nDELIMITER ;\n/*!50003 SET sql_mode              = @saved_sql_mode */ ;\n/*!50003 SET character_set_client  = @saved_cs_client */ ;\n/*!50003 SET character_set_results = @saved_cs_results */ ;\n/*!50003 SET collation_connection  = @saved_col_connection */ ;\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Usage Statistics for Multiple Devices in Linux\nDESCRIPTION: This snippet shows the output of a disk usage statistics command, likely from /proc/diskstats or similar. It includes information on physical disks (xvdb1), RAID arrays (md0), and logical volumes (dm-0, dm-1, dm-2, dm-3) with various metrics like read/write operations, sectors, and time spent.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/bug-1035311.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n 202      17 xvdb1 204328172 10730367 8655242078 343325584 384710124 40724809 15617500899 2443393806 0 1164772770 2787144380\n   9       0 md0 0 0 0 0 0 0 0 0 0 0 0\n 253       0 dm-0 215067164 0 8655241102 973750664 436106213 0 15617500867 519460610 0 1165293250 1493935944\n 253       1 dm-1 27721 0 387490 788600 550952 0 7550928 8271600 0 622960 9060290\n 253       2 dm-2 2256 0 48194 29430 61331 0 508992 355400 0 138920 384830\n 253       3 dm-3 1529 0 12226 19800 78371 0 627432 681430 0 223790 701230\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response with Version Comment\nDESCRIPTION: The MySQL server response packet showing the result of the version_comment query. The hexdump reveals the protocol structure and the response contains '(Ubuntu)' as part of the version information, indicating this is running on an Ubuntu system.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump017.txt#2025-04-22_snippet_1\n\nLANGUAGE: hexdump\nCODE:\n```\n0x0000:  4508 0083 07ee 4000 4006 347d 7f00 0001\n0x0010:  7f00 0001 0cea e222 0b4b fcb5 0ab4 d423\n0x0020:  8018 0200 fe77 0000 0101 080a 0034 fb91\n0x0030:  0034 fb91 0100 0001 0127 0000 0203 6465\n0x0040:  6600 0000 1140 4076 6572 7369 6f6e 5f63\n0x0050:  6f6d 6d65 6e74 000c 0800 0800 0000 fd01\n0x0060:  001f 0000 0500 0003 fe00 0002 0009 0000\n0x0070:  0408 2855 6275 6e74 7529 0500 0005 fe00\n0x0080:  0002 00\n```\n\n----------------------------------------\n\nTITLE: Extracting Table Name from File Path in MySQL\nDESCRIPTION: This function extracts the table name from a given file path. It's useful when working with Performance Schema IO statistics data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_117\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.extract_table_from_file_name('/var/lib/mysql/employees/employee.ibd');\n```\n\n----------------------------------------\n\nTITLE: Querying schema_table_statistics_with_buffer View in MySQL\nDESCRIPTION: Demonstrates a sample query on the schema_table_statistics_with_buffer view, showing detailed statistics for a single table including I/O operations, latency, and buffer pool usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_63\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from schema_table_statistics_with_buffer limit 1\\G\n*************************** 1. row ***************************\n                 table_schema: mem\n                   table_name: mysqlserver\n                 rows_fetched: 27087\n                fetch_latency: 442.72 ms\n                rows_inserted: 2\n               insert_latency: 185.04 us\n                 rows_updated: 5096\n               update_latency: 1.39 s\n                 rows_deleted: 0\n               delete_latency: 0 ps\n             io_read_requests: 2565\n                io_read_bytes: 1121627\n              io_read_latency: 10.07 ms\n            io_write_requests: 1691\n               io_write_bytes: 128383\n             io_write_latency: 14.17 ms\n             io_misc_requests: 2698\n              io_misc_latency: 433.66 ms\n          innodb_buffer_pages: 19\n   innodb_buffer_pages_hashed: 19\n      innodb_buffer_pages_old: 19\ninnodb_buffer_bytes_allocated: 311296\n     innodb_buffer_bytes_data: 1924\n    innodb_buffer_rows_cached: 2\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Database and Tables\nDESCRIPTION: Creates the 'percona_test' database and defines tables 'checksums' and 'sentinel'. Sets character encoding and engine types.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE DATABASE /*!32312 IF NOT EXISTS*/ `percona_test` /*!40100 DEFAULT CHARACTER SET latin1 */;\n\nUSE `percona_test`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n/*!40101 SET character_set_client = @saved_cs_client */;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `sentinel` (\n  `id` int(11) NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Creating film_not_in_stock Procedure in MySQL\nDESCRIPTION: This stored procedure checks for copies of a specific film that are not in stock at a given store and returns the count.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_33\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE `film_not_in_stock`(IN p_film_id INT, IN p_store_id INT, OUT p_film_count INT)\n    READS SQL DATA\nBEGIN\n     SELECT inventory_id\n     FROM inventory\n     WHERE film_id = p_film_id\n     AND store_id = p_store_id\n     AND NOT inventory_in_stock(inventory_id);\n\n     SELECT FOUND_ROWS() INTO p_film_count;\nEND\n```\n\n----------------------------------------\n\nTITLE: Querying Session View - MySQL sys.session - SQL\nDESCRIPTION: This code snippet provides a formatted example output of querying the sys.session view in MySQL, displaying session/thread-level information for user connections. It highlights monitored attributes such as current SQL command, statement and transaction latencies, resources used, and session metadata. No explicit dependencies are required, though access to sys.session is necessary; output details may depend on MySQL version.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_70\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.session\\G\n*************************** 1. row ***************************\n                thd_id: 24\n               conn_id: 2\n                  user: root@localhost\n                    db: sys\n               command: Query\n                 state: Sending data\n                  time: 0\n     current_statement: select * from sys.session\n     statement_latency: 137.22 ms\n              progress: NULL\n          lock_latency: 33.75 ms\n         rows_examined: 0\n             rows_sent: 0\n         rows_affected: 0\n            tmp_tables: 4\n       tmp_disk_tables: 1\n             full_scan: YES\n        last_statement: NULL\nlast_statement_latency: NULL\n        current_memory: 3.26 MiB\n             last_wait: wait/synch/mutex/innodb/file_format_max_mutex\n     last_wait_latency: 64.09 ns\n                source: trx0sys.cc:778\n           trx_latency: 7.88 s\n             trx_state: ACTIVE\n        trx_autocommit: NO\n                   pid: 4212\n          program_name: mysql\n```\n\n----------------------------------------\n\nTITLE: Describing user_summary_by_file_io_type Tables in MySQL Performance Schema\nDESCRIPTION: Shows the structure of user_summary_by_file_io_type and x$user_summary_by_file_io_type tables which break down file I/O statistics by event type for each user. These tables include fields for event name, operation count, latency, and maximum latency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_95\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_file_io_type;\n+-------------+---------------------+------+-----+---------+-------+\n| Field       | Type                | Null | Key | Default | Extra |\n+-------------+---------------------+------+-----+---------+-------+\n| user        | varchar(32)         | YES  |     | NULL    |       |\n| event_name  | varchar(128)        | NO   |     | NULL    |       |\n| total       | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency     | text                | YES  |     | NULL    |       |\n| max_latency | text                | YES  |     | NULL    |       |\n+-------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.02 sec)\n\nmysql> desc x$user_summary_by_file_io_type;\n+-------------+---------------------+------+-----+---------+-------+\n| Field       | Type                | Null | Key | Default | Extra |\n+-------------+---------------------+------+-----+---------+-------+\n| user        | varchar(32)         | YES  |     | NULL    |       |\n| event_name  | varchar(128)        | NO   |     | NULL    |       |\n| total       | bigint(20) unsigned | NO   |     | NULL    |       |\n| latency     | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n+-------------+---------------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Recording TCP Packet Hex Dumps - Plaintext Log Format - Plaintext\nDESCRIPTION: This snippet shows a segment of a TCP packet traffic capture using a hex dump log format common in network engineering and debugging tools such as tcpdump. The log exhibits bi-directional communication between local IP addresses (127.0.0.1) with timestamps, packet lengths, and detailed hexadecimal as well as ASCII decoded data per packet segment. No dependencies are required, as this is raw log output; expected input is TCP packet activity, and the output is a readable breakdown of IP and TCP header fields, payloads, and metadata. The format aids developers in verifying protocol implementations or diagnosing connectivity issues.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump041.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-12-08 09:23:49.637108 IP 127.0.0.1.58619 > 127.0.0.1.12345: tcp 32\\n\\t0x0000:  4508 0054 b468 4000 4006 8831 7f00 0001\\n\\t0x0010:  7f00 0001 e4fb 3039 47e2 1612 4850 bc0a\\n\\t0x0020:  8018 0101 fe48 0000 0101 080a 000f a420\\n\\t0x0030:  000f a13c 1c00 0000 1653 454c 4543 5420\\n\\t0x0040:  6920 4652 4f4d 2064 2e74 2057 4845 5245\\n\\t0x0050:  2069 3d3f\\n2009-12-08 09:23:49.637194 IP 127.0.0.1.12345 > 127.0.0.1.58619: tcp 0\\n\\t0x0000:  4508 0034 1ab3 4000 4006 2207 7f00 0001\\n\\t0x0010:  7f00 0001 3039 e4fb 4850 bc0a 47e2 1632\\n\\t0x0020:  8010 0100 b7b7 0000 0101 080a 000f a420\\n\\t0x0030:  000f a420\\n2009-12-08 09:23:49.637394 IP 127.0.0.1.12345 > 127.0.0.1.58619: tcp 92\\n\\t0x0000:  4508 0090 1ab4 4000 4006 21aa 7f00 0001\\n\\t0x0010:  7f00 0001 3039 e4fb 4850 bc0a 47e2 1632\\n\\t0x0020:  8018 0100 fe84 0000 0101 080a 000f a420\\n\\t0x0030:  000f a420 0c00 0001 0002 0000 0001 0001\\n\\t0x0040:  0000 0000 1700 0002 0364 6566 0000 0001\\n\\t0x0050:  3f00 0c3f 0000 0000 00fd 8000 0000 0005\\n\\t0x0060:  0000 03fe 0000 0200 1b00 0004 0364 6566\\n\\t0x0070:  0164 0174 0174 0169 0169 0c3f 000b 0000\\n\\t0x0080:  0003 0000 0000 0005 0000 05fe 0000 0200\n```\n\n----------------------------------------\n\nTITLE: MySQL Transaction Lock Details\nDESCRIPTION: A collection of InnoDB transaction logs showing table locks (IX mode), record locks (X mode), and transaction details including thread IDs, query IDs and client connections. The locks involve multiple tables in the citydb database with prepared transactions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.002.txt#2025-04-22_snippet_2\n\nLANGUAGE: mysql\nCODE:\n```\nTABLE LOCK table `citydb`.`player_buildings` trx id 7C6E3AB1 lock mode IX\nRECORD LOCKS space id 149 page no 77084 n bits 256 index `PRIMARY` of table `citydb`.`player_buildings` trx id 7C6E3AB1 lock_mode X locks rec but not gap\n```\n\nLANGUAGE: mysql\nCODE:\n```\nTABLE LOCK table `citydb`.`city_grid` trx id 7C6E3AAE lock mode IX\nRECORD LOCKS space id 148 page no 581986 n bits 568 index `PRIMARY` of table `citydb`.`city_grid` trx id 7C6E3AAE lock_mode X locks rec but not gap\n```\n\nLANGUAGE: mysql\nCODE:\n```\nTABLE LOCK table `citydb`.`players` trx id 7C6E3AAC lock mode IX\nRECORD LOCKS space id 146 page no 23844 n bits 160 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3AAC lock_mode X locks rec but not gap\n```\n\n----------------------------------------\n\nTITLE: Defining staff_list View in MySQL Sakila Database\nDESCRIPTION: Creates a view that displays staff information including ID, name, address details, phone, city, country, and store ID. It joins staff, address, city, and country tables to provide a complete overview of staff contact information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_46\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 DROP TABLE IF EXISTS `staff_list`*/;\n/*!50001 DROP VIEW IF EXISTS `staff_list`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `staff_list` AS select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,_utf8' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`city`.`city` AS `city`,`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`staff` `s` join `address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `city` on((`a`.`city_id` = `city`.`city_id`))) join `country` on((`city`.`country_id` = `country`.`country_id`))) */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Querying Example Statement with Sorting - MySQL sys Table - SQL\nDESCRIPTION: This snippet selects a single row (LIMIT 1) from the statements_with_sorting table, displaying all columns and their values for one normalized statement that performed sorts. It provides real output including query text, collected statistics and digest id. Requires MySQL with sys schema and relevant performance data. Input is via SQL SELECT, output is a key-value dump of statistics for a single statement.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_89\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from statements_with_sorting limit 1\\G\n*************************** 1. row ***************************\n            query: SELECT * FROM `schema_object_o ... MA` , `information_schema` ...\n               db: sys\n       exec_count: 2\n    total_latency: 16.75 s\nsort_merge_passes: 0\n  avg_sort_merges: 0\nsorts_using_scans: 12\n sort_using_range: 0\n      rows_sorted: 168\n  avg_rows_sorted: 84\n       first_seen: 2014-03-07 13:13:41\n        last_seen: 2014-03-07 13:13:48\n           digest: 54f9bd520f0bbf15db0c2ed93386bec9\n```\n\n----------------------------------------\n\nTITLE: Analyzing tmpfs Mount Configuration\nDESCRIPTION: Display of tmpfs filesystem mounts showing size, permissions, and mount options for various system paths.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ntmpfs                       95G   5% tmpfs    rw,nosuid,nodev,relatime,seclabel,size=19801800k,mode=700,uid=10014,gid=10000                                                                                                                                                                                                                                                                                                                                  /run\n```\n\n----------------------------------------\n\nTITLE: MySQL Network Communication Packet Capture with Hexadecimal Data\nDESCRIPTION: A detailed packet capture showing network communication between MySQL client and server, including TCP headers and payload data in hexadecimal format. The capture shows a complete conversation with SQL queries and responses.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/bad_tcpdump.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n2009-04-12 11:00:13.118378 IP \n\t0x0000:  4508 0059 283f 4000 4006 1456 7f00 0001\n\t0x0010:  7f00 0001 e222 0cea 0ab4 d3fe 0b4b fcb5\n\t0x0020:  8018 0201 fe4d 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 f100 \n2009-04-12 11:00:13.118191 IP 10.10.10.14.mysql > 127.0.0.1.57890: tcp 11\n\t0x0000:  4508 003f 07ed 4000 4006 34c2 7f00 0001\n\t0x0010:  7f00 0001 0cea e222 0b4b fcaa 0ab4 d3fe\n\t0x0020:  8018 0200 fe33 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 0700 0002 0000 0002 0000 00\n2009-04-12 11:00:13.118378 IP 127.0.0.1.57890 > 10.10.10.14.mysql: tcp 37\n\t0x0000:  4508 0059 283f 4000 4006 1456 7f00 0001\n\t0x0010:  7f00 0001 e222 0cea 0ab4 d3ff 0b4b fcb5\n\t0x0020:  8018 0201 fe4d 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 2100 0000 0373 656c 6563 7420\n\t0x0040:  4040 7665 7273 696f 6e5f 636f 6d6d 656e\n\t0x0050:  7420 6c69 6d69 7420 31\n2009-04-12 11:00:13.118643 IP 10.10.10.14.mysql > 127.0.0.1.57890: tcp 79\n\t0x0000:  4508 0083 07ee 4000 4006 347d 7f00 0001\n\t0x0010:  7f00 0001 0cea e222 0b4b fcb5 0ab4 d423\n\t0x0020:  8018 0200 fe77 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 0100 0001 0127 0000 0203 6465\n\t0x0040:  6600 0000 1140 4076 6572 7369 6f6e 5f63\n\t0x0050:  6f6d 6d65 6e74 000c 0800 0800 0000 fd01\n\t0x0060:  001f 0000 0500 0003 fe00 0002 0009 0000\n\t0x0070:  0408 2855 6275 6e74 7529 0500 0005 fe00\n\t0x0080:  0002 00\n2009-04-12 11:00:13.118912 IP 127.0.0.1.57890 > 10.10.10.14.mysql: tcp 46\n\t0x0000:  4508 0062 2840 4000 4006 144c 7f00 0001\n\t0x0010:  7f00 0001 e222 0cea 0ab4 d423 0b4b fd04\n\t0x0020:  8018 0201 fe56 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 2a00 0000 0373 656c 6563 7420\n\t0x0040:  2270 6172 6973 2069 6e20 7468 6520 7468\n\t0x0050:  6520 7370 7269 6e67 2220 6173 2074 7269\n\t0x0060:  636b\n2009-04-12 11:00:13.119079 IP 10.10.10.14.mysql > 127.0.0.1.57890: tcp 82\n\t0x0000:  4508 0086 07ef 4000 4006 3479 7f00 0001\n\t0x0010:  7f00 0001 0cea e222 0b4b fd04 0ab4 d451\n\t0x0020:  8018 0200 fe7a 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 0100 0001 011b 0000 0203 6465\n\t0x0040:  6600 0000 0574 7269 636b 000c 0800 1700\n\t0x0050:  0000 fd01 001f 0000 0500 0003 fe00 0002\n\t0x0060:  0018 0000 0417 7061 7269 7320 696e 2074\n\t0x0070:  6865 2074 6865 2073 7072 696e 6705 0000\n\t0x0080:  05fe 0000 0200\n2009-04-12 11:00:13.119487 IP 127.0.0.1.57890 > 10.10.10.14.mysql: tcp 5\n\t0x0000:  4508 0039 2841 4000 4006 1474 7f00 0001\n\t0x0010:  7f00 0001 e222 0cea 0ab4 d451 0b4b fd56\n\t0x0020:  8018 0201 fe2d 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 0100 0000 01\n2009-04-12 11:00:13.119604 IP 10.10.10.14.mysql > 127.0.0.1.57890: tcp 0\n\t0x0000:  4508 0034 07f0 4000 4006 34ca 7f00 0001\n\t0x0010:  7f00 0001 0cea e222 0b4b fd56 0ab4 d456\n\t0x0020:  8011 0200 a874 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91\n2009-04-12 11:00:13.119714 IP 127.0.0.1.57890 > 10.10.10.14.mysql: tcp 0\n\t0x0000:  4508 0034 2842 4000 4006 1478 7f00 0001\n\t0x0010:  7f00 0001 e222 0cea 0ab4 d456 0b4b fd57\n\t0x0020:  8011 0201 a872 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91\n2009-04-12 11:00:13.119737 IP 10.10.10.14.mysql > 127.0.0.1.57890: tcp 0\n\t0x0000:  4508 0034 07f1 4000 4006 34c9 7f00 0001\n\t0x0010:  7f00 0001 0cea e222 0b4b fd57 0ab4 d457\n\t0x0020:  8010 0200 a873 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Tables\nDESCRIPTION: Creates test tables used by Percona Toolkit including checksums, load_data and sentinel tables with basic schemas for testing purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`db_tbl`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Query Analysis Data Structure in Perl\nDESCRIPTION: This code snippet defines a complex Perl hash structure that stores detailed information about MySQL query performance and execution statistics. It includes attribute types, grouping criteria, and aggregated results for various query metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow028.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n$VAR1 = {\n  attribute_types => {\n    Error_no => 'string',\n    Lock_time => 'num',\n    Query_time => 'num',\n    Rows_examined => 'num',\n    Rows_sent => 'num',\n    Statement_id => 'string',\n    Status_code => 'string',\n    bytes => 'num',\n    host => 'string',\n    key_print => 'string',\n    pos_in_log => 'num',\n    ts => 'string',\n    user => 'string',\n    val => 'string'\n  },\n  groupby => 'fingerprint',\n  results => {\n    classes => {\n      'select * from a, a, a' => {\n        Lock_time => {\n          all => {'0' => 1},\n          cnt => 1,\n          last => 0,\n          max => 0,\n          min => 0,\n          sum => 0\n        },\n        Query_time => {\n          all => {'298' => 1},\n          cnt => 1,\n          last => 2,\n          max => 2,\n          min => 2,\n          sum => 2\n        },\n        Rows_examined => {\n          all => {'0' => 1},\n          cnt => 1,\n          last => 0,\n          max => 0,\n          min => 0,\n          sum => 0\n        },\n        Rows_sent => {\n          all => {'284' => 1},\n          cnt => 1,\n          last => 1,\n          max => 1,\n          min => 1,\n          sum => 1\n        },\n        bytes => {\n          all => {'346' => 1},\n          cnt => 1,\n          last => 21,\n          max => 21,\n          min => 21,\n          sum => 21\n        },\n        host => {\n          cnt => 1,\n          max => 'localhost',\n          min => 'localhost',\n          unq => {localhost => 1}\n        },\n        pos_in_log => {\n          all => {'0' => 1},\n          cnt => 1,\n          last => 0,\n          max => 0,\n          min => 0,\n          sum => 0\n        },\n        ts => {\n          cnt => 1,\n          max => '071015 21:43:52',\n          min => '071015 21:43:52',\n          unq => {'071015 21:43:52' => 1}\n        },\n        user => {\n          cnt => 1,\n          max => 'root',\n          min => 'root',\n          unq => {root => 1}\n        }\n      }\n    },\n    globals => {\n      Lock_time => {\n        all => {'0' => 1},\n        cnt => 1,\n        max => 0,\n        min => 0,\n        sum => 0\n      },\n      Query_time => {\n        all => {'298' => 1},\n        cnt => 1,\n        max => 2,\n        min => 2,\n        sum => 2\n      },\n      Rows_examined => {\n        all => {'0' => 1},\n        cnt => 1,\n        max => 0,\n        min => 0,\n        sum => 0\n      },\n      Rows_sent => {\n        all => {'284' => 1},\n        cnt => 1,\n        max => 1,\n        min => 1,\n        sum => 1\n      },\n      bytes => {\n        all => {'346' => 1},\n        cnt => 1,\n        max => 21,\n        min => 21,\n        sum => 21\n      },\n      host => {\n        cnt => 1,\n        max => 'localhost',\n        min => 'localhost'\n      },\n      pos_in_log => {\n        all => {'0' => 1},\n        cnt => 1,\n        max => 0,\n        min => 0,\n        sum => 0\n      },\n      ts => {\n        cnt => 1,\n        max => '071015 21:43:52',\n        min => '071015 21:43:52'\n      },\n      user => {\n        cnt => 1,\n        max => 'root',\n        min => 'root'\n      }\n    },\n    samples => {\n      'select * from a, a, a' => {\n        Lock_time => '0',\n        Query_time => '2',\n        Rows_examined => '0',\n        Rows_sent => '1',\n        arg => 'select * from a, a, a',\n        bytes => 21,\n        cmd => 'Query',\n        fingerprint => 'select * from a, a, a',\n        host => 'localhost',\n        ip => '',\n        pos_in_log => 0,\n        ts => '071015 21:43:52',\n        user => 'root'\n      }\n    }\n  },\n  worst => 'Query_time'\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Queries in MySQL\nDESCRIPTION: A series of simple SELECT queries retrieving literal integer values from a table named 'foo'. Each query follows the same pattern but selects a different sequential ID number. These queries all have identical performance characteristics with 0.000899 query time and 0.000000 lock time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1926 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1927 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1928 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1929 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1930 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1931 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1932 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1933 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1934 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1935 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1936 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1937 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1938 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1939 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1940 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1941 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1942 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1943 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1944 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1945 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1946 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1947 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1948 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1949 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1950 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1951 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1952 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1953 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1954 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1955 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1956 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1957 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1958 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1959 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1960 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1961 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1962 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1963 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1964 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1965 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1966 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1967 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1968 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1969 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1970 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1971 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1972 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1973 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1974 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Sample pt-mongodb-query-digest Output - Text\nDESCRIPTION: This snippet provides an example of the textual output generated by pt-mongodb-query-digest, summarizing query metrics such as count, execution time, documents examined/returned, bytes received, and metadata like query fingerprint and namespaces. There are no actual computations here; this shows how the tool presents its analysis. This format helps users understand what to expect from the report output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-mongodb-query-digest/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n# Query 3:  0.06 QPS, ID 0b906bd86148def663d11b402f3e41fa\n# Ratio    1.00  (docs examined/returned)\n# Time range: 2017-02-03 16:01:37.484 -0300 ART to 2017-02-03 16:02:08.43 -0300 ART\n# Attribute            pct     total        min         max        avg         95%        stddev      median\n# ==================   ===   ========    ========    ========    ========    ========     =======    ========\n# Count (docs)                   100\n# Exec Time ms           2         3           0           1           0           0           0           0\n# Docs Examined          5      7.50K      75.00       75.00       75.00       75.00        0.00       75.00\n# Docs Returned         92      7.50K      75.00       75.00       75.00       75.00        0.00       75.00\n# Bytes recv             1    106.12M       1.06M       1.06M       1.06M       1.06M       0.00        1.06M\n# String:\n# Namespaces          samples.col1\n# Operation           query\n# Fingerprint         find,shardVersion\n# Query               {\"find\":\"col1\",\"shardVersion\":[0,\"000000000000000000000000\"]}\n```\n\n----------------------------------------\n\nTITLE: Retrieving RAID Controller Configuration with arcconf CLI - Plain Text\nDESCRIPTION: This code snippet is the verbatim output of the 'arcconf getconfig 1' command, which is used to query Adaptec RAID controller configuration and status via command-line interface. No code dependencies are required, but the underlying Adaptec/arcconf utilities must be installed on the system, and this command should be run with administrative privileges. The output includes controller model, status, logical/physical device inventories, RAID array details and firmware versions, and is typically parsed or referenced by server administrators for health monitoring, inventory, or troubleshooting; input is a shell command, and the output is the multiline plain text shown, with no programmatic capability by itself.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/arcconf-003_900285.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# arcconf getconfig 1\\nControllers found: 1\\n----------------------------------------------------------------------\\nController information\\n----------------------------------------------------------------------\\n   Controller Status : Optimal\\n   Channel description : SAS/SATA\\n   Controller Model : Adaptec 5805Z\\n   Controller Serial Number : 0A11115148F\\n   Physical Slot : 2\\n   Temperature : 68 C/ 154 F (Normal)\\n   Installed memory : 512 MB\\n   Copyback : Disabled\\n   Background consistency check : Disabled\\n   Automatic Failover : Enabled\\n   Global task priority : High\\n   Performance Mode : Default/Dynamic\\n   Stayawake period : Disabled\\n   Spinup limit internal drives : 0\\n   Spinup limit external drives : 0\\n   Defunct disk drive count : 0\\n   Logical devices/Failed/Degraded : 2/0/0\\n   SSDs assigned to MaxIQ Cache pool : 0\\n   Maximum SSDs allowed in MaxIQ Cache pool : 8\\n   MaxIQ Read Cache Pool Size : 0.000 GB\\n   MaxIQ cache fetch rate : 0\\n   MaxIQ Cache Read, Write Balance Factor : 3,1\\n   NCQ status : Enabled\\n   Statistics data collection mode : Enabled\\n   --------------------------------------------------------\\n\\n   --------------------------------------------------------\\n   Controller Version Information\\n   --------------------------------------------------------\\n   BIOS : 5.2-0 (18252)\\n   Firmware : 5.2-0 (18252)\\n   Driver : 1.1-7 (28000)\\n   Boot Flash : 5.2-0 (18252)\\n   --------------------------------------------------------\\n   Controller ZMM Information\\n   --------------------------------------------------------\\n   Status : ZMM Optimal\\n\\n----------------------------------------------------------------------\\nLogical device information\\n----------------------------------------------------------------------\\nLogical device number 0\\n   Logical device name : RAID10-A\\n   RAID level : 10\\n   Status of logical device : Optimal\\n   Size : 121790 MB\\n   Stripe-unit size : 256 KB\\n   Read-cache mode : Enabled\\n   MaxIQ preferred cache setting : Enabled\\n   MaxIQ cache setting : Disabled\\n   Write-cache mode : Enabled (write-back)\\n   Write-cache setting : Enabled (write-back) when protected by battery/ZMM\\n   Partitioned : Yes\\n   Protected by Hot-Spare : No\\n   Bootable : Yes\\n   Failed stripes : No\\n   Power settings : Disabled\\n   --------------------------------------------------------\\n   Logical device segment information\\n   --------------------------------------------------------\\n   Group 0, Segment 0 : Present (0,0) CVEM939500TN064KGN\\n   Group 0, Segment 1 : Present (0,1) CVEM940200NT064KGN\\n   Group 1, Segment 0 : Present (0,2) CVEM004300A4064KGN\\n   Group 1, Segment 1 : Present (0,3) CVEM9214000F064KGN\\n\\nLogical device number 1\\n   Logical device name : RAID1-A\\n   RAID level : 1\\n   Status of logical device : Optimal\\n   Size : 285686 MB\\n   Read-cache mode : Enabled\\n   MaxIQ preferred cache setting : Enabled\\n   MaxIQ cache setting : Disabled\\n   Write-cache mode : Enabled (write-back)\\n   Write-cache setting : Enabled (write-back) when protected by battery/ZMM\\n   Partitioned : Yes\\n   Protected by Hot-Spare : No\\n   Bootable : No\\n   Failed stripes : No\\n   Power settings : Disabled\\n   --------------------------------------------------------\\n   Logical device segment information\\n   --------------------------------------------------------\\n   Segment 0 : Present (0,4) 6SJ1CG1A0000N1407G9E\\n   Segment 1 : Present (0,5) 6SJ1F1XW0000N1407EXC\\n\\n----------------------------------------------------------------------\\nPhysical Device information\\n----------------------------------------------------------------------\\n      Device #0\\n         Device is a Hard drive\\n         State : Online\\n         Supported : Yes\\n         Transfer Speed : SATA 3.0 Gb/s\\n         Reported Channel,Device(T:L) : 0,0(0:0)\\n         Reported Location : Connector 0, Device 0\\n         Vendor : INTEL\\n         Model : SSDSA2SH064G1GC\\n         Firmware : 045C8790\\n         Serial number : CVEM939500TN064KGN\\n         Size : 61057 MB\\n         Write Cache : Enabled (write-back)\\n         FRU : None\\n         S.M.A.R.T. : No\\n         S.M.A.R.T. warnings : 0\\n         Power State : Full rpm\\n         Supported Power States : Full rpm,Powered off\\n         SSD : Yes\\n         MaxIQ Cache Capable : No\\n         MaxIQ Cache Assigned : No\\n         NCQ status : Enabled\\n      Device #1\\n         Device is a Hard drive\\n         State : Online\\n         Supported : Yes\\n         Transfer Speed : SATA 3.0 Gb/s\\n         Reported Channel,Device(T:L) : 0,1(1:0)\\n         Reported Location : Connector 0, Device 1\\n         Vendor : INTEL\\n         Model : SSDSA2SH064G1GC\\n         Firmware : 045C8860\\n         Serial number : CVEM940200NT064KGN\\n         Size : 61057 MB\\n         Write Cache : Enabled (write-back)\\n         FRU : None\\n         S.M.A.R.T. : No\\n         S.M.A.R.T. warnings : 0\\n         Power State : Full rpm\\n         Supported Power States : Full rpm,Powered off\\n         SSD : Yes\\n         MaxIQ Cache Capable : No\\n         MaxIQ Cache Assigned : No\\n         NCQ status : Enabled\\n      Device #2\\n         Device is a Hard drive\\n         State : Online\\n         Supported : Yes\\n         Transfer Speed : SATA 3.0 Gb/s\\n         Reported Channel,Device(T:L) : 0,2(2:0)\\n         Reported Location : Connector 0, Device 2\\n         Vendor : INTEL\\n         Model : SSDSA2SH064G1GC\\n         Firmware : 045C8860\\n         Serial number : CVEM004300A4064KGN\\n         Size : 61057 MB\\n         Write Cache : Enabled (write-back)\\n         FRU : None\\n         S.M.A.R.T. : No\\n         S.M.A.R.T. warnings : 0\\n         Power State : Full rpm\\n         Supported Power States : Full rpm,Powered off\\n         SSD : Yes\\n         MaxIQ Cache Capable : No\\n         MaxIQ Cache Assigned : No\\n         NCQ status : Enabled\\n      Device #3\\n         Device is a Hard drive\\n         State : Online\\n         Supported : Yes\\n         Transfer Speed : SATA 3.0 Gb/s\\n         Reported Channel,Device(T:L) : 0,3(3:0)\\n         Reported Location : Connector 0, Device 3\\n         Vendor : INTEL\\n         Model : SSDSA2SH064G1GC\\n         Firmware : 045C8860\\n         Serial number : CVEM9214000F064KGN\\n         Size : 61057 MB\\n         Write Cache : Enabled (write-back)\\n         FRU : None\\n         S.M.A.R.T. : No\\n         S.M.A.R.T. warnings : 0\\n         Power State : Full rpm\\n         Supported Power States : Full rpm,Powered off\\n         SSD : Yes\\n         MaxIQ Cache Capable : No\\n         MaxIQ Cache Assigned : No\\n         NCQ status : Enabled\\n      Device #4\\n         Device is a Hard drive\\n         State : Online\\n         Supported : Yes\\n         Transfer Speed : SAS 3.0 Gb/s\\n         Reported Channel,Device(T:L) : 0,4(4:0)\\n         Reported Location : Connector 1, Device 0\\n         Vendor : SEAGATE\\n         Model : ST3300657SS\\n         Firmware : 0008\\n         Serial number : 6SJ1CG1A0000N1407G9E\\n         World-wide name : 5000C50039EE5900\\n         Size : 286102 MB\\n         Write Cache : Enabled (write-back)\\n         FRU : None\\n         S.M.A.R.T. : No\\n         S.M.A.R.T. warnings : 0\\n         Power State : Full rpm\\n         Supported Power States : Full rpm,Powered off\\n         SSD : No\\n         MaxIQ Cache Capable : No\\n         MaxIQ Cache Assigned : No\\n      Device #5\\n         Device is a Hard drive\\n         State : Online\\n         Supported : Yes\\n         Transfer Speed : SAS 3.0 Gb/s\\n         Reported Channel,Device(T:L) : 0,5(5:0)\\n         Reported Location : Connector 1, Device 1\\n         Vendor : SEAGATE\\n         Model : ST3300657SS\\n         Firmware : 0008\\n         Serial number : 6SJ1F1XW0000N1407EXC\\n         World-wide name : 5000C50039EE6A38\\n         Size : 286102 MB\\n         Write Cache : Enabled (write-back)\\n         FRU : None\\n         S.M.A.R.T. : No\\n         S.M.A.R.T. warnings : 0\\n         Power State : Full rpm\\n         Supported Power States : Full rpm,Powered off\\n         SSD : No\\n         MaxIQ Cache Capable : No\\n         MaxIQ Cache Assigned : No\\n\\nCommand completed successfully.\n```\n\n----------------------------------------\n\nTITLE: Table Update with Join Query\nDESCRIPTION: Updates column1 and word3 in tuningdetail_21_265507 table by joining with gonzo table using the gonzo column. The query operates across two different databases (db1 and db2).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_top_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Table 'b' in 'test' Database\nDESCRIPTION: This SQL snippet creates a table named 'b' in the 'test' database with three columns: an auto-incrementing smallint 'c1' and two varchar columns 'c2' and 'c3'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/dump001.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `b` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL,\n  `c3` varchar(45) NOT NULL,\n);\n```\n\n----------------------------------------\n\nTITLE: Monitoring Disk I/O Statistics with Timestamped Data Collection\nDESCRIPTION: Raw performance data showing I/O statistics for various disk devices over time. The data is prefixed with timestamps (TS) and includes metrics for physical disks, partitions, and logical volumes. Each row contains device identifiers followed by 11 metrics including reads/writes completed, sectors read/written, and time spent on I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/commands.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1281367519\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999682 83425310 811400340 12711047 0 6869437 20744582\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999331 83425040 811399096 12710251 0 6866885 20740511\n104   16 cciss/c0d1 1172444169 44249324 49905804480 3910112166 3461426338 29008876 138140456491 445486927 19 164987623 60581634\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512224 0 44097792 3486922 0 1438723 5640971\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367521\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999728 83425570 811402788 12711087 0 6869439 20744622\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999377 83425300 811401544 12710291 0 6866887 20740551\n104   16 cciss/c0d1 1172445102 44249324 49905846120 3910134507 3461428308 29008877 138140550075 445487158 18 164989469 60604229\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512530 0 44100240 3487167 0 1438725 5641216\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367523\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999760 83425680 811403924 12711100 0 6869440 20744635\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999409 83425410 811402680 12710304 0 6866888 20740564\n104   16 cciss/c0d1 1172445848 44249325 49905881344 3910154917 3461429428 29008878 138140601807 445487273 17 164991287 60624777\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512530 0 44100240 3487167 0 1438725 5641216\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367524\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999764 83425707 811404172 12711100 0 6869440 20744635\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999413 83425437 811402928 12710304 0 6866888 20740564\n104   16 cciss/c0d1 1172446696 44249328 49905917496 3910176524 3461431407 29008878 138140700196 445487503 9 164993065 60646578\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512530 0 44100240 3487167 0 1438725 5641216\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\nTS 1281367526\n1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n104    0 cciss/c0d0 2139885 162788 37361471 8034486 17999806 83426057 811407308 12711120 0 6869442 20744655\n104    1 cciss/c0d0p1 1421 3292 10354 3681 351 270 1244 796 0 4271 4477\n104    2 cciss/c0d0p2 2138455 159477 37350893 8030772 17999455 83425787 811406064 12710324 0 6866890 20740584\n104   16 cciss/c0d1 1172447376 44249329 49905942352 3910192741 3461433233 29008880 138140790476 445487714 5 164994787 60662861\n105    0 cciss/c1d0 73924 269836 2753177 412500 2420473 19748 321780475 6652131 0 514459 7064611\n253    0 dm-0 257136 0 3846266 2153516 5512919 0 44103352 3487398 0 1438727 5641447\n9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Defining Prototype Structure in HTML\nDESCRIPTION: This snippet shows two HTML structures for representing function prototypes: one for 'Parameter Type First' style and another for 'Parameter Name First' style.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Parameter Type First Style -->\n<table Prototype>\n    <td PBeforeParameters>\n        \"void Function (\"\n    </td PBeforeParameters>\n    <td PTypePrefix>\n        \"unsigned\"\n    </td PTypePrefix>\n    <td PType>\n        \"int\"\n    </td PType>\n    <!-- Additional cells for parameters and default values -->\n    <td PAfterParameters>\n        \")\"\n    </td PAfterParameters>\n</table Prototype>\n\n<!-- Parameter Name First Style -->\n<table Prototype>\n    <td PBeforeParameters>\n        \"function Function (\"\n    </td PBeforeParameters>\n    <td PParameter>\n        \"a,\", \"b:\", \"c:\"\n    </td PParameter>\n    <!-- Additional cells for types and default values -->\n    <td PAfterParameters>\n        \")\"\n    </td PAfterParameters>\n</table Prototype>\n```\n\n----------------------------------------\n\nTITLE: Parsing Percona Toolkit CSV Data\nDESCRIPTION: This CSV data likely represents performance metrics or monitoring data from Percona Toolkit. Each row contains multiple fields including identifiers, timestamps, and various numeric measurements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_8\n\nLANGUAGE: CSV\nCODE:\n```\n(8396,1236699600,3,60.004,300,301,7256314,1236699916),\n(8396,1236699600,4,0.154,300,301,7256314,1236699916),\n(8396,1236699600,5,0.0,300,301,7256314,1236699916),\n(8396,1236699600,6,20.0,300,301,7256314,1236699916),\n(8396,1236699600,7,0.0,300,301,7256314,1236699916),\n(8396,1236699600,8,0.0,300,301,7256314,1236699916),\n(8397,1236698100,9,0.0,300,301,7256314,1236699916),\n(8397,1236698100,10,0.0,300,301,7256314,1236699916),\n(8397,1236698100,1,0.0,300,301,7256314,1236699916),\n(8397,1236698100,2,205.615,300,301,7256314,1236699916)\n```\n\n----------------------------------------\n\nTITLE: Example SQL Prepared Statement Query from Percona Analysis\nDESCRIPTION: This SQL snippet shows an example query captured in a Percona Toolkit analysis report, associated with Query ID 0xC29D79D8CB57E235AA8E9FA785927259. It likely represents a prepared statement whose performance metrics (preparation and execution times) are detailed in the preceding table. The query appears truncated, selecting column 't' from a table aliased as 'd'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report030.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT d.t\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Packet Data With Addresses\nDESCRIPTION: Network packet capture showing TCP/IP communication between MySQL client and server, including packet headers and database query results. Contains timestamp information and IP addressing details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump011.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n0x0230:  3134 3027 2c27 3130 3938 3731 3035 3730\n0x0240:  272c 2731 3130 3432 3931 3138 3127 2c27\n[...additional hex lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Language in Natural Docs Configuration\nDESCRIPTION: Configures Python language properties including comment style, function prototype ending, and line extension.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_7\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Python\n\n   Extension: py\n   Shebang String: python\n   Line Comment: #\n   Function Prototype Ender: :\n   Variable Prototype Ender: =\n   Line Extender: \\\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Table in MySQL\nDESCRIPTION: Creates a table for storing film titles and descriptions with full-text search capabilities using MyISAM engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Querying bar database table in MySQL\nDESCRIPTION: A simple SELECT query retrieving a column from bar_tbl in the bar database. This query was executed by different thread IDs with identical performance metrics showing minimal query time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006-first2.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse bar;\nSELECT col FROM bar_tbl;\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table in MySQL\nDESCRIPTION: Creates the store table to manage store locations. Contains foreign keys to staff (manager) and address tables with unique constraint on manager assignment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Linux Disk I/O Statistics Sample Data\nDESCRIPTION: Raw disk performance statistics from /proc/diskstats showing major/minor device numbers, device names, read/write operations, sectors and timing data. Data is collected over multiple timestamps to show disk activity patterns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n   1    2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1    3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489398 163771322 245685 758230469 452642686 198294989 66 218108641 0 621587042 976427557\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n 253    0 dm-0 1418189 0 27251026 5776265 27004970 0 216039760 57460473 0 5590523 63255153\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998382 6091475849 49403813424 2173805790 0 919421223 3016071493\n```\n\n----------------------------------------\n\nTITLE: Setting Query Time and Variable Assignment\nDESCRIPTION: Sets a query execution time comment and assigns a string value to a variable. The query time is specified in the comment as 1 second.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow047.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Query_time: 1\nfoo=\"good\";\n```\n\n----------------------------------------\n\nTITLE: Querying Sequential Values from MySQL Database\nDESCRIPTION: A series of SQL SELECT queries retrieving sequential numeric values from a table named 'foo'. Each query is executed by the same user with identical query time (0.000899s) and lock time (0.000000s), with no rows returned or examined, and no InnoDB statistics available.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1289 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1290 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1291 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1292 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1293 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1294 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1295 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1296 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1297 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1298 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1299 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1300 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1301 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1302 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1303 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1304 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1305 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1306 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1307 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1308 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1309 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1310 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1311 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1312 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1313 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1314 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1315 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1316 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1317 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1318 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1319 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1320 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1321 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1322 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1323 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1324 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1325 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1326 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1327 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1328 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1329 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1330 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1331 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1332 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1333 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1334 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1335 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1336 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1337 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Displaying File System Operation Timings in Tabular Format\nDESCRIPTION: This snippet shows a table of file system operation timings for different files and directories. It includes total time and individual operation times (in seconds) for each file or directory accessed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/001-summarized-sum-times-filename.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n     total      pread       read       open      close getdents64    _llseek filename\n  0.006348   0.006348   0.000000   0.000000   0.000000   0.000000   0.000000 /data/data/abd_2dia/aia_227_228.ibd\n  0.000504   0.000000   0.000000   0.000096   0.000098   0.000310   0.000000 /data/data/abd_2dia/\n  0.000369   0.000369   0.000000   0.000000   0.000000   0.000000   0.000000 /data/data/abd_2dia/aia_227_223.ibd\n  0.000288   0.000000   0.000062   0.000054   0.000045   0.000000   0.000127 /data/data/abd_2dia/test/db.opt\n```\n\n----------------------------------------\n\nTITLE: System Performance Metrics Log\nDESCRIPTION: Performance monitoring log showing system metrics tracked over time. Each line contains timestamp, process ID {41}, CPU metrics, memory usage, and other performance indicators tracked at regular intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/sample_int_diskstats-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n140.4 {41}      15.1    0.1     3.0     0.0    0.0     0.0   7%      3\n141.4 {41}      15.5    0.1     3.0     0.0    0.0     0.0   7%      3\n142.4 {41}      14.9    0.1     3.1     0.0    0.0     0.7   7%      3\n[...truncated for brevity...]\n279.8 {41}      33.9    0.1     1.3     0.1    0.0     0.0   7%      3\n```\n\n----------------------------------------\n\nTITLE: Sample PostgreSQL Cluster Analysis Output\nDESCRIPTION: Example output showing database configuration, tablespace information, cluster details, database sizes, cache hit ratios, wait events, connected users, performance counters, and instance settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n##### --- Database Port and Data_Directory --- ####\n+----------------------+----------------------------------------------------+\n|         Name         |                      Setting                       |\n+----------------------+----------------------------------------------------+\n| data_directory       | /var/lib/postgresql/data                           |\n+----------------------+----------------------------------------------------+\n\n##### --- List of Tablespaces ---- ######\n+----------------------+----------------------+----------------------------------------------------+\n|         Name         |         Owner        |               Location                             |\n+----------------------+----------------------+----------------------------------------------------+\n| pg_default           | postgres             |                                                    |\n| pg_global            | postgres             |                                                    |\n+----------------------+----------------------+----------------------------------------------------+\n\n\n##### --- Cluster Information --- ####\n+------------------------------------------------------------------------------------------------------+\n Usename        : postgres\n Time           : 2020-04-21 13:38:22.770077 +0000 UTC\n Client Address : 172.19.0.1\n Client Hostname:\n Version        : PostgreSQL 9.6.17 on x86_64-pc-linux-gnu (Debian 9.6.17-2.pgdg90+1), compiled by\n Started        : 2020-04-21 13:36:59.909175 +0000 UTC\n Is Slave       : false\n+------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Selecting All Records from 'bar' Table in MySQL\nDESCRIPTION: This SQL query selects all columns and rows from the 'bar' table. It's a simple SELECT statement without any conditions or joins.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-1d.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM bar\n```\n\n----------------------------------------\n\nTITLE: Unsafe Search Cache Insert Statement - Single Word\nDESCRIPTION: Similar INSERT IGNORE operation for search cache but searching for a single word 'heicvrxtljqlth'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog002.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO fud26_search_cache (srch_query, query_type, expiry, msg_id, n_match) SELECT '89b76d476dcf711b813a14f8c52df840', 0, 1250328053, msg_id, count(*) as word_count FROM fud26_search s INNER JOIN fud26_index i ON i.word_id=s.id WHERE word IN('heicvrxtljqlth') GROUP BY msg_id ORDER BY word_count DESC LIMIT 500\n```\n\n----------------------------------------\n\nTITLE: Linux Disk Partition Table\nDESCRIPTION: Displays disk partitioning information showing device paths, types, start/end sectors, and sizes for various storage devices.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_006.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDevice       Type      Start        End               Size\n============ ==== ========== ========== ==================\n/dev/dm-0    Disk                            1022886936576\n/dev/dm-1    Disk                             998974160896\n/dev/dm-2    Disk                               1023410176\n/dev/mmcblk0 Disk                             256087425024\n/dev/mmcblk0p1 Part      65536  500170751                  0\n/dev/nvme0n1 Disk                            1024209543168\n/dev/nvme0n1p1 Part       2048    1050623                  0\n/dev/nvme0n1p2 Part    1050624    2549759                  0\n/dev/nvme0n1p3 Part    2549760 2000408575                  0\n```\n\n----------------------------------------\n\nTITLE: Formatting File Paths in MySQL\nDESCRIPTION: This function normalizes file paths by replacing datadir and tmpdir with @@datadir and @@tmpdir respectively. It also converts backslashes to forward slashes for cross-OS compatibility.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_119\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT @@datadir;\nSELECT format_path('/Users/mark/sandboxes/SmallTree/AMaster/data/mysql/proc.MYD') AS path;\n```\n\n----------------------------------------\n\nTITLE: Running LSI Logic MPT Configuration Utility on Linux\nDESCRIPTION: Command to run the LSI Logic MPT Configuration Utility in interactive mode with scanning enabled using sudo privileges on a Linux system. The command executes the x86_64 binary with the -i (interactive) and -s (scan) flags.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/lsiutil-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./lsiutil.x86_64 -i -s\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Rental Table\nDESCRIPTION: An INSERT statement adding a record to the rental table in the sakila database. Contains values for rental ID, dates, customer and inventory references, and staff ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `rental` VALUES (1,'2005-05-24 22:53:30',367,130,'2005-05-26 22:04:30',1,'2006-02-16 04:30:53') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: PCI Device Listing Output from lspci Command\nDESCRIPTION: A complete listing of PCI devices on an Intel 5000 Series server system, showing bus locations, device types, manufacturers, and revision numbers. This output is typically generated by the 'lspci' command on Linux systems and provides hardware inventory information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/lspci-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n00:00.0 Host bridge: Intel Corporation 5000X Chipset Memory Controller Hub (rev 12)\n00:02.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x4 Port 2 (rev 12)\n00:03.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x4 Port 3 (rev 12)\n00:04.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x8 Port 4-5 (rev 12)\n00:05.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x4 Port 5 (rev 12)\n00:06.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x8 Port 6-7 (rev 12)\n00:07.0 PCI bridge: Intel Corporation 5000 Series Chipset PCI Express x4 Port 7 (rev 12)\n00:10.0 Host bridge: Intel Corporation 5000 Series Chipset FSB Registers (rev 12)\n00:10.1 Host bridge: Intel Corporation 5000 Series Chipset FSB Registers (rev 12)\n00:10.2 Host bridge: Intel Corporation 5000 Series Chipset FSB Registers (rev 12)\n00:11.0 Host bridge: Intel Corporation 5000 Series Chipset Reserved Registers (rev 12)\n00:13.0 Host bridge: Intel Corporation 5000 Series Chipset Reserved Registers (rev 12)\n00:15.0 Host bridge: Intel Corporation 5000 Series Chipset FBD Registers (rev 12)\n00:16.0 Host bridge: Intel Corporation 5000 Series Chipset FBD Registers (rev 12)\n00:1c.0 PCI bridge: Intel Corporation 631xESB/632xESB/3100 Chipset PCI Express Root Port 1 (rev 09)\n00:1d.0 USB Controller: Intel Corporation 631xESB/632xESB/3100 Chipset UHCI USB Controller #1 (rev 09)\n00:1d.1 USB Controller: Intel Corporation 631xESB/632xESB/3100 Chipset UHCI USB Controller #2 (rev 09)\n00:1d.2 USB Controller: Intel Corporation 631xESB/632xESB/3100 Chipset UHCI USB Controller #3 (rev 09)\n00:1d.3 USB Controller: Intel Corporation 631xESB/632xESB/3100 Chipset UHCI USB Controller #4 (rev 09)\n00:1d.7 USB Controller: Intel Corporation 631xESB/632xESB/3100 Chipset EHCI USB2 Controller (rev 09)\n00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev d9)\n00:1f.0 ISA bridge: Intel Corporation 631xESB/632xESB/3100 Chipset LPC Interface Controller (rev 09)\n00:1f.2 IDE interface: Intel Corporation 631xESB/632xESB/3100 Chipset SATA IDE Controller (rev 09)\n01:00.0 SCSI storage controller: LSI Logic / Symbios Logic SAS1068E PCI-Express Fusion-MPT SAS (rev 08)\n02:00.0 PCI bridge: Broadcom EPB PCI-Express to PCI-X Bridge (rev c3)\n03:00.0 Ethernet controller: Broadcom Corporation NetXtreme II BCM5708 Gigabit Ethernet (rev 12)\n04:00.0 PCI bridge: Intel Corporation 6311ESB/6321ESB PCI Express Upstream Port (rev 01)\n04:00.3 PCI bridge: Intel Corporation 6311ESB/6321ESB PCI Express to PCI-X Bridge (rev 01)\n05:00.0 PCI bridge: Intel Corporation 6311ESB/6321ESB PCI Express Downstream Port E1 (rev 01)\n05:01.0 PCI bridge: Intel Corporation 6311ESB/6321ESB PCI Express Downstream Port E2 (rev 01)\n06:00.0 PCI bridge: Broadcom EPB PCI-Express to PCI-X Bridge (rev c3)\n07:00.0 Ethernet controller: Broadcom Corporation NetXtreme II BCM5708 Gigabit Ethernet (rev 12)\n0e:0d.0 VGA compatible controller: ATI Technologies Inc ES1000 (rev 02)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upload Log Information for Specific Clients in MySQL\nDESCRIPTION: SQL query that selects upload log entries for specific client IDs (184, 587, 681) within the last day. It filters messages containing 'Filling initial' or 'Filling diff' and identifies whether they are initial fills through a Boolean expression.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT h.client_id, l.time, (message like 'Filling initial.%') AS initial\nFROM grover_db.upload_log l\nLEFT JOIN grover_db.extractor_log_history h on (h.id=l.log_report_id)\nWHERE h.client_id in ('184', '587', '681') and (message like 'Filling initial.%' or  message like 'Filling diff.%') and l.time > now() - interval 1 day\nORDER BY time desc\nLIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Result Diffs in Percona Toolkit Report (Plain Text)\nDESCRIPTION: This snippet demonstrates how Percona Toolkit outputs detailed differences between query results from multiple hosts in a structured plain text log. The example includes the SQL query, the rows missing from each compared host, and contextual statistics—such as the total and unique queries analyzed. There are no special dependencies; this log is generated by running a Percona Toolkit data checking or comparison tool. Each section uses comments and symbols to segment results and make analysis clear. Inputs are the query results from data sources, outputs are shown as diffs in tabular text form. Limitations: not directly parseable as structured data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/002/select_missing_rows.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#-----------------------------------------------------------------------\\n# Logs\\n#-----------------------------------------------------------------------\\n\\nFile: ...\\nSize: 145\\n\\n#-----------------------------------------------------------------------\\n# Hosts\\n#-----------------------------------------------------------------------\\n\\nhost1:\\n\\n  DSN:       h=127.1,P=12345\\n  hostname:  ...\\n  MySQL:     ...\\n\\nhost2:\\n\\n  DSN:       h=127.1,P=12348\\n  hostname:  ...\\n  MySQL:     ...\\n\\n########################################################################\\n# Query class 483E7FA163F8DA7B\\n########################################################################\\n\\nReporting class because it has diffs, but hasn't been reported yet.\\n\\nTotal queries      1\\nUnique queries     1\\nDiscarded queries  0\\n\\nselect * from test.t order by id\\n\\n##\\n## Row diffs: 1\\n##\\n\\n-- 1.\\n\\n@ first 3 of 5 missing rows\\n> 7,g,2013-01-01 00:00:07\\n> 8,h,2013-01-01 00:00:08\\n> 9,i,2013-01-01 00:00:09\\n\\nselect * from test.t order by id\\n\\n#-----------------------------------------------------------------------\\n# Stats\\n#-----------------------------------------------------------------------\\n\\nfailed_queries        0\\nnot_select            0\\nqueries_filtered      0\\nqueries_no_diffs      0\\nqueries_read          1\\nqueries_with_diffs    1\\nqueries_with_errors   0\\n\n```\n\n----------------------------------------\n\nTITLE: Show Table Status Commands\nDESCRIPTION: Administrative commands to inspect the table structure and status of the 'trees' table in the 'food' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-51.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Setting PCI Interrupt Mappings and Latency Timers\nDESCRIPTION: This snippet shows the process of mapping PCI interrupts to system interrupts (GSI) and setting latency timers for various PCI devices. It demonstrates how interrupt resources are allocated and configured for PCI devices.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-001.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npci 0000:00:02.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16\npci 0000:00:02.0: setting latency timer to 64\npci 0000:04:00.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16\npci 0000:04:00.0: setting latency timer to 64\npci 0000:05:00.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16\npci 0000:05:00.0: setting latency timer to 64\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interface Statistics in Plaintext\nDESCRIPTION: This snippet shows a table of network interface statistics, including received and transmitted bytes, packets, and errors for various network interfaces.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n# Interface Statistics #######################################\n  interface  rx_bytes rx_packets  rx_errors   tx_bytes tx_packets  tx_errors\n  ========= ========= ========== ========== ========== ========== ==========\n  lo       300000000000  600000000          0 300000000000  600000000          0\n  em1      125000000000  175000000          0 90000000000  125000000          0\n  em2       400000000    5000000          0        225          2          0\n  bond0    125000000000  175000000          0 90000000000  125000000          0\n  virbr0            0          0          0          0          0          0\n  virbr0-nic          0          0          0          0          0          0\n  br-5f8d81e2374e          0          0          0          0          0          0\n  docker0  3000000000   10000000          0 20000000000   15000000          0\n  br-294661236c88          0          0          0          0          0          0\n  vethe8b73084@if266    2250000      35000          0  500000000      90000          0\n  veth1a2f3a50@if268  250000000    2000000          0  500000000    2000000          0\n  vethb2e8fb78@if270  250000000    2000000          0  500000000    2000000          0\n  vethc33cb528@if272  200000000    1750000          0  500000000    1750000          0\n  vethc52473d4@if274  500000000      45000          0  100000000      70000          0\n  vethf5136d77@if276    1000000      15000          0  175000000      30000          0\n  vethfa2d922@if20   70000000     450000          0  450000000    1000000          0\n  veth046457e1@if278    1250000      17500          0  175000000      35000          0\n  veth522c3e56@if280     450000       6000          0   35000000       9000          0\n  vethc532c32b@if282     250000       3500          0   25000000       6000          0\n  vboxnet12          0          0          0          0          0          0\n  vboxnet18          0          0          0          0          0          0\n  vboxnet19          0          0          0          0          0          0\n  vboxnet20          0          0          0          0          0          0\n  veth67e3da0@if145   25000000     300000          0 1750000000     500000          0\n  vboxnet0          0          0          0          0          0          0\n  vboxnet21          0          0          0          0          0          0\n  vboxnet24          0          0          0          0          0          0\n  vboxnet25          0          0          0      25000        250          0\n  vboxnet3          0          0          0          0          0          0\n  vboxnet4          0          0          0          0          0          0\n  vethaa8f4de@if153 2500000000    6000000          0 10000000000    8000000          0\n  lxdbr0    100000000    1500000          0 7000000000    1750000          0\n  veth0bd575f6@if156     400000       4000          0    3500000      50000          0\n  veth1e01ee50@if158     400000       4000          0    3500000      50000          0\n  veth07d7db6b@if160     400000       4000          0    3500000      50000          0\n  veth12219f8c@if176     400000       4000          0    3500000      50000          0\n  vethb9d2af0d@if178     400000       4000          0    3500000      50000          0\n  veth0c948a7c@if180     400000       4000          0    3500000      50000          0\n  vethad45a55a@if182     400000       4000          0    3500000      50000          0\n  veth3bd42127@if184     400000       4000          0    3500000      50000          0\n  vetha67e3445@if186     400000       4000          0    3500000      50000          0\n  veth57871859@if188     400000       4000          0    3500000      50000          0\n  veth61f76055@if190     400000       4000          0    3500000      50000          0\n  veth67de6880@if192    1250000      12500          0    3500000      50000          0\n  veth45fa2bdb@if208     400000       4000          0    3500000      50000          0\n  vethce7b9a4d@if218    2000000      20000          0   60000000      60000          0\n  veth19c266ca@if220     400000       4000          0    3500000      50000          0\n  veth140b78c8@if224     450000       5000          0    3500000      50000          0\n  veth328abad5@if226     600000       7000          0    3500000      60000          0\n  veth125aed80@if228     500000       5000          0    3500000      50000          0\n  vetha245bad8@if230   25000000     400000          0 2500000000     500000          0\n  vethe8577b3d@if244    1250000      17500          0  150000000      60000          0\n```\n\n----------------------------------------\n\nTITLE: Displaying I/O Performance Metrics for Linux Storage Devices\nDESCRIPTION: This snippet shows a table of I/O performance metrics for various storage devices on a Linux system. It includes data on read/write rates, concurrency, response times, and device utilization. The data is presented in a fixed-width column format for easy reading.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_7\n\nLANGUAGE: plain text\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 47.1 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 47.1 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 47.1 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 47.1 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 47.1 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 47.1 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL Session Configuration and Begin Transaction\nDESCRIPTION: Initial session configuration statements setting character sets, time zones, and other MySQL variables before beginning a transaction.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nSET TIMESTAMP=1197046970/*!*/;\nSET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=1, @@session.unique_checks=1/*!*/;\nSET @@session.sql_mode=0/*!*/;\n/*!\\C latin1 *//*!*/;\nSET @@session.character_set_client=8,@@session.collation_connection=8,@@session.collation_server=8/*!*/;\nSET @@session.time_zone='SYSTEM'/*!*/;\nBEGIN/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Formatting and Truncating SQL Statements in MySQL\nDESCRIPTION: This function formats a normalized SQL statement, truncating it if it exceeds a specified length (default 64 characters). The truncation length can be configured globally or per session.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sys.format_statement(digest_text)\n  FROM performance_schema.events_statements_summary_by_digest\n ORDER by sum_timer_wait DESC limit 5;\n```\n\n----------------------------------------\n\nTITLE: Creating help_category Table in MySQL\nDESCRIPTION: SQL statement for creating the help_category table which organizes help topics into categories. It includes columns for category ID, name, parent category, and URL with primary and unique keys.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories';\n```\n\n----------------------------------------\n\nTITLE: Describing X$ Schema Table Lock Waits Structure in MySQL\nDESCRIPTION: Shows the structure of x$schema_table_lock_waits view which is a performance_schema-based version of schema_table_lock_waits with the same fields but potentially different underlying implementation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_66\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$schema_table_lock_waits;\n+------------------------------+---------------------+------+-----+---------+-------+\n| Field                        | Type                | Null | Key | Default | Extra |\n+------------------------------+---------------------+------+-----+---------+-------+\n| object_schema                | varchar(64)         | YES  |     | NULL    |       |\n| object_name                  | varchar(64)         | YES  |     | NULL    |       |\n| waiting_thread_id            | bigint(20) unsigned | NO   |     | NULL    |       |\n| waiting_pid                  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_account              | text                | YES  |     | NULL    |       |\n| waiting_lock_type            | varchar(32)         | NO   |     | NULL    |       |\n| waiting_lock_duration        | varchar(32)         | NO   |     | NULL    |       |\n| waiting_query                | longtext            | YES  |     | NULL    |       |\n| waiting_query_secs           | bigint(20)          | YES  |     | NULL    |       |\n| waiting_query_rows_affected  | bigint(20) unsigned | YES  |     | NULL    |       |\n| waiting_query_rows_examined  | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_thread_id           | bigint(20) unsigned | NO   |     | NULL    |       |\n| blocking_pid                 | bigint(20) unsigned | YES  |     | NULL    |       |\n| blocking_account             | text                | YES  |     | NULL    |       |\n| blocking_lock_type           | varchar(32)         | NO   |     | NULL    |       |\n| blocking_lock_duration       | varchar(32)         | NO   |     | NULL    |       |\n| sql_kill_blocking_query      | varchar(31)         | YES  |     | NULL    |       |\n| sql_kill_blocking_connection | varchar(25)         | YES  |     | NULL    |       |\n+------------------------------+---------------------+------+-----+---------+-------+\n18 rows in set (0.03 sec)\n```\n\n----------------------------------------\n\nTITLE: Creating procs_priv Table - MySQL SQL\nDESCRIPTION: Specifies the `procs_priv` table's format for storing routine-level privilege information (procedures and functions) in MySQL. Keys include host, user, database, routine name, and type. Tracks grantor and privilege types per routine. Inputs are GRANT/REVOKE statements; outputs are used in privilege resolution. Indexed for fast lookups by grantor.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `procs_priv` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Routine_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8mb3_bin NOT NULL,\n  `Grantor` varchar(288) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`User`,`Db`,`Routine_name`,`Routine_type`),\n  KEY `Grantor` (`Grantor`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Procedure privileges'\n\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status for Trees in SQL\nDESCRIPTION: A command to display the status information for the 'trees' table in the 'food' database. This provides metadata about the table, including size and update time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_1-80.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\\G\n```\n\n----------------------------------------\n\nTITLE: Analyzing MySQL Network Traffic Packet Data\nDESCRIPTION: This snippet shows the hexadecimal dump of a TCP packet sent from the MySQL client to the server during the connection establishment phase. It includes IP and TCP header information, as well as the initial handshake packet data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump036.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0x0000:  4500 003c 283b 4000 4006 147f 7f00 0001\n0x0010:  7f00 0001 e222 0cea 0ab4 d3b5 0000 0000\n0x0020:  a002 8018 c654 0000 0204 400c 0402 080a\n0x0030:  0034 fb8e 0000 0000 0103 0306\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Analysis Results in Percona Toolkit\nDESCRIPTION: Diff output showing changes in performance metrics including Apdex scores, QPS, and query statistics. The changes primarily show updates to Apdex scoring from numeric values to 'NS' (Not Specified) and modifications to query analysis summaries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/diff003.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n2c2\n< # Overall: 8 total, 7 unique, 0 QPS, 0x concurrency ______________________\n---\n> # Overall: 8 total, 3 unique, 0 QPS, 0x concurrency ______________________\n24c24\n< # Scores: Apdex = 1.00 [1.0]*, V/M = 0.00\n---\n> # Scores: Apdex = NS [0.0]*, V/M = 0.00\n67c67\n< # Scores: Apdex = 1.00 [1.0]*, V/M = 0.00\n---\n> # Scores: Apdex = NS [0.0]*, V/M = 0.00\n111c111\n< # Scores: Apdex = 1.00 [1.0]*, V/M = 0.00\n---\n> # Scores: Apdex = NS [0.0]*, V/M = 0.00\n155,158c155,157\n< #    1 0x66825DDC008FFA89  0.7261 95.3%     1 0.7261 1.00  0.00 UPDATE db?.tuningdetail_?_? db?.gonzo\n< #    2 0x0FFE94ABA6A2A9E8  0.0334  4.4%     1 0.0334 1.00  0.00 UPDATE db?.vab?concept?upload\n< #    3 0xB211BA2B8D6D065C  0.0011  0.1%     2 0.0005 1.00  0.00 UPDATE foo.bar\n< # MISC 0xMISC              0.0016  0.2%     4 0.0004   NS   0.0 <4 ITEMS>\n---\n> #    1 0x66825DDC008FFA89  0.7261 95.3%     1 0.7261   NS  0.00 UPDATE db?.tuningdetail_?_? db?.gonzo\n> #    2 0x0FFE94ABA6A2A9E8  0.0334  4.4%     1 0.0334   NS  0.00 UPDATE db?.vab?concept?upload\n> #    3 0xB211BA2B8D6D065C  0.0011  0.1%     2 0.0005   NS  0.00 UPDATE foo.bar\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL System Status Variables in Tabular Format\nDESCRIPTION: A formatted ASCII table output showing MySQL system variables including thread count and uptime metrics. Displays Threads_running and both regular and flush-status Uptime values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mext/samples/mext-001.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n| Threads_running                   | 0        |\n| Uptime                            | 3        |\n| Uptime_since_flush_status         | 3        |\n+-----------------------------------+----------+\n```\n\n----------------------------------------\n\nTITLE: Finding Next Chunk Boundary in MySQL Table Checksumming\nDESCRIPTION: SQL query that determines the next chunk boundary for checksumming the test.ascii table. It retrieves rows above a specified position using SQL_NO_CACHE to ensure fresh data, supporting the chunking mechanism of Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/char-chunk-ascii-explain.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `c` FROM `test`.`ascii` FORCE INDEX(`c`) WHERE ((`c` >= ?)) ORDER BY `c` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Hexdump to MySQL Server\nDESCRIPTION: Network packet capture showing a 9-byte TCP packet sent from IP 1.2.3.4 port 34162 to localhost (127.0.0.1) MySQL port. Contains IP header, TCP header and MySQL protocol data in hexadecimal format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump026.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n0x0000:  4508 003d 3868 4000 4006 9d9f 0a38 a80e\n0x0010:  0a38 a82d 8572 0cea add8 a612 2b4a a6d3\n0x0020:  8018 07d3 0833 0000 0101 080a 54e0 4da1\n0x0030:  e506 a3da 0500 0000 1932 0000 00\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries from foo Table\nDESCRIPTION: A series of SELECT queries retrieving sequential numeric values from a table named 'foo'. Each query executes with a query time of 0.000899 seconds, no lock time, and examines 0 rows. The queries are executed by the same user from IP 1.2.3.4 with no available InnoDB statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 796 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Defining event Table in SQL\nDESCRIPTION: Creates the `event` table within the `mysql` database to store metadata for scheduled events managed by the MySQL Event Scheduler. It includes details such as the event's database, name, definition, definer, execution schedule, status, and various configuration settings. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Linux Kernel Boot Log for ACPI and CPU Initialization\nDESCRIPTION: This kernel boot log shows the initialization of a dual-processor Intel Xeon E5520 system. It captures ACPI configuration, CPU detection, cache hierarchy, memory allocation, and initialization of core kernel subsystems. The log documents the step-by-step boot process including processor topology and hardware features.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[    0.000000] ACPI: LAPIC (acpi_id[0x01] lapic_id[0x00] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x02] lapic_id[0x02] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x03] lapic_id[0x04] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x04] lapic_id[0x06] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x05] lapic_id[0x10] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x06] lapic_id[0x12] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x07] lapic_id[0x14] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x08] lapic_id[0x16] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x09] lapic_id[0x01] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x0a] lapic_id[0x03] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x0b] lapic_id[0x05] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x0c] lapic_id[0x07] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x0d] lapic_id[0x11] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x0e] lapic_id[0x13] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x0f] lapic_id[0x15] enabled)\n[    0.000000] ACPI: LAPIC (acpi_id[0x10] lapic_id[0x17] enabled)\n[    0.000000] ACPI: LAPIC_NMI (acpi_id[0xff] dfl dfl lint[0x1])\n[    0.000000] ACPI: IOAPIC (id[0x08] address[0xfec00000] gsi_base[0])\n[    0.000000] IOAPIC[0]: apic_id 8, version 32, address 0xfec00000, GSI 0-23\n[    0.000000] ACPI: INT_SRC_OVR (bus 0 bus_irq 0 global_irq 2 dfl dfl)\n[    0.000000] ACPI: INT_SRC_OVR (bus 0 bus_irq 9 global_irq 9 high level)\n[    0.000000] ACPI: IRQ0 used by override.\n[    0.000000] ACPI: IRQ2 used by override.\n[    0.000000] ACPI: IRQ9 used by override.\n[    0.000000] Using ACPI (MADT) for SMP configuration information\n[    0.000000] SMP: Allowing 16 CPUs, 0 hotplug CPUs\n[    0.000000] nr_irqs_gsi: 24\n[    0.000000] PM: Registered nosave memory: 000000000009a000 - 00000000000a0000\n[    0.000000] PM: Registered nosave memory: 00000000000a0000 - 00000000000e4000\n[    0.000000] PM: Registered nosave memory: 00000000000e4000 - 0000000000100000\n[    0.000000] PM: Registered nosave memory: 00000000bf770000 - 00000000bf77e000\n[    0.000000] PM: Registered nosave memory: 00000000bf77e000 - 00000000bf7d0000\n[    0.000000] PM: Registered nosave memory: 00000000bf7d0000 - 00000000bf7e0000\n[    0.000000] PM: Registered nosave memory: 00000000bf7e0000 - 00000000bf7ec000\n[    0.000000] PM: Registered nosave memory: 00000000bf7ec000 - 00000000c0000000\n[    0.000000] PM: Registered nosave memory: 00000000c0000000 - 00000000e0000000\n[    0.000000] PM: Registered nosave memory: 00000000e0000000 - 00000000f0000000\n[    0.000000] PM: Registered nosave memory: 00000000f0000000 - 00000000fbf00000\n[    0.000000] PM: Registered nosave memory: 00000000fbf00000 - 00000000ff000000\n[    0.000000] PM: Registered nosave memory: 00000000ff000000 - 00000000ffc00000\n[    0.000000] PM: Registered nosave memory: 00000000ffc00000 - 0000000100000000\n[    0.000000] Allocating PCI resources starting at c0000000 (gap: c0000000:20000000)\n[    0.000000] Booting paravirtualized kernel on bare hardware\n[    0.000000] NR_CPUS:64 nr_cpumask_bits:64 nr_cpu_ids:16 nr_node_ids:2\n[    0.000000] PERCPU: Embedded 30 pages/cpu @ffff88000c600000 s91544 r8192 d23144 u262144\n[    0.000000] pcpu-alloc: s91544 r8192 d23144 u262144 alloc=1*2097152\n[    0.000000] pcpu-alloc: [0] 00 01 02 03 08 09 10 11 [1] 04 05 06 07 12 13 14 15 \n[    0.000000] Built 2 zonelists in Zone order, mobility grouping on.  Total pages: 6199405\n[    0.000000] Policy zone: Normal\n[    0.000000] Kernel command line: root=/dev/mapper/Volume-root ro quiet splash \n[    0.000000] PID hash table entries: 4096 (order: 3, 32768 bytes)\n[    0.000000] Initializing CPU#0\n[    0.000000] Checking aperture...\n[    0.000000] No AGP bridge found\n[    0.000000] Calgary: detecting Calgary via BIOS EBDA area\n[    0.000000] Calgary: Unable to locate Rio Grande table in EBDA - bailing!\n[    0.000000] PCI-DMA: Using software bounce buffering for IO (SWIOTLB)\n[    0.000000] Placing 64MB software IO TLB between ffff88000c7de000 - ffff8800107de000\n[    0.000000] software IO TLB at phys 0xc7de000 - 0x107de000\n[    0.000000] Memory: 24724612k/26214400k available (5499k kernel code, 1057816k absent, 431972k reserved, 3081k data, 796k init)\n[    0.000000] SLUB: Genslabs=14, HWalign=64, Order=0-3, MinObjects=0, CPUs=16, Nodes=2\n[    0.000000] Hierarchical RCU implementation.\n[    0.000000] NR_IRQS:4352 nr_irqs:536\n[    0.000000] Extended CMOS year: 2000\n[    0.000000] Console: colour VGA+ 80x25\n[    0.000000] console [tty0] enabled\n[    0.000000] allocated 251658240 bytes of page_cgroup\n[    0.000000] please try 'cgroup_disable=memory' option if you don't want memory cgroups\n[    0.010000] Fast TSC calibration using PIT\n[    0.020000] Detected 2261.277 MHz processor.\n[    0.000006] Calibrating delay loop (skipped), value calculated using timer frequency.. 4522.55 BogoMIPS (lpj=22612770)\n[    0.000030] Security Framework initialized\n[    0.000045] AppArmor: AppArmor initialized\n[    0.002485] Dentry cache hash table entries: 4194304 (order: 13, 33554432 bytes)\n[    0.009790] Inode-cache hash table entries: 2097152 (order: 12, 16777216 bytes)\n[    0.012825] Mount-cache hash table entries: 256\n[    0.012959] Initializing cgroup subsys ns\n[    0.012963] Initializing cgroup subsys cpuacct\n[    0.012966] Initializing cgroup subsys memory\n[    0.012983] Initializing cgroup subsys devices\n[    0.012984] Initializing cgroup subsys freezer\n[    0.012986] Initializing cgroup subsys net_cls\n[    0.013008] CPU: Physical Processor ID: 0\n[    0.013009] CPU: Processor Core ID: 0\n[    0.013012] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    0.013014] CPU: L2 cache: 256K\n[    0.013015] CPU: L3 cache: 8192K\n[    0.013018] CPU 0/0x0 -> Node 0\n[    0.013021] mce: CPU supports 9 MCE banks\n[    0.013030] CPU0: Thermal monitoring enabled (TM1)\n[    0.013033] CPU 0 MCA banks CMCI:2 CMCI:3 CMCI:5 CMCI:6 CMCI:8\n[    0.013041] using mwait in idle threads.\n[    0.013043] Performance Events: Nehalem/Corei7 events, Intel PMU driver.\n[    0.013048] ... version:                3\n[    0.013049] ... bit width:              48\n[    0.013050] ... generic registers:      4\n[    0.013052] ... value mask:             0000ffffffffffff\n[    0.013053] ... max period:             000000007fffffff\n[    0.013054] ... fixed-purpose events:   3\n[    0.013055] ... event mask:             000000070000000f\n[    0.015079] ACPI: Core revision 20090903\n[    0.045587] ftrace: converting mcount calls to 0f 1f 44 00 00\n[    0.045591] ftrace: allocating 22808 entries in 90 pages\n[    0.052484] Setting APIC routing to physical flat\n[    0.052800] ..TIMER: vector=0x30 apic1=0 pin1=2 apic2=-1 pin2=-1\n[    0.152832] CPU0: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz stepping 05\n[    0.268612] Booting processor 1 APIC 0x2 ip 0x6000\n[    0.279078] Initializing CPU#1\n[    0.428187] CPU: Physical Processor ID: 0\n[    0.428188] CPU: Processor Core ID: 1\n[    0.428190] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    0.428192] CPU: L2 cache: 256K\n[    0.428192] CPU: L3 cache: 8192K\n[    0.428194] CPU 1/0x2 -> Node 0\n[    0.428206] CPU1: Thermal monitoring enabled (TM1)\n[    0.428208] CPU 1 MCA banks CMCI:2 CMCI:3 CMCI:5 SHD:6 SHD:8\n[    0.428241] CPU1: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz stepping 05\n[    0.428248] checking TSC synchronization [CPU#0 -> CPU#1]: passed.\n[    0.448302] Booting processor 2 APIC 0x4 ip 0x6000\n[    0.458652] Initializing CPU#2\n[    0.607830] CPU: Physical Processor ID: 0\n[    0.607831] CPU: Processor Core ID: 2\n[    0.607834] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    0.607835] CPU: L2 cache: 256K\n[    0.607836] CPU: L3 cache: 8192K\n[    0.607838] CPU 2/0x4 -> Node 0\n[    0.607849] CPU2: Thermal monitoring enabled (TM1)\n[    0.607852] CPU 2 MCA banks CMCI:2 CMCI:3 CMCI:5 SHD:6 SHD:8\n[    0.607947] CPU2: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz stepping 05\n[    0.607954] checking TSC synchronization [CPU#0 -> CPU#2]: passed.\n[    0.628009] Booting processor 3 APIC 0x6 ip 0x6000\n[    0.638359] Initializing CPU#3\n[    0.787474] CPU: Physical Processor ID: 0\n[    0.787475] CPU: Processor Core ID: 3\n[    0.787477] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    0.787479] CPU: L2 cache: 256K\n[    0.787480] CPU: L3 cache: 8192K\n[    0.787482] CPU 3/0x6 -> Node 0\n[    0.787493] CPU3: Thermal monitoring enabled (TM1)\n[    0.787496] CPU 3 MCA banks CMCI:2 CMCI:3 CMCI:5 SHD:6 SHD:8\n[    0.787589] CPU3: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz stepping 05\n[    0.787596] checking TSC synchronization [CPU#0 -> CPU#3]: passed.\n[    0.807664] Booting processor 4 APIC 0x10 ip 0x6000\n[    0.818012] Initializing CPU#4\n[    0.967117] CPU: Physical Processor ID: 1\n[    0.967118] CPU: Processor Core ID: 0\n[    0.967121] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    0.967122] CPU: L2 cache: 256K\n[    0.967123] CPU: L3 cache: 8192K\n[    0.967125] CPU 4/0x10 -> Node 1\n[    0.967136] CPU4: Thermal monitoring enabled (TM1)\n[    0.967139] CPU 4 MCA banks CMCI:2 CMCI:3 CMCI:5 CMCI:6 CMCI:8\n[    0.967206] CPU4: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz stepping 05\n[    0.967213] checking TSC synchronization [CPU#0 -> CPU#4]: passed.\n[    0.987241] Booting processor 5 APIC 0x12 ip 0x6000\n[    0.997591] Initializing CPU#5\n[    1.146762] CPU: Physical Processor ID: 1\n[    1.146764] CPU: Processor Core ID: 1\n[    1.146766] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    1.146768] CPU: L2 cache: 256K\n[    1.146769] CPU: L3 cache: 8192K\n[    1.146771] CPU 5/0x12 -> Node 1\n[    1.146783] CPU5: Thermal monitoring enabled (TM1)\n[    1.146787] CPU 5 MCA banks CMCI:2 CMCI:3 CMCI:5 SHD:6 SHD:8\n[    1.146807] CPU5: Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz stepping 05\n[    1.146814] checking TSC synchronization [CPU#0 -> CPU#5]: passed.\n[    1.166845] Booting processor 6 APIC 0x14 ip 0x6000\n[    1.177196] Initializing CPU#6\n[    1.326405] CPU: Physical Processor ID: 1\n[    1.326406] CPU: Processor Core ID: 2\n[    1.326409] CPU: L1 I cache: 32K, L1 D cache: 32K\n[    1.326411] CPU: L2 cache: 256K\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Time and Resource Usage Analysis\nDESCRIPTION: A detailed analysis of a slow MySQL query showing execution metrics such as query time, lock time, rows examined, and query size. The report includes time distribution, host information, and database context for the query accessing the 'test.n' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow001_tablesreport.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `test` LIKE 'n'\\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `test`.`n`\\G\n```\n\n----------------------------------------\n\nTITLE: Unsafe Search Cache Insert Statement - PostgreSQL\nDESCRIPTION: INSERT IGNORE operation for search cache specifically searching for the term 'postgresql'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog002.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT IGNORE INTO fud26_search_cache (srch_query, query_type, expiry, msg_id, n_match) SELECT '895e2ddda332df8d230a9370f6db2ec4', 0, 1250333052, msg_id, count(*) as word_count FROM fud26_search s INNER JOIN fud26_index i ON i.word_id=s.id WHERE word IN('postgresql') GROUP BY msg_id ORDER BY word_count DESC LIMIT 500\n```\n\n----------------------------------------\n\nTITLE: Displaying vmstat Output in Plaintext\nDESCRIPTION: This snippet shows the output of the vmstat command, which provides information about system performance. It includes metrics such as memory usage, CPU utilization, and I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-align/samples/002-aligned.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nr b   swpd   free   buff   cache si so bi  bo   in  cs us sy  id wa st\n0 0 470704 164480 414568 1159800  0  0 55 164    1   1  2  1  95  2  0\n0 0 470704 164340 414580 1159788  0  0  0  32 1241 375  0  0 100  0  0\n0 0 470704 158416 414620 1159776  0  0  0 684 1423 826 14  2  83  1  0\n0 0 470704 158416 414620 1159776  0  0  0   4 1225 348  0  0 100  0  0\n0 0 470704 158416 414620 1159836  0  0  0   0 1235 369  0  0 100  0  0\n```\n\n----------------------------------------\n\nTITLE: Updating Table 'a' in MySQL Database (Transaction 1)\nDESCRIPTION: This SQL statement is part of the first transaction involved in the deadlock. It attempts to update the 'movie_id' column for a specific row in table 'a'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-deadlock-logger/samples/bug_1082104.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate a set movie_id=96 where id =2\n```\n\n----------------------------------------\n\nTITLE: Creating Summary Structure in HTML\nDESCRIPTION: This snippet demonstrates the HTML structure for summaries, including title, border, and table elements for entries and descriptions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<Summary>\n    <STitle>\n        Title\n    </STitle>\n    <SBorder>\n        <table STable>\n            <tr SType and SEntry (and SIndent#?) (and SMarked?)>\n                <td SEntry>\n                    <a href>Entry</a href>\n                </td SEntry>\n                <td SDescription>\n                    Description\n                </td SDescription>\n            </tr>\n        </table STable>\n    </SBorder>\n</Summary>\n```\n\n----------------------------------------\n\nTITLE: Describing Table Structures - MySQL sys Schema - SQL\nDESCRIPTION: These snippets use the MySQL DESC (describe) command to output the schema or structure of performance analysis tables such as statements_with_sorting, x$statements_with_sorting, statements_with_temp_tables, and x$statements_with_temp_tables. No dependencies beyond access to MySQL are required. The DESC command outputs information on columns, types, nullability, keys, and defaults for each table, providing a foundation for understanding the data stored and expected in further queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_88\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_sorting;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | text                | YES  |     | NULL                |       |\n| sort_merge_passes | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_sort_merges   | decimal(21,0)       | NO   |     | 0                   |       |\n| sorts_using_scans | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_using_range  | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sorted       | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_rows_sorted   | decimal(21,0)       | NO   |     | 0                   |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n13 rows in set (0.01 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$statements_with_sorting;\n+-------------------+---------------------+------+-----+---------------------+-------+\n| Field             | Type                | Null | Key | Default             | Extra |\n+-------------------+---------------------+------+-----+---------------------+-------+\n| query             | longtext            | YES  |     | NULL                |       |\n| db                | varchar(64)         | YES  |     | NULL                |       |\n| exec_count        | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency     | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_merge_passes | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_sort_merges   | decimal(21,0)       | NO   |     | 0                   |       |\n| sorts_using_scans | bigint(20) unsigned | NO   |     | NULL                |       |\n| sort_using_range  | bigint(20) unsigned | NO   |     | NULL                |       |\n| rows_sorted       | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_rows_sorted   | decimal(21,0)       | NO   |     | 0                   |       |\n| first_seen        | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen         | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest            | varchar(32)         | YES  |     | NULL                |       |\n+-------------------+---------------------+------+-----+---------------------+-------+\n13 rows in set (0.04 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc statements_with_temp_tables;\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| Field                    | Type                | Null | Key | Default             | Extra |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| query                    | longtext            | YES  |     | NULL                |       |\n| db                       | varchar(64)         | YES  |     | NULL                |       |\n| exec_count               | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency            | text                | YES  |     | NULL                |       |\n| memory_tmp_tables        | bigint(20) unsigned | NO   |     | NULL                |       |\n| disk_tmp_tables          | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_tmp_tables_per_query | decimal(21,0)       | NO   |     | 0                   |       |\n| tmp_tables_to_disk_pct   | decimal(24,0)       | NO   |     | 0                   |       |\n| first_seen               | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen                | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest                   | varchar(32)         | YES  |     | NULL                |       |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n11 rows in set (0.30 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$statements_with_temp_tables;\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| Field                    | Type                | Null | Key | Default             | Extra |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n| query                    | longtext            | YES  |     | NULL                |       |\n| db                       | varchar(64)         | YES  |     | NULL                |       |\n| exec_count               | bigint(20) unsigned | NO   |     | NULL                |       |\n| total_latency            | bigint(20) unsigned | NO   |     | NULL                |       |\n| memory_tmp_tables        | bigint(20) unsigned | NO   |     | NULL                |       |\n| disk_tmp_tables          | bigint(20) unsigned | NO   |     | NULL                |       |\n| avg_tmp_tables_per_query | decimal(21,0)       | NO   |     | 0                   |       |\n| tmp_tables_to_disk_pct   | decimal(24,0)       | NO   |     | 0                   |       |\n| first_seen               | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| last_seen                | timestamp           | NO   |     | 0000-00-00 00:00:00 |       |\n| digest                   | varchar(32)         | YES  |     | NULL                |       |\n+--------------------------+---------------------+------+-----+---------------------+-------+\n11 rows in set (0.05 sec)\n```\n\n----------------------------------------\n\nTITLE: MyISAM Engine Configuration\nDESCRIPTION: A summary of the MyISAM storage engine configuration, showing key cache size and usage statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# MyISAM #####################################################\n                Key Cache | 16.0M\n                 Pct Used | 10%\n                Unflushed | 0%\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Error Response Packet\nDESCRIPTION: TCP packet showing MySQL server responding with 'No database selected' error message\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump004.txt#2025-04-22_snippet_1\n\nLANGUAGE: raw\nCODE:\n```\n2009-04-12 12:58:02.036002 IP 127.0.0.1.3306 > 127.0.0.1.60439: tcp 33\n\t0x0000:  4508 0055 0da1 4000 4006 2ef8 7f00 0001\n\t0x0010:  7f00 0001 0cea ec17 b698 c3fd b75e 3183\n\t0x0020:  8018 0200 fe49 0000 0101 080a 004f f2ce\n\t0x0030:  004f f2ce 1d00 0001 ff16 0423 3344 3030\n\t0x0040:  304e 6f20 6461 7461 6261 7365 2073 656c\n\t0x0050:  6563 7465 64\n```\n\n----------------------------------------\n\nTITLE: Defining Visual Basic Language in Natural Docs Configuration\nDESCRIPTION: Configures Visual Basic language properties including its various file extensions and syntax characteristics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_10\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Visual Basic\n\n   Extensions: vb vbs bas cls frm\n   Line Comment: '\n   Enum Values: Under type\n   Function Prototype Ender: \\n\n   Variable Prototype Enders: \\n =\n   Line Extender: _\n```\n\n----------------------------------------\n\nTITLE: Describing x$waits_by_user_by_latency View Structure in MySQL\nDESCRIPTION: Displays the structure of the x$waits_by_user_by_latency view, which is similar to waits_by_user_by_latency but with latency fields as bigint for raw data analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_108\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$waits_by_user_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| user          | varchar(32)         | YES  |     | NULL    |       |\n| event         | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| avg_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate player_id Index\nDESCRIPTION: SQL command to remove a redundant non-unique KEY that duplicates an existing UNIQUE KEY constraint on the player_id column. The regular index is unnecessary since the unique index can serve the same purpose.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/bug-894140.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `test`.`bug_894140` DROP INDEX `player_id_2`;\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Servers Table in MySQL\nDESCRIPTION: The `servers` table is intended to hold information about foreign MySQL servers. Prerequisites include the MyISAM storage engine and utf8 charset support. It mainly requires server details including name, host, and credentials.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL Foreign Servers table'\n```\n\n----------------------------------------\n\nTITLE: Parsing Disk I/O Statistics Log in Linux\nDESCRIPTION: This log format presents disk I/O statistics for various devices on a Linux system. Each entry is timestamped and contains detailed read/write metrics for RAM, loop, and physical disk devices. The data is typically sourced from the /proc/diskstats file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/switch_to_sample.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTS 1326806185.740921000 2012-01-17T10:16:25\n   1       0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1       1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   ...\n   8       0 sda 50032 15372 1551175 589373 631143 1755531 19096432 4151503 0 678570 4751870\n   8       1 sda1 39 560 1285 1156 0 0 0 0 0 1020 1156\n   8       2 sda2 132 7184 7890 2523 0 0 0 0 0 2140 2523\n   8       3 sda3 48600 567 1477874 562406 629580 1715573 18764264 4137760 0 657920 4711820\n   8       4 sda4 1242 7042 63822 22896 1563 39958 332168 13743 0 27116 36736\n   8      16 sdb 57 633 1719 473 0 0 0 0 0 356 473\n   8      17 sdb1 40 605 1359 236 0 0 0 0 0 153 236\n```\n\n----------------------------------------\n\nTITLE: Reporting Grouped Database Query Statistics - Shell Script\nDESCRIPTION: This shell script (or shell-annotated report file) provides summary statistics for SQL queries, broken down by metrics like execution time, concurrency, and query size. It includes annotated comments explaining inclusion criteria and threshold scores relevant to Percona Toolkit reports. It expects log or profiling input and outputs a readable, detailed performance report. Key outputs include query distribution charts, metric breakdowns, and meta-information about hosts and users. The output is intended for human review, not direct programmatic parsing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow055.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# ########################################################################\\n# Report grouped by db\\n# ########################################################################\\n\\n# Item 1: 0 QPS, 0x concurrency, ID 0xD41D8CD98F00B204E9800998ECF8427E at byte 420\\n# This item is included in the report because it matches --limit.\\n# Scores: V/M = 0.01\\n# Attribute    pct   total     min     max     avg     95%  stddev  median\\n# ============ === ======= ======= ======= ======= ======= ======= =======\\n# Count        100       3\\n# Exec time    100    20ms     2us    19ms     7ms    18ms     8ms   881us\\n# Lock time    100     9ms       0     9ms     3ms     9ms     4ms       0\\n# Rows sent      0       0       0       0       0       0       0       0\\n# Rows examine   0       0       0       0       0       0       0       0\\n# Query size   100      72      14      31      24   30.19    6.95   26.08\\n# String:\\n# Hosts        1.2.3.8\\n# Users        meow\\n# Query_time distribution\\n#   1us  ################################################################\\n#  10us\\n# 100us  ################################################################\\n#   1ms\\n#  10ms  ################################################################\\n# 100ms\\n#    1s\\n#  10s+\\n\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data with Limit Using SQL\nDESCRIPTION: This snippet is designed to select all columns from a table \\'t2\\' but limit the number of returned rows to 1. It demonstrates how to use the LIMIT clause to control the number of records returned by an SQL query. The table \\'t2\\' must exist and should be populated for the query to return results.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/rawlogs/rawlog001.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/* Hello, world! */ SELECT * FROM t2 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Variables and Values\nDESCRIPTION: A listing of MySQL server variables and their default/configured values after reading options. Includes system variables, buffer sizes, character sets, engine settings, and logging configurations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nVariables (--variable-name=value)\nand boolean options {FALSE|TRUE}  Value (after reading options)\n--------------------------------- -----------------------------\nhelp                              TRUE\nabort-slave-event-count           0\nallow-suspicious-udfs             FALSE\nauto-increment-increment          1\nauto-increment-offset             1\nautomatic-sp-privileges           TRUE\nbasedir                           /usr/\nbdb                               FALSE\nbdb-home                          (No default value)\nbdb-logdir                        (No default value)\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Selecting and Ordering Actors by Last Name Prefix in Sakila Database (SQL)\nDESCRIPTION: This SQL query retrieves all columns (`*`) from the `sakila.actor` table for actors whose `last_name` starts with 'A'. It additionally sorts the result set in ascending order based on the `actor_id` using the `ORDER BY` clause. Like the other snippets in the log, it includes execution metadata (timestamp, user, host, performance metrics) in the accompanying comments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-index-usage/samples/slow007.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n# Time: 101010 00:0004\n# User@Host: root[root] @ localhost []\n# Query_time: 1  Lock_time: 0  Rows_sent: 100  Rows_examined: 0\nselect * from sakila.actor where last_name like 'A%' order by actor_id;\n```\n\n----------------------------------------\n\nTITLE: Listing Network Device Speeds and Duplex Settings in Plaintext\nDESCRIPTION: This snippet displays a table of network devices with their corresponding speeds and duplex settings. It includes various physical and virtual network interfaces.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n# Network Devices ############################################\n  Device    Speed     Duplex\n  ========= ========= =========\n  em1        1000Mb/s   Full      \n  vboxnet24  10Mb/s     Full      \n  em2        1000Mb/s   Full      \n  vboxnet25  10Mb/s     Full      \n  br-294661236c88                      \n  bond0      1000Mb/s   Full      \n  virbr0-nic 10Mb/s     Full      \n  vboxnet18  10Mb/s     Full      \n  vboxnet19  10Mb/s     Full      \n  vboxnet0   10Mb/s     Full      \n  lxdbr0                          \n  vboxnet3   10Mb/s     Full      \n  vboxnet4   10Mb/s     Full      \n  vboxnet20  10Mb/s     Full      \n  docker0                         \n  br-5f8d81e2374e                      \n  virbr0                          \n  vboxnet21  10Mb/s     Full      \n  vboxnet12  10Mb/s     Full      \n```\n\n----------------------------------------\n\nTITLE: Payment Table Creation - MySQL\nDESCRIPTION: Creates payment table with foreign key relationships to customer, staff and rental tables including payment details and timestamps.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint(5) unsigned NOT NULL,\n  `staff_id` tinyint(3) unsigned NOT NULL,\n  `rental_id` int(11) DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamped Records into MySQL Database\nDESCRIPTION: A partial SQL INSERT statement showing multiple rows of data being inserted into a database table. Each row contains two numeric IDs followed by a timestamp value of '2006-02-15 10:05:03'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n(152,476,'2006-02-15 10:05:03'),(152,578,'2006-02-15 10:05:03'),(152,607,'2006-02-15 10:05:03'),(152,611,'2006-02-15 10:05:03'),(152,615,'2006-02-15 10:05:03'),(152,674,'2006-02-15 10:05:03'),(152,680,'2006-02-15 10:05:03'),(152,729,'2006-02-15 10:05:03'),(152,768,'2006-02-15 10:05:03'),(152,821,'2006-02-15 10:05:03'),(152,846,'2006-02-15 10:05:03'),(152,891,'2006-02-15 10:05:03'),(152,898,'2006-02-15 10:05:03'),(152,927,'2006-02-15 10:05:03'),(152,964,'2006-02-15 10:05:03'),(152,968,'2006-02-15 10:05:03'),(153,47,'2006-02-15 10:05:03'),(153,64,'2006-02-15 10:05:03'),(153,136,'2006-02-15 10:05:03'),(153,180,'2006-02-15 10:05:03'),(153,203,'2006-02-15 10:05:03'),(153,231,'2006-02-15 10:05:03'),(153,444,'2006-02-15 10:05:03'),(153,476,'2006-02-15 10:05:03'),(153,480,'2006-02-15 10:05:03'),(153,486,'2006-02-15 10:05:03'),(153,536,'2006-02-15 10:05:03'),(153,627,'2006-02-15 10:05:03'),(153,732,'2006-02-15 10:05:03'),(153,756,'2006-02-15 10:05:03'),(153,766,'2006-02-15 10:05:03'),(153,817,'2006-02-15 10:05:03'),(153,847,'2006-02-15 10:05:03'),(153,919,'2006-02-15 10:05:03'),(153,938,'2006-02-15 10:05:03'),(153,988,'2006-02-15 10:05:03'),(154,27,'2006-02-15 10:05:03'),(154,111,'2006-02-15 10:05:03'),(154,141,'2006-02-15 10:05:03'),(154,158,'2006-02-15 10:05:03'),(154,169,'2006-02-15 10:05:03'),(154,170,'2006-02-15 10:05:03'),(154,193,'2006-02-15 10:05:03'),(154,208,'2006-02-15 10:05:03'),(154,274,'2006-02-15 10:05:03'),(154,276,'2006-02-15 10:05:03'),(154,282,'2006-02-15 10:05:03'),(154,299,'2006-02-15 10:05:03'),(154,314,'2006-02-15 10:05:03'),(154,396,'2006-02-15 10:05:03'),(154,399,'2006-02-15 10:05:03'),(154,421,'2006-02-15 10:05:03'),(154,440,'2006-02-15 10:05:03'),(154,467,'2006-02-15 10:05:03'),(154,474,'2006-02-15 10:05:03'),(154,489,'2006-02-15 10:05:03'),(154,588,'2006-02-15 10:05:03'),(154,602,'2006-02-15 10:05:03'),(154,680,'2006-02-15 10:05:03'),(154,698,'2006-02-15 10:05:03'),(154,802,'2006-02-15 10:05:03'),(154,842,'2006-02-15 10:05:03'),(154,954,'2006-02-15 10:05:03'),(154,988,'2006-02-15 10:05:03'),(155,20,'2006-02-15 10:05:03'),(155,67,'2006-02-15 10:05:03'),(155,128,'2006-02-15 10:05:03'),(155,153,'2006-02-15 10:05:03'),(155,220,'2006-02-15 10:05:03'),(155,249,'2006-02-15 10:05:03'),(155,303,'2006-02-15 10:05:03'),(155,312,'2006-02-15 10:05:03'),(155,359,'2006-02-15 10:05:03'),(155,361,'2006-02-15 10:05:03'),(155,383,'2006-02-15 10:05:03'),(155,387,'2006-02-15 10:05:03'),(155,407,'2006-02-15 10:05:03'),(155,427,'2006-02-15 10:05:03'),(155,459,'2006-02-15 10:05:03'),(155,513,'2006-02-15 10:05:03'),(155,584,'2006-02-15 10:05:03'),(155,590,'2006-02-15 10:05:03'),(155,630,'2006-02-15 10:05:03'),(155,688,'2006-02-15 10:05:03'),(155,757,'2006-02-15 10:05:03'),(155,768,'2006-02-15 10:05:03'),(155,785,'2006-02-15 10:05:03'),(155,849,'2006-02-15 10:05:03'),(155,885,'2006-02-15 10:05:03'),(155,890,'2006-02-15 10:05:03'),(155,941,'2006-02-15 10:05:03'),(155,966,'2006-02-15 10:05:03'),(155,987,'2006-02-15 10:05:03'),(155,997,'2006-02-15 10:05:03'),(155,1000,'2006-02-15 10:05:03'),(156,53,'2006-02-15 10:05:03'),(156,155,'2006-02-15 10:05:03'),(156,198,'2006-02-15 10:05:03'),(156,244,'2006-02-15 10:05:03'),(156,262,'2006-02-15 10:05:03'),(156,263,'2006-02-15 10:05:03'),(156,285,'2006-02-15 10:05:03'),(156,297,'2006-02-15 10:05:03'),(156,301,'2006-02-15 10:05:03'),(156,349,'2006-02-15 10:05:03'),(156,379,'2006-02-15 10:05:03'),(156,448,'2006-02-15 10:05:03'),(156,462,'2006-02-15 10:05:03'),(156,467,'2006-02-15 10:05:03'),(156,504,'2006-02-15 10:05:03'),(156,518,'2006-02-15 10:05:03'),(156,593,'2006-02-15 10:05:03'),(156,646,'2006-02-15 10:05:03'),(156,705,'2006-02-15 10:05:03'),(156,754,'2006-02-15 10:05:03'),(156,775,'2006-02-15 10:05:03'),(156,844,'2006-02-15 10:05:03'),(157,10,'2006-02-15 10:05:03'),(157,24,'2006-02-15 10:05:03'),(157,34,'2006-02-15 10:05:03'),(157,122,'2006-02-15 10:05:03'),(157,159,'2006-02-15 10:05:03'),(157,183,'2006-02-15 10:05:03'),(157,210,'2006-02-15 10:05:03'),(157,217,'2006-02-15 10:05:03'),(157,291,'2006-02-15 10:05:03'),(157,303,'2006-02-15 10:05:03'),(157,321,'2006-02-15 10:05:03'),(157,326,'2006-02-15 10:05:03'),(157,353,'2006-02-15 10:05:03'),(157,400,'2006-02-15 10:05:03'),(157,406,'2006-02-15 10:05:03'),(157,431,'2006-02-15 10:05:03'),(157,496,'2006-02-15 10:05:03'),(157,535,'2006-02-15 10:05:03'),(157,573,'2006-02-15 10:05:03'),(157,574,'2006-02-15 10:05:03'),(157,604,'2006-02-15 10:05:03'),(157,616,'2006-02-15 10:05:03'),(157,642,'2006-02-15 10:05:03'),(157,661,'2006-02-15 10:05:03'),(157,696,'2006-02-15 10:05:03'),(157,713,'2006-02-15 10:05:03'),(157,802,'2006-02-15 10:05:03'),(157,835,'2006-02-15 10:05:03'),(157,874,'2006-02-15 10:05:03'),(157,913,'2006-02-15 10:05:03'),(157,967,'2006-02-15 10:05:03'),(157,973,'2006-02-15 10:05:03'),(158,32,'2006-02-15 10:05:03'),(158,47,'2006-02-15 10:05:03'),(158,64,'2006-02-15 10:05:03'),(158,66,'2006-02-15 10:05:03'),(158,102,'2006-02-15 10:05:03'),(158,121,'2006-02-15 10:05:03'),(158,177,'2006-02-15 10:05:03'),(158,178,'2006-02-15 10:05:03'),(158,188,'2006-02-15 10:05:03'),(158,215,'2006-02-15 10:05:03'),(158,241,'2006-02-15 10:05:03'),(158,293,'2006-02-15 10:05:03'),(158,437,'2006-02-15 10:05:03'),(158,473,'2006-02-15 10:05:03'),(158,483,'2006-02-15 10:05:03'),(158,532,'2006-02-15 10:05:03'),(158,555,'2006-02-15 10:05:03'),(158,581,'2006-02-15 10:05:03'),(158,601,'2006-02-15 10:05:03'),(158,616,'2006-02-15 10:05:03'),(158,626,'2006-02-15 10:05:03'),(158,637,'2006-02-15 10:05:03'),(158,799,'2006-02-15 10:05:03'),(158,812,'2006-02-15 10:05:03'),(158,824,'2006-02-15 10:05:03'),(158,830,'2006-02-15 10:05:03'),(158,840,'2006-02-15 10:05:03'),(158,869,'2006-02-15 10:05:03'),(158,879,'2006-02-15 10:05:03'),(158,880,'2006-02-15 10:05:03'),(158,894,'2006-02-15 10:05:03'),(158,896,'2006-02-15 10:05:03'),(158,967,'2006-02-15 10:05:03'),(158,968,'2006-02-15 10:05:03'),(158,990,'2006-02-15 10:05:03'),(159,20,'2006-02-15 10:05:03'),(159,82,'2006-02-15 10:05:03'),(159,127,'2006-02-15 10:05:03'),(159,187,'2006-02-15 10:05:03'),(159,206,'2006-02-15 10:05:03'),(159,208,'2006-02-15 10:05:03'),(159,223,'2006-02-15 10:05:03'),(159,248,'2006-02-15 10:05:03'),(159,342,'2006-02-15 10:05:03'),(159,343,'2006-02-15 10:05:03'),(159,344,'2006-02-15 10:05:03'),(159,364,'2006-02-15 10:05:03'),(159,418,'2006-02-15 10:05:03'),(159,549,'2006-02-15 10:05:03'),(159,561,'2006-02-15 10:05:03'),(159,600,'2006-02-15 10:05:03'),(159,674,'2006-02-15 10:05:03'),(159,680,'2006-02-15 10:05:03'),(159,784,'2006-02-15 10:05:03'),(159,789,'2006-02-15 10:05:03'),(159,800,'2006-02-15 10:05:03'),(159,802,'2006-02-15 10:05:03'),(159,818,'2006-02-15 10:05:03'),(159,876,'2006-02-15 10:05:03'),(159,907,'2006-02-15 10:05:03'),(159,978,'2006-02-15 10:05:03'),(160,2,'2006-02-15 10:05:03'),(160,17,'2006-02-15 10:05:03'),(160,43,'2006-02-15 10:05:03'),(160,242,'2006-02-15 10:05:03'),(160,267,'2006-02-15 10:05:03'),(160,275,'2006-02-15 10:05:03'),(160,368,'2006-02-15 10:05:03'),(160,455,'2006-02-15 10:05:03'),(160,469,'2006-02-15 10:05:03'),(160,484,'2006-02-15 10:05:03'),(160,579,'2006-02-15 10:05:03'),(160,660,'2006-02-15 10:05:03'),(160,755,'2006-02-15 10:05:03'),(160,767,'2006-02-15 10:05:03'),(160,769,'2006-02-15 10:05:03'),(160,794,'2006-02-15 10:05:03'),(160,826,'2006-02-15 10:05:03'),(160,883,'2006-02-15 10:05:03'),(160,950,'2006-02-15 10:05:03'),(160,954,'2006-02-15 10:05:03'),(161,43,'2006-02-15 10:05:03'),(161,58,'2006-02-15 10:05:03'),(161,89,'2006-02-15 10:05:03'),(161,90,'2006-02-15 10:05:03'),(161,120,'2006-02-15 10:05:03'),(161,188,'2006-02-15 10:05:03'),(161,247,'2006-02-15 10:05:03'),(161,269,'2006-02-15 10:05:03'),(161,281,'2006-02-15 10:05:03'),(161,340,'2006-02-15 10:05:03'),(161,353,'2006-02-15 10:05:03'),(161,401,'2006-02-15 10:05:03'),(161,414,'2006-02-15 10:05:03'),(161,425,'2006-02-15 10:05:03'),(161,469,'2006-02-15 10:05:03'),(161,526,'2006-02-15 10:05:03'),(161,588,'2006-02-15 10:05:03'),(161,644,'2006-02-15 10:05:03'),(161,653,'2006-02-15 10:05:03'),(161,655,'2006-02-15 10:05:03'),(161,669,'2006-02-15 10:05:03'),(161,684,'2006-02-15 10:05:03'),(161,714,'2006-02-15 10:05:03'),(161,749,'2006-02-15 10:05:03'),(161,807,'2006-02-15 10:05:03'),(161,825,'2006-02-15 10:05:03'),(161,850,'2006-02-15 10:05:03'),(161,880,'2006-02-15 10:05:03'),(161,920,'2006-02-15 10:05:03'),(161,921,'2006-02-15 10:05:03'),(161,924,'2006-02-15 10:05:03'),(161,927,'2006-02-15 10:05:03'),(162,1,'2006-02-15 10:05:03'),(162,4,'2006-02-15 10:05:03'),(162,7,'2006-02-15 10:05:03'),(162,18,'2006-02-15 10:05:03'),(162,28,'2006-02-15 10:05:03'),(162,32,'2006-02-15 10:05:03'),(162,33,'2006-02-15 10:05:03'),(162,41,'2006-02-15 10:05:03'),(162,85,'2006-02-15 10:05:03'),(162,121,'2006-02-15 10:05:03'),(162,164,'2006-02-15 10:05:03'),(162,274,'2006-02-15 10:05:03'),(162,279,'2006-02-15 10:05:03'),(162,409,'2006-02-15 10:05:03'),(162,410,'2006-02-15 10:05:03'),(162,415,'2006-02-15 10:05:03'),(162,500,'2006-02-15 10:05:03'),(162,574,'2006-02-15 10:05:03'),(162,612,'2006-02-15 10:05:03'),(162,636,'2006-02-15 10:05:03'),(162,659,'2006-02-15 10:05:03'),(162,786,'2006-02-15 10:05:03'),(162,844,'2006-02-15 10:05:03'),(162,909,'2006-02-15 10:05:03'),(162,968,'2006-02-15 10:05:03'),(163,30,'2006-02-15 10:05:03'),(163,45,'2006-02-15 10:05:03'),(163,166,'2006-02-15 10:05:03'),(163,180,'2006-02-15 10:05:03'),(163,239,'2006-02-15 10:05:03'),(163,283,'2006-02-15 10:05:03'),(163,303,'2006-02-15 10:05:03'),(163,304,'2006-02-15 10:05:03'),(163,307,'2006-02-15 10:05:03'),(163,394,'2006-02-15 10:05:03'),(163,409,'2006-02-15 10:05:03'),(163,434,'2006-02-15 10:05:03'),(163,444,'2006-02-15 10:05:03'),(163,522,'2006-02-15 10:05:03'),(163,719,'2006-02-15 10:05:03'),(163,785,'2006-02-15 10:05:03'),(163,833,'2006-02-15 10:05:03'),(163,881,'2006-02-15 10:05:03'),(163,891,'2006-02-15 10:05:03'),(163,947,'2006-02-15 10:05:03'),(163,996,'2006-02-15 10:05:03'),(164,15,'2006-02-15 10:05:03'),(164,23,'2006-02-15 10:05:03'),(164,148,'2006-02-15 10:05:03'),(164,169,'2006-02-15 10:05:03'),(164,252,'2006-02-15 10:05:03')\n```\n\n----------------------------------------\n\nTITLE: Viewing Linux Device I/O Statistics\nDESCRIPTION: Output from Linux I/O monitoring showing device statistics including timestamps, read/write metrics, concurrency, response times and utilization. Format shows device name followed by read MB/s, read concurrency, read response time, write MB/s, write concurrency, write response time, busy percentage and in-progress operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_switch_to_sample.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n13.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n13.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Creating AFTER UPDATE Trigger for Synchronizing 'film' and 'film_text' Tables - SQL\nDESCRIPTION: Creates an AFTER UPDATE trigger named 'upd_film' on the 'film' table, ensuring that changes to the 'title' or 'description' fields in 'film' are propagated to the 'film_text' table. Requires the 'film' and 'film_text' tables and appropriate privileges. The trigger compares 'old' and 'new' values for 'title' and 'description' and updates 'film_text' accordingly. Inputs: an UPDATE on 'film'; Output: synced 'film_text' row; limitation: assumes both tables are always kept in sync.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN\n    IF (old.title != new.title) or (old.description != new.description)\n    THEN\n        UPDATE film_text\n            SET title=new.title,\n                description=new.description,\n                film_id=new.film_id\n        WHERE film_id=old.film_id;\n    END IF;\n  END */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Mounting EXT3 Filesystem\nDESCRIPTION: This snippet shows the process of mounting an EXT3 filesystem, including orphan cleanup and recovery operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-005.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nEXT3-fs: INFO: recovery required on readonly filesystem.\nEXT3-fs: write access will be enabled during recovery.\nkjournald starting.  Commit interval 5 seconds\nEXT3-fs: dm-1: orphan cleanup on readonly fs\next3_orphan_cleanup: deleting unreferenced inode 56295427\n...\nEXT3-fs: dm-1: 14 orphan inodes deleted\nEXT3-fs: recovery complete.\nEXT3-fs: mounted filesystem with ordered data mode.\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in MySQL\nDESCRIPTION: Creates the staff table to store employee information. Contains foreign keys to address and store tables with support for profile pictures and login credentials.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Mutual Exclusion Rule for Options (Plaintext)\nDESCRIPTION: States a validation rule for command-line options: the `--ignore` and `--replace` options cannot be used at the same time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--ignore and --replace are mutually exclusive.\n```\n\n----------------------------------------\n\nTITLE: Query Performance Report - foo_app\nDESCRIPTION: Performance analysis for user 'foo_app' showing 0 QPS with metrics for execution time, lock time, and query size. All events occurred at a single timestamp with minimal resource usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report_user.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Item 2: 0 QPS, 0x concurrency, ID 0x83EBF533997B1B1B8F4C76E92F07EABE at byte 600\n# This item is included in the report because it matches --limit.\n# Scores: V/M = 0.00\n# Time range: all events occurred at 2008-11-27 08:51:21\n# Attribute    pct   total     min     max     avg     95%  stddev  median\n# ============ === ======= ======= ======= ======= ======= ======= =======\n# Count         60       3\n# Exec time      0    97us    15us    67us    32us    66us    24us    14us\n# Lock time      0       0       0       0       0       0       0       0\n# Rows sent      0       0       0       0       0       0       0       0\n# Rows examine   0       0       0       0       0       0       0       0\n# Query size    50      38       6      16   12.67   15.25    4.48   15.25\n# String:\n# Databases    abc\n# Hosts        10.1.250.19\n# Query_time distribution\n#   1us\n#  10us  ################################################################\n# 100us\n#   1ms\n#  10ms\n# 100ms\n#    1s\n#  10s+\nfoo_app\n```\n\n----------------------------------------\n\nTITLE: Creating Test Table 'b' in SQL\nDESCRIPTION: This SQL snippet defines the structure of table 'b' with three columns: 'c1', 'c2', and 'c3'. It requires a MySQL database server with permissions to create tables. Column 'c1' is a small integer with auto-increment, while 'c2' and 'c3' are varchars of up to 45 characters each. The auto-increment feature is used to automatically generate unique values for 'c1', and all fields are mandatory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/multiple-files.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `b` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL,\n  `c3` varchar(45) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Commenting No Event Processing in Bash\nDESCRIPTION: This snippet is a single-line comment in Bash indicating that no events were processed. It may be used as a placeholder or to represent an empty state in a script or configuration file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# No events processed.\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from 'tbl' with Condition and Ordering in MySQL\nDESCRIPTION: This SQL query selects the 'foo' column from 'tbl' where 'col' equals 12345, ordered by 'col'. It includes an EXPLAIN statement with PARTITIONS hint for query plan analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT foo \n                         FROM tbl\n                         WHERE col=12345\n                         ORDER BY col\\G\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Block (Text)\nDESCRIPTION: This snippet shows a typical block of disk I/O statistics data as found in the file. Each line represents a block device and its associated I/O counters, following the format: major_number minor_number device_name reads_completed reads_merged sectors_read ms_reading writes_completed writes_merged sectors_written ms_writing ios_in_progress ms_total_io weighted_ms_total_io. This specific block captures the state at the beginning of the log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1    2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1    3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1    4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1    5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1    6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1    7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1    8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1    9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1   10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1   11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1   12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1   13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1   14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1   15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489378 163771322 245685 758230419 452642221 198294834 66 218108558 0 621586942 976427425\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n   8    6 sda6 298706221 152558886 241499 716928584 451253655 189724872 64 125377757 0 601265080 842398203\n   8   16 sdb 297 733 8240 197 0 0 0 0 0 189 197\n   8   32 sdc 328 733 8488 129 0 0 0 0 0 128 129\n 253    0 dm-0 1418189 0 27251026 5776265 27004934 0 216039472 57460473 0 5590523 63255153\n 253    1 dm-1 135871 0 1874770 319678 1634435 0 13075480 6656137 0 827234 6975779\n 253    2 dm-2 126266 0 1587922 489749 1990026 0 15920208 1617243 0 1606268 2106986\n 253    3 dm-3 39108 0 317138 171804 76791385 0 614331080 174357398 0 6519480 174576802\n 253    4 dm-4 4462420 0 101415522 11644533 30110879 0 240887032 29641962 0 8894649 41287596\n 253    5 dm-5 652603 0 18833426 916973 6500866 0 52006928 4317032 0 2440835 5234205\n 253    6 dm-6 444430077 0 51182351218 795935238 496946022 0 12885039784 119566971 0 583872958 915518311\n  11    0 sr0 0 0 0 0 0 0 0 0 0 0 0\n   8   48 sdd 0 0 0 0 0 0 0 0 0 0 0\n  11    1 sr1 0 0 0 0 0 0 0 0 0 0 0\n   9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998373 6091475829 49403813192 2173805766 0 919421199 3016071469\n```\n\n----------------------------------------\n\nTITLE: Network Packet Hex Dumps\nDESCRIPTION: Series of hex dumps showing TCP/IP packet contents including headers and payload data\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump023.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n0x0000:  4508 0063 a17a 4000 4006 9b10 7f00 0001\\n0x0010:  7f00 0001 c28e 3039 0cc0 e380 0c93 be00\\n0x0020:  8018 0101 fe57 0000 0101 080a 0052 46bc\\n0x0030:  0052 43d8 2b00 0000 1653 454c 4543 5420\\n0x0040:  2a20 4652 4f4d 2064 2e74 3320 5748 4552\\n0x0050:  4520 763d 3f20 4f52 2063 3d3f 204f 5220\\n0x0060:  663d 3f\n```\n\n----------------------------------------\n\nTITLE: Creating inventory_held_by_customer Function in MySQL\nDESCRIPTION: This function checks if a specific inventory item is currently held by a customer and returns the customer ID if so.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE FUNCTION `inventory_held_by_customer`(p_inventory_id INT) RETURNS int(11)\n    READS SQL DATA\nBEGIN\n  DECLARE v_customer_id INT;\n  DECLARE EXIT HANDLER FOR NOT FOUND RETURN NULL;\n\n  SELECT customer_id INTO v_customer_id\n  FROM rental\n  WHERE return_date IS NULL\n  AND inventory_id = p_inventory_id;\n\n  RETURN v_customer_id;\nEND\n```\n\n----------------------------------------\n\nTITLE: MySQL Session Configuration\nDESCRIPTION: Initial session configuration settings for max_insert_delayed_threads and COMPLETION_TYPE\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog005.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n/*!40019 SET @@session.max_insert_delayed_threads=0*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet for MySQL Server Response\nDESCRIPTION: This packet capture shows a TCP packet containing a MySQL server response. It includes the packet headers and the beginning of the result set structure.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump037.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2009-04-12 12:00:03.000000 IP 10.10.10.14.mysql > 127.0.0.1.57890: tcp 82\n\t0x0000:  4508 0086 07ef 4000 4006 3479 7f00 0001\n\t0x0010:  7f00 0001 0cea e222 0b4b fd04 0ab4 d451\n\t0x0020:  8018 0200 fe7a 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 0100 0001 011b 0000 0203 6465\n\t0x0040:  6600 0000 0574 7269 636b 000c 0800 1700\n\t0x0050:  0000 fd01 001f 0000 0500 0003 fe00 0002\n\t0x0060:  0018 0000 0417 7061 7269 7320 696e 2074\n\t0x0070:  6865 2074 6865 2073 7072 696e 6705 0000\n\t0x0080:  05fe 0000 0200\n```\n\n----------------------------------------\n\nTITLE: Creating Actor Info View in MySQL\nDESCRIPTION: SQL view definition that joins actor, film_actor, film_category, and category tables to provide detailed film information for each actor. The view groups films by category for each actor with advanced string concatenation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_28\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY INVOKER */\n/*!50001 VIEW `actor_info` AS select `a`.`actor_id` AS `actor_id`,`a`.`first_name` AS `first_name`,`a`.`last_name` AS `last_name`,group_concat(distinct concat(`c`.`name`,': ',(select group_concat(`f`.`title` order by `f`.`title` ASC separator ', ') from ((`film` `f` join `film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `film_actor` `fa` on((`f`.`film_id` = `fa`.`film_id`))) where ((`fc`.`category_id` = `c`.`category_id`) and (`fa`.`actor_id` = `a`.`actor_id`)))) order by `c`.`name` ASC separator '; ') AS `film_info` from (((`actor` `a` left join `film_actor` `fa` on((`a`.`actor_id` = `fa`.`actor_id`))) left join `film_category` `fc` on((`fa`.`film_id` = `fc`.`film_id`))) left join `category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `a`.`actor_id`,`a`.`first_name`,`a`.`last_name` */\n```\n\n----------------------------------------\n\nTITLE: Creating Table 'b' in MySQL - SQL\nDESCRIPTION: Creates a table named 'b' with three columns: 'c1' as an unsigned AUTO_INCREMENT small integer, 'c2' and 'c3' as non-null varchar(45) fields. All columns are required, and 'c1' can serve as a primary key, although not defined as such in the snippet. This statement initializes the structure of table 'b' in the 'test' database and is typically used to prepare a schema for subsequent data operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/dump001-twice.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `b` (\n  `c1` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `c2` varchar(45) NOT NULL,\n  `c3` varchar(45) NOT NULL,\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying DMI System Configuration Output\nDESCRIPTION: Standardized DMI (Desktop Management Interface) output showing detailed system hardware information including memory modules, slots, and device configurations. The output is structured with handles and type identifiers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0900, DMI type 9, 13 bytes.\nSystem Slot Information\n\tDesignation: PCI1\n\tType: x8 PCI Express\n\tCurrent Usage: Available\n\tLength: Long\n\tCharacteristics:\n\t\t3.3 V is provided\n\t\tPME signal is supported\n```\n\n----------------------------------------\n\nTITLE: Defining Checksums Table in Percona Test Schema\nDESCRIPTION: The `checksums` table, under the percona_test schema, stores checksums for tables with db_tbl as the key. Requires InnoDB engine support and latin1 charset configuration.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NDMarkup Top-Level Tag Structure\nDESCRIPTION: Examples of NDMarkup top-level tags including paragraph, code, heading, list, and image tags. These tags form the primary structure of NDMarkup documents and don't nest within each other.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/NDMarkup.txt#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<p></p>\n<code type=\"\"></code>\n<h></h>\n<ul></ul>\n<dl></dl>\n<img mode=\"inline\" target=\"\" original=\"\">\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Configuration Parameters in Plaintext\nDESCRIPTION: This snippet shows a list of MySQL configuration parameters and their default values. It includes settings for various aspects of MySQL server operation, such as caching, threading, and timeouts. The list is presented in a key-value format, with parameters on the left and their corresponding values on the right.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nsymbolic-links                    TRUE\nsync-binlog                       0\nsync-frm                          TRUE\nsysdate-is-now                    FALSE\ntable_cache                       64\ntable_definition_cache            256\ntable_lock_wait_timeout           50\ntable_open_cache                  64\ntc-heuristic-recover              (No default value)\ntemp-pool                         TRUE\nthread_cache_size                 0\nthread_concurrency                10\nthread_stack                      262144\ntimed_mutexes                     FALSE\ntime_format                       %H:%i:%s\ntmpdir                            (No default value)\ntmp_table_size                    16777216\ntransaction_alloc_block_size      8192\ntransaction_prealloc_size         4096\nupdatable_views_with_limit        1\nuse-symbolic-links                TRUE\nverbose                           TRUE\nwait_timeout                      28800\nwarnings                          1\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet\nDESCRIPTION: Network packet showing MySQL server's acknowledgment of the INSERT query\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump005.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n0x0000:  4508 003f d52a 4000 4006 6784 7f00 0001\n0x0010:  7f00 0001 0cea d804 1b00 8f43 1b4c dff2\n0x0020:  8018 0200 fe33 0000 0101 080a 0084 2319\n0x0030:  0084 2319 0700 0001 0001 0002 0000 00\n```\n\n----------------------------------------\n\nTITLE: Examining MySQL Server Query Response Packet\nDESCRIPTION: This snippet displays the hexadecimal dump of a TCP packet sent from the MySQL server to the client, containing the response to the executed query. It includes metadata about the result set and the actual query result.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump036.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n0x0000:  4508 0086 07ef 4000 4006 3479 7f00 0001\n0x0010:  7f00 0001 0cea e222 0b4b fd04 0ab4 d451\n0x0020:  8018 0200 fe7a 0000 0101 080a 0034 fb91\n0x0030:  0034 fb91 0100 0001 011b 0000 0203 6465\n0x0040:  6600 0000 0574 7269 636b 000c 0800 1700\n0x0050:  0000 fd01 001f 0000 0500 0003 fe00 0002\n0x0060:  0018 0000 0417 7061 7269 7320 696e 2074\n0x0070:  6865 2074 6865 2073 7072 696e 6705 0000\n0x0080:  05fe 0000 0200\n```\n\n----------------------------------------\n\nTITLE: Detecting SCSI Device Information\nDESCRIPTION: This snippet shows the detection of a SCSI device, including vendor, model, and capacity information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-005.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nVendor: ATA       Model: HITACHI HUA7210S  Rev: A90A\nType:   Direct-Access                      ANSI SCSI revision: 05\nSCSI device sdm: 1953525168 512-byte hdwr sectors (1000205 MB)\nsdm: Write Protect is off\nsdm: Mode Sense: 73 00 00 08\nSCSI device sdm: drive cache: write through\n```\n\n----------------------------------------\n\nTITLE: Linux Disk Statistics Time Series Data\nDESCRIPTION: Raw disk statistics output showing I/O metrics for various storage devices over multiple timestamps. Includes data for RAM disks (ram0-ram15), SCSI/SATA disks (sda, sda1-3), CD-ROM (sr0), RAID (md0) and loop devices (loop0-7). Each line contains device major/minor numbers and various I/O counters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-004.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTS 1298130003.073935000\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 4257316122 34044403 136169417272 1922644540 492348406 547079657 32764474436 248191897 0 1348340872 2169628880\n   8    1 sda1 118 892 2030 39 2 0 4 1 0 32 40\n   8    2 sda2 28 156 1472 12 8 40 384 15 0 27 27\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Status and Structure Queries\nDESCRIPTION: SQL commands to show table status and structure for table 'n' in the test database. These are typically used for database schema inspection and maintenance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow001_tablesreport_no_vertical.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `test` LIKE 'n'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `test`.`n`\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL/MariaDB Thread and Uptime Status in Percona Toolkit\nDESCRIPTION: Output from a Percona Toolkit command showing the number of currently running threads (2) and uptime metrics in seconds (5809). The uptime metrics indicate the server has been running for approximately 1.6 hours since the last restart and status flush.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mext/samples/mext-002.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| Threads_running                   | 2        |\n| Uptime                            | 5809     |\n| Uptime_since_flush_status         | 5809     |\n+-----------------------------------+----------+\n```\n\n----------------------------------------\n\nTITLE: Reporting InnoDB File I/O Thread States and Pending Operations (Text)\nDESCRIPTION: This section details the current state of InnoDB's I/O threads (insert buffer, log, read, write threads) and summarizes pending I/O operations. It lists the number of pending asynchronous I/O reads and writes, insert buffer reads, log I/Os, and synchronous I/Os. It also shows pending log and buffer pool flushes (fsyncs) and provides overall OS file operation counts and rates.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for i/o request (insert buffer thread)\nI/O thread 1 state: waiting for i/o request (log thread)\nI/O thread 2 state: doing file i/o (read thread) ev set\nI/O thread 3 state: doing file i/o (read thread) ev set\nI/O thread 4 state: waiting for i/o request (read thread)\nI/O thread 5 state: doing file i/o (read thread) ev set\nI/O thread 6 state: waiting for i/o request (read thread)\nI/O thread 7 state: doing file i/o (read thread) ev set\nI/O thread 8 state: waiting for i/o request (read thread)\nI/O thread 9 state: waiting for i/o request (read thread)\nI/O thread 10 state: waiting for i/o request (read thread)\nI/O thread 11 state: waiting for i/o request (read thread)\nI/O thread 12 state: waiting for i/o request (read thread)\nI/O thread 13 state: doing file i/o (read thread) ev set\nI/O thread 14 state: doing file i/o (read thread) ev set\nI/O thread 15 state: waiting for i/o request (read thread)\nI/O thread 16 state: waiting for i/o request (read thread)\nI/O thread 17 state: waiting for i/o request (read thread)\nI/O thread 18 state: waiting for i/o request (write thread)\nI/O thread 19 state: waiting for i/o request (write thread)\nI/O thread 20 state: waiting for i/o request (write thread)\nI/O thread 21 state: waiting for i/o request (write thread)\nPending normal aio reads: 6, aio writes: 0,\n ibuf aio reads: 0, log i/o's: 0, sync i/o's: 0\nPending flushes (fsync) log: 1; buffer pool: 0\n44694496 OS file reads, 205801724 OS file writes, 60488220 OS fsyncs\n23 pending preads, 0 pending pwrites\n4.67 reads/s, 16384 avg bytes/read, 0.11 writes/s, 0.00 fsyncs/s\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NDMarkup List Item Tags\nDESCRIPTION: Examples of tags used specifically within list structures including bulleted list items, description list entries, symbols, and descriptions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/NDMarkup.txt#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<li></li>\n<de></de>\n<ds></ds>\n<dd></dd>\n```\n\n----------------------------------------\n\nTITLE: Displaying Mounted Filesystem Information in Linux\nDESCRIPTION: A tabular representation of mounted filesystems showing details such as device paths, size, usage percentage, filesystem type, mount options, and mount points. This output is likely from a system monitoring tool in the Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_006.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Mounted Filesystems ########################################\n  Filesystem                 Size Used Type     Opts                                                                                                                                                                                                                                                                                                                                                                                  Mountpoint\n  /dev/mapper/vgubuntu-root  915G  75% ext4     rw,relatime,errors=remount-ro                                                                                                                                                                                                                                                                                                                                                                         /\n  /dev/mmcblk0p1             239G  90% fuseblk  rw,nosuid,nodev,relatime,user_id=0,group_id=0,default_permissions,allow_other,blksize=4096,uhelper=udisks2                                                                                                                                                                                                                                                                                            /media/sveta/disk1\n  /dev/nvme0n1p1             511M   4% vfat     rw,relatime,fmask=0077,dmask=0077,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro                                                                                                                                                                                                                                                                                                  /boot/efi\n  /dev/nvme0n1p2             704M  42% ext4     rw,relatime                                                                                                                                                                                                                                                                                                                                                                                           /boot\n  overlay                    915G  75% overlay  rw,relatime,lowerdir=/var/lib/docker/overlay2/l/FQIQG2VFFXJ426FBUGGBSCWRG2:/var/lib/docker/overlay2/l/33C2CVPTOUZAT35KSL6I6DIWBZ:/var/lib/docker/overlay2/l/JTYFHSFS4TSV4PYBIQ7R57HCJ7,upperdir=/var/lib/docker/overlay2/c9349dd66a824eb0883d69eb6114a6d713a48901579c45267ef1bea3c6ab7a1a/diff,workdir=/var/lib/docker/overlay2/c9349dd66a824eb0883d69eb6114a6d713a48901579c45267ef1bea3c6ab7a1a/work /var/lib/docker/overlay2/c9349dd66a824eb0883d69eb6114a6d713a48901579c45267ef1bea3c6ab7a1a/merged\n  overlay                    915G  75% overlay  rw,relatime,lowerdir=/var/lib/docker/overlay2/l/RFAP7AE62T2GF223V7KCEJDN64:/var/lib/docker/overlay2/l/33C2CVPTOUZAT35KSL6I6DIWBZ:/var/lib/docker/overlay2/l/JTYFHSFS4TSV4PYBIQ7R57HCJ7,upperdir=/var/lib/docker/overlay2/f70a41a21dd8b3172c92e29fe1b91dfde0a65cfc878ee78acfad91e47124385c/diff,workdir=/var/lib/docker/overlay2/f70a41a21dd8b3172c92e29fe1b91dfde0a65cfc878ee78acfad91e47124385c/work /var/lib/docker/overlay2/c9349dd66a824eb0883d69eb6114a6d713a48901579c45267ef1bea3c6ab7a1a/merged\n  overlay                    915G  75% overlay  rw,relatime,lowerdir=/var/lib/docker/overlay2/l/FQIQG2VFFXJ426FBUGGBSCWRG2:/var/lib/docker/overlay2/l/33C2CVPTOUZAT35KSL6I6DIWBZ:/var/lib/docker/overlay2/l/JTYFHSFS4TSV4PYBIQ7R57HCJ7,upperdir=/var/lib/docker/overlay2/c9349dd66a824eb0883d69eb6114a6d713a48901579c45267ef1bea3c6ab7a1a/diff,workdir=/var/lib/docker/overlay2/c9349dd66a824eb0883d69eb6114a6d713a48901579c45267ef1bea3c6ab7a1a/work /var/lib/docker/overlay2/f70a41a21dd8b3172c92e29fe1b91dfde0a65cfc878ee78acfad91e47124385c/merged\n  overlay                    915G  75% overlay  rw,relatime,lowerdir=/var/lib/docker/overlay2/l/RFAP7AE62T2GF223V7KCEJDN64:/var/lib/docker/overlay2/l/33C2CVPTOUZAT35KSL6I6DIWBZ:/var/lib/docker/overlay2/l/JTYFHSFS4TSV4PYBIQ7R57HCJ7,upperdir=/var/lib/docker/overlay2/f70a41a21dd8b3172c92e29fe1b91dfde0a65cfc878ee78acfad91e47124385c/diff,workdir=/var/lib/docker/overlay2/f70a41a21dd8b3172c92e29fe1b91dfde0a65cfc878ee78acfad91e47124385c/work /var/lib/docker/overlay2/f70a41a21dd8b3172c92e29fe1b91dfde0a65cfc878ee78acfad91e47124385c/merged\n  tmpfs                       16G   0% tmpfs    rw,nosuid,nodev,inode64                                                                                                                                                                                                                                                                                                                                                                               /sys/fs/cgroup\n  tmpfs                       16G   0% tmpfs    rw,nosuid,nodev,noexec,relatime,size=5120k,inode64                                                                                                                                                                                                                                                                                                                                                    /sys/fs/cgroup\n  tmpfs                       16G   0% tmpfs    rw,nosuid,nodev,noexec,relatime,size=3264260k,mode=755,inode64                                                                                                                                                                                                                                                                                                                                        /sys/fs/cgroup\n  tmpfs                       16G   0% tmpfs    rw,nosuid,nodev,noexec,relatime,size=3264260k,mode=755,inode64                                                                                                                                                                                                                                                                                                                                        /sys/fs/cgroup\n  tmpfs                       16G   0% tmpfs    rw,nosuid,nodev,relatime,size=3264256k,mode=700,uid=1000,gid=1000,inode64                                                                                                                                                                                                                                                                                                                             /sys/fs/cgroup\n  tmpfs                       16G   0% tmpfs    ro,nosuid,nodev,noexec,mode=755,inode64                                                                                                                                                                                                                                                                                                                                                               /sys/fs/cgroup\n  tmpfs                       16G   2% tmpfs    rw,nosuid,nodev,inode64                                                                                                                                                                                                                                                                                                                                                                               /dev/shm\n  tmpfs                       16G   2% tmpfs    rw,nosuid,nodev,noexec,relatime,size=5120k,inode64                                                                                                                                                                                                                                                                                                                                                    /dev/shm\n  tmpfs                       16G   2% tmpfs    rw,nosuid,nodev,noexec,relatime,size=3264260k,mode=755,inode64                                                                                                                                                                                                                                                                                                                                        /dev/shm\n  tmpfs                       16G   2% tmpfs    rw,nosuid,nodev,noexec,relatime,size=3264260k,mode=755,inode64                                                                                                                                                                                                                                                                                                                                        /dev/shm\n  tmpfs                       16G   2% tmpfs    rw,nosuid,nodev,relatime,size=3264256k,mode=700,uid=1000,gid=1000,inode64                                                                                                                                                                                                                                                                                                                             /dev/shm\n  tmpfs                       16G   2% tmpfs    ro,nosuid,nodev,noexec,mode=755,inode64                                                                                                                                                                                                                                                                                                                                                               /dev/shm\n```\n\n----------------------------------------\n\nTITLE: MySQL Encryption Configuration\nDESCRIPTION: Information about the keyring plugins used for encryption, showing that keyring_file plugin is active.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc002.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# Encryption #################################################\nKeyring plugins:\n'+--------------+---------------+\n| PLUGIN_NAME  | PLUGIN_STATUS |\n+--------------+---------------+\n| keyring_file | ACTIVE        |\n+--------------+---------------+'\n```\n\n----------------------------------------\n\nTITLE: MySQL Client ACK Packet\nDESCRIPTION: TCP packet showing MySQL client acknowledging the error response\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump004.txt#2025-04-22_snippet_2\n\nLANGUAGE: raw\nCODE:\n```\n2009-04-12 12:58:02.036077 IP 127.0.0.1.60439 > 127.0.0.1.3306: tcp 0\n\t0x0000:  4508 0034 fe57 4000 4006 3e62 7f00 0001\n\t0x0010:  7f00 0001 ec17 0cea b75e 3183 b698 c41e\n\t0x0020:  8010 0201 33e3 0000 0101 080a 004f f2ce\n\t0x0030:  004f f2ce\n```\n\n----------------------------------------\n\nTITLE: Natural Docs Topic Configuration Format\nDESCRIPTION: Core configuration format for Natural Docs topics including basic syntax examples and required settings. Shows how to define topic types with their properties like scope, indexing, and keywords.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Topics.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nFormat: 1.52\n\nTopic Type: Generic\n\n   Index: No\n   Keywords:\n      topic, topics\n      about, list\n\n\nTopic Type: Class\n\n   Plural: Classes\n   Scope: Start\n   Class Hierarchy: Yes\n   Page Title If First: Yes\n   Can Group With: Interfaces\n\n   Keywords:\n      class, classes\n      structure, structures\n      struct, structs\n      package, packages\n      namespace, namespaces\n```\n\n----------------------------------------\n\nTITLE: Inserting Row with Data Values Using MySQL SQL\nDESCRIPTION: This repeats the insertion operation into the 'tbl' table of 'db2', this time adding the values ('c', 'd'). As before, Percona-style comments capture execution details. The snippet is useful for demonstrating repeated inserts and their monitoring. Prerequisites are identical: MySQL, existing table, and valid data types for columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n# Time: 090805 13:00:27\\n# Thread_id: 3\\n# Query_time: 1349.000052  Lock_time: 1349.000091  Rows_sent: 0  Rows_examined: 1928472\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: Yes  Tmp_table_on_disk: Yes\\n# Filesort: Yes  Filesort_on_disk: Yes  Merge_passes: 0\\n# No InnoDB statistics available for this query\\nuse db3;\\nDELETE FROM forest WHERE animal = 'dead';\n```\n\n----------------------------------------\n\nTITLE: PHPMyAdmin Usergroup Permissions Query\nDESCRIPTION: Query to check usergroup permissions for server-related tabs\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog005.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `tab` FROM `phpmyadmin`.`pma__usergroups` WHERE `allowed` = 'N' AND `tab` LIKE 'server%' AND `usergroup` = (SELECT usergroup FROM `phpmyadmin`.`pma__users` WHERE `username` = 'root')\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Events Table\nDESCRIPTION: Defines the `event` table which maintains scheduling information for events in MySQL databases. The table includes fields for event timing, status, and various execution parameters, using MyISAM engine with utf8 charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events'\n```\n\n----------------------------------------\n\nTITLE: Installing PodioSync Python Package\nDESCRIPTION: Command for installing the PodioSync Python package using pip. This installs the tool and its dependencies required for migrating Podio data to SQL databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install podiosync\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Timestamp Values in MySQL Database\nDESCRIPTION: This SQL code contains a portion of an INSERT statement with multiple value tuples following the pattern (ID, value, timestamp). Each record contains a user/entity ID, a numeric identifier, and a consistent timestamp of February 15, 2006.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_replace_into_values.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n),(50,303,'2006-02-15 10:05:03'),(50,306,'2006-02-15 10:05:03'),(50,327,'2006-02-15 10:05:03'),(50,372,'2006-02-15 10:05:03'),(50,401,'2006-02-15 10:05:03'),(50,417,'2006-02-15 10:05:03'),(50,420,'2006-02-15 10:05:03'),(50,437,'2006-02-15 10:05:03'),(50,476,'2006-02-15 10:05:03'),(50,504,'2006-02-15 10:05:03'),(50,520,'2006-02-15 10:05:03'),(50,552,'2006-02-15 10:05:03'),(50,591,'2006-02-15 10:05:03'),(50,621,'2006-02-15 10:05:03'),(50,632,'2006-02-15 10:05:03'),(50,645,'2006-02-15 10:05:03'),(50,672,'2006-02-15 10:05:03'),(50,717,'2006-02-15 10:05:03'),(50,732,'2006-02-15 10:05:03'),(50,795,'2006-02-15 10:05:03'),(50,829,'2006-02-15 10:05:03'),(50,840,'2006-02-15 10:05:03'),(50,897,'2006-02-15 10:05:03'),(50,918,'2006-02-15 10:05:03'),(50,924,'2006-02-15 10:05:03'),(50,957,'2006-02-15 10:05:03'),(51,5,'2006-02-15 10:05:03'),(51,63,'2006-02-15 10:05:03'),(51,103,'2006-02-15 10:05:03'),(51,112,'2006-02-15 10:05:03'),(51,121,'2006-02-15 10:05:03'),(51,153,'2006-02-15 10:05:03'),(51,395,'2006-02-15 10:05:03'),(51,408,'2006-02-15 10:05:03'),(51,420,'2006-02-15 10:05:03'),(51,461,'2006-02-15 10:05:03'),(51,490,'2006-02-15 10:05:03'),(51,525,'2006-02-15 10:05:03'),(51,627,'2006-02-15 10:05:03'),(51,678,'2006-02-15 10:05:03'),(51,733,'2006-02-15 10:05:03'),(51,734,'2006-02-15 10:05:03'),(51,737,'2006-02-15 10:05:03'),(51,750,'2006-02-15 10:05:03'),(51,847,'2006-02-15 10:05:03'),(51,891,'2006-02-15 10:05:03'),(51,895,'2006-02-15 10:05:03'),(51,940,'2006-02-15 10:05:03'),(51,974,'2006-02-15 10:05:03'),(51,990,'2006-02-15 10:05:03'),(51,993,'2006-02-15 10:05:03'),(52,20,'2006-02-15 10:05:03'),(52,92,'2006-02-15 10:05:03'),(52,96,'2006-02-15 10:05:03'),(52,108,'2006-02-15 10:05:03'),(52,203,'2006-02-15 10:05:03'),(52,249,'2006-02-15 10:05:03'),(52,341,'2006-02-15 10:05:03'),(52,376,'2006-02-15 10:05:03'),(52,388,'2006-02-15 10:05:03'),(52,407,'2006-02-15 10:05:03'),(52,424,'2006-02-15 10:05:03'),(52,474,'2006-02-15 10:05:03'),(52,515,'2006-02-15 10:05:03'),(52,517,'2006-02-15 10:05:03'),(52,584,'2006-02-15 10:05:03'),(52,596,'2006-02-15 10:05:03'),(52,664,'2006-02-15 10:05:03'),(52,675,'2006-02-15 10:05:03'),(52,689,'2006-02-15 10:05:03'),(52,714,'2006-02-15 10:05:03'),(52,812,'2006-02-15 10:05:03'),(52,878,'2006-02-15 10:05:03'),(52,879,'2006-02-15 10:05:03'),(52,915,'2006-02-15 10:05:03'),(52,951,'2006-02-15 10:05:03'),(52,999,'2006-02-15 10:05:03'),(53,1,'2006-02-15 10:05:03'),(53,9,'2006-02-15 10:05:03'),(53,51,'2006-02-15 10:05:03'),(53,58,'2006-02-15 10:05:03'),(53,109,'2006-02-15 10:05:03'),(53,122,'2006-02-15 10:05:03'),(53,126,'2006-02-15 10:05:03'),(53,181,'2006-02-15 10:05:03'),(53,256,'2006-02-15 10:05:03'),(53,268,'2006-02-15 10:05:03'),(53,285,'2006-02-15 10:05:03'),(53,307,'2006-02-15 10:05:03'),(53,358,'2006-02-15 10:05:03'),(53,386,'2006-02-15 10:05:03'),(53,447,'2006-02-15 10:05:03'),(53,465,'2006-02-15 10:05:03'),(53,490,'2006-02-15 10:05:03'),(53,492,'2006-02-15 10:05:03'),(53,508,'2006-02-15 10:05:03'),(53,518,'2006-02-15 10:05:03'),(53,573,'2006-02-15 10:05:03'),(53,576,'2006-02-15 10:05:03'),(53,577,'2006-02-15 10:05:03'),(53,697,'2006-02-15 10:05:03'),(53,725,'2006-02-15 10:05:03'),(53,727,'2006-02-15 10:05:03'),(53,937,'2006-02-15 10:05:03'),(53,947,'2006-02-15 10:05:03'),(53,961,'2006-02-15 10:05:03'),(53,980,'2006-02-15 10:05:03'),(54,84,'2006-02-15 10:05:03'),(54,129,'2006-02-15 10:05:03'),(54,150,'2006-02-15 10:05:03'),(54,184,'2006-02-15 10:05:03'),(54,285,'2006-02-15 10:05:03'),(54,292,'2006-02-15 10:05:03'),(54,301,'2006-02-15 10:05:03'),(54,348,'2006-02-15 10:05:03'),(54,489,'2006-02-15 10:05:03'),(54,510,'2006-02-15 10:05:03'),(54,524,'2006-02-15 10:05:03'),(54,546,'2006-02-15 10:05:03'),(54,600,'2006-02-15 10:05:03'),(54,636,'2006-02-15 10:05:03'),(54,649,'2006-02-15 10:05:03'),(54,658,'2006-02-15 10:05:03'),(54,754,'2006-02-15 10:05:03'),(54,764,'2006-02-15 10:05:03'),(54,842,'2006-02-15 10:05:03'),(54,858,'2006-02-15 10:05:03'),(54,861,'2006-02-15 10:05:03'),(54,913,'2006-02-15 10:05:03'),(54,970,'2006-02-15 10:05:03'),(54,988,'2006-02-15 10:05:03'),(54,990,'2006-02-15 10:05:03'),(55,8,'2006-02-15 10:05:03'),(55,27,'2006-02-15 10:05:03'),(55,75,'2006-02-15 10:05:03'),(55,197,'2006-02-15 10:05:03'),(55,307,'2006-02-15 10:05:03'),(55,320,'2006-02-15 10:05:03'),(55,340,'2006-02-15 10:05:03'),(55,403,'2006-02-15 10:05:03'),(55,485,'2006-02-15 10:05:03'),(55,486,'2006-02-15 10:05:03'),(55,603,'2006-02-15 10:05:03'),(55,612,'2006-02-15 10:05:03'),(55,620,'2006-02-15 10:05:03'),(55,709,'2006-02-15 10:05:03'),(55,776,'2006-02-15 10:05:03'),(55,790,'2006-02-15 10:05:03'),(55,815,'2006-02-15 10:05:03'),(55,827,'2006-02-15 10:05:03'),(55,930,'2006-02-15 10:05:03'),(55,963,'2006-02-15 10:05:03'),(56,63,'2006-02-15 10:05:03'),(56,87,'2006-02-15 10:05:03'),(56,226,'2006-02-15 10:05:03'),(56,236,'2006-02-15 10:05:03'),(56,298,'2006-02-15 10:05:03'),(56,307,'2006-02-15 10:05:03'),(56,354,'2006-02-15 10:05:03'),(56,383,'2006-02-15 10:05:03'),(56,417,'2006-02-15 10:05:03'),(56,421,'2006-02-15 10:05:03'),(56,457,'2006-02-15 10:05:03'),(56,462,'2006-02-15 10:05:03'),(56,474,'2006-02-15 10:05:03'),(56,521,'2006-02-15 10:05:03'),(56,593,'2006-02-15 10:05:03'),(56,728,'2006-02-15 10:05:03'),(56,750,'2006-02-15 10:05:03'),(56,769,'2006-02-15 10:05:03'),(56,781,'2006-02-15 10:05:03'),(56,795,'2006-02-15 10:05:03'),(56,844,'2006-02-15 10:05:03'),(56,851,'2006-02-15 10:05:03'),(56,862,'2006-02-15 10:05:03'),(56,868,'2006-02-15 10:05:03'),(56,892,'2006-02-15 10:05:03'),(56,893,'2006-02-15 10:05:03'),(56,936,'2006-02-15 10:05:03'),(56,965,'2006-02-15 10:05:03'),(57,16,'2006-02-15 10:05:03'),(57,34,'2006-02-15 10:05:03'),(57,101,'2006-02-15 10:05:03'),(57,114,'2006-02-15 10:05:03'),(57,122,'2006-02-15 10:05:03'),(57,134,'2006-02-15 10:05:03'),(57,144,'2006-02-15 10:05:03'),(57,153,'2006-02-15 10:05:03'),(57,192,'2006-02-15 10:05:03'),(57,213,'2006-02-15 10:05:03'),(57,258,'2006-02-15 10:05:03'),(57,267,'2006-02-15 10:05:03'),(57,317,'2006-02-15 10:05:03'),(57,340,'2006-02-15 10:05:03'),(57,393,'2006-02-15 10:05:03'),(57,437,'2006-02-15 10:05:03'),(57,447,'2006-02-15 10:05:03'),(57,502,'2006-02-15 10:05:03'),(57,592,'2006-02-15 10:05:03'),(57,605,'2006-02-15 10:05:03'),(57,637,'2006-02-15 10:05:03'),(57,685,'2006-02-15 10:05:03'),(57,707,'2006-02-15 10:05:03'),(57,714,'2006-02-15 10:05:03'),(57,717,'2006-02-15 10:05:03'),(57,737,'2006-02-15 10:05:03'),(57,767,'2006-02-15 10:05:03'),(57,852,'2006-02-15 10:05:03'),(57,891,'2006-02-15 10:05:03'),(57,918,'2006-02-15 10:05:03'),(58,48,'2006-02-15 10:05:03'),(58,68,'2006-02-15 10:05:03'),(58,119,'2006-02-15 10:05:03'),(58,128,'2006-02-15 10:05:03'),(58,135,'2006-02-15 10:05:03'),(58,175,'2006-02-15 10:05:03'),(58,199,'2006-02-15 10:05:03'),(58,235,'2006-02-15 10:05:03'),(58,242,'2006-02-15 10:05:03'),(58,243,'2006-02-15 10:05:03'),(58,254,'2006-02-15 10:05:03'),(58,306,'2006-02-15 10:05:03'),(58,316,'2006-02-15 10:05:03'),(58,417,'2006-02-15 10:05:03'),(58,426,'2006-02-15 10:05:03'),(58,460,'2006-02-15 10:05:03'),(58,477,'2006-02-15 10:05:03'),(58,541,'2006-02-15 10:05:03'),(58,549,'2006-02-15 10:05:03'),(58,551,'2006-02-15 10:05:03'),(58,553,'2006-02-15 10:05:03'),(58,578,'2006-02-15 10:05:03'),(58,602,'2006-02-15 10:05:03'),(58,632,'2006-02-15 10:05:03'),(58,635,'2006-02-15 10:05:03'),(58,638,'2006-02-15 10:05:03'),(58,698,'2006-02-15 10:05:03'),(58,726,'2006-02-15 10:05:03'),(58,755,'2006-02-15 10:05:03'),(58,800,'2006-02-15 10:05:03'),(58,856,'2006-02-15 10:05:03'),(58,858,'2006-02-15 10:05:03'),(59,5,'2006-02-15 10:05:03'),(59,46,'2006-02-15 10:05:03'),(59,54,'2006-02-15 10:05:03'),(59,72,'2006-02-15 10:05:03'),(59,88,'2006-02-15 10:05:03'),(59,121,'2006-02-15 10:05:03'),(59,129,'2006-02-15 10:05:03'),(59,130,'2006-02-15 10:05:03'),(59,183,'2006-02-15 10:05:03'),(59,210,'2006-02-15 10:05:03'),(59,241,'2006-02-15 10:05:03'),(59,295,'2006-02-15 10:05:03'),(59,418,'2006-02-15 10:05:03'),(59,572,'2006-02-15 10:05:03'),(59,644,'2006-02-15 10:05:03'),(59,650,'2006-02-15 10:05:03'),(59,689,'2006-02-15 10:05:03'),(59,694,'2006-02-15 10:05:03'),(59,702,'2006-02-15 10:05:03'),(59,713,'2006-02-15 10:05:03'),(59,749,'2006-02-15 10:05:03'),(59,772,'2006-02-15 10:05:03'),(59,853,'2006-02-15 10:05:03'),(59,862,'2006-02-15 10:05:03'),(59,943,'2006-02-15 10:05:03'),(59,946,'2006-02-15 10:05:03'),(59,984,'2006-02-15 10:05:03'),(60,31,'2006-02-15 10:05:03'),(60,85,'2006-02-15 10:05:03'),(60,133,'2006-02-15 10:05:03'),(60,142,'2006-02-15 10:05:03'),(60,177,'2006-02-15 10:05:03'),(60,179,'2006-02-15 10:05:03'),(60,186,'2006-02-15 10:05:03'),(60,222,'2006-02-15 10:05:03'),(60,235,'2006-02-15 10:05:03'),(60,239,'2006-02-15 10:05:03'),(60,253,'2006-02-15 10:05:03'),(60,262,'2006-02-15 10:05:03'),(60,297,'2006-02-15 10:05:03'),(60,299,'2006-02-15 10:05:03'),(60,334,'2006-02-15 10:05:03'),(60,376,'2006-02-15 10:05:03'),(60,423,'2006-02-15 10:05:03'),(60,436,'2006-02-15 10:05:03'),(60,493,'2006-02-15 10:05:03'),(60,534,'2006-02-15 10:05:03'),(60,551,'2006-02-15 10:05:03'),(60,658,'2006-02-15 10:05:03'),(60,665,'2006-02-15 10:05:03'),(60,679,'2006-02-15 10:05:03'),(60,754,'2006-02-15 10:05:03'),(60,771,'2006-02-15 10:05:03'),(60,783,'2006-02-15 10:05:03'),(60,784,'2006-02-15 10:05:03'),(60,805,'2006-02-15 10:05:03'),(60,830,'2006-02-15 10:05:03'),(60,835,'2006-02-15 10:05:03'),(60,928,'2006-02-15 10:05:03'),(60,952,'2006-02-15 10:05:03'),(60,971,'2006-02-15 10:05:03'),(60,986,'2006-02-15 10:05:03'),(61,235,'2006-02-15 10:05:03'),(61,237,'2006-02-15 10:05:03'),(61,307,'2006-02-15 10:05:03'),(61,362,'2006-02-15 10:05:03'),(61,372,'2006-02-15 10:05:03'),(61,374,'2006-02-15 10:05:03'),(61,423,'2006-02-15 10:05:03'),(61,433,'2006-02-15 10:05:03'),(61,508,'2006-02-15 10:05:03'),(61,518,'2006-02-15 10:05:03'),(61,519,'2006-02-15 10:05:03'),(61,535,'2006-02-15 10:05:03'),(61,537,'2006-02-15 10:05:03'),(61,585,'2006-02-15 10:05:03'),(61,639,'2006-02-15 10:05:03'),(61,648,'2006-02-15 10:05:03'),(61,649,'2006-02-15 10:05:03'),(61,703,'2006-02-15 10:05:03'),(61,752,'2006-02-15 10:05:03'),(61,766,'2006-02\n```\n\n----------------------------------------\n\nTITLE: Table Cleanup Operations\nDESCRIPTION: Drops tables t0, t1, and t2 from the database\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ndrop table t0,t1;\n\ndrop table t2;\n```\n\n----------------------------------------\n\nTITLE: Encrypt Command Usage for pt-secure-collect\nDESCRIPTION: Illustrates the usage of the 'encrypt' command in pt-secure-collect. This command is used to encrypt a file, with the password requested from the terminal.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-secure-collect/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\npt-secure-collect encrypt [flags] <input file>\n```\n\n----------------------------------------\n\nTITLE: Listing Top Processes by CPU Usage in Plaintext\nDESCRIPTION: This snippet shows a table of top processes sorted by CPU usage, including details such as PID, user, priority, virtual memory, resident memory, shared memory, CPU usage, memory usage, and command.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n# Top Processes ##############################################\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n21837 root      20   0  118472   5284   1912 R  76.9  0.0   6876:45 bash\n22324 root      20   0  118472   5256   1912 R  76.9  0.0   6930:46 bash\n27315 root      20   0  173656   6052   4560 R  15.4  0.0   0:00.07 top\n30550 deepak.+  20   0 1832784 106312  35024 S   7.7  0.1   7:24.20 mongod\n   11 root      20   0       0      0      0 I   3.8  0.0 218:16.07 rcu_sched\n  313 grafana   20   0 2853776  44376  15448 S   3.8  0.0  58:38.07 grafana-se+\n 4362 viniciu+  20   0 2056504 198048  33000 S   3.8  0.1  66:13.66 mongod\n 6837 viniciu+  20   0 2020216 124284  33192 S   3.8  0.1  55:09.11 mongod\n 7827 mydba     20   0 2329572 680728  11272 S   3.8  0.3   1644:16 victoriame+\n```\n\n----------------------------------------\n\nTITLE: Example Query Results for Statement Latency Summary\nDESCRIPTION: Sample query results showing aggregate statement execution statistics including latency, rows processed, and scan information per user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_93\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary_by_statement_latency;\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| user | total | total_latency | max_latency | lock_latency | rows_sent | rows_examined | rows_affected | full_scans |\n+------+-------+---------------+-------------+--------------+-----------+---------------+---------------+------------+\n| root |  3381 | 00:02:09.13   | 1.48 s      | 1.07 s       |      1151 |         93947 |           150 |         91 |\n```\n\n----------------------------------------\n\nTITLE: Showing Create Table Statement for Trees Table in MySQL\nDESCRIPTION: This SQL command retrieves the CREATE TABLE statement for the 'trees' table in the 'food' database. It shows the exact SQL used to create the table, including column definitions and constraints.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-80.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\n```\n\n----------------------------------------\n\nTITLE: Preparing to Create MySQL 'film_list' View in Sakila\nDESCRIPTION: This snippet includes comments indicating the start of the definition for the `film_list` view and commands to drop any existing table or view with the same name before proceeding with the `CREATE VIEW` statement (which is not fully included in this snippet). It also saves the current client character set and results settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Final view structure for view `film_list`\n--\n\n/*!50001 DROP TABLE IF EXISTS `film_list`*/;\n/*!50001 DROP VIEW IF EXISTS `film_list`*/;\n/*!50001 SET @saved_cs_client          = @@character_set_client */;\n```\n\n----------------------------------------\n\nTITLE: Displaying Device I/O Statistics from iostat in Linux\nDESCRIPTION: Output from the iostat tool showing I/O performance metrics for various storage devices over multiple time intervals. The data includes read/write megabytes per second, concurrency, response times, device utilization percentage, and in-progress operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n 64.2 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 64.2 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 65.2 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sda           0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 65.2 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sda6          0.0    0.0     0.0     0.0    0.0     0.1   0%      0\n 65.2 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 dm-6          0.0    0.0     0.0     0.1    0.0     0.2   0%      0\n 65.2 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 65.2 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 66.2 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sda           0.0    0.0     0.0     0.0    0.0     0.5   0%      0\n 66.2 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sda6          0.0    0.0     0.0     0.0    0.0     0.5   0%      0\n 66.2 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 dm-1          0.0    0.0     0.0     0.0    0.0     1.0   0%      0\n 66.2 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 dm-6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 66.2 emcpowera     0.0    0.0     0.0     0.1    0.0     0.5   1%      0\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 67.2 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sda           0.0    0.0     1.0     0.0    0.0     0.0   0%      0\n 67.2 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sda6          0.0    0.0     1.0     0.0    0.0     0.0   0%      0\n 67.2 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 dm-3          0.0    0.0     0.0     0.2    0.0     0.0   0%      0\n 67.2 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 dm-6          0.0    0.0     1.0     0.1    0.0     0.1   0%      0\n 67.2 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 67.2 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 68.2 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 sda           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 68.2 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Disk I/O Statistics Snapshot 1\nDESCRIPTION: This block displays raw disk I/O statistics, likely captured from `/proc/diskstats`. Each line represents a block device (e.g., ram disks, loop devices, physical disks/partitions like sda, sdb) and contains numerical values for various I/O metrics. These metrics typically include reads completed, sectors read, writes completed, sectors written, I/O operations currently in progress, time spent doing I/Os, etc. This data is fundamental for performance monitoring.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/switch_to_sample.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n   1      12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1      13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1      14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1      15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   7       0 loop0 0 0 0 0 0 0 0 0 0 0 0\n   7       1 loop1 0 0 0 0 0 0 0 0 0 0 0\n   7       2 loop2 0 0 0 0 0 0 0 0 0 0 0\n   7       3 loop3 0 0 0 0 0 0 0 0 0 0 0\n   7       4 loop4 0 0 0 0 0 0 0 0 0 0 0\n   7       5 loop5 0 0 0 0 0 0 0 0 0 0 0\n   7       6 loop6 0 0 0 0 0 0 0 0 0 0 0\n   7       7 loop7 0 0 0 0 0 0 0 0 0 0 0\n   8       0 sda 50032 15372 1551175 589373 631149 1755538 19096536 4151503 0 678570 4751870\n   8       1 sda1 39 560 1285 1156 0 0 0 0 0 1020 1156\n   8       2 sda2 132 7184 7890 2523 0 0 0 0 0 2140 2523\n   8       3 sda3 48600 567 1477874 562406 629586 1715580 18764368 4137760 0 657920 4711820\n   8       4 sda4 1242 7042 63822 22896 1563 39958 332168 13743 0 27116 36736\n   8      16 sdb 57 633 1719 473 0 0 0 0 0 356 473\n   8      17 sdb1 40 605 1359 236 0 0 0 0 0 153 236\n```\n\n----------------------------------------\n\nTITLE: Examining RW-Latch Lock States in InnoDB (C)\nDESCRIPTION: This code snippet shows the detailed state of an RW-latch in InnoDB, including the lock mode, number of readers, waiters flag, and lock word. It also provides information on the last read and write lock operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nS-lock on RW-latch at 0x90a42ca0 '&new_index->lock'\na writer (thread id 139960404199760) has reserved it in mode  exclusive\nnumber of readers 0, waiters flag 1, lock_word: 0\nLast time read locked in file btr/btr0cur.c line 457\nLast time write locked in file btr/btr0cur.c line 450\n```\n\n----------------------------------------\n\nTITLE: Creating Help Keyword Table in SQL\nDESCRIPTION: Creates the help_keyword table to catalog specific keywords related to help topics in MySQL. The primary identifier is help_keyword_id, with a unique constraint placed on the name field.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Querying foo table - Simple SELECT\nDESCRIPTION: Basic SELECT query on foo table in db1 database, executed with SQL_SLAVE user. Query shows consistent 12us execution time with no lock time and no rows examined or returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-rtm-interval-30m.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM foo\n```\n\n----------------------------------------\n\nTITLE: MySQL InnoDB Transaction Lock Details\nDESCRIPTION: Detailed log output showing transaction locks, including table locks (IX mode) and record locks (X mode) across multiple tables in citydb database. Contains information about transaction states, thread IDs, and lock structures.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.002.txt#2025-04-22_snippet_3\n\nLANGUAGE: mysql\nCODE:\n```\nRECORD LOCKS space id 146 page no 12837 n bits 192 index `PRIMARY` of table `citydb`.`players` trx id 7C6E3A88 lock_mode X locks rec but not gap\nTABLE LOCK table `citydb`.`player_stats` trx id 7C6E3A88 lock mode IX\nRECORD LOCKS space id 147 page no 956053 n bits 104 index `PRIMARY` of table `citydb`.`player_stats` trx id 7C6E3A88 lock_mode X locks rec but not gap\n```\n\n----------------------------------------\n\nTITLE: Dropping and Querying Tables in MySQL\nDESCRIPTION: Basic operations to drop tables if they exist and check the record count in table t1. The count shows there are 64801 records in the table being used for subsequent operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndrop table if exists  t0,t1,t2;\nselect count(*) from t1;\n```\n\n----------------------------------------\n\nTITLE: General Usage Syntax for pt-secure-collect (Shell)\nDESCRIPTION: This snippet shows the basic command structure for executing the `pt-secure-collect` tool. It indicates that the command requires a specific subcommand (`<command>`) followed by optional arguments (`[<args> ...]`), and potentially preceded by global flags (`[<flags>]`).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-secure-collect.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npt-secure-collect [<flags>] <command> [<args> ...]\n```\n\n----------------------------------------\n\nTITLE: Defining Ada Language in Natural Docs Configuration\nDESCRIPTION: Configures Ada language properties with enhanced support through a dedicated Perl package.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_13\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Ada\n\n   Extensions: ada ads adb\n   Line Comment: --\n   Function Prototype Enders: ; is Is IS\n   Variable Prototype Enders: ; :=\n   Perl Package: NaturalDocs::Languages::Ada\n```\n\n----------------------------------------\n\nTITLE: Defining percona_test.load_data Table Schema (SQL)\nDESCRIPTION: This SQL snippet defines the structure for the `load_data` table in the `percona_test` database. It contains a single integer column named `i` which allows NULL values. The table uses the InnoDB engine and the utf8mb4 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `load_data` (\n  `i` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n----------------------------------------\n\nTITLE: MySQL User Authentication Query\nDESCRIPTION: Query to verify user existence in mysql.user table\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog005.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 FROM mysql.user LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet for MySQL Query\nDESCRIPTION: This packet capture shows a TCP packet containing a MySQL query 'select \"paris in the the spring\" as trick'. It demonstrates the hexadecimal representation of the packet headers and payload.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump037.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2009-04-12 12:00:00.000000 IP 127.0.0.1.57890 > 10.10.10.14.mysql: tcp 46\n\t0x0000:  4508 0062 2840 4000 4006 144c 7f00 0001\n\t0x0010:  7f00 0001 e222 0cea 0ab4 d423 0b4b fd04\n\t0x0020:  8018 0201 fe56 0000 0101 080a 0034 fb91\n\t0x0030:  0034 fb91 2a00 0000 0373 656c 6563 7420\n\t0x0040:  2270 6172 6973 2069 6e20 7468 6520 7468\n\t0x0050:  6520 7370 7269 6e67 2220 6173 2074 7269\n\t0x0060:  636b\n```\n\n----------------------------------------\n\nTITLE: Creating the 'inventory' Table in SQL\nDESCRIPTION: This SQL statement defines the `inventory` table using the InnoDB engine to track individual copies of films available in stores. It includes an auto-incrementing `inventory_id` as the primary key, along with `film_id` and `store_id`. Foreign keys link `film_id` to the `film` table and `store_id` to the `store` table. Indexes are created on `film_id` and a composite index on (`store_id`, `film_id`).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Network Packet Capture - Client Data Packets\nDESCRIPTION: Two sequential TCP packets containing data payload from client. Shows timestamp, IP details and hex dump of packet contents.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump031.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2009-12-07 20:54:54.794819 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 4\n   0x0000:  4508 0038 853f 4000 3f06 4a1d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2e 0529 232a 5e2b\n   0x0020:  8018 09e4 cb32 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 4444 4444\n2009-12-07 20:54:54.794820 IP 1.2.3.4.35957 > 127.0.0.1.mysql: tcp 4\n   0x0000:  4508 0038 853f 4000 3f06 4a1d ac14 0414\n   0x0010:  ac14 101f 8c75 0cea 1e2f 0529 232a 5e2b\n   0x0020:  8018 09e4 cb32 0000 0101 080a 4814 fa1a\n   0x0030:  482f 0879 4e4e 4e4e\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Character Set Configuration\nDESCRIPTION: SQL commands for selecting a database and setting UTF-8 character encoding. Shows repeated pattern of database connection setup.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow057.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse db;\nSET NAMES utf8;\n```\n\n----------------------------------------\n\nTITLE: Example Output - Bash\nDESCRIPTION: Sample output showing log analysis across multiple nodes with timestamps and events\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ pt-galera-log-explainer list --all --no-color --since=2023-03-12T19:41:28.493046Z --until=2023-03-12T19:44:59.855491Z tests/logs/upgrade/*\nidentifier                    172.17.0.2                                 node2                                   tests/logs/upgrade/node3.log            \ncurrent path                  tests/logs/upgrade/node1.log               tests/logs/upgrade/node2.log            tests/logs/upgrade/node3.log            \nlast known ip                 172.17.0.2                                                                                                                 \nlast known name                                                          node2                                                                           \nmysql version                 8.0.28                                                                                                                     \n                                                                                                                                                             \n2023-03-12T19:41:28.493046Z   starting(8.0.28)                           |                                       |                                       \n2023-03-12T19:41:28.500789Z   started(cluster)                           |                                       |                                       \n2023-03-12T19:43:17.630191Z   |                                          node3 joined                            |                                       \n2023-03-12T19:43:17.630208Z   node3 joined                               |                                       |                                       \n2023-03-12T19:43:17.630221Z   node2 joined                               |                                       |                                       \n2023-03-12T19:43:17.630243Z   |                                          node1 joined                            |                                       \n2023-03-12T19:43:17.634138Z   |                                          |                                       node2 joined                            \n2023-03-12T19:43:17.634229Z   |                                          |                                       node1 joined                            \n2023-03-12T19:43:17.643210Z   |                                          PRIMARY(n=3)                            |                                       \n2023-03-12T19:43:17.648163Z   |                                          |                                       PRIMARY(n=3)                            \n2023-03-12T19:43:18.130088Z   CLOSED -> OPEN                             |                                       |                                       \n2023-03-12T19:43:18.130230Z   PRIMARY(n=3)                               |                                       |                                       \n2023-03-12T19:43:18.130916Z   OPEN -> PRIMARY                            |                                       |                                       \n2023-03-12T19:43:18.904410Z   will receive IST(seqno:178226792)          |                                       |                                       \n2023-03-12T19:43:18.913328Z   |                                          |                                       node1 cannot find donor                 \n2023-03-12T19:43:18.913429Z   node1 cannot find donor                    |                                       |                                       \n2023-03-12T19:43:18.913565Z   |                                          node1 cannot find donor                 |                                       \n2023-03-12T19:43:19.914122Z   |                                          |                                       node1 cannot find donor                 \n2023-03-12T19:43:19.914259Z   node1 cannot find donor                    |                                       |                                       \n2023-03-12T19:43:19.914362Z   |                                          node1 cannot find donor                 |                                       \n2023-03-12T19:43:20.914957Z   |                                          |                                       (repeated x97)node1 cannot find donor   \n2023-03-12T19:43:20.915143Z   (repeated x97)node1 cannot find donor      |                                       |                                       \n2023-03-12T19:43:20.915262Z   |                                          (repeated x97)node1 cannot find donor   |                                       \n2023-03-12T19:44:58.999603Z   |                                          |                                       node1 cannot find donor                 \n2023-03-12T19:44:58.999791Z   node1 cannot find donor                    |                                       |                                       \n2023-03-12T19:44:58.999891Z   |                                          node1 cannot find donor                 |                                       \n2023-03-12T19:44:59.817822Z   timeout from donor in gtid/keyring stage   |                                       |                                       \n```\n\n----------------------------------------\n\nTITLE: Using the 'sanitize' Command with pt-secure-collect (Shell)\nDESCRIPTION: This snippet demonstrates the syntax for the `sanitize` command of `pt-secure-collect`. This command processes an input (from stdin or a file specified by `--input-file`) to replace SQL queries with their fingerprints and obfuscate hostnames, writing the result to stdout or a file specified by `--output-file`. Optional flags (`[flags]`) like `--no-sanitize-hostnames` or `--no-sanitize-queries` can control the sanitization process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-secure-collect.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npt-secure-collect sanitize [flags]\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Changes\nDESCRIPTION: HTML structural elements referenced across multiple versions including SMarked tags, Browser Styles, and Index related elements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<SMarked>\n<Browser Styles>\n<Page Structure>\n<LURL>\n<LEMail>\n<ISection>\n<IHeading>\n<Index Styles>\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statement in Network Packet Capture\nDESCRIPTION: A MySQL database insert operation as seen in a network packet capture. The statement inserts a news article about Federal Reserve policy regarding Treasury bond purchases into a table named 't'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump019.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t values ('NEW YORK \\(Reuters\\) - U.S. government bonds fell while stocks extended gains on Wednesday after the Federal Reserve said in a statement will gradually slow its pace of buying government debt as the economy was levelling out. [...]\n```\n\n----------------------------------------\n\nTITLE: MySQL General Log Entry with Database Selection and Simple Query\nDESCRIPTION: A MySQL general log entry showing a user connection, database initialization, a simple SELECT query, and disconnection. The log includes timestamp, connection ID, and database selection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n061226 15:42:36\t     11 Connect     root@localhost on  \n\t\t                 11 Init DB     my_webstats\n\t\t                 11 Query       SELECT DISTINCT col FROM tbl WHERE foo=20061219\n061226 16:44:48\t     11 Quit       \n```\n\n----------------------------------------\n\nTITLE: Metrics Data in CSV Format\nDESCRIPTION: Server performance metrics data organized in CSV format with columns for timestamp, metric ID, value, interval, and other metadata fields. Data appears to be a time series of various server performance metrics collected at 300 second intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_5\n\nLANGUAGE: CSV\nCODE:\n```\n99,7256314,1236699916),(8374,1236698100,1,0.0,300,299,7256314,1236699916)...\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Packet\nDESCRIPTION: Server response packet containing query results sent from MySQL server back to client\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump014.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n4508 0040 f317 4000 4006 9403 0a37 c80f\n0a36 d4ab 0cea c1ff 3927 f142 3a17 37a0\n8018 ffff f1a2 0000 0101 080a 40e0 fd21\n22f5 83d3 0100 0001 0000 0002 0000 0188\n```\n\n----------------------------------------\n\nTITLE: Listing tmpfs Mount Configurations\nDESCRIPTION: Shows system tmpfs mount points with their size allocations, permissions, and mount options. Each entry specifies mount options including security labels, user/group IDs, and access modes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntmpfs                       19G   0% tmpfs    rw,nosuid,nodev,relatime,seclabel,size=19801800k,mode=700,uid=955600026,gid=10000                                                                                                                                                                                                                                                                                                                              /run/user/955600334\ntmpfs                       19G   0% tmpfs    rw,nosuid,nodev,relatime,seclabel,size=19801800k,mode=700,uid=955600330,gid=10000                                                                                                                                                                                                                                                                                                                              /run/user/955600334\n```\n\n----------------------------------------\n\nTITLE: Controlling Child Table Checks in pt-table-sync (Bash)\nDESCRIPTION: Introduces the `--[no]check-child-tables` option (defaulting to `--check-child-tables`) for `pt-table-sync` (bug 1223458). This prevents unintended data loss in child tables caused by foreign key constraints with `ON DELETE` or `ON UPDATE` actions during synchronization. When potential issues are detected with the default setting, the tool now warns and skips the table unless `--nocheck-child-tables` is explicitly used.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Default behavior (checks enabled)\npt-table-sync --check-child-tables h=host1,D=db,t=tbl \\\n  h=host2 --execute\n\n# Disable the check (use with caution)\npt-table-sync --nocheck-child-tables h=host1,D=db,t=tbl \\\n  h=host2 --execute\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Performance Metrics in Linux\nDESCRIPTION: This snippet shows the output of a disk I/O performance monitoring tool, presenting various metrics for the xvdb1 device over 29 time intervals. It includes read and write statistics, throughput, response times, and utilization percentages.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_bug-1035311.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nEnter a disk/device pattern:   #ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n  1.0 xvdb1    258.9    42.4    10.7     0%    2.3     9.1   152.8    36.6     5.5    27%    2.7    12.9  50%     37   411.6    9.6   1.1\n  2.0 xvdb1    177.3    40.3     7.0     0%    2.1    12.0   409.2    21.5     8.6    12%    3.6     7.7  69%     44   586.4   13.5   1.1\n  3.0 xvdb1    135.0    39.9     5.3     0%    5.8    42.9   515.9    33.7    17.0    25%   18.9    27.6  97%     29   650.8   22.9   1.2\n  4.0 xvdb1    272.5    42.0    11.2     0%    3.1    11.5   520.3    27.5    14.0    18%    7.4    11.7  78%     30   792.8   10.4   0.9\n  5.0 xvdb1    207.4    40.6     8.2     0%    2.6    12.6   523.1    22.3    11.4    15%    7.1    11.5  86%     28   730.5   10.6   1.0\n  6.0 xvdb1    206.9    39.9     8.1     0%    3.3    16.2   541.7    23.4    12.4    16%    7.1    11.0  92%     25   748.6   11.5   1.1\n  7.0 xvdb1    218.5    38.1     8.1     0%    4.2    19.0   239.6    26.8     6.3    11%    4.7    17.6  93%     22   458.1   15.3   1.9\n  8.0 xvdb1     92.0    38.3     3.4     1%    5.3    56.6   327.9    33.6    10.8    17%   10.8    27.5  94%     37   419.9   29.5   1.9\n  9.0 xvdb1    186.9    37.6     6.9     0%    5.7    30.6   599.8    29.1    17.0    21%   20.2    26.5  99%     14   786.8   24.7   1.0\n 10.0 xvdb1    273.4    37.4    10.0     0%    3.3    11.9   416.3    28.0    11.4    13%    4.1     8.6  92%     55   689.6    8.3   1.2\n 11.0 xvdb1    114.3    36.7     4.1     0%    5.8    50.7   229.6    25.9     5.8    11%    4.7    18.2  92%      7   343.8   23.6   2.5\n 12.0 xvdb1     72.1    39.0     2.7     0%    5.6    77.8   101.7    34.6     3.4     0%    3.1    30.8 100%     31   173.8   40.2   5.7\n 13.0 xvdb1     94.3    41.4     3.8     0%    5.4    57.7   377.4    32.0    11.8    28%   12.4    23.5  97%    106   471.7   24.8   1.6\n 14.0 xvdb1    272.7    40.4    10.8     1%    4.1    14.9   658.6    26.8    17.3    19%   15.6    19.3  88%      2   931.3   15.5   0.8\n 15.0 xvdb1    173.2    39.9     6.8     0%    2.0    11.4   215.8    13.3     2.8     9%    1.3     5.5  76%      7   389.0   10.3   1.9\n 16.0 xvdb1    230.5    41.8     9.4     0%    5.9    25.7   277.0    19.9     5.4     0%    4.3    15.5  88%      1   507.5   14.7   1.7\n 17.0 xvdb1    214.0    42.1     8.8     0%    1.0     4.8   481.1     7.1     3.3     3%    1.4     2.8  54%      7   695.1    2.6   0.8\n 18.0 xvdb1    103.1    42.4     4.3     0%    4.6    44.8   122.2     9.0     1.1     0%    2.4    19.5  85%      1   225.3   27.1   3.8\n 19.0 xvdb1    119.5    42.7     5.0     0%    4.8    40.3   171.2    12.2     2.0    12%    2.3    11.8  86%      0   290.7   19.9   2.7\n 20.0 xvdb1    166.1    42.0     6.8     0%    4.9    29.2   102.1    11.4     1.1     0%    1.1    10.3  86%      7   268.2   18.5   3.2\n 21.0 xvdb1    250.0    42.3    10.3     0%    1.8     7.3   379.6    10.1     3.8     8%    1.4     3.3  44%      0   629.6    4.1   0.7\n 22.0 xvdb1    234.7    40.5     9.3     0%    2.5    10.7   455.4     9.2     4.1     4%    2.1     4.3  69%      0   690.1    5.5   1.0\n 23.0 xvdb1    217.1    42.4     9.0     0%    1.8     8.4   218.1    14.0     3.0    11%    1.0     4.0  46%      0   435.1    5.1   1.0\n 24.0 xvdb1     74.2    41.9     3.0     0%    3.6    49.1   164.4     5.7     0.9     0%    6.0    36.6  77%     35   238.6   68.9   3.2\n 25.0 xvdb1    114.0    39.9     4.4     0%    6.0    52.5   243.0    23.7     5.6     5%   17.2    67.4  93%     11   357.0   32.4   2.5\n 26.0 xvdb1    225.5    42.3     9.3     0%    2.1     9.3   329.8     8.5     2.7     6%    1.3     3.6  73%      8   555.3    6.5   1.3\n 27.0 xvdb1    227.8    42.7     9.5     0%    3.8    16.6   161.9    14.5     2.3     3%    1.1     6.5  53%      0   389.7    7.6   1.3\n 28.0 xvdb1    157.6    42.5     6.5     0%    2.2    13.9   125.7    12.7     1.6     1%    1.0     8.2  61%      7   283.3   10.7   2.1\n 29.0 xvdb1    229.3    42.4     9.5     0%    4.2    18.3   284.4    15.9     4.4    14%    4.6    13.9  91%      0   513.7   13.1   1.6\n```\n\n----------------------------------------\n\nTITLE: Selecting MySQL System Database in SQL\nDESCRIPTION: Sets the current default database to `mysql`. Subsequent SQL statements in the session will operate within this database unless explicitly overridden.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUSE `mysql`;\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Memory Dump of Financial News Text\nDESCRIPTION: A raw memory dump in hexadecimal format showing both memory addresses and corresponding ASCII data. The content is a Reuters news article discussing Federal Reserve policy decisions regarding Treasury purchases and economic recovery.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump019.txt#2025-04-22_snippet_2\n\nLANGUAGE: hexdump\nCODE:\n```\n0x31e0:  2e20 2256 616c 6964 6174 696e 6720 7768\n0x31f0:  6174 2074 6865 2065 636f 6e6f 6d69 6320\n0x3200:  6461 7461 2061 7320 6c61 7465 2068 6173\n0x3210:  2073 686f 776e 2c20 7468 6520 4665 6420\n0x3220:  6573 7365 6e74 6961 6c6c 7920 7369 676e\n0x3230:  616c 6c65 6420 746f 2074 6865 206d 6172\n0x3240:  6b65 7420 7468 6174 2074 6869 7320 7265\n0x3250:  6365 7373 696f 6e20 6973 206f 7665 7220\n0x3260:  6279 2063 6861 6e67 696e 6720 6974 7320\n0x3270:  746f 6e65 2066 726f 6d20 636f 6e74 7261\n0x3280:  6374 696f 6e20 746f 206c 6576 656c 6c69\n0x3290:  6e67 206f 7574 2c22 2073 6169 6420 4275\n0x32a0:  7274 2057 6869 7465 2c20 4368 6965 6620\n0x32b0:  496e 7665 7374 6d65 6e74 204f 6666 6963\n0x32c0:  6572 2061 7420 4c50 4c20 4669 6e61 6e63\n0x32d0:  6961 6c20 696e 2042 6f73 746f 6e2e 204e\n0x32e0:  4557 2059 4f52 4b20 5c28 5265 7574 6572\n0x32f0:  735c 2920 2d20 552e 532e 2067 6f76 6572\n0x3300:  6e6d 656e 7420 626f 6e64 7320 6665 6c6c\n0x3310:  2077 6869 6c65 2073 746f 636b 7320 6578\n0x3320:  7465 6e64 6564 2067 6169 6e73 206f 6e20\n0x3330:  5765 646e 6573 6461 7920 6166 7465 7220\n0x3340:  7468 6520 4665 6465 7261 6c20 5265 7365\n0x3350:  7276 6520 7361 6964 2069 6e20 6120 7374\n0x3360:  6174 656d 656e 7420 7769 6c6c 2067 7261\n0x3370:  6475 616c 6c79 2073 6c6f 7720 6974 7320\n0x3380:  7061 6365 206f 6620 6275 7969 6e67 2067\n0x3390:  6f76 6572 6e6d 656e 7420 6465 6274 2061\n0x33a0:  7320 7468 6520 6563 6f6e 6f6d 7920 7761\n0x33b0:  7320 6c65 7665 6c6c 696e 6720 6f75 742e\n0x33c0:  2054 6865 2046 6564 2066 696e 6973 6865\n0x33d0:  6420 6120 7477 6f2d 6461 7920 706f 6c69\n0x33e0:  6379 206d 6565 7469 6e67 206f 6e20 5765\n0x33f0:  646e 6573 6461 792c 2061 6e64 206c 6566\n0x3400:  7420 6265 6e63 686d 6172 6b20 696e 7465\n0x3410:  7265 7374 2072 6174 6573 206e 6561 7220\n0x3420:  7a65 726f 2e20 5468 6520 4665 6420 616c\n0x3430:  736f 2065 7874 656e 6465 6420 7468 6520\n0x3440:  6475 7261 7469 6f6e 2062 7574 206e 6f74\n0x3450:  2074 6865 2073 697a 6520 6f66 2069 7473\n0x3460:  2070 726f 6772 616d 2074 6f20 6275 7920\n0x3470:  552e 532e 2024 3330 3020 626c 6e20 2831\n0x3480:  3832 2062 696c 6c69 6f6e 2070 6f75 6e64\n0x3490:  7329 206f 6620 552e 532e 2054 7265 6173\n0x34a0:  7572 6965 732e 2022 5468 6520 6661 6374\n0x34b0:  2074 6861 7420 7468 6579 2061 7265 2065\n0x34c0:  7874 656e 6469 6e67 2074 6865 2074 696d\n0x34d0:  6574 6162 6c65 2c20 6275 7420 6e6f 7420\n0x34e0:  7468 6520 616d 6f75 6e74 206f 6620 5472\n0x34f0:  6561 7375 7279 2070 7572 6368 6173 6573\n0x3500:  2073 686f 7773 2074 6861 7420 7468 6579\n0x3510:  2061 7265 2073 6565 696e 6720 736f 6d65\n0x3520:  206f 6620 7468 6520 7369 676e 7320 6f66\n0x3530:  2074 6865 2072 6563 6f76 6572 7920 7468\n0x3540:  6174 2074 6865 795c 2772 6520 7472 7969\n0x3550:  6e67 2074 6f20 6372 6561 7465 2c20 616e\n0x3560:  6420 7761 6e74 2074 6f20 6c65 7420 7468\n0x3570:  6520 6561 726c 6965 7220 7075 7263 6861\n0x3580:  7365 7320 7365 6173 6f6e 2c22 2073 6169\n0x3590:  6420 4461 6e69 656c 2050 656e 726f 642c\n0x35a0:  2073 656e 696f 7220 696e 6475 7374 7279\n0x35b0:  2061 6e61 6c79 7374 2061 7420 4361 6c69\n0x35c0:  666f 726e 6961 2043 7265 6469 7420 556e\n0x35d0:  696f 6e20 4c65 6167 7565 2069 6e20 4f6e\n0x35e0:  7461 7269 6f2c 2043 616c 6966 6f72 6e69\n0x35f0:  612e 2054 6865 2062 656e 6368 6d61 726b\n0x3600:  2031 302d 7965 6172 2055 2e53 2e20 5472\n0x3610:  6561 7375 7279 206e 6f74 6520 6665 6c6c\n0x3620:  2061 6674 6572 2074 6865 2073 7461 7465\n0x3630:  6d65 6e74 2061 7320 626f 6e64 2064 6561\n0x3640:  6c65 7273 2077 6572 6520 6469 7361 7070\n0x3650:  6f69 6e74 6564 2074 6865 2046 6564 2064\n0x3660:  6964 206e 6f74 2069 6e63 7265 6173 6520\n0x3670:  7468 6520 616d 6f75 6e74 206f 6620 6465\n0x3680:  6274 2069 7420 706c 616e 7320 746f 2062\n0x3690:  7579 2e20 5468 6520 6265 6e63 686d 6172\n0x36a0:  6b20 656e 6465 6420 646f 776e 2031 312f\n0x36b0:  3332 2c20 7769 7468 2074 6865 2079 6965\n0x36c0:  6c64 2061 7420 332e 3732 2070 6572 6365\n0x36d0:  6e74 2e20 5468 6520 4665 6420 6c61 756e\n0x36e0:  6368 6564 2074 6865 2064 6562 7420 6275\n0x36f0:  7969 6e67 2070 726f 6772 616d 2069 6e20\n0x3700:  4d61 7263 6820 7768 656e 2069 7420 6861\n0x3710:  6420 616c 7265 6164 7920 6368 6f70 7065\n0x3720:  6420 696e 7465 7265 7374 2072 6174 6573\n0x3730:  2074 6f20 6e65 6172 207a 6572 6f20 6275\n0x3740:  7420 7761 6e74 6564 2074 6f20 6f70 656e\n0x3750:  2074 6865 206d 6f6e 6579 2074 6170 7320\n0x3760:  6576 656e 2077 6964 6572 2074 6f20 7375\n0x3770:  7070 6f72 7420 7468 6520 7374 7275 6767\n0x3780:  6c69 6e67 2065 636f 6e6f 6d79 2e20 5468\n0x3790:  6520 4665 645c 2773 2054 7265 6173 7572\n0x37a0:  7920 7075 7263 6861 7365 7320 7765 7265\n0x37b0:  2070 7265 7669 6f75 736c 7920 7363 6865\n0x37c0:  6475 6c65 6420 746f 2065 7870 6972 6520\n0x37d0:  696e 2053 6570 7465 6d62 6572 2e20 552e\n0x37e0:  532e 2073 746f 636b 7320 636f 6e74 696e\n0x37f0:  7565 6420 746f 2072 6973 6520 6166 7465\n0x3800:  7220 7468 6520 4665 6420 7361 6964 2074\n0x3810:  6865 2065 636f 6e6f 6d79 2077 6173 2073\n0x3820:  686f 7769 6e67 2073 6967 6e73 206f 6620\n0x3830:  6c65 7665 6c6c 696e 6720 6f75 7420 6166\n0x3840:  7465 7220 3230 206d 6f6e 7468 7320 6f66\n0x3850:  2072 6563 6573 7369 6f6e 2e20 5468 6520\n0x3860:  446f 7720 4a6f 6e65 7320 696e 6475 7374\n0x3870:  7269 616c 2061 7665 7261 6765 203c 2e44\n0x3880:  4a49 3e20 636c 6f73 6564 2075 7020 312e\n0x3890:  3330 2070 6572 6365 6e74 2c20 5468 6520\n0x38a0:  5374 616e 6461 7264 2026 2050 6f6f 725c\n0x38b0:  2773 2035 3030 2049 6e64 6578 203c 2e53\n0x38c0:  5058 3e20 656e 6465 6420 7570 2031 2e31\n0x38d0:  3520 7065 7263 656e 7420 616e 6420 5468\n0x38e0:  6520 4e61 7364 6171 2043 6f6d 706f 7369\n0x38f0:  7465 2049 6e64 6578 203c 2e49 5849 433e\n0x3900:  2066 696e 6973 6865 6420 7570 2031 2e34\n0x3910:  3720 7065 7263 656e 742e 2022 5661 6c69\n0x3920:  6461 7469 6e67 2077 6861 7420 7468 6520\n0x3930:  6563 6f6e 6f6d 6963 2064 6174 6120 6173\n0x3940:  206c 6174 6520 6861 7320 7368 6f77 6e2c\n0x3950:  2074 6865 2046 6564 2065 7373 656e 7469\n0x3960:  616c 6c79 2073 6967 6e61 6c6c 6564 2074\n0x3970:  6f20 7468 6520 6d61 726b 6574 2074 6861\n0x3980:  7420 7468 6973 2072 6563 6573 7369 6f6e\n0x3990:  2069 7320 6f76 6572 2062 7920 6368 616e\n0x39a0:  6769 6e67 2069 7473 2074 6f6e 6520 6672\n0x39b0:  6f6d 2063 6f6e 7472 6163 7469 6f6e 2074\n0x39c0:  6f20 6c65 7665 6c6c 696e 6720 6f75 742c\n0x39d0:  2220 7361 6964 2042 7572 7420 5768 6974\n0x39e0:  652c 2043 6869 6566 2049 6e76 6573 746d\n0x39f0:  656e 7420 4f66 6669 6365 7220 6174 204c\n0x3a00:  504c 2046 696e 616e 6369 616c 2069 6e20\n0x3a10:  426f 7374 6f6e 2e20 4e45 5720 594f 524b\n0x3a20:  205c 2852 6575 7465 7273 5c29 202d 2055\n0x3a30:  2e53 2e20 676f 7665 726e 6d65 6e74 2062\n0x3a40:  6f6e 6473 2066 656c 6c20 7768 696c 6520\n0x3a50:  7374 6f63 6b73 2065 7874 656e 6465 6420\n0x3a60:  6761 696e 7320 6f6e 2057 6564 6e65 7364\n0x3a70:  6179 2061 6674 6572 2074 6865 2046 6564\n0x3a80:  6572 616c 2052 6573 6572 7665 2073 6169\n0x3a90:  6420 696e 2061 2073 7461 7465 6d65 6e74\n0x3aa0:  2077 696c 6c20 6772 6164 7561 6c6c 7920\n0x3ab0:  736c 6f77 2069 7473 2070 6163 6520 6f66\n0x3ac0:  2062 7579 696e 6720 676f 7665 726e 6d65\n0x3ad0:  6e74 2064 6562 7420 6173 2074 6865 2065\n0x3ae0:  636f 6e6f 6d79 2077 6173 206c 6576 656c\n0x3af0:  6c69 6e67 206f 7574 2e20 5468 6520 4665\n0x3b00:  6420 6669 6e69 7368 6564 2061 2074 776f\n0x3b10:  2d64 6179 2070 6f6c 6963 7920 6d65 6574\n0x3b20:  696e 6720 6f6e 2057 6564 6e65 7364 6179\n0x3b30:  2c20 616e 6420 6c65 6674 2062 656e 6368\n0x3b40:  6d61 726b 2069 6e74 6572 6573 7420 7261\n0x3b50:  7465 7320 6e65 6172 207a 6572 6f2e 2054\n0x3b60:  6865 2046 6564 2061 6c73 6f20 6578 7465\n0x3b70:  6e64 6564 2074 6865 2064 7572 6174 696f\n0x3b80:  6e20 6275 7420 6e6f 7420 7468 6520 7369\n0x3b90:  7a65 206f 6620 6974 7320 7072 6f67 7261\n0x3ba0:  6d20 746f 2062 7579 2055 2e53 2e20 2433\n0x3bb0:  3030 2062 6c6e 2028 3138 3220 6269 6c6c\n0x3bc0:  696f 6e20 706f 756e 6473 2920 6f66 2055\n0x3bd0:  2e53 2e20 5472 6561 7375 7269 6573 2e20\n0x3be0:  2254 6865 2066 6163 7420 7468 6174 2074\n0x3bf0:  6865 7920 6172 6520 6578 7465 6e64 696e\n0x3c00:  6720 7468 6520 7469 6d65 7461 626c 652c\n0x3c10:  2062 7574 206e 6f74 2074 6865 2061 6d6f\n0x3c20:  756e 7420 6f66 2054 7265 6173 7572 7920\n0x3c30:  7075 7263 6861 7365 7320 7368 6f77 7320\n0x3c40:  7468 6174 2074 6865 7920 6172 6520 7365\n0x3c50:  6569 6e67 2073 6f6d 6520 6f66 2074 6865\n0x3c60:  2073 6967 6e73 206f 6620 7468 6520 7265\n0x3c70:  636f 7665 7279 2074 6861 7420 7468 6579\n0x3c80:  5c27 7265 2074 7279 696e 6720 746f 2063\n0x3c90:  7265 6174 652c 2061 6e64 2077 616e 7420\n0x3ca0:  746f 206c 6574 2074 6865 2065 6172 6c69\n0x3cb0:  6572 2070 7572 6368 6173 6573 2073 6561\n0x3cc0:  736f 6e2c 2220 7361 6964 2044 616e 6965\n0x3cd0:  6c20 5065 6e72 6f64 2c20 7365 6e69 6f72\n0x3ce0:  2069 6e64 7573 7472 7920 616e 616c 7973\n0x3cf0:  7420 6174 2043 616c 6966 6f72 6e69 6120\n0x3d00:  4372 6564 6974 2055 6e69 6f6e 204c 6561\n0x3d10:  6775 6520 696e 204f 6e74 6172 696f 2c20\n0x3d20:  4361 6c69 666f 726e 6961 2e20 5468 6520\n0x3d30:  6265 6e63 686d 6172 6b20 3130 2d79 6561\n0x3d40:  7220 552e 532e 2054 7265 6173 7572 7920\n0x3d50:  6e6f 7465 2066 656c 6c20 6166 7465 7220\n0x3d60:  7468 6520 7374 6174 656d 656e 7420 6173\n0x3d70:  2062 6f6e 6420 6465 616c 6572 7320 7765\n0x3d80:  7265 2064 6973 6170 706f 696e 7465 6420\n0x3d90:  7468 6520 4665 6420 6469 6420 6e6f 7420\n0x3da0:  696e 6372 6561 7365 2074 6865 2061 6d6f\n0x3db0:  756e 7420 6f66 2064 6562 7420 6974 2070\n0x3dc0:  6c61 6e73 2074 6f20 6275 792e 2054 6865\n0x3dd0:  2062 656e 6368 6d61 726b 2065 6e64 6564\n0x3de0:  2064 6f77 6e20 3131 2f33 322c 2077 6974\n0x3df0:  6820 7468 6520 7969 656c 6420 6174 2033\n0x3e00:  2e37 3220 7065 7263 656e 742e 2054 6865\n0x3e10:  2046 6564 206c 6175 6e63 6865 6420 7468\n0x3e20:  6520 6465 6274 2062 7579 696e 6720 7072\n0x3e30:  6f67 7261 6d20 696e 204d 6172 6368 2077\n0x3e40:  6865 6e20 6974 2068 6164 2061 6c72 6561\n0x3e50:  6479 2063 686f 7070 6564 2069 6e74 6572\n```\n\n----------------------------------------\n\nTITLE: Querying Zero Table in MySQL\nDESCRIPTION: SELECT query on 'zero' table with query time of 10 seconds. Includes parameter binding for id field with no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow049.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT zero FROM zero WHERE id=?;\n```\n\n----------------------------------------\n\nTITLE: NDMarkup Special Character Entities\nDESCRIPTION: The supported HTML-style entities for special characters in NDMarkup, including ampersand, quotes, and angle brackets.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/NDMarkup.txt#2025-04-22_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n&amp;    - The ampersand &.\n&quot;    - The double quote \".\n&lt;        - The less than sign <.\n&gt;       - The greater than sign >.\n```\n\n----------------------------------------\n\nTITLE: Executing Sequential SELECT Queries in MySQL\nDESCRIPTION: A pattern of SELECT queries that fetch sequential numeric values from a table named 'foo'. Each query runs in 0.000899 seconds with no lock time and examines 0 rows while returning 0 rows. The queries are executed by the same user from IP 1.2.3.4 across different thread IDs in the 'db' schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1975 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1976 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1977 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1978 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1979 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1980 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1981 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1982 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1983 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1984 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1985 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1986 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1987 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1988 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1989 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1990 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1991 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1992 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1993 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1994 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1995 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1996 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1997 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1998 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1999 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 2000 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 2001 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Displaying Total Index Count in Markdown\nDESCRIPTION: This snippet shows a formatted output of the total number of indexes in a database. It's likely part of a larger report generated by a Percona Toolkit database analysis tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/key-types-fk.txt#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ########################################################################\n# Summary of indexes                                                      \n# ########################################################################\n\n# Total Indexes  63\n```\n\n----------------------------------------\n\nTITLE: Linux Tmpfs Mount Entries\nDESCRIPTION: Configuration entries for tmpfs mounts showing size allocation (19G), mount options (nosuid, nodev, relatime), security labels, and user/group permissions. Each entry represents a temporary filesystem mounted under /run/user/ for different user IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntmpfs                       19G   0% tmpfs    rw,nosuid,nodev,relatime,seclabel,size=19801800k,mode=700,uid=10014,gid=10000                                                                                                                                                                                                                                                                                                                                  /run/user/955600026\n```\n\n----------------------------------------\n\nTITLE: Creating Inventory Table in SQL\nDESCRIPTION: Defines the inventory table schema tracking individual copies of films at different stores. Contains foreign keys to film and store tables.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `inventory` (\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `film_id` smallint(5) unsigned NOT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`inventory_id`),\n  KEY `idx_fk_film_id` (`film_id`),\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Data Records - SQL Insert Values\nDESCRIPTION: Database records containing performance metrics including timestamps, measurement IDs, and various numerical indicators. Data appears to be formatted as SQL insert values with measurements taken at 300 second intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_explicit_cols_values.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n,7256314,1236699917),(8424,1236699000,8,0.0,300,299,7256314,1236699917),(8424,1236699300,9,0.0,300,301,7256314,1236699917)...\n```\n\n----------------------------------------\n\nTITLE: Creating ndb_binlog_index Table in MySQL\nDESCRIPTION: SQL statement for creating the ndb_binlog_index table which tracks NDB Cluster replication binary log events. It includes columns for position, file, epoch, and operation counters for inserts, updates, deletes, and schema operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `ndb_binlog_index` (\n  `Position` bigint(20) unsigned NOT NULL,\n  `File` varchar(255) NOT NULL,\n  `epoch` bigint(20) unsigned NOT NULL,\n  `inserts` bigint(20) unsigned NOT NULL,\n  `updates` bigint(20) unsigned NOT NULL,\n  `deletes` bigint(20) unsigned NOT NULL,\n  `schemaops` bigint(20) unsigned NOT NULL,\n  PRIMARY KEY (`epoch`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n```\n\n----------------------------------------\n\nTITLE: Column Rename Example\nDESCRIPTION: Example of column renames in the host_summary_by_stages and user_summary_by_stages views for consistency.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/NEWS.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nwait_sum -> total_latency\nwait_avg -> avg_latency\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Film Table\nDESCRIPTION: An INSERT statement adding a record to the film table in the sakila database. Contains values for film ID, title, description, release year, and other film metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/binlog011.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `film` VALUES (1,'ACADEMY DINOSAUR','A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies',2006,1,NULL,6,'0.99',86,'20.99','PG','Deleted Scenes,Behind the Scenes','2006-02-15 12:03:42') /*... omitted ...*/\n```\n\n----------------------------------------\n\nTITLE: Defining the --replace Command-Line Option (Plaintext)\nDESCRIPTION: Defines the `--replace` command-line option with its short form `-r`. Specifies that using this option causes the program to use `REPLACE` instead of `INSERT` statements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--replace -r  Use REPLACE instead of INSERT statements\n```\n\n----------------------------------------\n\nTITLE: MySQL Client ACK Packet\nDESCRIPTION: Final client acknowledgment packet completing the query transaction\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump014.txt#2025-04-22_snippet_3\n\nLANGUAGE: hex\nCODE:\n```\n4508 0034 6f32 4000 3e06 1c62 0a36 d4ab\n0a37 c80f c1ff 0cea 3a17 37a0 3927 f3bb\n8010 ffff 7346 0000 0101 080a 22f5 83d3\n40e0 fd21 52c1 f242\n```\n\n----------------------------------------\n\nTITLE: Using the 'encrypt' Command with pt-secure-collect (Shell)\nDESCRIPTION: This snippet shows the usage of the `encrypt` command within `pt-secure-collect`. This command encrypts a specified input file (`<input file>`). It accepts optional flags (`[flags]`), like `--outfile` for defining the output file path. The encryption password will be interactively requested from the terminal during execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-secure-collect.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npt-secure-collect encrypt [flags] <input file>\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Global Variables Output\nDESCRIPTION: This text block shows the result of executing `SHOW GLOBAL VARIABLES;` on a Percona MySQL Server 5.1.43. It lists numerous configuration parameters governing server behavior, including storage engine settings (InnoDB, MyISAM), logging options, replication parameters, memory allocations (buffer sizes, caches), network timeouts, character sets, and security settings. This output is crucial for understanding and troubleshooting the database server's configuration.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/show-variables/vars-baron-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nVariable_name\\tValue\\nauto_increment_increment\\t4\\nauto_increment_offset\\t2\\nautocommit\\tON\\nautomatic_sp_privileges\\tON\\nback_log\\t50\\nbasedir\\t/usr/\\nbig_tables\\tOFF\\nbinlog_cache_size\\t32768\\nbinlog_format\\tMIXED\\nbulk_insert_buffer_size\\t8388608\\ncharacter_set_client\\tlatin1\\ncharacter_set_connection\\tlatin1\\ncharacter_set_database\\tlatin1\\ncharacter_set_filesystem\\tbinary\\ncharacter_set_results\\tlatin1\\ncharacter_set_server\\tlatin1\\ncharacter_set_system\\tutf8\\ncharacter_sets_dir\\t/usr/share/mysql/charsets/\\ncollation_connection\\tlatin1_swedish_ci\\ncollation_database\\tlatin1_swedish_ci\\ncollation_server\\tlatin1_swedish_ci\\ncompletion_type\\t0\\nconcurrent_insert\\t2\\nconnect_timeout\\t10\\ndatadir\\t/mnt/data-store/mysql/data/\\ndate_format\\t%Y-%m-%d\\ndatetime_format\\t%Y-%m-%d %H:%i:%s\\ndefault_week_format\\t0\\ndelay_key_write\\tON\\ndelayed_insert_limit\\t100\\ndelayed_insert_timeout\\t300\\ndelayed_queue_size\\t1000\\ndiv_precision_increment\\t4\\nengine_condition_pushdown\\tON\\nerror_count\\t0\\nevent_scheduler\\tOFF\\nexpire_logs_days\\t3\\nflush\\tOFF\\nflush_time\\t0\\nforeign_key_checks\\tON\\nft_boolean_syntax\\t+ -><()~*:\\\"\\\"&|\\nft_max_word_len\\t84\\nft_min_word_len\\t4\\nft_query_expansion_limit\\t20\\nft_stopword_file\\t(built-in)\\ngeneral_log\\tOFF\\ngeneral_log_file\\t/mnt/mysql/general.log\\ngroup_concat_max_len\\t1024\\nhave_community_features\\tYES\\nhave_compress\\tYES\\nhave_crypt\\tYES\\nhave_csv\\tYES\\nhave_dynamic_loading\\tYES\\nhave_geometry\\tYES\\nhave_innodb\\tYES\\nhave_ndbcluster\\tNO\\nhave_openssl\\tDISABLED\\nhave_partitioning\\tYES\\nhave_query_cache\\tYES\\nhave_rtree_keys\\tYES\\nhave_ssl\\tDISABLED\\nhave_symlink\\tYES\\nhostname\\tdb1.production.company.com\\nidentity\\t0\\nignore_builtin_innodb\\tOFF\\ninit_connect\\t\\ninit_file\\t\\ninit_slave\\t\\ninnodb_adaptive_checkpoint\\testimate\\ninnodb_adaptive_flushing\\tOFF\\ninnodb_adaptive_hash_index\\tOFF\\ninnodb_additional_mem_pool_size\\t524288000\\ninnodb_autoextend_increment\\t8\\ninnodb_autoinc_lock_mode\\t0\\ninnodb_buffer_pool_size\\t46170898432\\ninnodb_change_buffering\\tinserts\\ninnodb_checkpoint_age_target\\t0\\ninnodb_checksums\\tON\\ninnodb_commit_concurrency\\t0\\ninnodb_concurrency_tickets\\t500\\ninnodb_data_file_path\\tibdata1:10M:autoextend\\ninnodb_data_home_dir\\t/mnt/data-store/mysql/data\\ninnodb_dict_size_limit\\t0\\ninnodb_doublewrite\\tON\\ninnodb_enable_unsafe_group_commit\\t0\\ninnodb_expand_import\\t0\\ninnodb_extra_rsegments\\t0\\ninnodb_extra_undoslots\\tOFF\\ninnodb_fast_recovery\\tON\\ninnodb_fast_shutdown\\t1\\ninnodb_file_format\\tAntelope\\ninnodb_file_format_check\\tBarracuda\\ninnodb_file_per_table\\tON\\ninnodb_flush_log_at_trx_commit\\t2\\ninnodb_flush_method\\t\\ninnodb_flush_neighbor_pages\\t1\\ninnodb_force_recovery\\t0\\ninnodb_ibuf_accel_rate\\t100\\ninnodb_ibuf_active_contract\\t1\\ninnodb_ibuf_max_size\\t23085432832\\ninnodb_io_capacity\\t200\\ninnodb_lock_wait_timeout\\t50\\ninnodb_locks_unsafe_for_binlog\\tOFF\\ninnodb_log_buffer_size\\t10485760\\ninnodb_log_file_size\\t2097152000\\ninnodb_log_files_in_group\\t2\\ninnodb_log_group_home_dir\\t/mnt/data-store/mysql/data\\ninnodb_max_dirty_pages_pct\\t75\\ninnodb_max_purge_lag\\t0\\ninnodb_mirrored_log_groups\\t1\\ninnodb_old_blocks_pct\\t37\\ninnodb_old_blocks_time\\t0\\ninnodb_open_files\\t300\\ninnodb_overwrite_relay_log_info\\tOFF\\ninnodb_read_ahead\\tlinear\\ninnodb_read_ahead_threshold\\t56\\ninnodb_read_io_threads\\t4\\ninnodb_recovery_stats\\tOFF\\ninnodb_relax_table_creation\\t0\\ninnodb_replication_delay\\t0\\ninnodb_rollback_on_timeout\\tOFF\\ninnodb_show_locks_held\\t10\\ninnodb_show_verbose_locks\\t0\\ninnodb_spin_wait_delay\\t6\\ninnodb_stats_auto_update\\t1\\ninnodb_stats_method\\tnulls_equal\\ninnodb_stats_on_metadata\\tON\\ninnodb_stats_sample_pages\\t8\\ninnodb_stats_update_need_lock\\t1\\ninnodb_strict_mode\\tOFF\\ninnodb_support_xa\\tOFF\\ninnodb_sync_spin_loops\\t30\\ninnodb_table_locks\\tON\\ninnodb_thread_concurrency\\t16\\ninnodb_thread_concurrency_timer_based\\tOFF\\ninnodb_thread_sleep_delay\\t10000\\ninnodb_use_purge_thread\\t1\\ninnodb_use_sys_malloc\\tON\\ninnodb_version\\t1.0.6-unknown\\ninnodb_write_io_threads\\t4\\ninsert_id\\t0\\ninteractive_timeout\\t28800\\njoin_buffer_size\\t131072\\nkeep_files_on_create\\tOFF\\nkey_buffer_size\\t157286400\\nkey_cache_age_threshold\\t300\\nkey_cache_block_size\\t1024\\nkey_cache_division_limit\\t100\\nlanguage\\t/usr/share/mysql/english/\\nlarge_files_support\\tON\\nlarge_page_size\\t0\\nlarge_pages\\tOFF\\nlast_insert_id\\t0\\nlc_time_names\\ten_US\\nlicense\\tGPL\\nlocal_infile\\tON\\nlocked_in_memory\\tOFF\\nlog\\tOFF\\nlog_bin\\tON\\nlog_bin_trust_function_creators\\tOFF\\nlog_bin_trust_routine_creators\\tOFF\\nlog_error\\t/mnt/data-store/mysql/mysql.err\\nlog_output\\tFILE\\nlog_queries_not_using_indexes\\tON\\nlog_slave_updates\\tON\\nlog_slow_queries\\tON\\nlog_warnings\\t1\\nlong_query_time\\t0.500000\\nlow_priority_updates\\tOFF\\nlower_case_file_system\\tOFF\\nlower_case_table_names\\t0\\nmax_allowed_packet\\t104857600\\nmax_binlog_cache_size\\t18446744073709547520\\nmax_binlog_size\\t524288000\\nmax_connect_errors\\t10\\nmax_connections\\t1500\\nmax_delayed_threads\\t20\\nmax_error_count\\t64\\nmax_heap_table_size\\t822083584\\nmax_insert_delayed_threads\\t20\\nmax_join_size\\t18446744073709551615\\nmax_length_for_sort_data\\t1024\\nmax_prepared_stmt_count\\t16382\\nmax_relay_log_size\\t0\\nmax_seeks_for_key\\t18446744073709551615\\nmax_sort_length\\t1024\\nmax_sp_recursion_depth\\t0\\nmax_tmp_tables\\t32\\nmax_user_connections\\t0\\nmax_write_lock_count\\t18446744073709551615\\nmin_examined_row_limit\\t10000\\nmulti_range_count\\t256\\nmyisam_data_pointer_size\\t6\\nmyisam_max_sort_file_size\\t9223372036853727232\\nmyisam_mmap_size\\t18446744073709551615\\nmyisam_recover_options\\tOFF\\nmyisam_repair_threads\\t1\\nmyisam_sort_buffer_size\\t67108864\\nmyisam_stats_method\\tnulls_unequal\\nmyisam_use_mmap\\tOFF\\nnet_buffer_length\\t16384\\nnet_read_timeout\\t30\\nnet_retry_count\\t10\\nnet_write_timeout\\t120\\nnew\\tOFF\\nold\\tOFF\\nold_alter_table\\tOFF\\nold_passwords\\tOFF\\nopen_files_limit\\t7500\\noptimizer_prune_level\\t1\\noptimizer_search_depth\\t62\\noptimizer_switch\\tindex_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on\\npid_file\\t/mnt/data-store/mysql/data/mysql.pid\\nplugin_dir\\t/usr/lib/mysql/plugin\\nport\\t3306\\npreload_buffer_size\\t32768\\nprofiling\\tOFF\\nprofiling_history_size\\t15\\nprotocol_version\\t10\\npseudo_thread_id\\t0\\nquery_alloc_block_size\\t8192\\nquery_cache_limit\\t1048576\\nquery_cache_min_res_unit\\t4096\\nquery_cache_size\\t0\\nquery_cache_type\\tOFF\\nquery_cache_wlock_invalidate\\tOFF\\nquery_prealloc_size\\t8192\\nrand_seed1\\t\\nrand_seed2\\t\\nrange_alloc_block_size\\t4096\\nread_buffer_size\\t16777216\\nread_only\\tOFF\\nread_rnd_buffer_size\\t16777216\\nrelay_log\\t/mnt/data-store/mysql/logs/mysql-relay\\nrelay_log_index\\t\\nrelay_log_info_file\\trelay-log.info\\nrelay_log_purge\\tON\\nrelay_log_space_limit\\t0\\nreport_host\\t\\nreport_password\\t\\nreport_port\\t3306\\nreport_user\\t\\nrpl_recovery_rank\\t0\\nsecure_auth\\tOFF\\nsecure_file_priv\\t\\nserver_id\\t2171234\\nskip_external_locking\\tON\\nskip_networking\\tOFF\\nskip_show_database\\tOFF\\nslave_compressed_protocol\\tOFF\\nslave_exec_mode\\tIDEMPOTENT\\nslave_load_tmpdir\\t/mnt/tmp\\nslave_net_timeout\\t3600\\nslave_skip_errors\\tOFF\\nslave_transaction_retries\\t10\\nslow_launch_time\\t2\\nslow_query_log\\tON\\nslow_query_log_file\\t/mnt/data-store/mysql/logs/slowquery.log\\nsocket\\t/tmp/mysql.sock\\nsort_buffer_size\\t8388608\\nsql_auto_is_null\\tON\\nsql_big_selects\\tON\\nsql_big_tables\\tOFF\\nsql_buffer_result\\tOFF\\nsql_log_bin\\tON\\nsql_log_off\\tOFF\\nsql_log_update\\tON\\nsql_low_priority_updates\\tOFF\\nsql_max_join_size\\t18446744073709551615\\nsql_mode\\t\\nsql_notes\\tON\\nsql_quote_show_create\\tON\\nsql_safe_updates\\tOFF\\nsql_select_limit\\t18446744073709551615\\nsql_slave_skip_counter\\t\\nsql_warnings\\tOFF\\nssl_ca\\t\\nssl_capath\\t\\nssl_cert\\t\\nssl_cipher\\t\\nssl_key\\t\\nstorage_engine\\tMyISAM\\nsync_binlog\\t0\\nsync_frm\\tON\\nsystem_time_zone\\tEST\\ntable_definition_cache\\t256\\ntable_lock_wait_timeout\\t50\\ntable_open_cache\\t2000\\ntable_type\\tMyISAM\\nthread_cache_size\\t8\\nthread_handling\\tone-thread-per-connection\\nthread_stack\\t262144\\ntime_format\\t%H:%i:%s\\ntime_zone\\tSYSTEM\\ntimed_mutexes\\tOFF\\ntimestamp\\t1300546448\\ntmp_table_size\\t822083584\\ntmpdir\\t/mnt/tmp\\ntransaction_alloc_block_size\\t8192\\ntransaction_prealloc_size\\t4096\\ntx_isolation\\tREPEATABLE-READ\\nunique_checks\\tON\\nupdatable_views_with_limit\\tYES\\nversion\\t5.1.43-60.hardy.7-log\\nversion_comment\\t(Percona SQL Server (GPL), XtraDB , Revision )\\nversion_compile_machine\\tx86_64\\nversion_compile_os\\tdebian-linux-gnu\\nwait_timeout\\t28800\\nwarning_count\\t0\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Output\nDESCRIPTION: This snippet shows sample output from a disk I/O monitoring tool. Each line represents a block device and its corresponding performance metrics like read/write operations per second, throughput (MB/s), average request size (KB), merge percentage, concurrency, response time, busy percentage, queue time, and service time. The first column '{279}' might represent a timestamp or reporting interval identifier.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_diskstats-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#ts device        rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n{279} ram0           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram2           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram3           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram4           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram5           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram6           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram7           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram8           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram9           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram10          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram11          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram12          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram13          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram14          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} ram15          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sda            0.0     0.0     0.0    47%    0.0     2.1     3.7     0.0     0.0    64%    0.0     0.1   0%      0     3.7    0.0   0.1\n{279} sda1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sda2           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sda3           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sda4           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sda5           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sda6           0.0     0.0     0.0    47%    0.0     2.1     3.7     0.0     0.0    64%    0.0     0.1   0%      0     3.7    0.0   0.1\n{279} sdb            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sdb1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sdc          746.8    16.0    11.7     1%    0.9     1.3   261.4    15.8     4.0     0%    0.2     0.6  97%      0  1008.2    0.1   1.0\n{279} sdc1         746.8    16.0    11.7     1%    0.9     1.3   261.4    15.8     4.0     0%    0.2     0.6  97%      0  1008.2    0.1   1.0\n{279} dm-0           0.0     0.0     0.0     0%    0.0     0.0     2.4     4.0     0.0     0%    0.0     0.0   0%      0     2.4    0.0   0.0\n{279} dm-1           0.0     4.0     0.0     0%    0.0     4.0     2.1     4.0     0.0     0%    0.0     0.4   0%      0     2.1    0.2   0.2\n{279} dm-2           0.0     0.0     0.0     0%    0.0     0.0     0.1     4.0     0.0     0%    0.0     0.1   0%      0     0.1    0.0   0.1\n{279} dm-3           0.0     0.0     0.0     0%    0.0     0.0     3.3     4.0     0.0     0%    0.0     0.0   0%      0     3.3    0.0   0.0\n{279} dm-4           0.1    10.6     0.0     0%    0.0     3.9     1.9     4.0     0.0     0%    0.0     0.1   0%      0     2.0    0.1   0.1\n{279} dm-5           0.0     0.0     0.0     0%    0.0     0.0     0.2     4.0     0.0     0%    0.0     0.3   0%      0     0.2    0.0   0.2\n{279} dm-6           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sr0            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sdd            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} sr1            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} md0            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} emcpowera      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} emcpowera1     0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0     0.0    0.0   0.0\n{279} dm-7         752.7    15.9    11.7     0%    1.0     1.3   261.7    15.8     4.0     0%    0.2     0.6  97%      0  1014.3    0.1   1.0\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Header\nDESCRIPTION: TCP packet containing MySQL protocol server response header\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump021.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 0034 1ab3 4000 4006 2207 7f00 0001\\n7f00 0001 3039 e4fb 4850 bc0a 47e2 1632\\n8010 0100 b7b7 0000 0101 080a 000f a420\\n000f a420\n```\n\n----------------------------------------\n\nTITLE: Kernel Boot Log - Device Initialization Messages\nDESCRIPTION: System boot log showing kernel messages related to hardware initialization including USB controllers, PCI devices, network cards and storage controllers. Contains timestamps and detailed IRQ assignments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-002.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[    3.182032] ehci_hcd 0000:00:1a.7: debug port 1\n[    3.185911] ehci_hcd 0000:00:1a.7: cache line size of 32 is not supported\n[    3.185923] ehci_hcd 0000:00:1a.7: irq 18, io mem 0xf97f4000\n[...truncated for brevity...]\n0000:05:00.0: eth0: Intel(R) PRO/1000 Network Connection\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL TCP Network Connections with netstat Output\nDESCRIPTION: Output from a networking tool (likely netstat) showing TCP connections to MySQL servers on port 3306. The data shows source and destination IP addresses, connection state, and in some cases, the process ID and name (mysqld) of the running MySQL server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/netstat-002.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp        0      0 10.17.146.20:3306           10.36.34.68:35325           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44840           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45051           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46843           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35878          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35836           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35580           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34812           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34300           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44841           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46842           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35583           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34815           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44842           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35326           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44843           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47096           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36139          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44836           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45047           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45559           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46839           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47095           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35824           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36394          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:42041           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44837           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45814           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47094           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36393          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44838           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46325           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34290           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35624          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36136          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44839           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45300           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36085           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35375          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44832           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.104:52495          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44833           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44834           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46577           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46833           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.104:52493          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35628          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:35372          TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.70:44835           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47088           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35817           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34281           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47343           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45551           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47342           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45550           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.104:52496          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:35819           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45293           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45805           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45037           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:54446           10.17.85.74:3306            ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.85.70:3306            10.17.85.104:52497          ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47340           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46316           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45036           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36077           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36333           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34029           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34285           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46827           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47083           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45291           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36076           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34284           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45802           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:36335           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45545           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34286           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34030           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:58664           ESTABLISHED 14469/mysqld        \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34785           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:47079           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34272           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.14.82.196:36154          TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45798           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46566           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:46310           TIME_WAIT   -                   \ntcp        0      0 10.17.85.70:3306            10.17.85.90:41769           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.68:34275           TIME_WAIT   -                   \ntcp        0      0 10.17.146.20:3306           10.36.34.66:45285           TIME_WAIT   -                   \n```\n\n----------------------------------------\n\nTITLE: Analyzing InnoDB Semaphore Wait Log Messages\nDESCRIPTION: Error log output showing multiple threads waiting for extended periods (594-626 seconds) on semaphores. The log reveals contention between reading and writing threads, with a consistent writer thread (1799514464) holding exclusive access.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/errlog007.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nInnoDB: Warning: a long semaphore wait:\\n--Thread 1634335072 has waited at row0sel.c line 3326 for 594.00 seconds the semaphore:\\nS-lock on RW-latch at 0x2a96d920b8 created in file btr0sea.c line 139\\na writer (thread id 1799514464) has reserved it in mode  wait exclusive\\nnumber of readers 0, waiters flag 1\\nLast time read locked in file btr0sea.c line 746\\nLast time write locked in file btr0cur.c line 2184\n```\n\n----------------------------------------\n\nTITLE: Creating User Defined Functions Table in SQL\nDESCRIPTION: Creates the func table to store user-defined function configurations. Key attributes are name, ret, and dl, with constraints for distinguishing functions and aggregates. It requires a MySQL database and has a primary key on name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `func` (\n  `name` char(64) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `ret` tinyint NOT NULL DEFAULT '0',\n  `dl` char(128) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `type` enum('function','aggregate') CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,\n  PRIMARY KEY (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='User defined functions'\n```\n\n----------------------------------------\n\nTITLE: MySQL Server ACK Packet\nDESCRIPTION: Server acknowledgment packet (TCP ACK) sent from 10.55.200.15:3306 back to client\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump014.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 0034 3675 4000 4006 531f 0a37 c80f\n0a36 d4ab 0cea c1ff 3927 f142 3a17 37a0\n8010 ffff 75bf 0000 0101 080a 40e0 fd21\n22f5 83d3 d578 0ed6\n```\n\n----------------------------------------\n\nTITLE: Logging File Operations in Percona Toolkit\nDESCRIPTION: This log snippet shows various file operations performed by Percona Toolkit on MySQL data files and directories. It includes system calls like pread for reading from files, open and close for file handling, getdents64 for directory operations, and _llseek for file positioning. Each line represents a single operation with its process ID, system call, file descriptor or size, execution time, and the target file or directory path.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/001-tab.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n20974 pread 7792 16384 0.000369 /data/data/abd_2dia/aia_227_223.ibd\n22782 pread 586 16384 0.006348 /data/data/abd_2dia/aia_227_228.ibd\n6594 open 30 0 0.000096 /data/data/abd_2dia/\n6594 getdents64 30 264 0.000164 /data/data/abd_2dia/\n6594 getdents64 30 0 0.000146 /data/data/abd_2dia/\n6594 close 30 0 0.000098 /data/data/abd_2dia/\n6594 open 30 0 0.000054 /data/data/abd_2dia/test/db.opt\n6594 _llseek 30 0 0.000043 /data/data/abd_2dia/test/db.opt\n6594 _llseek 30 0 0.000041 /data/data/abd_2dia/test/db.opt\n6594 _llseek 30 0 0.000043 /data/data/abd_2dia/test/db.opt\n6594 read 30 65 0.000062 /data/data/abd_2dia/test/db.opt\n6594 close 30 0 0.000045 /data/data/abd_2dia/test/db.opt\n```\n\n----------------------------------------\n\nTITLE: Storage Change for Query Checksum in pt-query-digest\nDESCRIPTION: Breaking change in how query checksums are stored in pt-query-digest. Changed from storing least significant bytes as BIGINT to storing full MD5 as CHAR(32) for MySQL 8 compatibility.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-11.txt#2025-04-22_snippet_0\n\nLANGUAGE: mysql\nCODE:\n```\nCHAR(32)\n```\n\nLANGUAGE: mysql\nCODE:\n```\nBIGINT\n```\n\n----------------------------------------\n\nTITLE: Schema Switch and Query on bar_tbl\nDESCRIPTION: Database context switch to 'bar' schema followed by SELECT query on bar_tbl table. Shows typical pattern of changing database context before executing query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow022.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse bar;\nSELECT col FROM bar_tbl;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MySQL Sandbox\nDESCRIPTION: These commands export the necessary environment variables for running the MySQL sandbox and tests. It is recommended to add them to the .bashrc file for persistence.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nexport PERCONA_TOOLKIT_BRANCH=${HOME}/perldev/percona-toolkit\nexport PERL5LIB=${HOME}/perldev/percona-toolkit/lib\nexport PERCONA_TOOLKIT_SANDBOX=${HOME}/mysql/percona-server-8.0.26-17\n```\n\n----------------------------------------\n\nTITLE: Counting Filtered Rows Using MySQL SQL\nDESCRIPTION: After changing the context to 'db1', this snippet counts the number of records in 'blah' where the 'col' field value is greater than 2. Percona-style comments provide diagnostics for query analysis. Dependencies are MySQL, 'db1', and 'blah', with column 'col' being numeric or comparable. Output is a single number (the count); table and column must exist for valid execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-no-ts-inheritance.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n# Query_time: 9.000052  Lock_time: 0.000001  Rows_sent: 900  Rows_examined: 10000\\n# QC_Hit: No  Full_scan: Yes  Full_join: No  Tmp_table: Yes  Tmp_table_on_disk: No\\n# Filesort: No  Filesort_on_disk: Yes  Merge_passes: 1\\n# No InnoDB statistics available for this query\\nuse db1;\\nSELECT COUNT(*) FROM blah WHERE col > 2;\n```\n\n----------------------------------------\n\nTITLE: Defining R Language in Natural Docs Configuration\nDESCRIPTION: Configures R language properties with hash line comments and specific prototype parsing rules.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_19\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: R\n\n   Extension: r\n   Line Comment: #\n   Function Prototype Enders: { ;\n   Variable Prototype Enders: <- = ; \\n\n```\n\n----------------------------------------\n\nTITLE: Version Check Query Format Example\nDESCRIPTION: Example of the version check query content showing system ID and version information sent to Percona's version check service.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/version-check.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n85624f3fb5d2af8816178ea1493ed41a;DBD::mysql;4.044\nc2b6d625ef3409164cbf8af4985c48d3;MySQL;MySQL Community Server (GPL) 5.7.22-log\n85624f3fb5d2af8816178ea1493ed41a;OS;Manjaro Linux\n85624f3fb5d2af8816178ea1493ed41a;Percona::Toolkit;3.0.11-dev\n85624f3fb5d2af8816178ea1493ed41a;Perl;5.26.2\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Settings in INI Format\nDESCRIPTION: This snippet provides a configuration setup for MySQL using the INI format. It includes settings for data directories, socket paths, old password compatibility, SSL certificates, various InnoDB parameters, server identity, and logging. Ensure paths are correctly set according to your environment and understand specific requirements such as the InnoDB log file setting needing special care.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/my.cnf-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n####datadir=/var/lib/mysql\ndatadir=/mnt/data/mysql\n####socket=/var/lib/mysql/mysql.sock\nsocket=/mnt/data/mysql/mysql.sock\n# Default to using old password format for compatibility with mysql 3.x\n# clients (those using the mysqlclient10 compatibility package).\nold_passwords=1\n\nssl-key         = /opt/mysql.pdns/.cert/server-key.pem\nssl-cert        = /opt/mysql.pdns/.cert/server-cert.pem\nssl-ca          = /opt/mysql.pdns/.cert/ca-cert.pem\n\ninnodb_buffer_pool_size = 16M\ninnodb_flush_method = O_DIRECT\n## THIS SETTING REQUIRE SPECIAL SHUTDOWN PROCEDURE AND MOVING LOGFILE. DO NOT SET UNLESS YOU UNDERSTAND WHAT YOU ARE DOING!\ninnodb_log_file_size = 64M\ninnodb_log_buffer_size = 1M\ninnodb_flush_log_at_trx_commit = 2\ninnodb_file_per_table = 1\n\nssl = 1\n\nserver-id = 1\nlog-bin=sl1-bin\n\nwsrep_provider_options = \"gcache.size=64M;base_host=10.1.2.102; base_port=4567; cert.log_conflicts=no;etc=etc;\"\n\n[mysql.server]\nuser=mysql\n####basedir=/var/lib\nbasedir=/mnt/data\n\n[mysqld_safe]\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\n\n[mysql]\n\n\n[xtrabackup]\ntarget-dir=/data/backup\n\n```\n\n----------------------------------------\n\nTITLE: Linux Kernel Boot Log - PCI and USB Initialization\nDESCRIPTION: Kernel boot log showing PCI device enumeration, memory mapping, interrupt allocation, and USB controller initialization. Contains timestamps and detailed hardware configuration information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-002.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[    3.124433] pci 0000:04:00.1: reg 190 64bit mmio: [0x000000-0x003fff]\n[    3.124441] pci 0000:04:00.0: reg 184 64bit mmio: [0x000000-0x003fff]\n[...truncated for brevity...]\n[    3.182000] ehci_hcd 0000:00:1a.7: new USB bus registered, assigned bus number 1\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_file_io Tables in MySQL\nDESCRIPTION: This snippet uses the DESC command to reveal the structure of the host_summary_by_file_io and x$host_summary_by_file_io tables. These tables store information about file I/O operations by host, including the number of I/O operations and their latency. Prerequisite: access to a MySQL shell with relevant permissions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| host       | varchar(60)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | text          | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n3 rows in set (0.00 sec)\n\nmysql> desc x$host_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| host       | varchar(60)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | decimal(42,0) | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n3 rows in set (0.06 sec)\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL ps_check_lost_instrumentation Table Structure\nDESCRIPTION: Shows the structure of the 'ps_check_lost_instrumentation' table in MySQL, which is used to check for lost Performance Schema instrumentation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_48\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc ps_check_lost_instrumentation;\n+----------------+---------------+------+-----+---------+-------+\n| Field          | Type          | Null | Key | Default | Extra |\n+----------------+---------------+------+-----+---------+-------+\n| variable_name  | varchar(64)   | NO   |     |         |       |\n| variable_value | varchar(1024) | YES  |     | NULL    |       |\n+----------------+---------------+------+-----+---------+-------+\n2 rows in set (0.09 sec)\n```\n\n----------------------------------------\n\nTITLE: Reading DMI Hardware Information Output\nDESCRIPTION: A structured output showing various hardware components and their specifications as reported by the DMI BIOS. Includes detailed information about hardware security, system boot status, management devices, temperature probes, voltage probes, processor details, and cache information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-006.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0020, DMI type 24, 5 bytes\nHardware Security\n        Power-On Password Status: Disabled\n        Keyboard Password Status: Disabled\n        Administrator Password Status: Disabled\n        Front Panel Reset Status: Disabled\n\nHandle 0x0021, DMI type 32, 20 bytes\nSystem Boot Information\n        Status: No errors detected\n```\n\n----------------------------------------\n\nTITLE: Defining the 'columns_priv' Table for Column Privileges - MySQL - SQL\nDESCRIPTION: Defines the 'columns_priv' table used by MySQL to manage per-column privileges for users. The table associates users with granted privileges at the column level across databases using composite primary keys. Required by MySQL privilege system; no other dependencies. Inputs are user identity, database, table, and column names, with output as access grant records enforced by the server.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `Db` char(64) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Table_name` char(64) collate utf8_bin NOT NULL default '',\n  `Column_name` char(64) collate utf8_bin NOT NULL default '',\n  `Timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') character set utf8 NOT NULL default '',\n  PRIMARY KEY  (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Pascal/Ada Parameter Style - Semicolon and Colon Based\nDESCRIPTION: Function declaration pattern used in Pascal and Ada. Parameters are semicolon-separated with types declared after colons. Multiple parameters of same type can be comma-separated.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/Languages.txt#2025-04-22_snippet_1\n\nLANGUAGE: pascal\nCODE:\n```\nFunctionName ( identifier: type; identifier, identifier: type; identifier: type := value )\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Response Header\nDESCRIPTION: MySQL protocol response packet containing field definitions for the result set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump025.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n4508 006c 97e2 4000 4006 a49f 7f00 0001\\n7f00 0001 3039 bdc9 9c96 8a16 9bdb f8d7\\n8018 0100 fe60 0000 0101 080a 0059 2162\\n0059 2162 0c00 0001 0002 0000 0001 0000\\n0000 0000 1b00 0002 0364 6566 0164 0174\\n0174 0169 0169 0c3f 000b 0000 0003 0000\\n0000 0005 0000 03fe 0000 0200\n```\n\n----------------------------------------\n\nTITLE: Simple Select Query with Inline Comment\nDESCRIPTION: SQL select statement with an inline comment /* abc */ retrieving column c from table t with id condition\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset010.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect c /* abc */from t where id='foo';\n```\n\n----------------------------------------\n\nTITLE: Analyzing Linux Disk IO Statistics Output\nDESCRIPTION: Raw output from Linux /proc/diskstats showing detailed I/O statistics for block devices including physical disks (sda, sdb), RAM disks (ram0-15), logical volumes (dm-*), and other storage devices. Each line contains device numbers, name, and 11 fields of performance metrics including reads/writes completed, sectors read/written, and time spent on I/O.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n253    3 dm-3 39108 0 317138 171804 76791437 0 614331496 174357398 0 6519480 174576802\n253    4 dm-4 4462420 0 101415522 11644533 30110898 0 240887184 29641962 0 8894649 41287596\n253    5 dm-5 652603 0 18833426 916973 6500871 0 52006968 4317032 0 2440835 5234205\n```\n\n----------------------------------------\n\nTITLE: Database Alteration Operation Configuration\nDESCRIPTION: Configuration settings for the table alteration operation, showing retry attempts and wait times for various steps in the process.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-online-schema-change/samples/stats-execute-5.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOperation, tries, wait:\n  analyze_table, 10, 1\n  copy_rows, 10, 0.25\n  create_triggers, 10, 1\n  drop_triggers, 10, 1\n  swap_tables, 10, 1\n  update_foreign_keys, 10, 1\n```\n\n----------------------------------------\n\nTITLE: Showing LVM Volume Configuration\nDESCRIPTION: Displays Logical Volume Management (LVM) configuration including volume attributes, sizes, and volume group information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nLV            VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\nhome          raid10 -wi-ao----  <2.76t                                                    \nroot          raid10 -wi-ao---- 100.00g                                                    \ntestlv        raid10 -wi-a-----  10.00g\n```\n\n----------------------------------------\n\nTITLE: Displaying I/O Statistics for Linux Devices\nDESCRIPTION: This code snippet shows a formatted output of I/O statistics for various devices on a Linux system. It includes metrics for read and write operations, throughput, merge ratio, concurrency, response time, and device utilization.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-align/samples/001-raw.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  #ts device        rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg\n{279} ram0           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram2           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram3           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram4           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram5           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram6           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram7           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram8           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram9           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram10          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram11          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram12          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram13          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram14          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} ram15          0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sda            0.0     0.0     0.0    47%    0.0     4.0     3.7     0.0     0.0    64%    0.0     0.2   0%      0\n{279} sda1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sda2           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sda3           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sda4           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sda5           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sda6           0.0     0.0     0.0    47%    0.0     4.0     3.7     0.0     0.0    64%    0.0     0.2   0%      0\n{279} sdb            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sdb1           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sdc          749.2    16.0    11.7     1%    1.0     1.3   261.4    15.8     4.0     0%    0.2     0.6  98%      0\n{279} sdc1         749.2    16.0    11.7     1%    1.0     1.3   261.4    15.8     4.0     0%    0.2     0.6  98%      0\n{279} dm-0           0.0     0.0     0.0     0%    0.0     0.0     2.4     4.0     0.0     0%    0.0     0.0   0%      0\n{279} dm-1           0.0     4.0     0.0     0%    0.0     4.0     2.1     4.0     0.0     0%    0.0     0.4   0%      0\n{279} dm-2           0.0     0.0     0.0     0%    0.0     0.0     0.1     4.0     0.0     0%    0.0     0.1   0%      0\n{279} dm-3           0.0     0.0     0.0     0%    0.0     0.0     3.3     4.0     0.0     0%    0.0     0.0   0%      0\n{279} dm-4           0.1    10.6     0.0     0%    0.0     3.9     1.9     4.0     0.0     0%    0.0     0.1   0%      0\n{279} dm-5           0.0     0.0     0.0     0%    0.0     0.0     0.2     4.0     0.0     0%    0.0     0.3   0%      0\n{279} dm-6           0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sr0            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sdd            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} sr1            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} md0            0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} emcpowera      0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} emcpowera1     0.0     0.0     0.0     0%    0.0     0.0     0.0     0.0     0.0     0%    0.0     0.0   0%      0\n{279} dm-7         755.0    15.9    11.7     0%    1.0     1.3   261.7    15.8     4.0     0%    0.2     0.6  98%      0\n```\n\n----------------------------------------\n\nTITLE: MySQL Privilege Check Query\nDESCRIPTION: Complex query checking user privileges across different information schema tables\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog005.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 FROM (SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`COLUMN_PRIVILEGES` UNION SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`TABLE_PRIVILEGES` UNION SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`SCHEMA_PRIVILEGES` UNION SELECT `GRANTEE`, `IS_GRANTABLE` FROM `INFORMATION_SCHEMA`.`USER_PRIVILEGES`) t WHERE `IS_GRANTABLE` = 'YES' AND '''root''@''localhost''' LIKE `GRANTEE` LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Options using OptionParser in Perl\nDESCRIPTION: This code snippet outlines the usage of OptionParser for processing command line options in a Perl script. It allows for the specification of options such as the database and unique checks. The snippet also provides a brief guide on valid option types like strings, integers, and comma-separated lists. Dependencies include Perl's OptionParser module. No external inputs are directly handled in the snippet; expected outputs include parsed command line options with corresponding values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help002.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nOptionParser.t parses command line options.  For more details, please use the --help option, or try 'perldoc $PROGRAM_NAME' for complete documentation.\nUsage: $PROGRAM_NAME <options>\n\nOptions:\n\n  --database=s      -D  Specify the database for all tables\n  --[no]nouniquechecks  Set UNIQUE_CHECKS=0 before LOAD DATA INFILE\n\nOption types: s=string, i=integer, f=float, h/H/a/A=comma-separated list, d=DSN, z=size, m=time\n\nOptions and values after processing arguments:\n\n  --database            (No value)\n  --nouniquechecks      FALSE\n```\n\n----------------------------------------\n\nTITLE: Context Command - Bash\nDESCRIPTION: Command to get extracted context from a single log file\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer ctx mysql.log\n```\n\n----------------------------------------\n\nTITLE: Timestamped Disk I/O Performance Statistics Output\nDESCRIPTION: Raw output from a disk performance monitoring tool showing detailed I/O statistics for various devices. The data is organized by timestamps (TS) with metrics for each device including reads, writes, sectors read/written, and timing information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/bug-1035311.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n 253       1 dm-1 27721 0 387490 788600 550902 0 7550432 8271350 0 622710 9060040\n 253       2 dm-2 2256 0 48194 29430 61331 0 508992 355400 0 138920 384830\n 253       3 dm-3 1529 0 12226 19800 78358 0 627328 681430 0 223790 701230\nTS 1344561805.021902462 2012-08-09 21:23:25\n   1       0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1       1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1       2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1       3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1       4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1       5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1       6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1       7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1       8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1       9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1      10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1      11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1      12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1      13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1      14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1      15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   7       0 loop0 0 0 0 0 0 0 0 0 0 0 0\n   7       1 loop1 0 0 0 0 0 0 0 0 0 0 0\n   7       2 loop2 0 0 0 0 0 0 0 0 0 0 0\n   7       3 loop3 0 0 0 0 0 0 0 0 0 0 0\n   7       4 loop4 0 0 0 0 0 0 0 0 0 0 0\n   7       5 loop5 0 0 0 0 0 0 0 0 0 0 0\n   7       6 loop6 0 0 0 0 0 0 0 0 0 0 0\n   7       7 loop7 0 0 0 0 0 0 0 0 0 0 0\n 202       0 xvda 403365 10093 9823440 7028220 491475 495628 11068632 10229820 1 3676420 17257550\n 202       1 xvda1 374942 4607 9356074 6292610 98601 194011 2340904 5690100 0 2951720 12123830\n 202       2 xvda2 2119 147 18128 24540 1080 4035 40968 24340 0 5070 48880\n 202       3 xvda3 26224 5339 448598 710920 391793 297582 8686760 4515380 1 827460 5226600\n 202      16 xvdb 204325693 10730367 8655027510 343276514 384706613 40724604 15617416319 2443346826 7 1164762140 2788031750\n 202      17 xvdb1 204325611 10730367 8655026854 343276344 384706612 40724604 15617416319 2443346826 7 1164762720 2787049970\n   9       0 md0 0 0 0 0 0 0 0 0 0 0 0\n 253       0 dm-0 215064609 0 8655026390 973701444 436102048 0 15617416295 519410050 7 1165283210 1493837974\n 253       1 dm-1 27721 0 387490 788600 550904 0 7550448 8271350 1 622720 9060050\n 253       2 dm-2 2256 0 48194 29430 61331 0 508992 355400 0 138920 384830\n 253       3 dm-3 1529 0 12226 19800 78358 0 627328 681430 0 223790 701230\n```\n\n----------------------------------------\n\nTITLE: Analyzing Empty Memory Slot Configuration\nDESCRIPTION: This snippet details the configuration of an empty memory slot, showing 'No Module Installed' and other relevant information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-005.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0019, DMI type 17, 28 bytes\nMemory Device\n\tArray Handle: 0x0015\n\tError Information Handle: Not Provided\n\tTotal Width: 72 bits\n\tData Width: 64 bits\n\tSize: No Module Installed\n\tForm Factor: DIMM\n\tSet: None\n\tLocator: P1-DIMM1B\n\tBank Locator: BANK1\n\tType: <OUT OF SPEC>\n\tType Detail: Other\n\tSpeed: Unknown\n\tManufacturer:               \n\tSerial Number:         \n\tAsset Tag:             \n\tPart Number:                   \n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Timestamp Data Rows in SQL\nDESCRIPTION: A set of SQL insert data rows containing two numeric ID values paired with a timestamp value of '2006-02-15 10:05:03'. The data appears to be part of a many-to-many relationship table with a created_at timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/huge_insert_ignore_into_values.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n(53,'2006-02-15 10:05:03'),(38,448,'2006-02-15 10:05:03'),(38,450,'2006-02-15 10:05:03')...\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal TCP/IP Packet Dump\nDESCRIPTION: A raw hexadecimal dump of a TCP/IP packet containing a MySQL database operation. The packet shows the network headers and the payload containing an SQL insert statement.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump019.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n2009-08-12 17:24:00.010781 IP 127.0.0.1.36777 > 127.0.0.1.12345: tcp 16384\n\t0x0000:  4508 4034 f13e 4000 4006 0b7b 7f00 0001\n\t0x0010:  7f00 0001 8fa9 3039 5665 689f 562a d060\n\t0x0020:  8018 0101 3e29 0000 0101 080a 0081 bc77\n\t0x0030:  0081 9a1f 5e48 0000 0369 6e73 6572 7420\n\t0x0040:  696e 746f 2074 2076 616c 7565 7320 2827\n\t0x0050:  4e45 5720 594f 524b 205c 2852 6575 7465\n\t0x0060:  7273 5c29 202d 2055 2e53 2e20 676f 7665\n\t0x0070:  726e 6d65 6e74 2062 6f6e 6473 2066 656c\n\t0x0080:  6c20 7768 696c 6520 7374 6f63 6b73 2065\n\t0x0090:  7874 656e 6465 6420 6761 696e 7320 6f6e\n\t0x00a0:  2057 6564 6e65 7364 6179 2061 6674 6572\n\t0x00b0:  2074 6865 2046 6564 6572 616c 2052 6573\n\t0x00c0:  6572 7665 2073 6169 6420 696e 2061 2073\n\t0x00d0:  7461 7465 6d65 6e74 2077 696c 6c20 6772\n\t0x00e0:  6164 7561 6c6c 7920 736c 6f77 2069 7473\n\t0x00f0:  2070 6163 6520 6f66 2062 7579 696e 6720\n\t0x0100:  676f 7665 726e 6d65 6e74 2064 6562 7420\n\t0x0110:  6173 2074 6865 2065 636f 6e6f 6d79 2077\n\t0x0120:  6173 206c 6576 656c 6c69 6e67 206f 7574\n\t0x0130:  2e20 5468 6520 4665 6420 6669 6e69 7368\n\t0x0140:  6564 2061 2074 776f 2d64 6179 2070 6f6c\n\t0x0150:  6963 7920 6d65 6574 696e 6720 6f6e 2057\n\t0x0160:  6564 6e65 7364 6179 2c20 616e 6420 6c65\n\t0x0170:  6674 2062 656e 6368 6d61 726b 2069 6e74\n\t0x0180:  6572 6573 7420 7261 7465 7320 6e65 6172\n\t0x0190:  207a 6572 6f2e 2054 6865 2046 6564 2061\n\t0x01a0:  6c73 6f20 6578 7465 6e64 6564 2074 6865\n\t0x01b0:  2064 7572 6174 696f 6e20 6275 7420 6e6f\n\t0x01c0:  7420 7468 6520 7369 7a65 206f 6620 6974\n\t0x01d0:  7320 7072 6f67 7261 6d20 746f 2062 7579\n\t0x01e0:  2055 2e53 2e20 2433 3030 2062 6c6e 2028\n\t0x01f0:  3138 3220 6269 6c6c 696f 6e20 706f 756e\n\t0x0200:  6473 2920 6f66 2055 2e53 2e20 5472 6561\n\t0x0210:  7375 7269 6573 2e20 2254 6865 2066 6163\n\t0x0220:  7420 7468 6174 2074 6865 7920 6172 6520\n\t0x0230:  6578 7465 6e64 696e 6720 7468 6520 7469\n\t0x0240:  6d65 7461 626c 652c 2062 7574 206e 6f74\n\t0x0250:  2074 6865 2061 6d6f 756e 7420 6f66 2054\n\t0x0260:  7265 6173 7572 7920 7075 7263 6861 7365\n\t0x0270:  7320 7368 6f77 7320 7468 6174 2074 6865\n\t0x0280:  7920 6172 6520 7365 6569 6e67 2073 6f6d\n\t0x0290:  6520 6f66 2074 6865 2073 6967 6e73 206f\n\t0x02a0:  6620 7468 6520 7265 636f 7665 7279 2074\n\t0x02b0:  6861 7420 7468 6579 5c27 7265 2074 7279\n\t0x02c0:  696e 6720 746f 2063 7265 6174 652c 2061\n\t0x02d0:  6e64 2077 616e 7420 746f 206c 6574 2074\n\t0x02e0:  6865 2065 6172 6c69 6572 2070 7572 6368\n\t0x02f0:  6173 6573 2073 6561 736f 6e2c 2220 7361\n\t0x0300:  6964 2044 616e 6965 6c20 5065 6e72 6f64\n\t0x0310:  2c20 7365 6e69 6f72 2069 6e64 7573 7472\n\t0x0320:  7920 616e 616c 7973 7420 6174 2043 616c\n\t0x0330:  6966 6f72 6e69 6120 4372 6564 6974 2055\n\t0x0340:  6e69 6f6e 204c 6561 6775 6520 696e 204f\n\t0x0350:  6e74 6172 696f 2c20 4361 6c69 666f 726e\n\t0x0360:  6961 2e20 5468 6520 6265 6e63 686d 6172\n\t0x0370:  6b20 3130 2d79 6561 7220 552e 532e 2054\n\t0x0380:  7265 6173 7572 7920 6e6f 7465 2066 656c\n\t0x0390:  6c20 6166 7465 7220 7468 6520 7374 6174\n\t0x03a0:  656d 656e 7420 6173 2062 6f6e 6420 6465\n\t0x03b0:  616c 6572 7320 7765 7265 2064 6973 6170\n\t0x03c0:  706f 696e 7465 6420 7468 6520 4665 6420\n\t0x03d0:  6469 6420 6e6f 7420 696e 6372 6561 7365\n\t0x03e0:  2074 6865 2061 6d6f 756e 7420 6f66 2064\n\t0x03f0:  6562 7420 6974 2070 6c61 6e73 2074 6f20\n\t0x0400:  6275 792e 2054 6865 2062 656e 6368 6d61\n\t0x0410:  726b 2065 6e64 6564 2064 6f77 6e20 3131\n\t0x0420:  2f33 322c 2077 6974 6820 7468 6520 7969\n\t0x0430:  656c 6420 6174 2033 2e37 3220 7065 7263\n\t0x0440:  656e 742e 2054 6865 2046 6564 206c 6175\n\t0x0450:  6e63 6865 6420 7468 6520 6465 6274 2062\n\t0x0460:  7579 696e 6720 7072 6f67 7261 6d20 696e\n\t0x0470:  204d 6172 6368 2077 6865 6e20 6974 2068\n\t0x0480:  6164 2061 6c72 6561 6479 2063 686f 7070\n\t0x0490:  6564 2069 6e74 6572 6573 7420 7261 7465\n\t0x04a0:  7320 746f 206e 6561 7220 7a65 726f 2062\n\t0x04b0:  7574 2077 616e 7465 6420 746f 206f 7065\n\t0x04c0:  6e20 7468 6520 6d6f 6e65 7920 7461 7073\n\t0x04d0:  2065 7665 6e20 7769 6465 7220 746f 2073\n\t0x04e0:  7570 706f 7274 2074 6865 2073 7472 7567\n\t0x04f0:  676c 696e 6720 6563 6f6e 6f6d 792e 2054\n\t0x0500:  6865 2046 6564 5c27 7320 5472 6561 7375\n\t0x0510:  7279 2070 7572 6368 6173 6573 2077 6572\n\t0x0520:  6520 7072 6576 696f 7573 6c79 2073 6368\n\t0x0530:  6564 756c 6564 2074 6f20 6578 7069 7265\n\t0x0540:  2069 6e20 5365 7074 656d 6265 722e 2055\n\t0x0550:  2e53 2e20 7374 6f63 6b73 2063 6f6e 7469\n\t0x0560:  6e75 6564 2074 6f20 7269 7365 2061 6674\n\t0x0570:  6572 2074 6865 2046 6564 2073 6169 6420\n\t0x0580:  7468 6520 6563 6f6e 6f6d 7920 7761 7320\n\t0x0590:  7368 6f77 696e 6720 7369 676e 7320 6f66\n\t0x05a0:  206c 6576 656c 6c69 6e67 206f 7574 2061\n\t0x05b0:  6674 6572 2032 3020 6d6f 6e74 6873 206f\n\t0x05c0:  6620 7265 6365 7373 696f 6e2e 2054 6865\n\t0x05d0:  2044 6f77 204a 6f6e 6573 2069 6e64 7573\n\t0x05e0:  7472 6961 6c20 6176 6572 6167 6520 3c2e\n\t0x05f0:  444a 493e 2063 6c6f 7365 6420 7570 2031\n\t0x0600:  2e33 3020 7065 7263 656e 742c 2054 6865\n\t0x0610:  2053 7461 6e64 6172 6420 2620 506f 6f72\n\t0x0620:  5c27 7320 3530 3020 496e 6465 7820 3c2e\n\t0x0630:  5350 583e 2065 6e64 6564 2075 7020 312e\n\t0x0640:  3135 2070 6572 6365 6e74 2061 6e64 2054\n\t0x0650:  6865 204e 6173 6461 7120 436f 6d70 6f73\n\t0x0660:  6974 6520 496e 6465 7820 3c2e 4958 4943\n\t0x0670:  3e20 6669 6e69 7368 6564 2075 7020 312e\n\t0x0680:  3437 2070 6572 6365 6e74 2e20 2256 616c\n\t0x0690:  6964 6174 696e 6720 7768 6174 2074 6865\n\t0x06a0:  2065 636f 6e6f 6d69 6320 6461 7461 2061\n\t0x06b0:  7320 6c61 7465 2068 6173 2073 686f 776e\n\t0x06c0:  2c20 7468 6520 4665 6420 6573 7365 6e74\n\t0x06d0:  6961 6c6c 7920 7369 676e 616c 6c65 6420\n\t0x06e0:  746f 2074 6865 206d 6172 6b65 7420 7468\n\t0x06f0:  6174 2074 6869 7320 7265 6365 7373 696f\n\t0x0700:  6e20 6973 206f 7665 7220 6279 2063 6861\n\t0x0710:  6e67 696e 6720 6974 7320 746f 6e65 2066\n\t0x0720:  726f 6d20 636f 6e74 7261 6374 696f 6e20\n\t0x0730:  746f 206c 6576 656c 6c69 6e67 206f 7574\n\t0x0740:  2c22 2073 6169 6420 4275 7274 2057 6869\n\t0x0750:  7465 2c20 4368 6965 6620 496e 7665 7374\n\t0x0760:  6d65 6e74 204f 6666 6963 6572 2061 7420\n\t0x0770:  4c50 4c20 4669 6e61 6e63 6961 6c20 696e\n\t0x0780:  2042 6f73 746f 6e2e 204e 4557 2059 4f52\n\t0x0790:  4b20 5c28 5265 7574 6572 735c 2920 2d20\n\t0x07a0:  552e 532e 2067 6f76 6572 6e6d 656e 7420\n\t0x07b0:  626f 6e64 7320 6665 6c6c 2077 6869 6c65\n\t0x07c0:  2073 746f 636b 7320 6578 7465 6e64 6564\n\t0x07d0:  2067 6169 6e73 206f 6e20 5765 646e 6573\n\t0x07e0:  6461 7920 6166 7465 7220 7468 6520 4665\n\t0x07f0:  6465 7261 6c20 5265 7365 7276 6520 7361\n\t0x0800:  6964 2069 6e20 6120 7374 6174 656d 656e\n\t0x0810:  7420 7769 6c6c 2067 7261 6475 616c 6c79\n\t0x0820:  2073 6c6f 7720 6974 7320 7061 6365 206f\n\t0x0830:  6620 6275 7969 6e67 2067 6f76 6572 6e6d\n\t0x0840:  656e 7420 6465 6274 2061 7320 7468 6520\n\t0x0850:  6563 6f6e 6f6d 7920 7761 7320 6c65 7665\n\t0x0860:  6c6c 696e 6720 6f75 742e 2054 6865 2046\n\t0x0870:  6564 2066 696e 6973 6865 6420 6120 7477\n\t0x0880:  6f2d 6461 7920 706f 6c69 6379 206d 6565\n\t0x0890:  7469 6e67 206f 6e20 5765 646e 6573 6461\n\t0x08a0:  792c 2061 6e64 206c 6566 7420 6265 6e63\n\t0x08b0:  686d 6172 6b20 696e 7465 7265 7374 2072\n\t0x08c0:  6174 6573 206e 6561 7220 7a65 726f 2e20\n\t0x08d0:  5468 6520 4665 6420 616c 736f 2065 7874\n\t0x08e0:  656e 6465 6420 7468 6520 6475 7261 7469\n\t0x08f0:  6f6e 2062 7574 206e 6f74 2074 6865 2073\n\t0x0900:  697a 6520 6f66 2069 7473 2070 726f 6772\n\t0x0910:  616d 2074 6f20 6275 7920 552e 532e 2024\n\t0x0920:  3330 3020 626c 6e20 2831 3832 2062 696c\n\t0x0930:  6c69 6f6e 2070 6f75 6e64 7329 206f 6620\n\t0x0940:  552e 532e 2054 7265 6173 7572 6965 732e\n\t0x0950:  2022 5468 6520 6661 6374 2074 6861 7420\n\t0x0960:  7468 6579 2061 7265 2065 7874 656e 6469\n\t0x0970:  6e67 2074 6865 2074 696d 6574 6162 6c65\n\t0x0980:  2c20 6275 7420 6e6f 7420 7468 6520 616d\n\t0x0990:  6f75 6e74 206f 6620 5472 6561 7375 7279\n\t0x09a0:  2070 7572 6368 6173 6573 2073 686f 7773\n\t0x09b0:  2074 6861 7420 7468 6579 2061 7265 2073\n\t0x09c0:  6565 696e 6720 736f 6d65 206f 6620 7468\n\t0x09d0:  6520 7369 676e 7320 6f66 2074 6865 2072\n\t0x09e0:  6563 6f76 6572 7920 7468 6174 2074 6865\n\t0x09f0:  795c 2772 6520 7472 7969 6e67 2074 6f20\n\t0x0a00:  6372 6561 7465 2c20 616e 6420 7761 6e74\n\t0x0a10:  2074 6f20 6c65 7420 7468 6520 6561 726c\n\t0x0a20:  6965 7220 7075 7263 6861 7365 7320 7365\n\t0x0a30:  6173 6f6e 2c22 2073 6169 6420 4461 6e69\n\t0x0a40:  656c 2050 656e 726f 642c 2073 656e 696f\n\t0x0a50:  7220 696e 6475 7374 7279 2061 6e61 6c79\n\t0x0a60:  7374 2061 7420 4361 6c69 666f 726e 6961\n\t0x0a70:  2043 7265 6469 7420 556e 696f 6e20 4c65\n\t0x0a80:  6167 7565 2069 6e20 4f6e 7461 7269 6f2c\n\t0x0a90:  2043 616c 6966 6f72 6e69 612e 2054 6865\n\t0x0aa0:  2062 656e 6368 6d61 726b 2031 302d 7965\n\t0x0ab0:  6172 2055 2e53 2e20 5472 6561 7375 7279\n\t0x0ac0:  206e 6f74 6520 6665 6c6c 2061 6674 6572\n\t0x0ad0:  2074 6865 2073 7461 7465 6d65 6e74 2061\n\t0x0ae0:  7320 626f 6e64 2064 6561 6c65 7273 2077\n\t0x0af0:  6572 6520 6469 7361 7070 6f69 6e74 6564\n\t0x0b00:  2074 6865 2046 6564 2064 6964 206e 6f74\n\t0x0b10:  2069 6e63 7265 6173 6520 7468 6520 616d\n\t0x0b20:  6f75 6e74 206f 6620 6465 6274 2069 7420\n\t0x0b30:  706c 616e 7320 746f 2062 7579 2e20 5468\n\t0x0b40:  6520 6265 6e63 686d 6172 6b20 656e 6465\n\t0x0b50:  6420 646f 776e 2031 312f 3332 2c20 7769\n\t0x0b60:  7468 2074 6865 2079 6965 6c64 2061 7420\n\t0x0b70:  332e 3732 2070 6572 6365 6e74 2e20 5468\n\t0x0b80:  6520 4665 6420 6c61 756e 6368 6564 2074\n\t0x0b90:  6865 2064 6562 7420 6275 7969 6e67 2070\n\t0x0ba0:  726f 6772 616d 2069 6e20 4d61 7263 6820\n\t0x0bb0:  7768 656e 2069 7420 6861 6420 616c 7265\n\t0x0bc0:  6164 7920 6368 6f70 7065 6420 696e 7465\n\t0x0bd0:  7265 7374 2072 6174 6573 2074 6f20 6e65\n\t0x0be0:  6172 207a 6572 6f20 6275 7420 7761 6e74\n\t0x0bf0:  6564 2074 6f20 6f70 656e 2074 6865 206d\n\t0x0c00:  6f6e 6579 2074 6170 7320 6576 656e 2077\n\t0x0c10:  6964 6572 2074 6f20 7375 7070 6f72 7420\n\t0x0c20:  7468 6520 7374 7275 6767 6c69 6e67 2065\n\t0x0c30:  636f 6e6f 6d79 2e20 5468 6520 4665 645c\n\t0x0c40:  2773 2054 7265 6173 7572 7920 7075 7263\n\t0x0c50:  6861 7365 7320 7765 7265 2070 7265 7669\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'tables_priv' Table\nDESCRIPTION: Defines the structure for the `tables_priv` table in MySQL, used to store table-level grant privileges. It specifies columns for host, database, user, table name, grantor, timestamp, table privileges, and column privileges. The primary key is a composite of Host, Db, User, and Table_name. It uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Displaying Known Issue with Kubernetes 1.21-1.24\nDESCRIPTION: This snippet shows a warning message that appears when using the tool with Kubernetes versions 1.21 to 1.24. The warning is related to the deprecation of PodSecurityPolicy in these versions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n2022/12/15 17:43:16 Error: get resource podsecuritypolicies in namespace default: error: <nil>, stderr: Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+\n , stdout: apiVersion: v1\n    items: []\n    kind: List\n    metadata:\n      resourceVersion: \"\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Git Branch to GitHub\nDESCRIPTION: Demonstrates how to push a locally developed branch to a GitHub fork using git. It assumes git is installed and the user has write access to the specified repository and branch.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin PT-9999_functionality_name\n```\n\n----------------------------------------\n\nTITLE: Querying Numeric Values from MySQL Database\nDESCRIPTION: A series of SELECT queries that retrieve sequential numeric values from a table named 'foo'. Each query is accompanied by execution metadata showing consistent query time (0.000899), no lock time, no rows sent, no rows examined, and no InnoDB statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1534 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1535 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1536 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1537 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1538 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1539 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1540 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1541 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1542 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1543 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1544 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1545 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1546 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1547 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1548 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1549 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1550 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1551 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1552 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1553 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1554 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1555 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1556 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1557 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1558 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1559 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1560 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1561 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1562 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1563 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1564 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1565 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1566 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1567 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1568 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1569 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1570 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1571 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1572 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1573 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1574 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1575 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1576 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1577 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1578 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1579 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1580 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1581 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1582 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Listing Key Galera Events\nDESCRIPTION: List key Galera events in chronological order using pt-galera-log-explainer. It combines logs from different nodes based on identifiers like node names and IPs. Users can filter logs by event types such as SST or view changes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer [flags] list { --all | [--states] [--views] [--events] [--sst] [--applicative] } <paths ...>\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer list --all --since 2023-01-05T03:24:26.000000Z /var/log/mysql/*.log\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer list --all *.log\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer list --sst --views *.log\n```\n\n----------------------------------------\n\nTITLE: Establishing Film Text Index in SQL\nDESCRIPTION: The `film_text` table contains text data for films, including a full-text index on title and description for improved search performance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_text` (\n  `film_id` smallint(6) NOT NULL,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  PRIMARY KEY (`film_id`),\n  FULLTEXT KEY `idx_title_description` (`title`,`description`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Server ACK Packet\nDESCRIPTION: TCP acknowledgment packet from server to client with no payload data.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump025.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 0034 97e1 4000 4006 a4d8 7f00 0001\\n7f00 0001 3039 bdc9 9c96 8a16 9bdb f8d7\\n8010 0100 8ae1 0000 0101 080a 0059 2162\\n0059 2162\n```\n\n----------------------------------------\n\nTITLE: Database Related Topic Definitions\nDESCRIPTION: Specialized topic types for database documentation including tables, views, indexes, cursors and triggers. Each type includes specific keywords and scope settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Topics.txt#2025-04-22_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nTopic Type: Database\n\n   Plural: Databases\n   Page Title If First: Yes\n\n   Keywords:\n      database, databases\n      db, dbs\n\n\nTopic Type: Database Table\n\n   Plural: Database Tables\n   Scope: Start\n   Page Title If First: Yes\n\n   Keywords:\n      table, tables\n      database table, database tables\n      databasetable, databasetables\n      db table, db tables\n      dbtable, dbtables\n```\n\n----------------------------------------\n\nTITLE: Listing Notable Processes with OOM Scores in Plaintext\nDESCRIPTION: This snippet displays a table of notable processes with their PIDs, OOM (Out of Memory) scores, and commands. It highlights processes with specific OOM adjustments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n# Notable Processes ##########################################\n  PID    OOM    COMMAND\n 2061    +0    sshd\n42899    -17    sshd\n44001    -17    sshd\n44034    -17    sshd\n48761    -17    sshd\n```\n\n----------------------------------------\n\nTITLE: Executing SHOW FULL PROCESSLIST in MySQL\nDESCRIPTION: This SQL command displays a full list of current MySQL server processes, including connection details, user information, and query states. It's typically used for monitoring database activity and troubleshooting performance issues.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/processlist-001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nshow full processlist\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries in MySQL\nDESCRIPTION: Pattern of SELECT queries retrieving sequential numbers from table 'foo'. Each query has a query time of 0.000899 seconds, no lock time, and no rows examined or returned. Executed by user@1.2.3.4 on schema 'db'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1093 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1094 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Performance Metrics Log Data\nDESCRIPTION: Timestamped performance monitoring data showing metrics like load, timing, utilization percentages and resource stats. Each line contains multiple columns with performance indicators tracked at regular intervals.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/sample_diskstats-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n144.4 {41}     983.0    16.0    15.3     0%    0.1     3.0    37.9     2.1     0.1    37%    0.0     0.0   7%      3  1020.9   -0.0   2.8\n145.4 {41}    1047.9    15.9    16.3     1%    0.1     2.8     0.0     0.0     0.0     0%    0.0     0.0   7%      3  1047.9    0.0   2.8\n```\n\n----------------------------------------\n\nTITLE: Counting Connected Clients - PostgreSQL SQL\nDESCRIPTION: Counts the number of currently connected clients using pg_stat_activity view.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM pg_stat_activity\n```\n\n----------------------------------------\n\nTITLE: MySQL ONLY_FULL_GROUP_BY Mode\nDESCRIPTION: SQL mode setting that was causing compatibility issues with pt-table-checksum\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nONLY_FULL_GROUP_BY\n```\n\n----------------------------------------\n\nTITLE: Commenting No Events Processed in Perl\nDESCRIPTION: A simple Perl comment indicating that no events were processed. This could be used as a status indicator or debug message in a larger script.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow033-since-Nd.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\n# No events processed.\n```\n\n----------------------------------------\n\nTITLE: Example of Page Structure HTML for Framed Menu Page\nDESCRIPTION: Shows the HTML structure for a framed menu page. The body tag uses FramedMenuPage class and contains menu and footer sections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<body FramedMenuPage>\n    [browser styles]\n\n    <#Menu>\n        Menu\n    </#Menu>\n\n    <#Footer>\n        Footer\n    </#Footer>\n\n    [browser styles]\n</body FramedMenuPage>\n```\n\n----------------------------------------\n\nTITLE: Defining ColdFusion Language in Natural Docs Configuration\nDESCRIPTION: Configures ColdFusion language properties with both HTML-style and C-style comment formats.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_18\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: ColdFusion\n\n   Extensions: cfm cfml cfc\n   Line Comment: //\n   Block Comments: <!--- ---> /* */\n   Function Prototype Enders: { <\n```\n\n----------------------------------------\n\nTITLE: Regex List Command - Bash\nDESCRIPTION: Command to display all implemented regular expressions\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer regex-list\n```\n\n----------------------------------------\n\nTITLE: Monitoring Device I/O Statistics Output\nDESCRIPTION: Raw output from Linux I/O monitoring showing performance metrics for system devices. Data includes timestamps, device names, read/write throughput (MB/s), concurrency levels, response times (ms), device utilization (busy %), and in-progress I/O operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n  #ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n 47.1 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 47.1 sda           0.0    0.0     1.0     0.0    0.0     0.1   0%      0\n 47.1 dm-6          0.0    0.0     1.0     0.1    0.0     0.1   0%      0\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Tables\nDESCRIPTION: Defines the structure for three tables in the percona_test schema: checksums, load_data, and sentinel. These tables are likely used for testing purposes in Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.7.txt#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`db_tbl`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nCREATE TABLE `load_data` (\n  `i` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n\nCREATE TABLE `sentinel` (\n  `id` int(11) NOT NULL,\n  `ping` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table with Foreign Keys in SQL\nDESCRIPTION: Defines the `film` table with attributes for movies, including foreign keys to the `language` table. The table incorporates default values and ENUM types for specific fields.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Event Table for MySQL Events\nDESCRIPTION: Sets up the 'event' table in MySQL to manage scheduled events, including their timing, status, and execution environment. This table is pivotal for event-driven functionality within the database, allowing actions based on time or conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `event`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `event` (\n  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `name` char(64) NOT NULL DEFAULT '',\n  `body` longblob NOT NULL,\n  `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `execute_at` datetime DEFAULT NULL,\n  `interval_value` int(11) DEFAULT NULL,\n  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `last_executed` datetime DEFAULT NULL,\n  `starts` datetime DEFAULT NULL,\n  `ends` datetime DEFAULT NULL,\n  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',\n  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',\n  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',\n  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',\n  `originator` int(10) unsigned NOT NULL,\n  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',\n  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `body_utf8` longblob,\n  PRIMARY KEY (`db`,`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: TCP Packet Capture in Hexadecimal\nDESCRIPTION: Series of TCP packet captures showing communication between localhost ports 12345 and 44489, including MySQL protocol handshake and query data. The captures include timestamps, IP headers, TCP headers and payload data in hexadecimal format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump015.txt#2025-04-22_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n0x0000:  4508 0070 7c04 4000 4006 c079 7f00 0001\n0x0010:  7f00 0001 3039 adc9 ec85 bd5e ec8b 257f\n...\n```\n\n----------------------------------------\n\nTITLE: MySQL General Log Entry with Complete Query\nDESCRIPTION: A MySQL general log entry showing a user connection, a SELECT query with multiple clauses, and disconnection. The log includes timestamp, connection ID, user information, and the full SQL query.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n051007 21:55:24\t     42 Connect     root@localhost on db1\n\t\t                 42 Query       SELECT foo \n                         FROM tbl\n                         WHERE col=12345\n                         ORDER BY col\n\t\t                 42 Quit\n```\n\n----------------------------------------\n\nTITLE: MySQL Select Query - Variable Performance Table\nDESCRIPTION: Query selecting very_variable_column from unsteady_table with varying execution times between 1-4 seconds. Shows performance instability pattern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect very_variable_column from unsteady_table;\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Stats at Timestamp 4.1 Text\nDESCRIPTION: This block shows disk I/O statistics captured at timestamp 4.1. It includes metrics like megabytes read/written per second (rd_mb_s, wr_mb_s), read/write concurrency (rd_cnc, wr_cnc), read/write response time (rd_rt, wr_rt), device busy percentage (busy), and in-progress requests (in_prg) for devices like ram*, sda*, sr*, md*, and loop*.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-004.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n4.1 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 sda       22.3    0.5     0.3     2.2    0.0     0.1  40%      0\n4.1 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 sda3      22.3    0.5     0.3     2.2    0.0     0.1  40%      0\n4.1 sr0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 md0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n4.1 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Improving pt-agent Installation Process (Bash)\nDESCRIPTION: Mentions several fixes related to the `pt-agent --install` command: improved documentation for Percona XtraDB Cluster (PXC) setups (1248778), adding a check for pre-existing installations (1250973), ensuring suggested MySQL user credentials in output are properly quoted (1250968), clarifying potentially confusing error messages related to slaves (1251004), and documenting the necessary MySQL privileges for the agent's user (1248785). Note: `pt-agent` was replaced by `percona-agent`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# General usage for installation\npt-agent --install [other_options]\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration File for Sandboxed Installation\nDESCRIPTION: MySQL server configuration file located at /tmp/12345/my.sandbox.cnf, defining settings for both client and server. It configures a sandboxed MySQL instance with specific paths, buffer sizes, logging options, and replication settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp_enc008.txt#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/sveta/mysqlpackages/Percona-Server-8.0.32-24-Linux.x86_64.glibc2.35\ndatadir                             = /tmp/12345/data\ngeneral_log\ngeneral_log_file                    = genlog\ninnodb_buffer_pool_size             = 16M\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_lock_wait_timeout            = 3\ninnodb_log_file_size                = 5M\ninnodb_log_group_home_dir           = /tmp/12345/data\nkey_buffer_size                     = 5M\nlocal-infile                        = 1\nlog-bin                             = mysql-bin\nlog-error                           = /tmp/12345/data/mysqld.log\nlog_slave_updates\nlower_case_table_names              = 0\nrelay_log                           = mysql-relay-bin\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nserver-id                           = 12345\nslow-query-log                      = 1\nslow-query-log-file                 = /tmp/12345/data/slow.log\nlog_slow_admin_statements           = 1\nlong_query_time                     = 0\ndefault_authentication_plugin       = mysql_native_password\nbinlog_format                       = STATEMENT\nsecure-file-priv                    = \n```\n\n----------------------------------------\n\nTITLE: Capturing Disk I/O Performance Statistics with Timestamped Intervals\nDESCRIPTION: Time-series sample of disk I/O statistics with timestamps, showing detailed performance metrics for multiple storage devices including physical disks, device-mapper volumes, and RAM disks. Each row contains device identifiers and their associated performance counters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTS 1283888686.311660000\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1    2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1    3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1    4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1    5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1    6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1    7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1    8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1    9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1   10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1   11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1   12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1   13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1   14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1   15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489326 163771311 245685 758230213 452641456 198294628 66 218107925 0 621586474 976426586\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781000 11190151 1216 41283252 1388500 8569925 0 92730589 0 26467314 134014920\n   8    6 sda6 298706180 152558880 241499 716928460 451252890 189724666 64 125377124 0 601264635 842397446\n   8   16 sdb 297 733 8240 197 0 0 0 0 0 189 197\n   8   32 sdc 328 733 8488 129 0 0 0 0 0 128 129\n 253    0 dm-0 1418187 0 27251002 5776257 27004868 0 216038944 57460473 0 5590515 63255145\n 253    1 dm-1 135871 0 1874770 319678 1634400 0 13075200 6656137 0 827234 6975779\n 253    2 dm-2 126266 0 1587922 489749 1990026 0 15920208 1617243 0 1606268 2106986\n 253    3 dm-3 39108 0 317138 171804 76791362 0 614330896 174357398 0 6519480 174576802\n 253    4 dm-4 4462407 0 101415050 11644505 30110836 0 240886688 29641962 0 8894629 41287568\n 253    5 dm-5 652603 0 18833426 916973 6500866 0 52006928 4317032 0 2440835 5234205\n 253    6 dm-6 444430045 0 51182350554 795935144 496945218 0 12885008952 119566331 0 583872541 915517577\n  11    0 sr0 0 0 0 0 0 0 0 0 0 0 0\n   8   48 sdd 0 0 0 0 0 0 0 0 0 0 0\n  11    1 sr1 0 0 0 0 0 0 0 0 0 0 0\n   9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998364 6091475802 49403812904 2173805747 0 919421180 3016071450\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Table with Incrementing Thread IDs\nDESCRIPTION: A series of SELECT queries on the 'foo' table, each with a different thread ID. The queries are executed by the same user from the same IP address, with consistent query time and no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 598 FROM foo;\nSELECT 599 FROM foo;\nSELECT 600 FROM foo;\n# ... (additional queries omitted for brevity)\nSELECT 646 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Whois Examples - Bash\nDESCRIPTION: Examples of using whois command with different node identifiers\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer whois '218469b2' mysql.log\npt-galera-log-explainer whois '172.17.0.3' mysql.log\npt-galera-log-explainer whois 'galera-node2' mysql.log\n```\n\n----------------------------------------\n\nTITLE: Querying Three Table in MySQL\nDESCRIPTION: SELECT query on 'three' table with query time of 500 seconds. Uses parameterized query for id field with no rows returned or examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow049.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT three FROM three WHERE id=?;\n```\n\n----------------------------------------\n\nTITLE: Memory Hex Dump with ASCII Text\nDESCRIPTION: A hex dump output displaying memory addresses from 0x1870 to 0x24e0 with corresponding hexadecimal values and ASCII text. The content appears to be a financial news article discussing Federal Reserve actions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump038.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n0x1870:  6f20 6372 6561 7465 2c20 616e 6420 7761\n0x1880:  6e74 2074 6f20 6c65 7420 7468 6520 6561\n[...truncated for brevity...]\n0x24d0:  6520 4665 6465 7261 6c20 5265 7365 7276\n0x24e0:  6520 7361 6964 2069 6e20 6120 7374 6174\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Stats at Timestamp 1.0 Text\nDESCRIPTION: This block shows disk I/O statistics captured at timestamp 1.0. It includes metrics like megabytes read/written per second (rd_mb_s, wr_mb_s), read/write concurrency (rd_cnc, wr_cnc), read/write response time (rd_rt, wr_rt), device busy percentage (busy), and in-progress requests (in_prg) for devices like ram*, sda*, sr*, md*, and loop*.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-004.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n1.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram3       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram4       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram5       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram6       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram7       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram8       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram9       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram10      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram11      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram12      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram13      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram14      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 ram15      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda       21.9    0.6     0.4     1.4    0.0     0.1  41%      0\n1.0 sda1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda2       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 sda3      21.9    0.6     0.4     1.4    0.0     0.1  41%      0\n1.0 sr0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 md0        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop1      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop2      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop3      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop4      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop5      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop6      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n1.0 loop7      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Capturing TCP Packet Hex Dump (Client to Server - Follow-up)\nDESCRIPTION: This snippet presents a hexadecimal dump of another 66-byte TCP packet from client 10.55.200.31 (port 64987) to server 10.55.200.15 (port 3306), captured shortly after the previous one at 2009-06-09 16:53:17.111477. It provides further insight into the ongoing client-server interaction (likely MySQL) via its hexadecimal payload representation, as captured by a network analysis tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump016.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-06-09 16:53:17.111477 IP 10.55.200.31.64987 > 10.55.200.15.3306: tcp 66\n\t0x0000:  4508 0076 3d0c 4000 4006 58d1 0a37 c81f\n\t0x0010:  0a37 c80f fddb 0cea 97df aafe 5f8d 5dcf\n\t0x0020:  8018 ffff fd39 0000 0101 080a 1de9 6b04\n\t0x0030:  4133 5db0 3e00 0001 85a6 0300 0000 0001\n\t0x0040:  0800 0000 0000 0000 0000 0000 0000 0000\n\t0x0050:  0000 0000 0000 0000 7070 7070 6164 7269\n\t0x0060:  0014 a47e 0218 fab3 18ac 2b5d 1ec7 3453\n\t0x0070:  153e 5411 76b4 7dab 35a7\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Connect Command\nDESCRIPTION: This snippet represents a MySQL administrator command, specifically `Connect\\G`. This command is typically used within the MySQL client to establish or re-establish a connection to the server. The `\\G` modifier requests vertical output format instead of the default tabular format. In the context of the report, it likely signifies the connection attempt related to the analyzed query, which failed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump003.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nadministrator command: Connect\\G\n```\n\n----------------------------------------\n\nTITLE: Defining Fortran Language in Natural Docs Configuration\nDESCRIPTION: Configures Fortran language properties for modern Fortran formats (90/95/03) with ampersand line extension.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_20\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Fortran\n\n   Extensions: f90 f95 f03\n   Line Comment: !\n   Function Prototype Ender: \\n\n   Variable Prototype Enders: \\n = =>\n   Line Extender: &\n```\n\n----------------------------------------\n\nTITLE: Reverting pt-stalk mysqladmin Command Behavior (Bash)\nDESCRIPTION: Sets the `CMD_MYSQLADMIN` environment variable to `mysqladmin debug`. This configuration makes `pt-stalk` revert to its previous behavior of calling `mysqladmin debug`, which was changed in v3.0.13 because it could flood the error log. Setting this variable explicitly enables the older, potentially verbose, debug command execution.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-13.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCMD_MYSQLADMIN=\"mysqladmin debug\"\n```\n\n----------------------------------------\n\nTITLE: Sampling Disk I/O Statistics in Linux\nDESCRIPTION: This snippet shows a single snapshot of disk I/O statistics for various devices on a Linux system. It includes data for RAM disks, physical disks, logical volumes, and other storage devices. Each line represents a different device and contains various I/O metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nTS 1283888761.543043000\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   1    1 ram1 0 0 0 0 0 0 0 0 0 0 0\n   1    2 ram2 0 0 0 0 0 0 0 0 0 0 0\n   1    3 ram3 0 0 0 0 0 0 0 0 0 0 0\n   1    4 ram4 0 0 0 0 0 0 0 0 0 0 0\n   1    5 ram5 0 0 0 0 0 0 0 0 0 0 0\n   1    6 ram6 0 0 0 0 0 0 0 0 0 0 0\n   1    7 ram7 0 0 0 0 0 0 0 0 0 0 0\n   1    8 ram8 0 0 0 0 0 0 0 0 0 0 0\n   1    9 ram9 0 0 0 0 0 0 0 0 0 0 0\n   1   10 ram10 0 0 0 0 0 0 0 0 0 0 0\n   1   11 ram11 0 0 0 0 0 0 0 0 0 0 0\n   1   12 ram12 0 0 0 0 0 0 0 0 0 0 0\n   1   13 ram13 0 0 0 0 0 0 0 0 0 0 0\n   1   14 ram14 0 0 0 0 0 0 0 0 0 0 0\n   1   15 ram15 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 304489538 163771322 245685 758231019 452644788 198295668 66 218109052 0 621587721 976428516\n   8    1 sda1 295 9835 589 1449 0 0 0 0 0 1026 1449\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n   8    6 sda6 298706381 152558886 241499 716929184 451256222 189725706 64 125378251 0 601265859 842399294\n   8   16 sdb 297 733 8240 197 0 0 0 0 0 189 197\n   8   32 sdc 328 733 8488 129 0 0 0 0 0 128 129\n 253    0 dm-0 1418194 0 27251106 5776302 27005148 0 216041184 57460473 0 5590539 63255190\n 253    1 dm-1 135872 0 1874778 319681 1634564 0 13076512 6656160 0 827246 6975805\n 253    2 dm-2 126266 0 1587922 489749 1990039 0 15920312 1617249 0 1606274 2106992\n 253    3 dm-3 39108 0 317138 171804 76791599 0 614332792 174357398 0 6519480 174576802\n 253    4 dm-4 4462420 0 101415522 11644533 30110997 0 240887976 29641968 0 8894655 41287602\n 253    5 dm-5 652603 0 18833426 916973 6500871 0 52006968 4317032 0 2440835 5234205\n 253    6 dm-6 444430231 0 51182354578 795935798 496948730 0 12885132096 119567469 0 583873704 915519369\n  11    0 sr0 0 0 0 0 0 0 0 0 0 0 0\n   8   48 sdd 0 0 0 0 0 0 0 0 0 0 0\n  11    1 sr1 0 0 0 0 0 0 0 0 0 0 0\n   9    0 md0 0 0 0 0 0 0 0 0 0 0 0\n 120    0 emcpowera 323046912 502722235 134965691962 842254915 83998409 6091475929 49403814280 2173805858 0 919421291 3016071561\n```\n\n----------------------------------------\n\nTITLE: Querying Current User with CURRENT_USER Function\nDESCRIPTION: EXPLAIN query to show the execution plan for retrieving the authenticated user using CURRENT_USER() function, which may differ from USER() in some contexts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog005.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT CURRENT_USER()\n```\n\n----------------------------------------\n\nTITLE: Listing MongoDB-Specific Resources Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet shows the MongoDB-specific resources that the tool collects, including backups, restores, and server instances.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"perconaservermongodbbackups\",\n\"perconaservermongodbrestores\",\n\"perconaservermongodbs\"\n```\n\n----------------------------------------\n\nTITLE: Example of Page Structure HTML for Unframed Search Results Popup\nDESCRIPTION: Illustrates the HTML structure for a search results popup page. The body tag uses PopupSearchResultsPage class and contains only the index section.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<body PopupSearchResultsPage>\n    [browser styles]\n\n    <#Index>\n        Index\n    </#Index>\n\n    [browser styles]\n</body PopupSearchResultsPage>\n```\n\n----------------------------------------\n\nTITLE: Matching 'foo' at Line Start in Percona Toolkit\nDESCRIPTION: This regex pattern matches the string 'foo' at the beginning of a line. It's likely used to identify specific log entries or configuration lines in MySQL-related files.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/errlogs/patterns.txt#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^foo\n```\n\n----------------------------------------\n\nTITLE: Defining help_relation Table in SQL\nDESCRIPTION: Creates the `help_relation` table within the `mysql` database, serving as a mapping table for the server's help system. It establishes a many-to-many relationship between help topics (from `help_topic`) and keywords (from `help_keyword`) by storing pairs of their respective IDs. The table uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Finding Next Chunk Boundary in MySQL\nDESCRIPTION: Retrieves the next chunk boundary using SQL_NO_CACHE to ensure fresh results. Implements LIMIT clause for controlled record fetching and uses FORCE INDEX for optimal execution plan.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/chunkidx002.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*!40001 SQL_NO_CACHE */ `i`, `i`, `y` FROM `issue_519`.`t` FORCE INDEX(`myidx`) WHERE ((`i` > ?) OR (`i` = ? AND `y` >= ?)) ORDER BY `i`, `y` LIMIT ?, 2 /*next chunk boundary*/\n```\n\n----------------------------------------\n\nTITLE: Analyzing Physical Memory Array Configuration\nDESCRIPTION: This snippet details the physical memory array configuration, including its location, use, error correction type, maximum capacity, and number of devices.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-005.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHandle 0x0015, DMI type 16, 15 bytes\nPhysical Memory Array\n\tLocation: System Board Or Motherboard\n\tUse: System Memory\n\tError Correction Type: Multi-bit ECC\n\tMaximum Capacity: 384 GB\n\tError Information Handle: Not Provided\n\tNumber Of Devices: 18\n```\n\n----------------------------------------\n\nTITLE: Multiple Insert and Complex Union Query in MySQL\nDESCRIPTION: Inserts multiple records with the same keys but different data, then demonstrates a complex index merge union query across multiple indexes with parenthesized conditions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t1 (key1, key2, key3, key4, filler1) values (100, 100, 200, 200,'key1-key2-key3-key4-1');\ninsert into t1 (key1, key2, key3, key4, filler1) values (100, 100, 200, 200,'key1-key2-key3-key4-2');\ninsert into t1 (key1, key2, key3, key4, filler1) values (100, 100, 200, 200,'key1-key2-key3-key4-3');\nexplain select key1,key2,key3,key4,filler1 from t1 where key3=200 or (key1=100 and key2=100) or key4=200;\nselect key1,key2,key3,key4,filler1 from t1 where key3=200 or (key1=100 and key2=100) or key4=200;\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format\nDESCRIPTION: An example commit message for the Percona Toolkit, explaining how to format it with a Jira issue reference. No specific code dependencies are required beyond Jira and git usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\nPT-12345 - fixed data corruption issue for pt-foo\n\nNew check pt-foo-test-env added when pt-foo is going to perform destructive operation.\nIf check fails, now pt-foo will stop executing and return an error.\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping the MySQL Sandbox\nDESCRIPTION: Commands to start and stop the MySQL sandbox environment for the Percona Toolkit. It allows testing in an isolated environment. The snippet also includes commands for enabling specific database engines.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${HOME}/perldev/percona-toolkit\nsandbox/test-env start\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsandbox/test-env stop\n```\n\nLANGUAGE: Shell\nCODE:\n```\nENABLE_TOKUDB=1 sandbox/test-env start\n```\n\nLANGUAGE: Shell\nCODE:\n```\nENABLE_ROCKSDB=1 sandbox/test-env start\n```\n\n----------------------------------------\n\nTITLE: Initializing Intel Gigabit Ethernet Network Driver\nDESCRIPTION: This snippet shows the initialization of Intel Gigabit Ethernet network interfaces, including driver version and device information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-005.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nIntel(R) Gigabit Ethernet Network Driver - version 1.3.16-k2\nCopyright (c) 2007-2009 Intel Corporation.\nGSI 23 sharing vector 0x5A and IRQ 23\nACPI: PCI Interrupt 0000:01:00.0[A] -> GSI 28 (level, low) -> IRQ 90\nigb 0000:01:00.0: Disabling ASPM L0s upstream switch port 0000:00:01.0\nPCI: Setting latency timer of device 0000:01:00.0 to 64\nigb 0000:01:00.0: Intel(R) Gigabit Ethernet Network Connection\nigb 0000:01:00.0: eth0: (PCIe:2.5Gb/s:Width x2) 00:14:4f:ca:fa:b4\nigb 0000:01:00.0: eth0: PBA No: 2030ff-0ff\nigb 0000:01:00.0: Using MSI-X interrupts. 4 rx queue(s), 1 tx queue(s)\n```\n\n----------------------------------------\n\nTITLE: Creating Rental Table in MySQL\nDESCRIPTION: This SQL statement defines the 'rental' table in the Sakila database, detailing its columns, constraints, and indexes. The table includes essential fields such as rental_id, rental_date, and inventory_id, among others, with appropriate foreign key relationships to 'customer', 'inventory', and 'staff' tables. It requires MySQL with InnoDB storage engine support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment-8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `rental` (\n  `rental_id` int NOT NULL AUTO_INCREMENT,\n  `rental_date` datetime NOT NULL,\n  `inventory_id` mediumint unsigned NOT NULL,\n  `customer_id` smallint unsigned NOT NULL,\n  `return_date` datetime DEFAULT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`rental_id`),\n  UNIQUE KEY `rental_date` (`rental_date`,`inventory_id`,`customer_id`),\n  KEY `idx_fk_inventory_id` (`inventory_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  CONSTRAINT `fk_rental_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_inventory` FOREIGN KEY (`inventory_id`) REFERENCES `inventory` (`inventory_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_rental_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Tcl Parameter Style\nDESCRIPTION: Tcl's unique parameter declaration style using braces for both parameter list and function body. Parameters are space-separated with support for nested braces.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/Languages.txt#2025-04-22_snippet_4\n\nLANGUAGE: tcl\nCODE:\n```\nFunctionName { identifier identifier { whatever } } { code }\n```\n\n----------------------------------------\n\nTITLE: Creating help_keyword Table in MySQL\nDESCRIPTION: SQL statement for creating the help_keyword table which stores keywords used in the MySQL help system. It contains a numeric ID and keyword name with appropriate indexes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords';\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL sys.innodb_lock_waits and sys.x$innodb_lock_waits Views in SQL\nDESCRIPTION: Shows the output of the `DESC` command for the `sys.innodb_lock_waits` and `sys.x$innodb_lock_waits` views. This reveals the column names, data types, nullability, keys, defaults, and extra information for these views, which are used to inspect InnoDB lock contention.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.innodb_lock_waits;\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| Field                        | Type                | Null | Key | Default             | Extra |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| wait_started                 | datetime            | YES  |     | NULL                |       |\n| wait_age                     | time                | YES  |     | NULL                |       |\n| wait_age_secs                | bigint(21)          | YES  |     | NULL                |       |\n| locked_table                 | varchar(1024)       | NO   |     |                     |       |\n| locked_index                 | varchar(1024)       | YES  |     | NULL                |       |\n| locked_type                  | varchar(32)         | NO   |     |                     |       |\n| waiting_trx_id               | varchar(18)         | NO   |     |                     |       |\n| waiting_trx_started          | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| waiting_trx_age              | time                | YES  |     | NULL                |       |\n| waiting_trx_rows_locked      | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_trx_rows_modified    | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_pid                  | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_query                | longtext            | YES  |     | NULL                |       |\n| waiting_lock_id              | varchar(81)         | NO   |     |                     |       |\n| waiting_lock_mode            | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_id              | varchar(18)         | NO   |     |                     |       |\n| blocking_pid                 | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_query               | longtext            | YES  |     | NULL                |       |\n| blocking_lock_id             | varchar(81)         | NO   |     |                     |       |\n| blocking_lock_mode           | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_started         | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| blocking_trx_age             | time                | YES  |     | NULL                |       |\n| blocking_trx_rows_locked     | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_trx_rows_modified   | bigint(21) unsigned | NO   |     | 0                   |       |\n| sql_kill_blocking_query      | varchar(32)         | YES  |     | NULL                |       |\n| sql_kill_blocking_connection | varchar(26)         | YES  |     | NULL                |       |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n26 rows in set (0.01 sec)\n\nmysql> desc sys.x$innodb_lock_waits;\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| Field                        | Type                | Null | Key | Default             | Extra |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| wait_started                 | datetime            | YES  |     | NULL                |       |\n| wait_age                     | time                | YES  |     | NULL                |       |\n| wait_age_secs                | bigint(21)          | YES  |     | NULL                |       |\n| locked_table                 | varchar(1024)       | NO   |     |                     |       |\n| locked_index                 | varchar(1024)       | YES  |     | NULL                |       |\n| locked_type                  | varchar(32)         | NO   |     |                     |       |\n| waiting_trx_id               | varchar(18)         | NO   |     |                     |       |\n| waiting_trx_started          | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| waiting_trx_age              | time                | YES  |     | NULL                |       |\n| waiting_trx_rows_locked      | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_trx_rows_modified    | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_pid                  | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_query                | varchar(1024)       | YES  |     | NULL                |       |\n| waiting_lock_id              | varchar(81)         | NO   |     |                     |       |\n| waiting_lock_mode            | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_id              | varchar(18)         | NO   |     |                     |       |\n| blocking_pid                 | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_query               | varchar(1024)       | YES  |     | NULL                |       |\n| blocking_lock_id             | varchar(81)         | NO   |     |                     |       |\n| blocking_lock_mode           | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_started         | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| blocking_trx_age             | time                | YES  |     | NULL                |       |\n| blocking_trx_rows_locked     | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_trx_rows_modified   | bigint(21) unsigned | NO   |     | 0                   |       |\n| sql_kill_blocking_query      | varchar(32)         | YES  |     | NULL                |       |\n| sql_kill_blocking_connection | varchar(26)         | YES  |     | NULL                |       |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n26 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring tmpfs Mount Options in Linux\nDESCRIPTION: System configuration showing tmpfs mounts with varying permission modes, security labels, user/group IDs, and size allocations. Each entry represents a 19GB tmpfs mount with specific access controls and security parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/Linux/output_007.txt#2025-04-22_snippet_3\n\nLANGUAGE: config\nCODE:\n```\ntmpfs                       19G   0% tmpfs    rw,nosuid,nodev,relatime,seclabel,size=19801800k,mode=700,uid=10125,gid=10000                                                                                                                                                                                                                                                                                                                                  /run/user/955600330\n```\n\n----------------------------------------\n\nTITLE: Sample Disk I/O Statistics Output (Text)\nDESCRIPTION: This snippet displays formatted output likely from a disk I/O statistics tool (e.g., iostat). It includes columns for timestamp (ts), device identifier ({2}), reads per second (rd_s), average read size (rd_avkb), read megabytes per second (rd_mb_s), read merge percentage (rd_mrg), average read queue size/concurrency (rd_cnc), average read response time (rd_rt), writes per second (wr_s), average write size (wr_avkb), write megabytes per second (wr_mb_s), write merge percentage (wr_mrg), average write queue size/concurrency (wr_cnc), average write response time (wr_rt), device busy percentage (busy), requests in progress (in_prg), total I/O operations per second (io_s), average queue time (qtime), and average service time (stime). This data is typically used for performance analysis and troubleshooting storage subsystems, especially in database environments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/sample_diskstats-005.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#ts device    rd_s rd_avkb rd_mb_s rd_mrg rd_cnc   rd_rt    wr_s wr_avkb wr_mb_s wr_mrg wr_cnc   wr_rt busy in_prg    io_s  qtime stime\n1.0 {2}     2812.0    16.0    43.9     1%    0.6     0.4    92.7    30.6     2.8    67%    0.0     0.1  41%      0  2904.7    0.1   0.3\n2.0 {2}     3160.1    16.0    49.3     1%    0.6     0.4   327.5    31.1     9.9    36%    0.1     0.2  46%      2  3487.6    0.1   0.2\n3.0 {2}     2593.4    16.0    40.5     1%    0.5     0.4   102.6    25.2     2.5    62%    0.0     0.1  42%      2  2695.9    0.1   0.3\n4.1 {2}     2859.4    16.0    44.7     1%    0.5     0.3   147.8    30.5     4.4    57%    0.0     0.1  40%      0  3007.2    0.1   0.2\n5.1 {2}     2516.2    16.0    39.3     1%    0.4     0.3   317.5    34.4    10.7    36%    0.1     0.2  37%      0  2833.7    0.1   0.2\n```\n\n----------------------------------------\n\nTITLE: Percona Toolkit Configuration for Disabling Version Check\nDESCRIPTION: Configuration snippet showing how to permanently disable version checking in Percona Toolkit's global configuration file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/version-check.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Disable Version Check for all tools:\nno-version-check\n```\n\n----------------------------------------\n\nTITLE: Describing Session SSL Status View - MySQL sys.session_ssl_status - SQL\nDESCRIPTION: This snippet uses the DESC command to list the columns and data types for the sys.session_ssl_status view, which provides connection-level SSL information. No dependencies are required other than access to sys.session_ssl_status. The four fields include thread ID, SSL protocol version, cipher used, and count of reused SSL sessions for each thread.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_71\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.session_ssl_status;\n+---------------------+---------------------+------+-----+---------+-------+\n| Field               | Type                | Null | Key | Default | Extra |\n+---------------------+---------------------+------+-----+---------+-------+\n| thread_id           | bigint(20) unsigned | NO   |     | NULL    |       |\n| ssl_version         | varchar(1024)       | YES  |     | NULL    |       |\n| ssl_cipher          | varchar(1024)       | YES  |     | NULL    |       |\n| ssl_sessions_reused | varchar(1024)       | YES  |     | NULL    |       |\n+---------------------+---------------------+------+-----+---------+-------+\n4 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Disk Statistics Output\nDESCRIPTION: Raw disk statistics from /proc/diskstats showing major/minor numbers, device names, and detailed I/O metrics including reads, writes, and timing data. Data is timestamped and includes multiple snapshots across several seconds.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/diskstats-002.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n   8    2 sda2 248 7127 562 1306 0 0 0 0 0 941 1306\n   8    3 sda3 541 2355 1525 3435 66 37 2 212 0 3446 3647\n   8    4 sda4 17 0 6 85 0 0 0 0 0 85 85\n   8    5 sda5 5781011 11190156 1216 41283334 1388500 8569925 0 92730589 0 26467337 134015002\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table ID Range in MySQL\nDESCRIPTION: SQL query that retrieves the minimum and maximum ID values from a table named 'tbl'. This is commonly used to determine the range of primary key values in a table for data analysis or partitioning.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow055.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MIN(id),MAX(id) FROM tbl;\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Language in Natural Docs Configuration\nDESCRIPTION: Configures PHP language properties including extensions, shebang detection, and comment styles.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_8\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: PHP\n\n   Extensions: inc php php3 php4 phtml\n   Shebang String: php\n   Ignore Variable Prefix in Index: $\n   Line Comments: // #\n   Block Comment: /* */\n   Function Prototype Enders: ; {\n   Variable Prototype Enders: ; =\n```\n\n----------------------------------------\n\nTITLE: Setting Up Help Categories Table in MySQL\nDESCRIPTION: This snippet creates the 'help_category' table to store hierarchical structures of help categories, facilitating organized storage and retrieval of help topics. It establishes parent-child relationships and ensures unique naming across categories.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS `help_category`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned DEFAULT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories';\n/*!40101 SET character_set_client = @saved_cs_client */;\n```\n\n----------------------------------------\n\nTITLE: Sample Output of pt-mongodb-summary Tool\nDESCRIPTION: Demonstrates the formatted output produced by pt-mongodb-summary, showing sections for Instances, Host information, Running Operations, Security settings, Oplog details, and Cluster-wide statistics. The output provides a comprehensive overview of a MongoDB deployment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-mongodb-summary/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n# Instances ####################################################################################\nID    Host                         Type                                 ReplSet\n 0 localhost:17001                PRIMARY                                r1\n 1 localhost:17002                SECONDARY                              r1\n 2 localhost:17003                SECONDARY                              r1\n 0 localhost:18001                PRIMARY                                r2\n 1 localhost:18002                SECONDARY                              r2\n 2 localhost:18003                SECONDARY                              r2\n\n# This host\n# Mongo Executable #############################################################################\n       Path to executable | /home/karl/tmp/MongoDB32Labs/3.0/bin/mongos\n# Report On 0 ########################################\n                     User | karl\n                PID Owner | mongos\n                     Time | 2016-10-30 00:18:49 -0300 ART\n                 Hostname | karl-HP-ENVY\n                  Version | 3.0.11\n                 Built On | Linux x86_64\n                  Started | 2016-10-30 00:18:49 -0300 ART\n                  Datadir | /data/db\n             Process Type | mongos\n\n# Running Ops ##################################################################################\n\nType         Min        Max        Avg\nInsert           0          0          0/5s\nQuery            0          0          0/5s\nUpdate           0          0          0/5s\nDelete           0          0          0/5s\nGetMore          0          0          0/5s\nCommand          0         22         16/5s\n\n# Security #####################################################################################\nUsers 0\nRoles 0\nAuth  disabled\nSSL   disabled\n\n# Oplog ########################################################################################\nOplog Size     18660 Mb\nOplog Used     55 Mb\nOplog Length   0.91 hours\nLast Election  2016-10-30 00:18:44 -0300 ART\n\n# Cluster wide #################################################################################\n            Databases: 3\n          Collections: 17\n  Sharded Collections: 1\nUnsharded Collections: 16\n    Sharded Data Size: 68 GB\n  Unsharded Data Size: 0 KB\n   # Balancer (per day)\n              Success: 6\n               Failed: 0\n               Splits: 0\n                Drops: 0\n```\n\n----------------------------------------\n\nTITLE: Analyzing Semaphore Wait in InnoDB (C)\nDESCRIPTION: This snippet demonstrates the structure of semaphore wait logging in InnoDB. It includes thread IDs, wait locations, wait times, and detailed semaphore information such as lock variables, waiters flags, and lock words.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n--Thread 139961200458064 has waited at lock/lock0lock.c line 3224 for 0.0000 seconds the semaphore:\nMutex at 0xf89ab0 '&kernel_mutex', lock var 1\nwaiters flag 1\n```\n\n----------------------------------------\n\nTITLE: Network Packet Hexdump\nDESCRIPTION: Series of hexadecimal packet dumps showing the complete TCP/IP communication between MySQL client and server, including query transmission and result set metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump022.txt#2025-04-22_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\n4508 005f d03c 4000 4006 6c52 7f00 0001\n7f00 0001 ae01 3039 aa3d 5ce1 aa80 595a\n8018 0101 fe53 0000 0101 080a 004a 8f03\n004a 8c1f 2700 0000 1653 454c 4543 5420\n692c 6a20 4652 4f4d 2064 2e74 3220 5748\n4552 4520 693d 3f20 414e 4420 6a3d 3f\n```\n\n----------------------------------------\n\nTITLE: Defining Pascal Language in Natural Docs Configuration\nDESCRIPTION: Configures Pascal language properties with both line and block comment styles, using a custom Perl package for enhanced support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_11\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Pascal\n\n   Extension: pas\n   Line Comment: //\n   Block Comments: { } (* *)\n   Function Prototype Ender: ;\n   Variable Prototype Enders: ; =\n   Perl Package: NaturalDocs::Languages::Pascal\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration File Paths\nDESCRIPTION: Default configuration file paths that MySQL server reads in order of precedence for server initialization settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp001.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/etc/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Log Entry - First Query\nDESCRIPTION: Slow query log entry showing a query executed by user 'meow' on schema 'db1' with performance metrics including query time, lock time, and row statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow019.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 5  Schema: db1\n# Query_time: 0.000002  Lock_time: 0.000000  Rows_sent: 5  Rows_examined: 3\n# No InnoDB statistics available for this query\n# administrator command: Quit;\n```\n\n----------------------------------------\n\nTITLE: Displaying Hexadecimal Data for Memory or Packet Analysis\nDESCRIPTION: This snippet shows two lines of hexadecimal data, each prefixed with a memory address. The data is formatted in 16-byte chunks, which is a standard representation for memory dumps or network packet analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump033.txt#2025-04-22_snippet_5\n\nLANGUAGE: hexadecimal\nCODE:\n```\n0x0060:  0000 00fd 0110 0000 0005 0000 03fe 0000\n0x0070:  0200\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Usage Information in Unix-like System\nDESCRIPTION: This snippet shows the output of a command that displays disk usage information. It includes details about the filesystem, total space in 1024-byte blocks, used space, available space, capacity percentage, and the mount point.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/bash/diskspace001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFilesystem   1024-blocks     Used Available Capacity  Mounted on\n/dev/disk0s2   118153176 94409664  23487512    81%    /\n```\n\n----------------------------------------\n\nTITLE: Specific Failing Query Instance in Percona Toolkit Report (SQL)\nDESCRIPTION: This specific SQL query instance, derived from the generic template, was executed and resulted in an error on one of the compared hosts. The surrounding text indicates the error was \"DBD::mysql::st execute failed: Unknown column 'host1_col' in 'field list'\". This query attempts to select the column `host1_col` from the table `test.t`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host2_results.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect host1_col from test.t\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User 'sally'@'%' If Not Exists\nDESCRIPTION: This SQL statement creates a new user named 'sally' who can connect from any host ('%'). The `IF NOT EXISTS` clause prevents an error if the user 'sally'@'%' already exists in the MySQL instance.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-show-grants/samples/column-grants-combined-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Grants for 'sally'@'%'\nCREATE USER IF NOT EXISTS 'sally'@'%';\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table in MySQL\nDESCRIPTION: Creates the film table to store movie information including title, description, rental details, and rating. Contains foreign keys to language table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.1.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Makefile Language in Natural Docs Configuration\nDESCRIPTION: Configures basic Makefile language properties with hash line comments and multiple file extensions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_16\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Makefile\n\n   Extensions: mk mak make\n   Line Comment: #\n```\n\n----------------------------------------\n\nTITLE: Function Return Type Update\nDESCRIPTION: Change in return data type for extract_schema_from_file_name and extract_table_from_file_name functions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/NEWS.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nRETURN VARCHAR(64)\n```\n\n----------------------------------------\n\nTITLE: Defining film_list View in MySQL Sakila Database\nDESCRIPTION: Creates a view that joins film, category and actor tables to display film information with a comma-separated list of actors. The view includes film ID, title, description, category, price, length, rating, and actors list.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_42\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 SET @saved_cs_results         = @@character_set_results */;\n/*!50001 SET @saved_col_connection     = @@collation_connection */;\n/*!50001 SET character_set_client      = latin1 */;\n/*!50001 SET character_set_results     = latin1 */;\n/*!50001 SET collation_connection      = latin1_swedish_ci */;\n/*!50001 CREATE ALGORITHM=UNDEFINED */\n/*!50013 DEFINER=`msandbox`@`%` SQL SECURITY DEFINER */\n/*!50001 VIEW `film_list` AS select `film`.`film_id` AS `FID`,`film`.`title` AS `title`,`film`.`description` AS `description`,`category`.`name` AS `category`,`film`.`rental_rate` AS `price`,`film`.`length` AS `length`,`film`.`rating` AS `rating`,group_concat(concat(`actor`.`first_name`,_utf8' ',`actor`.`last_name`) separator ', ') AS `actors` from ((((`category` left join `film_category` on((`category`.`category_id` = `film_category`.`category_id`))) left join `film` on((`film_category`.`film_id` = `film`.`film_id`))) join `film_actor` on((`film`.`film_id` = `film_actor`.`film_id`))) join `actor` on((`film_actor`.`actor_id` = `actor`.`actor_id`))) group by `film`.`film_id` */;\n/*!50001 SET character_set_client      = @saved_cs_client */;\n/*!50001 SET character_set_results     = @saved_cs_results */;\n/*!50001 SET collation_connection      = @saved_col_connection */;\n```\n\n----------------------------------------\n\nTITLE: Config Parameter Example - statement_truncate_len\nDESCRIPTION: Configuration parameter reference showing the statement_truncate_len variable used to control statement truncation length in the format_statement view.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/NEWS.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nstatement_truncate_len\n```\n\n----------------------------------------\n\nTITLE: Linux Disk I/O Statistics Output Format\nDESCRIPTION: Raw output from /proc/diskstats showing disk I/O statistics across multiple devices. Each line contains device ID, name and 11 fields of metrics including reads, writes, I/O operations and timing data. Data is timestamped with TS markers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/small.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTS 1327510177.628000 2012-01-25T10:49:37\n   1    0 ram0 0 0 0 0 0 0 0 0 0 0 0\n   8    0 sda 85958345 9208182 2671393219 2437232103 534745383 846485907 11060948316 2055732382 0 545004107 197928245\n   8   16 sdb 145329387 10397919 3590114436 2492237855 144339337 483516351 5022900400 109665845 0 699286938 2601866158\n 253    0 dm-0 3698313 0 441982922 21577627 73403807 0 591870544 1142786100 0 43867855 1164431937\n```\n\n----------------------------------------\n\nTITLE: Listing MySQL 5.1.34 Server Variables\nDESCRIPTION: This configuration output lists numerous MySQL server system variables and their values for a specific instance running MySQL 5.1.34. It covers settings like base directory (`basedir`), data directory (`datadir`), port (`port`), socket (`socket`), storage engine configurations (InnoDB, MyISAM), logging (`log-bin`, `log-error`), replication (`server-id`, `master-*`), buffer sizes (`key_buffer_size`, `innodb_buffer_pool_size`), and character sets (`character-set-server`). The output seems to be generated from a server instance, potentially within a testing or sandbox environment (`/tmp/12345`, `mysql_sandbox12345`), possibly via a command like `SHOW VARIABLES`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nbasedir                           /home/daniel/mysql_binaries/mysql-5.1.34-linux-x86_64-glibc23\nbind-address                      (No default value)\nbinlog-row-event-max-size         1024\nbinlog_cache_size                 32768\nbinlog_format                     (No default value)\nbulk_insert_buffer_size           8388608\ncharacter-set-client-handshake    TRUE\ncharacter-set-filesystem          binary\ncharacter-set-server              latin1\ncharacter-sets-dir                /home/daniel/mysql_binaries/mysql-5.1.34-linux-x86_64-glibc23/share/charsets/\nchroot                            (No default value)\ncollation-server                  latin1_swedish_ci\ncompletion-type                   0\nconcurrent-insert                 1\nconnect_timeout                   10\nconsole                           FALSE\ndatadir                           .\ndatetime_format                   %Y-%m-%d %H:%i:%s\ndate_format                       %Y-%m-%d\ndefault-character-set             latin1\ndefault-collation                 latin1_swedish_ci\ndefault-storage-engine            MyISAM\ndefault-table-type                MyISAM\ndefault-time-zone                 (No default value)\ndefault_week_format               0\ndelayed_insert_limit              100\ndelayed_insert_timeout            300\ndelayed_queue_size                1000\ndes-key-file                      (No default value)\ndisconnect-slave-event-count      0\ndiv_precision_increment           4\nenable-locking                    FALSE\nengine-condition-pushdown         TRUE\nexpire_logs_days                  0\nexternal-locking                  FALSE\nflush_time                        0\nft_max_word_len                   84\nft_min_word_len                   4\nft_query_expansion_limit          20\nft_stopword_file                  (No default value)\ngdb                               FALSE\ngeneral_log                       FALSE\ngeneral_log_file                  (No default value)\ngroup_concat_max_len              1024\nhelp                              TRUE\ninit-connect                      (No default value)\ninit-file                         (No default value)\ninit-slave                        (No default value)\ninnodb                            TRUE\ninnodb-adaptive-hash-index        TRUE\ninnodb-additional-mem-pool-size   1048576\ninnodb-autoextend-increment       8\ninnodb-autoinc-lock-mode          1\ninnodb-buffer-pool-size           16777216\ninnodb-checksums                  TRUE\ninnodb-commit-concurrency         0\ninnodb-concurrency-tickets        500\ninnodb-data-file-path             ibdata1:10M:autoextend\ninnodb-data-home-dir              /tmp/12345/data\ninnodb-doublewrite                TRUE\ninnodb-fast-shutdown              1\ninnodb-file-io-threads            4\ninnodb-file-per-table             FALSE\ninnodb-flush-log-at-trx-commit    1\ninnodb-flush-method               (No default value)\ninnodb-force-recovery             0\ninnodb-lock-wait-timeout          3\ninnodb-locks-unsafe-for-binlog    FALSE\ninnodb-log-buffer-size            1048576\ninnodb-log-file-size              5242880\ninnodb-log-files-in-group         2\ninnodb-log-group-home-dir         /tmp/12345/data\ninnodb-max-dirty-pages-pct        90\ninnodb-max-purge-lag              0\ninnodb-mirrored-log-groups        1\ninnodb-open-files                 300\ninnodb-rollback-on-timeout        FALSE\ninnodb-stats-on-metadata          TRUE\ninnodb-status-file                FALSE\ninnodb-support-xa                 TRUE\ninnodb-sync-spin-loops            20\ninnodb-table-locks                TRUE\ninnodb-thread-concurrency         8\ninnodb-thread-sleep-delay         10000\ninteractive_timeout               28800\njoin_buffer_size                  131072\nkeep_files_on_create              FALSE\nkey_buffer_size                   16777216\nkey_cache_age_threshold           300\nkey_cache_block_size              1024\nkey_cache_division_limit          100\nlanguage                          /home/daniel/mysql_binaries/mysql-5.1.34-linux-x86_64-glibc23/share/english/\nlarge-pages                       FALSE\nlc-time-names                     en_US\nlocal-infile                      TRUE\nlog                               (No default value)\nlog-bin                           mysql-bin\nlog-bin-index                     (No default value)\nlog-bin-trust-function-creators   FALSE\nlog-bin-trust-routine-creators    FALSE\nlog-error                         \nlog-isam                          myisam.log\nlog-output                        FILE\nlog-queries-not-using-indexes     FALSE\nlog-short-format                  FALSE\nlog-slave-updates                 TRUE\nlog-slow-admin-statements         FALSE\nlog-slow-slave-statements         FALSE\nlog-tc                            tc.log\nlog-tc-size                       24576\nlog-update                        (No default value)\nlog-warnings                      1\nlog_slow_queries                  (No default value)\nlong_query_time                   10\nlow-priority-updates              FALSE\nlower_case_table_names            0\nmaster-connect-retry              60\nmaster-host                       (No default value)\nmaster-info-file                  master.info\nmaster-password                   (No default value)\nmaster-port                       3306\nmaster-retry-count                86400\nmaster-ssl                        FALSE\nmaster-ssl-ca                     (No default value)\nmaster-ssl-capath                 (No default value)\nmaster-ssl-cert                   (No default value)\nmaster-ssl-cipher                 (No default value)\nmaster-ssl-key                    (No default value)\nmaster-user                       test\nmax-binlog-dump-events            0\nmax_allowed_packet                1048576\nmax_binlog_cache_size             18446744073709547520\nmax_binlog_size                   1073741824\nmax_connections                   151\nmax_connect_errors                10\nmax_delayed_threads               20\nmax_error_count                   64\nmax_heap_table_size               16777216\nmax_join_size                     18446744073709551615\nmax_length_for_sort_data          1024\nmax_prepared_stmt_count           16382\nmax_relay_log_size                0\nmax_seeks_for_key                 18446744073709551615\nmax_sort_length                   1024\nmax_sp_recursion_depth            0\nmax_tmp_tables                    32\nmax_user_connections              0\nmax_write_lock_count              18446744073709551615\nmemlock                           FALSE\nmin_examined_row_limit            0\nmulti_range_count                 256\nmyisam-recover                    OFF\nmyisam_block_size                 1024\nmyisam_data_pointer_size          6\nmyisam_max_extra_sort_file_size   2147483648\nmyisam_max_sort_file_size         9223372036853727232\nmyisam_repair_threads             1\nmyisam_sort_buffer_size           8388608\nmyisam_stats_method               nulls_unequal\nmyisam_use_mmap                   FALSE\nndb-use-copying-alter-table       FALSE\nnet_buffer_length                 16384\nnet_read_timeout                  30\nnet_retry_count                   10\nnet_write_timeout                 60\nnew                               FALSE\nold                               FALSE\nold-alter-table                   FALSE\nold-passwords                     FALSE\nold-style-user-limits             FALSE\nopen_files_limit                  1024\noptimizer_prune_level             1\noptimizer_search_depth            62\noptimizer_switch                  index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on\npid-file                          /tmp/12345/data/mysql_sandbox12345.pid\nplugin-load                       (No default value)\nplugin_dir                        /home/daniel/mysql_binaries/mysql-5.1.34-linux-x86_64-glibc23/lib/plugin\nport                              12345\nport-open-timeout                 0\npreload_buffer_size               32768\nprofiling_history_size            15\nquery_alloc_block_size            8192\nquery_cache_limit                 1048576\nquery_cache_min_res_unit          4096\nquery_cache_size                  0\nquery_cache_type                  1\nquery_cache_wlock_invalidate      FALSE\nquery_prealloc_size               8192\nrange_alloc_block_size            4096\nread_buffer_size                  131072\nread_only                         FALSE\nread_rnd_buffer_size              262144\nrecord_buffer                     131072\nrelay-log                         mysql-relay-bin\nrelay-log-index                   (No default value)\nrelay-log-info-file               relay-log.info\nrelay_log_purge                   TRUE\nrelay_log_space_limit             0\nreplicate-same-server-id          FALSE\nreport-host                       127.0.0.1\nreport-password                   (No default value)\nreport-port                       12345\nreport-user                       (No default value)\nrpl-recovery-rank                 0\nsafe-user-create                  FALSE\nsecure-auth                       FALSE\nsecure-file-priv                  (No default value)\nserver-id                         12345\nshow-slave-auth-info              FALSE\nskip-grant-tables                 FALSE\nskip-slave-start                  FALSE\nslave-exec-mode                   STRICT\nslave-load-tmpdir                 /tmp\nslave_compressed_protocol         FALSE\nslave_net_timeout                 3600\nslave_transaction_retries         10\nslow-query-log                    FALSE\nslow_launch_time                  2\nslow_query_log_file               (No default value)\nsocket                            /tmp/12345/mysql_sandbox12345.sock\nsort_buffer_size                  2097144\nsporadic-binlog-dump-fail         FALSE\nsql-mode                          OFF\nssl                               FALSE\nssl-ca                            (No default value)\nssl-capath                        (No default value)\nssl-cert                          (No default value)\nssl-cipher                        (No default value)\nssl-key                           (No default value)\n```\n\n----------------------------------------\n\nTITLE: Specifying Non-Primary Key Index for pt-archiver Source (CLI)\nDESCRIPTION: Refers to the usage of the `i` part within the `--source` command-line argument for `pt-archiver`. This allows specifying a non-primary key index for the tool to use when selecting rows. A bug was fixed where using this option incorrectly caused `--primary-key-only` to be ignored.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/rn.3-0-13.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--source ... i=<index_name> ...\n```\n\n----------------------------------------\n\nTITLE: Listing Running MySQL Processes in Shell\nDESCRIPTION: Output of a command (likely 'ps' with formatting options) showing three MySQL server instances running with different configuration files. Each line shows process ID, terminal, process state, CPU time used, and the full command including configuration paths.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/ps-mysqld-005.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n   PID TTY      STAT   TIME COMMAND\n  1427 ?        Sl     0:13 /home/jenkins/mysql-bin/mysql-5.5.24-i386-barebones/bin/mysqld --defaults-file=/tmp/12347/my.sandbox.cnf\n 20928 ?        Sl     0:07 /home/jenkins/mysql-bin/mysql-5.5.24-i386-barebones/bin/mysqld --defaults-file=/tmp/12345/my.sandbox.cnf\n 29930 ?        Sl     0:00 /home/jenkins/mysql-bin/mysql-5.5.24-i386-barebones/bin/mysqld --defaults-file=/tmp/12346/my.sandbox.cnf\n```\n\n----------------------------------------\n\nTITLE: Defining the --ignore Command-Line Option (Plaintext)\nDESCRIPTION: Defines the `--ignore` command-line option with its short form `-i`. Specifies that using this option causes the program to use `IGNORE` for `INSERT` statements.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--ignore  -i  Use IGNORE for INSERT statements\n```\n\n----------------------------------------\n\nTITLE: Describing host_summary_by_statement_latency Tables in MySQL\nDESCRIPTION: Shows the structure of host_summary_by_statement_latency and x$host_summary_by_statement_latency tables, which contain performance metrics for SQL statements grouped by host. These tables track metrics like total statement count, latency statistics, and row operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc host_summary_by_statement_latency;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| host          | varchar(60)   | YES  |     | NULL    |       |\n| total         | decimal(42,0) | YES  |     | NULL    |       |\n| total_latency | text          | YES  |     | NULL    |       |\n| max_latency   | text          | YES  |     | NULL    |       |\n| lock_latency  | text          | YES  |     | NULL    |       |\n| rows_sent     | decimal(42,0) | YES  |     | NULL    |       |\n| rows_examined | decimal(42,0) | YES  |     | NULL    |       |\n| rows_affected | decimal(42,0) | YES  |     | NULL    |       |\n| full_scans    | decimal(43,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n9 rows in set (0.29 sec)\n\nmysql> desc x$host_summary_by_statement_latency;\n+---------------+---------------+------+-----+---------+-------+\n| Field         | Type          | Null | Key | Default | Extra |\n+---------------+---------------+------+-----+---------+-------+\n| host          | varchar(60)   | YES  |     | NULL    |       |\n| total         | decimal(42,0) | YES  |     | NULL    |       |\n| total_latency | decimal(42,0) | YES  |     | NULL    |       |\n| max_latency   | decimal(42,0) | YES  |     | NULL    |       |\n| lock_latency  | decimal(42,0) | YES  |     | NULL    |       |\n| rows_sent     | decimal(42,0) | YES  |     | NULL    |       |\n| rows_examined | decimal(42,0) | YES  |     | NULL    |       |\n| rows_affected | decimal(42,0) | YES  |     | NULL    |       |\n| full_scans    | decimal(43,0) | YES  |     | NULL    |       |\n+---------------+---------------+------+-----+---------+-------+\n9 rows in set (0.54 sec)\n```\n\n----------------------------------------\n\nTITLE: Checking Perl Event Info for 'select...foo' Pattern\nDESCRIPTION: This Perl code snippet checks if the 'Info' key exists within the `$event` hash reference using `defined()`. If it exists, it then performs a regular expression match (`=~`) to see if the value associated with `$event->{Info}` contains the substring \"select\" followed by any characters (`.*`) and then the substring \"foo\". This is likely used to filter or identify specific SQL query events.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-kill/samples/filter002.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\ndefined($event->{Info}) && $event->{Info} =~ /select.*foo/\n```\n\n----------------------------------------\n\nTITLE: Defining Perl Language in Natural Docs Configuration\nDESCRIPTION: Configures Perl language with full language support through a dedicated Perl package, including shebang detection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_6\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Perl\n\n   Extensions: pl pm\n   Shebang String: perl\n   Ignore Variable Prefixes in Index: $ @ % *\n   Full Language Support: NaturalDocs::Languages::Perl\n```\n\n----------------------------------------\n\nTITLE: SQL Query Selecting Records for 'daniel'\nDESCRIPTION: SQL query to select all columns from table d.t where name equals 'daniel'\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump033.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from d.t where name=\"daniel\"\n```\n\n----------------------------------------\n\nTITLE: Describing user_summary_by_file_io Tables in MySQL Performance Schema\nDESCRIPTION: Shows the structure of user_summary_by_file_io and x$user_summary_by_file_io tables which summarize file I/O operations and latency per user. The x$ version provides raw data while the regular version formats metrics for human readability.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_93\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc user_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| user       | varchar(32)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | text          | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n3 rows in set (0.20 sec)\n\nmysql> desc x$user_summary_by_file_io;\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| user       | varchar(32)   | YES  |     | NULL    |       |\n| ios        | decimal(42,0) | YES  |     | NULL    |       |\n| io_latency | decimal(42,0) | YES  |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n3 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Running the update-modules Tool in Percona Toolkit\nDESCRIPTION: This Shell script updates the modules after making changes to the library code in the Percona Toolkit. It iterates over the tools in the bin directory to ensure each tool benefits from the changes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${HOME}/perldev/percona-toolkit\nfor t in bin/*; do util/update-modules ${t} collect; done\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncd ${HOME}/perldev/percona-toolkit\nfor t in bin/*; do util/update-modules ${t} NibbleIterator; done\n```\n\n----------------------------------------\n\nTITLE: Database Table Checksum Results Output\nDESCRIPTION: Tabular output showing checksum verification results for multiple database tables. Format includes ERRORS, DIFFS, ROWS, and SKIPPED columns followed by schema.table_name. All tables show 0 errors, 0 differences, and 0 skipped rows, with varying row counts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/default-results-5.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nERRORS DIFFS ROWS SKIPPED TABLE\n0 0 0 0 mysql.columns_priv\n0 0 0 0 mysql.db\n0 0 0 0 mysql.event\n0 0 0 0 mysql.func\n0 0 40 0 mysql.help_category\n0 0 473 0 mysql.help_keyword\n0 0 1045 0 mysql.help_relation\n0 0 529 0 mysql.help_topic\n0 0 0 0 mysql.ndb_binlog_index\n0 0 0 0 mysql.plugin\n0 0 0 0 mysql.proc\n0 0 0 0 mysql.procs_priv\n0 0 2 0 mysql.proxies_priv\n0 0 0 0 mysql.servers\n0 0 0 0 mysql.tables_priv\n0 0 0 0 mysql.time_zone\n0 0 0 0 mysql.time_zone_leap_second\n0 0 0 0 mysql.time_zone_name\n0 0 0 0 mysql.time_zone_transition\n0 0 0 0 mysql.time_zone_transition_type\n0 0 2 0 mysql.user\n0 0 22 0 percona_test.checksums\n0 0 1 0 percona_test.sentinel\n0 0 200 0 sakila.actor\n0 0 603 0 sakila.address\n0 0 16 0 sakila.category\n0 0 600 0 sakila.city\n0 0 109 0 sakila.country\n0 0 599 0 sakila.customer\n0 0 1000 0 sakila.film\n0 0 5462 0 sakila.film_actor\n0 0 1000 0 sakila.film_category\n0 0 1000 0 sakila.film_text\n0 0 4581 0 sakila.inventory\n0 0 6 0 sakila.language\n0 0 16049 0 sakila.payment\n0 0 16044 0 sakila.rental\n0 0 2 0 sakila.staff\n0 0 2 0 sakila.store\n```\n\n----------------------------------------\n\nTITLE: Filtered Event Analysis - Bash\nDESCRIPTION: Example of filtering logs by specific event types\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer list --sst --views *.log\n```\n\n----------------------------------------\n\nTITLE: Selecting and Listing Tables/Aliases in SQL\nDESCRIPTION: This snippet includes multiple SELECT statements targeting tables or aliases t1, t2, t3, and z. It also uses a non-standard `TLIST` keyword, possibly specific to a tool or context, applied to the same tables/aliases. The surrounding text provides a unique identifier `Query_id: 0xB8671B9CC6DAF29409CB59D3450EF6E8.1`.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/out/slow001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT t1\nSELECT t2\nSELECT t3\nSELECT z\nTLIST t1\nTLIST t2\nTLIST t3\nTLIST z\n```\n\n----------------------------------------\n\nTITLE: Finalizing MySQL Binary Log\nDESCRIPTION: Ends the binary log file with a rollback command and resets the COMPLETION_TYPE to its original value.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog002.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared SELECT Statement in SQL\nDESCRIPTION: Executes a previously prepared SQL statement. Based on the context, this likely executes the statement prepared in Query 1 (SELECT * FROM d.t WHERE 1 LIMIT 1;). The performance metrics associated with Query 2 reflect the execution phase.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nEXECUTE SELECT * FROM d.t WHERE 1 LIMIT 1;\\G\n```\n\n----------------------------------------\n\nTITLE: Defining Ruby Language in Natural Docs Configuration\nDESCRIPTION: Configures Ruby language properties including variable prefix handling and prototype parsing rules.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_15\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Ruby\n\n   Extension: rb\n   Shebang String: ruby\n   Ignore Variable Prefixes in Index: $ @ @@\n   Line Comment: #\n   Enum Values: Under parent\n   Function Prototype Enders: ; \\n\n   Variable Prototype Enders: ; \\n =\n   Line Extender: \\\n```\n\n----------------------------------------\n\nTITLE: Adding Ping Functionality to pt-agent (Bash)\nDESCRIPTION: Introduces the `--ping` option for the `pt-agent` tool. This option likely serves as a basic health check to verify if the agent process is running and responsive. Note: `pt-agent` was subsequently replaced by `percona-agent` in later developments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Example: Check agent status\npt-agent --ping\n```\n\n----------------------------------------\n\nTITLE: Detecting and Reporting SQL Execution Errors in Perl\nDESCRIPTION: This Perl snippet utilizes DBD::mysql to execute a SQL statement and reports any errors found during execution. The key functionality is to capture differences in query results, identifying problems such as missing columns. It requires the DBD::mysql module to interact with MySQL databases and expects valid SQL queries with correctly specified column names.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host1.txt#2025-04-22_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\nDBD::mysql::st execute failed: Unknown column 'host2_col' in 'field list' [for Statement \"select host2_col from test.t\"]\n```\n\n----------------------------------------\n\nTITLE: Main Checksum Generation SQL Query\nDESCRIPTION: Generates CRC32 checksums for rental table records within specified boundaries using rental_date and inventory_id columns. Includes concatenated values of all relevant columns and handles null values for return_date.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-checksum/samples/n-chunk-index-cols.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREPLACE INTO `percona`.`checksums` (db, tbl, chunk, chunk_index, lower_boundary, upper_boundary, this_cnt, this_crc) SELECT ?, ?, ?, ?, ?, ?, COUNT(*) AS cnt, COALESCE(LOWER(CONV(BIT_XOR(CAST(CRC32(CONCAT_WS('#', `rental_id`, `rental_date`, `inventory_id`, `customer_id`, `return_date`, `staff_id`, UNIX_TIMESTAMP(`last_update`), CONCAT(ISNULL(`return_date`)))) AS UNSIGNED)), 10, 16)), 0) AS crc FROM `sakila`.`rental` FORCE INDEX(`rental_date`) WHERE ((`rental_date` > ?) OR (`rental_date` = ? AND `inventory_id` >= ?)) AND ((`rental_date` < ?) OR (`rental_date` = ? AND `inventory_id` <= ?)) /*checksum chunk*/\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Commands\nDESCRIPTION: Commands to show table creation and status information for the trees table in the food database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_1-57.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `food`.`trees`\\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating Film Table in SQL\nDESCRIPTION: Defines the film table schema with fields for movie details including title, description, rental information and ratings. Contains foreign keys to language table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `film` (\n  `film_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL,\n  `description` text,\n  `release_year` year(4) DEFAULT NULL,\n  `language_id` tinyint(3) unsigned NOT NULL,\n  `original_language_id` tinyint(3) unsigned DEFAULT NULL,\n  `rental_duration` tinyint(3) unsigned NOT NULL DEFAULT '3',\n  `rental_rate` decimal(4,2) NOT NULL DEFAULT '4.99',\n  `length` smallint(5) unsigned DEFAULT NULL,\n  `replacement_cost` decimal(5,2) NOT NULL DEFAULT '19.99',\n  `rating` enum('G','PG','PG-13','R','NC-17') DEFAULT 'G',\n  `special_features` set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`),\n  KEY `idx_title` (`title`),\n  KEY `idx_fk_language_id` (`language_id`),\n  KEY `idx_fk_original_language_id` (`original_language_id`),\n  CONSTRAINT `fk_film_language` FOREIGN KEY (`language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_language_original` FOREIGN KEY (`original_language_id`) REFERENCES `language` (`language_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Tcl Language in Natural Docs Configuration\nDESCRIPTION: Configures Tcl language properties, including multiple shebang identifiers and a custom package separator.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_14\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Tcl\n\n   Extensions: tcl exp\n   Shebang Strings: tclsh wish expect\n   Line Comment: #\n   Package Separator: ::\n   Function Prototype Enders: ; {\n   Variable Prototype Enders: ; \\n\n   Line Extender: \\\n   Perl Package: NaturalDocs::Languages::Tcl\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet Capture Data\nDESCRIPTION: This snippet shows the raw hexadecimal dump of TCP packets exchanged between two local endpoints. It includes IP headers, TCP headers, and payload data, providing insights into the TCP connection lifecycle and data transfer.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump043.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2013-01-24 13:03:25.136681 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4510 0040 ea0e 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d49 0000 0000\n\t0x0020:  b002 ffff fe34 0000 0204 3fd8 0103 0303\n\t0x0030:  0101 080a 0581 1055 0000 0000 0402 0000\n2013-01-24 13:03:25.136728 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 0\n\t0x0000:  4500 0040 dc6f 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 6881 ad71 3d4a\n\t0x0020:  b012 ffff fe34 0000 0204 3fd8 0103 0303\n\t0x0030:  0101 080a 0581 1055 0581 1055 0402 0000\n2013-01-24 13:03:25.136737 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4510 0034 0e53 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d4a 7d01 6882\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1055\n\t0x0030:  0581 1055\n2013-01-24 13:03:25.136746 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 0\n\t0x0000:  4500 0034 f54e 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 6882 ad71 3d4a\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1055\n\t0x0030:  0581 1055\n2013-01-24 13:03:25.146062 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 60\n\t0x0000:  4508 0070 6334 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 6882 ad71 3d4a\n\t0x0020:  8018 ffff fe64 0000 0101 080a 0581 1055\n\t0x0030:  0581 1055 3800 0000 0a35 2e31 2e35 332d\n\t0x0040:  6c6f 6700 1b00 0000 4d34 5946 3267 3260\n\t0x0050:  00ff f708 0200 0000 0000 0000 0000 0000\n\t0x0060:  0000 006c 225e 3633 3a6c 3048 5863 6800\n2013-01-24 13:03:25.146080 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4510 0034 3e79 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d4a 7d01 68be\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1055\n\t0x0030:  0581 1055\n2013-01-24 13:03:28.672802 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 15\n\t0x0000:  4510 0043 145a 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d4a 7d01 68be\n\t0x0020:  8018 ffff fe37 0000 0101 080a 0581 1079\n\t0x0030:  0581 1055 6865 6c6c 6f2c 2077 6f72 6c64\n\t0x0040:  210d 0a\n2013-01-24 13:03:28.672856 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 0\n\t0x0000:  4508 0034 b07b 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 68be ad71 3d59\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n2013-01-24 13:03:28.672987 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 31\n\t0x0000:  4508 0053 6336 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 68be ad71 3d59\n\t0x0020:  8018 ffff fe47 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079 1b00 0001 ff84 0447 6f74 2070\n\t0x0040:  6163 6b65 7473 206f 7574 206f 6620 6f72\n\t0x0050:  6465 72\n2013-01-24 13:03:28.673017 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4510 0034 fb76 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d59 7d01 68dd\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n2013-01-24 13:03:28.673103 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 0\n\t0x0000:  4508 0034 ae21 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 68dd ad71 3d59\n\t0x0020:  8011 ffff fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n2013-01-24 13:03:28.673139 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4510 0034 d821 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d59 7d01 68de\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n2013-01-24 13:03:28.673156 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 0\n\t0x0000:  4508 0034 ab2e 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 68de ad71 3d59\n\t0x0020:  8010 ffff fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n2013-01-24 13:03:28.673444 IP 127.0.0.1.62160 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4510 0034 e03d 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 f2d0 3039 ad71 3d59 7d01 68de\n\t0x0020:  8011 ffff fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n2013-01-24 13:03:28.673464 IP 127.0.0.1.12345 > 127.0.0.1.62160: tcp 0\n\t0x0000:  4508 0034 b22d 4000 4006 0000 7f00 0001\n\t0x0010:  7f00 0001 3039 f2d0 7d01 68de ad71 3d5a\n\t0x0020:  8010 fffe fe28 0000 0101 080a 0581 1079\n\t0x0030:  0581 1079\n```\n\n----------------------------------------\n\nTITLE: Listing General Kubernetes Resources Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet lists the standard Kubernetes and custom resource types collected by `pt-k8s-debug-collector` by default or when not targeting a specific Percona product. The list includes core resources like pods, deployments, statefulsets, events, configmaps, RBAC components, storage resources, and potentially custom resources specified via the 'resource' flag.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pods\",\n\"replicasets\",\n\"deployments\",\n\"statefulsets\",\n\"replicationcontrollers\",\n\"events\",\n\"configmaps\",\n\"cronjobs\",\n\"jobs\",\n\"podsecuritypolicies\",\n\"poddisruptionbudgets\",\n\"perconaxtradbbackups\",\n\"perconaxtradbclusterbackups\",\n\"perconaxtradbclusterrestores\",\n\"perconaxtradbclusters\",\n\"clusterrolebindings\",\n\"clusterroles\",\n\"rolebindings\",\n\"roles\",\n\"storageclasses\",\n\"persistentvolumeclaims\",\n\"persistentvolumes\",\n\"modes\",\n\"your-custom-resource\" (depends on 'resource' flag)\n```\n\n----------------------------------------\n\nTITLE: Kernel Boot Log for Hardware Device Initialization\nDESCRIPTION: This log shows the Linux kernel boot process, focusing on device initialization for network interfaces (eth0-eth5), SCSI storage, and USB peripherals. It includes detailed information about IRQ assignments, PCI device addresses, and hardware capabilities.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-002.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[    3.498471] 0000:05:00.0: eth0: MAC: 0, PHY: 4, PBA No: d50868-004\n[    3.498500]   alloc irq_desc for 17 on node -1\n[    3.498502]   alloc kstat_irqs on node -1\n[    3.498507] e1000e 0000:05:00.1: PCI INT B -> GSI 17 (level, low) -> IRQ 17\n[    3.498526] e1000e 0000:05:00.1: setting latency timer to 64\n[    3.498608]   alloc irq_desc for 41 on node -1\n[    3.498610]   alloc kstat_irqs on node -1\n[    3.498619] e1000e 0000:05:00.1: irq 41 for MSI/MSI-X\n[    3.508345] igb 0000:07:00.0: Intel(R) Gigabit Ethernet Network Connection\n[    3.508348] igb 0000:07:00.0: eth1: (PCIe:2.5Gb/s:Width x4) 00:30:48:ce:88:ca\n[    3.508426] igb 0000:07:00.0: eth1: PBA No: 0100ff-0ff\n[    3.508429] igb 0000:07:00.0: Using MSI-X interrupts. 8 rx queue(s), 8 tx queue(s)\n[    3.508446] igb 0000:07:00.1: PCI INT B -> GSI 17 (level, low) -> IRQ 17\n[    3.508466] igb 0000:07:00.1: setting latency timer to 64\n[    3.508710]   alloc irq_desc for 42 on node -1\n[    3.508712]   alloc kstat_irqs on node -1\n[    3.508716] igb 0000:07:00.1: irq 42 for MSI/MSI-X\n[    3.508718]   alloc irq_desc for 43 on node -1\n[    3.508720]   alloc kstat_irqs on node -1\n[    3.508723] igb 0000:07:00.1: irq 43 for MSI/MSI-X\n[    3.508725]   alloc irq_desc for 44 on node -1\n[    3.508726]   alloc kstat_irqs on node -1\n[    3.508729] igb 0000:07:00.1: irq 44 for MSI/MSI-X\n[    3.508731]   alloc irq_desc for 45 on node -1\n[    3.508733]   alloc kstat_irqs on node -1\n[    3.508736] igb 0000:07:00.1: irq 45 for MSI/MSI-X\n[    3.508738]   alloc irq_desc for 46 on node -1\n[    3.508740]   alloc kstat_irqs on node -1\n[    3.508743] igb 0000:07:00.1: irq 46 for MSI/MSI-X\n[    3.508745]   alloc irq_desc for 47 on node -1\n[    3.508747]   alloc kstat_irqs on node -1\n[    3.508750] igb 0000:07:00.1: irq 47 for MSI/MSI-X\n[    3.508752]   alloc irq_desc for 48 on node -1\n[    3.508753]   alloc kstat_irqs on node -1\n[    3.508757] igb 0000:07:00.1: irq 48 for MSI/MSI-X\n[    3.508758]   alloc irq_desc for 49 on node -1\n[    3.508760]   alloc kstat_irqs on node -1\n[    3.508763] igb 0000:07:00.1: irq 49 for MSI/MSI-X\n[    3.508765]   alloc irq_desc for 50 on node -1\n[    3.508767]   alloc kstat_irqs on node -1\n[    3.508770] igb 0000:07:00.1: irq 50 for MSI/MSI-X\n[    3.508810] igb 0000:07:00.1: 0 vfs allocated\n[    3.565401] AAC0: kernel 5.2-0[17544] Nov  7 2009\n[    3.565404] AAC0: monitor 5.2-0[17544]\n[    3.565407] AAC0: bios 5.2-0[17544]\n[    3.565410] AAC0: serial 0A05114AFDF\n[    3.565411] AAC0: Non-DASD support enabled.\n[    3.565413] AAC0: 64bit support enabled.\n[    3.565415] AAC0: 64 Bit DAC enabled\n[    3.572429] scsi0 : aacraid\n[    3.572634] scsi 0:0:0:0: Direct-Access     Adaptec  Raid10           V1.0 PQ: 0 ANSI: 2\n[    3.582206] scsi 0:1:0:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.582675] scsi 0:1:1:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.583130] scsi 0:1:2:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.583587] scsi 0:1:3:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.584043] scsi 0:1:4:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.584502] scsi 0:1:5:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.584957] scsi 0:1:6:0: Direct-Access     FUJITSU  MBA3300RC        0103 PQ: 1 ANSI: 5\n[    3.624770] sd 0:0:0:0: [sda] 1755310080 512-byte logical blocks: (898 GB/836 GiB)\n[    3.624775] sd 0:0:0:0: Attached scsi generic sg0 type 0\n[    3.624793] sd 0:0:0:0: [sda] Write Protect is off\n[    3.624796] sd 0:0:0:0: [sda] Mode Sense: 06 00 10 00\n[    3.624824] sd 0:0:0:0: [sda] Write cache: disabled, read cache: enabled, supports DPO and FUA\n[    3.624909] scsi 0:1:0:0: Attached scsi generic sg1 type 0\n[    3.624964]  sda:\n[    3.625008] scsi 0:1:1:0: Attached scsi generic sg2 type 0\n[    3.625045]  sda1 sda2\n[    3.625162] scsi 0:1:2:0: Attached scsi generic sg3 type 0\n[    3.625264] scsi 0:1:3:0: Attached scsi generic sg4 type 0\n[    3.625286] sd 0:0:0:0: [sda] Attached SCSI removable disk\n[    3.625358] scsi 0:1:4:0: Attached scsi generic sg5 type 0\n[    3.625453] scsi 0:1:5:0: Attached scsi generic sg6 type 0\n[    3.625554] scsi 0:1:6:0: Attached scsi generic sg7 type 0\n[    3.724917] ata1: SATA link down (SStatus 0 SControl 300)\n[    3.727981] 0000:05:00.1: eth2: (PCI Express:2.5GB/s:Width x4) 00:15:17:dd:ab:e1\n[    3.727984] 0000:05:00.1: eth2: Intel(R) PRO/1000 Network Connection\n[    3.728062] 0000:05:00.1: eth2: MAC: 0, PHY: 4, PBA No: d50868-004\n[    3.737971] igb 0000:07:00.1: Intel(R) Gigabit Ethernet Network Connection\n[    3.737975] igb 0000:07:00.1: eth3: (PCIe:2.5Gb/s:Width x4) 00:30:48:ce:88:cb\n[    3.738052] igb 0000:07:00.1: eth3: PBA No: 0100ff-0ff\n[    3.738055] igb 0000:07:00.1: Using MSI-X interrupts. 8 rx queue(s), 8 tx queue(s)\n[    3.738072] igb 0000:04:00.0: PCI INT A -> GSI 16 (level, low) -> IRQ 16\n[    3.738092] igb 0000:04:00.0: setting latency timer to 64\n[    3.738333]   alloc irq_desc for 51 on node -1\n[    3.738335]   alloc kstat_irqs on node -1\n[    3.738339] igb 0000:04:00.0: irq 51 for MSI/MSI-X\n[    3.738341]   alloc irq_desc for 52 on node -1\n[    3.738343]   alloc kstat_irqs on node -1\n[    3.738346] igb 0000:04:00.0: irq 52 for MSI/MSI-X\n[    3.738348]   alloc irq_desc for 53 on node -1\n[    3.738350]   alloc kstat_irqs on node -1\n[    3.738353] igb 0000:04:00.0: irq 53 for MSI/MSI-X\n[    3.738355]   alloc irq_desc for 54 on node -1\n[    3.738357]   alloc kstat_irqs on node -1\n[    3.738360] igb 0000:04:00.0: irq 54 for MSI/MSI-X\n[    3.738362]   alloc irq_desc for 55 on node -1\n[    3.738364]   alloc kstat_irqs on node -1\n[    3.738366] igb 0000:04:00.0: irq 55 for MSI/MSI-X\n[    3.738369]   alloc irq_desc for 56 on node -1\n[    3.738370]   alloc kstat_irqs on node -1\n[    3.738373] igb 0000:04:00.0: irq 56 for MSI/MSI-X\n[    3.738375]   alloc irq_desc for 57 on node -1\n[    3.738377]   alloc kstat_irqs on node -1\n[    3.738380] igb 0000:04:00.0: irq 57 for MSI/MSI-X\n[    3.738382]   alloc irq_desc for 58 on node -1\n[    3.738384]   alloc kstat_irqs on node -1\n[    3.738387] igb 0000:04:00.0: irq 58 for MSI/MSI-X\n[    3.738389]   alloc irq_desc for 59 on node -1\n[    3.738391]   alloc kstat_irqs on node -1\n[    3.738394] igb 0000:04:00.0: irq 59 for MSI/MSI-X\n[    3.738433] igb 0000:04:00.0: 0 vfs allocated\n[    3.864631] usb 5-2: new full speed USB device using uhci_hcd and address 2\n[    3.967552] igb 0000:04:00.0: Intel(R) Gigabit Ethernet Network Connection\n[    3.967556] igb 0000:04:00.0: eth4: (PCIe:2.5Gb/s:Width x4) 00:30:48:ce:88:c8\n[    3.967633] igb 0000:04:00.0: eth4: PBA No: 0100ff-0ff\n[    3.967635] igb 0000:04:00.0: Using MSI-X interrupts. 8 rx queue(s), 8 tx queue(s)\n[    3.967652] igb 0000:04:00.1: PCI INT B -> GSI 17 (level, low) -> IRQ 17\n[    3.967671] igb 0000:04:00.1: setting latency timer to 64\n[    3.967913]   alloc irq_desc for 60 on node -1\n[    3.967915]   alloc kstat_irqs on node -1\n[    3.967919] igb 0000:04:00.1: irq 60 for MSI/MSI-X\n[    3.967921]   alloc irq_desc for 61 on node -1\n[    3.967923]   alloc kstat_irqs on node -1\n[    3.967926] igb 0000:04:00.1: irq 61 for MSI/MSI-X\n[    3.967928]   alloc irq_desc for 62 on node -1\n[    3.967930]   alloc kstat_irqs on node -1\n[    3.967933] igb 0000:04:00.1: irq 62 for MSI/MSI-X\n[    3.967935]   alloc irq_desc for 63 on node -1\n[    3.967937]   alloc kstat_irqs on node -1\n[    3.967940] igb 0000:04:00.1: irq 63 for MSI/MSI-X\n[    3.967942]   alloc irq_desc for 64 on node -1\n[    3.967944]   alloc kstat_irqs on node -1\n[    3.967947] igb 0000:04:00.1: irq 64 for MSI/MSI-X\n[    3.967949]   alloc irq_desc for 65 on node -1\n[    3.967951]   alloc kstat_irqs on node -1\n[    3.967954] igb 0000:04:00.1: irq 65 for MSI/MSI-X\n[    3.967956]   alloc irq_desc for 66 on node -1\n[    3.967957]   alloc kstat_irqs on node -1\n[    3.967960] igb 0000:04:00.1: irq 66 for MSI/MSI-X\n[    3.967962]   alloc irq_desc for 67 on node -1\n[    3.967964]   alloc kstat_irqs on node -1\n[    3.967967] igb 0000:04:00.1: irq 67 for MSI/MSI-X\n[    3.967969]   alloc irq_desc for 68 on node -1\n[    3.967971]   alloc kstat_irqs on node -1\n[    3.967974] igb 0000:04:00.1: irq 68 for MSI/MSI-X\n[    3.968014] igb 0000:04:00.1: 0 vfs allocated\n[    4.043060] usb 5-2: configuration #1 chosen from 1 choice\n[    4.091856] ata2: SATA link down (SStatus 0 SControl 300)\n[    4.092430] usbcore: registered new interface driver hiddev\n[    4.098071] input: American Megatrends Inc. Virtual Keyboard and Mouse as /devices/pci0000:00/0000:00:1a.2/usb5/5-2/5-2:1.0/input/input3\n[    4.098135] generic-usb 0003:046B:FF10.0001: input,hidraw0: USB HID v1.10 Keyboard [American Megatrends Inc. Virtual Keyboard and Mouse] on usb-0000:00:1a.2-2/input0\n[    4.114016] input: American Megatrends Inc. Virtual Keyboard and Mouse as /devices/pci0000:00/0000:00:1a.2/usb5/5-2/5-2:1.1/input/input4\n[    4.114094] generic-usb 0003:046B:FF10.0002: input,hidraw1: USB HID v1.10 Mouse [American Megatrends Inc. Virtual Keyboard and Mouse] on usb-0000:00:1a.2-2/input1\n[    4.114111] usbcore: registered new interface driver usbhid\n[    4.114113] usbhid: v2.6:USB HID core driver\n[    4.204723] igb 0000:04:00.1: Intel(R) Gigabit Ethernet Network Connection\n[    4.204726] igb 0000:04:00.1: eth5: (PCIe:2.5Gb/s:Width x4) 00:30:48:ce:88:c9\n[    4.204803] igb 0000:04:00.1: eth5: PBA No: 0100ff-0ff\n[    4.204805] igb 0000:04:00.1: Using MSI-X interrupts. 8 rx queue(s), 8 tx queue(s)\n[    4.361277] usb 6-1: new low speed USB device using uhci_hcd and address 2\n[    4.461165] ata3: SATA link down (SStatus 0 SControl 300)\n[    4.547308] usb 6-1: configuration #1 chosen from 1 choice\n[    4.581365] input: Motorola USB Keyboard & Mouse as /devices/pci0000:00/0000:00:1d.0/usb6/6-1/6-1:1.0/input/input5\n[    4.581488] generic-usb 0003:1061:0101.0003: input,hidraw2: USB HID v1.11 Keyboard [Motorola USB Keyboard & Mouse] on usb-0000:00:1d.0-1/input0\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line Option Types (Plaintext)\nDESCRIPTION: Lists the abbreviations used internally or in documentation to specify the expected data type for command-line options. Includes types like string, integer, float, list, DSN, size, and time.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nOption types: s=string, i=integer, f=float, h/H/a/A=comma-separated list, d=DSN, z=size, m=time\n```\n\n----------------------------------------\n\nTITLE: Showing Table Status in MySQL\nDESCRIPTION: This SQL command displays the status of the 'trees' table in the 'food' database. It provides metadata about the table structure and current state.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1-57.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\n----------------------------------------\n\nTITLE: Selecting Sequential Constant Values from 'foo' Table in SQL\nDESCRIPTION: Represents a pattern of simple SQL SELECT queries found repeatedly in the log. Each query selects a constant integer value (incrementing sequentially in the log, starting from 995) from a table named 'foo'. Associated comments provide metadata like query time, lock time, rows sent/examined, user, thread ID, and schema, indicating these are logged database operations. This pattern repeats numerous times with incrementing integer values and corresponding thread IDs.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 995 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 996 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 996 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 997 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 997 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 998 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 998 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 999 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 999 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1000 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1000 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1001 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1001 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1002 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1002 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1003 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1003 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1004 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1004 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1005 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1005 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1006 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1006 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1007 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1007 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1008 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1008 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1009 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1009 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1010 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1010 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1011 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1011 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1012 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1012 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1013 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1013 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1014 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1014 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1015 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1015 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1016 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1016 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1017 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1017 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1018 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1018 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1019 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1019 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1020 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1020 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1021 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1021 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1022 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1022 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1023 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1023 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1024 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1024 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1025 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1025 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1026 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1026 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1027 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1027 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1028 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1028 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1029 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1029 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1030 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1030 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1031 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1031 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1032 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1032 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1033 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1033 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1034 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1034 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1035 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1035 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1036 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1036 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1037 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1037 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1038 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1038 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1039 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1039 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1040 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1040 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1041 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1041 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1042 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1042 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 1043 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 1043 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet enumerates the Kubernetes resources that the tool collects data from. It includes a wide range of resources such as pods, deployments, configmaps, and custom resources specific to Percona database systems.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pods\",\n\"replicasets\",\n\"deployments\",\n\"statefulsets\",\n\"replicationcontrollers\",\n\"events\",\n\"configmaps\",\n\"cronjobs\",\n\"jobs\",\n\"podsecuritypolicies\",\n\"poddisruptionbudgets\",\n\"perconaxtradbbackups\",\n\"perconaxtradbclusterbackups\",\n\"perconaxtradbclusterrestores\",\n\"perconaxtradbclusters\",\n\"clusterrolebindings\",\n\"clusterroles\",\n\"rolebindings\",\n\"roles\",\n\"storageclasses\",\n\"persistentvolumeclaims\",\n\"persistentvolumes\",\n\"modes\",\n\"your-custom-resource\" (depends on 'resource' flag)\n```\n\n----------------------------------------\n\nTITLE: Initializing Network and TCP Configurations\nDESCRIPTION: This snippet shows the initialization of network protocols and TCP configurations. It includes registering network protocols and setting up hash tables for IP routing and TCP connections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-001.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNET: Registered protocol family 2\nIP route cache hash table entries: 524288 (order: 10, 4194304 bytes)\nTCP established hash table entries: 524288 (order: 11, 8388608 bytes)\nTCP bind hash table entries: 65536 (order: 8, 1048576 bytes)\nTCP: Hash tables configured (established 524288 bind 65536)\nTCP reno registered\nNET: Registered protocol family 1\n```\n\n----------------------------------------\n\nTITLE: Initializing PCIe Port Services and Drivers\nDESCRIPTION: This snippet demonstrates the initialization of PCIe port services and drivers. It shows the process of setting up PCIe ports, allocating port services, and loading service drivers like AER (Advanced Error Reporting).\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-001.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npcieport-driver 0000:00:02.0: setting latency timer to 64\npcieport-driver 0000:00:02.0: found MSI capability\npci_express 0000:00:02.0:pcie00: allocate port service\npci_express 0000:00:02.0:pcie01: allocate port service\npcieport-driver 0000:00:03.0: setting latency timer to 64\npcieport-driver 0000:00:03.0: found MSI capability\npci_express 0000:00:03.0:pcie00: allocate port service\npci_express 0000:00:03.0:pcie01: allocate port service\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Statistics (Snapshot 2)\nDESCRIPTION: This snippet presents the second snapshot of disk I/O statistics, captured at timestamp 2.0. It follows the same format as the previous snapshot, providing performance metrics for various storage devices.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  2.0 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sda           0.0    0.0     3.0     0.0    0.0     0.1   1%      0\n  2.0 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sda6          0.0    0.0     3.0     0.0    0.0     0.1   1%      0\n  2.0 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 dm-6          0.0    0.0     3.0     0.1    0.0     0.2   1%      0\n  2.0 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL Schema Redundant Indexes Structure\nDESCRIPTION: Shows the structure of schema_redundant_indexes and x$schema_flattened_keys views that help identify redundant indexes. These views analyze index definitions to find overlapping indexes where one index might make another redundant.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_56\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.schema_redundant_indexes;\n+----------------------------+--------------+------+-----+---------+-------+\n| Field                      | Type         | Null | Key | Default | Extra |\n+----------------------------+--------------+------+-----+---------+-------+\n| table_schema               | varchar(64)  | NO   |     |         |       |\n| table_name                 | varchar(64)  | NO   |     |         |       |\n| redundant_index_name       | varchar(64)  | NO   |     |         |       |\n| redundant_index_columns    | text         | YES  |     | NULL    |       |\n| redundant_index_non_unique | bigint(1)    | YES  |     | NULL    |       |\n| dominant_index_name        | varchar(64)  | NO   |     |         |       |\n| dominant_index_columns     | text         | YES  |     | NULL    |       |\n| dominant_index_non_unique  | bigint(1)    | YES  |     | NULL    |       |\n| subpart_exists             | int(1)       | NO   |     | 0       |       |\n| sql_drop_index             | varchar(223) | YES  |     | NULL    |       |\n+----------------------------+--------------+------+-----+---------+-------+\n10 rows in set (0.00 sec)\n\nmysql> desc sys.x$schema_flattened_keys;\n+----------------+-------------+------+-----+---------+-------+\n| Field          | Type        | Null | Key | Default | Extra |\n+----------------+-------------+------+-----+---------+-------+\n| table_schema   | varchar(64) | NO   |     |         |       |\n| table_name     | varchar(64) | NO   |     |         |       |\n| index_name     | varchar(64) | NO   |     |         |       |\n| non_unique     | bigint(1)   | YES  |     | NULL    |       |\n| subpart_exists | bigint(1)   | YES  |     | NULL    |       |\n| index_columns  | text        | YES  |     | NULL    |       |\n+----------------+-------------+------+-----+---------+-------+\n6 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Common Parameter Style - Comma Separated with Space-Based Types\nDESCRIPTION: Function declaration pattern used in C++, Java, C#, JavaScript, Python, PHP, and Ruby. Parameters are comma-separated with optional type declarations and default values separated by spaces.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/Languages.txt#2025-04-22_snippet_0\n\nLANGUAGE: generic\nCODE:\n```\nFunctionName ( type indentifier, type identifier = value, modifier type identifier )\nFunctionName ( indentifier, identifier = value )\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Interval in pt-stalk (Bash)\nDESCRIPTION: Adds the `--sleep-collect` option to `pt-stalk`. This option allows users to specify the sleep duration (in seconds) *between* data collection iterations when a trigger condition is met. It controls how frequently detailed diagnostics are gathered while the triggering condition persists.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Example: Collect data every 5 seconds when triggered\npt-stalk --sleep-collect 5 [other_options]\n```\n\n----------------------------------------\n\nTITLE: IO Global File Bytes Structure Definition\nDESCRIPTION: Shows the table structure for io_global_by_file_by_bytes and x$io_global_by_file_by_bytes views that track global IO consumption by file.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\ndesc io_global_by_file_by_bytes;\ndesc x$io_global_by_file_by_bytes;\n```\n\n----------------------------------------\n\nTITLE: Defining the Staff Table Structure and Constraints in MySQL SQL\nDESCRIPTION: Creates the 'staff' table to store employee information for the Sakila database, including columns for staff ID, personal details, store and address references, login details, and update tracking. The table has primary and foreign keys to enforce data integrity, with columns for picture blobs and optional email/password. Requires the 'store' and 'address' tables to exist for foreign key enforcement, using the InnoDB storage engine and utf8 charset.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/resume-from-ignored-sakila-payment.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Defining Assembly Language in Natural Docs Configuration\nDESCRIPTION: Configures Assembly language properties with semicolon line comments and backslash line extension.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_12\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Assembly\n\n   Extension: asm\n   Line Comment: ;\n   Variable Prototype Ender: \\n\n   Line Extender: \\\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table in SQL\nDESCRIPTION: Defines the staff table schema for store employees. Contains foreign keys to store and address tables, includes login credentials.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL File I/O Type Summary Sample Query\nDESCRIPTION: Example query showing detailed file I/O metrics broken down by event type and user, including totals and latency statistics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_89\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from user_summary_by_file_io_type;\n+------------+--------------------------------------+-------+-----------+-------------+\n| user       | event_name                           | total | latency   | max_latency |\n+------------+--------------------------------------+-------+-----------+-------------+\n| background | wait/io/file/innodb/innodb_data_file |  1434 | 3.29 s    | 147.56 ms   |\n| background | wait/io/file/sql/FRM                 |   910 | 286.61 ms | 32.92 ms    |\n| root       | wait/io/file/sql/file_parser         | 11048 | 48.79 s   | 201.11 ms   |\n| root       | wait/io/file/innodb/innodb_data_file |  4699 | 3.02 s    | 46.93 ms    |\n+------------+--------------------------------------+-------+-----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status for 'trees' Table in MySQL\nDESCRIPTION: This command fetches the status information for the 'trees' table in the 'food' database. It provides details about table size, row count, and other metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_json_2-80.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\\G\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Development\nDESCRIPTION: This snippet outlines the creation of a new git branch with a name referencing a Jira ticket. It assumes the presence of git and a cloned repository, and helps developers manage new features or bug fixes systematically.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b PT-9999_functionality_name\n```\n\n----------------------------------------\n\nTITLE: Defining ActionScript Language in Natural Docs Configuration\nDESCRIPTION: Configures ActionScript language with full language support through a dedicated Perl package.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_17\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: ActionScript\n\n   Extensions: as mxml\n   Full Language Support: NaturalDocs::Languages::ActionScript\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Table\nDESCRIPTION: This SQL statement creates the 'user' table in the MySQL system database. It defines columns for user authentication, privileges, and connection limits. The table uses MyISAM engine with UTF-8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `user` (\n  `Host` char(60) collate utf8_bin NOT NULL default '',\n  `User` char(16) collate utf8_bin NOT NULL default '',\n  `Password` char(41) character set latin1 collate latin1_bin NOT NULL default '',\n  `Select_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Insert_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Update_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Delete_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Drop_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Reload_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Shutdown_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Process_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `File_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Grant_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `References_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Index_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_db_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Super_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_tmp_table_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Lock_tables_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Execute_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_slave_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Repl_client_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Show_view_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Alter_routine_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `Create_user_priv` enum('N','Y') character set utf8 NOT NULL default 'N',\n  `ssl_type` enum('','ANY','X509','SPECIFIED') character set utf8 NOT NULL default '',\n  `ssl_cipher` blob NOT NULL,\n  `x509_issuer` blob NOT NULL,\n  `x509_subject` blob NOT NULL,\n  `max_questions` int(11) unsigned NOT NULL default '0',\n  `max_updates` int(11) unsigned NOT NULL default '0',\n  `max_connections` int(11) unsigned NOT NULL default '0',\n  `max_user_connections` int(11) unsigned NOT NULL default '0',\n  PRIMARY KEY  (`Host`,`User`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Table in MySQL\nDESCRIPTION: Defines payment transaction table with relationships to customer, staff, and rental records using InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `payment` (\n  `payment_id` smallint unsigned NOT NULL AUTO_INCREMENT,\n  `customer_id` smallint unsigned NOT NULL,\n  `staff_id` tinyint unsigned NOT NULL,\n  `rental_id` int DEFAULT NULL,\n  `amount` decimal(5,2) NOT NULL,\n  `payment_date` datetime NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`payment_id`),\n  KEY `idx_fk_staff_id` (`staff_id`),\n  KEY `idx_fk_customer_id` (`customer_id`),\n  KEY `fk_payment_rental` (`rental_id`),\n  CONSTRAINT `fk_payment_customer` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`customer_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_rental` FOREIGN KEY (`rental_id`) REFERENCES `rental` (`rental_id`) ON DELETE SET NULL ON UPDATE CASCADE,\n  CONSTRAINT `fk_payment_staff` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=16050 DEFAULT CHARSET=utf8mb3\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Autocommit Parameter\nDESCRIPTION: SQL command that enables the autocommit mode in MySQL. When autocommit is set to 1, each SQL statement forms a single transaction that is automatically committed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow012.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET autocommit=1;\n```\n\n----------------------------------------\n\nTITLE: Logging PCI Device Initialization and Configuration\nDESCRIPTION: This log snippet shows the detection and configuration of PCI devices, including memory ranges, I/O ports, and interrupt routing. It provides detailed information about the system's PCI bus structure and device capabilities during startup.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmesg-002.txt#2025-04-22_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[    3.008227] pci 0000:05:00.1: reg 30 32bit mmio pref: [0xfae40000-0xfae5ffff]\n[    3.008251] pci 0000:05:00.1: PME# supported from D0 D3hot D3cold\n[    3.008254] pci 0000:05:00.1: PME# disabled\n[    3.008289] pci 0000:00:05.0: bridge io port: [0xd000-0xdfff]\n[    3.008292] pci 0000:00:05.0: bridge 32bit mmio: [0xfae00000-0xfaefffff]\n[    3.008332] pci 0000:04:00.0: reg 10 32bit mmio: [0xfade0000-0xfadfffff]\n[    3.008338] pci 0000:04:00.0: reg 14 32bit mmio: [0xfadc0000-0xfaddffff]\n[    3.008343] pci 0000:04:00.0: reg 18 io port: [0xcc00-0xcc1f]\n[    3.008349] pci 0000:04:00.0: reg 1c 32bit mmio: [0xfadbc000-0xfadbffff]\n[    3.008363] pci 0000:04:00.0: reg 30 32bit mmio pref: [0xfad80000-0xfad9ffff]\n[    3.008394] pci 0000:04:00.0: PME# supported from D0 D3hot D3cold\n[    3.008398] pci 0000:04:00.0: PME# disabled\n```\n\n----------------------------------------\n\nTITLE: Creating Replication Async Connection Failover Managed Table in MySQL\nDESCRIPTION: Defines table structure for managed source configurations in asynchronous replication failover. Stores channel name, managed name/type and JSON configuration for group management.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `replication_asynchronous_connection_failover_managed` (\n  `Channel_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT 'The replication channel name that connects source and replica.',\n  `Managed_name` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '' COMMENT 'The name of the source which needs to be managed.',\n  `Managed_type` char(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL DEFAULT '' COMMENT 'Determines the managed type.',\n  `Configuration` json DEFAULT NULL COMMENT 'The data to help manage group. For Managed_type = GroupReplication, Configuration value should contain {\"Primary_weight\": 80, \"Secondary_weight\": 60}, so that it assigns weight=80 to PRIMARY of the group, and weight=60 for rest of the members in mysql.replication_asynchronous_connection_failover table.',\n  PRIMARY KEY (`Channel_name`,`Managed_name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='The managed source configuration details'\n```\n\n----------------------------------------\n\nTITLE: Reporting Total Index Count in Percona Toolkit\nDESCRIPTION: This snippet displays the total number of indexes found in the analyzed database. It's a key metric in the index summary report generated by Percona Toolkit.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-duplicate-key-checker/samples/key-types-k.txt#2025-04-22_snippet_1\n\nLANGUAGE: Plaintext\nCODE:\n```\n# Total Indexes  41\n```\n\n----------------------------------------\n\nTITLE: Creating servers Table in MySQL\nDESCRIPTION: SQL statement for creating the servers table which stores information about linked remote servers. It includes columns for server name, connection details, authentication credentials, and ownership information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL Foreign Servers table';\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Date Trigger in MySQL\nDESCRIPTION: This trigger automatically sets the payment_date field to the current timestamp (NOW()) whenever a new record is inserted into the payment table. It is defined with the DEFINER as msandbox user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER payment_date BEFORE INSERT ON payment\n\tFOR EACH ROW SET NEW.payment_date = NOW() */\n```\n\n----------------------------------------\n\nTITLE: Parsing Options with OptionParser in Perl\nDESCRIPTION: This snippet demonstrates how to parse and document command line options using OptionParser in Perl, which supports various option types such as strings, integers, floats, and comma-separated lists. The snippet provides usage details and describes how to specify command line options. No external dependencies are required besides Perl itself.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help010.txt#2025-04-22_snippet_0\n\nLANGUAGE: Perl\nCODE:\n```\nUsage: $PROGRAM_NAME <options>\n\nOptions:\n\n  --cat       cat option\n  --config=A  Read this comma-separated list of config files (must be the first\n              option on the command line).\n\nOption types: s=string, i=integer, f=float, h/H/a/A=comma-separated list, d=DSN, z=size, m=time\n\nOptions and values after processing arguments:\n\n  --cat       TRUE\n  --config    $trunk/t/lib/samples/empty\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Language in Natural Docs Configuration\nDESCRIPTION: Configures SQL language properties with enhanced support through a Perl package for PL/SQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_9\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: SQL\n\n   Extension: sql\n   Line Comment: --\n   Block Comment: /* */\n   Enum Values: Global\n   Function Prototype Enders: , ; ) as As AS is Is IS\n   Variable Prototype Enders: , ; ) := default Default DEFAULT\n   Database Index Prototype Enders: , ; )\n   Database Trigger Prototype Enders: begin Begin BEGIN as As AS\n   Perl Package: NaturalDocs::Languages::PLSQL\n```\n\n----------------------------------------\n\nTITLE: Monitoring Device I/O Performance Metrics\nDESCRIPTION: Log data showing disk I/O statistics with columns for timestamp, device name, read/write MB/s, concurrency, response time, busy percentage and in-progress operations. Data is sampled at 1 second intervals showing performance metrics for RAM disks, loop devices and physical disks.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_switch_to_sample.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n9.0 ram0       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n9.0 ram1       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n9.0 loop0      0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n9.0 sda        0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Decrypt Command Usage for pt-secure-collect\nDESCRIPTION: Shows how to use the 'decrypt' command in pt-secure-collect. This command is used to decrypt an encrypted file, with the password requested from the terminal.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-secure-collect/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npt-secure-collect decrypt [flags] <input file>\n```\n\n----------------------------------------\n\nTITLE: Administrator Quit Command in MySQL Log\nDESCRIPTION: MySQL log entry showing an administrator quit command. The log includes connection details, thread ID, and execution time information.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow008.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# User@Host: meow[meow] @  [1.2.3.8]\n# Thread_id: 5  Schema: db1\n# Query_time: 0.000002  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\n# No InnoDB statistics available for this query\n# administrator command: Quit;\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Language in Natural Docs Configuration\nDESCRIPTION: Configures JavaScript language properties, specifying comment styles and prototype parsing rules.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_5\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: JavaScript\n\n   Extension: js\n   Line Comment: //\n   Block Comment: /* */\n   Enum Values: Under type\n   Function Prototype Ender: {\n   Variable Prototype Enders: ; = , }\n```\n\n----------------------------------------\n\nTITLE: Running LSI Logic MPT Configuration Utility in Linux\nDESCRIPTION: Command used to execute the LSI Logic MPT Configuration Utility with inspection (-i) and scanning (-s) parameters to retrieve detailed information about SAS/RAID controllers.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/lsiutil-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLinux/lsiutil.x86_64 -i -s\n```\n\n----------------------------------------\n\nTITLE: Switching to 'sakila' Database\nDESCRIPTION: This SQL command changes the current default database to `sakila`. Subsequent SQL statements will operate within the context of this database unless otherwise specified.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Current Database: `sakila`\n--\n\nUSE `sakila`;\n```\n\n----------------------------------------\n\nTITLE: Listing Running MySQL Processes via Command Output (Plaintext)\nDESCRIPTION: This snippet displays the output of a system command (e.g., `ps aux | grep mysqld`) listing running processes related to MySQL (`mysqld`, `mysqld_safe`, and associated `logger`). It shows details like process ID (PID), parent process ID (PPID), user, command-line arguments (including configuration files, data directories, ports, sockets), and start times for multiple MySQL instances, including potential sandbox environments. The final line shows the `grep` process used to filter the output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/ps-mysqld-001.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nroot      1690     1  0 12:52 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe\nmysql     1729  1690  0 12:52 ?        00:00:22 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --user=mysql --pid-file=/var/run/mysqld/mysqld.pid --skip-external-locking --port=3306 --socket=/var/run/mysqld/mysqld.sock\nroot      1730  1690  0 12:52 ?        00:00:00 logger -p daemon.err -t mysqld_safe -i -t mysqld\nbaron     5529     1  0 15:20 pts/1    00:00:00 /bin/sh /usr/bin/mysqld_safe --defaults-file=/tmp/12345/my.sandbox.cnf\nbaron     5559  5529  0 15:20 pts/1    00:00:07 /usr/sbin/mysqld --defaults-file=/tmp/12345/my.sandbox.cnf --basedir=/usr --datadir=/tmp/12345/data --pid-file=/tmp/12345/data/mysql_sandbox12345.pid --skip-external-locking --port=12345 --socket=/tmp/12345/mysql_sandbox12345.sock\nbaron     5560  5529  0 15:20 pts/1    00:00:00 logger -p daemon.err -t mysqld_safe -i -t mysqld\nbaron     5599     1  0 15:20 pts/1    00:00:00 /bin/sh /usr/bin/mysqld_safe --defaults-file=/tmp/12346/my.sandbox.cnf\nbaron     5629  5599  0 15:20 pts/1    00:00:07 /usr/sbin/mysqld --defaults-file=/tmp/12346/my.sandbox.cnf --basedir=/usr --datadir=/tmp/12346/data --pid-file=/tmp/12346/data/mysql_sandbox12346.pid --skip-external-locking --port=12346 --socket=/tmp/12346/mysql_sandbox12346.sock\nbaron     5630  5599  0 15:20 pts/1    00:00:00 logger -p daemon.err -t mysqld_safe -i -t mysqld\nbaron     6100  5485  0 15:42 pts/1    00:00:00 grep mysqld\n```\n\n----------------------------------------\n\nTITLE: Querying innodb_buffer_stats_by_schema in MySQL\nDESCRIPTION: Example query showing how to retrieve InnoDB buffer pool statistics aggregated by schema. The result includes metrics like memory allocation, data size, page counts, and cached rows for each schema in the buffer pool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from innodb_buffer_stats_by_schema;\n+--------------------------+------------+------------+-------+--------------+-----------+-------------+\n| object_schema            | allocated  | data       | pages | pages_hashed | pages_old | rows_cached |\n+--------------------------+------------+------------+-------+--------------+-----------+-------------+\n| mem30_trunk__instruments | 1.69 MiB   | 510.03 KiB |   108 |          108 |       108 |        3885 |\n| InnoDB System            | 688.00 KiB | 351.62 KiB |    43 |           43 |        43 |         862 |\n| mem30_trunk__events      | 80.00 KiB  | 21.61 KiB  |     5 |            5 |         5 |         229 |\n+--------------------------+------------+------------+-------+--------------+-----------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Example of Content Structure HTML in Natural Docs\nDESCRIPTION: Illustrates the comprehensive HTML structure for content within Natural Docs. Shows how topics, titles, headings, and other content elements are organized and nested, including specialized elements like description lists and image captions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<#Content>\n\n    <CType (CFunction, CVariable, etc.)>\n        <CTopic and #MainTopic?>\n\n            <CTitle>\n                Topic title\n            </CTitle>\n\n            <CBody>\n\n                [Class Hierarchy]\n\n                [Prototype]\n\n                <CHeading>\n                    Heading\n                <CHeading>\n\n                <p>\n                    Paragraph\n                </p>\n\n                <pre>\n                    Code or text diagram\n                </pre>\n\n                <ul>\n                    <li>\n                        Bullet item\n                    </li>\n                </ul>\n\n                <CImageCaption>?\n                    Caption\n                </CImageCaption>?\n                <img>\n\n                <a CImageLink>\n                    text\n                </a CImageLink>\n\n                <table CDescriptionList>\n                    <tr>\n                        <td CDLEntry>\n                            Entry\n                        </td CDLEntry>\n                        <td CDLDescription>\n                            Description\n                        </td CDLDescription>\n                    </tr>\n                </table CDescriptionList>\n\n                [Summary]\n\n           </CBody>\n\n       </CTopic and #MainTopic?>\n   </CType (CFunction, CVariable, etc.)>\n\n</#Content>\n```\n\n----------------------------------------\n\nTITLE: Querying HP Smart Array Controller Status - Shell\nDESCRIPTION: This shell command utilizes the `hpacucli` utility to display the status of all HP Smart Array controllers present in the system. This requires `hpacucli` to be installed and executed with appropriate privileges (typically root). The command outputs status details for each detected controller, including controller, cache, and battery/capacitor health. The output can be redirected or parsed for automated monitoring. Limitations: Only displays the current status and works on systems with HP Smart Array controllers and `hpacucli` properly configured.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/hpaculi-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# hpacucli ctrl all show status\n```\n\n----------------------------------------\n\nTITLE: Committing and Rolling Back Transactions in MySQL - SQL\nDESCRIPTION: This snippet demonstrates the explicit COMMIT and ROLLBACK commands to conclude or undo a transaction in MySQL, as observed in a MySQL binary log. Dependencies include an open transaction scope and executed SQL statements to commit or revert. The COMMIT statement finalizes changes made in the current transaction, while ROLLBACK undoes changes (used here as a safety measure by mysqlbinlog). Inputs rely on prior data manipulation statements, and outputs are transactional consistency within the database. These statements may be limited by autocommit settings or binlog context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/relay-binlog001-at-1708.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCOMMIT/*!*/;\nROLLBACK /* added by mysqlbinlog */;\n```\n\n----------------------------------------\n\nTITLE: Creating columns_priv Table in SQL\nDESCRIPTION: Defines the 'columns_priv' table to manage privileges on specific columns in a MySQL database. This table requires MySQL as a dependency and includes fields for Host, Db, User, Table_name, Column_name, Timestamp, and Column_priv to store related privilege information. The primary key consists of multiple columns to ensure uniqueness.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `columns_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating the `help_category` Table - MySQL Help System Category Metadata - SQL\nDESCRIPTION: Defines the `help_category` table which stores hierarchical categories used for organizing MySQL help topics. Each entry is keyed by a unique smallint ID and name, with an optional parent_category_id for hierarchical structure and a URL for reference. Requires MyISAM engine. Inputs are internal system administration statements; outputs are category metadata for the help system search and navigation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint(5) unsigned default NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY  (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help categories'\n```\n\n----------------------------------------\n\nTITLE: Saving Performance Schema Configuration in MySQL\nDESCRIPTION: Stores current Performance Schema configuration for later restoration. Requires SUPER privilege for binary logging control.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_149\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_save();\nmysql> UPDATE performance_schema.setup_instruments\n    ->    SET enabled = 'YES', timed = 'YES';\nmysql> CALL sys.ps_setup_reload_saved();\n```\n\n----------------------------------------\n\nTITLE: MySQL Slow Query Analysis with Client Connection and Metrics\nDESCRIPTION: A MySQL slow query log entry showing connection details from localhost port 12345, with query metrics including execution time of 1 second, no lock time, and no rows processed. Contains a simple SELECT query against table 'foo'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slowlogwriter001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Client: 127.0.0.1:12345\n# Query_time: 1.000000  Lock_time: 0.000000  Rows_sent: 0  Rows_examined: 0\nselect * from foo;\n```\n\n----------------------------------------\n\nTITLE: Insert with On Duplicate Key Update\nDESCRIPTION: Inserts a record into test1.tbl6 with timezone conversion and handles duplicate keys by updating metrics.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog001.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ninsert into test1.tbl6\n      (day, tbl5, misccol9type, misccol9, metric11, metric12, secs)\n      values\n      (convert_tz(current_timestamp,'EST5EDT','PST8PDT'), '239', 'foo', 'bar', 1, '1', '16.3574378490448')\n      on duplicate key update metric11 = metric11 + 1,\n         metric12 = metric12 + values(metric12), secs = secs + values(secs)/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Querying Index Alternatives\nDESCRIPTION: Queries to identify indexes that are commonly substituted for others, specifying the queries where the substitution occurs. The results group alternative indexes by database and table, showing the sum of counts where alternatives are found.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pod/pod_sample_miu.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CONCAT_WS('.', db, tbl, idx) AS idx_chosen,\n GROUP_CONCAT(DISTINCT alt_idx) AS alternatives,\n GROUP_CONCAT(DISTINCT query_id) AS queries, SUM(cnt) AS cnt\n FROM index_alternatives\n GROUP BY db, tbl, idx\n HAVING COUNT(*) > 1;\n```\n\n----------------------------------------\n\nTITLE: Creating Password History Table in SQL\nDESCRIPTION: This SQL script creates the password_history table to log historical password data for user accounts. Critical columns are Host, User, Password_timestamp, and Password, with a primary key consisting of Host, User, and Password_timestamp.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-8.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `password_history` (\n  `Host` char(255) CHARACTER SET ascii COLLATE ascii_general_ci NOT NULL DEFAULT '',\n  `User` char(32) COLLATE utf8mb3_bin NOT NULL DEFAULT '',\n  `Password_timestamp` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n  `Password` text COLLATE utf8mb3_bin,\n  PRIMARY KEY (`Host`,`User`,`Password_timestamp` DESC)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='Password history for user accounts'\n```\n\n----------------------------------------\n\nTITLE: Creating Film Insert Trigger in MySQL\nDESCRIPTION: Trigger that automatically populates the film_text table with film title and description after inserting a new film record.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\nCREATE TRIGGER `ins_film` AFTER INSERT ON `film` FOR EACH ROW BEGIN\n    INSERT INTO film_text (film_id, title, description)\n        VALUES (new.film_id, new.title, new.description);\n  END;;\n```\n\n----------------------------------------\n\nTITLE: Running pt-mongodb-query-digest from the Command Line - Bash\nDESCRIPTION: This snippet shows the basic invocation pattern for running the pt-mongodb-query-digest utility from the command line with configurable options. The tool requires pt-mongodb-query-digest to be installed (part of Percona Toolkit) and MongoDB connection access. Key parameters like authentication, database, output format, and others can be passed as options. Inputs are the desired CLI options, and output is a report generated in the specified format to stdout.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-mongodb-query-digest/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npt-mongodb-query-digest [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating Table Privileges Definition in MySQL\nDESCRIPTION: The `tables_priv` table manages permissions for tables and columns, supporting complex access controls. Requires MyISAM engine and utf8 character set; key dependencies include valid host and user definitions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `tables_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',\n  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges'\n```\n\n----------------------------------------\n\nTITLE: Logging File System Operations for MySQL Data Files\nDESCRIPTION: This log entry shows various file system operations performed on MySQL data files and directories. It includes details such as process ID, operation type, file descriptors, bytes read/written, execution time, and file paths. The operations cover reading from InnoDB files, directory listing, and accessing database option files.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-ioprofile/samples/003-tab.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n20974 pread 7792 16384 0.000369 /data/data/abd_2dia/aia_227_223.ibd\n22782 pread 586 16384 0.006348 /data/data/abd_2dia/aia_227_228.ibd\n6594 open 30 0 0.000096 /data/data/abd_2dia/\n6594 getdents64 30 264 0.000164 /data/data/abd_2dia/\n6594 getdents64 30 0 0.000146 /data/data/abd_2dia/\n6594 close 30 0 0.000098 /data/data/abd_2dia/\n6594 open 30 0 0.000054 /data/data/abd_2dia/test/db.opt\n6594 _llseek 30 0 0.000043 /data/data/abd_2dia/test/db.opt\n6594 _llseek 30 0 0.000041 /data/data/abd_2dia/test/db.opt\n6594 _llseek 30 0 0.000043 /data/data/abd_2dia/test/db.opt\n6594 read 30 65 0.000062 /data/data/abd_2dia/test/db.opt\n6594 close 30 0 0.000045 /data/data/abd_2dia/test/db.opt\n```\n\n----------------------------------------\n\nTITLE: Defining Text File Language in Natural Docs Configuration\nDESCRIPTION: Configures the basic properties for the Text File language, which is treated as one big comment for documentation purposes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Text File\n\n   Extension: txt\n```\n\n----------------------------------------\n\nTITLE: Inspecting Table Status and Creation Syntax in SQL\nDESCRIPTION: These SQL commands retrieve metadata about the table 't' within the database 'd'. `SHOW TABLE STATUS` provides general table information and statistics, while `SHOW CREATE TABLE` displays the SQL statement needed to recreate the table. The `\\G` terminator requests vertical output format, common in command-line clients. These commands are likely executed by the analysis tool to gather context about tables involved in the analyzed queries.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump041.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `d` LIKE 't'\\G\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `d`.`t`\\G\n```\n\n----------------------------------------\n\nTITLE: Disabling Version Check in Command Line\nDESCRIPTION: Example command showing how to disable version checking for a single command execution using pt-diskstats tool.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/version-check.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npt-diskstats --no-version-check\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Processlist for Active Connections\nDESCRIPTION: Demonstrates how to query the sys.processlist table to retrieve information about active connections, excluding the current connection and daemon processes.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> select * from sys.processlist where conn_id is not null and command != 'daemon' and conn_id != connection_id()\\G\n*************************** 1. row ***************************\n                thd_id: 44524\n               conn_id: 44502\n                  user: msandbox@localhost\n                    db: test\n               command: Query\n                 state: alter table (flush)\n                  time: 18\n     current_statement: alter table t1 add column g int\n     statement_latency: 18.45 s\n              progress: 98.84\n          lock_latency: 265.43 ms\n         rows_examined: 0\n             rows_sent: 0\n         rows_affected: 0\n            tmp_tables: 0\n       tmp_disk_tables: 0\n             full_scan: NO\n        last_statement: NULL\nlast_statement_latency: NULL\n        current_memory: 664.06 KiB\n             last_wait: wait/io/file/innodb/innodb_data_file\n     last_wait_latency: 1.07 us\n                source: fil0fil.cc:5146\n           trx_latency: NULL\n             trx_state: NULL\n        trx_autocommit: NULL\n                   pid: 4212\n          program_name: mysql\n```\n\n----------------------------------------\n\nTITLE: Main File Topic Types Reference for Natural Docs - Plain Text\nDESCRIPTION: This snippet lists topic types predefined in Natural Docs' primary configuration file. It helps users identify which topic kinds (Function, Variable, Class, etc.) are known to Natural Docs by default, allowing them to extend or override behavior as needed. There are no dependencies; the snippet is for documentation customization reference.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/config/NaturalDocs/Topics.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# The following topics are defined in the main file, if you'd like to alter\n# their behavior or add keywords:\n#\n#    Generic, Class, Interface, Section, File, Group, Function, Variable,\n#    Property, Type, Constant, Enumeration, Event, Delegate, Macro,\n#    Database, Database Table, Database View, Database Index, Database\n#    Cursor, Database Trigger, Cookie, Build Target\n\n```\n\n----------------------------------------\n\nTITLE: Querying Thread ID Data from MySQL Database\nDESCRIPTION: A series of similar SELECT queries that retrieve thread IDs from a table named 'foo'. Each query is preceded by metadata including user information, execution time, and lock statistics. These queries consistently take around 0.000899 seconds to execute with no rows returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 449 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 450 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 451 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 452 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 453 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 454 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 455 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 456 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 457 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 458 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 459 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 460 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 461 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 462 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 463 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 464 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 465 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 466 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 467 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 468 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 469 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 470 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 471 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 472 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 473 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 474 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 475 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 476 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 477 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 478 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 479 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 480 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 481 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 482 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 483 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 484 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 485 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 486 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 487 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 488 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 489 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 490 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 491 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 492 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 493 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 494 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 495 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 496 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 497 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Capturing TCP Packet Hex Dump (Client to Server)\nDESCRIPTION: This snippet displays a hexadecimal dump of a 66-byte TCP packet transmitted from client 10.55.200.31 (port 64987) to server 10.55.200.15 (port 3306) at 2009-06-09 16:53:17.111391. It shows the packet payload in hexadecimal format with offsets, useful for analyzing client-side MySQL communication or other network interactions captured by tools like tcpdump.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump016.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-06-09 16:53:17.111391 IP 10.55.200.31.64987 > 10.55.200.15.3306: tcp 66\n\t0x0000:  4508 0076 3d0c 4000 4006 0000 0a37 c81f\n\t0x0010:  0a37 c80f fddb 0cea 97df aafe 5f8d 5dcf\n\t0x0020:  8018 ffff a505 0000 0101 080a 1de9 6b04\n\t0x0030:  4133 5db0 3e00 0001 85a6 0300 0000 0001\n\t0x0040:  0800 0000 0000 0000 0000 0000 0000 0000\n\t0x0050:  0000 0000 0000 0000 7070 7070 6164 7269\n\t0x0060:  0014 a47e 0218 fab3 18ac 2b5d 1ec7 3453\n\t0x0070:  153e 5411 76b4\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from a Database Using SQL\nDESCRIPTION: The snippet retrieves a specific column \\'c\\' from a table \\'t\\' where the id is equal to 1. This kind of query is commonly used in scenarios where a specific row needs to be fetched based on unique identifiers. It requires a database that supports SQL queries, and the table \\'t\\' must exist with the column \\'c\\'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/rawlogs/rawlog001.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT c FROM t WHERE id=1\n```\n\n----------------------------------------\n\nTITLE: Creating Store Table\nDESCRIPTION: Defines store location records with manager and address relationships. Includes unique constraint on manager assignment.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `store` (\n  `store_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `manager_staff_id` tinyint(3) unsigned NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`store_id`),\n  UNIQUE KEY `idx_unique_manager` (`manager_staff_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_store_staff` FOREIGN KEY (`manager_staff_id`) REFERENCES `staff` (`staff_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_store_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Single Node Log Analysis - Bash\nDESCRIPTION: Example of analyzing logs from a single node with time filter\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer list --all --since 2023-01-05T03:24:26.000000Z /var/log/mysql/*.log\n```\n\n----------------------------------------\n\nTITLE: Using pt-galera-log-explainer to Inspect Cluster Log Metadata - Percona Toolkit - Bash\nDESCRIPTION: This Bash command runs the 'pt-galera-log-explainer' tool to analyze logs from a Galera Cluster, mapping a given IP address to node names and UUIDs, and showing the corresponding log events with timestamps. It requires the 'percona-toolkit' package (providing pt-galera-log-explainer) as well as access to log files in the cluster environment. The '--no-color' flag disables colored output; 'tests/logs/upgrade/*' specifies the log file source; and 'whois 172.17.0.2' queries info about a specific cluster node.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ pt-galera-log-explainer whois 172.17.0.2 --no-color  tests/logs/upgrade/*\n```\n\n----------------------------------------\n\nTITLE: Parsing and Setting Event Date/Time Attributes in Perl\nDESCRIPTION: Extracts year, month, day, and hour from an event timestamp formatted as 'YYMMDD HH:MM:SS', then sets these as attributes on the event object. Uses regex to parse the timestamp and handles cases where timestamp might be missing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/filter-add-ymdh-attribs.txt#2025-04-22_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n# Set year, month, hour and day attributes in event.\nmy ($year, $month, $day, $hour);\nif ( $event->{ts} ) {\n   # ts are formatted like: 071015 21:43:52\n   ($year, $month, $day, $hour)\n      = $event->{ts} =~ /^(\\d\\d)(\\d\\d)(\\d\\d)\\s+(\\d\\d):/;\n}\nPTDEBUG && _d('ymdh:', $year, $month, $day, $hour);\n$event->{year}  = $year  || 0;\n$event->{month} = $month || 0;\n$event->{day}   = $day   || 0;\n$event->{hour}  = $hour  || 24;  # 0 is a valid hour\n```\n\n----------------------------------------\n\nTITLE: Creating the `time_zone_leap_second` Table - MySQL Leap Second Data - SQL\nDESCRIPTION: Creates the `time_zone_leap_second` table for storing global leap second corrections references by time zone calculations. Each entry is keyed by transition time and stores the leap second correction value. MyISAM and utf8 charset are prerequisites. Used by the MySQL server during time/datetime operations that require accurate UTC offset calculations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY  (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones'\n```\n\n----------------------------------------\n\nTITLE: Creating Staff Table\nDESCRIPTION: Defines staff member records with personal information, login credentials, and store assignment. Includes picture storage as BLOB.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs.txt#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Creating help_category Table - MySQL SQL\nDESCRIPTION: Creates the `help_category` table to organize help topics in hierarchical categories for MySQL's help system. Tracks category IDs, names, parents, and URLs, enforced by a primary key and a unique constraint on name. Inputs are help content imports; outputs are category listings used in the HELP SQL statement.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_category` (\n  `help_category_id` smallint unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `parent_category_id` smallint unsigned DEFAULT NULL,\n  `url` text NOT NULL,\n  PRIMARY KEY (`help_category_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help categories'\n\n```\n\n----------------------------------------\n\nTITLE: Querying User Effects by User ID - SQL\nDESCRIPTION: Retrieves all entries from 'users_effects' where the first user id is equal to a given value. Typically used to list all effects or statuses applied to a user. Input should match an integer type for userid1, and output is a row set of corresponding effects.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM users_effects WHERE userid1=2206658\n```\n\n----------------------------------------\n\nTITLE: Analyzing TCP Packet Capture between Localhost Addresses\nDESCRIPTION: This snippet shows multiple TCP packets exchanged between 127.0.0.1:44489 and 127.0.0.1:12345. It includes packet timestamps, IP headers, TCP headers, and payload data in hexadecimal format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump015.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2009-06-12 08:39:08.428933 IP 127.0.0.1.44489 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4508 0034 e43e 4000 4006 587b 7f00 0001\n\t0x0010:  7f00 0001 adc9 3039 ec8b 27e4 ec85 deb0\n\t0x0020:  8010 0182 309a 0000 0101 080a 0014 c466\n\t0x0030:  0014 c466\n2009-06-12 08:39:09.145334 IP 127.0.0.1.44489 > 127.0.0.1.12345: tcp 12\n\t0x0000:  4508 0040 e43f 4000 4006 586e 7f00 0001\n\t0x0010:  7f00 0001 adc9 3039 ec8b 27e4 ec85 deb0\n\t0x0020:  8018 0182 fe34 0000 0101 080a 0014 c519\n\t0x0030:  0014 c466 0500 0000 0000 0001 0000 0001\n2009-06-12 08:39:09.145375 IP 127.0.0.1.44489 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4508 0034 e440 4000 4006 5879 7f00 0001\n\t0x0010:  7f00 0001 adc9 3039 ec8b 27f0 ec85 deb0\n\t0x0020:  8011 0182 2fda 0000 0101 080a 0014 c519\n\t0x0030:  0014 c466\n2009-06-12 08:39:09.145555 IP 127.0.0.1.12345 > 127.0.0.1.44489: tcp 0\n\t0x0000:  4508 0034 7c1c 4000 4006 c09d 7f00 0001\n\t0x0010:  7f00 0001 3039 adc9 ec85 deb0 ec8b 27f1\n\t0x0020:  8011 0100 2fa8 0000 0101 080a 0014 c519\n\t0x0030:  0014 c519\n2009-06-12 08:39:09.145586 IP 127.0.0.1.44489 > 127.0.0.1.12345: tcp 0\n\t0x0000:  4508 0034 e441 4000 4006 5878 7f00 0001\n\t0x0010:  7f00 0001 adc9 3039 ec8b 27f1 ec85 deb1\n\t0x0020:  8010 0182 2f26 0000 0101 080a 0014 c519\n\t0x0030:  0014 c519\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Creation SQL in MySQL - SQL\nDESCRIPTION: This snippet uses the SHOW CREATE TABLE statement to output the CREATE TABLE syntax for the 'tbl' table in the 'foodb' database. This is often used for schema backup, migration, or structure reviews. The output reveals the exact DDL statement to reproduce the table, including indexes and constraints; execution requires permissions to access schema metadata.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/QueryReportFormatter/report001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `foodb`.`tbl`\\G\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Variable - Example Code\nDESCRIPTION: Code example showing how to configure MySQL time zone variable, used in context of pt-heartbeat --utc functionality.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSET time_zone='+0:00'\n```\n\n----------------------------------------\n\nTITLE: Creating staff information table in SQL\nDESCRIPTION: Creates the staff table to store employee information. Includes personal and login details, and defines relationships to store and address tables with cascade update behavior.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_26\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `staff` (\n  `staff_id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `address_id` smallint(5) unsigned NOT NULL,\n  `picture` blob,\n  `email` varchar(50) DEFAULT NULL,\n  `store_id` tinyint(3) unsigned NOT NULL,\n  `active` tinyint(1) NOT NULL DEFAULT '1',\n  `username` varchar(16) NOT NULL,\n  `password` varchar(40) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`staff_id`),\n  KEY `idx_fk_store_id` (`store_id`),\n  KEY `idx_fk_address_id` (`address_id`),\n  CONSTRAINT `fk_staff_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_staff_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: DMI Table Hardware Information Output\nDESCRIPTION: Structured output showing detailed hardware specifications including memory device configurations, physical memory arrays, boot status, and IPMI device information. Contains multiple handle entries with specific hardware component details.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-003.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nType Detail: Other\nSpeed: 1333 MHz\nManufacturer: Manufacturer06\nSerial Number: SerNum06\nAsset Tag: AssetTagNum6\nPart Number: ModulePartNumber06\nRank: Unknown\n\nHandle 0x0038, DMI type 17, 28 bytes\nMemory Device\n\tArray Handle: 0x002F\n\tError Information Handle: Not Provided\n\tTotal Width: 72 bits\n\tData Width: 64 bits\n\tSize: No Module Installed\n\tForm Factor: DIMM\n\tSet: None\n\tLocator: D7\n\tBank Locator: BANK7\n\tType: Other\n\tType Detail: Other\n\tSpeed: 1333 MHz\n\tManufacturer: Manufacturer07\n\tSerial Number: SerNum07\n\tAsset Tag: AssetTagNum7\n\tPart Number: ModulePartNumber07\n\tRank: Unknown\n```\n\n----------------------------------------\n\nTITLE: Listing Individual PXC Files Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet enumerates the specific files collected for PXC, including various log files and configuration files from the MySQL data directory.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"var/lib/mysql/mysqld-error.log\",\n\"var/lib/mysql/innobackup.backup.log\",\n\"var/lib/mysql/innobackup.move.log\",\n\"var/lib/mysql/innobackup.prepare.log\",\n\"var/lib/mysql/grastate.dat\",\n\"var/lib/mysql/gvwstate.dat\",\n\"var/lib/mysql/mysqld.post.processing.log\",\n\"var/lib/mysql/auto.cnf\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration Parameters\nDESCRIPTION: MySQL configuration settings specifying server ports, file paths, buffer sizes, and replication settings. The configuration appears to be for a sandbox instance with specific paths under /tmp/12345/ and customized InnoDB and key buffer settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/myprintdef001.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n--port=12345\n--socket=/tmp/12345/mysql_sandbox12345.sock\n--pid-file=/tmp/12345/data/mysql_sandbox12345.pid\n--basedir=/home/daniel/mysql_binaries/mysql-5.0.82-linux-x86_64-glibc23\n--datadir=/tmp/12345/data\n--key_buffer_size=16M\n--innodb_buffer_pool_size=16M\n--innodb_data_home_dir=/tmp/12345/data\n--innodb_log_group_home_dir=/tmp/12345/data\n--innodb_data_file_path=ibdata1:10M:autoextend\n--innodb_log_file_size=5M\n--log-bin=mysql-bin\n--relay_log=mysql-relay-bin\n--log_slave_updates\n--server-id=12345\n--report-host=127.0.0.1\n--report-port=12345\n--port=12349\n```\n\n----------------------------------------\n\nTITLE: Querying Single Value from 'foo' Table in MySQL\nDESCRIPTION: A series of SQL queries selecting a single incrementing value from the 'foo' table. Each query is executed by the same user, has identical execution time, and no InnoDB statistics are available.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 896 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 897 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 898 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 899 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 900 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Running PodioSync CLI for Data Migration\nDESCRIPTION: Command line instruction for executing the PodioSync tool with a configuration file. This command starts the migration process of converting Podio data to SQL according to the specified configuration.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodiosync run --config-file ./config.yml\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Profile Output\nDESCRIPTION: Performance profiling output showing query statistics including Query ID, response time (both total and per call), number of calls, and variance-to-mean ratio. The output is formatted as a table with two queries shown - one taking 69.1% of time and another taking 30.9%.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/cannot-distill-profile.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n# Profile\n# Rank Query ID                            Response time Calls R/Call V/M \n# ==== =================================== ============= ===== ====== ====\n#    1 0x480546EB8B8460BD5B721CAE3EDDB56B   0.0900 69.1%     1 0.0900  0.00 \n#    2 0x3309663231C2F066BE90A42C0FB7E89E   0.0403 30.9%     1 0.0403  0.00 \n```\n\n----------------------------------------\n\nTITLE: Creating User Proxy Privileges Table in MySQL\nDESCRIPTION: Defines a `proxies_priv` table to manage user proxy privileges, ensuring data integrity for host, user, proxied host, and proxied users. Uses the MyISAM engine and utf8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.5.txt#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `proxies_priv` (\n  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Proxied_user` char(16) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `With_grant` tinyint(1) NOT NULL DEFAULT '0',\n  `Grantor` char(77) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`Host`,`User`,`Proxied_host`,`Proxied_user`),\n  KEY `Grantor` (`Grantor`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User proxy privileges'\n```\n\n----------------------------------------\n\nTITLE: Creating help_keyword Table - MySQL SQL\nDESCRIPTION: Describes the `help_keyword` table for cataloging unique help keywords in MySQL's help subsystem. Each keyword is given a unique ID and name. The table is referenced in help/topic relations for lookup and retrieval. Table inputs are keyword entry scripts, and outputs support keyword resolution during HELP command processing.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-8.4.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) /*!50100 TABLESPACE `mysql` */ ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 STATS_PERSISTENT=0 ROW_FORMAT=DYNAMIC COMMENT='help keywords'\n\n```\n\n----------------------------------------\n\nTITLE: Querying Database Names - PostgreSQL SQL\nDESCRIPTION: Selects database names from pg_database system catalog excluding template databases.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT datname FROM pg_database WHERE datistemplate = false\n```\n\n----------------------------------------\n\nTITLE: Executing SQL SELECT Queries in SQL\nDESCRIPTION: These SQL snippets execute SELECT statements on the 'foo' table to test performance metrics. No additional dependencies are required. Each query fetches a static integer, and the accompanying comments provide context on user information, thread ID, and timings for analysis. Optional optimization constraints may apply if database performance is of concern.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 349 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 350 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 351 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 352 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 353 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 354 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 355 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 356 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 357 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 358 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 359 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 360 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 361 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 362 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 363 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 364 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 365 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 366 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 367 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 368 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 369 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 370 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 371 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 372 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 373 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 374 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 375 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 376 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 377 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 378 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 379 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 380 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 381 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 382 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 383 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 384 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 385 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 386 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 387 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 388 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 389 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 390 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 391 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 392 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 393 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 394 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 395 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 396 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 397 FROM foo;\n```\n\nLANGUAGE: SQL\nCODE:\n```\n# No InnoDB statistics available for this query\nSELECT 398 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Sequential SELECT Queries with Performance Metrics\nDESCRIPTION: Series of SELECT queries executed by the same user with consistent query time (0.000899s) and lock time (0s). Each query retrieves a single incrementing number from table 'foo' with no rows examined or returned, suggesting possible testing or monitoring activity.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 697 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 746 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Assessing Query Efficiency on Steady Tables in SQL\nDESCRIPTION: This SQL snippet reviews performance metrics for queries executed on the 'steady_table'. Metrics include execution time, lock time, and rows sent, which are crucial for assessing the efficiency of queries fetching data from 'less_variable_column'. This helps in pinpointing queries requiring optimization.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow052.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect less_variable_column from steady_table\\G\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration Parameters\nDESCRIPTION: Table output showing MySQL system variables and their current values including thread settings, timing configurations, transaction parameters, and version details. Output appears to be from a SHOW VARIABLES or similar command.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/show-variables/vars003.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n| thread_stack                            | 262144                                                                              | \n| time_format                             | %H:%i:%s                                                                            | \n| time_zone                               | SYSTEM                                                                              | \n| timed_mutexes                           | OFF                                                                                 | \n| tmp_table_size                          | 33554432                                                                            | \n| tmpdir                                  | /tmp/                                                                               | \n| transaction_alloc_block_size            | 8192                                                                                | \n| transaction_prealloc_size               | 4096                                                                                | \n| tx_isolation                            | REPEATABLE-READ                                                                     | \n| updatable_views_with_limit              | YES                                                                                 | \n| version                                 | 5.0.82-log                                                                          | \n| version_comment                         | MySQL Community Server (GPL)                                                        | \n| version_compile_machine                 | x86_64                                                                              | \n| version_compile_os                      | unknown-linux-gnu                                                                   | \n| wait_timeout                            | 28800                                                                               | \n+-----------------------------------------+-------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Listing Percona Distribution for PostgreSQL Specific Resources Collected\nDESCRIPTION: This snippet enumerates the custom resource definitions (CRDs) specific to Percona Distribution for PostgreSQL that `pt-k8s-debug-collector` gathers when targeting PostgreSQL (using `--resource pg` or `--resource pgv2`). It includes resources related to clusters, policies, replicas, and tasks managed by the operator.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"perconapgclusters\",\n\"pgclusters\",\n\"pgpolicies\",\n\"pgreplicas\",\n\"pgtasks\"\n```\n\n----------------------------------------\n\nTITLE: Describing x$waits_global_by_latency View Structure in MySQL\nDESCRIPTION: Displays the structure of the x$waits_global_by_latency view, which is similar to waits_global_by_latency but with latency fields as bigint for raw data analysis.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_114\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$waits_global_by_latency;\n+---------------+---------------------+------+-----+---------+-------+\n| Field         | Type                | Null | Key | Default | Extra |\n+---------------+---------------------+------+-----+---------+-------+\n| events        | varchar(128)        | NO   |     | NULL    |       |\n| total         | bigint(20) unsigned | NO   |     | NULL    |       |\n| total_latency | bigint(20) unsigned | NO   |     | NULL    |       |\n| avg_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n| max_latency   | bigint(20) unsigned | NO   |     | NULL    |       |\n+---------------+---------------------+------+-----+---------+-------+\n```\n\n----------------------------------------\n\nTITLE: Updating Users-Rooms Activity State by User ID - SQL\nDESCRIPTION: Updates the 'here', 'date', and 'level' columns in 'users_rooms' for a specific userid, setting current presence, timestamp, and level. Expects an integer userid and values for presence and level. This is typically used for updating real-time user state in applications. Requires UPDATE privileges and correct datatype usage.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset003.txt#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE users_rooms SET here=112, date=UNIX_TIMESTAMP(), level='63' WHERE userid=763910\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE users_rooms SET here=1820, date=UNIX_TIMESTAMP(), level='25' WHERE userid=2494282\n```\n\n----------------------------------------\n\nTITLE: Creating country Table in sakila using SQL\nDESCRIPTION: Defines the `country` table within the `sakila` sample database. This table stores country names with a unique ID and the last update timestamp. It serves as the reference table for the `country_id` in the `city` table and uses the InnoDB engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `country` (\n  `country_id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,\n  `country` varchar(50) NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`country_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Creating time_zone_name Table in mysql using SQL\nDESCRIPTION: Defines the `time_zone_name` table within the `mysql` database. This table maps time zone names (e.g., 'America/New_York') to their corresponding `Time_zone_id` from the `time_zone` table. It uses the InnoDB engine with statistics persistence disabled.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.7.txt#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `time_zone_name` (\n  `Name` char(64) NOT NULL,\n  `Time_zone_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`Name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone names'\n```\n\n----------------------------------------\n\nTITLE: Explaining a SELECT Statement Execution Plan in SQL (Query 1 Context)\nDESCRIPTION: Retrieves the execution plan for a SELECT query, showing how the database intends to access tables and use indexes. This version corresponds to the PREPARE statement in Query 1. The /*!50100 PARTITIONS*/ comment suggests it might provide partition-related information on MySQL 5.1.0 and later.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump025.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nSELECT * FROM d.t WHERE 1 LIMIT 1;\\G\n```\n\n----------------------------------------\n\nTITLE: Executing Simple SELECT Query in MySQL\nDESCRIPTION: This SQL query selects a single integer value from a table named 'foo'. The query is executed multiple times with incrementing values. Each execution has a query time of 0.000899 seconds, no lock time, and examines no rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT 846 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Administrator Connection Command with MySQL - SQL\nDESCRIPTION: This snippet represents the MySQL administrator command to initiate a connection to the database server. It does not alter data or schema but is essential for session setup and auditing. This operation generally does not require explicit dependencies or parameters beyond access credentials and is typically logged for monitoring purposes; it produces no rows and returns session information upon success.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump-1402776_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nadministrator command: Connect\\G\n```\n\n----------------------------------------\n\nTITLE: Displaying System Performance Statistics in Unix-like OS\nDESCRIPTION: This snippet shows the output of a system performance monitoring tool, likely 'vmstat'. It provides information on processes, memory usage, swap activity, I/O operations, system interrupts, and CPU utilization. Each column represents a specific metric, and each row represents a time interval.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-align/samples/002-raw.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0  0 470704 164480 414568 1159800    0    0    55   164    1    1  2  1 95  2  0\n 0  0 470704 164340 414580 1159788    0    0     0    32 1241  375  0  0 100  0  0\n 0  0 470704 158416 414620 1159776    0    0     0   684 1423  826 14  2 83  1  0\n 0  0 470704 158416 414620 1159776    0    0     0     4 1225  348  0  0 100  0  0\n 0  0 470704 158416 414620 1159836    0    0     0     0 1235  369  0  0 100  0  0\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL 'help_keyword' Metadata Table - SQL\nDESCRIPTION: Defines the 'help_keyword' table, which stores keyword entries for the MySQL help system. Each keyword has a unique keyword ID and name. The table uses both a primary key and a unique key on the keyword name to ensure data integrity, with MyISAM as the storage engine.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_keyword` (\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  PRIMARY KEY (`help_keyword_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help keywords'\n```\n\n----------------------------------------\n\nTITLE: Listing Percona Server for MongoDB Specific Resources Collected\nDESCRIPTION: This snippet enumerates the custom resource definitions (CRDs) specific to Percona Server for MongoDB that `pt-k8s-debug-collector` gathers when targeting MongoDB using the `--resource psmdb` flag. It includes resources related to backups, restores, and the server instances themselves.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"perconaservermongodbbackups\",\n\"perconaservermongodbrestores\",\n\"perconaservermongodbs\"\n```\n\n----------------------------------------\n\nTITLE: Sequential Thread ID SELECT Queries in MySQL\nDESCRIPTION: A sequence of SELECT queries retrieving thread IDs from table 'foo'. Each query executes in approximately 0.000899 seconds with no lock time and no rows examined or returned. All queries run under the same user from IP 1.2.3.4 in the 'db' schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow009.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 151 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 151 FROM foo;\n```\n\nLANGUAGE: sql\nCODE:\n```\n# User: user[user] @ [1.2.3.4]\n# Thread_id: 152 Schema: db\n# Query_time: 0.000899 Lock_time: 0.000000 Rows_sent: 0 Rows_examined: 0\n# No InnoDB statistics available for this query\nSELECT 152 FROM foo;\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL User Connection Information in Plaintext\nDESCRIPTION: This snippet shows a log entry format for MySQL user connections. It includes the username, the host machine name, and the IP address of the connected client.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow027.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# User@Host: user1[user1] @ web03 [192.168.18.142]\n```\n\n----------------------------------------\n\nTITLE: Defining Film Category Association Table in SQL\nDESCRIPTION: Creates the `film_category` table to associate films with categories using composite keys and offering foreign key constraints to enforce relationships.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.1.txt#2025-04-22_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `film_category` (\n  `film_id` smallint(5) unsigned NOT NULL,\n  `category_id` tinyint(3) unsigned NOT NULL,\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`film_id`,`category_id`),\n  KEY `fk_film_category_category` (`category_id`),\n  CONSTRAINT `fk_film_category_category` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`) ON UPDATE CASCADE,\n  CONSTRAINT `fk_film_category_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: MySQL Log Cleanup\nDESCRIPTION: Final cleanup operations including rollback and restoration of completion type setting\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog005.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nROLLBACK /* added by mysqlbinlog */;\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n```\n\n----------------------------------------\n\nTITLE: Filtering Events by Date/Time Environment Variables in Perl\nDESCRIPTION: Checks if the event matches time-based filtering criteria specified in environment variables (YEAR, MONTH, DAY, HOUR). Returns a boolean indicating whether the event passed all filters or should be excluded.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/filter-add-ymdh-attribs.txt#2025-04-22_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n# Filter event by year, month, hour and day if any corresponding\n# environment variables are set.\nmy $ok = 1;\nforeach my $filter ( qw(YEAR MONTH HOUR DAY) ) {\n   if ( $ENV{$filter} && $event->{lc $filter} != $ENV{$filter} ) {\n      PTDEBUG && _d('Event does not match', $filter, '=', $ENV{$filter});\n      $ok = 0;\n      last;\n   }\n}\n$ok\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Information for mybbl_MBMessage Table in SQL\nDESCRIPTION: This SQL command retrieves status information (like engine, rows, data length) for the table named 'mybbl_MBMessage'. It's part of the context provided by the Percona Toolkit analysis report for understanding the tables involved in the main query. The `\\G` terminator requests vertical output format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow050.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'mybbl_MBMessage'\\G\n```\n\n----------------------------------------\n\nTITLE: Example of Page Structure HTML for Unframed Content/Index Pages\nDESCRIPTION: Shows the basic HTML structure of an unframed content or index page in Natural Docs. The body tag uses either ContentPage or IndexPage class, and contains the main content area, menu, and footer sections.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<body ContentPage or IndexPage)>\n    [browser styles]\n\n    <#Content or #Index>\n        Content or Index\n    </#Content or #Index>\n\n    <#Menu>\n        Menu\n    </#Menu>\n\n    <#Footer>\n        Footer\n    </#Footer>\n\n    [/browser styles]\n</body ContentPage or IndexPage)>\n```\n\n----------------------------------------\n\nTITLE: Creating Percona Test Checksums Table\nDESCRIPTION: This SQL statement creates the 'checksums' table in the percona_test database. It has two columns: db_tbl and checksum, with db_tbl as the primary key. The table uses MyISAM engine with Latin1 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `checksums` (\n  `db_tbl` varchar(128) NOT NULL,\n  `checksum` int(10) unsigned NOT NULL,\n  PRIMARY KEY  (`db_tbl`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Status for 'foo' in SQL\nDESCRIPTION: This SQL command retrieves status details for the `foo` table within the `maindb` database, matching the table name with a LIKE clause. The `\\G` ensures vertical output formatting. This metadata helps in understanding the context of the analyzed queries affecting the 'foo' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow059_report02.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `maindb` LIKE 'foo'\\G\n```\n\n----------------------------------------\n\nTITLE: Deleting Appointments with PMS IDs for a Specific Client in MySQL\nDESCRIPTION: SQL DELETE query that removes appointments for client ID 587 that have non-null PMS IDs. It uses a self-join on the appointment table to apply the deletion criteria.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.004.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE `appointment` T FROM `appointment` T JOIN `appointment` T1 ON T1.id = T.id WHERE T1.client_id = 587  AND T1.pms_id IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Setting Autocommit Mode in MySQL\nDESCRIPTION: This query disables the autocommit mode in MySQL. It has a relatively low execution time and doesn't affect any rows.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow013_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSET autocommit=0\\G\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk I/O Statistics (Snapshot 3)\nDESCRIPTION: This snippet contains the third snapshot of disk I/O statistics, taken at timestamp 3.0. It provides a view of the system's disk performance at that specific moment, using the established columnar format.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/all_int_diskstats-002.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n#ts device    rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  3.0 ram0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram6          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram7          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram8          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram9          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram10         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram11         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram12         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram13         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram14         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 ram15         0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sda           0.0    0.0     3.5     0.0    0.0     0.1   4%      0\n  3.0 sda1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sda2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sda3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sda4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sda5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sda6          0.0    0.0     3.5     0.0    0.0     0.1   4%      0\n  3.0 sdb           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sdc           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-0          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-1          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-2          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-3          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-4          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-5          0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 dm-6          0.1    0.0     3.5     0.1    0.0     0.2   4%      0\n  3.0 sr0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sdd           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 sr1           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 md0           0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 emcpowera     0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Describing MySQL x$processlist Table\nDESCRIPTION: This snippet provides the structure of the 'x$processlist' table. It includes similar process information compared to 'processlist', but with minor differences in data types for certain fields, which are significant for systems requiring nuanced database process insights.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_44\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc x$processlist;\\n+------------------------+------------------------------------------+------+-----+---------+-------+\\n| Field                  | Type                                     | Null | Key | Default | Extra |\\n+------------------------+------------------------------------------+------+-----+---------+-------+\\n| thd_id                 | bigint(20) unsigned                      | NO   |     | NULL    |       |\\n| conn_id                | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| user                   | varchar(128)                             | YES  |     | NULL    |       |\\n| db                     | varchar(64)                              | YES  |     | NULL    |       |\\n| command                | varchar(16)                              | YES  |     | NULL    |       |\\n| state                  | varchar(64)                              | YES  |     | NULL    |       |\\n| time                   | bigint(20)                               | YES  |     | NULL    |       |\\n| current_statement      | longtext                                 | YES  |     | NULL    |       |\\n| statement_latency      | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| progress               | decimal(26,2)                            | YES  |     | NULL    |       |\\n| lock_latency           | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| rows_examined          | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| rows_sent              | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| rows_affected          | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| tmp_tables             | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| tmp_disk_tables        | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| full_scan              | varchar(3)                               | NO   |     |         |       |\\n| last_statement         | longtext                                 | YES  |     | NULL    |       |\\n| last_statement_latency | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| current_memory         | decimal(41,0)                            | YES  |     | NULL    |       |\\n| last_wait              | varchar(128)                             | YES  |     | NULL    |       |\\n| last_wait_latency      | varchar(20)                              | YES  |     | NULL    |       |\\n| source                 | varchar(64)                              | YES  |     | NULL    |       |\\n| trx_latency            | bigint(20) unsigned                      | YES  |     | NULL    |       |\\n| trx_state              | enum('ACTIVE','COMMITTED','ROLLED BACK') | YES  |     | NULL    |       |\\n| trx_autocommit         | enum('YES','NO')                         | YES  |     | NULL    |       |\\n| pid                    | varchar(1024)                            | YES  |     | NULL    |       |\\n| program_name           | varchar(1024)                            | YES  |     | NULL    |       |\\n+------------------------+------------------------------------------+------+-----+---------+-------+\\n28 rows in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Installing Percona Toolkit Using Perl\nDESCRIPTION: This snippet provides the commands to install the Percona Toolkit using Perl. Key steps include running the Makefile to configure the installation, compiling with 'make', testing the installation, and finally installing the tools system-wide, potentially requiring root privileges. The typical installation path is /usr/local/bin.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nperl Makefile.PL\nmake\nmake test\nmake install\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Server Configuration Tables\nDESCRIPTION: Creates core MySQL system tables including servers, proxies, time zones and user privileges. These tables store MySQL server configuration and access control settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `servers` (\n  `Server_name` char(64) NOT NULL DEFAULT '',\n  `Host` char(64) NOT NULL DEFAULT '',\n  `Db` char(64) NOT NULL DEFAULT '',\n  `Username` char(64) NOT NULL DEFAULT '',\n  `Password` char(64) NOT NULL DEFAULT '',\n  `Port` int(4) NOT NULL DEFAULT '0',\n  `Socket` char(64) NOT NULL DEFAULT '',\n  `Wrapper` char(64) NOT NULL DEFAULT '',\n  `Owner` char(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`Server_name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL Foreign Servers table'\n```\n\n----------------------------------------\n\nTITLE: Creating plugin Table in SQL\nDESCRIPTION: Outlines the 'plugin' table structure for maintaining metadata of MySQL plugins, with fields like name and dl. This allows MySQL to load and manage plugins dynamically, with the primary key set on the plugin name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-5.6.txt#2025-04-22_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` varchar(64) NOT NULL DEFAULT '',\n  `dl` varchar(128) NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='MySQL plugins'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Database Table Information\nDESCRIPTION: SQL query to get detailed information about tables in all databases. The query extracts table names, sizes, row counts, and creation times from INFORMATION_SCHEMA.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/empty_json_report.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TABLE_SCHEMA, TABLE_NAME, ENGINE, ROW_FORMAT, TABLE_ROWS, AVG_ROW_LENGTH, DATA_LENGTH, MAX_DATA_LENGTH, INDEX_LENGTH, DATA_FREE, TABLE_COLLATION, CREATE_TIME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql')\n```\n\n----------------------------------------\n\nTITLE: Mixed Index Merge with Union and Intersection in MySQL\nDESCRIPTION: Shows a mixed index merge strategy using both union and intersection. The query looks for rows matching (key1=100 AND key2=100) OR key3=101.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t1 (key1,key2,key3,key4,filler1) values (101,101,101,101, 'key1234-101');\nexplain select key1,key2,key3,key4,filler1 from t1 where key1=100 and key2=100 or key3=101;\nselect key1,key2,key3,key4,filler1 from t1 where key1=100 and key2=100 or key3=101;\n```\n\n----------------------------------------\n\nTITLE: MySQL Show Process List Output\nDESCRIPTION: Output from MySQL SHOW FULL PROCESSLIST command showing two connections: a binlog dump process for replication and a query process. Includes process IDs, users, connection hosts, states and commands being executed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset009.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nId\tUser\tHost\tdb\tCommand\tTime\tState\tInfo\n21\tmsandbox\tlocalhost:54732\tNULL\tBinlog Dump\t3081\tHas sent all binlog to slave; waiting for binlog to be updated\tNULL\n41\tmsandbox\tlocalhost\tNULL\tQuery\t0\tNULL\tshow full processlist\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Query\nDESCRIPTION: Simple SELECT query retrieving all columns from table t with execution metrics\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-table-usage/samples/in/slow001.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from t;\n```\n\n----------------------------------------\n\nTITLE: Querying Auction Category Mapping\nDESCRIPTION: Simple SQL query to retrieve category IDs for a specific auction from the auction_category_map table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/genlogs/genlog002.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category_id\nFROM auction_category_map \nWHERE auction_id = '3015563'\n```\n\n----------------------------------------\n\nTITLE: Administrator Quit Command\nDESCRIPTION: Administrative command to terminate the connection. Has 2μs execution time with no lock time. Executed by user 'meow' on host '1.2.3.8' in database 'db1'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow008_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nadministrator command: Quit\n```\n\n----------------------------------------\n\nTITLE: Creating plugin Table in MySQL\nDESCRIPTION: SQL statement for creating the plugin table which stores information about MySQL server plugins. It has columns for plugin name and shared library path with appropriate collation settings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `plugin` (\n  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',\n  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='MySQL plugins';\n```\n\n----------------------------------------\n\nTITLE: MySQL Update Query with Inner Join\nDESCRIPTION: UPDATE query that modifies column1 and word3 in tuningdetail_21_265507 table based on matching records in gonzo table using an INNER JOIN. The query took 726ms to execute with 61.48k rows examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_iters_2.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate db2.tuningdetail_21_265507 n\n      inner join db1.gonzo a using(gonzo) \n      set n.column1 = a.column1, n.word3 = a.word3\n```\n\n----------------------------------------\n\nTITLE: Conditional Update Query\nDESCRIPTION: Updates boop column in bizzle.bat table with a where clause condition. Execution time: 530us.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE bizzle.bat\nSET    boop='bop: 899'\nWHERE  fillze='899'\n```\n\n----------------------------------------\n\nTITLE: Loading Data into MySQL Table with SQL Command\nDESCRIPTION: This SQL snippet is used to load data from a file into a specified table in a MySQL database. The data file path and target table are specified in the command. The primary functionality involves bulk data import which is efficient for large datasets. Dependencies include having appropriate permissions to read the file and access the target database. Inputs are the file path and table name; there are no immediate outputs other than the data being imported into the table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow051.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nLOAD DATA INFILE '/tmp/bar.txt' INTO TABLE db.tbl\\G\n```\n\n----------------------------------------\n\nTITLE: Defining Help Topics Table in MySQL\nDESCRIPTION: This snippet creates the 'help_topic' table, which is fundamental in documenting and storing detailed explanations of topics for MySQL support.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.6.txt#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_topic` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `name` char(64) NOT NULL,\n  `help_category_id` smallint(5) unsigned NOT NULL,\n  `description` text NOT NULL,\n  `example` text NOT NULL,\n  `url` char(128) NOT NULL,\n  PRIMARY KEY (`help_topic_id`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='help topics'\n```\n\n----------------------------------------\n\nTITLE: Generating Statement Latency Histogram in MySQL\nDESCRIPTION: Creates a text-based histogram showing distribution of average latency values for normalized queries tracked in Performance Schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_154\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_statement_avg_latency_histogram()G\n```\n\n----------------------------------------\n\nTITLE: Displaying SMBIOS Information in Plaintext\nDESCRIPTION: This snippet shows the SMBIOS (System Management BIOS) entry point and version information. It indicates the presence of SMBIOS 2.8 and provides details about the number of structures and table location.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-summary/samples/dmidecode-006.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SMBIOS entry point at 0x000f04d0\nSMBIOS 2.8 present.\n84 structures occupying 3168 bytes.\nTable at 0x000EC170.\n```\n\n----------------------------------------\n\nTITLE: Creating Film Text Update Trigger in MySQL\nDESCRIPTION: Trigger that updates film_text table when film title or description is modified in the film table. Only updates if title or description has changed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\nCREATE TRIGGER `upd_film` AFTER UPDATE ON `film` FOR EACH ROW BEGIN\n    IF (old.title != new.title) or (old.description != new.description)\n    THEN\n        UPDATE film_text\n            SET title=new.title,\n                description=new.description,\n                film_id=new.film_id\n        WHERE film_id=old.film_id;\n    END IF;\n  END;;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Administrator Command: Quit (SQL)\nDESCRIPTION: This snippet shows the analysis of an administrator command 'Quit'. It includes various performance metrics such as execution time, lock time, rows examined, and query size. The query time distribution is also provided.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow011_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nadministrator command: Quit\\G\n```\n\n----------------------------------------\n\nTITLE: SELECT DISTINCT Query from tbl in my_webstats Database\nDESCRIPTION: A SQL query selecting distinct column values from table 'tbl' with a WHERE condition filtering for a specific date value. This query is executed in the 'my_webstats' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/genlog003.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT col FROM tbl WHERE foo=20061219\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Select Query on Foo Table\nDESCRIPTION: This snippet selects all rows from the 'foo' table. It is an EXPLAIN query showing full scan usage. Prerequisites include a pre-existing 'foo' table and configured database in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum-with-Locktime-distro.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nEXPLAIN /\\*!50100 PARTITIONS\\*/ SELECT * FROM foo\\G\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from foo_tbl Table in MySQL\nDESCRIPTION: A simple SELECT query retrieving the 'col' column from the 'foo_tbl' table in the 'foo' database. The query was executed by SQL_SLAVE user with 12μs execution time and no rows examined.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow006-order-by-re.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col FROM foo_tbl\n```\n\n----------------------------------------\n\nTITLE: Table Creation with Foreign Key Constraints\nDESCRIPTION: Defines tables in the database with primary and foreign keys to ensure data consistency and integrity. Tables like 'film_actor', 'film_category', and 'inventory' incorporate foreign key constraints that link to other tables, providing relational structure.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysqldump-001.txt#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\n\"CREATE TABLE `film_actor` (\\n  `actor_id` smallint(5) unsigned NOT NULL,\\n  `film_id` smallint(5) unsigned NOT NULL,\\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n  PRIMARY KEY (`actor_id`,`film_id`),\\n  KEY `idx_fk_film_id` (`film_id`),\\n  CONSTRAINT `fk_film_actor_actor` FOREIGN KEY (`actor_id`) REFERENCES `actor` (`actor_id`) ON UPDATE CASCADE,\\n  CONSTRAINT `fk_film_actor_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\\n...\"\n```\n\nLANGUAGE: SQL\nCODE:\n```\n\"CREATE TABLE `inventory` (\\n  `inventory_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\\n  `film_id` smallint(5) unsigned NOT NULL,\\n  `store_id` tinyint(3) unsigned NOT NULL,\\n  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\\n  PRIMARY KEY (`inventory_id`),\\n  KEY `idx_fk_film_id` (`film_id`),\\n  KEY `idx_store_id_film_id` (`store_id`,`film_id`),\\n  CONSTRAINT `fk_inventory_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE,\\n  CONSTRAINT `fk_inventory_film` FOREIGN KEY (`film_id`) REFERENCES `film` (`film_id`) ON UPDATE CASCADE\\n) ENGINE=InnoDB AUTO_INCREMENT=4582 DEFAULT CHARSET=utf8;\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Structure in HTML\nDESCRIPTION: This snippet illustrates the HTML structure for a menu, including titles, subtitles, entries, and search functionality.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<#Menu>\n    <MTitle>\n        Menu title\n        <MSubTitle>\n            Menu sub title\n        </MSubTitle>\n    </MTitle>\n    <MEntry>\n        <MFile (and #MSelected?)>\n            <a href>File</a href>\n        </MFile>\n    </MEntry>\n    <!-- Additional entries and search panel -->\n</#Menu>\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration File Paths\nDESCRIPTION: Default configuration file paths that MySQL server reads in order of precedence.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp003.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf\n```\n\n----------------------------------------\n\nTITLE: Specific SQL Query Instance Causing an Error\nDESCRIPTION: This specific SQL query attempts to select the column `host1_col` from the table `test.t`. According to the report diffs, executing this statement resulted in a 'DBD::mysql::st execute failed: Unknown column \\'host1_col\\' in \\'field list\\'' error on one host, whereas it produced no error (or a different result) on the comparison host.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host2.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect host1_col from test.t\n```\n\n----------------------------------------\n\nTITLE: Creating Help Relations Table\nDESCRIPTION: This `help_relation` table associates help topics with their relevant keywords, enabling efficient retrieval and categorization of help information in MySQL.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/SchemaIterator/all-dbs-tbls-cluster-5.5.txt#2025-04-22_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `help_relation` (\n  `help_topic_id` int(10) unsigned NOT NULL,\n  `help_keyword_id` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='keyword-topic relation'\n```\n\n----------------------------------------\n\nTITLE: Listing PXC-Specific Resources Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet shows the Percona XtraDB Cluster (PXC) specific resources that the tool collects. It includes various backup and cluster-related resources.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"perconaxtradbbackups\",\n\"perconaxtradbclusterbackups\",\n\"perconaxtradbclusterrestores\",\n\"perconaxtradbclusters\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Schema for Specific Thread\nDESCRIPTION: Enables Performance Schema monitoring for a given connection/thread ID. Can be used to enable monitoring for the current connection.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.6/sys/README.md#2025-04-22_snippet_146\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_thread(3);\n+------------------+\n| summary          |\n+------------------+\n| Enabled 1 thread |\n+------------------+\n1 row in set (0.01 sec)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> CALL sys.ps_setup_enable_thread(CONNECTION_ID());\n+------------------+\n| summary          |\n+------------------+\n| Enabled 1 thread |\n+------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Executing Select Query with Error Handling in SQL\nDESCRIPTION: This SQL snippet attempts to select a column from a given table. It is part of a process for comparing query results across different hosts. The query's purpose is to identify and report differences or errors encountered during execution. The SQL command must access valid tables and column names in the target database to operate correctly.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect host?_col from test.t\n```\n\nLANGUAGE: SQL\nCODE:\n```\nselect host2_col from test.t\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into vendor11gonzo Table in SQL\nDESCRIPTION: This SQL snippet inserts a row into the 'vendor11gonzo' table in the 'db3' database. It sets the 'makef' column to an empty string and the 'bizzle' column to 'Exact'.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow002_report_no_vertical.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO db3.vendor11gonzo (makef, bizzle)\nVALUES ('', 'Exact')\n```\n\n----------------------------------------\n\nTITLE: Getting Log Context Information\nDESCRIPTION: Extract detailed context from a single log file using pt-galera-log-explainer. It provides extracted information such as version, SST details, and UUID-IP-node mappings.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer ctx mysql.log\n```\n\n----------------------------------------\n\nTITLE: Defining C/C++ Language in Natural Docs Configuration\nDESCRIPTION: Configures language properties for C and C++, including file extensions, comment styles, and prototype parsing rules.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_2\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: C/C++\n\n   Extensions: c cpp h hpp cxx hxx\n   Ignore Function Prefix in Index: ~\n   Line Comment: //\n   Block Comment: /* */\n   Package Separator: ::\n   Enum Values: Under parent\n   Class Prototype Enders: ; {\n   Function Prototype Enders: ; {\n   Variable Prototype Enders: ; =\n```\n\n----------------------------------------\n\nTITLE: Update Query Joining Multiple Tables\nDESCRIPTION: Updates records in test3.tbl2 by joining with test3.tblo based on animal and oid columns.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog001.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate test3.tblo as o\n         inner join test3.tbl2 as e on o.animal = e.animal and o.oid = e.oid\n      set e.tblo = o.tblo,\n          e.col3 = o.col3\n      where e.tblo is null/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Checking Account Enablement in Performance Schema with MySQL\nDESCRIPTION: Demonstrates how to use the sys.ps_is_account_enabled function to check if instrumentation is enabled for a specific account in Performance Schema.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_114\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> SELECT sys.ps_is_account_enabled('localhost', 'root');\n+------------------------------------------------+\n| sys.ps_is_account_enabled('localhost', 'root') |\n+------------------------------------------------+\n| YES                                            |\n+------------------------------------------------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Querying Stable Column in MySQL\nDESCRIPTION: SQL query that selects the 'less_variable_column' from 'steady_table'. This query demonstrates consistent performance with query times consistently around 1 second as shown in the slow query log.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow052.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect less_variable_column from steady_table;\n```\n\n----------------------------------------\n\nTITLE: Switching Database in MySQL\nDESCRIPTION: This SQL command changes the current database context to 'db2'. It precedes a query on the 'bar' table, suggesting that 'bar' might be located in the 'db2' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow033.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nuse db2;\n```\n\n----------------------------------------\n\nTITLE: Querying IO Thread Latency in MySQL\nDESCRIPTION: Shows example output of the io_by_thread_by_latency view which displays IO statistics grouped by thread, including total operations, latency metrics and thread identification.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from io_by_thread_by_latency;\n```\n\n----------------------------------------\n\nTITLE: SQL Parameter Declarations\nDESCRIPTION: SQL function parameter patterns showing both standard SQL and Microsoft SQL Server syntax. Standard SQL uses space-separated types while MS SQL uses @ prefixed parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/Languages.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nFunctionName ( identifier type, identifier modifier type, identifier type := value )\nFunctionName @identifier type, @dentifier modifier type, @identifier type = value\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Additional Content Values\nDESCRIPTION: SQL query that retrieves distinct values from treeADDITIONALCONTENT table by joining with treeCODE and tree tables. Filters results by city ID, partner ID, and additional type ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/pl/recset004.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct treeaddit0_.value as col_0_0_ from treeADDITIONALCONTENT treeaddit0_, treeCODE treecode1_, tree tree4_ where treecode1_.treeid=tree4_.treeid and treeaddit0_.treecodeid=treecode1_.treecodeid and (treecode1_.treeid in (select tree2_.treeid from tree tree2_ where tree2_.qcnscityid=806497)) and treeaddit0_.additionaltypeid=2 and tree4_.partnerid=2\n```\n\n----------------------------------------\n\nTITLE: Selecting a Column from a Table Using SQL\nDESCRIPTION: This snippet demonstrates a basic SQL SELECT statement that retrieves a specific column from the table 'test.t'. There are no external dependencies, although the result is subject to schema correctness. The key parameter is the column name, which should exist in the table; otherwise, an error will be triggered as indicated in the log context.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/005/error_on_host1_results.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect host?_col from test.t\n```\n\n----------------------------------------\n\nTITLE: MySQL Client ACK Packet\nDESCRIPTION: Network packet showing client's acknowledgment of server's response\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump005.txt#2025-04-22_snippet_2\n\nLANGUAGE: hex\nCODE:\n```\n0x0000:  4508 0034 8051 4000 4006 bc68 7f00 0001\n0x0010:  7f00 0001 d804 0cea 1b4c dff2 1b00 8f4e\n0x0020:  8010 0212 a4f2 0000 0101 080a 0084 2319\n0x0030:  0084 2319\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Final ACK\nDESCRIPTION: Final acknowledgment packet from client completing the query transaction.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/tcpdump/tcpdump025.txt#2025-04-22_snippet_5\n\nLANGUAGE: hex\nCODE:\n```\n4508 0034 e9a6 4000 4006 5313 7f00 0001\\n7f00 0001 bdc9 3039 9bdb f8e5 9c96 8a8e\\n8010 0101 8a50 0000 0101 080a 0059 216c\\n0059 2162\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into tbl Table\nDESCRIPTION: This SQL INSERT statement adds a new row to the 'tbl' table in the database 'db2'. The statement inserts the values ('a', 'b').\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-order-by-Locktime-sum.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO tbl VALUES ('a', 'b')\\G\n```\n\n----------------------------------------\n\nTITLE: Querying Global File IO Statistics by Latency\nDESCRIPTION: Demonstrates querying the io_global_by_file_by_latency view to see top IO consumers by latency, including read/write latencies and counts.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_24\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from io_global_by_file_by_latency limit 5;\n```\n\n----------------------------------------\n\nTITLE: Collect Command Usage for pt-secure-collect\nDESCRIPTION: Demonstrates the usage of the 'collect' command in pt-secure-collect. This command is used to collect, sanitize, pack, and encrypt data from pt-tools.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-secure-collect/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npt-secure-collect collect <flags>\n```\n\n----------------------------------------\n\nTITLE: UPDATE Query with Multiple Column Values\nDESCRIPTION: SQL UPDATE statement setting values in d?va?oncept?upload table with a WHERE clause filtering by specific upload ID.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/save-results/slow002-limit-3.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE foo.bar SET biz = '91848182522'\n```\n\n----------------------------------------\n\nTITLE: Listing MySQL-Specific Resources Collected by pt-k8s-debug-collector\nDESCRIPTION: This snippet shows the MySQL-specific resources that the tool collects, including backups, restores, and server instances.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-k8s-debug-collector.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"perconaservermysqlbackups\",\n\"perconaservermysqlrestores\",\n\"perconaservermysqls\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Execution Log\nDESCRIPTION: Slow query log entry showing a SELECT query on cottages table with execution metrics including query time, lock time, and row counts\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow031.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse myplace;\nSET timestamp=1233019414;\nSELECT * FROM cottages;\n```\n\n----------------------------------------\n\nTITLE: Visual Basic Parameter Style\nDESCRIPTION: Visual Basic function declaration pattern with support for modifiers (ByVal, ByRef, Optional, ParamArray) before identifiers and type declarations using 'as' keyword.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/Languages.txt#2025-04-22_snippet_3\n\nLANGUAGE: vb\nCODE:\n```\nFunctionName ( modifiers identifier as type, identifier = value )\n```\n\n----------------------------------------\n\nTITLE: Querying Basket Item Quantity by Session ID (SQL)\nDESCRIPTION: This SQL query, executed within an active InnoDB transaction by 'user_foo' from host '10.66.209.223' against the 'foo' database, calculates the sum of the 'quantity' column from the 'basket_item' table. It filters rows where the 'session_id' column matches the specific string '1993053150409986204'. This is likely part of application logic retrieving basket totals for a user session.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/innodb-status.001.txt#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUM(quantity) FROM basket_item WHERE session_id='1993053150409986204'\n```\n\n----------------------------------------\n\nTITLE: Inserting NULL and Long Username into Table - MySQL Insert Statement - SQL\nDESCRIPTION: This snippet demonstrates how to insert a record into the 't' table with an explicit NULL for 'id' and a string 'long_username' for 'username'. The associated warning indicates that this input may cause data truncation on the 'username' column, likely due to length or type constraints. This is useful in testing and reproducing truncation errors in SQL database operations.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/003/insert_truncate_warning_results.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t (id, username) VALUES (NULL, 'long_username')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pt-secure-collect\nDESCRIPTION: Shows the basic command syntax for using pt-secure-collect. The tool accepts flags and commands with optional arguments.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-secure-collect/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npt-secure-collect [<flags>] <command> [<args> ...]\n```\n\n----------------------------------------\n\nTITLE: Cross-Database INSERT SELECT Operation - SQL\nDESCRIPTION: Complex INSERT SELECT operation copying data between tables across different databases with a filter condition.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow038.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO db6.tbl6 SELECT * FROM tbl7 WHERE id>1;\n```\n\n----------------------------------------\n\nTITLE: Defining Java Language in Natural Docs Configuration\nDESCRIPTION: Configures Java language properties including comment styles and prototype parsing rules.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Config/Languages.txt#2025-04-22_snippet_4\n\nLANGUAGE: Configuration\nCODE:\n```\nLanguage: Java\n\n   Extension: java\n   Line Comment: //\n   Block Comment: /* */\n   Enum Values: Under type\n   Function Prototype Ender: {\n   Variable Prototype Enders: ; =\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NDMarkup Text Formatting Tags\nDESCRIPTION: Examples of inline text formatting tags for bold, italic, and underline, as well as specialized tags for links, URLs, emails, and image links.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/NDMarkup.txt#2025-04-22_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<b></b>\n<i></i>\n<u></u>\n<link target=\"\" name=\"\" original=\"\">\n<url target=\"\" name=\"\">\n<email target=\"\" name=\"\">\n<img mode=\"link\" target=\"\" original=\"\">\n```\n\n----------------------------------------\n\nTITLE: Simple SELECT Query from MySQL food Database\nDESCRIPTION: A basic SELECT query that retrieves the 'fruit' column from the 'trees' table in the 'food' database. The query uses an index scan as shown by the EXPLAIN output.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_2-57.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT fruit FROM trees\n```\n\n----------------------------------------\n\nTITLE: Displaying Time-Aggregated Disk I/O Statistics\nDESCRIPTION: This snippet displays disk I/O statistics aggregated over time, showing metrics sampled every second for 14 seconds (indicated by the first column 'ts'). It includes columns for read/write megabytes per second (rd_mb_s, wr_mb_s), concurrency (rd_cnc, wr_cnc), response time (rd_rt, wr_rt), busy percentage, and in-progress requests (in_prg). The `{31}` prefix on each line might represent the total number of devices being aggregated in this summary or a specific configuration identifier for the monitoring run.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/expected/disk_int_switch_to_sample.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n#ts device rd_mb_s rd_cnc   rd_rt wr_mb_s wr_cnc   wr_rt busy in_prg\n  1.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  2.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  3.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  4.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  5.0 {31}       0.0    0.0     0.0     0.1    0.0     0.0   0%      0\n  6.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  7.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  8.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n  9.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 10.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 11.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 12.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 13.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n 14.0 {31}       0.0    0.0     0.0     0.0    0.0     0.0   0%      0\n```\n\n----------------------------------------\n\nTITLE: Example of Page Structure HTML for Framed Content Pages\nDESCRIPTION: Demonstrates the HTML structure for framed content, index, or search results pages. The body tag uses one of the framed page classes and contains only the main content area.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/util/NaturalDocs/Info/CSSGuide.txt#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<body FramedContentPage or FramedIndexPage or FramedSearchResultsPage>\n    [browser styles]\n\n    <#Content or #Index>\n        Content or Index\n    </#Content or #Index>\n\n    [browser styles]\n</body FramedContentPage or FramedIndexPage or FramedSearchResultsPage>\n```\n\n----------------------------------------\n\nTITLE: Listing Percona XtraDB Cluster Specific Resources Collected\nDESCRIPTION: This snippet enumerates the custom resource definitions (CRDs) specific to Percona XtraDB Cluster (PXC) that `pt-k8s-debug-collector` gathers when targeting PXC. It includes resources related to backups, cluster backups, restores, and the cluster itself.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"perconaxtradbbackups\",\n\"perconaxtradbclusterbackups\",\n\"perconaxtradbclusterrestores\",\n\"perconaxtradbclusters\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Basic Usage Command\nDESCRIPTION: The basic command syntax for starting the MySQL server daemon with optional configuration parameters.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/configs/mysqldhelp002.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/usr/libexec/mysqld [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating Time Zone Leap Second Table in MySQL\nDESCRIPTION: Creates the time_zone_leap_second table that stores information about leap seconds in time zones, including transition times and corrections. Uses MyISAM engine with UTF-8 character set.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET @saved_cs_client     = @@character_set_client;\nSET character_set_client = utf8;\nCREATE TABLE `time_zone_leap_second` (\n  `Transition_time` bigint(20) NOT NULL,\n  `Correction` int(11) NOT NULL,\n  PRIMARY KEY  (`Transition_time`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Leap seconds information for time zones';\nSET character_set_client = @saved_cs_client;\n```\n\n----------------------------------------\n\nTITLE: Database Selection with Backticks\nDESCRIPTION: SQL command for selecting a database using backtick notation for escaping database name.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/slowlogs/slow057.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse `db`;\n```\n\n----------------------------------------\n\nTITLE: Multi-Node Log Analysis - Bash\nDESCRIPTION: Example of analyzing logs from multiple nodes\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer list --all *.log\n```\n\n----------------------------------------\n\nTITLE: Conflicts Command - Bash\nDESCRIPTION: Command to list replication failure votes in Galera 4\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-galera-log-explainer.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer conflicts [--json|--yaml] *.log\n```\n\n----------------------------------------\n\nTITLE: Database Counters Query - PostgreSQL SQL\nDESCRIPTION: Retrieves various performance counters from pg_stat_database view.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/pt-pg-summary.rst#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_stat_database\n```\n\n----------------------------------------\n\nTITLE: Creating Updated UTF-8 Table with DEFAULT Keyword\nDESCRIPTION: Creates a new version of the 'test1' table using explicit DEFAULT keyword in column definitions. This is a slightly different syntax from the earlier table creation.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog010.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `test1` (\n  `kwid` int(10) unsigned NOT NULL DEFAULT '0',\n  `keyword` varchar(80) NOT NULL DEFAULT ''\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into MySQL Table\nDESCRIPTION: Inserts two rows with values 1 and 2 into the 'foo' table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/binlogs/binlog002.txt#2025-04-22_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSET TIMESTAMP=1248268944/*!*/;\ninsert foo values (1),(2)\n/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Modifying --version-check Behavior in Percona Toolkit (Bash)\nDESCRIPTION: Addresses a potential security concern with the `--version-check` option across Percona Toolkit tools (bug 1279502). The ability for this option to retrieve version information for *any* local program has been removed, mitigating potential misuse.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/docs/release_notes.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Example usage with a generic toolkit command\npt-some-tool --version-check\n```\n\n----------------------------------------\n\nTITLE: Creating Sales by Film Category Temporary Table Structure in MySQL\nDESCRIPTION: SQL script to create a temporary table structure for the sales_by_film_category view. The table tracks sales categorized by film category with a decimal total_sales column.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/all-dbs.txt#2025-04-22_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\n/*!50001 CREATE TABLE `sales_by_film_category` (\n  `category` varchar(25),\n  `total_sales` decimal(27,2)\n) ENGINE=MyISAM */\n```\n\n----------------------------------------\n\nTITLE: Querying All Records from 'foo' Table in 'db3' Database in SQL\nDESCRIPTION: These SQL queries select all columns and rows from the 'foo' table in the 'db3' database. They perform full table scans but differ in the number of rows examined and returned.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow034-inheritance.txt#2025-04-22_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nuse db3;\nSELECT * FROM foo;\n```\n\n----------------------------------------\n\nTITLE: No-op SQL Query Placeholder - SQL\nDESCRIPTION: Acts as a placeholder indicating no query was executed, logged, or provided in this segment of the report. Used for completeness in detailed query logs or analysis files. No dependencies, inputs, or outputs; serves only a documentation role with no database action performed.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow056.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n/* No query */\\G\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Processed Value for --ignore (Plaintext)\nDESCRIPTION: Shows the resulting value (`FALSE`) assigned to the `--ignore` option after command-line arguments have been parsed, assuming the option was not explicitly provided by the user.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/OptionParser/help003.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--ignore      FALSE\n```\n\n----------------------------------------\n\nTITLE: Identifying PXC Summary Tool Used\nDESCRIPTION: This snippet indicates that the `pt-mysql-summary` tool is used to generate a summary report for Percona XtraDB Cluster (PXC), which is then included in the collected data (specifically in `summary.txt`). Requires `pt-mysql-summary` and `mysql` client to be installed and in PATH.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-k8s-debug-collector/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pt-mysql-summary\"\n```\n\n----------------------------------------\n\nTITLE: Describing sys.innodb_lock_waits and sys.x$innodb_lock_waits tables - SQL\nDESCRIPTION: These snippets use the SQL 'DESC' command to display the schema of the sys.innodb_lock_waits and sys.x$innodb_lock_waits views, showing column types and attributes. Both views contain detailed information on InnoDB lock waits, such as transaction IDs, queries, timing, and locking specifics. The primary difference is the data type for the 'waiting_query' and 'blocking_query' fields, which are 'longtext' in the standard sys view and 'varchar(1024)' in the x$ view. No specific dependencies are required other than access to a MySQL database with the sys schema installed. Inputs are table/view names; outputs are column descriptions.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/sandbox/servers/5.7/sys/README.md#2025-04-22_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nmysql> desc sys.innodb_lock_waits;\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| Field                        | Type                | Null | Key | Default             | Extra |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| wait_started                 | datetime            | YES  |     | NULL                |       |\n| wait_age                     | time                | YES  |     | NULL                |       |\n| wait_age_secs                | bigint(21)          | YES  |     | NULL                |       |\n| locked_table                 | varchar(1024)       | NO   |     |                     |       |\n| locked_index                 | varchar(1024)       | YES  |     | NULL                |       |\n| locked_type                  | varchar(32)         | NO   |     |                     |       |\n| waiting_trx_id               | varchar(18)         | NO   |     |                     |       |\n| waiting_trx_started          | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| waiting_trx_age              | time                | YES  |     | NULL                |       |\n| waiting_trx_rows_locked      | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_trx_rows_modified    | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_pid                  | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_query                | longtext            | YES  |     | NULL                |       |\n| waiting_lock_id              | varchar(81)         | NO   |     |                     |       |\n| waiting_lock_mode            | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_id              | varchar(18)         | NO   |     |                     |       |\n| blocking_pid                 | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_query               | longtext            | YES  |     | NULL                |       |\n| blocking_lock_id             | varchar(81)         | NO   |     |                     |       |\n| blocking_lock_mode           | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_started         | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| blocking_trx_age             | time                | YES  |     | NULL                |       |\n| blocking_trx_rows_locked     | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_trx_rows_modified   | bigint(21) unsigned | NO   |     | 0                   |       |\n| sql_kill_blocking_query      | varchar(32)         | YES  |     | NULL                |       |\n| sql_kill_blocking_connection | varchar(26)         | YES  |     | NULL                |       |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n26 rows in set (0.01 sec)\n\nmysql> desc sys.x$innodb_lock_waits;\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| Field                        | Type                | Null | Key | Default             | Extra |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n| wait_started                 | datetime            | YES  |     | NULL                |       |\n| wait_age                     | time                | YES  |     | NULL                |       |\n| wait_age_secs                | bigint(21)          | YES  |     | NULL                |       |\n| locked_table                 | varchar(1024)       | NO   |     |                     |       |\n| locked_index                 | varchar(1024)       | YES  |     | NULL                |       |\n| locked_type                  | varchar(32)         | NO   |     |                     |       |\n| waiting_trx_id               | varchar(18)         | NO   |     |                     |       |\n| waiting_trx_started          | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| waiting_trx_age              | time                | YES  |     | NULL                |       |\n| waiting_trx_rows_locked      | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_trx_rows_modified    | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_pid                  | bigint(21) unsigned | NO   |     | 0                   |       |\n| waiting_query                | varchar(1024)       | YES  |     | NULL                |       |\n| waiting_lock_id              | varchar(81)         | NO   |     |                     |       |\n| waiting_lock_mode            | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_id              | varchar(18)         | NO   |     |                     |       |\n| blocking_pid                 | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_query               | varchar(1024)       | YES  |     | NULL                |       |\n| blocking_lock_id             | varchar(81)         | NO   |     |                     |       |\n| blocking_lock_mode           | varchar(32)         | NO   |     |                     |       |\n| blocking_trx_started         | datetime            | NO   |     | 0000-00-00 00:00:00 |       |\n| blocking_trx_age             | time                | YES  |     | NULL                |       |\n| blocking_trx_rows_locked     | bigint(21) unsigned | NO   |     | 0                   |       |\n| blocking_trx_rows_modified   | bigint(21) unsigned | NO   |     | 0                   |       |\n| sql_kill_blocking_query      | varchar(32)         | YES  |     | NULL                |       |\n| sql_kill_blocking_connection | varchar(26)         | YES  |     | NULL                |       |\n+------------------------------+---------------------+------+-----+---------------------+-------+\n26 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Server from Command Line\nDESCRIPTION: Shows the basic usage syntax for starting the MySQL server (mysqld) with optional command-line arguments. It also lists the default configuration file locations that are read in order.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqld_01_issue_58.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage: /usr/libexec/mysqld [OPTIONS]\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf ~/.my.cnf /etc/my.cnf \nThe following groups are read: mysqld server mysqld-5.0\n```\n\n----------------------------------------\n\nTITLE: MySQL INSERT Query with Performance Metrics\nDESCRIPTION: INSERT statement into table 'foo' with execution metrics showing 2s execution time and minimal lock time. Query executed on localhost by root user with 1 row affected.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow018_report.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `foo` VALUES (1, 2, 3)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS LIKE 'foo'\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE `foo`\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Status Check\nDESCRIPTION: Administrative query to show table status information for the 'trees' table in the 'food' database.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/slow007_explain_1.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE STATUS FROM `food` LIKE 'trees'\n```\n\n----------------------------------------\n\nTITLE: Printing Implemented Regexes\nDESCRIPTION: Display the implemented regexes used by pt-galera-log-explainer. It details the regex patterns and their usage categories, verbosity, and internal regex expressions utilized for log extraction.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/src/go/pt-galera-log-explainer/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npt-galera-log-explainer regex-list\n```\n\n----------------------------------------\n\nTITLE: Recording Linux Block Device I/O Statistics\nDESCRIPTION: A time-series log of disk I/O statistics showing detailed metrics for each block device including RAM disks (ram0-15), loop devices (loop0-7), physical disks (xvda, xvdb) and logical volumes (dm-0 to dm-3). Each line contains device ID, device name and 11 metrics including reads/writes completed, sectors read/written and time spent on I/O.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-diskstats/samples/bug-1035311.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n253       2 dm-2 2256 0 48194 29430 61331 0 508992 355400 0 138920 384830\n253       3 dm-3 1529 0 12226 19800 78357 0 627320 681430 0 223790 701230\nTS 1344561800.052755332 2012-08-09 21:23:20\n```\n\n----------------------------------------\n\nTITLE: Rental Table Trigger Definition\nDESCRIPTION: Creates a trigger that automatically sets the rental_date field to the current timestamp before insert operations on the rental table.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/lib/samples/mysqldump-no-data/two-dbs.txt#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\n/*!50003 CREATE*/ /*!50017 DEFINER=`msandbox`@`%`*/ /*!50003 TRIGGER rental_date BEFORE INSERT ON rental\n\tFOR EACH ROW SET NEW.rental_date = NOW() */;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-upgrade/samples/genlog001.txt#2025-04-22_snippet_0\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Sandbox\nDESCRIPTION: This configuration file sets up a MySQL sandbox using Percona Server. It defines client and server parameters including user credentials, port, socket, data directory, and memory-related settings necessary for initializing and running a MySQL instance. Dependencies include a valid installation of Percona Server and the mysql-sandbox for managing MySQL instances.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/expected_output_temp004.txt#2025-04-22_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n# Configuration File #########################################\n              Config File | /tmp/12345/my.sandbox.cnf\n\n[client]\nuser                                = msandbox\npassword                            = msandbox\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\n\n[mysqld]\nport                                = 12345\nsocket                              = /tmp/12345/mysql_sandbox12345.sock\npid-file                            = /tmp/12345/data/mysql_sandbox12345.pid\nbasedir                             = /home/hugmeir/mysql5/mysqlbrew/mysqls/Percona-Server-5.1/\ndatadir                             = /tmp/12345/data\nkey_buffer_size                     = 16M\ninnodb_buffer_pool_size             = 16M\ninnodb_data_home_dir                = /tmp/12345/data\ninnodb_log_group_home_dir           = /tmp/12345/data\ninnodb_data_file_path               = ibdata1:10M:autoextend\ninnodb_log_file_size                = 5M\nlog-bin                             = mysql-bin\nrelay_log                           = mysql-relay-bin\nlog_slave_updates\nserver-id                           = 12345\nreport-host                         = 127.0.0.1\nreport-port                         = 12345\nlog-error                           = mysqld.log\ninnodb_lock_wait_timeout            = 3\n# Memory management library ##################################\n# The End ####################################################\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Info View Structure in Sakila Database\nDESCRIPTION: Creates the structure for the actor_info view that will provide combined information about actors and their films. The view combines actor details with a film information summary.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-mysql-summary/samples/mysql-schema-001.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n/*!50001 CREATE TABLE `actor_info` (\n  `actor_id` smallint(5) unsigned,\n  `first_name` varchar(45),\n  `last_name` varchar(45),\n  `film_info` varchar(341)\n) */;\n```\n\n----------------------------------------\n\nTITLE: Explaining and Selecting Literal Value as Alias - SQL\nDESCRIPTION: Executes an EXPLAIN with the MySQL partitioning extension (if available) for a SELECT statement that returns a literal string value, aliased as 'trick'. Intended for testing or demonstration, this query does not depend on database schema. No input parameters are required. The output is a query plan (if EXPLAIN supported) and the value 'paris in the the spring' labeled as 'trick'. No table or row data is accessed, minimizing execution cost.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-query-digest/samples/tcpdump002_report.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN /*!50100 PARTITIONS*/\nselect \"paris in the the spring\" as trick\\G\n```\n\n----------------------------------------\n\nTITLE: Update and Delete Operations with Index Merge in MySQL\nDESCRIPTION: Demonstrates update and delete operations using index merge. Updates records where key1=100 AND key2=100, changes their values, and then deletes them using the new key values.\nSOURCE: https://github.com/percona/percona-toolkit/blob/3.x/t/pt-visual-explain/samples/offical-test.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect key1,key2, filler1 from t1 where key1=100 and key2=100;\nupdate t1 set filler1='to be deleted' where key1=100 and key2=100;\nupdate t1 set key1=200,key2=200 where key1=100 and key2=100;\ndelete from t1 where key1=200 and key2=200;\n```"
  }
]