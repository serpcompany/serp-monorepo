[
  {
    "owner": "aidenybai",
    "repo": "react-scan",
    "content": "TITLE: React Scan Options Interface Definition\nDESCRIPTION: TypeScript interface describing all available configuration options for React Scan. Includes options to enable/disable scanning, set animation speed, show toolbar, and track unnecessary renders.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Options {\n  /**\n   * Enable/disable scanning\n   *\n   * Please use the recommended way:\n   * enabled: process.env.NODE_ENV === 'development',\n   *\n   * @default true\n   */\n  enabled?: boolean;\n\n  /**\n   * Force React Scan to run in production (not recommended)\n   *\n   * @default false\n   */\n  dangerouslyForceRunInProduction?: boolean;\n  /**\n   * Log renders to the console\n   *\n   * WARNING: This can add significant overhead when the app re-renders frequently\n   *\n   * @default false\n   */\n  log?: boolean;\n\n  /**\n   * Show toolbar bar\n   *\n   * If you set this to true, and set {@link enabled} to false, the toolbar will still show, but scanning will be disabled.\n   *\n   * @default true\n   */\n  showToolbar?: boolean;\n\n  /**\n   * Animation speed\n   *\n   * @default \"fast\"\n   */\n  animationSpeed?: \"slow\" | \"fast\" | \"off\";\n\n  /**\n   * Track unnecessary renders, and mark their outlines gray when detected\n   *\n   * An unnecessary render is defined as the component re-rendering with no change to the component's\n   * corresponding dom subtree\n   *\n   *  @default false\n   *  @warning tracking unnecessary renders can add meaningful overhead to react-scan\n   */\n  trackUnnecessaryRenders?: boolean;\n\n  onCommitStart?: () => void;\n  onRender?: (fiber: Fiber, renders: Array<Render>) => void;\n  onCommitFinish?: () => void;\n  onPaintStart?: (outlines: Array<Outline>) => void;\n  onPaintFinish?: (outlines: Array<Outline>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: React Scan Options Interface Definition\nDESCRIPTION: TypeScript interface defining the configuration options for React Scan, including enabling/disabling scanning, logging, toolbar display, and animation speed.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface Options {\n  enabled?: boolean;\n  dangerouslyForceRunInProduction?: boolean;\n  log?: boolean;\n  showToolbar?: boolean;\n  animationSpeed?: \"slow\" | \"fast\" | \"off\";\n  trackUnnecessaryRenders?: boolean;\n  onCommitStart?: () => void;\n  onRender?: (fiber: Fiber, renders: Array<Render>) => void;\n  onCommitFinish?: () => void;\n  onPaintStart?: (outlines: Array<Outline>) => void;\n  onPaintFinish?: (outlines: Array<Outline>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Unnecessary Renders in React\nDESCRIPTION: JSX code example demonstrating a common cause of unnecessary renders in React applications. The inline function and object cause ExpensiveComponent to re-render even when data hasn't changed.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpensiveComponent onClick={() => alert(\"hi\")} style={{ color: \"purple\" }} />\n```\n\n----------------------------------------\n\nTITLE: Example of Unnecessary React Render\nDESCRIPTION: JSX code snippet demonstrating a common cause of unnecessary renders in React components due to inline function and object creation.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ExpensiveComponent onClick={() => alert(\"hi\")} style={{ color: \"purple\" }} />\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration with Custom Options for React Scan Vite Plugin\nDESCRIPTION: Extended configuration example showing how to customize the React Scan Vite plugin with specific options like enabling scanning, adding auto display names, and setting scan options.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/vite-plugin-react-scan/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport reactScan from '@react-scan/vite-plugin-react-scan';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    reactScan({\n      enable: true,\n      autoDisplayNames: true,\n      scanOptions: {} // React Scan specific options\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Scan as a Module in CRA Entry Point\nDESCRIPTION: This snippet shows how to import React Scan as a module in a Create React App project's entry point file. It's crucial that React Scan is imported before React and React DOM to ensure it can properly hijack React DevTools.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/create-react-app.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// src/index.jsx\n\n// must be imported before React and React DOM\nimport { scan } from \"react-scan\";\nimport React from \"react\";\n\nscan({\n  enabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating React Scan via Import in Layout Component\nDESCRIPTION: Demonstrates how to integrate React Scan through direct import, initializing it after hydration using useEffect. Important note that React Scan must be imported before React Router and React itself in the project.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/react-router.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// app/root\n\n// Must be imported before React Router\nimport { scan } from \"react-scan\"; \nimport { Links, Meta, Scripts, ScrollRestoration } from \"react-router\";\nimport { useEffect } from \"react\";\n\nexport function Layout({ children }) {\n  useEffect(() => {\n    // Make sure to run react-scan only after hydration\n    scan({\n      enabled: true,\n    });\n  }, []);\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Initializing React Scan via Module Import\nDESCRIPTION: Demonstrates how to import and initialize React Scan in a JavaScript/React project. Must be imported before React and React DOM to properly hijack React DevTools.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/vite.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// src/index\nimport { scan } from \"react-scan\"; // must be imported before React and React DOM\nimport React from \"react\";\n\nscan({\n  enabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Scan as a Module in Remix Root Component\nDESCRIPTION: This code snippet shows how to import and initialize React Scan as a module in the root component of a Remix application. It uses the useEffect hook to ensure React Scan runs after hydration.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/remix.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// app/root.jsx\nimport { scan } from \"react-scan\"; // Must be imported before Remix\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport function Layout({ children }) {\n  useEffect(() => {\n    // Make sure to run React Scan after hydration\n    scan({\n      enabled: true,\n    });\n  }, []);\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\nexport default function App() {\n  return <Outlet />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Scan via Module Import in TanStack Router (JSX)\nDESCRIPTION: This snippet shows how to integrate React Scan using module import in the RootDocument component. It uses the useEffect hook to initialize React Scan after hydration and includes necessary imports.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/tanstack-start.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// app/routes/__root\n\n// react-scan must be imported before React and TanStack Start\nimport { scan } from \"react-scan\";\nimport { Meta, Scripts } from \"@tanstack/start\";\nimport { useEffect } from \"react\";\n\n// ...\n\nfunction RootDocument({ children }) {\n  useEffect(() => {\n    // Make sure to run this only after hydration\n    scan({\n      enabled: true,\n    });\n  }, []);\n  return (\n    <html>\n      <head>\n        <Meta />\n      </head>\n      <body>\n        {children}\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Scan Module in NextJS _app\nDESCRIPTION: This snippet demonstrates how to import and initialize React Scan as a module in the _app file of a NextJS project. It uses the useEffect hook to ensure React Scan runs after hydration.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/next-js-page-router.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app\n\n// react-scan must be the top-most import\nimport { scan } from \"react-scan\";\nimport { useEffect } from \"react\";\n\nexport default function App({ Component, pageProps }) {\n  useEffect(() => {\n    // Make sure to run React Scan after hydration\n    scan({\n      enabled: true,\n    });\n  }, []);\n  return <Component {...pageProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React-Scan via Module Import in Astro\nDESCRIPTION: This snippet shows how to integrate React-Scan in an Astro project by importing it as a module and initializing it with configuration options. The scan function is called with an enabled flag set to true.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/astro.md#2025-04-11_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      import { scan } from 'react-scan';\n\n      scan({\n        enabled: true,\n      });\n    </script>\n    <!-- rest of your scripts go under -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Integrating React Scan via CDN\nDESCRIPTION: HTML script tag to include React Scan from a CDN. This must be imported before any other scripts.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- import this BEFORE any scripts -->\n<script src=\"https://unpkg.com/react-scan/dist/auto.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing React Scan via CDN using HTML\nDESCRIPTION: This snippet demonstrates how to include React Scan in an HTML file using a script tag that references the CDN-hosted JavaScript file. This method allows for easy integration of React Scan without local installation.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/cdn.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/react-scan/dist/auto.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan via CDN Script Tag\nDESCRIPTION: Shows how to add React Scan via script tag in an HTML file. The script must be loaded before other scripts to properly initialize.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/vite.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\"></script>\n\n    <!-- rest of your scripts go under -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding React Scan via Script Tag in HTML for CRA Projects\nDESCRIPTION: This snippet demonstrates how to add React Scan to a Create React App project by including it as a script tag in the index.html file. The script must be loaded before any other React-related scripts.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/create-react-app.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\"></script>\n\n    <!-- rest of your scripts go under -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Integrating React Scan via Script Tag in Layout Component\nDESCRIPTION: Shows how to add React Scan through a CDN script tag in the Layout component. This approach is specifically for React 19 and requires adding the script in the head section of the document.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/react-router.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// app/root\n// ...\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\" />\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Integrating React Scan via Script Tag in TanStack Router (JSX)\nDESCRIPTION: This snippet demonstrates how to add React Scan as a script tag in the RootDocument component of a TanStack Router project. It includes the necessary imports and HTML structure.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/tanstack-start.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// app/routes/__root\nimport { Meta, Scripts } from \"@tanstack/start\";\n// ...\n\nfunction RootDocument({ children }) {\n  return (\n    <html>\n      <head>\n        <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\" />\n        <Meta />\n      </head>\n      <body>\n        {children}\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding React Scan Script Tag in Remix Layout Component\nDESCRIPTION: This snippet demonstrates how to add the React Scan script tag to the Layout component in a Remix application. It includes the necessary imports and HTML structure.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/remix.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// app/root.jsx\nimport {\n  Links,\n  Meta,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        {/* Must run before any of your scripts */}\n        <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\" />\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding React Scan Script Tag in NextJS _document\nDESCRIPTION: This snippet shows how to add the React Scan script tag to the _document file in a NextJS project. It includes the script in the Head component, ensuring it's loaded on all pages.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/next-js-page-router.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_document\nimport { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\" />\n\n        {/* rest of your scripts go under */}\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React-Scan via Script Tag in NextJS App Router Layout\nDESCRIPTION: This snippet demonstrates how to add React-Scan as a script tag in the root layout of a NextJS application. The script is added to the head section, ensuring React-Scan initializes before other scripts.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/next-js-app-router.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// app/layout\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\" />\n        {/* rest of your scripts go under */}\n      </head>\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React-Scan script tag to HTML in Parcel project\nDESCRIPTION: This snippet demonstrates how to properly add the React-Scan script tag to an HTML file in a Parcel project. The script should be placed in the head section before any other scripts to ensure proper functionality.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/parcel.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://unpkg.com/react-scan/dist/auto.global.js\"></script>\n\n    <!-- rest of your scripts go under -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding React-Scan via Script Tag in Astro\nDESCRIPTION: This snippet demonstrates how to include React-Scan in an Astro project using a script tag that references the package from a CDN. The script is marked with is:inline to ensure it's included directly in the HTML output.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/astro.md#2025-04-11_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script is:inline src=\"https://unpkg.com/react-scan/dist/auto.global.js\" />\n\n    <!-- rest of your scripts go under -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of React Scan Vite Plugin\nDESCRIPTION: Basic setup for integrating the React Scan plugin into a Vite application by adding it to the plugins array in the Vite configuration file.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/vite-plugin-react-scan/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport reactScan from '@react-scan/vite-plugin-react-scan';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    reactScan({\n      // options (optional)\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding React Scan to package.json scripts\nDESCRIPTION: Example of how to add React Scan to an existing development workflow in package.json, specifically for Next.js.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"scan\": \"next dev & npx react-scan@latest localhost:3000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Scan to Next.js development process\nDESCRIPTION: Example of how to add React Scan to the development process of a Next.js application using npm scripts.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"scan\": \"next dev & npx react-scan@latest localhost:3000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Scan CLI with a local development server\nDESCRIPTION: Command to run React Scan CLI against a local development server. This starts an isolated browser instance to test a React app.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-scan@latest http://localhost:3000\n# you can technically scan ANY website on the web:\n# npx react-scan@latest https://react.dev\n```\n\n----------------------------------------\n\nTITLE: Using React Scan CLI to scan a local React app\nDESCRIPTION: Command to use React Scan CLI for scanning a locally running React application on port 3000.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx react-scan@latest http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: React Scan CDN URL for JSDelivr\nDESCRIPTION: This snippet provides the URL for accessing React Scan via the JSDelivr CDN. JSDelivr is a free, open-source CDN that can be used to quickly integrate React Scan into web projects.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/cdn.md#2025-04-11_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nhttps://cdn.jsdelivr.net/npm/react-scan/dist/auto.global.js\n```\n\n----------------------------------------\n\nTITLE: React Scan CDN URL for UNPKG\nDESCRIPTION: This snippet provides the URL for accessing React Scan via the UNPKG CDN. UNPKG is a fast, global content delivery network for everything on npm, allowing for easy integration of React Scan.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/cdn.md#2025-04-11_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nhttps://unpkg.com/react-scan/dist/auto.global.js\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan via npm\nDESCRIPTION: Command to install React Scan using npm package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan using npm\nDESCRIPTION: Command to install React Scan using the npm package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan via pnpm\nDESCRIPTION: Command to install React Scan using pnpm package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan using pnpm\nDESCRIPTION: Command to install React Scan using the pnpm package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan via yarn\nDESCRIPTION: Command to install React Scan using yarn package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/scan/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan using bun\nDESCRIPTION: Command to install React Scan using the bun package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan using yarn\nDESCRIPTION: Command to install React Scan using the yarn package manager.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-scan\n```\n\n----------------------------------------\n\nTITLE: Installing React Scan Vite Plugin using Package Managers\nDESCRIPTION: Commands for installing the React Scan Vite plugin and its peer dependency using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/vite-plugin-react-scan/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install -D @react-scan/vite-plugin-react-scan react-scan\n\n# pnpm\npnpm add -D @react-scan/vite-plugin-react-scan react-scan\n\n# yarn\nyarn add -D @react-scan/vite-plugin-react-scan react-scan\n```\n\n----------------------------------------\n\nTITLE: Initializing React Scan in TanStack Router Client Entry (JSX)\nDESCRIPTION: This snippet demonstrates an alternative approach to initializing React Scan in the client entry file of a TanStack Router project. It includes necessary imports and hydration setup.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/tanstack-start.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// app/client\nimport { scan } from \"react-scan\"; // must be imported before React and React DOM\nimport { hydrateRoot } from \"react-dom/client\";\nimport { StartClient } from \"@tanstack/start\";\nimport { createRouter } from \"./router\";\n\nscan({\n  enabled: true,\n});\n\nconst router = createRouter();\n\nhydrateRoot(document, <StartClient router={router} />);\n```\n\n----------------------------------------\n\nTITLE: Initializing React Scan in Remix Client Entry Point\nDESCRIPTION: This snippet demonstrates an alternative approach to initializing React Scan in a Remix application by adding it to the client entry point file. It includes the necessary imports and hydration logic.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/remix.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// app/entry.client.jsx\nimport { RemixBrowser } from \"@remix-run/react\";\nimport { StrictMode, startTransition } from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\nimport { scan } from \"react-scan\";\n\nscan({\n  enabled: true,\n});\n\n// Hydration must happen in sync!\n// startTransition(() => {\nhydrateRoot(\n  document,\n  <StrictMode>\n    <RemixBrowser />\n  </StrictMode>\n);\n// });\n```\n\n----------------------------------------\n\nTITLE: Creating a React-Scan Client Component for NextJS\nDESCRIPTION: This snippet shows how to create a dedicated client component for React-Scan. It imports the scan function from react-scan and initializes it within a useEffect hook. Note that react-scan must be imported before React.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/next-js-app-router.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// path/to/ReactScanComponent\n\n\"use client\";\n// react-scan must be imported before react\nimport { scan } from \"react-scan\";\nimport { JSX, useEffect } from \"react\";\n\nexport function ReactScan(): JSX.Element {\n  useEffect(() => {\n    scan({\n      enabled: true,\n    });\n  }, []);\n\n  return <></>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the React-Scan Component into NextJS Root Layout\nDESCRIPTION: This snippet demonstrates how to import and use the custom ReactScan component in the root layout of a NextJS application. The component must be the top-most import in the file for proper initialization.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/docs/installation/next-js-app-router.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// app/layout\n\n// This component must be the top-most import in this file!\nimport { ReactScan } from \"path/to/ReactScanComponent\";\n\n// ...\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <ReactScan />\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using different package managers. This allows developers to start working on their project locally.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/website/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing React Scan\nDESCRIPTION: Commands for cloning the React Scan repository and installing dependencies using pnpm.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/aidenybai/react-scan.git\ncd react-scan\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building React Scan Packages\nDESCRIPTION: Command for building all packages in the React Scan monorepo.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running React Scan in Development Mode\nDESCRIPTION: Command for running all packages in development mode using pnpm.\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run all packages in dev mode\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Browser Paths\nDESCRIPTION: Environment variable configurations for specifying browser binary paths across different operating systems, primarily for Brave browser integration\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/extension/README.md#2025-04-11_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# For macOS\nBRAVE_BINARY=\"/Applications/Brave Browser.app/Contents/MacOS/Brave Browser\"\n\n# For Windows\nBRAVE_BINARY=\"C:\\\\Program Files\\\\BraveSoftware\\\\Brave-Browser\\\\Application\\\\brave.exe\"\n\n# For Linux\nBRAVE_BINARY=\"/usr/bin/brave\"\n```\n\n----------------------------------------\n\nTITLE: Running Chrome Development Server\nDESCRIPTION: Command for starting the development server for Chrome browser extension development\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/extension/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Firefox Development Server\nDESCRIPTION: Command for starting the development server specifically for Firefox browser extension development\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/extension/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:firefox\n```\n\n----------------------------------------\n\nTITLE: Running Brave Development Server\nDESCRIPTION: Command for starting the development server specifically for Brave browser extension development\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/extension/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:brave\n```\n\n----------------------------------------\n\nTITLE: Building Extension for Production\nDESCRIPTION: Command for building production-ready extension packages for all supported browsers (Chrome, Firefox, and Brave)\nSOURCE: https://github.com/aidenybai/react-scan/blob/main/packages/extension/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm pack:all\n```"
  }
]