[
  {
    "owner": "flutterdata",
    "repo": "flutter_data.git",
    "content": "TITLE: Implementing Remote Operations and Watchers in Flutter Data\nDESCRIPTION: This snippet defines the API for remote operations like findAll, findOne, save, and delete. It also includes methods for watching data changes and managing offline operations. The methods support various parameters for customization and error handling.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<T>> findAll({\n    bool remote = true,\n    bool background = false,\n    Map<String, dynamic>? params,\n    Map<String, String>? headers,\n    bool syncLocal = false,\n    OnSuccessAll<T>? onSuccess,\n    OnErrorAll<T>? onError,\n    DataRequestLabel? label,\n  });\n\nFuture<T?> findOne(\n    Object id, {\n    bool remote = true,\n    bool background = false,\n    Map<String, dynamic>? params,\n    Map<String, String>? headers,\n    OnSuccessOne<T>? onSuccess,\n    OnErrorOne<T>? onError,\n    DataRequestLabel? label,\n  });\n\nFuture<T> save(\n    T model, {\n    bool remote = true,\n    Map<String, dynamic>? params,\n    Map<String, String>? headers,\n    OnSuccessOne<T>? onSuccess,\n    OnErrorOne<T>? onError,\n    DataRequestLabel? label,\n  });\n\nFuture<T?> delete(\n    Object model, {\n    bool remote = true,\n    Map<String, dynamic>? params,\n    Map<String, String>? headers,\n    OnSuccessOne<T>? onSuccess,\n    OnErrorOne<T>? onError,\n    DataRequestLabel? label,\n  });\n\nSet<OfflineOperation<T>> get offlineOperations;\n\nDataState<List<T>> watchAll({\n    bool remote = false,\n    Map<String, dynamic>? params,\n    Map<String, String>? headers,\n    bool syncLocal = false,\n    String? finder,\n    DataRequestLabel? label,\n  });\n\nDataState<T?> watchOne(\n    Object model, {\n    bool remote = false,\n    Map<String, dynamic>? params,\n    Map<String, String>? headers,\n    AlsoWatch<T>? alsoWatch,\n    String? finder,\n    DataRequestLabel? label,\n  });\n\nDataStateNotifier<List<T>> watchAllNotifier(\n      {bool remote = false,\n      Map<String, dynamic>? params,\n      Map<String, String>? headers,\n      bool syncLocal = false,\n      String? finder,\n      DataRequestLabel? label});\n\nDataStateNotifier<T?> watchOneNotifier(Object model,\n      {bool remote = false,\n      Map<String, dynamic>? params,\n      Map<String, String>? headers,\n      AlsoWatch<T>? alsoWatch,\n      String? finder,\n      DataRequestLabel? label});\n\nfinal coreNotifierThrottleDurationProvider;\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialization in Flutter Data\nDESCRIPTION: This snippet defines the API for serialization and deserialization of data models in Flutter Data. It includes methods for converting models to JSON and vice versa, with options for handling relationships and asynchronous operations.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Map<String, dynamic>> serialize(T model,\n      {bool withRelationships = true});\n\nFuture<DeserializedData<T>> deserialize(Object? data,\n      {String? key, bool async = true});\n\nFuture<DeserializedData<T>> deserializeAndSave(Object? data,\n      {String? key, bool notify = true, bool ignoreReturn = false});\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model with Custom Adapter in Dart\nDESCRIPTION: Shows how to create a User model class with @DataAdapter annotation and custom JSON server adapter implementation.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@JsonSerializable()\n@DataAdapter([MyJSONServerAdapter])\nclass User extends DataModel<User> {\n  @override\n  final int? id; // ID can be of any type\n  final String name;\n  User({this.id, required this.name});\n  // `User.fromJson` and `toJson` optional\n}\n\nmixin MyJSONServerAdapter on RemoteAdapter<User> {\n  @override\n  String get baseUrl => \"https://my-json-server.typicode.com/flutterdata/demo/\";\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Data with Error Handling\nDESCRIPTION: Demonstrates initialization of Flutter Data with loading and error states using Riverpod.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn Scaffold(\n  body: ref.watch(initializeFlutterData(adapterProvidersMap)).when(\n    data: (_) => child,\n    error: (e, _) => const Text('Error'),\n    loading: () => const Center(child: CircularProgressIndicator()),\n  ),\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Data with Local Storage\nDESCRIPTION: Shows how to configure local storage provider using Riverpod and path_provider package.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nProviderScope(\n  overrides: [\n    localStorageProvider.overrideWithValue(\n      LocalStorage(\n        baseDirFn: () async {\n          return (await getApplicationSupportDirectory()).path;\n        },\n        busyTimeout: 5000,\n        clear: LocalStorageClearStrategy.never,\n      ),\n    )\n  ],\n  // ...\n),\n```\n\n----------------------------------------\n\nTITLE: Watching Data Model State with Riverpod\nDESCRIPTION: Demonstrates how to watch a User model's state using Riverpod ref and handle loading states in a Widget.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context, WidgetRef ref) {\n  final state = ref.users.watchOne(1);\n  if (state.isLoading) {\n    return Center(child: const CircularProgressIndicator());\n  }\n  final user = state.model;\n  return Text(user.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Model with ActiveRecord Style\nDESCRIPTION: Demonstrates the ActiveRecord-style approach to updating a User model using gesture detection.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGestureDetector(\n  onTap: () => User(id: 1, name: 'Updated').save(),\n  child: Text('Update')\n),\n```\n\n----------------------------------------\n\nTITLE: Updating Data Model with Button Action\nDESCRIPTION: Shows how to update a User model using a TextButton with the save method.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: () => ref.users.save(User(id: 1, name: 'Updated')),\n  child: Text('Update'),\n),\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.5.0\nDESCRIPTION: Details the latest major release including Riverpod support, Flutter Web compatibility, and API improvements.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.5.0] - 2020-07-29\n\n- Riverpod support\n- `get_it` support\n- Flutter Web support\n- Self-reference relationship support\n- `DataSupport` is now `DataModel` and it's a mixin\n- Redesign and reorganization for more API stability\n- New `httpClient` and `sendRequest` for custom endpoints\n- Default params & headers now called `defaultParams` and `defaultHeaders`\n- JSON serializer adapter is now included by default\n- Move `JSONAPIAdapter` to separate package\n- Expose graph API to external adapters\n- Tons of small issues fixed\n- 90%+ test coverage\n- Dart docs\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.4.2-dev.2\nDESCRIPTION: Development release focusing on serializer API improvements and core functionality updates.\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.2-dev.2] - 2020-06-29\n\n- New serializer API with `DeserializedData`\n- Adapt, fix & merge `StandardJSONAdapter` into core, no longer required as adapter\n- New `DataSupport#init(manager, key, save)` API\n- `shouldLoadRemoteAll`, `shouldLoadRemoteOne` APIs\n- Misc optimizations\n- Test infrastructure fixes\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry showing version updates, features, and bug fixes for Flutter Data package\nSOURCE: https://github.com/flutterdata/flutter_data.git/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [2.0.0-rc2] - April 24th, 2024\n\n - New version based on `sqlite3`\n\n## [1.5.14] - September 22nd, 2023\n\n- Fix: all-watchers should be non-nullable, consistent with non-nullable all-finders\n- Chore: Dependency upgrades\n\n## [1.5.13] - August 16th, 2023\n\n- Fix: Flush Hive on relationship save\n```"
  }
]