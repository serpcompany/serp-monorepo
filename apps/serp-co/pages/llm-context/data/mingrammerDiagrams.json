[
  {
    "owner": "mingrammer",
    "repo": "diagrams",
    "content": "TITLE: Creating Advanced Web Service with On-Premises Diagram in Python\nDESCRIPTION: This example shows an advanced web service architecture with on-premises infrastructure, including Nginx ingress, gRPC servers, Redis for session management, PostgreSQL for database, and monitoring with Prometheus and Grafana.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.onprem.analytics import Spark\nfrom diagrams.onprem.compute import Server\nfrom diagrams.onprem.database import PostgreSQL\nfrom diagrams.onprem.inmemory import Redis\nfrom diagrams.onprem.aggregator import Fluentd\nfrom diagrams.onprem.monitoring import Grafana, Prometheus\nfrom diagrams.onprem.network import Nginx\nfrom diagrams.onprem.queue import Kafka\n\nwith Diagram(\"Advanced Web Service with On-Premises\", show=False):\n    ingress = Nginx(\"ingress\")\n\n    metrics = Prometheus(\"metric\")\n    metrics << Grafana(\"monitoring\")\n\n    with Cluster(\"Service Cluster\"):\n        grpcsvc = [\n            Server(\"grpc1\"),\n            Server(\"grpc2\"),\n            Server(\"grpc3\")]\n\n    with Cluster(\"Sessions HA\"):\n        primary = Redis(\"session\")\n        primary - Redis(\"replica\") << metrics\n        grpcsvc >> primary\n\n    with Cluster(\"Database HA\"):\n        primary = PostgreSQL(\"users\")\n        primary - PostgreSQL(\"replica\") << metrics\n        grpcsvc >> primary\n\n    aggregator = Fluentd(\"logging\")\n    aggregator >> Kafka(\"stream\") >> Spark(\"analytics\")\n\n    ingress >> grpcsvc >> aggregator\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Advanced Web Service Diagram with On-Premises in Python\nDESCRIPTION: This example extends the previous on-premises web service diagram by adding colored and styled edges with labels. It demonstrates how to customize connections between components with colors, styles (dashed, dotted, bold), and descriptive labels.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram, Edge\nfrom diagrams.onprem.analytics import Spark\nfrom diagrams.onprem.compute import Server\nfrom diagrams.onprem.database import PostgreSQL\nfrom diagrams.onprem.inmemory import Redis\nfrom diagrams.onprem.aggregator import Fluentd\nfrom diagrams.onprem.monitoring import Grafana, Prometheus\nfrom diagrams.onprem.network import Nginx\nfrom diagrams.onprem.queue import Kafka\n\nwith Diagram(name=\"Advanced Web Service with On-Premises (colored)\", show=False):\n    ingress = Nginx(\"ingress\")\n\n    metrics = Prometheus(\"metric\")\n    metrics << Edge(color=\"firebrick\", style=\"dashed\") << Grafana(\"monitoring\")\n\n    with Cluster(\"Service Cluster\"):\n        grpcsvc = [\n            Server(\"grpc1\"),\n            Server(\"grpc2\"),\n            Server(\"grpc3\")]\n\n    with Cluster(\"Sessions HA\"):\n        primary = Redis(\"session\")\n        primary - Edge(color=\"brown\", style=\"dashed\") - Redis(\"replica\") << Edge(label=\"collect\") << metrics\n        grpcsvc >> Edge(color=\"brown\") >> primary\n\n    with Cluster(\"Database HA\"):\n        primary = PostgreSQL(\"users\")\n        primary - Edge(color=\"brown\", style=\"dotted\") - PostgreSQL(\"replica\") << Edge(label=\"collect\") << metrics\n        grpcsvc >> Edge(color=\"black\") >> primary\n\n    aggregator = Fluentd(\"logging\")\n    aggregator >> Edge(label=\"parse\") >> Kafka(\"stream\") >> Edge(color=\"black\", style=\"bold\") >> Spark(\"analytics\")\n\n    ingress >> Edge(color=\"darkgreen\") << grpcsvc >> Edge(color=\"darkorange\") >> aggregator\n```\n\n----------------------------------------\n\nTITLE: Creating Clustered Web Services Diagram on AWS with Python\nDESCRIPTION: This example shows how to create a diagram with clustered web services on AWS, including DNS routing through a load balancer to ECS services, connecting to an RDS database cluster and ElastiCache. The diagram uses Cluster objects to group related services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.aws.compute import ECS\nfrom diagrams.aws.database import ElastiCache, RDS\nfrom diagrams.aws.network import ELB\nfrom diagrams.aws.network import Route53\n\nwith Diagram(\"Clustered Web Services\", show=False):\n    dns = Route53(\"dns\")\n    lb = ELB(\"lb\")\n\n    with Cluster(\"Services\"):\n        svc_group = [ECS(\"web1\"),\n                     ECS(\"web2\"),\n                     ECS(\"web3\")]\n\n    with Cluster(\"DB Cluster\"):\n        db_primary = RDS(\"userdb\")\n        db_primary - [RDS(\"userdb ro\")]\n\n    memcached = ElastiCache(\"memcached\")\n\n    dns >> lb >> svc_group\n    svc_group >> db_primary\n    svc_group >> memcached\n```\n\n----------------------------------------\n\nTITLE: Creating Event Processing Diagram on AWS with Python\nDESCRIPTION: This example illustrates an event processing architecture on AWS with Kubernetes as a source, ECS workers processing events through SQS queues, Lambda handlers, and storage in S3 and Redshift. The diagram uses nested clusters to organize the event flow components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.aws.compute import ECS, EKS, Lambda\nfrom diagrams.aws.database import Redshift\nfrom diagrams.aws.integration import SQS\nfrom diagrams.aws.storage import S3\n\nwith Diagram(\"Event Processing\", show=False):\n    source = EKS(\"k8s source\")\n\n    with Cluster(\"Event Flows\"):\n        with Cluster(\"Event Workers\"):\n            workers = [ECS(\"worker1\"),\n                       ECS(\"worker2\"),\n                       ECS(\"worker3\")]\n\n        queue = SQS(\"event queue\")\n\n        with Cluster(\"Processing\"):\n            handlers = [Lambda(\"proc1\"),\n                        Lambda(\"proc2\"),\n                        Lambda(\"proc3\")]\n\n    store = S3(\"events store\")\n    dw = Redshift(\"analytics\")\n\n    source >> workers >> queue >> handlers\n    handlers >> store\n    handlers >> dw\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Workers Diagram on AWS with Python\nDESCRIPTION: This example demonstrates how to create a diagram showing load-balanced EC2 workers connecting to an RDS database on AWS. The diagram arranges elements in a top-to-bottom direction with a load balancer distributing traffic to multiple EC2 instances.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Grouped Workers\", show=False, direction=\"TB\"):\n    ELB(\"lb\") >> [EC2(\"worker1\"),\n                  EC2(\"worker2\"),\n                  EC2(\"worker3\"),\n                  EC2(\"worker4\"),\n                  EC2(\"worker5\")] >> RDS(\"events\")\n```\n\n----------------------------------------\n\nTITLE: Creating Colored and Styled Edges in Python Diagrams\nDESCRIPTION: Example showing how to create a web service diagram with custom edge properties including color, style, and labels. This demonstrates connecting various services with visually distinct relationships.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/edge.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram, Edge\nfrom diagrams.onprem.analytics import Spark\nfrom diagrams.onprem.compute import Server\nfrom diagrams.onprem.database import PostgreSQL\nfrom diagrams.onprem.inmemory import Redis\nfrom diagrams.onprem.aggregator import Fluentd\nfrom diagrams.onprem.monitoring import Grafana, Prometheus\nfrom diagrams.onprem.network import Nginx\nfrom diagrams.onprem.queue import Kafka\n\nwith Diagram(name=\"Advanced Web Service with On-Premises (colored)\", show=False):\n    ingress = Nginx(\"ingress\")\n\n    metrics = Prometheus(\"metric\")\n    metrics << Edge(color=\"firebrick\", style=\"dashed\") << Grafana(\"monitoring\")\n\n    with Cluster(\"Service Cluster\"):\n        grpcsvc = [\n            Server(\"grpc1\"),\n            Server(\"grpc2\"),\n            Server(\"grpc3\")]\n\n    with Cluster(\"Sessions HA\"):\n        primary = Redis(\"session\")\n        primary \\\n            - Edge(color=\"brown\", style=\"dashed\") \\\n            - Redis(\"replica\") \\\n            << Edge(label=\"collect\") \\\n            << metrics\n        grpcsvc >> Edge(color=\"brown\") >> primary\n\n    with Cluster(\"Database HA\"):\n        primary = PostgreSQL(\"users\")\n        primary \\\n            - Edge(color=\"brown\", style=\"dotted\") \\\n            - PostgreSQL(\"replica\") \\\n            << Edge(label=\"collect\") \\\n            << metrics\n        grpcsvc >> Edge(color=\"black\") >> primary\n\n    aggregator = Fluentd(\"logging\")\n    aggregator \\\n        >> Edge(label=\"parse\") \\\n        >> Kafka(\"stream\") \\\n        >> Edge(color=\"black\", style=\"bold\") \\\n        >> Spark(\"analytics\")\n\n    ingress \\\n        >> Edge(color=\"darkgreen\") \\\n        << grpcsvc \\\n        >> Edge(color=\"darkorange\") \\\n        >> aggregator\n```\n\n----------------------------------------\n\nTITLE: Creating Stateful Architecture Diagram on Kubernetes with Python\nDESCRIPTION: This example illustrates a stateful architecture in Kubernetes using StatefulSet with three pod replicas, each with its own Persistent Volume Claim connected to Persistent Volumes backed by a Storage Class.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.k8s.compute import Pod, StatefulSet\nfrom diagrams.k8s.network import Service\nfrom diagrams.k8s.storage import PV, PVC, StorageClass\n\nwith Diagram(\"Stateful Architecture\", show=False):\n    with Cluster(\"Apps\"):\n        svc = Service(\"svc\")\n        sts = StatefulSet(\"sts\")\n\n        apps = []\n        for _ in range(3):\n            pod = Pod(\"pod\")\n            pvc = PVC(\"pvc\")\n            pod - sts - pvc\n            apps.append(svc >> pod >> pvc)\n\n    apps << PV(\"pv\") << StorageClass(\"sc\")\n```\n\n----------------------------------------\n\nTITLE: Creating Message Collecting System Diagram on GCP with Python\nDESCRIPTION: This example shows a message collecting system on Google Cloud Platform with IoT Core devices publishing to Pub/Sub, which feeds into Dataflow for processing to various targets including BigQuery, Cloud Storage, and serverless computing options.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.gcp.analytics import BigQuery, Dataflow, PubSub\nfrom diagrams.gcp.compute import AppEngine, Functions\nfrom diagrams.gcp.database import BigTable\nfrom diagrams.gcp.iot import IotCore\nfrom diagrams.gcp.storage import GCS\n\nwith Diagram(\"Message Collecting\", show=False):\n    pubsub = PubSub(\"pubsub\")\n\n    with Cluster(\"Source of Data\"):\n        [IotCore(\"core1\"),\n         IotCore(\"core2\"),\n         IotCore(\"core3\")] >> pubsub\n\n    with Cluster(\"Targets\"):\n        with Cluster(\"Data Flow\"):\n            flow = Dataflow(\"data flow\")\n\n        with Cluster(\"Data Lake\"):\n            flow >> [BigQuery(\"bq\"),\n                     GCS(\"storage\")]\n\n        with Cluster(\"Event Driven\"):\n            with Cluster(\"Processing\"):\n                flow >> AppEngine(\"engine\") >> BigTable(\"bigtable\")\n\n            with Cluster(\"Serverless\"):\n                flow >> Functions(\"func\") >> AppEngine(\"appengine\")\n\n    pubsub >> flow\n```\n\n----------------------------------------\n\nTITLE: Representing Data Flow Between Nodes in Python\nDESCRIPTION: Demonstrates how to connect nodes to represent data flow using directional operators (>>, <<, -) in the Diagrams library.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/node.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\nfrom diagrams.aws.storage import S3\n\nwith Diagram(\"Web Services\", show=False):\n    ELB(\"lb\") >> EC2(\"web\") >> RDS(\"userdb\") >> S3(\"store\")\n    ELB(\"lb\") >> EC2(\"web\") >> RDS(\"userdb\") << EC2(\"stat\")\n    (ELB(\"lb\") >> EC2(\"web\")) - EC2(\"web\") >> RDS(\"userdb\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Cluster Diagram for Event Processing in Python\nDESCRIPTION: This snippet shows how to create a more complex diagram with nested clusters using the diagrams library. It illustrates an event processing system with multiple clusters for event flows, workers, and processing.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/cluster.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.aws.compute import ECS, EKS, Lambda\nfrom diagrams.aws.database import Redshift\nfrom diagrams.aws.integration import SQS\nfrom diagrams.aws.storage import S3\n\nwith Diagram(\"Event Processing\", show=False):\n    source = EKS(\"k8s source\")\n\n    with Cluster(\"Event Flows\"):\n        with Cluster(\"Event Workers\"):\n            workers = [ECS(\"worker1\"),\n                       ECS(\"worker2\"),\n                       ECS(\"worker3\")]\n\n        queue = SQS(\"event queue\")\n\n        with Cluster(\"Processing\"):\n            handlers = [Lambda(\"proc1\"),\n                        Lambda(\"proc2\"),\n                        Lambda(\"proc3\")]\n\n    store = S3(\"events store\")\n    dw = Redshift(\"analytics\")\n\n    source >> workers >> queue >> handlers\n    handlers >> store\n    handlers >> dw\n```\n\n----------------------------------------\n\nTITLE: Creating RabbitMQ Consumers Diagram with Custom Nodes in Python\nDESCRIPTION: This example demonstrates how to create a diagram with custom nodes by downloading and using external icons (RabbitMQ in this case). It shows Kubernetes pods as workers consuming messages from a RabbitMQ queue and writing to an Aurora database.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.request import urlretrieve\n\nfrom diagrams import Cluster, Diagram\nfrom diagrams.aws.database import Aurora\nfrom diagrams.custom import Custom\nfrom diagrams.k8s.compute import Pod\n\n# Download an image to be used into a Custom Node class\nrabbitmq_url = \"https://jpadilla.github.io/rabbitmqapp/assets/img/icon.png\"\nrabbitmq_icon = \"rabbitmq.png\"\nurlretrieve(rabbitmq_url, rabbitmq_icon)\n\nwith Diagram(\"Broker Consumers\", show=False):\n    with Cluster(\"Consumers\"):\n        consumers = [\n            Pod(\"worker\"),\n            Pod(\"worker\"),\n            Pod(\"worker\")]\n\n    queue = Custom(\"Message queue\", rabbitmq_icon)\n\n    queue >> consumers >> Aurora(\"Database\")\n```\n\n----------------------------------------\n\nTITLE: Creating Diagrams with Local Custom Icons\nDESCRIPTION: Shows how to use local image files as custom icons in a diagram. This example creates a Creative Commons license diagram using locally stored icons, demonstrating node connections and clustering.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/custom.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram, Cluster\nfrom diagrams.custom import Custom\n\n\nwith Diagram(\"Custom with local icons\\n Can be downloaded here: \\nhttps://creativecommons.org/about/downloads/\", show=False, filename=\"custom_local\", direction=\"LR\"):\n  cc_heart = Custom(\"Creative Commons\", \"./my_resources/cc_heart.black.png\")\n  cc_attribution = Custom(\"Credit must be given to the creator\", \"./my_resources/cc_attribution.png\")\n\n  cc_sa = Custom(\"Adaptations must be shared\\n under the same terms\", \"./my_resources/cc_sa.png\")\n  cc_nd = Custom(\"No derivatives or adaptations\\n of the work are permitted\", \"./my_resources/cc_nd.png\")\n  cc_zero = Custom(\"Public Domain Dedication\", \"./my_resources/cc_zero.png\")\n\n  with Cluster(\"Non Commercial\"):\n    non_commercial = [Custom(\"Y\", \"./my_resources/cc_nc-jp.png\") - Custom(\"E\", \"./my_resources/cc_nc-eu.png\") - Custom(\"S\", \"./my_resources/cc_nc.png\")]\n\n  cc_heart >> cc_attribution\n  cc_heart >> non_commercial\n  cc_heart >> cc_sa\n  cc_heart >> cc_nd\n  cc_heart >> cc_zero\n```\n\n----------------------------------------\n\nTITLE: Creating a C4 Container Diagram for Internet Banking System in Python\nDESCRIPTION: This code snippet demonstrates how to create a C4 container diagram for an Internet Banking System using the diagrams Python package. It shows the relationships between a banking customer and various system components including web application, single-page application, mobile app, API application, database, email system, and mainframe banking system.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/c4.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.c4 import Person, Container, Database, System, SystemBoundary, Relationship\n\ngraph_attr = {\n    \"splines\": \"spline\",\n}\n\nwith Diagram(\"Container diagram for Internet Banking System\", direction=\"TB\", graph_attr=graph_attr):\n    customer = Person(\n        name=\"Personal Banking Customer\", description=\"A customer of the bank, with personal bank accounts.\"\n    )\n\n    with SystemBoundary(\"Internet Banking System\"):\n        webapp = Container(\n            name=\"Web Application\",\n            technology=\"Java and Spring MVC\",\n            description=\"Delivers the static content and the Internet banking single page application.\",\n        )\n\n        spa = Container(\n            name=\"Single-Page Application\",\n            technology=\"Javascript and Angular\",\n            description=\"Provides all of the Internet banking functionality to customers via their web browser.\",\n        )\n\n        mobileapp = Container(\n            name=\"Mobile App\",\n            technology=\"Xamarin\",\n            description=\"Provides a limited subset of the Internet banking functionality to customers via their mobile device.\",\n        )\n\n        api = Container(\n            name=\"API Application\",\n            technology=\"Java and Spring MVC\",\n            description=\"Provides Internet banking functionality via a JSON/HTTPS API.\",\n        )\n\n        database = Database(\n            name=\"Database\",\n            technology=\"Oracle Database Schema\",\n            description=\"Stores user registration information, hashed authentication credentials, access logs, etc.\",\n        )\n\n    email = System(name=\"E-mail System\", description=\"The internal Microsoft Exchange e-mail system.\", external=True)\n\n    mainframe = System(\n        name=\"Mainframe Banking System\",\n        description=\"Stores all of the core banking information about customers, accounts, transactions, etc.\",\n        external=True,\n    )\n\n    customer >> Relationship(\"Visits bigbank.com/ib using [HTTPS]\") >> webapp\n    customer >> Relationship(\"Views account balances, and makes payments using\") >> [spa, mobileapp]\n    webapp >> Relationship(\"Delivers to the customer's web browser\") >> spa\n    spa >> Relationship(\"Make API calls to [JSON/HTTPS]\") >> api\n    mobileapp >> Relationship(\"Make API calls to [JSON/HTTPS]\") >> api\n\n    api >> Relationship(\"reads from and writes to\") >> database\n    api >> Relationship(\"Sends email using [SMTP]\") >> email\n    api >> Relationship(\"Makes API calls to [XML/HTTPS]\") >> mainframe\n    customer << Relationship(\"Sends e-mails to\") << email\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Diagram in Python\nDESCRIPTION: Basic example showing how to create a simple AWS EC2 diagram using the Diagrams library. This creates a context using the Diagram class and adds an EC2 instance node within it.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram\"):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Web Service Diagram with DB Cluster in Python\nDESCRIPTION: This snippet demonstrates how to create a basic diagram with a database cluster using the diagrams library. It includes DNS, web service, and a database cluster with primary and replica nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/cluster.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram\nfrom diagrams.aws.compute import ECS\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import Route53\n\nwith Diagram(\"Simple Web Service with DB Cluster\", show=False):\n    dns = Route53(\"dns\")\n    web = ECS(\"service\")\n\n    with Cluster(\"DB Cluster\"):\n        db_primary = RDS(\"primary\")\n        db_primary - [RDS(\"replica1\"),\n                     RDS(\"replica2\")]\n\n    dns >> web >> db_primary\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Service Diagram with Python Diagrams\nDESCRIPTION: Python script demonstrating how to create a simple web service diagram using the Diagrams package. It includes AWS components like ELB, EC2, and RDS.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# diagram.py\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Web Service\", show=False):\n    ELB(\"lb\") >> EC2(\"web\") >> RDS(\"userdb\")\n```\n\n----------------------------------------\n\nTITLE: Creating Exposed Pod with 3 Replicas Diagram on Kubernetes with Python\nDESCRIPTION: This example demonstrates a Kubernetes deployment with an Ingress exposing a Service that connects to three Pod replicas managed by a ReplicaSet and controlled by a Deployment with Horizontal Pod Autoscaler.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/examples.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.k8s.clusterconfig import HPA\nfrom diagrams.k8s.compute import Deployment, Pod, ReplicaSet\nfrom diagrams.k8s.network import Ingress, Service\n\nwith Diagram(\"Exposed Pod with 3 Replicas\", show=False):\n    net = Ingress(\"domain.com\") >> Service(\"svc\")\n    net >> [Pod(\"pod1\"),\n            Pod(\"pod2\"),\n            Pod(\"pod3\")] << ReplicaSet(\"rs\") << Deployment(\"dp\") << HPA(\"hpa\")\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Graphviz Attributes to Diagrams\nDESCRIPTION: Example showing how to customize the diagram appearance using Graphviz dot attributes such as font size and background color through the graph_attr parameter.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\ngraph_attr = {\n\t\"fontsize\": \"45\",\n\t\"bgcolor\": \"transparent\"\n}\n\nwith Diagram(\"Simple Diagram\", show=False, graph_attr=graph_attr):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Reducing Edge Complexity with Blank Nodes in Python Diagrams\nDESCRIPTION: Example demonstrating how to reduce visual clutter in diagrams by using blank placeholder nodes. This approach creates a cleaner diagram by grouping connections through invisible nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/edge.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram, Node\nfrom diagrams.onprem.analytics import Spark\nfrom diagrams.onprem.compute import Server\nfrom diagrams.onprem.database import PostgreSQL\nfrom diagrams.onprem.inmemory import Redis\nfrom diagrams.onprem.aggregator import Fluentd\nfrom diagrams.onprem.monitoring import Grafana, Prometheus\nfrom diagrams.onprem.network import Nginx\nfrom diagrams.onprem.queue import Kafka\n\nwith Diagram(\"\\nAdvanced Web Service with On-Premise Less edges\", show=False) as diag:\n    ingress = Nginx(\"ingress\")\n\n    with Cluster(\"Service Cluster\"):\n        serv1 = Server(\"grpc1\")\n        serv2 = Server(\"grpc2\")\n        serv3 = Server(\"grpc3\")\n\n    with Cluster(\"\"):\n        blankHA = Node(\"\", shape=\"plaintext\", width=\"0\", height=\"0\")\n\n        metrics = Prometheus(\"metric\")\n        metrics << Grafana(\"monitoring\")\n\n        aggregator = Fluentd(\"logging\")\n        blankHA >> aggregator >> Kafka(\"stream\") >> Spark(\"analytics\")\n\n        with Cluster(\"Database HA\"):\n            db = PostgreSQL(\"users\")\n            db - PostgreSQL(\"replica\") << metrics\n            blankHA >> db\n\n        with Cluster(\"Sessions HA\"):\n            sess = Redis(\"session\")\n            sess - Redis(\"replica\") << metrics\n            blankHA >> sess\n\n    ingress >> serv2 >> blankHA\n\ndiag\n```\n\n----------------------------------------\n\nTITLE: Setting Diagram Direction in Python\nDESCRIPTION: Shows how to change the direction of data flow in a diagram using the 'direction' parameter, with options for top-bottom (TB), bottom-top (BT), left-right (LR), and right-left (RL).\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/node.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Workers\", show=False, direction=\"TB\"):\n    lb = ELB(\"lb\")\n    db = RDS(\"events\")\n    lb >> EC2(\"worker1\") >> db\n    lb >> EC2(\"worker2\") >> db\n    lb >> EC2(\"worker3\") >> db\n    lb >> EC2(\"worker4\") >> db\n    lb >> EC2(\"worker5\") >> db\n```\n\n----------------------------------------\n\nTITLE: Grouping Nodes for Cleaner Data Flow in Python\nDESCRIPTION: Demonstrates how to group multiple nodes into a list to create more concise diagrams by connecting all nodes at once, reducing redundant flow lines.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/node.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.network import ELB\n\nwith Diagram(\"Grouped Workers\", show=False, direction=\"TB\"):\n    ELB(\"lb\") >> [EC2(\"worker1\"),\n                  EC2(\"worker2\"),\n                  EC2(\"worker3\"),\n                  EC2(\"worker4\"),\n                  EC2(\"worker5\")] >> RDS(\"events\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Node Diagram in Python\nDESCRIPTION: Demonstrates the basic usage of a Node object in the Diagrams library, showing how to create a simple diagram with an AWS EC2 instance.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/node.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram\"):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Output Formats Simultaneously\nDESCRIPTION: Example showing how to generate a diagram in multiple file formats (jpg, png, dot) at once by passing a list to the outformat parameter.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram Multi Output\", outformat=[\"jpg\", \"png\", \"dot\"]):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Importing Various Cloud Provider Resources in Python\nDESCRIPTION: Shows how to import node objects from different cloud providers including AWS, Azure, Alibaba Cloud, GCP, Kubernetes, and Oracle.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/node.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# aws resources\nfrom diagrams.aws.compute import ECS, Lambda\nfrom diagrams.aws.database import RDS, ElastiCache\nfrom diagrams.aws.network import ELB, Route53, VPC\n...\n\n# azure resources\nfrom diagrams.azure.compute import FunctionApps\nfrom diagrams.azure.storage import BlobStorage\n...\n\n# alibaba cloud resources\nfrom diagrams.alibabacloud.compute import ECS\nfrom diagrams.alibabacloud.storage import ObjectTableStore\n...\n\n# gcp resources\nfrom diagrams.gcp.compute import AppEngine, GKE\nfrom diagrams.gcp.ml import AutoML\n...\n\n# k8s resources\nfrom diagrams.k8s.compute import Pod, StatefulSet\nfrom diagrams.k8s.network import Service\nfrom diagrams.k8s.storage import PV, PVC, StorageClass\n...\n\n# oracle resources\nfrom diagrams.oci.compute import VirtualMachine, Container\nfrom diagrams.oci.network import Firewall\nfrom diagrams.oci.storage import FileStorage, StorageGateway\n```\n\n----------------------------------------\n\nTITLE: Customizing Diagram Output Filename\nDESCRIPTION: Example showing how to specify a custom filename for the generated diagram using the filename parameter instead of using the default derived from the diagram title.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram\", filename=\"my_diagram\"):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Format for Diagrams\nDESCRIPTION: Example demonstrating how to set a specific output format (jpg) for the generated diagram using the outformat parameter.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram\", outformat=\"jpg\"):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Creating Diagrams with Remote Custom Icons\nDESCRIPTION: Demonstrates downloading and using remote icons in diagram generation. This example shows how to retrieve icons from URLs using urlretrieve and incorporate them into a diagram with clusters.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/custom.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram, Cluster\nfrom diagrams.custom import Custom\nfrom urllib.request import urlretrieve\n\nwith Diagram(\"Custom with remote icons\", show=False, filename=\"custom_remote\", direction=\"LR\"):\n\n  # download the icon image file\n  diagrams_url = \"https://github.com/mingrammer/diagrams/raw/master/assets/img/diagrams.png\"\n  diagrams_icon = \"diagrams.png\"\n  urlretrieve(diagrams_url, diagrams_icon)\n\n  diagrams = Custom(\"Diagrams\", diagrams_icon)\n\n  with Cluster(\"Some Providers\"):\n\n    openstack_url = \"https://github.com/mingrammer/diagrams/raw/master/resources/openstack/openstack.png\"\n    openstack_icon = \"openstack.png\"\n    urlretrieve(openstack_url, openstack_icon)\n\n    openstack = Custom(\"OpenStack\", openstack_icon)\n\n    elastic_url = \"https://github.com/mingrammer/diagrams/raw/master/resources/elastic/saas/elastic.png\"\n    elastic_icon = \"elastic.png\"\n    urlretrieve(elastic_url, elastic_icon)\n\n    elastic = Custom(\"Elastic\", elastic_icon)\n\n  diagrams >> openstack\n  diagrams >> elastic\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Security Service Classes\nDESCRIPTION: Python class references for AWS security services including Identity and Access Management (IAM), Certificate Manager (ACM), Cognito, WAF, and other security services. These classes are used to create architecture diagrams with AWS security components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.security import (\n    AdConnector,\n    Artifact,\n    CertificateAuthority,\n    CertificateManager as ACM,\n    Cognito,\n    DirectoryService as DS,\n    FirewallManager as FMS,\n    IdentityAndAccessManagementIam as IAM,\n    KeyManagementService as KMS,\n    ResourceAccessManager as RAM,\n    WAF\n)\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Developer Tools in Python Diagrams\nDESCRIPTION: Code examples showing how to import AWS developer tools like Cloud9, CodeBuild, CodeCommit, etc. into Python diagrams to visualize development processes and CI/CD pipelines.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.devtools import Cloud9\nfrom diagrams.aws.devtools import Codebuild\nfrom diagrams.aws.devtools import Codecommit\nfrom diagrams.aws.devtools import Codepipeline\nfrom diagrams.aws.devtools import CommandLineInterface, CLI  # CLI is an alias\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Integration Components in Python\nDESCRIPTION: Class definitions for AWS integration services available in the diagrams library. Includes components for EventBridge, SNS, SQS, Step Functions, AppSync, and various event processing resources.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.aws.integration.ApplicationIntegration\ndiagrams.aws.integration.Appsync\ndiagrams.aws.integration.ConsoleMobileApplication\ndiagrams.aws.integration.EventResource\ndiagrams.aws.integration.EventbridgeCustomEventBusResource\ndiagrams.aws.integration.EventbridgeDefaultEventBusResource\ndiagrams.aws.integration.EventbridgeEvent\ndiagrams.aws.integration.EventbridgePipes\ndiagrams.aws.integration.EventbridgeRule\ndiagrams.aws.integration.EventbridgeSaasPartnerEventBusResource\ndiagrams.aws.integration.EventbridgeScheduler\ndiagrams.aws.integration.EventbridgeSchema\ndiagrams.aws.integration.Eventbridge\ndiagrams.aws.integration.ExpressWorkflows\ndiagrams.aws.integration.MQ\ndiagrams.aws.integration.SimpleNotificationServiceSnsEmailNotification\ndiagrams.aws.integration.SimpleNotificationServiceSnsHttpNotification\ndiagrams.aws.integration.SimpleNotificationServiceSnsTopic\ndiagrams.aws.integration.SimpleNotificationServiceSns  # alias: SNS\ndiagrams.aws.integration.SimpleQueueServiceSqsMessage\ndiagrams.aws.integration.SimpleQueueServiceSqsQueue\ndiagrams.aws.integration.SimpleQueueServiceSqs  # alias: SQS\ndiagrams.aws.integration.StepFunctions  # alias: SF\n```\n\n----------------------------------------\n\nTITLE: Importing Flowchart Components in Python Diagrams Library\nDESCRIPTION: Lists all available flowchart components in the diagrams.programming.flowchart module, including elements for actions, databases, decisions, and other standard flowchart shapes. These components can be used to create programming flowcharts in Python.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/programming.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.programming.flowchart.Action\ndiagrams.programming.flowchart.Collate\ndiagrams.programming.flowchart.Database\ndiagrams.programming.flowchart.Decision\ndiagrams.programming.flowchart.Delay\ndiagrams.programming.flowchart.Display\ndiagrams.programming.flowchart.Document\ndiagrams.programming.flowchart.InputOutput\ndiagrams.programming.flowchart.Inspection\ndiagrams.programming.flowchart.InternalStorage\ndiagrams.programming.flowchart.LoopLimit\ndiagrams.programming.flowchart.ManualInput\ndiagrams.programming.flowchart.ManualLoop\ndiagrams.programming.flowchart.Merge\ndiagrams.programming.flowchart.MultipleDocuments\ndiagrams.programming.flowchart.OffPageConnectorLeft\ndiagrams.programming.flowchart.OffPageConnectorRight\ndiagrams.programming.flowchart.Or\ndiagrams.programming.flowchart.PredefinedProcess\ndiagrams.programming.flowchart.Preparation\ndiagrams.programming.flowchart.Sort\ndiagrams.programming.flowchart.StartEnd\ndiagrams.programming.flowchart.StoredData\ndiagrams.programming.flowchart.SummingJunction\n```\n\n----------------------------------------\n\nTITLE: Using AWS IoT Components in Python Diagrams\nDESCRIPTION: Import statements for AWS IoT components that can be used to create architecture diagrams. These components represent various AWS IoT services, devices, and concepts for visualization purposes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.Freertos, FreeRTOS (alias)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.InternetOfThings\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.Iot1Click\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAction\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotActuator\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAlexaEcho\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAlexaEnabledDevice\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAlexaSkill\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAlexaVoiceService\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAnalyticsChannel\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAnalyticsDataSet\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAnalyticsDataStore\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAnalyticsNotebook\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAnalyticsPipeline\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotAnalytics\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotBank\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotBicycle\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotButton\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotCamera\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotCar\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotCart\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotCertificate\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotCoffeePot\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotCore\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotDesiredState\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotDeviceDefender\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotDeviceGateway\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotDeviceManagement\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotDoorLock\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotEvents\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotFactory\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotFireTvStick\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotFireTv\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotGeneric\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotGreengrassConnector\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotGreengrass\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotHardwareBoard, IotBoard (alias)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotHouse\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotHttp\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotHttp2\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotJobs\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotLambda\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotLightbulb\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotMedicalEmergency\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotMqtt\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotOverTheAirUpdate\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotPolicyEmergency\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotPolicy\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotReportedState\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotRule\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotSensor\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotServo\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotShadow\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotSimulator\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotSitewise\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotThermostat\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotThingsGraph\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotTopic\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotTravel\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotUtility\n```\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.iot.IotWindfarm\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Analytics Node Classes in Python\nDESCRIPTION: Various node classes for AWS analytics services that can be imported from diagrams.aws.analytics. Includes classes for services such as Amazon OpenSearch, Athena, CloudSearch, Data Pipeline, Elasticsearch, EMR, Glue, Kinesis, Lake Formation, and Redshift.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.aws.analytics import AmazonOpensearchService\nfrom diagrams.aws.analytics import Analytics\nfrom diagrams.aws.analytics import Athena\nfrom diagrams.aws.analytics import CloudsearchSearchDocuments\nfrom diagrams.aws.analytics import Cloudsearch\nfrom diagrams.aws.analytics import DataLakeResource\nfrom diagrams.aws.analytics import DataPipeline\nfrom diagrams.aws.analytics import ElasticsearchService, ES\nfrom diagrams.aws.analytics import EMRCluster\nfrom diagrams.aws.analytics import EMREngineMaprM3\nfrom diagrams.aws.analytics import EMREngineMaprM5\nfrom diagrams.aws.analytics import EMREngineMaprM7\nfrom diagrams.aws.analytics import EMREngine\nfrom diagrams.aws.analytics import EMRHdfsCluster\nfrom diagrams.aws.analytics import EMR\nfrom diagrams.aws.analytics import GlueCrawlers\nfrom diagrams.aws.analytics import GlueDataCatalog\nfrom diagrams.aws.analytics import Glue\nfrom diagrams.aws.analytics import KinesisDataAnalytics\nfrom diagrams.aws.analytics import KinesisDataFirehose\nfrom diagrams.aws.analytics import KinesisDataStreams\nfrom diagrams.aws.analytics import KinesisVideoStreams\nfrom diagrams.aws.analytics import Kinesis\nfrom diagrams.aws.analytics import LakeFormation\nfrom diagrams.aws.analytics import ManagedStreamingForKafka\nfrom diagrams.aws.analytics import Quicksight\nfrom diagrams.aws.analytics import RedshiftDenseComputeNode\nfrom diagrams.aws.analytics import RedshiftDenseStorageNode\nfrom diagrams.aws.analytics import Redshift\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Analytics Nodes in Python\nDESCRIPTION: This snippet shows how to import various GCP analytics node classes in Python using the diagrams library. It includes nodes for services like BigQuery, Composer, DataCatalog, and more.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/gcp.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.gcp.analytics import Bigquery, BigQuery, Composer, DataCatalog, DataFusion, Dataflow, Datalab, Dataprep, Dataproc, Genomics, Pubsub, PubSub\n```\n\n----------------------------------------\n\nTITLE: Importing AWS ML Services in Python\nDESCRIPTION: This snippet shows how to import various AWS Machine Learning services using the diagrams library. It includes services like Apache MXNet, Comprehend, and SageMaker.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.ml import ApacheMxnetOnAWS, Comprehend, Sagemaker, DeepLearningContainers\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Diagram Display\nDESCRIPTION: Example demonstrating how to disable the automatic opening of the generated diagram file by setting the show parameter to False.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram\", show=False):\n    EC2(\"web\")\n```\n\n----------------------------------------\n\nTITLE: Installing Diagrams with Package Managers\nDESCRIPTION: Shows different methods to install the Diagrams library using pip, pipenv, or poetry. Requires Python 3.9+ and Graphviz installation as a prerequisite.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# using pip (pip3)\n$ pip install diagrams\n\n# using pipenv\n$ pipenv install diagrams\n\n# using poetry\n$ poetry add diagrams\n```\n\n----------------------------------------\n\nTITLE: Importing GCP DevTools Nodes in Python\nDESCRIPTION: This snippet shows how to import various GCP developer tools node classes in Python using the diagrams library. It includes nodes for services like Cloud Build, Container Registry, and Source Repositories.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/gcp.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.gcp.devtools import Build, CodeForIntellij, Code, ContainerRegistry, GCR, GradleAppEnginePlugin, IdePlugins, MavenAppEnginePlugin, Scheduler, SDK, SourceRepositories, Tasks, TestLab, ToolsForEclipse, ToolsForPowershell, ToolsForVisualStudio\n```\n\n----------------------------------------\n\nTITLE: Importing Operating System Nodes in Diagrams (Python)\nDESCRIPTION: Imports various operating system node classes from the generic OS provider in the Diagrams library. These classes represent different operating systems like Android, CentOS, Debian, iOS, Linux, Raspbian, Red Hat, SUSE, Ubuntu, and Windows, which can be used in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.os import Android, Centos, Debian, IOS, LinuxGeneral, Raspbian, RedHat, Suse, Ubuntu, Windows\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Analytics Services in Python\nDESCRIPTION: This snippet shows how to import various Azure Analytics services classes from the Diagrams library. It includes services like Analysis Services, Data Explorer Clusters, and Data Factories.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.azure.analytics import AnalysisServices, DataExplorerClusters, DataFactories, DataLakeAnalytics, DataLakeStoreGen1, Databricks, EventHubClusters, EventHubs, Hdinsightclusters, LogAnalyticsWorkspaces, StreamAnalyticsJobs, SynapseAnalytics\n```\n\n----------------------------------------\n\nTITLE: Using K8S Components in Python Diagrams\nDESCRIPTION: Example syntax for importing and using Kubernetes components from the diagrams package. Each component can be referenced using its full path (e.g., diagrams.k8s.compute.Pod) or shorter aliases where available.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.chaos.ChaosMesh\ndiagrams.k8s.chaos.LitmusChaos\ndiagrams.k8s.clusterconfig.HPA\ndiagrams.k8s.clusterconfig.Limits\ndiagrams.k8s.clusterconfig.Quota\ndiagrams.k8s.compute.Cronjob\ndiagrams.k8s.compute.Deploy\ndiagrams.k8s.compute.DS\ndiagrams.k8s.compute.Job\ndiagrams.k8s.compute.Pod\ndiagrams.k8s.compute.RS\ndiagrams.k8s.compute.STS\n```\n\n----------------------------------------\n\nTITLE: Importing SQL Database Node in Diagrams (Python)\nDESCRIPTION: Imports the SQL node class from the generic database provider in the Diagrams library. This class can be used to represent a SQL database in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.database import SQL\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Compute Nodes in Python\nDESCRIPTION: This snippet shows how to import various GCP compute node classes in Python using the diagrams library. It includes nodes for services like App Engine, Compute Engine, Cloud Functions, and Kubernetes Engine.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/gcp.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.gcp.compute import AppEngine, GAE, ComputeEngine, GCE, ContainerOptimizedOS, Functions, GCF, GKEOnPrem, GPU, KubernetesEngine, GKE, Run\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Compute Services in Python\nDESCRIPTION: This snippet shows how to import and use AWS Compute services in Python using the diagrams library. It includes various EC2-related services, container services, and serverless options.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.aws.compute import AppRunner, ApplicationAutoScaling, Batch, ComputeOptimizer, EC2, EC2AutoScaling, ElasticBeanstalk, ElasticContainerService, ElasticKubernetesService, Fargate, Lambda, Lightsail, ServerlessApplicationRepository\n\n# Usage example\nwith Diagram(\"AWS Compute Architecture\", show=False):\n    ec2 = EC2(\"EC2 Instance\")\n    auto_scaling = ApplicationAutoScaling(\"Auto Scaling\")\n    ecs = ElasticContainerService(\"ECS Cluster\")\n    lambda_func = Lambda(\"Lambda Function\")\n\n    ec2 >> auto_scaling\n    ecs >> lambda_func\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Compute Services in Python\nDESCRIPTION: This snippet demonstrates how to import various Azure Compute services classes from the Diagrams library. It includes services like App Services, Container Instances, and Kubernetes Services (with an alias).\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.azure.compute import AppServices, ContainerInstances, KubernetesServices, VM, VMScaleSet\n\n# Aliases\nfrom diagrams.azure.compute import KubernetesServices as AKS\nfrom diagrams.azure.compute import VMScaleSet as VMSS\n```\n\n----------------------------------------\n\nTITLE: K8S Control Plane Components in Python Diagrams\nDESCRIPTION: Control plane components available in the diagrams package for Kubernetes architecture visualization. Includes API Server, Controller Manager, Scheduler, and other control plane components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.controlplane.API\ndiagrams.k8s.controlplane.CCM\ndiagrams.k8s.controlplane.CM\ndiagrams.k8s.controlplane.KProxy\ndiagrams.k8s.controlplane.Kubelet\ndiagrams.k8s.controlplane.Sched\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Network Resources in Python\nDESCRIPTION: Shows how to import OCI Network resources including DRG, Firewall, Internet Gateway, Load Balancer, Route Table, Security Lists, Service Gateway, and VCN for diagram creation.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.oci.network.DrgWhite\ndiagrams.oci.network.Drg\ndiagrams.oci.network.FirewallWhite\ndiagrams.oci.network.Firewall\ndiagrams.oci.network.InternetGatewayWhite\ndiagrams.oci.network.InternetGateway\ndiagrams.oci.network.LoadBalancerWhite\ndiagrams.oci.network.LoadBalancer\ndiagrams.oci.network.RouteTableWhite\ndiagrams.oci.network.RouteTable\ndiagrams.oci.network.SecurityListsWhite\ndiagrams.oci.network.SecurityLists\ndiagrams.oci.network.ServiceGatewayWhite\ndiagrams.oci.network.ServiceGateway\ndiagrams.oci.network.VcnWhite\ndiagrams.oci.network.Vcn\n```\n\n----------------------------------------\n\nTITLE: Importing AlibabaCloud Application Nodes in Python\nDESCRIPTION: Import paths for AlibabaCloud application services including API Gateway, BeeBot, blockchain services, and various cloud application platforms with their aliases.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.alibabacloud.application.ApiGateway\ndiagrams.alibabacloud.application.BeeBot\ndiagrams.alibabacloud.application.BlockchainAsAService\ndiagrams.alibabacloud.application.CloudCallCenter\ndiagrams.alibabacloud.application.CodePipeline\ndiagrams.alibabacloud.application.DirectMail\ndiagrams.alibabacloud.application.LogService\ndiagrams.alibabacloud.application.MessageNotificationService\ndiagrams.alibabacloud.application.NodeJsPerformancePlatform\ndiagrams.alibabacloud.application.OpenSearch\ndiagrams.alibabacloud.application.PerformanceTestingService\ndiagrams.alibabacloud.application.RdCloud\ndiagrams.alibabacloud.application.SmartConversationAnalysis\ndiagrams.alibabacloud.application.Yida\n```\n\n----------------------------------------\n\nTITLE: Importing Elasticsearch and Related Nodes in Python\nDESCRIPTION: This snippet shows how to import Elasticsearch and related node classes in Python. It includes core components like Elasticsearch, Kibana, Logstash, and various features such as Alerting, Machine Learning, and Monitoring.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.elasticsearch import Alerting, Beats, Elasticsearch, Kibana, LogstashPipeline, Logstash, MachineLearning, MapServices, Maps, Monitoring, SearchableSnapshots, SecuritySettings, SQL, Stack\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Storage Resources in Diagrams\nDESCRIPTION: Reference for importing OCI Storage resources in the Diagrams Python library. These imports can be used to represent various Oracle Cloud Infrastructure storage services in infrastructure diagrams, including backup/restore, block storage, object storage, file storage, and data transfer capabilities.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.oci.storage.BackupRestoreWhite\ndiagrams.oci.storage.BackupRestore\ndiagrams.oci.storage.BlockStorageCloneWhite\ndiagrams.oci.storage.BlockStorageClone\ndiagrams.oci.storage.BlockStorageWhite\ndiagrams.oci.storage.BlockStorage\ndiagrams.oci.storage.BucketsWhite\ndiagrams.oci.storage.Buckets\ndiagrams.oci.storage.DataTransferWhite\ndiagrams.oci.storage.DataTransfer\ndiagrams.oci.storage.ElasticPerformanceWhite\ndiagrams.oci.storage.ElasticPerformance\ndiagrams.oci.storage.FileStorageWhite\ndiagrams.oci.storage.FileStorage\ndiagrams.oci.storage.ObjectStorageWhite\ndiagrams.oci.storage.ObjectStorage\ndiagrams.oci.storage.StorageGatewayWhite\ndiagrams.oci.storage.StorageGateway\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Database Services in Python Diagrams\nDESCRIPTION: Code examples showing how to import AWS database services like Aurora, DynamoDB, RDS, etc. into Python diagrams. These classes can be used to create infrastructure-as-code diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.database import Aurora\nfrom diagrams.aws.database import DynamoDB, DDB  # DDB is an alias\nfrom diagrams.aws.database import RDS\nfrom diagrams.aws.database import Redshift\nfrom diagrams.aws.database import Database, DB  # DB is an alias\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Database Resources in Diagrams Library\nDESCRIPTION: Python import statements for various on-premises database systems available in the Diagrams library. Includes options like Cassandra, MongoDB, MySQL, PostgreSQL, and others with their respective aliases.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.database.Cassandra\ndiagrams.onprem.database.Clickhouse  # or ClickHouse (alias)\ndiagrams.onprem.database.Cockroachdb  # or CockroachDB (alias)\ndiagrams.onprem.database.Couchbase\ndiagrams.onprem.database.Couchdb  # or CouchDB (alias)\ndiagrams.onprem.database.Dgraph\ndiagrams.onprem.database.Druid\ndiagrams.onprem.database.Duckdb\ndiagrams.onprem.database.Hbase  # or HBase (alias)\ndiagrams.onprem.database.Influxdb  # or InfluxDB (alias)\ndiagrams.onprem.database.Janusgraph  # or JanusGraph (alias)\ndiagrams.onprem.database.Mariadb  # or MariaDB (alias)\ndiagrams.onprem.database.Mongodb  # or MongoDB (alias)\ndiagrams.onprem.database.Mssql  # or MSSQL (alias)\ndiagrams.onprem.database.Mysql  # or MySQL (alias)\ndiagrams.onprem.database.Neo4J\ndiagrams.onprem.database.Oracle\ndiagrams.onprem.database.Postgresql  # or PostgreSQL (alias)\ndiagrams.onprem.database.Scylla\n```\n\n----------------------------------------\n\nTITLE: K8S Infrastructure Components in Python Diagrams\nDESCRIPTION: Infrastructure components for Kubernetes diagrams, including etcd, Master, and Nodes. These represent the foundational components of a Kubernetes cluster.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.infra.ETCD\ndiagrams.k8s.infra.Master\ndiagrams.k8s.infra.Node\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Monitoring Resources in Python\nDESCRIPTION: Demonstrates how to import OCI Monitoring resources such as Alarms, Email, Events, Health Checks, Notifications, Queues, Search, Telemetry, and Workflows for diagram creation.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.oci.monitoring.AlarmWhite\ndiagrams.oci.monitoring.Alarm\ndiagrams.oci.monitoring.EmailWhite\ndiagrams.oci.monitoring.Email\ndiagrams.oci.monitoring.EventsWhite\ndiagrams.oci.monitoring.Events\ndiagrams.oci.monitoring.HealthCheckWhite\ndiagrams.oci.monitoring.HealthCheck\ndiagrams.oci.monitoring.NotificationsWhite\ndiagrams.oci.monitoring.Notifications\ndiagrams.oci.monitoring.QueueWhite\ndiagrams.oci.monitoring.Queue\ndiagrams.oci.monitoring.SearchWhite\ndiagrams.oci.monitoring.Search\ndiagrams.oci.monitoring.TelemetryWhite\ndiagrams.oci.monitoring.Telemetry\ndiagrams.oci.monitoring.WorkflowWhite\ndiagrams.oci.monitoring.Workflow\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Container Nodes in Python\nDESCRIPTION: Example imports for the OnPrem container node classes including Docker, Containerd, and other container technologies.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.container import Containerd, Crio, Docker, Firecracker, Gvisor, K3S, Lxc, Rkt\n```\n\n----------------------------------------\n\nTITLE: Importing AWS General Components in Python Diagrams Library\nDESCRIPTION: Python import paths for AWS general components including basic infrastructure elements, clients, security tokens, and generic resources used in architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.general.Client\ndiagrams.aws.general.Disk\ndiagrams.aws.general.Forums\ndiagrams.aws.general.General\ndiagrams.aws.general.GenericDatabase\ndiagrams.aws.general.GenericFirewall\ndiagrams.aws.general.GenericOfficeBuilding, OfficeBuilding (alias)\ndiagrams.aws.general.GenericSamlToken\ndiagrams.aws.general.GenericSDK\ndiagrams.aws.general.InternetAlt1\ndiagrams.aws.general.InternetAlt2\ndiagrams.aws.general.InternetGateway\ndiagrams.aws.general.Marketplace\ndiagrams.aws.general.MobileClient\ndiagrams.aws.general.Multimedia\ndiagrams.aws.general.OfficeBuilding\ndiagrams.aws.general.SamlToken\ndiagrams.aws.general.SDK\ndiagrams.aws.general.SslPadlock\ndiagrams.aws.general.TapeStorage\ndiagrams.aws.general.Toolkit\ndiagrams.aws.general.TraditionalServer\ndiagrams.aws.general.User\ndiagrams.aws.general.Users\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Enduser Components in Python Diagrams Library\nDESCRIPTION: Python import paths for AWS Enduser service components including AppStream 2.0, Desktop and App Streaming, WorkDocs, WorkLink, and WorkSpaces.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.enduser.Appstream20\ndiagrams.aws.enduser.DesktopAndAppStreaming\ndiagrams.aws.enduser.Workdocs\ndiagrams.aws.enduser.Worklink\ndiagrams.aws.enduser.Workspaces\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Storage Services in Python Diagrams\nDESCRIPTION: This snippet demonstrates how to import and use various AWS storage services in Python diagrams. It includes classes for services like S3, EBS, EFS, and others.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.storage import (\n    Backup,\n    CloudendureDisasterRecovery,\n    EFSInfrequentaccessPrimaryBg,\n    EFSStandardPrimaryBg,\n    ElasticBlockStoreEBSSnapshot,\n    ElasticBlockStoreEBSVolume,\n    ElasticBlockStoreEBS,\n    ElasticFileSystemEFSFileSystem,\n    ElasticFileSystemEFS,\n    FsxForLustre,\n    FsxForWindowsFileServer,\n    Fsx,\n    MultipleVolumesResource,\n    S3AccessPoints,\n    S3GlacierArchive,\n    S3GlacierVault,\n    S3Glacier,\n    S3ObjectLambdaAccessPoints,\n    SimpleStorageServiceS3BucketWithObjects,\n    SimpleStorageServiceS3Bucket,\n    SimpleStorageServiceS3Object,\n    SimpleStorageServiceS3,\n    SnowFamilySnowballImportExport,\n    SnowballEdge,\n    Snowball,\n    Snowmobile,\n    StorageGatewayCachedVolume,\n    StorageGatewayNonCachedVolume,\n    StorageGatewayVirtualTapeLibrary,\n    StorageGateway,\n    Storage\n)\n\n# Example usage\nwith Diagram(\"AWS Storage\", show=False):\n    S3 = SimpleStorageServiceS3(\"S3 Bucket\")\n    EBS = ElasticBlockStoreEBS(\"EBS Volume\")\n    EFS = ElasticFileSystemEFS(\"EFS File System\")\n```\n\n----------------------------------------\n\nTITLE: Importing Programming Framework Components in Python Diagrams Library\nDESCRIPTION: Lists all available programming framework components in the diagrams.programming.framework module, including popular frameworks like Angular, Django, Flask, React, and others. Some classes have aliases for easier reference.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/programming.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.programming.framework.Angular\ndiagrams.programming.framework.Backbone\ndiagrams.programming.framework.Camel\ndiagrams.programming.framework.Django\ndiagrams.programming.framework.Dotnet\ndiagrams.programming.framework.DotNet  # alias\ndiagrams.programming.framework.Ember\ndiagrams.programming.framework.Fastapi\ndiagrams.programming.framework.FastAPI  # alias\ndiagrams.programming.framework.Flask\ndiagrams.programming.framework.Flutter\ndiagrams.programming.framework.Graphql\ndiagrams.programming.framework.GraphQL  # alias\ndiagrams.programming.framework.Hibernate\ndiagrams.programming.framework.Jhipster\ndiagrams.programming.framework.Laravel\ndiagrams.programming.framework.Micronaut\ndiagrams.programming.framework.Nextjs\ndiagrams.programming.framework.NextJs  # alias\ndiagrams.programming.framework.Phoenix\ndiagrams.programming.framework.Quarkus\ndiagrams.programming.framework.Rails\ndiagrams.programming.framework.React\ndiagrams.programming.framework.Spring\ndiagrams.programming.framework.Sqlpage\ndiagrams.programming.framework.Starlette\ndiagrams.programming.framework.Svelte\ndiagrams.programming.framework.Vercel\ndiagrams.programming.framework.Vue\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Database Nodes in Python\nDESCRIPTION: This code demonstrates how to import GCP database-related node classes in Python using the diagrams library. It includes nodes for services like Bigtable, Datastore, Firestore, and Cloud Spanner.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/gcp.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.gcp.database import Bigtable, BigTable, Datastore, Firestore, Memorystore, Spanner, SQL\n```\n\n----------------------------------------\n\nTITLE: Importing DigitalOcean Compute Nodes in Diagrams Library\nDESCRIPTION: A collection of DigitalOcean compute service nodes including Containers, Docker, Droplets, and Kubernetes components that can be imported from the diagrams.digitalocean.compute namespace.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/digitalocean.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.digitalocean.compute.Containers\ndiagrams.digitalocean.compute.Docker\ndiagrams.digitalocean.compute.DropletConnect\ndiagrams.digitalocean.compute.DropletSnapshot\ndiagrams.digitalocean.compute.Droplet\ndiagrams.digitalocean.compute.K8SCluster\ndiagrams.digitalocean.compute.K8SNodePool\ndiagrams.digitalocean.compute.K8SNode\n```\n\n----------------------------------------\n\nTITLE: K8S Storage Resources in Python Diagrams\nDESCRIPTION: Storage resources for Kubernetes diagrams, including PersistentVolume, PersistentVolumeClaim, StorageClass, and Volume. These components represent Kubernetes storage abstractions.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.storage.PV\ndiagrams.k8s.storage.PVC\ndiagrams.k8s.storage.SC\ndiagrams.k8s.storage.Vol\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Identity Resources in Diagrams Python Package\nDESCRIPTION: Reference for importing various Azure identity resources from the diagrams.azure.identity module. These components represent identity and access services like Active Directory, AD B2C, and Identity Protection.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.azure.identity import AccessReview\nfrom diagrams.azure.identity import ActiveDirectoryConnectHealth\nfrom diagrams.azure.identity import ActiveDirectory\nfrom diagrams.azure.identity import ADB2C\nfrom diagrams.azure.identity import ADDomainServices\nfrom diagrams.azure.identity import ADIdentityProtection\nfrom diagrams.azure.identity import ADPrivilegedIdentityManagement\nfrom diagrams.azure.identity import AppRegistrations\nfrom diagrams.azure.identity import ConditionalAccess\nfrom diagrams.azure.identity import EnterpriseApplications\nfrom diagrams.azure.identity import Groups\nfrom diagrams.azure.identity import IdentityGovernance\nfrom diagrams.azure.identity import InformationProtection\nfrom diagrams.azure.identity import ManagedIdentities\nfrom diagrams.azure.identity import Users\n```\n\n----------------------------------------\n\nTITLE: Importing DigitalOcean Database Nodes in Diagrams Library\nDESCRIPTION: Database service nodes for DigitalOcean including primary, standby, and read-only database configurations that can be imported from the diagrams.digitalocean.database namespace.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/digitalocean.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.digitalocean.database.DbaasPrimaryStandbyMore\ndiagrams.digitalocean.database.DbaasPrimary\ndiagrams.digitalocean.database.DbaasReadOnly\ndiagrams.digitalocean.database.DbaasStandby\n```\n\n----------------------------------------\n\nTITLE: Rendering Diagrams in Jupyter Notebooks\nDESCRIPTION: Example showing how to render diagrams directly inside Jupyter notebooks by returning the diagram object at the end of the cell.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Diagram\nfrom diagrams.aws.compute import EC2\n\nwith Diagram(\"Simple Diagram\") as diag:\n    EC2(\"web\")\ndiag\n```\n\n----------------------------------------\n\nTITLE: K8S RBAC Components in Python Diagrams\nDESCRIPTION: RBAC (Role-Based Access Control) components for Kubernetes diagrams, including Role, ClusterRole, RoleBinding, ServiceAccount, and User. These represent Kubernetes security and access control abstractions.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.rbac.CRole\ndiagrams.k8s.rbac.CRB\ndiagrams.k8s.rbac.Group\ndiagrams.k8s.rbac.RB\ndiagrams.k8s.rbac.Role\ndiagrams.k8s.rbac.SA\ndiagrams.k8s.rbac.User\n```\n\n----------------------------------------\n\nTITLE: Azure Database Service Icons Import Reference\nDESCRIPTION: Import paths for Azure database service icons including SQL databases, Cosmos DB, Cache for Redis, and other database services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.azure.database.BlobStorage\ndiagrams.azure.database.CacheForRedis\ndiagrams.azure.database.CosmosDb\ndiagrams.azure.database.DataExplorerClusters\ndiagrams.azure.database.DataFactory\ndiagrams.azure.database.DataLake\ndiagrams.azure.database.DatabaseForMariadbServers\ndiagrams.azure.database.DatabaseForMysqlServers\ndiagrams.azure.database.DatabaseForPostgresqlServers\ndiagrams.azure.database.ElasticDatabasePools\ndiagrams.azure.database.ElasticJobAgents\ndiagrams.azure.database.InstancePools\ndiagrams.azure.database.ManagedDatabases\ndiagrams.azure.database.SQLDatabases\ndiagrams.azure.database.SQLDatawarehouse\ndiagrams.azure.database.SQLManagedInstances\ndiagrams.azure.database.SQLServerStretchDatabases\ndiagrams.azure.database.SQLServers\ndiagrams.azure.database.SQLVM\ndiagrams.azure.database.SQL\ndiagrams.azure.database.SsisLiftAndShiftIr\ndiagrams.azure.database.SynapseAnalytics\ndiagrams.azure.database.VirtualClusters\ndiagrams.azure.database.VirtualDatacenter\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Web Services in Diagrams\nDESCRIPTION: These are the Python class names for Azure web services available in the diagrams library. You can import these classes to represent Azure web resources like API Connections, App Services, Media Services, etc. in your architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.azure.web.APIConnections\ndiagrams.azure.web.AppServiceCertificates\ndiagrams.azure.web.AppServiceDomains\ndiagrams.azure.web.AppServiceEnvironments\ndiagrams.azure.web.AppServicePlans\ndiagrams.azure.web.AppServices\ndiagrams.azure.web.MediaServices\ndiagrams.azure.web.NotificationHubNamespaces\ndiagrams.azure.web.Search\ndiagrams.azure.web.Signalr\n```\n\n----------------------------------------\n\nTITLE: K8S Networking Resources in Python Diagrams\nDESCRIPTION: Networking resources available for Kubernetes diagrams, such as Endpoint, Ingress, NetworkPolicy, and Service. These components represent Kubernetes networking abstractions.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.network.Ep\ndiagrams.k8s.network.Ing\ndiagrams.k8s.network.Netpol\ndiagrams.k8s.network.SVC\n```\n\n----------------------------------------\n\nTITLE: K8S Pod Configuration Resources in Python Diagrams\nDESCRIPTION: Pod configuration resources for Kubernetes diagrams, including ConfigMap and Secret. These components are used to configure pods in Kubernetes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.podconfig.CM\ndiagrams.k8s.podconfig.Secret\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Service Icons Import Reference\nDESCRIPTION: Import paths for Azure DevOps service icons including Application Insights, Artifacts, Boards, and other DevOps tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.azure.devops.ApplicationInsights\ndiagrams.azure.devops.Artifacts\ndiagrams.azure.devops.Boards\ndiagrams.azure.devops.Devops\ndiagrams.azure.devops.DevtestLabs\ndiagrams.azure.devops.LabServices\ndiagrams.azure.devops.Pipelines\ndiagrams.azure.devops.Repos\ndiagrams.azure.devops.TestPlans\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Connectivity Node Classes in Python\nDESCRIPTION: Examples of available OCI connectivity node classes in the Diagrams library. These classes represent OCI networking and connectivity resources such as VPN, FastConnect, DNS, and NAT Gateway.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.oci.connectivity.BackboneWhite\ndiagrams.oci.connectivity.Backbone\ndiagrams.oci.connectivity.CDNWhite\ndiagrams.oci.connectivity.CDN\ndiagrams.oci.connectivity.CustomerDatacenter\ndiagrams.oci.connectivity.CustomerDatacntrWhite\ndiagrams.oci.connectivity.CustomerPremisesWhite\ndiagrams.oci.connectivity.CustomerPremises\ndiagrams.oci.connectivity.DisconnectedRegionsWhite\ndiagrams.oci.connectivity.DisconnectedRegions\ndiagrams.oci.connectivity.DNSWhite\ndiagrams.oci.connectivity.DNS\ndiagrams.oci.connectivity.FastConnectWhite\ndiagrams.oci.connectivity.FastConnect\ndiagrams.oci.connectivity.NATGatewayWhite\ndiagrams.oci.connectivity.NATGateway\ndiagrams.oci.connectivity.VPNWhite\ndiagrams.oci.connectivity.VPN\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Monitoring Resources in Diagrams Library\nDESCRIPTION: Python import statements for monitoring and observability solutions available in the Diagrams library, including Prometheus, Grafana, Thanos, and various commercial and open-source monitoring tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.monitoring.Cortex\ndiagrams.onprem.monitoring.Datadog\ndiagrams.onprem.monitoring.Dynatrace\ndiagrams.onprem.monitoring.Grafana\ndiagrams.onprem.monitoring.Humio\ndiagrams.onprem.monitoring.Mimir\ndiagrams.onprem.monitoring.Nagios\ndiagrams.onprem.monitoring.Newrelic\ndiagrams.onprem.monitoring.PrometheusOperator\ndiagrams.onprem.monitoring.Prometheus\ndiagrams.onprem.monitoring.Sentry\ndiagrams.onprem.monitoring.Splunk\ndiagrams.onprem.monitoring.Thanos\ndiagrams.onprem.monitoring.Zabbix\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Mobile Services in Python\nDESCRIPTION: This snippet demonstrates how to import AWS Mobile services using the diagrams library. It includes services like Amplify, API Gateway, and AppSync.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.mobile import Amplify, APIGateway, Appsync, DeviceFarm\n```\n\n----------------------------------------\n\nTITLE: Importing Rack Node in Diagrams (Python)\nDESCRIPTION: Imports the Rack node class from the generic compute provider in the Diagrams library. This class can be used to represent a server rack in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.compute import Rack\n```\n\n----------------------------------------\n\nTITLE: Importing GCP API Nodes in Python\nDESCRIPTION: This code demonstrates how to import GCP API-related node classes in Python using the diagrams library. It includes nodes for API Gateway, Apigee, and Endpoints.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/gcp.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.gcp.api import APIGateway, Apigee, Endpoints\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Media Service Classes\nDESCRIPTION: Class definitions for AWS Media services including Elemental, Kinesis Video Streams, and Media Services\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.media.ElasticTranscoder\ndiagrams.aws.media.ElementalConductor\ndiagrams.aws.media.ElementalDelta\ndiagrams.aws.media.ElementalLive\ndiagrams.aws.media.ElementalMediaconnect\ndiagrams.aws.media.ElementalMediaconvert\ndiagrams.aws.media.ElementalMedialive\ndiagrams.aws.media.ElementalMediapackage\ndiagrams.aws.media.ElementalMediastore\ndiagrams.aws.media.ElementalMediatailor\ndiagrams.aws.media.ElementalServer\ndiagrams.aws.media.KinesisVideoStreams\ndiagrams.aws.media.MediaServices\n```\n\n----------------------------------------\n\nTITLE: Importing Datacenter Node in Diagrams (Python)\nDESCRIPTION: Imports the Datacenter node class from the generic place provider in the Diagrams library. This class can be used to represent a datacenter in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.place import Datacenter\n```\n\n----------------------------------------\n\nTITLE: Importing Enterprise Search Nodes in Python\nDESCRIPTION: This code demonstrates how to import Enterprise Search related node classes in Python. It includes AppSearch, Crawler, EnterpriseSearch, SiteSearch, and WorkplaceSearch.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.enterprisesearch import AppSearch, Crawler, EnterpriseSearch, SiteSearch, WorkplaceSearch\n```\n\n----------------------------------------\n\nTITLE: Importing ApsaraDB Database Resources in Python Diagrams\nDESCRIPTION: Python import statements for Alibaba Cloud ApsaraDB database resources. These classes represent various managed database services like Cassandra, MongoDB, Redis, and others that can be used in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.alibabacloud.database import ApsaradbCassandra\nfrom diagrams.alibabacloud.database import ApsaradbHbase\nfrom diagrams.alibabacloud.database import ApsaradbMemcache\nfrom diagrams.alibabacloud.database import ApsaradbMongodb\nfrom diagrams.alibabacloud.database import ApsaradbOceanbase\nfrom diagrams.alibabacloud.database import ApsaradbPolardb\nfrom diagrams.alibabacloud.database import ApsaradbPostgresql\nfrom diagrams.alibabacloud.database import ApsaradbPpas\nfrom diagrams.alibabacloud.database import ApsaradbRedis\nfrom diagrams.alibabacloud.database import ApsaradbSqlserver\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Management Service Classes\nDESCRIPTION: Class definitions for AWS Trusted Advisor and Well-Architected Tool services in the diagrams library\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.management.TrustedAdvisorChecklistCost\ndiagrams.aws.management.TrustedAdvisorChecklistFaultTolerant\ndiagrams.aws.management.TrustedAdvisorChecklistPerformance\ndiagrams.aws.management.TrustedAdvisorChecklistSecurity\ndiagrams.aws.management.TrustedAdvisorChecklist\ndiagrams.aws.management.TrustedAdvisor\ndiagrams.aws.management.WellArchitectedTool\n```\n\n----------------------------------------\n\nTITLE: K8S Ecosystem Tools in Python Diagrams\nDESCRIPTION: Kubernetes ecosystem tools like Helm, Kustomize, and ExternalDNS available in the diagrams package. These components represent popular tools used alongside Kubernetes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/k8s.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.k8s.ecosystem.ExternalDns\ndiagrams.k8s.ecosystem.Helm\ndiagrams.k8s.ecosystem.Krew\ndiagrams.k8s.ecosystem.Kustomize\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Development Services in Python\nDESCRIPTION: Imports classes for various Firebase development services including Authentication, Firestore, Functions, Hosting, ML Kit, Realtime Database, and Storage.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/firebase.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.firebase.develop import Authentication, Firestore, Functions, Hosting, MLKit, RealtimeDatabase, Storage\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Enablement Services in Python Diagrams\nDESCRIPTION: Code examples showing how to import AWS enablement services like Support, Managed Services, and Professional Services into Python diagrams to visualize support resources.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.aws.enablement import CustomerEnablement\nfrom diagrams.aws.enablement import ManagedServices\nfrom diagrams.aws.enablement import ProfessionalServices\nfrom diagrams.aws.enablement import Support\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Data Components\nDESCRIPTION: Class references for data-related IBM Cloud components like caches, data services, device registries, and enterprise data components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.ibm.data import Caches, Cloud, DataServices, DataSources, DeviceRegistry, EnterpriseData\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Quality Services in Python\nDESCRIPTION: Imports classes for Firebase quality-related services including App Distribution, Crash Reporting, Crashlytics, Performance Monitoring, and Test Lab.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/firebase.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.firebase.quality import AppDistribution, CrashReporting, Crashlytics, PerformanceMonitoring, TestLab\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Alerting Classes in Python\nDESCRIPTION: This snippet shows how to import various alerting service classes from the diagrams.saas.alerting module. It includes classes for NewRelic, OpsGenie, PagerDuty, Pushover, and xMatters.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.alerting import Newrelic, Opsgenie, Pagerduty, Pushover, Xmatters\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Business Application Node Classes in Python\nDESCRIPTION: Node classes for AWS Business Applications that can be imported from diagrams.aws.business. Includes classes for Alexa for Business, Business Applications, Chime, and Workmail.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.aws.business import AlexaForBusiness, A4B\nfrom diagrams.aws.business import BusinessApplications\nfrom diagrams.aws.business import Chime\nfrom diagrams.aws.business import Workmail\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Compute Node Classes in Python\nDESCRIPTION: Examples of available OCI compute node classes in the Diagrams library. These classes represent various OCI compute resources like Virtual Machines, Bare Metal, Container Engine, and Functions.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.oci.compute.AutoscaleWhite\ndiagrams.oci.compute.Autoscale\ndiagrams.oci.compute.BMWhite\ndiagrams.oci.compute.BM\ndiagrams.oci.compute.ContainerWhite\ndiagrams.oci.compute.Container\ndiagrams.oci.compute.FunctionsWhite\ndiagrams.oci.compute.Functions\ndiagrams.oci.compute.InstancePoolsWhite\ndiagrams.oci.compute.InstancePools\ndiagrams.oci.compute.OCIRWhite\ndiagrams.oci.compute.OCIR\ndiagrams.oci.compute.OKEWhite\ndiagrams.oci.compute.OKE\ndiagrams.oci.compute.VMWhite\ndiagrams.oci.compute.VM\n```\n\n----------------------------------------\n\nTITLE: Importing AlibabaCloud Compute Nodes in Python\nDESCRIPTION: Import paths for AlibabaCloud compute services including container management, elastic computing, serverless functions, and orchestration services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.alibabacloud.compute.AutoScaling\ndiagrams.alibabacloud.compute.BatchCompute\ndiagrams.alibabacloud.compute.ContainerRegistry\ndiagrams.alibabacloud.compute.ContainerService\ndiagrams.alibabacloud.compute.ElasticComputeService\ndiagrams.alibabacloud.compute.ElasticContainerInstance\ndiagrams.alibabacloud.compute.ElasticHighPerformanceComputing\ndiagrams.alibabacloud.compute.ElasticSearch\ndiagrams.alibabacloud.compute.FunctionCompute\ndiagrams.alibabacloud.compute.OperationOrchestrationService\ndiagrams.alibabacloud.compute.ResourceOrchestrationService\ndiagrams.alibabacloud.compute.ServerLoadBalancer\ndiagrams.alibabacloud.compute.ServerlessAppEngine\ndiagrams.alibabacloud.compute.SimpleApplicationServer\ndiagrams.alibabacloud.compute.WebAppService\n```\n\n----------------------------------------\n\nTITLE: Installing Binary Dependencies for Mac\nDESCRIPTION: Commands to install required binary dependencies including imagemagick, inkscape, black, and round using brew and go.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbrew install imagemagick inkscape black\ngo install github.com/mingrammer/round@latest\n# ln -sf ~/go/bin/round ~/.local/bin/round\n```\n\n----------------------------------------\n\nTITLE: Importing AWS AR/VR Node Classes in Python\nDESCRIPTION: Node classes for AWS Augmented Reality and Virtual Reality services. These classes can be imported from diagrams.aws.ar and include ArVr and Sumerian.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.aws.ar import ArVr\nfrom diagrams.aws.ar import Sumerian\n```\n\n----------------------------------------\n\nTITLE: Importing Elastic Beats Nodes in Python\nDESCRIPTION: This code demonstrates the import of Elastic Beats node classes in Python. It includes various beat types such as APM, Auditbeat, Filebeat, and others.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.beats import APM, Auditbeat, Filebeat, Functionbeat, Heartbeat, Metricbeat, Packetbeat, Winlogbeat\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for AlibabaCloud Compute Services in Python\nDESCRIPTION: Alternative import aliases for common AlibabaCloud compute services, providing shorthand notation for frequently used components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nESS   # alias for diagrams.alibabacloud.compute.AutoScaling\nECS   # alias for diagrams.alibabacloud.compute.ElasticComputeService\nECI   # alias for diagrams.alibabacloud.compute.ElasticContainerInstance\nEHPC  # alias for diagrams.alibabacloud.compute.ElasticHighPerformanceComputing\nFC    # alias for diagrams.alibabacloud.compute.FunctionCompute\nOOS   # alias for diagrams.alibabacloud.compute.OperationOrchestrationService\nROS   # alias for diagrams.alibabacloud.compute.ResourceOrchestrationService\nSLB   # alias for diagrams.alibabacloud.compute.ServerLoadBalancer\nSAE   # alias for diagrams.alibabacloud.compute.ServerlessAppEngine\nSAS   # alias for diagrams.alibabacloud.compute.SimpleApplicationServer\nWAS   # alias for diagrams.alibabacloud.compute.WebAppService\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem CI Nodes in Python\nDESCRIPTION: Example imports for the OnPrem continuous integration node classes including Jenkins, CircleCI, and other CI tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.ci import Circleci, Concourseci, Droneci, GithubActions, Gitlabci, Jenkins, Teamcity, Travisci, Zuulci\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Governance Resources in Python\nDESCRIPTION: Shows how to import OCI Governance resources including Audit, Compartments, Groups, Logging, OCID, Policies, and Tagging components for diagram creation.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.oci.governance.AuditWhite\ndiagrams.oci.governance.Audit\ndiagrams.oci.governance.CompartmentsWhite\ndiagrams.oci.governance.Compartments\ndiagrams.oci.governance.GroupsWhite\ndiagrams.oci.governance.Groups\ndiagrams.oci.governance.LoggingWhite\ndiagrams.oci.governance.Logging\ndiagrams.oci.governance.OCIDWhite\ndiagrams.oci.governance.OCID\ndiagrams.oci.governance.PoliciesWhite\ndiagrams.oci.governance.Policies\ndiagrams.oci.governance.TaggingWhite\ndiagrams.oci.governance.Tagging\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Security Resources in Diagrams\nDESCRIPTION: Reference for importing OCI Security resources in the Diagrams Python library. These imports can be used to represent various Oracle Cloud Infrastructure security services in infrastructure diagrams, including Cloud Guard, DDOS protection, encryption, identity management, and WAF.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.oci.security.CloudGuardWhite\ndiagrams.oci.security.CloudGuard\ndiagrams.oci.security.DDOSWhite\ndiagrams.oci.security.DDOS\ndiagrams.oci.security.EncryptionWhite\ndiagrams.oci.security.Encryption\ndiagrams.oci.security.IDAccessWhite\ndiagrams.oci.security.IDAccess\ndiagrams.oci.security.KeyManagementWhite\ndiagrams.oci.security.KeyManagement\ndiagrams.oci.security.MaxSecurityZoneWhite\ndiagrams.oci.security.MaxSecurityZone\ndiagrams.oci.security.VaultWhite\ndiagrams.oci.security.Vault\ndiagrams.oci.security.WAFWhite\ndiagrams.oci.security.WAF\n```\n\n----------------------------------------\n\nTITLE: Importing Network Component Nodes in Diagrams (Python)\nDESCRIPTION: Imports various network component node classes from the generic network provider in the Diagrams library. These classes include Firewall, Router, Subnet, Switch, and VPN, which can be used to represent network infrastructure in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.network import Firewall, Router, Subnet, Switch, VPN\n```\n\n----------------------------------------\n\nTITLE: Importing OCI DevOps Resources in Python\nDESCRIPTION: Demonstrates how to import OCI DevOps resources such as API Gateway, API Service, and Resource Management for use in diagram creation.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.oci.devops.APIGatewayWhite\ndiagrams.oci.devops.APIGateway\ndiagrams.oci.devops.APIServiceWhite\ndiagrams.oci.devops.APIService\ndiagrams.oci.devops.ResourceMgmtWhite\ndiagrams.oci.devops.ResourceMgmt\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Security Components in Diagrams\nDESCRIPTION: Reference documentation for IBM security-related classes available in the diagrams library. These classes represent various security services and components offered by IBM including API security, blockchain security, firewalls, and identity management.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.ibm.security.ApiSecurity\ndiagrams.ibm.security.BlockchainSecurityService\ndiagrams.ibm.security.DataSecurity\ndiagrams.ibm.security.Firewall\ndiagrams.ibm.security.Gateway\ndiagrams.ibm.security.GovernanceRiskCompliance\ndiagrams.ibm.security.IdentityAccessManagement\ndiagrams.ibm.security.IdentityProvider\ndiagrams.ibm.security.InfrastructureSecurity\ndiagrams.ibm.security.PhysicalSecurity\ndiagrams.ibm.security.SecurityMonitoringIntelligence\ndiagrams.ibm.security.SecurityServices\ndiagrams.ibm.security.TrustendComputing\ndiagrams.ibm.security.Vpn\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Compute Nodes in Python\nDESCRIPTION: Example imports for the OnPrem compute node classes including Nomad and Server.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.compute import Nomad, Server\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS CDN Classes in Python\nDESCRIPTION: This snippet demonstrates how to import CDN service classes from the diagrams.saas.cdn module. It includes classes for Akamai, Cloudflare, Fastly, and Imperva.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.cdn import Akamai, Cloudflare, Fastly, Imperva\n```\n\n----------------------------------------\n\nTITLE: Importing Elastic Agent Nodes in Python\nDESCRIPTION: This snippet shows how to import various Elastic Agent node classes in Python using the diagrams library. It includes Agent, Endpoint, Fleet, and Integrations nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.agent import Agent, Endpoint, Fleet, Integrations\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Migration Service Classes\nDESCRIPTION: Class definitions for AWS Migration services with their aliases, including Database Migration Service, DataSync, and Snow Family products\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.migration.ApplicationDiscoveryService, ADS\ndiagrams.aws.migration.CloudendureMigration, CEM\ndiagrams.aws.migration.DatabaseMigrationService, DMS\ndiagrams.aws.migration.DatasyncAgent\ndiagrams.aws.migration.Datasync\ndiagrams.aws.migration.MigrationAndTransfer, MAT\ndiagrams.aws.migration.MigrationHub\ndiagrams.aws.migration.ServerMigrationService, SMS\ndiagrams.aws.migration.SnowballEdge\ndiagrams.aws.migration.Snowball\ndiagrams.aws.migration.Snowmobile\ndiagrams.aws.migration.TransferForSftp\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises In-Memory Resources in Diagrams Library\nDESCRIPTION: Python import statements for in-memory database and caching solutions available in the Diagrams library, including Redis, Memcached, Aerospike, and Hazelcast.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.inmemory.Aerospike\ndiagrams.onprem.inmemory.Hazelcast\ndiagrams.onprem.inmemory.Memcached\ndiagrams.onprem.inmemory.Redis\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Storage Components in Diagrams\nDESCRIPTION: Reference documentation for IBM storage-related classes available in the diagrams library. These classes represent IBM's storage solutions including block storage and object storage services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.ibm.storage.BlockStorage\ndiagrams.ibm.storage.ObjectStorage\n```\n\n----------------------------------------\n\nTITLE: Importing IBM DevOps Components\nDESCRIPTION: Class references for DevOps-related IBM Cloud components including artifact management, build testing, code editing and deployment tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.ibm.devops import ArtifactManagement, BuildTest, CodeEditor, ContinuousDeploy, Devops\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem CD Nodes in Python\nDESCRIPTION: Example imports for the OnPrem continuous deployment node classes including Spinnaker and Tekton.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.cd import Spinnaker, TektonCli, Tekton\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Identity Classes in Python\nDESCRIPTION: This snippet shows how to import identity service classes from the diagrams.saas.identity module. It includes classes for Auth0 and Okta.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.identity import Auth0, Okta\n```\n\n----------------------------------------\n\nTITLE: Importing DigitalOcean Network Nodes in Diagrams Library\nDESCRIPTION: Network-related nodes for DigitalOcean including certificates, domains, firewalls, load balancers, and VPC components that can be imported from the diagrams.digitalocean.network namespace.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/digitalocean.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.digitalocean.network.Certificate\ndiagrams.digitalocean.network.DomainRegistration\ndiagrams.digitalocean.network.Domain\ndiagrams.digitalocean.network.Firewall\ndiagrams.digitalocean.network.FloatingIp\ndiagrams.digitalocean.network.InternetGateway\ndiagrams.digitalocean.network.LoadBalancer\ndiagrams.digitalocean.network.ManagedVpn\ndiagrams.digitalocean.network.Vpc\n```\n\n----------------------------------------\n\nTITLE: Importing Security Nodes in Python\nDESCRIPTION: This code demonstrates how to import Elastic Security node classes in Python. It includes Endpoint, Security, SIEM, and Xdr nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.security import Endpoint, Security, SIEM, Xdr\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Certificate Nodes in Python\nDESCRIPTION: Example imports for the OnPrem certificate management node classes including CertManager and LetsEncrypt.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.certificates import CertManager, LetsEncrypt\n```\n\n----------------------------------------\n\nTITLE: Importing Virtualization Tool Nodes in Diagrams (Python)\nDESCRIPTION: Imports various virtualization tool node classes from the generic virtualization provider in the Diagrams library. These classes include QEMU, VirtualBox, VMware, and XEN, which can be used to represent virtualization technologies in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.virtualization import Qemu, Virtualbox, Vmware, XEN\n```\n\n----------------------------------------\n\nTITLE: Importing Network Services in Python Diagrams\nDESCRIPTION: Python import statements for Alibaba Cloud network services. These classes include CDN, network connectivity services, load balancers, and virtual networking components, with aliases for commonly used services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.alibabacloud.network import Cdn\nfrom diagrams.alibabacloud.network import CloudEnterpriseNetwork, CEN  # CEN is an alias\nfrom diagrams.alibabacloud.network import ElasticIpAddress, EIP  # EIP is an alias\nfrom diagrams.alibabacloud.network import ExpressConnect\nfrom diagrams.alibabacloud.network import NatGateway\nfrom diagrams.alibabacloud.network import ServerLoadBalancer, SLB  # SLB is an alias\nfrom diagrams.alibabacloud.network import SmartAccessGateway\nfrom diagrams.alibabacloud.network import VirtualPrivateCloud, VPC  # VPC is an alias\nfrom diagrams.alibabacloud.network import VpnGateway\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Analytics Classes in Python\nDESCRIPTION: This snippet demonstrates how to import analytics service classes from the diagrams.saas.analytics module. It includes classes for Dataform, Snowflake, and Stitch.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.analytics import Dataform, Snowflake, Stitch\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises MLOps Resources in Diagrams Library\nDESCRIPTION: Python import statements for Machine Learning Operations (MLOps) tools available in the Diagrams library, including MLflow and Polyaxon.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.mlops.Mlflow\ndiagrams.onprem.mlops.Polyaxon\n```\n\n----------------------------------------\n\nTITLE: Importing Storage Node in Diagrams (Python)\nDESCRIPTION: Imports the Storage node class from the generic storage provider in the Diagrams library. This class can be used to represent a generic storage component in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.storage import Storage\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Growth and Engagement Services in Python\nDESCRIPTION: Imports classes for Firebase growth and engagement services such as A/B Testing, App Indexing, Dynamic Links, In-App Messaging, Invites, Messaging (FCM), Predictions, and Remote Config.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/firebase.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.firebase.grow import ABTesting, AppIndexing, DynamicLinks, InAppMessaging, Invites, Messaging, Predictions, RemoteConfig\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS File Sharing Class in Python\nDESCRIPTION: This snippet demonstrates how to import the Nextcloud file sharing service class from the diagrams.saas.filesharing module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.filesharing import Nextcloud\n```\n\n----------------------------------------\n\nTITLE: Importing Outscale Security Nodes in Python\nDESCRIPTION: These code snippets show how to import Firewall and IdentityAndAccessManagement nodes from the Outscale security category in the diagrams library.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/outscale.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.security import Firewall\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.security import IdentityAndAccessManagement\n```\n\n----------------------------------------\n\nTITLE: Importing Observability Nodes in Python\nDESCRIPTION: This snippet shows the import of Elastic Observability node classes in Python. It includes APM, Logs, Metrics, Observability, and Uptime nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.observability import APM, Logs, Metrics, Observability, Uptime\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Automation Class in Python\nDESCRIPTION: This snippet shows how to import the N8N automation service class from the diagrams.saas.automation module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.automation import N8N\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Logging Resources in Diagrams Library\nDESCRIPTION: Python import statements for logging solutions available in the Diagrams library, including Loki, Graylog, Fluentbit, and various syslog implementations.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.logging.Fluentbit  # or FluentBit (alias)\ndiagrams.onprem.logging.Graylog\ndiagrams.onprem.logging.Loki\ndiagrams.onprem.logging.Rsyslog  # or RSyslog (alias)\ndiagrams.onprem.logging.SyslogNg\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Identity Resources in Diagrams Library\nDESCRIPTION: Python import statement for identity management solutions in the Diagrams library, currently only including Dex identity provider.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.identity.Dex\n```\n\n----------------------------------------\n\nTITLE: Importing Azure General Resources in Diagrams Python Package\nDESCRIPTION: Reference for importing various Azure general resources from the diagrams.azure.general module. These components represent common Azure portal elements like resources, resource groups, and management tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/azure.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.azure.general import Allresources\nfrom diagrams.azure.general import Azurehome\nfrom diagrams.azure.general import Developertools\nfrom diagrams.azure.general import Helpsupport\nfrom diagrams.azure.general import Information\nfrom diagrams.azure.general import Managementgroups\nfrom diagrams.azure.general import Marketplace\nfrom diagrams.azure.general import Quickstartcenter\nfrom diagrams.azure.general import Recent\nfrom diagrams.azure.general import Reservations\nfrom diagrams.azure.general import Resource\nfrom diagrams.azure.general import Resourcegroups\nfrom diagrams.azure.general import Servicehealth\nfrom diagrams.azure.general import Shareddashboard\nfrom diagrams.azure.general import Subscriptions\nfrom diagrams.azure.general import Support\nfrom diagrams.azure.general import Supportrequests\nfrom diagrams.azure.general import Tag\nfrom diagrams.azure.general import Tags\nfrom diagrams.azure.general import Templates\nfrom diagrams.azure.general import Twousericon\nfrom diagrams.azure.general import Userhealthicon\nfrom diagrams.azure.general import Usericon\nfrom diagrams.azure.general import Userprivacy\nfrom diagrams.azure.general import Userresource\nfrom diagrams.azure.general import Whatsnew\n```\n\n----------------------------------------\n\nTITLE: Importing Orchestration Nodes in Python\nDESCRIPTION: This code demonstrates how to import Elastic orchestration node classes in Python. It includes ECE (Elastic Cloud Enterprise) and ECK (Elastic Cloud on Kubernetes) nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.orchestration import ECE, ECK\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Infrastructure as Code Resources in Diagrams Library\nDESCRIPTION: Python import statements for Infrastructure as Code (IaC) tools available in the Diagrams library, including Ansible, Terraform, Puppet, and other configuration management and orchestration tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.iac.Ansible\ndiagrams.onprem.iac.Atlantis\ndiagrams.onprem.iac.Awx\ndiagrams.onprem.iac.Pulumi\ndiagrams.onprem.iac.Puppet\ndiagrams.onprem.iac.Terraform\n```\n\n----------------------------------------\n\nTITLE: Using OCI Compute Node Class Aliases in Python\nDESCRIPTION: Examples of available aliases for OCI compute node classes. Aliases provide alternative names for the same node classes to improve code readability and intuition.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBareMetalWhite  # alias for diagrams.oci.compute.BMWhite\nBareMetal  # alias for diagrams.oci.compute.BM\nOCIRegistryWhite  # alias for diagrams.oci.compute.OCIRWhite\nOCIRegistry  # alias for diagrams.oci.compute.OCIR\nContainerEngineWhite  # alias for diagrams.oci.compute.OKEWhite\nContainerEngine  # alias for diagrams.oci.compute.OKE\nVirtualMachineWhite  # alias for diagrams.oci.compute.VMWhite\nVirtualMachine  # alias for diagrams.oci.compute.VM\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Nodes in Python\nDESCRIPTION: This snippet shows the import of Elastic SaaS-related node classes in Python. It includes Cloud and Elastic nodes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/elastic.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.elastic.saas import Cloud, Elastic\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Chat Classes in Python\nDESCRIPTION: This snippet shows how to import various chat service classes from the diagrams.saas.chat module. It includes classes for Discord, Line, Mattermost, Messenger, RocketChat, Slack, Teams, and Telegram.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.chat import Discord, Line, Mattermost, Messenger, RocketChat, Slack, Teams, Telegram\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Client Nodes in Python\nDESCRIPTION: Example imports for the OnPrem client node classes including Client, User, and Users.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.client import Client, User, Users\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Network Components\nDESCRIPTION: Python class references for IBM Cloud network components including VPC, load balancers, gateways, and firewall services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.ibm.network.Bridge\ndiagrams.ibm.network.DirectLink\ndiagrams.ibm.network.Enterprise\ndiagrams.ibm.network.Firewall\ndiagrams.ibm.network.FloatingIp\ndiagrams.ibm.network.Gateway\ndiagrams.ibm.network.InternetServices\n```\n\n----------------------------------------\n\nTITLE: Importing IoT Services in Python Diagrams\nDESCRIPTION: Python import statements for Alibaba Cloud IoT (Internet of Things) services. These classes represent various IoT offerings including device identity, connectivity services, and IoT platform capabilities.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.alibabacloud.iot import IotInternetDeviceId\nfrom diagrams.alibabacloud.iot import IotLinkWan\nfrom diagrams.alibabacloud.iot import IotMobileConnectionPackage\nfrom diagrams.alibabacloud.iot import IotPlatform\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Logging Classes in Python\nDESCRIPTION: This snippet demonstrates how to import logging service classes from the diagrams.saas.logging module. It includes classes for Datadog, NewRelic, and Papertrail, with aliases for Datadog and NewRelic.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.logging import Datadog, Newrelic, Papertrail\nfrom diagrams.saas.logging import Datadog as DataDog, Newrelic as NewRelic\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Management Components\nDESCRIPTION: Python class references for IBM Cloud management components including API, cluster, content, and device management services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.ibm.management.AlertNotification\ndiagrams.ibm.management.ApiManagement\ndiagrams.ibm.management.CloudManagement\ndiagrams.ibm.management.ClusterManagement\ndiagrams.ibm.management.ContentManagement\ndiagrams.ibm.management.DataServices\n```\n\n----------------------------------------\n\nTITLE: Importing AlibabaCloud Communication Nodes in Python\nDESCRIPTION: Import paths for AlibabaCloud communication services including DirectMail and MobilePush for messaging applications.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.alibabacloud.communication.DirectMail\ndiagrams.alibabacloud.communication.MobilePush\n```\n\n----------------------------------------\n\nTITLE: Importing Alibaba Cloud Storage Services in Python Diagrams Library\nDESCRIPTION: Various storage service icons from Alibaba Cloud that can be imported in Python diagrams library. Includes services like CloudStorageGateway, FileStorageHdfs, NAS, HybridBackupRecovery, and other storage-related services with their respective aliases.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n**diagrams.alibabacloud.storage.CloudStorageGateway**\n\n**diagrams.alibabacloud.storage.FileStorageHdfs**, **HDFS** (alias)\n\n**diagrams.alibabacloud.storage.FileStorageNas**, **NAS** (alias)\n\n**diagrams.alibabacloud.storage.HybridBackupRecovery**, **HBR** (alias)\n\n**diagrams.alibabacloud.storage.HybridCloudDisasterRecovery**, **HDR** (alias)\n\n**diagrams.alibabacloud.storage.Imm**\n\n**diagrams.alibabacloud.storage.ObjectStorageService**, **OSS** (alias)\n\n**diagrams.alibabacloud.storage.ObjectTableStore**, **OTS** (alias)\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Security and Governance Module Imports in Python\nDESCRIPTION: This snippet demonstrates the changes in import statements for OCI security and governance modules. It includes updates to module paths and class names for Audit, Compartments, DDOS, Groups, ID Access, Key Management, OCID, Policies, and Tagging, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.governance import Audit\nfrom diagrams.oci.governance import AuditWhite\nfrom diagrams.oci.governance import Compartments\nfrom diagrams.oci.governance import CompartmentsWhite\nfrom diagrams.oci.security import DDOS\nfrom diagrams.oci.security import DDOSWhite\nfrom diagrams.oci.governance import Groups\nfrom diagrams.oci.governance import GroupsWhite\nfrom diagrams.oci.security import IDAccess\nfrom diagrams.oci.security import IDAccessWhite\nfrom diagrams.oci.security import KeyManagement\nfrom diagrams.oci.security import KeyManagementWhite\nfrom diagrams.oci.governance import OCID\nfrom diagrams.oci.governance import OCIDWhite\nfrom diagrams.oci.governance import Policies\nfrom diagrams.oci.governance import PoliciesWhite\nfrom diagrams.oci.governance import Tagging\nfrom diagrams.oci.governance import TaggingWhite\n```\n\n----------------------------------------\n\nTITLE: Importing IBM General Components\nDESCRIPTION: Class references for general IBM Cloud components covering services like messaging, cognitive services, security, containers and infrastructure.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.ibm.general import CloudMessaging, CloudServices, CognitiveServices, IBMContainers, IBMPublicCloud\n```\n\n----------------------------------------\n\nTITLE: Importing Alibaba Cloud Web Services in Python Diagrams Library\nDESCRIPTION: Web service icons from Alibaba Cloud that can be imported in Python diagrams library. Includes DNS and Domain services for web-related infrastructure diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n**diagrams.alibabacloud.web.Dns**\n\n**diagrams.alibabacloud.web.Domain**\n```\n\n----------------------------------------\n\nTITLE: Merging Edges in Python Diagrams using GraphViz Attributes\nDESCRIPTION: Example showing how to merge multiple edges using GraphViz's 'concentrate' attribute. This approach requires specific configuration settings and only works with the 'dot' layout engine and 'spline' edges.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/edge.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams import Cluster, Diagram, Edge, Node\nfrom diagrams.onprem.analytics import Spark\nfrom diagrams.onprem.compute import Server\nfrom diagrams.onprem.database import PostgreSQL\nfrom diagrams.onprem.inmemory import Redis\nfrom diagrams.onprem.aggregator import Fluentd\nfrom diagrams.onprem.monitoring import Grafana, Prometheus\nfrom diagrams.onprem.network import Nginx\nfrom diagrams.onprem.queue import Kafka\n\ngraph_attr = {\n    \"concentrate\": \"true\",\n    \"splines\": \"spline\",\n}\n\nedge_attr = {\n    \"minlen\":\"3\",\n}\n\nwith Diagram(\"\\n\\nAdvanced Web Service with On-Premise Merged edges\", show=False,\n            graph_attr=graph_attr,\n            edge_attr=edge_attr) as diag:\n\n    ingress = Nginx(\"ingress\")\n\n    metrics = Prometheus(\"metric\")\n    metrics << Edge(minlen=\"0\") << Grafana(\"monitoring\")\n\n    with Cluster(\"Service Cluster\"):\n        grpsrv = [\n            Server(\"grpc1\"),\n            Server(\"grpc2\"),\n            Server(\"grpc3\")]\n\n    blank = Node(\"\", shape=\"plaintext\", height=\"0.0\", width=\"0.0\")\n\n    with Cluster(\"Sessions HA\"):\n        sess = Redis(\"session\")\n        sess - Redis(\"replica\") << metrics\n\n    with Cluster(\"Database HA\"):\n        db = PostgreSQL(\"users\")\n        db - PostgreSQL(\"replica\") << metrics\n\n    aggregator = Fluentd(\"logging\")\n    aggregator >> Kafka(\"stream\") >> Spark(\"analytics\")\n\n    ingress >> [grpsrv[0], grpsrv[1], grpsrv[2],]\n    [grpsrv[0], grpsrv[1], grpsrv[2],] - Edge(headport=\"w\", minlen=\"1\") - blank\n    blank >> Edge(headport=\"w\", minlen=\"2\") >> [sess, db, aggregator]\n\ndiag\n```\n\n----------------------------------------\n\nTITLE: Importing AlibabaCloud Analytics Nodes in Python\nDESCRIPTION: Import paths for AlibabaCloud analytics services like AnalyticDb, ClickHouse, DataLakeAnalytics, ElaticMapReduce, and OpenSearch.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.alibabacloud.analytics.AnalyticDb\ndiagrams.alibabacloud.analytics.ClickHouse\ndiagrams.alibabacloud.analytics.DataLakeAnalytics\ndiagrams.alibabacloud.analytics.ElaticMapReduce\ndiagrams.alibabacloud.analytics.OpenSearch\n```\n\n----------------------------------------\n\nTITLE: Importing GCP IoT and Migration Nodes in Python\nDESCRIPTION: This code demonstrates how to import GCP IoT and migration-related node classes in Python using the diagrams library. It includes nodes for IoT Core and Transfer Appliance.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/gcp.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.gcp.iot import IotCore\nfrom diagrams.gcp.migration import TransferAppliance\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Security Classes in Python\nDESCRIPTION: This snippet shows how to import security service classes from the diagrams.saas.security module. It includes classes for Crowdstrike and Sonarqube.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.security import Crowdstrike, Sonarqube\n```\n\n----------------------------------------\n\nTITLE: Generating Diagram from Python Script\nDESCRIPTION: Shell command to run the Python script and generate the diagram. The resulting image will be saved as 'web_service.png' in the current working directory.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python diagram.py\n```\n\n----------------------------------------\n\nTITLE: Importing DigitalOcean Storage Nodes in Diagrams Library\nDESCRIPTION: Storage service nodes for DigitalOcean including Spaces, Volumes, and Volume Snapshots that can be imported from the diagrams.digitalocean.storage namespace.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/digitalocean.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.digitalocean.storage.Folder\ndiagrams.digitalocean.storage.Space\ndiagrams.digitalocean.storage.VolumeSnapshot\ndiagrams.digitalocean.storage.Volume\n```\n\n----------------------------------------\n\nTITLE: Importing Outscale Network Nodes in Python\nDESCRIPTION: These code snippets demonstrate how to import various network-related nodes from the Outscale network category in the diagrams library.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/outscale.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.network import ClientVpn\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.network import InternetService\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.network import LoadBalancer\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.network import NatService\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.network import Net\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.network import SiteToSiteVpng\n```\n\n----------------------------------------\n\nTITLE: Installing Diagrams Package with Package Managers\nDESCRIPTION: Commands for installing the Diagrams package using pip, pipenv, or poetry. Requires Python 3.7+ and Graphviz to be installed.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/getting-started/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# using pip (pip3)\n$ pip install diagrams\n\n# using pipenv\n$ pipenv install diagrams\n\n# using poetry\n$ poetry add diagrams\n```\n\n----------------------------------------\n\nTITLE: Importing Database Management Services in Python Diagrams\nDESCRIPTION: Python import statements for Alibaba Cloud database management services. These classes include data management (DMS), data transmission (DTS), backup services (DBS), and other database service offerings with their aliases.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.alibabacloud.database import DataManagementService, DMS  # DMS is an alias\nfrom diagrams.alibabacloud.database import DataTransmissionService, DTS  # DTS is an alias\nfrom diagrams.alibabacloud.database import DatabaseBackupService, DBS  # DBS is an alias\nfrom diagrams.alibabacloud.database import DisributeRelationalDatabaseService, DRDS  # DRDS is an alias\nfrom diagrams.alibabacloud.database import GraphDatabaseService, GDS  # GDS is an alias\nfrom diagrams.alibabacloud.database import HybriddbForMysql\nfrom diagrams.alibabacloud.database import RelationalDatabaseService, RDS  # RDS is an alias\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Blockchain Node Classes in Python\nDESCRIPTION: Node classes for AWS Blockchain services that can be imported from diagrams.aws.blockchain. Includes classes for Managed Blockchain and Quantum Ledger Database (QLDB).\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.aws.blockchain import BlockchainResource\nfrom diagrams.aws.blockchain import Blockchain\nfrom diagrams.aws.blockchain import ManagedBlockchain\nfrom diagrams.aws.blockchain import QuantumLedgerDatabaseQldb, QLDB\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises GitOps Resources in Diagrams Library\nDESCRIPTION: Python import statements for GitOps tools available in the Diagrams library, including ArgoCD, Flagger, and Flux.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.gitops.Argocd  # or ArgoCD (alias)\ndiagrams.onprem.gitops.Flagger\ndiagrams.onprem.gitops.Flux\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation Website for Diagrams Project\nDESCRIPTION: Commands to set up and run the Docusaurus-based documentation website locally for testing changes to the Diagrams documentation.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd website/\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Social Components in Diagrams\nDESCRIPTION: Reference documentation for IBM social-related classes available in the diagrams library. These classes represent IBM's social collaboration services and tools including communities, file synchronization, messaging, and networking.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.ibm.social.Communities\ndiagrams.ibm.social.FileSync\ndiagrams.ibm.social.LiveCollaboration\ndiagrams.ibm.social.Messaging\ndiagrams.ibm.social.Networking\n```\n\n----------------------------------------\n\nTITLE: Importing Blank Node in Diagrams (Python)\nDESCRIPTION: Imports the Blank node class from the generic provider in the Diagrams library. This class can be used to represent a generic blank node in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.blank import Blank\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Package Manager\nDESCRIPTION: Command to install Poetry, the Python project management tool required for Diagrams development.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for AlibabaCloud Application Services in Python\nDESCRIPTION: Alternative import aliases for common AlibabaCloud application services, allowing for more concise code.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSLS  # alias for diagrams.alibabacloud.application.LogService\nMNS  # alias for diagrams.alibabacloud.application.MessageNotificationService\nPTS  # alias for diagrams.alibabacloud.application.PerformanceTestingService\nSCA  # alias for diagrams.alibabacloud.application.SmartConversationAnalysis\n```\n\n----------------------------------------\n\nTITLE: Importing Mobile and Tablet Device Nodes in Diagrams (Python)\nDESCRIPTION: Imports the Mobile and Tablet node classes from the generic device provider in the Diagrams library. These classes can be used to represent mobile and tablet devices in system architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/generic.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.generic.device import Mobile, Tablet\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Engagement Components in Python Diagrams Library\nDESCRIPTION: Python import paths for AWS Engagement service components including Connect, Customer Engagement, Pinpoint, and Simple Email Service (SES).\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.engagement.Connect\ndiagrams.aws.engagement.CustomerEngagement\ndiagrams.aws.engagement.Pinpoint\ndiagrams.aws.engagement.SimpleEmailServiceSesEmail\ndiagrams.aws.engagement.SimpleEmailServiceSes, SES (alias)\n```\n\n----------------------------------------\n\nTITLE: Importing IBM User Components in Diagrams\nDESCRIPTION: Reference documentation for IBM user-related classes available in the diagrams library. These classes represent user-facing components and interfaces including browsers, devices, sensors, and user representations within IBM architecture diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.ibm.user.Browser\ndiagrams.ibm.user.Device\ndiagrams.ibm.user.IntegratedDigitalExperiences\ndiagrams.ibm.user.PhysicalEntity\ndiagrams.ibm.user.Sensor\ndiagrams.ibm.user.User\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Storage Module Imports in Python\nDESCRIPTION: This snippet shows the changes in import statements for the OCI storage module. It includes updates to class names for Backup and Restore, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.storage import BackupRestore\nfrom diagrams.oci.storage import BackupRestoreWhite\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Extensions in Python\nDESCRIPTION: Imports the Extensions class from the Firebase extensions module, representing Firebase Extensions in diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/firebase.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.firebase.extentions import Extensions\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Compute Module Imports in Python\nDESCRIPTION: This snippet shows the changes in import statements for the OCI compute module. It includes updates to class names for AutoScale, Bm, and Vm, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.compute import Autoscale\nfrom diagrams.oci.compute import AutoscaleWhite\nfrom diagrams.oci.compute import BM\nfrom diagrams.oci.compute import BMWhite\nfrom diagrams.oci.compute import VM\nfrom diagrams.oci.compute import VMWhite\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Cost Management Services in Python\nDESCRIPTION: This snippet demonstrates how to import and use AWS Cost Management services in Python using the diagrams library. It includes services for budgeting, cost exploration, and savings plans.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.aws.cost import Budgets, CostAndUsageReport, CostExplorer, CostManagement, ReservedInstanceReporting, SavingsPlans\n\n# Usage example\nwith Diagram(\"AWS Cost Management\", show=False):\n    budget = Budgets(\"AWS Budgets\")\n    cost_explorer = CostExplorer(\"Cost Explorer\")\n    savings = SavingsPlans(\"Savings Plans\")\n\n    budget >> cost_explorer >> savings\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Diagrams Development\nDESCRIPTION: Command to build a Docker image for the Diagrams development environment using a specified Dockerfile.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build --tag diagrams:1.0 -f ./docker/dev/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Diagrams Project\nDESCRIPTION: Command to run unit tests for the Diagrams project using Python's unittest module in verbose mode.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest tests/*.py -v\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Poetry\nDESCRIPTION: Command to install all Python project dependencies using Poetry.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests on Mac\nDESCRIPTION: Command to run unit tests locally on Mac to verify the setup.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest tests/*.py -v\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Database Node Classes in Python\nDESCRIPTION: Examples of available OCI database node classes in the Diagrams library. These classes represent OCI database services including Autonomous Database, Database Service, and data processing services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.oci.database.AutonomousWhite\ndiagrams.oci.database.Autonomous\ndiagrams.oci.database.BigdataServiceWhite\ndiagrams.oci.database.BigdataService\ndiagrams.oci.database.DatabaseServiceWhite\ndiagrams.oci.database.DatabaseService\ndiagrams.oci.database.DataflowApacheWhite\ndiagrams.oci.database.DataflowApache\ndiagrams.oci.database.DcatWhite\ndiagrams.oci.database.Dcat\ndiagrams.oci.database.DisWhite\ndiagrams.oci.database.Dis\ndiagrams.oci.database.DMSWhite\ndiagrams.oci.database.DMS\ndiagrams.oci.database.ScienceWhite\ndiagrams.oci.database.Science\ndiagrams.oci.database.StreamWhite\ndiagrams.oci.database.Stream\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Docker Container\nDESCRIPTION: Command to execute unit tests inside the Docker container to verify the setup.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec diagrams python -m unittest tests/*.py -v\n```\n\n----------------------------------------\n\nTITLE: Running Autogen Script on Mac\nDESCRIPTION: Command to execute the autogen.sh script locally on Mac for testing.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./autogen.sh\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Monitoring and Governance Module Imports in Python\nDESCRIPTION: This snippet demonstrates the changes in import statements for OCI monitoring and governance modules. It includes updates to module paths and class names for Events, Health Check, Logging, and Queue, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.monitoring import Events\nfrom diagrams.oci.monitoring import EventsWhite\nfrom diagrams.oci.monitoring import HealthCheck\nfrom diagrams.oci.monitoring import HealthCheckWhite\nfrom diagrams.oci.governance import Logging\nfrom diagrams.oci.governance import LoggingWhite\nfrom diagrams.oci.monitoring import Queue\nfrom diagrams.oci.monitoring import QueueWhite\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Auth Nodes in Python\nDESCRIPTION: Example imports for the OnPrem authentication node classes including Boundary, BuzzfeedSso, and Oauth2Proxy.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.auth import Boundary, BuzzfeedSso, Oauth2Proxy\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Database Module Imports in Python\nDESCRIPTION: This snippet shows the changes in import statements for the OCI database module. It includes updates to class names for Autonomous Database and Database Service, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.database import Autonomous\nfrom diagrams.oci.database import AutonomousWhite\nfrom diagrams.oci.database import DatabaseService\nfrom diagrams.oci.database import DatabaseServiceWhite\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Storage Resources in Python\nDESCRIPTION: Sample import statements for OCI (Oracle Cloud Infrastructure) storage resources. The left column shows older import formats while the right column shows the updated naming convention with proper camel case.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.storage import Blockstorage\nfrom diagrams.oci.storage import BlockstorageWhite\nfrom diagrams.oci.storage import Datatransfer\nfrom diagrams.oci.storage import DatatransferWhite\nfrom diagrams.oci.storage import Filestorage\nfrom diagrams.oci.storage import FilestorageWhite\nfrom diagrams.oci.storage import Objectstorage\nfrom diagrams.oci.storage import ObjectstorageWhite\nfrom diagrams.oci.storage import Storagegateway\nfrom diagrams.oci.storage import StoragegatewayWhite\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.storage import BlockStorage\nfrom diagrams.oci.storage import BlockStorageWhite\nfrom diagrams.oci.storage import DataTransfer\nfrom diagrams.oci.storage import DataTransferWhite\nfrom diagrams.oci.storage import FileStorage\nfrom diagrams.oci.storage import FileStorageWhite\nfrom diagrams.oci.storage import ObjectStorage\nfrom diagrams.oci.storage import ObjectStorageWhite\nfrom diagrams.oci.storage import StorageGateway\nfrom diagrams.oci.storage import StorageGatewayWhite\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Analytics Nodes in Python\nDESCRIPTION: Example imports for the OnPrem analytics node classes such as Hadoop, Spark, Tableau and others.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.analytics import Beam, Databricks, Dbt, Dremio, Flink, Hadoop, Hive, Metabase, Norikra, Powerbi, Presto, Singer, Spark, Storm, Superset, Tableau, Trino\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Connectivity Module Imports in Python\nDESCRIPTION: This snippet demonstrates the changes in import statements for the OCI connectivity module. It includes updates to class names for customer data center, customer premises equipment, FastConnect, and VPN, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.connectivity import CustomerDatacenter\nfrom diagrams.oci.connectivity import CustomerDatacntrWhite\nfrom diagrams.oci.connectivity import CustomerPremise\nfrom diagrams.oci.connectivity import CustomerPremiseWhite\nfrom diagrams.oci.connectivity import FastConnect\nfrom diagrams.oci.connectivity import FastConnectWhite\nfrom diagrams.oci.connectivity import VPN\nfrom diagrams.oci.connectivity import VPNWhite\n```\n\n----------------------------------------\n\nTITLE: Updating OCI CustomerPremiseWhite Import Path in Python\nDESCRIPTION: Shows the before and after import paths for the CustomerPremiseWhite component, which has been renamed to CustomerPremisesWhite in the diagrams.oci.connectivity module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.connectivity import CustomerPremiseWhite\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.connectivity import CustomerPremisesWhite\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Communication Class in Python\nDESCRIPTION: This snippet demonstrates how to import the Twilio communication service class from the diagrams.saas.communication module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.communication import Twilio\n```\n\n----------------------------------------\n\nTITLE: Importing Security Services in Python Diagrams\nDESCRIPTION: Python import statements for Alibaba Cloud security services. These classes represent various security offerings including DDoS protection, firewalls, content moderation, encryption services, and security monitoring tools.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/alibabacloud.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.alibabacloud.security import AntiBotService, ABS  # ABS is an alias\nfrom diagrams.alibabacloud.security import AntiDdosBasic\nfrom diagrams.alibabacloud.security import AntiDdosPro\nfrom diagrams.alibabacloud.security import AntifraudService, AS  # AS is an alias\nfrom diagrams.alibabacloud.security import BastionHost\nfrom diagrams.alibabacloud.security import CloudFirewall, CFW  # CFW is an alias\nfrom diagrams.alibabacloud.security import CloudSecurityScanner\nfrom diagrams.alibabacloud.security import ContentModeration, CM  # CM is an alias\nfrom diagrams.alibabacloud.security import CrowdsourcedSecurityTesting\nfrom diagrams.alibabacloud.security import DataEncryptionService, DES  # DES is an alias\nfrom diagrams.alibabacloud.security import DbAudit\nfrom diagrams.alibabacloud.security import GameShield\nfrom diagrams.alibabacloud.security import IdVerification\nfrom diagrams.alibabacloud.security import ManagedSecurityService\nfrom diagrams.alibabacloud.security import SecurityCenter\nfrom diagrams.alibabacloud.security import ServerGuard\nfrom diagrams.alibabacloud.security import SslCertificates\nfrom diagrams.alibabacloud.security import WebApplicationFirewall, WAF  # WAF is an alias\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS CRM Classes in Python\nDESCRIPTION: This snippet shows how to import CRM service classes from the diagrams.saas.crm module. It includes classes for Intercom and Zendesk.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.crm import Intercom, Zendesk\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Media Class in Python\nDESCRIPTION: This snippet shows how to import the Cloudinary media service class from the diagrams.saas.media module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.media import Cloudinary\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Recommendation Class in Python\nDESCRIPTION: This snippet demonstrates how to import the Recombee recommendation service class from the diagrams.saas.recommendation module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.recommendation import Recombee\n```\n\n----------------------------------------\n\nTITLE: Importing SaaS Social Classes in Python\nDESCRIPTION: This snippet demonstrates how to import social media service classes from the diagrams.saas.social module. It includes classes for Facebook and Twitter.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/saas.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.saas.social import Facebook, Twitter\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises DNS Resources in Diagrams Library\nDESCRIPTION: Python import statements for DNS-related resources available in the Diagrams library, including CoreDNS and PowerDNS.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.dns.Coredns\ndiagrams.onprem.dns.Powerdns\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises ETL Resources in Diagrams Library\nDESCRIPTION: Python import statement for ETL (Extract, Transform, Load) resources in the Diagrams library, currently including only Embulk.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.etl.Embulk\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Groupware Resources in Diagrams Library\nDESCRIPTION: Python import statement for groupware solutions in the Diagrams library, currently only including Nextcloud.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.groupware.Nextcloud\n```\n\n----------------------------------------\n\nTITLE: Importing On-Premises Messaging Resources in Diagrams Library\nDESCRIPTION: Python import statement for messaging systems in the Diagrams library, currently only including Centrifugo.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndiagrams.onprem.messaging.Centrifugo\n```\n\n----------------------------------------\n\nTITLE: Importing Outscale Compute Nodes in Python\nDESCRIPTION: These code snippets show how to import Compute and DirectConnect nodes from the Outscale compute category in the diagrams library.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/outscale.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.compute import Compute\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.compute import DirectConnect\n```\n\n----------------------------------------\n\nTITLE: Importing Outscale Storage Nodes in Python\nDESCRIPTION: These code snippets demonstrate how to import SimpleStorageService and Storage nodes from the Outscale storage category in the diagrams library.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/outscale.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.storage import SimpleStorageService\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.outscale.storage import Storage\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Base Class in Python\nDESCRIPTION: Imports the base Firebase class from the diagrams library. This class represents the core Firebase service in architectural diagrams.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/firebase.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom diagrams.firebase.base import Firebase\n```\n\n----------------------------------------\n\nTITLE: Importing IBM Infrastructure Components\nDESCRIPTION: Python class references for IBM Cloud infrastructure components including messaging, monitoring, and service management components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/ibm.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.ibm.infrastructure.Channels\ndiagrams.ibm.infrastructure.CloudMessaging\ndiagrams.ibm.infrastructure.Dashboard\ndiagrams.ibm.infrastructure.Diagnostics\ndiagrams.ibm.infrastructure.EdgeServices\ndiagrams.ibm.infrastructure.EnterpriseMessaging\ndiagrams.ibm.infrastructure.EventFeed\n```\n\n----------------------------------------\n\nTITLE: Using OCI Database Node Class Aliases in Python\nDESCRIPTION: Examples of available aliases for OCI database node classes. These aliases provide shorter alternative names for some database services to improve code readability.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/oci.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nADBWhite  # alias for diagrams.oci.database.AutonomousWhite\nADB  # alias for diagrams.oci.database.Autonomous\nDBServiceWhite  # alias for diagrams.oci.database.DatabaseServiceWhite\nDBService  # alias for diagrams.oci.database.DatabaseService\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Game Components in Python Diagrams Library\nDESCRIPTION: Python import paths for AWS Game service components including GameTech and GameLift services.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/aws.md#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndiagrams.aws.game.GameTech\ndiagrams.aws.game.Gamelift\n```\n\n----------------------------------------\n\nTITLE: Importing OnPrem Aggregator Nodes in Python\nDESCRIPTION: Example imports for the OnPrem aggregator node classes including Fluentd and Vector.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/nodes/onprem.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.onprem.aggregator import Fluentd, Vector\n```\n\n----------------------------------------\n\nTITLE: Running a Diagram Python Script\nDESCRIPTION: Shell command to execute a Python script containing diagram code, which will generate and open the diagram image file.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/docs/guides/diagram.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python diagram.py\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container for Diagrams Development\nDESCRIPTION: Command to create and run a Docker container with mounted source code for development purposes.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n-it \\\n--name diagrams \\\n--mount type=bind,source=\"$(pwd)\",target=/usr/src/diagrams \\\ndiagrams:1.0\n```\n\n----------------------------------------\n\nTITLE: Running Autogen Script in Docker Container\nDESCRIPTION: Command to run the autogen.sh script inside the Docker container for testing.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec diagrams ./autogen.sh\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with ImageMagick for Diagrams Node Resources\nDESCRIPTION: Commands for resizing images to a maximum of 256 pixels wide or high using ImageMagick, which is required for node resource images in the Diagrams project.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# You can do that easily with ImageMagick\nconvert -resize 256 my_big_image.jpg my_image.jpg\n\n# Or FFmpeg\nffmpeg -i my_big_image.jpg -vf scale=w=256:h=256:force_original_aspect_ratio=decrease my_image.png\n```\n\n----------------------------------------\n\nTITLE: Import Path Changes for Elastic Components\nDESCRIPTION: A table showing the breaking changes in import paths for Elastic components introduced in version 0.16.0. The table maps old import paths to new import paths for Logstash, Kibana, and Elasticsearch components.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Old import path                                                    | New import path                                               |\n| -------------------------------------------------------------------| --------------------------------------------------------------|\n| `from diagrams.onprem.logging import Logstash`                     | `from diagrams.elastic.elasticsearch import Logstash`         |\n| `from diagrams.onprem.monitoring import Kibana`                    | `from diagrams.elastic.elasticsearch import Kibana`           |\n| `from diagrams.onprem.search import Elasticsearch`                 | `from diagrams.elastic.elasticsearch import Elasticsearch`    |\n```\n\n----------------------------------------\n\nTITLE: Updating OCI DevOps Module Imports in Python\nDESCRIPTION: This snippet demonstrates the changes in import statements for the OCI DevOps module. It includes updates to class names for API Gateway, API Service, and Resource Management, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.devops import APIGateway\nfrom diagrams.oci.devops import APIGatewayWhite\nfrom diagrams.oci.devops import APIService\nfrom diagrams.oci.devops import APIServiceWhite\nfrom diagrams.oci.devops import ResourceMgmt\nfrom diagrams.oci.devops import ResourceMgmtWhite\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Edge Services Module Imports in Python\nDESCRIPTION: This snippet shows the changes in import statements for OCI edge services. It includes updates to module paths and class names for CDN, DNS, Email Delivery, and WAF, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.connectivity import CDN\nfrom diagrams.oci.connectivity import CDNWhite\nfrom diagrams.oci.connectivity import DNS\nfrom diagrams.oci.connectivity import DNSWhite\nfrom diagrams.oci.monitoring import Email\nfrom diagrams.oci.monitoring import EmailWhite\nfrom diagrams.oci.security import WAF\nfrom diagrams.oci.security import WAFWhite\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Network Module Imports in Python\nDESCRIPTION: This snippet shows the changes in import statements for the OCI network module. It includes updates to class names for Internet Gateway, Load Balancer, NAT Gateway, Route Table, Security Lists, and VCN, along with their white variants.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.network import InternetGateway\nfrom diagrams.oci.network import InternetGatewayWhite\nfrom diagrams.oci.network import LoadBalancer\nfrom diagrams.oci.network import LoadBalancerWhite\nfrom diagrams.oci.connectivity import NATGateway\nfrom diagrams.oci.connectivity import NATGatewayWhite\nfrom diagrams.oci.network import RouteTable\nfrom diagrams.oci.network import RouteTableWhite\nfrom diagrams.oci.network import SecurityLists\nfrom diagrams.oci.network import SecurityListsWhite\nfrom diagrams.oci.network import Vcn\nfrom diagrams.oci.network import VcnWhite\n```\n\n----------------------------------------\n\nTITLE: Unchanged OCI CustomerPremises Import Path in Python\nDESCRIPTION: Shows the import path for the CustomerPremises component which remains unchanged in the diagrams.oci.connectivity module.\nSOURCE: https://github.com/mingrammer/diagrams/blob/master/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.connectivity import CustomerPremises\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom diagrams.oci.connectivity import CustomerPremises\n```"
  }
]