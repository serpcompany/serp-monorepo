[
  {
    "owner": "withastro",
    "repo": "starlight",
    "content": "TITLE: Starting Development Server with NPM\nDESCRIPTION: Command to start the local development server using NPM package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Project to Use Starlight - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to set up Starlight as an integration in the Astro configuration file (`astro.config.mjs`). It imports required dependencies, appends `starlight` with a custom project title to the `integrations` array, and exports the configuration for Astro to recognize. Key parameters include the site title, which will appear in your generated documentation. This configuration requires both Astro and @astrojs/starlight as installed dependencies.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/manual-setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\\nimport { defineConfig } from 'astro/config';\\nimport starlight from '@astrojs/starlight';\\n\\nexport default defineConfig({\\n\\tintegrations: [\\n\\t\\tstarlight({\\n\\t\\t\\ttitle: 'My delightful docs site',\\n\\t\\t}),\\n\\t],\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Frontmatter (MDX)\nDESCRIPTION: This YAML block defines metadata and configuration for the MDX page. It sets the page `title`, `description`, specifies the `template` (splash layout), and configures the `hero` section with a `tagline`, `image`, and call-to-action `actions` (buttons linking to other pages or external resources).\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/src/content/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Welcome to Starlight\ndescription: Get started building your docs site with Starlight.\ntemplate: splash\nhero:\n  tagline: Congrats on setting up a new Starlight project!\n  image:\n    file: ../../assets/houston.webp\n  actions:\n    - text: Example Guide\n      link: /guides/example/\n      icon: right-arrow\n    - text: Read the Starlight docs\n      link: https://starlight.astro.build\n      icon: external\n      variant: minimal\n---\n```\n\n----------------------------------------\n\nTITLE: Example Starlight Project Directory Structure Representation\nDESCRIPTION: Uses the Starlight `FileTree` component (imported from `@astrojs/starlight/components`) to display a sample directory structure for a Starlight project. It illustrates the placement of configuration files (`astro.config.mjs`, `content.config.ts`), source files (`src/`), content files (`src/content/docs/`), and public assets (`public/`). The specific syntax with hyphens and indentation is interpreted by the `FileTree` component to render a visual representation within an Astro/MDX page.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/project-structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- public/\n  - favicon.svg\n- src/\n  - assets/\n    - logo.svg\n    - screenshot.jpg\n  - components/\n    - CustomButton.astro\n    - InteractiveWidget.jsx\n  - content/\n    - docs/\n      - guides/\n        - 01-getting-started.md\n        - 02-advanced.md\n      - index.mdx\n  - content.config.ts\n- astro.config.mjs\n- package.json\n- tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Defining Starlight Content Collections - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a documentation collection in your Astro project to use Starlight's loader and schema. It imports utility functions from both Astro content API and @astrojs/starlight, then creates a new collection named `docs` with custom loader and schema to ensure Starlight compatibility. Place this code in `src/content.config.ts`; required dependencies include `astro:content` and the relevant Starlight helpers. The collection definition ensures type safety and proper data handling for your documentation content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/manual-setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// src/content.config.ts\\nimport { defineCollection } from 'astro:content';\\nimport { docsLoader } from '@astrojs/starlight/loaders';\\nimport { docsSchema } from '@astrojs/starlight/schema';\\n\\nexport const collections = {\\n\\tdocs: defineCollection({ loader: docsLoader(), schema: docsSchema() }),\\n};\n```\n\n----------------------------------------\n\nTITLE: Using Components in MDX with Starlight\nDESCRIPTION: Demonstrates how to import and use components in MDX files, including built-in Starlight components and custom components.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/using-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\n# src/content/docs/example.mdx\ntitle: Welcome to my docs\n---\n\nimport { Icon } from '@astrojs/starlight/components';\nimport CustomCard from '../../components/CustomCard.astro';\n\n<Icon name=\"open-book\" />\n\n<CustomCard>Components can also contain **nested content**.</CustomCard>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation in Starlight - JavaScript\nDESCRIPTION: Demonstrates how to structure the 'sidebar' property to organize navigation in a Starlight-powered documentation site. The sidebar contains individual links, groups, and autogenerated sections, and can reference internal and external pages. Requires no dependencies beyond Starlight and optionally local content. Inputs are navigation definitions; output is a sidebar UI reflecting the defined structure, with support for nested and autogenerated links.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t// A single link item labelled “Home”.\n\t\t{ label: 'Home', link: '/' },\n\t\t// A group labelled “Start Here” containing four links.\n\t\t{\n\t\t\tlabel: 'Start Here',\n\t\t\titems: [\n\t\t\t\t// Using `slug` for internal links.\n\t\t\t\t{ slug: 'intro' },\n\t\t\t\t{ slug: 'installation' },\n\t\t\t\t// Or using the shorthand for internal links.\n\t\t\t\t'tutorial',\n\t\t\t\t'next-steps',\n\t\t\t],\n\t\t},\n\t\t// A group linking to all pages in the reference directory.\n\t\t{\n\t\t\tlabel: 'Reference',\n\t\t\tautogenerate: { directory: 'reference' },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components in MDX\nDESCRIPTION: Demonstrates how to import and use components in an MDX file, including Starlight's built-in Icon component and a custom component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/using-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\n# src/content/docs/example.mdx\ntitle: Bienvenido a mi documentación\n---\n\nimport { Icon } from '@astrojs/starlight/components';\nimport CustomCard from '../../components/CustomCard.astro';\n\n<Icon name=\"open-book\" />\n\n<CustomCard>\n\tLos componentes también pueden contener **contenido anidado**.\n</CustomCard>\n```\n\n----------------------------------------\n\nTITLE: Accessing Starlight Route Data in Astro Component - Astro\nDESCRIPTION: This snippet demonstrates how to extract route data from Astro's global context within a component using Astro.locals.starlightRoute. It uses destructuring to access the siteTitle property from the route data and displays it in the rendered markup. Dependencies include Starlight with Astro and an active Starlight setup. siteTitle is the main parameter, and the output is a paragraph with the site title. This pattern is typical for building custom component overrides leveraging global page data.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/route-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n```astro title=\\\"example.astro\\\" {2}\n---\nconst { siteTitle } = Astro.locals.starlightRoute;\n---\n\n<p>The title of this site is “{siteTitle}”</p>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Root Locale and Additional Languages - JavaScript\nDESCRIPTION: Shows how to serve a default (root) locale from the site root without a language prefix by using the 'root' key in the 'locales' property. Supports multilingual routing, placing default language content at non-prefixed URLs and translations at '/[lang]/'. Inputs include 'root' and language keys with their labels. Output: URL structure and language switching logic in the final site.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n\tlocales: {\n\t\troot: {\n\t\t\tlabel: 'English',\n\t\t\tlang: 'en',\n\t\t},\n\t\tfr: {\n\t\t\tlabel: 'Français',\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales and Internationalization in Starlight - JavaScript\nDESCRIPTION: Demonstrates how to set up locale-based documentation using the 'locales' property in Starlight config. Shows multiple languages, default locale, and how to pass configuration per locale directory. Requires no dependencies beyond Starlight. Inputs are locale keys and their configs; outputs are multiple language versions of site content, supporting right-to-left (rtl) or left-to-right (ltr) directions as well as language-specific metadata.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My Site',\n\t\t\t// Set English as the default language for this site.\n\t\t\tdefaultLocale: 'en',\n\t\t\tlocales: {\n\t\t\t\t// English docs in `src/content/docs/en/`\n\t\t\t\ten: {\n\t\t\t\t\tlabel: 'English',\n\t\t\t\t},\n\t\t\t\t// Simplified Chinese docs in `src/content/docs/zh-cn/`\n\t\t\t\t'zh-cn': {\n\t\t\t\t\tlabel: '简体中文',\n\t\t\t\t\tlang: 'zh-CN',\n\t\t\t\t},\n\t\t\t\t// Arabic docs in `src/content/docs/ar/`\n\t\t\t\tar: {\n\t\t\t\t\tlabel: 'العربية',\n\t\t\t\t\tdir: 'rtl',\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Awaiting Later Middleware Before Modifying Route Data - TypeScript\nDESCRIPTION: This snippet shows how to chain route middleware handlers in Starlight. It defines an async middleware using defineRouteMiddleware, awaits the next() callback to ensure all subsequent middleware has run, then modifies the entry title by adding an exclamation mark. Dependencies include @astrojs/starlight/route-data, multiple middleware support, and async/await usage. Key parameters are context (page context object) and next (callback function). Input is the render context; output is a mutation of the route data after all later middleware processes. Useful for precise middleware order control.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/route-data.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts \\\"next\\\" \\\"await next();\\\"\n// src/routeData.ts\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware(async (context, next) => {\n\t// Wait for later middleware to run.\n\tawait next();\n\t// Modify route data.\n\tconst { entry } = context.locals.starlightRoute;\n\tentry.data.title = entry.data.title + '!';\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Page Metadata with Markdown Frontmatter\nDESCRIPTION: Demonstrates setting the `title` and `description` for a Starlight page using standard Markdown frontmatter. These properties control how the page appears in the site, browser tab, and search results. Starlight provides type-safety for these common properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello, World!\ndescription: This is a page in my Starlight-powered site\n---\n```\n\n----------------------------------------\n\nTITLE: Sidebar with Collapsed Groups and Autogenerated Subgroups - JavaScript\nDESCRIPTION: Shows how to explicitly set sidebar groups and subgroups to be collapsed or expanded by default in Starlight configuration. The 'collapsed' and 'autogenerate.collapsed' properties control sidebar group states. Intended for use in large documentation sites for improved navigation. Inputs are label, items, and group configuration objects, and the output is a sidebar with groups that start collapsed or expanded according to settings.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nsidebar: [\n  // A collapsed group of links.\n  {\n    label: 'Collapsed Links',\n    collapsed: true,\n    items: ['intro', 'next-steps'],\n  },\n  // An expanded group containing collapsed autogenerated subgroups.\n  {\n    label: 'Reference',\n    autogenerate: {\n      directory: 'reference',\n      collapsed: true,\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Cards with CardGrid in Starlight (JavaScript/JSX)\nDESCRIPTION: This snippet renders a grid of feature highlight cards using Starlight's CardGrid and Card components in an Astro (JSX-like) component context. Each Card displays a documentation feature title, icon, and description. Requires the CardGrid and Card components from '@astrojs/starlight/components'. No explicit input parameters; accepts children as Card elements. Used for visually promoting key Starlight features on the site homepage. Outputs a styled, responsive card grid.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CardGrid stagger>\n\t<Card title=\"Documentation that delights\" icon=\"open-book\">\n\t\tIncludes: Site navigation, search, internationalization, SEO, easy-to-read\n\t\ttypography, code highlighting, dark mode and more.\n\t</Card>\n\t<Card title=\"Powered by Astro\" icon=\"rocket\">\n\t\tLeverage the full power and performance of Astro. Extend Starlight with your\n\t\tfavorite Astro integrations and libraries.\n\t</Card>\n\t<Card title=\"Markdown, Markdoc, and MDX\" icon=\"document\">\n\t\tBring your favorite markup language. Starlight gives you built-in\n\t\tfrontmatter validation with TypeScript type-safety.\n\t</Card>\n\t<Card title=\"Bring your own UI components\" icon=\"puzzle\">\n\t\tStarlight ships as a framework-agnostic, complete docs solution. Extend with\n\t\tReact, Vue, Svelte, Solid, and more.\n\t</Card>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Theme Configuration for Starlight\nDESCRIPTION: Comprehensive theme configuration showing how to customize fonts and colors when using Tailwind with Starlight.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/css-and-tailwind.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* src/styles/global.css */\n@layer base, starlight, theme, components, utilities;\n\n@import '@astrojs/starlight-tailwind';\n@import 'tailwindcss/theme.css' layer(theme);\n@import 'tailwindcss/utilities.css' layer(utilities);\n\n@theme {\n\t/* Your preferred text font. Starlight uses a system font stack by default. */\n\t--font-sans: 'Atkinson Hyperlegible';\n\t/* Your preferred code font. Starlight uses system monospace fonts by default. */\n\t--font-mono: 'IBM Plex Mono';\n\t/* Your preferred accent color. Indigo is closest to Starlight's defaults. */\n\t--color-accent-50: var(--color-indigo-50);\n\t--color-accent-100: var(--color-indigo-100);\n\t--color-accent-200: var(--color-indigo-200);\n\t--color-accent-300: var(--color-indigo-300);\n\t--color-accent-400: var(--color-indigo-400);\n\t--color-accent-500: var(--color-indigo-500);\n\t--color-accent-600: var(--color-indigo-600);\n\t--color-accent-700: var(--color-indigo-700);\n\t--color-accent-800: var(--color-indigo-800);\n\t--color-accent-900: var(--color-indigo-900);\n\t--color-accent-950: var(--color-indigo-950);\n\t/* Your preferred gray scale. Zinc is closest to Starlight's defaults. */\n\t--color-gray-50: var(--color-zinc-50);\n\t--color-gray-100: var(--color-zinc-100);\n\t--color-gray-200: var(--color-zinc-200);\n\t--color-gray-300: var(--color-zinc-300);\n\t--color-gray-400: var(--color-zinc-400);\n\t--color-gray-500: var(--color-zinc-500);\n\t--color-gray-600: var(--color-zinc-600);\n\t--color-gray-700: var(--color-zinc-700);\n\t--color-gray-800: var(--color-zinc-800);\n\t--color-gray-900: var(--color-zinc-900);\n\t--color-gray-950: var(--color-zinc-950);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight i18n Locales in JavaScript\nDESCRIPTION: Demonstrates how to enable internationalization in a Starlight project by defining supported languages (`locales`) and a default fallback language (`defaultLocale`) within the `astro.config.mjs` file. It shows specifying language labels, optional `lang` tags (like 'zh-CN'), and text direction (`dir`) for RTL languages like Arabic.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My Docs',\n\t\t\t// Indica l'inglese come lingua predefinita.\n\t\t\tdefaultLocale: 'en',\n\t\t\tlocales: {\n\t\t\t\t// La documentazione in inglese si trova in `src/content/docs/en/`\n\t\t\t\ten: {\n\t\t\t\t\tlabel: 'English',\n\t\t\t\t},\n\t\t\t\t// La documentazione in cinese semplificato si trova in `src/content/docs/zh-cn/`\n\t\t\t\t'zh-cn': {\n\t\t\t\t\tlabel: '简体中文',\n\t\t\t\t\tlang: 'zh-CN',\n\t\t\t\t},\n\t\t\t\t// La documentazione in arabo si trova in `src/content/docs/ar/`\n\t\t\t\tar: {\n\t\t\t\t\tlabel: 'العربية',\n\t\t\t\t\tdir: 'rtl',\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Using ComponentProps for Starlight Component Types\nDESCRIPTION: Shows how to use the ComponentProps type from Astro to reference the props accepted by a Starlight component, useful for wrapping or extending existing components.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/using-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\nimport type { ComponentProps } from 'astro/types';\nimport { Icon } from '@astrojs/starlight/icon';\n\ntype IconProps = ComponentProps<typeof Icon>;\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight Integration in Astro - JavaScript\nDESCRIPTION: Demonstrates how to add the Starlight integration to an Astro project by importing modules and defining the integration inside 'astro.config.mjs'. Requires '@astrojs/starlight' and 'astro/config' modules to be installed. The configuration object in the example sets the site title and lists integrations; each option inside the starlight object customizes site behavior. Inputs include options such as 'title', and the output is a configured Astro instance with Starlight enabled.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My delightful docs site',\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar with Internal Links in Starlight (JavaScript)\nDESCRIPTION: Demonstrates how to add internal links for documentation pages in the sidebar by specifying the slug property within a JavaScript configuration object. Requires the Starlight project and pages in the referenced slugs within the src/content/docs/ directory. The sidebar property accepts an array of link objects with slug keys, and the resulting sidebar will display each page's title as its label. Inputs are configuration objects, and output is an autogenerated navigation based on page frontmatter. No support for external URLs.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{ slug: 'constellations/andromeda' },\n\t\t{ slug: 'constellations/orion' },\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Media Links in Starlight Header - JavaScript\nDESCRIPTION: Demonstrates how to list social media accounts so their icons appear in the documentation site header. Each object should include a supported 'icon' name, 'label', and 'href' link. Inputs are an array of objects per social account. Output is a header social bar with the specified links and icons; requires Starlight and its icon set.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n\tsocial: [\n\t\t{ icon: 'codeberg', label: 'Codeberg', href: 'https://codeberg.org/knut' },\n\t\t{ icon: 'discord', label: 'Discord', href: 'https://astro.build/chat' },\n\t\t{ icon: 'github', label: 'GitHub', href: 'https://github.com/withastro' },\n\t\t{ icon: 'gitlab', label: 'GitLab', href: 'https://gitlab.com/delucis' },\n\t\t{ icon: 'mastodon', label: 'Mastodon', href: 'https://m.webtoo.ls/@astro' },\n\t],\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining the HeroConfig Interface in Starlight (TypeScript)\nDESCRIPTION: Specifies the TypeScript interface `HeroConfig` used for configuring the hero section via Starlight frontmatter. It details the structure for defining title, tagline, image options (single file, separate light/dark files, or raw HTML), and action buttons with text, link, variant, icon, and custom attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ninterface HeroConfig {\n  title?: string;\n  tagline?: string;\n  image?:\n    |\n      {\n        // Relative path to an image in your repository.\n        file: string;\n        // Alt text to make the image accessible to assistive technology\n        alt?: string;\n      }\n    | {\n        // Relative path to an image in your repository to be used for dark mode.\n        dark: string;\n        // Relative path to an image in your repository to be used for light mode.\n        light: string;\n        // Alt text to make the image accessible to assistive technology\n        alt?: string;\n      }\n    | {\n        // Raw HTML to use in the image slot.\n        // Could be a custom `<img>` tag or inline `<svg>`.\n        html: string;\n      };\n  actions?: Array<{\n    text: string;\n    link: string;\n    variant?: 'primary' | 'secondary' | 'minimal';\n    icon?: string;\n    attrs?: Record<string, string | number | boolean>;\n  }>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Starlight Integration with Different Package Managers - Shell\nDESCRIPTION: These shell commands install the Starlight integration into your Astro project using npm, pnpm, or Yarn. Each command should be executed from the root directory of your project, and will update your dependencies and modify Astro's integrations configuration accordingly. No code changes are required; simply run the appropriate command for your package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/manual-setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx astro add starlight\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm astro add starlight\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn astro add starlight\n```\n\n----------------------------------------\n\nTITLE: Customizing Site Appearance with Custom CSS - JavaScript\nDESCRIPTION: Illustrates how to use the 'customCss' array to provide custom stylesheets, either local or from npm modules, for a Starlight site. Inputs are relative or module paths to CSS files, and output is additional styling applied to the site on top of defaults. No dependencies other than CSS files and Starlight config parser.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n\tcustomCss: ['./src/custom-styles.css', '@fontsource/roboto'],\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping and Nesting Sidebar Items in Starlight (JavaScript)\nDESCRIPTION: Demonstrates how to organize sidebar content by grouping related links under a collapsible heading, including support for nested subgroups. Configuration objects require label and items properties, where items can include strings (internal links) or nested group objects. The sidebar reflects this hierarchy as nested navigation structure. Inputs are nested configuration objects or slugs, outputs are structured, collapsible sidebar menus. Starlight dependency required.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t// A group of links labelled \"Constellations\".\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\titems: [\n\t\t\t\t'constellations/carina',\n\t\t\t\t'constellations/centaurus',\n\t\t\t\t// A nested group of links for seasonal constellations.\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Seasonal',\n\t\t\t\t\titems: [\n\t\t\t\t\t\t'constellations/andromeda',\n\t\t\t\t\t\t'constellations/orion',\n\t\t\t\t\t\t'constellations/ursa-minor',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Link Appearance via Frontmatter in Markdown\nDESCRIPTION: Provides an example of how to customize sidebar links using the sidebar field in a markdown file's frontmatter. Options include custom label, sort order, and badge parameters. Requires the file to be included in an autogenerated group or linked via slug. Inputs are frontmatter key-value pairs (label, order, badge), output is a customized sidebar entry for the documentation page. Not applicable to explicit link definitions.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n---\n# src/content/docs/example.md\ntitle: My page\nsidebar:\n  # Set a custom label for the link\n  label: Custom sidebar label\n  # Set a custom order for the link (lower numbers are displayed higher up)\n  order: 2\n  # Add a badge to the link\n  badge:\n    text: New\n    variant: tip\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Starlight/Markdoc Project with pnpm\nDESCRIPTION: Shell command to initialize a new Astro Starlight project pre-configured with Markdoc support using the `pnpm create astro` command.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\n```sh\npnpm create astro --template starlight/markdoc\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Hero Section in Starlight Frontmatter (Markdown)\nDESCRIPTION: Example of setting up a hero component on a Starlight page using the `hero` frontmatter field, often used with the `splash` template. It demonstrates setting the title, tagline, an image from the repository, and action buttons.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: My Home Page\ntemplate: splash\nhero:\n  title: 'My Project: Stellar Stuff Sooner'\n  tagline: Take your stuff to the moon and back in the blink of an eye.\n  image:\n    alt: A glittering, brightly colored logo\n    file: ~/assets/logo.png\n  actions:\n    - text: Tell me more\n      link: /getting-started/\n      icon: right-arrow\n    - text: View on GitHub\n      link: https://github.com/astronaut/my-project\n      icon: external\n      variant: minimal\n      attrs:\n        rel: me\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logo in Starlight\nDESCRIPTION: Configuration for adding a custom logo to a Starlight site using the logo.src option in the Astro config file.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs With My Logo',\n\t\t\tlogo: {\n\t\t\t\tsrc: './src/assets/my-logo.svg',\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization for Starlight Sidebar Links\nDESCRIPTION: This code snippet shows how to implement internationalization for sidebar links and groups in Starlight. It demonstrates the use of the 'translations' property to provide localized labels for different languages.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\ttranslations: {\n\t\t\t\t'pt-BR': 'Constelações',\n\t\t\t},\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Andromeda',\n\t\t\t\t\ttranslations: {\n\t\t\t\t\t\t'pt-BR': 'Andrômeda',\n\t\t\t\t\t},\n\t\t\t\t\tslug: 'constellations/andromeda',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Scorpius',\n\t\t\t\t\ttranslations: {\n\t\t\t\t\t\t'pt-BR': 'Escorpião',\n\t\t\t\t\t},\n\t\t\t\t\tslug: 'constellations/scorpius',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Starlight\nDESCRIPTION: This code shows how to extend Starlight with custom plugins by adding them to the plugins array in the configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tplugins: [starlightPlugin()],\n});\n```\n\n----------------------------------------\n\nTITLE: Autogenerating Sidebar Groups from Directory Structure in Starlight (JavaScript)\nDESCRIPTION: Illustrates automated sidebar group creation by referencing a docs directory. The configuration object includes label and autogenerate properties; autogenerate must specify a directory key. Dependencies include an appropriate directory structure under src/content/docs/. Output is a sidebar group labeled accordingly, containing links for all markdown files and subdirectories. Limitation: only groups based on directory structure; order is alphabetical by slug by default.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\t// Autogenerate a group of links for the 'constellations' directory.\n\t\t\tautogenerate: { directory: 'constellations' },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Page Structure with Headings\nDESCRIPTION: Example of proper page structure using Markdown headings with frontmatter and initial content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown Guide\ndescription: How to use Markdown in Starlight\n---\n\nThis page describes how to use Markdown in Starlight.\n\n## Inline Styles\n\n## Headings\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight to Use Custom Route Middleware - JavaScript\nDESCRIPTION: This snippet configures Astro and Starlight to use a custom route middleware file by assigning its path to the routeMiddleware property within the starlight integration. It demonstrates adding the routeMiddleware property within the integrations array in astro.config.mjs. Dependencies are Astro, the Starlight integration, and a valid middleware export. routeMiddleware receives a string path, and the output is an updated Astro config. This enables route data customization for all pages in the documentation site.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/route-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js ins={9}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My delightful docs site',\n\t\t\trouteMiddleware: './src/routeData.ts',\n\t\t}),\n\t],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Data in Astro Component\nDESCRIPTION: Demonstrates how to access Starlight route data from the global Astro.locals object in an Astro component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/route-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst { siteTitle } = Astro.locals.starlightRoute;\n---\n\n<p>El título de este sitio es \"{siteTitle}\"</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Starlight Homepage Using Markdown - Markdown\nDESCRIPTION: This Markdown file defines the homepage of your Starlight-generated documentation site, located at `src/content/docs/index.md`. It includes frontmatter metadata for the title and description, providing project-specific branding and summary information. The main content welcomes users to the site. This snippet requires Starlight and Astro to be properly configured to recognize and render Markdown files within the docs content collection.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/manual-setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n---\\n# src/content/docs/index.md\\ntitle: My docs\\ndescription: Learn more about my project in this docs site built with Starlight.\\n---\\n\\nWelcome to my project!\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Page Metadata in Starlight Frontmatter (Markdown)\nDESCRIPTION: Defines the required `title` and optional `description` for a Starlight page using YAML frontmatter in a Markdown file. The title is used for page display, browser tabs, and metadata, while the description is used for search engines and social media previews.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md {3-4}\n---\n# src/content/docs/example.md\ntitle: About this project\ndescription: Learn more about the project I’m working on.\n---\n\nWelcome to the about page!\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight UI Components in Astro (JavaScript)\nDESCRIPTION: This JavaScript import statement brings the `Card` and `CardGrid` components into the scope of the MDX file. These components are provided by the `@astrojs/starlight/components` package and are intended for use within the Markdown content to structure information visually, as seen in the 'Next steps' section.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/tailwind/src/content/docs/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, CardGrid } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight Component Overrides in Astro Config\nDESCRIPTION: Shows how to configure Starlight in `astro.config.mjs` to use a custom component. It specifies the path to the custom `EmailLink.astro` component within the `components` property of the Starlight integration options, mapping it to override the default `SocialIcons` component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/overriding-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My Docs with Overrides',\n\t\t\tcomponents: {\n\t\t\t\t// Override the default `SocialIcons` component.\n\t\t\t\tSocialIcons: './src/components/EmailLink.astro',\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight Page Metadata and Hero Section (YAML)\nDESCRIPTION: This YAML frontmatter block configures the Starlight page. It sets the page title, description, and specifies the `splash` template. It defines a hero section with a title containing embedded HTML and Tailwind CSS classes for gradient text styling, a tagline, an image path, and calls-to-action buttons with links and icons.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/tailwind/src/content/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Welcome to Starlight\ndescription: Get started building your docs site with Starlight.\ntemplate: splash\nhero:\n  title: |\n    Welcome to Starlight with\n    <span\n      class=\"font-black text-transparent\n        bg-clip-text bg-gradient-to-b\n        from-accent-700 to-accent-400\n        dark:from-accent-500 dark:to-accent-200\"\n    >\n      Tailwind\n    </span>\n  tagline: Congrats on setting up a new Starlight project!\n  image:\n    file: ../../assets/houston.webp\n  actions:\n    - text: Example Guide\n      link: /guides/example/\n      icon: right-arrow\n    - text: Read the Starlight docs\n      link: https://starlight.astro.build\n      icon: external\n      variant: minimal\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Up Astro Content Collection for Starlight UI Translations in TypeScript\nDESCRIPTION: Configures the necessary Astro content collection for managing Starlight UI string translations, shown as a diff. It involves importing `i18nSchema` from Starlight and defining an `i18n` collection of type `data` using this schema in `src/content/config.ts`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// src/content/config.ts\nimport { defineCollection } from 'astro:content';\nimport { docsSchema, i18nSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n\tdocs: defineCollection({ schema: docsSchema() }),\n+\ti18n: defineCollection({ type: 'data', schema: i18nSchema() }),\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Starlight i18n Schema for DocSearch (JavaScript)\nDESCRIPTION: Illustrates how to update the Astro content configuration file (`src/content.config.ts`) to extend Starlight's built-in `i18nSchema` with the `docSearchI18nSchema`. This enables the translation of DocSearch UI strings via Starlight's internationalization system.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js ins={5} ins=/{ extend: .+ }/\n// src/content.config.ts\nimport { defineCollection } from 'astro:content';\nimport { docsLoader, i18nLoader } from '@astrojs/starlight/loaders';\nimport { docsSchema, i18nSchema } from '@astrojs/starlight/schema';\nimport { docSearchI18nSchema } from '@astrojs/starlight-docsearch/schema';\n\nexport const collections = {\n\tdocs: defineCollection({ loader: docsLoader(), schema: docsSchema() }),\n\ti18n: defineCollection({\n\t\tloader: i18nLoader(),\n\t\tschema: i18nSchema({ extend: docSearchI18nSchema() }),\n\t}),\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Aside Usage Examples in MDX\nDESCRIPTION: Demonstrates various ways to use the Aside component with different types and content including code snippets.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/asides.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n\n<Aside>Some content in an aside.</Aside>\n\n<Aside type=\"caution\">Some cautionary content.</Aside>\n\n<Aside type=\"tip\">\n\nOther content is also supported in asides.\n\n```js\n// A code snippet, for example.\n```\n\n</Aside>\n\n<Aside type=\"danger\">Do not give your password to anyone.</Aside>\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight DocSearch Plugin using npm (Shell)\nDESCRIPTION: Provides the npm command to install the `@astrojs/starlight-docsearch` package, which is necessary for integrating Algolia DocSearch into a Starlight project.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpm install @astrojs/starlight-docsearch\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Starlight Configuration via config:setup Hook in TypeScript\nDESCRIPTION: Presents a Starlight plugin example utilizing the `config:setup` hook. It demonstrates how to modify the Starlight configuration by calling the `updateConfig` function with a new configuration object, specifically adding a Twitter social media link while preserving existing links using the spread operator (`...config.social`).\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// plugin.ts\nexport default {\n  name: 'add-twitter-plugin',\n  hooks: {\n    'config:setup'({ config, updateConfig }) {\n      updateConfig({\n        social: [\n          ...(config.social || []),\n          {\n            icon: 'twitter',\n            label: 'Twitter',\n            href: 'https://twitter.com/astrodotbuild',\n          },\n        ],\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogenerated Collapsible Groups in Starlight\nDESCRIPTION: This code snippet shows how to configure autogenerated collapsible groups in Starlight. It demonstrates setting the 'collapsed' property for both the parent group and its autogenerated subgroups.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\t// Collapse the group and its autogenerated subgroups by default.\n\t\t\tcollapsed: true,\n\t\t\tautogenerate: { directory: 'constellations' },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Starlight Plugin Interface in TypeScript\nDESCRIPTION: Defines the `StarlightPlugin` interface in TypeScript, outlining the required `name` property and the `hooks` object containing the available plugin lifecycle hooks like `i18n:setup` and `config:setup`. This interface serves as the blueprint for creating Starlight plugins.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface StarlightPlugin {\n  name: string;\n  hooks: {\n    'i18n:setup'?: (options: {\n      injectTranslations: (\n        translations: Record<string, Record<string, string>>\n      ) => void;\n    }) => void | Promise<void>;\n    'config:setup': (options: {\n      config: StarlightUserConfig;\n      updateConfig: (newConfig: StarlightUserConfig) => void;\n      addIntegration: (integration: AstroIntegration) => void;\n      addRouteMiddleware: (config: { entrypoint: string; order?: 'pre' | 'post' | 'default' }) => void;\n      astroConfig: AstroConfig;\n      command: 'dev' | 'build' | 'preview';\n      isRestart: boolean;\n      logger: AstroIntegrationLogger;\n      useTranslations: (lang: string) => I18nT;\n      absolutePathToLang: (path: string) => string;\n    }) => void | Promise<void>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Logo for Starlight Navbar - JavaScript\nDESCRIPTION: Configures the navigation bar logo in Starlight using the 'logo' property. The example shows how to set an SVG file as the logo by specifying its local path. Dependencies include a local asset (SVG file) and the Starlight integration. The property supports both single and multiple themes (light/dark). Outputs a UI where the specified logo appears alongside or instead of the site title.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n\tlogo: {\n\t\tsrc: './src/assets/my-logo.svg',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing a Default Starlight Component with Named Slots\nDESCRIPTION: Illustrates how to reuse a default Starlight component (`TwoColumnContent.astro`) that utilizes named slots within a custom override (`CustomContent.astro`). It shows transferring both the default slot (`<slot />`) and a named slot (`<slot name=\"right-sidebar\" slot=\"right-sidebar\" />`) to the default component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/overriding-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/CustomContent.astro\nimport Default from '@astrojs/starlight/components/TwoColumnContent.astro';\n---\n\n<Default>\n\t<slot />\n\t<slot name=\"right-sidebar\" slot=\"right-sidebar\" />\n</Default>\n```\n\n----------------------------------------\n\nTITLE: Overriding Components in Starlight\nDESCRIPTION: This snippet demonstrates how to override Starlight's default components with custom implementations by providing the path to a custom component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tcomponents: {\n\t\tSocialLinks: './src/components/MySocialLinks.astro',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Sidebar for StarlightPage in Astro\nDESCRIPTION: Illustrates how to pass a custom site navigation structure to the `<StarlightPage>` component using the `sidebar` prop. This example defines a sidebar with a top-level link and a collapsible group containing other links, overriding the global sidebar configuration for this specific page. The `sidebar` prop expects an array of `SidebarItem` objects.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n<StarlightPage\n\tfrontmatter={{ title: 'Orion' }}\n\tsidebar={[\n\t\t{ label: 'Home', link: '/' },\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\titems: [\n\t\t\t\t{ label: 'Andromeda', link: '/andromeda/' },\n\t\t\t\t{ label: 'Orion', link: '/orion/' },\n\t\t\t\t{ label: 'Ursa Minor', link: '/ursa-minor/', badge: 'Stub' },\n\t\t\t],\n\t\t},\n\t]}\n>\n\tExample content.\n</StarlightPage>\n```\n\n----------------------------------------\n\nTITLE: Displaying Guidance Cards using Starlight Components (MDX)\nDESCRIPTION: Uses the imported `CardGrid` and `Card` components with JSX-like syntax within MDX to display a grid of informative cards under the 'Next steps' heading. Each `Card` component instance has a `title` and an `icon`, providing suggestions for users, such as editing content, adding new pages, configuring the site, and linking to the main Starlight documentation.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/src/content/docs/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<CardGrid stagger>\n\t<Card title=\"Update content\" icon=\"pencil\">\n\t\tEdit `src/content/docs/index.mdx` to see this page change.\n\t</Card>\n\t<Card title=\"Add new content\" icon=\"add-document\">\n\t\tAdd Markdown or MDX files to `src/content/docs` to create new pages.\n\t</Card>\n\t<Card title=\"Configure your site\" icon=\"setting\">\n\t\tEdit your `sidebar` and other config in `astro.config.mjs`.\n\t</Card>\n\t<Card title=\"Read the docs\" icon=\"open-book\">\n\t\tLearn more in [the Starlight Docs](https://starlight.astro.build/).\n\t</Card>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization for Badges in Starlight Sidebar\nDESCRIPTION: This code snippet shows how to implement internationalization for badges in Starlight sidebar. It demonstrates using an object with language-specific values for the badge text in multilingual sites.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\ttranslations: {\n\t\t\t\t'pt-BR': 'Constelações',\n\t\t\t},\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\tslug: 'constellations/andromeda',\n\t\t\t\t\tbadge: {\n\t\t\t\t\t\ttext: {\n\t\t\t\t\t\t\ten: 'New',\n\t\t\t\t\t\t\t'pt-BR': 'Novo',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing UI Translations in Astro Components\nDESCRIPTION: Example of using the translation function via Astro.locals.t to access UI strings and set text direction in Astro components.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<p dir={Astro.locals.t.dir()}>\n\t{Astro.locals.t('404.text')}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Localized Links with Astro.currentLocale\nDESCRIPTION: Example of using Astro.currentLocale with getRelativeLocaleUrl() to generate links to pages in the current language.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_8\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/AboutLink.astro\nimport { getRelativeLocaleUrl } from 'astro:i18n';\n---\n\n<a href={getRelativeLocaleUrl(Astro.currentLocale ?? 'en', 'about')}>About</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Starlight Route Data in Route Middleware (TypeScript)\nDESCRIPTION: Illustrates how to access the `starlightRoute` data within a Starlight route middleware function using TypeScript. It utilizes the `defineRouteMiddleware` helper and accesses the data via the `context.locals` object provided to the middleware.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/route-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// src/routeData.ts\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware((context) => {\n\tconst { hasSidebar } = context.locals.starlightRoute;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Translation File Structure in Starlight\nDESCRIPTION: Example JSON structure for custom translation files in Starlight, showing basic translation strings and one with interpolation capability.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"link.astro\": \"Astro documentation\",\n\t\"link.astro.custom\": \"Astro documentation for {{feature}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starlight Project Directory Structure\nDESCRIPTION: Illustrates the standard folder and file layout for a Starlight project initialized with Astro. Key directories include `src/content/docs` for Markdown/MDX documentation files, `src/assets` for images, `public` for static assets (like favicons), and configuration files like `astro.config.mjs`.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── public/\\n├── src/\\n│   ├── assets/\\n│   ├── content/\\n│   │   ├── docs/\\n│   └── content.config.ts\\n├── astro.config.mjs\\n├── package.json\\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Using Code Component with External Data in MDX\nDESCRIPTION: Demonstrates how to use the Code component to display code fetched from external sources, with options for language, title, and highlighting.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/code.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Code } from '@astrojs/starlight/components';\n\nexport const exampleCode = `console.log('This could come from a file or CMS!');`;\nexport const fileName = 'example.js';\nexport const highlights = ['file', 'CMS'];\n\n<Code code={exampleCode} lang=\"js\" title={fileName} mark={highlights} />\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Sidebar Label in Starlight (Markdown)\nDESCRIPTION: Shows how to set a custom display label for a page in an autogenerated sidebar group using the `sidebar.label` frontmatter field, overriding the default behavior which uses the page title.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: About this project\nsidebar:\n  label: About\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Using absolutePathToLang Function in Starlight Plugin (TypeScript)\nDESCRIPTION: Demonstrates how to use the absolutePathToLang function in a Starlight plugin to determine the language of a file based on its absolute path. The example then uses this language with useTranslations to log a translated message.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// plugin.ts\nexport default {\n  name: 'plugin-use-translations',\n  hooks: {\n    'config:setup'({ absolutePathToLang, useTranslations, logger }) {\n      const lang = absolutePathToLang(\n        '/absolute/path/to/project/src/content/docs/fr/index.mdx'\n      );\n      const t = useTranslations(lang);\n      logger.info(t('aside.tip'));\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in MDX\nDESCRIPTION: Demonstrates basic usage of Tabs and TabItem components to create a tabbed interface with labeled content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n\n<Tabs>\n\t<TabItem label=\"Stars\">Sirius, Vega, Betelgeuse</TabItem>\n\t<TabItem label=\"Moons\">Io, Europa, Ganymede</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Extending Starlight i18n Schema with Custom Keys in TypeScript\nDESCRIPTION: Demonstrates how to add custom translation keys to Starlight's default i18n schema using the `extend` option in `i18nSchema()` within `src/content/config.ts`, shown as a diff. This allows defining project-specific UI strings (like 'custom.label') managed through the standard i18n workflow, utilizing `zod` for schema definition.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\nimport { docsSchema, i18nSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n\tdocs: defineCollection({ schema: docsSchema() }),\n\ti18n: defineCollection({\n\t\ttype: 'data',\n\t\tschema: i18nSchema({\n+\t\t\textend: z.object({\n+\t\t\t\t'custom.label': z.string().optional(),\n+\t\t\t}),\n\t\t}),\n\t}),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization for Internal Links in Starlight\nDESCRIPTION: This snippet demonstrates how to configure internationalization for internal links in Starlight. It shows that internal links automatically use translated page titles from content frontmatter.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\ttranslations: {\n\t\t\t\t'pt-BR': 'Constelações',\n\t\t\t},\n\t\t\titems: [\n\t\t\t\t{ slug: 'constellations/andromeda' },\n\t\t\t\t{ slug: 'constellations/scorpius' },\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components for Starlight Docs Site (JavaScript)\nDESCRIPTION: This snippet imports required UI components for layout and testimonials on a Starlight documentation site using Astro. Dependencies include the '@astrojs/starlight/components' package for core UI blocks, as well as local custom .astro files for extended functionality. Essential for rendering the homepage cards grid, testimonial panels, and informational sections. No input parameters or outputs; usage depends on being in an Astro .mdx or .astro file's JavaScript context.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CardGrid, Card } from '@astrojs/starlight/components';\nimport AboutAstro from '~/components/about-astro.astro';\nimport TestimonialGrid from '~/components/testimonial-grid.astro';\nimport Testimonial from '~/components/testimonial.astro';\n```\n\n----------------------------------------\n\nTITLE: Reusing a Default Starlight Component within a Custom Override\nDESCRIPTION: Demonstrates importing and rendering a default Starlight component (`SocialIcons.astro`) inside a custom override component (`EmailLink.astro`). This allows adding custom elements (like the mailto link) alongside the default UI. It includes `<slot />` to ensure any passed children are rendered correctly within the default component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/overriding-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/EmailLink.astro\nimport Default from '@astrojs/starlight/components/SocialIcons.astro';\n---\n\n<a href=\"mailto:houston@example.com\">E-mail Me</a>\n<Default><slot /></Default>\n```\n\n----------------------------------------\n\nTITLE: Adding StarlightPage Component in TypeScript\nDESCRIPTION: Example showing usage of the new <StarlightPage> component, allowing use of Starlight's design in custom pages. This is a new feature added in version 0.19.0.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\ndd11b9538abdf4b5ba2ef70e07c0edda03e95add Thanks [@HiDeoo](https://github.com/HiDeoo)! - Adds a new `<StarlightPage>` component to use the Starlight layout in custom pages.\n\nTo learn more about this new feature, check out the new [\"Using Starlight's design in custom pages\" guide](https://starlight.astro.build/guides/pages/#using-starlights-design-in-custom-pages).\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogenerated Groups in Starlight Sidebar (JavaScript)\nDESCRIPTION: This code shows how to set up an autogenerated group in the Starlight sidebar based on a directory in the documentation, using the 'label' and 'autogenerate' properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constelaciones',\n\t\t\t// Un grupo de enlaces autogenerados para el directorio 'constellations'.\n\t\t\tautogenerate: { directory: 'constellations' },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with NPM\nDESCRIPTION: Command to create a new Astro project with Starlight template using NPM package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Defining Route Middleware in TypeScript\nDESCRIPTION: Shows how to create a new file exporting an onRequest function using Starlight's defineRouteMiddleware utility.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/route-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware(() => {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Links in Starlight Sidebar (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add internal links to the Starlight sidebar configuration using the 'slug' property. It defines links to pages within the 'src/content/docs/' directory.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{ slug: 'constellations/andromeda' },\n\t\t{ slug: 'constellations/orion' },\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FileTree Component in MDX\nDESCRIPTION: This example demonstrates how to use the FileTree component to display a directory structure in MDX format. It shows a simple file tree with nested directories and files.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- astro.config.mjs\n- package.json\n- src\n  - components\n    - Header.astro\n    - Title.astro\n  - pages/\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Integrating Fontsource CSS in Astro Configuration (JavaScript)\nDESCRIPTION: This JavaScript snippet updates the `astro.config.mjs` file to include specific CSS files provided by the installed Fontsource package (`@fontsource/ibm-plex-serif`). It adds paths to the CSS files for desired font weights (e.g., 400 and 600) to the `customCss` array in the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs With a Custom Typeface',\n\t\t\tcustomCss: [\n+\t\t\t\t// Fontsource files for to regular and semi-bold font weights.\n+\t\t\t\t'@fontsource/ibm-plex-serif/400.css',\n+\t\t\t\t'@fontsource/ibm-plex-serif/600.css',\n\t\t\t],\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Starlight Sidebar Links and Groups (JavaScript)\nDESCRIPTION: This code demonstrates how to add badges to links, groups, and autogenerated groups in the Starlight sidebar configuration using the 'badge' property.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Estrellas',\n\t\t\titems: [\n\t\t\t\t// Un enlace con una insignia \"Supergigante\".\n\t\t\t\t{\n\t\t\t\t\tslug: 'stars/persei',\n\t\t\t\t\tbadge: 'Supergigante',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t// Un grupo autogenerado con una insignia \"Obsoleto\".\n\t\t{\n\t\t\tlabel: 'Moons',\n\t\t\tbadge: 'Obsoleto',\n\t\t\tautogenerate: { directory: 'moons' },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the SidebarConfig Interface in Starlight (TypeScript)\nDESCRIPTION: Specifies the TypeScript interface `SidebarConfig` used to control how a page is displayed within an autogenerated sidebar group in Starlight. It defines properties for setting a custom label, controlling sort order, hiding the link, adding a badge, and applying custom HTML attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ninterface SidebarConfig {\n  label?: string;\n  order?: number;\n  hidden?: boolean;\n  badge?: string | BadgeConfig;\n  attrs?: Record<string, string | number | boolean | undefined>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Starlight Schema with Zod\nDESCRIPTION: Example showing how to extend Starlight's schema with additional required fields and enums using Zod\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/reference/frontmatter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\nimport { docsSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n  docs: defineCollection({\n    schema: docsSchema({\n      extend: z.object({\n        // Hacer un campo integrado requerido en lugar de opcional.\n        description: z.string(),\n        // Agrega un nuevo campo al esquema.\n        category: z.enum(['tutorial', 'guide', 'reference']).optional(),\n      }),\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components in TSX\nDESCRIPTION: Shows how to import the Tabs and TabItem components from Starlight's component library.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Initializing a Starlight Project using npm\nDESCRIPTION: Uses the `npm create astro` command with the specific `starlight` template to scaffold a new Astro project pre-configured with the Starlight documentation framework. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Customizing Autogenerated Links with Frontmatter (Markdown)\nDESCRIPTION: This snippet demonstrates how to customize autogenerated links in the Starlight sidebar using frontmatter in individual pages, including setting custom labels, badges, and ordering.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Mi página\nsidebar:\n  # Configura una etiqueta personalizada para el enlace\n  label: Etiqueta personalizada de la barra lateral\n  # Establece un orden personalizado para el enlace (los números más bajos se muestran más arriba)\n  order: 2\n  # Agrega una insignia al enlace\n  badge:\n    text: Nuevo\n    variant: tip\n---\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering a Starlight Override Component\nDESCRIPTION: Demonstrates using conditional rendering within a Starlight override component (`ConditionalFooter.astro`). It accesses the current route ID via `Astro.locals.starlightRoute.id` to check if the page is the homepage. If it is, a custom footer is rendered; otherwise, the default Starlight `Footer` component is imported and rendered, ensuring passed slots are included.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/overriding-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/ConditionalFooter.astro\nimport Default from '@astrojs/starlight/components/Footer.astro';\n\nconst isHomepage = Astro.locals.starlightRoute.id === '';\n---\n\n{\n\tisHomepage ? (\n\t\t<footer>Built with Starlight 🌟</footer>\n\t) : (\n\t\t<Default>\n\t\t\t<slot />\n\t\t</Default>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collapsible Groups in Starlight Sidebar\nDESCRIPTION: This snippet demonstrates how to create collapsible groups in the Starlight sidebar. It shows setting the 'collapsed' property to true to collapse a group by default.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\t// Collapse the group by default.\n\t\t\tcollapsed: true,\n\t\t\titems: ['constellations/andromeda', 'constellations/orion'],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronized Tabs in MDX\nDESCRIPTION: Shows how to create synchronized tab groups using the syncKey property to maintain tab selection across multiple instances.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n\n_Some stars:_\n\n<Tabs syncKey=\"constellations\">\n\t<TabItem label=\"Orion\">Bellatrix, Rigel, Betelgeuse</TabItem>\n\t<TabItem label=\"Gemini\">Pollux, Castor A, Castor B</TabItem>\n</Tabs>\n\n_Some exoplanets:_\n\n<Tabs syncKey=\"constellations\">\n\t<TabItem label=\"Orion\">HD 34445 b, Gliese 179 b, Wasp-82 b</TabItem>\n\t<TabItem label=\"Gemini\">Pollux b, HAT-P-24b, HD 50554 b</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using `defineRouteMiddleware` for Typed Starlight Middleware (TypeScript)\nDESCRIPTION: Demonstrates using the `defineRouteMiddleware` utility imported from `@astrojs/starlight/route-data` to define an `onRequest` middleware function. This helper ensures the `context` parameter is correctly typed for Starlight route middleware, enhancing type safety.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/route-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// src/routeData.ts\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware((context) => {\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Multilingual Title Configuration for Starlight - TypeScript\nDESCRIPTION: Shows how to set the 'title' option of Starlight as a language-to-title mapping for multilingual documentation sites. No external dependencies beyond Starlight itself are required. The code expects the 'title' property to be either a string or a record keyed by BCP-47 locale tags, with values as localized titles. Outputs a configuration where each supported locale displays a localized site title.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nstarlight({\n\ttitle: {\n\t\ten: 'My delightful docs site',\n\t\tde: 'Meine bezaubernde Dokumentationsseite',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Sidebar Groups and Links in Starlight (JavaScript)\nDESCRIPTION: Shows how to attach badges to links and groups in the sidebar configuration. Badge can be a string (simple label) or a detailed object with badge text and variant. Allows additional visual cues (e.g., 'Supergiant', 'Outdated') beside sidebar entries. Inputs include badge, slug, label, and autogenerate properties; outputs are sidebar links/groups with styled badge indicators. Requires Starlight. Limitation: badge only supported in groups/links, not arbitrary content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Stars',\n\t\t\titems: [\n\t\t\t\t// A link with a \"Supergiant\" badge.\n\t\t\t\t{\n\t\t\t\t\tslug: 'stars/persei',\n\t\t\t\t\tbadge: 'Supergiant',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t// An autogenerated group with an \"Outdated\" badge.\n\t\t{\n\t\t\tlabel: 'Moons',\n\t\t\tbadge: 'Outdated',\n\t\t\tautogenerate: { directory: 'moons' },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Customized Sidebar Badge in Starlight (Markdown)\nDESCRIPTION: Demonstrates how to add a customized badge to a page link in an autogenerated sidebar group using the `sidebar.badge` frontmatter field with an object. This allows specifying the `text` and `variant` (color style) of the badge.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page with a badge\nsidebar:\n  badge:\n    text: Experimental\n    variant: caution\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Head Tags in Starlight Configuration\nDESCRIPTION: This example shows how to add custom tags to the <head> of a Starlight site, specifically adding a Fathom analytics script with appropriate attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\thead: [\n\t\t// Example: add Fathom analytics script tag.\n\t\t{\n\t\t\ttag: 'script',\n\t\t\tattrs: {\n\t\t\t\tsrc: 'https://cdn.usefathom.com/script.js',\n\t\t\t\t'data-site': 'MY-FATHOM-ID',\n\t\t\t\tdefer: true,\n\t\t\t},\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Logger within the config:setup Hook in TypeScript\nDESCRIPTION: Shows a simple Starlight plugin example using the `config:setup` hook. It accesses the `logger` instance provided in the hook's options and calls its `info` method to log a message to the console during the build or dev process. Logged messages are automatically prefixed with the plugin's name.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// plugin.ts\nexport default {\n  name: 'long-process-plugin',\n  hooks: {\n    'config:setup'({ logger }) {\n      logger.info('Starting long process…');\n      // Some long process…\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Social Links Configuration\nDESCRIPTION: Setting up social media links in the site header using the social configuration option.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs With Social Links',\n\t\t\tsocial: [\n\t\t\t\t{ icon: 'discord', label: 'Discord', href: 'https://astro.build/chat' },\n\t\t\t\t{\n\t\t\t\t\ticon: 'github',\n\t\t\t\t\tlabel: 'GitHub',\n\t\t\t\t\thref: 'https://github.com/withastro/starlight',\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Starlight Route Data in Astro Components\nDESCRIPTION: Demonstrates how to access Starlight's route data object (`starlightRoute`) from `Astro.locals` within the frontmatter script of an Astro component. It specifically shows destructuring the `hasSidebar` property.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/route-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Custom.astro\n\nconst { hasSidebar } = Astro.locals.starlightRoute;\n---\n```\n\n----------------------------------------\n\nTITLE: Using `StarlightRouteData` Type for Utility Functions (TypeScript)\nDESCRIPTION: Shows how to import the `StarlightRouteData` type from `@astrojs/starlight/route-data` to type function parameters that interact with Starlight's route data. The example defines a utility function `usePageTitleInTOC` that modifies the table of contents based on the current page's title found in the route data.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/route-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// src/route-utils.ts\nimport type { StarlightRouteData } from '@astrojs/starlight/route-data';\n\nexport function usePageTitleInTOC(starlightRoute: StarlightRouteData) {\n\tconst overviewLink = starlightRoute.toc?.items[0];\n\tif (overviewLink) {\n\t\toverviewLink.text = starlightRoute.entry.data.title;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar with External and Non-Docs Links in Starlight (JavaScript)\nDESCRIPTION: Shows how to add links to non-documentation pages and external URLs in the Starlight sidebar configuration. Each link object must specify both label and link properties. Supports relative and absolute URLs. Key parameters are label (the sidebar text), and link (destination URL or path). Output is a sidebar with these additional or alternative links; input is the configuration object. Required dependency is Starlight.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t// A link to a non-docs page on this site.\n\t\t{ label: 'Meteor Store', link: '/shop/' },\n\t\t// An external link to the NASA website.\n\t\t{ label: 'NASA', link: 'https://www.nasa.gov/' },\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight DocSearch Plugin in Astro Config (JavaScript)\nDESCRIPTION: Illustrates how to configure the Starlight integration in `astro.config.mjs` to use the `@astrojs/starlight-docsearch` plugin. It requires providing the Algolia `appId`, `apiKey`, and `indexName` specific to your DocSearch setup.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js ins={4,10-16}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\nimport starlightDocSearch from '@astrojs/starlight-docsearch';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Site with DocSearch',\n\t\t\tplugins: [\n\t\t\t\tstarlightDocSearch({\n\t\t\t\t\tappId: 'YOUR_APP_ID',\n\t\t\t\t\tapiKey: 'YOUR_SEARCH_API_KEY',\n\t\t\t\t\tindexName: 'YOUR_INDEX_NAME',\n\t\t\t\t}),\n\t\t\t],\n\t\t}),\n\t],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the StarlightPage Component in Astro\nDESCRIPTION: Demonstrates the minimal usage of the `<StarlightPage>` component in an Astro file to apply Starlight's layout and styles. It wraps custom page content and requires the `frontmatter` prop, minimally needing a `title`. The component must be imported from `@astrojs/starlight/components/StarlightPage.astro`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';\n---\n\n<StarlightPage frontmatter={{ title: 'My custom page' }}>\n\t<!-- Custom page content -->\n</StarlightPage>\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading Anchor Link Support in Astro Starlight Markdoc (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to disable the default heading anchor link feature in the Starlight Markdoc preset by passing the headingLinks: false option in the Markdoc config. Requires Astro, the Starlight Markdoc preset, and the defineMarkdocConfig API. Inputs are user-defined configuration objects, output is an exportable Markdoc config for the Astro project. The snippet must be used within the project's configuration file (e.g., markdoc.config.js).\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/markdoc/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default defineMarkdocConfig({\n  // Disable the default heading anchor link support\n  extends: [starlightMarkdoc({ headingLinks: false })],\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Starlight Layout in a Custom Astro Page\nDESCRIPTION: Example of a custom Astro page (`.astro`) using the `<StarlightPage>` component to apply Starlight's layout and the `<AnchorHeading>` component for styled, linkable headings. It requires importing these components from `@astrojs/starlight/components`. The `frontmatter` prop on `<StarlightPage>` is used to pass page metadata like the title.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/pages/custom-page/example.astro\nimport StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';\nimport AnchorHeading from '@astrojs/starlight/components/AnchorHeading.astro';\nimport CustomComponent from './CustomComponent.astro';\n---\n\n<StarlightPage frontmatter={{ title: 'My custom page' }}>\n\t<p>This is a custom page with a custom component:</p>\n\t<CustomComponent />\n\n\t<AnchorHeading level=\"2\" id=\"learn-more\">Learn more</AnchorHeading>\n\t<p>\n\t\t<a href=\"https://starlight.astro.build/\">Read more in the Starlight docs</a>\n\t</p>\n</StarlightPage>\n```\n\n----------------------------------------\n\nTITLE: Injecting Translations with the i18n:setup Hook in TypeScript\nDESCRIPTION: Provides an example of a Starlight plugin implementing the `i18n:setup` hook. It demonstrates using the `injectTranslations` function provided in the hook's options to add custom translation strings for different locales (English and French) for use within the plugin or site UI.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// plugin.ts\nexport default {\n  name: 'plugin-with-translations',\n  hooks: {\n    'i18n:setup'({ injectTranslations }) {\n      injectTranslations({\n        en: {\n          'myPlugin.doThing': 'Do the thing',\n        },\n        fr: {\n          'myPlugin.doThing': 'Faire le truc',\n        },\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar with Shorthand Internal Links in Starlight (JavaScript)\nDESCRIPTION: Illustrates the shorthand syntax for internal sidebar links by providing the page slug as a string in the configuration array. Dependencies are the same as the main Starlight project, requiring matching slugs under src/content/docs/. This approach reduces verbosity while preserving the same functional behavior—each item in the array corresponds to a documentation page. Input is an array of strings, output is the sidebar navigation with labels derived from the page titles.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: ['constellations/andromeda', 'constellations/orion'],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced DocSearch Configuration File (TypeScript)\nDESCRIPTION: Demonstrates creating a separate TypeScript file (`src/config/docsearch.ts`) to define advanced Algolia DocSearch options, such as function-based configurations like `getMissingResultsUrl`. This file exports an object conforming to `DocSearchClientOptions`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// src/config/docsearch.ts\nimport type { DocSearchClientOptions } from '@astrojs/starlight-docsearch';\n\nexport default {\n\tappId: 'YOUR_APP_ID',\n\tapiKey: 'YOUR_SEARCH_API_KEY',\n\tindexName: 'YOUR_INDEX_NAME',\n\tgetMissingResultsUrl({ query }) {\n\t\treturn `https://github.com/algolia/docsearch/issues/new?title=${query}`;\n\t},\n\t// ...\n} satisfies DocSearchClientOptions;\n```\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Configuration for Starlight\nDESCRIPTION: Example CSS file showing how to customize Starlight's default styles by modifying CSS custom properties for content width and text size.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/css-and-tailwind.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* src/styles/custom.css */\n:root {\n\t--sl-content-width: 50rem;\n\t--sl-text-5xl: 3.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Testimonials with TestimonialGrid in Astro (JavaScript/JSX)\nDESCRIPTION: This snippet renders a collection of Testimonial components inside a TestimonialGrid on the Starlight homepage. Each testimonial displays a user's name, handle, citation URL, and their review. Dependencies: TestimonialGrid and Testimonial custom components must be imported and available. Inputs are the testimonial props (name, handle, cite) and testimonial text. Outputs a section highlighting community feedback, improving project credibility. Supports expandable testimonial count and flexible content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<TestimonialGrid title=\"What people are saying\">\n  <Testimonial\n    name=\"Rachel\"\n    handle=\"rachelnabors\"\n    cite=\"https://twitter.com/astrodotbuild/status/1724934718745915558\"\n  >\n    The Astro team have EVOLVED how docs can be done and you can get it all out of the box with their Starlight project.\n  </Testimonial>\n  <Testimonial\n    name=\"Flavio\"\n    handle=\"flaviocopes\"\n    cite=\"https://twitter.com/flaviocopes/status/1738237658717905108\"\n  >\n    Astro’s official starter kit Starlight is a truly incredible tool for building a documentation website\n  </Testimonial>\n  <Testimonial\n    name=\"Tomek\"\n    handle=\"sulco\"\n    cite=\"https://twitter.com/sulco/status/1735610348730802342\"\n  >\n    Starlight is our go-to example of a great DX: the speed, convenience, and\n    attention to details is inspiring. It takes care of the tech and the looks,\n    so you can focus on your content 👏\n\n    StackBlitz team absolutely loves it!\n\n  </Testimonial>\n  <Testimonial\n    name=\"Roberto\"\n    handle=\"RmeetsH\"\n    cite=\"https://twitter.com/RmeetsH/status/1735783992018760090\"\n  >\n    Starlight has been a game-changer for me, allowing me to focus on content creation.\n\n    Its intuitive design not only streamlines my workflow but also reduces onboarding time for open-source developers.\n\n  </Testimonial>\n  <Testimonial\n    name=\"Joel\"\n    handle=\"jhooks\"\n    cite=\"https://twitter.com/jhooks/status/1727405160547418405\"\n  >\n    Spent some more time with Starlight for the Course Builder docs and it’s been great so far. Lots of nice touches and can focus on writing in Markdown and not fiddling with the site.\n  </Testimonial>\n  <Testimonial\n    name=\"Rick\"\n    handle=\"rick_viscomi\"\n    cite=\"https://twitter.com/rick_viscomi/status/1665867447910510593\"\n  >\n    Started playing with Starlight. Gotta say I’m very impressed with the performance out of the box.\n\n    💯💯💯💯\n\n  </Testimonial>\n  <Testimonial\n    name=\"Nicolas\"\n    handle=\"beaussan\"\n    cite=\"https://twitter.com/beaussan/status/1735625189583466893\"\n  >\n    Starlight is the best way to get started with documentation, between the\n    power and speed of Astro, and the tooling from Starlight, it’s a match in\n    heaven.\n\n    It has been my go to for a while now, and I keep on loving it!\n\n  </Testimonial>\n  <Testimonial\n    name=\"Sylwia\"\n    handle=\"SylwiaVargas\"\n    cite=\"https://x.com/SylwiaVargas/status/1726556825741578286\"\n  >\n    I used Starlight in my last job and loved it. Great components, intuitive\n    design, and super-responsive community (whenever anyone needed something,\n    they’d ship it soonish or tell you a workaround). Very pleasant experience.\n  </Testimonial>\n  <Testimonial\n    name=\"Lou Cyx\"\n    handle=\"loucyx\"\n    cite=\"https://elk.zone/m.webtoo.ls/@loucyx@mastodon.social/111587380021362284\"\n  >\n    The docs on my monorepo site look better than ever thanks to Starlight. It’s extremely easy to use without losing all the power of Astro. Thank you for working on it!\n  </Testimonial>\n  <Testimonial\n    name=\"BowTiedWebReaper\"\n    handle=\"BowTiedWebReapr\"\n    cite=\"https://twitter.com/BowTiedWebReapr/status/1735633399501697517\"\n  >\n    Starlight is my go-to tool for documentation. It made it super easy to add docs to my existing Astro product website, vs needing a subdomain to use with another tool.\n  </Testimonial>\n  <Testimonial\n    name=\"Jeff\"\n    handle=\"J_Everhart383\"\n    cite=\"https://twitter.com/J_Everhart383/status/1691900590048292908\"\n  >\n    I’ve been rebuilding the WPEngine Atlas Platform docs. Trust me when I say Starlight has everything you need to make an A+ docs platform&nbsp;🙌\n  </Testimonial>\n  <Testimonial\n    name=\"Chloe\"\n    handle=\"solelychloe\"\n    cite=\"https://twitter.com/solelychloe/status/1695115277602628082\"\n  >\n    Give Starlight a try!\n\n    I use it for a few of my sites and it’s great.\n\n  </Testimonial>\n</TestimonialGrid>\n```\n\n----------------------------------------\n\nTITLE: Link Card Grid Implementation in MDX\nDESCRIPTION: Shows how to create a grid of LinkCard components using CardGrid.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkCard, CardGrid } from '@astrojs/starlight/components';\n\n<CardGrid>\n\t<LinkCard title=\"Authoring Markdown\" href=\"/guides/authoring-content/\" />\n\t<LinkCard title=\"Components\" href=\"/components/using-components/\" />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Using External DocSearch Configuration in Astro Config (JavaScript)\nDESCRIPTION: Shows how to modify the `astro.config.mjs` file to reference an external DocSearch configuration file (created in the previous step) using the `clientOptionsModule` property within the `starlightDocSearch` plugin options. This allows for more complex configurations.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js {11-13}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\nimport starlightDocSearch from '@astrojs/starlight-docsearch';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Site with DocSearch',\n\t\t\tplugins: [\n\t\t\t\tstarlightDocSearch({\n\t\t\t\t\tclientOptionsModule: './src/config/docsearch.ts',\n\t\t\t\t}),\n\t\t\t],\n\t\t}),\n\t],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Translating Sidebar Labels for Multilingual Sites - JavaScript\nDESCRIPTION: Provides a pattern for translating the sidebar navigation labels using the 'translations' property within each sidebar item. Supports multiple locales for documentation, enhancing accessibility for diverse users. Inputs include label definitions and translations per locale. Outputs a sidebar with locale-aware labels, supporting internationalization.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nsidebar: [\n  // An example sidebar with labels translated to Brazilian Portuguese.\n  {\n    label: 'Start Here',\n    translations: { 'pt-BR': 'Comece Aqui' },\n    items: [\n      {\n        label: 'Getting Started',\n        translations: { 'pt-BR': 'Introdução' },\n        link: '/getting-started',\n      },\n      {\n        label: 'Project Structure',\n        translations: { 'pt-BR': 'Estrutura de Projetos' },\n        link: '/structure',\n      },\n    ],\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Synced Tabs for Package Managers in Astro\nDESCRIPTION: Demonstrates a set of tabs using the `<Tabs>` component with `syncKey=\"pkg\"`. Selecting a tab (e.g., 'npm') in this set will synchronize the selection with other tab sets on the same page that also use `syncKey=\"pkg\"`. Each `<TabItem>` represents a different package manager command.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"pkg\">\n\t<TabItem label=\"npm\">npm command</TabItem>\n\t<TabItem label=\"pnpm\">pnpm command</TabItem>\n\t<TabItem label=\"yarn\">yarn command</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in MDX\nDESCRIPTION: Demonstrates basic usage of the Icon component with different name and label props.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/icons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Icon } from '@astrojs/starlight/components';\n\n<Icon name=\"star\" />\n<Icon name=\"starlight\" label=\"The Starlight logo\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Links in Starlight Sidebar (JavaScript)\nDESCRIPTION: This snippet illustrates how to create grouped links in the Starlight sidebar, including nested groups, using the 'label' and 'items' properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t// Un grupo de enlaces etiquetado \"Constelaciones\".\n\t\t{\n\t\t\tlabel: 'Constelaciones',\n\t\t\titems: [\n\t\t\t\t'constellations/carina',\n\t\t\t\t'constellations/centaurus',\n\t\t\t\t// Un grupo anidado de enlaces para constelaciones estacionales.\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Estacional',\n\t\t\t\t\titems: [\n\t\t\t\t\t\t'constellations/andromeda',\n\t\t\t\t\t\t'constellations/orion',\n\t\t\t\t\t\t'constellations/ursa-minor',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Sidebar Links in Starlight (Markdown)\nDESCRIPTION: Illustrates how to add custom HTML attributes to a page link within an autogenerated sidebar group using the `sidebar.attrs` frontmatter field. This example adds `target=\"_blank\"` to make the link open in a new tab.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page opening in a new tab\nsidebar:\n  # Opens the page in a new tab\n  attrs:\n    target: _blank\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Synchronized Tabs in Astro Starlight\nDESCRIPTION: This code snippet demonstrates the creation of a nested tab structure using Astro Starlight's `Tabs` and `TabItem` components. The outer tabs, synchronized with `syncKey=\"pkg\"`, allow selection between package managers (npm, pnpm, yarn). Within each package manager tab, a nested set of tabs, synchronized with `syncKey=\"os\"`, allows selection between operating systems (macOS, Windows, Linux). This setup ensures that the OS selection remains consistent when switching between package manager tabs.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs-nested.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"pkg\">\n\n    <TabItem label=\"npm\">\n\n    \tnpm content\n\n    \t<Tabs syncKey=\"os\">\n    \t\t<TabItem label=\"macos\">npm macOS</TabItem>\n    \t\t<TabItem label=\"windows\">npm Windows</TabItem>\n    \t\t<TabItem label=\"linux\">npm GNU/Linux</TabItem>\n    \t</Tabs>\n\n    </TabItem>\n\n    <TabItem label=\"pnpm\">\n\n    \t\tpnpm content\n\n    \t\t<Tabs syncKey=\"os\">\n    \t\t\t\t<TabItem label=\"macos\">pnpm macOS</TabItem>\n    \t\t\t\t<TabItem label=\"windows\">pnpm Windows</TabItem>\n    \t\t\t\t<TabItem label=\"linux\">pnpm GNU/Linux</TabItem>\n    \t\t\t</Tabs>\n\n    \t</TabItem>\n\n    <TabItem label=\"yarn\">\n\n    \t\tyarn content\n\n    \t\t<Tabs syncKey=\"os\">\n    \t\t\t\t<TabItem label=\"macos\">yarn macOS</TabItem>\n    \t\t\t\t<TabItem label=\"windows\">yarn Windows</TabItem>\n    \t\t\t\t<TabItem label=\"linux\">yarn GNU/Linux</TabItem>\n    \t\t\t</Tabs>\n\n    \t</TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: SidebarItem Type Definition - TypeScript\nDESCRIPTION: Defines the allowable structures for items in the sidebar configuration of Starlight. The 'SidebarItem' union type supports simple strings, various object forms for links, groups, autogenerated groups, badges, and translations. Intended for consumer use in TypeScript-aware editors for type safety when editing sidebar config. Inputs include all sidebar item configurations; outputs help ensure correctness during development.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ntype SidebarItem =\n\t| string\n\t| ({\n\t\t\ttranslations?: Record<string, string>;\n\t\t\tbadge?: string | BadgeConfig;\n\t  } & (\n\t\t\t| {\n\t\t\t\t\t// Link\n\t\t\t\t\tlink: string;\n\t\t\t\t\tlabel: string;\n\t\t\t\t\tattrs?: Record<string, string | number | boolean | undefined>;\n\t\t\t\t  }\n\t\t\t| {\n\t\t\t\t\t// Internal link\n\t\t\t\t\tslug: string;\n\t\t\t\t\tlabel?: string;\n\t\t\t\t\tattrs?: Record<string, string | number | boolean | undefined>;\n\t\t\t\t  }\n\t\t\t| {\n\t\t\t\t\t// Group of links\n\t\t\t\t\tlabel: string;\n\t\t\t\t\titems: SidebarItem[];\n\t\t\t\t\tcollapsed?: boolean;\n\t\t\t\t  }\n\t\t\t| {\n\t\t\t\t\t// Autogenerated link group\n\t\t\t\t\tlabel: string;\n\t\t\t\t\tautogenerate: { directory: string; collapsed?: boolean };\n\t\t\t\t\tcollapsed?: boolean;\n\t\t\t\t  }\n\t  ));\n```\n\n----------------------------------------\n\nTITLE: Importing Aside Component in TSX\nDESCRIPTION: Shows how to import the Aside component from Starlight components library.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/asides.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Route Middleware Handlers - JavaScript\nDESCRIPTION: This snippet configures Starlight to accept multiple middleware functions by specifying an array of middleware file paths in the routeMiddleware option. The example in astro.config.mjs sets up two middleware files to be run in sequence for each page. Dependencies include multiple middleware TypeScript files exporting middleware handlers. routeMiddleware takes an array of strings. This enables modular and ordered customization of route data, each file providing different enhancements or checks.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/route-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js {9}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My site with multiple middleware',\n\t\t\trouteMiddleware: ['./src/middleware-one.ts', './src/middleware-two.ts'],\n\t\t}),\n\t],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Expressive Code in Starlight\nDESCRIPTION: This example demonstrates how to customize code blocks by configuring the expressiveCode option, specifically adding rounded corners using styleOverrides.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\texpressiveCode: {\n\t\tstyleOverrides: { borderRadius: '0.5rem' },\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Links (JavaScript)\nDESCRIPTION: Illustrates how to set up edit links for documentation pages by specifying the base URL for editing in the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs Con Enlaces De Edición',\n\t\t\teditLink: {\n\t\t\t\tbaseUrl: 'https://github.com/withastro/starlight/edit/main/docs/',\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Root Locale in Starlight i18n using JavaScript\nDESCRIPTION: Explains how to configure a root locale in Starlight's `astro.config.mjs` to serve the primary language without a language prefix in the URL (e.g., `/about` instead of `/en/about`). This involves using the `root` key in the `locales` object, optionally setting `defaultLocale` to 'root', and ensuring the `lang` property is set for the root locale.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My Docs',\n\t\t\tdefaultLocale: 'root', // opzionale\n\t\t\tlocales: {\n\t\t\t\troot: {\n\t\t\t\t\tlabel: 'English',\n\t\t\t\t\tlang: 'en', // necessario per la lingua principale\n\t\t\t\t},\n\t\t\t\t'zh-cn': {\n\t\t\t\t\tlabel: '简体中文',\n\t\t\t\t\tlang: 'zh-CN',\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Astro Integrations via config:setup Hook in TypeScript\nDESCRIPTION: Illustrates a Starlight plugin using the `config:setup` hook to manage Astro integrations. The code checks if the Astro React integration is already included in the project's `astroConfig` and uses the `addIntegration` function to add it only if it's not already present, preventing duplicates. It requires the `@astrojs/react` package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// plugin.ts\nimport react from '@astrojs/react';\n\nexport default {\n  name: 'plugin-using-react',\n  hooks: {\n    'config:setup'({ addIntegration, astroConfig }) {\n      const isReactLoaded = astroConfig.integrations.find(\n        ({ name }) => name === '@astrojs/react'\n      );\n\n      // Only add the React integration if it's not already loaded.\n      if (!isReactLoaded) {\n        addIntegration(react());\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Astro Component for Starlight Override\nDESCRIPTION: Defines a simple Astro component `EmailLink.astro` that renders a mailto anchor tag. This component is intended to be used as a custom replacement for a default Starlight UI component, specifically demonstrated for the `SocialIcons` component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/overriding-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/EmailLink.astro\n\nconst email = 'houston@example.com';\n---\n\n<a href=`mailto:${email}`>E-mail Me</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Head Tags via Starlight Frontmatter (Markdown)\nDESCRIPTION: Demonstrates how to add custom tags to a page's `<head>` section using the `head` frontmatter field in Starlight. This example shows overriding the default `<title>` tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: About us\nhead:\n  # Use a custom <title> tag\n  - tag: title\n    content: Custom about title\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic UI String in Astro Component\nDESCRIPTION: Example of rendering a simple UI string translation in an Astro component using the t() function to access the translation by key.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n<a href=\"https://docs.astro.build/\">\n\t{Astro.locals.t('link.astro')}\n</a>\n<!-- Renders: <a href=\"...\">Astro documentation</a> -->\n```\n\n----------------------------------------\n\nTITLE: Overriding Collapse Behavior for Autogenerated Groups in Starlight\nDESCRIPTION: This snippet demonstrates how to override the collapse behavior for autogenerated groups in Starlight. It shows keeping the parent group expanded while collapsing its autogenerated subgroups.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Constellations',\n\t\t\t// Do not collapse the \"Constellations\" group but collapse its\n\t\t\t// autogenerated subgroups.\n\t\t\tcollapsed: false,\n\t\t\tautogenerate: { directory: 'constellations', collapsed: true },\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight and Custom Components - JavaScript/JSX\nDESCRIPTION: This snippet imports Badge and Icon components from the '@astrojs/starlight/components' package and a custom Test component from a local path, enabling their use within the page. Ensure '@astrojs/starlight' is installed for the imports to work, and that '../../components/Test.astro' exists within the project structure. These imports are prerequisites for subsequent component rendering in the file.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/whitespaces.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge, Icon } from '@astrojs/starlight/components';\nimport Test from '../../components/Test.astro';\n```\n\n----------------------------------------\n\nTITLE: Integrating Local Font CSS in Astro Configuration (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to update the `astro.config.mjs` file to include the custom CSS file containing `@font-face` declarations. The relative path to `font-face.css` is added to the `customCss` array within the Starlight integration options.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs With a Custom Typeface',\n\t\t\tcustomCss: [\n+\t\t\t\t// Relative path to your @font-face CSS file.\n+\t\t\t\t'./src/fonts/font-face.css',\n\t\t\t],\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Starlight Schema with Custom Fields in TypeScript\nDESCRIPTION: Example showing how to extend Starlight's schema with additional fields by setting the extend option in docsSchema(). This makes the description field required and adds an optional category field with enumerated values.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// src/content.config.ts\nimport { defineCollection, z } from 'astro:content';\nimport { docsLoader } from '@astrojs/starlight/loaders';\nimport { docsSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n  docs: defineCollection({\n    loader: docsLoader(),\n    schema: docsSchema({\n      extend: z.object({\n        // Make a built-in field required instead of optional.\n        description: z.string(),\n        // Add a new field to the schema.\n        category: z.enum(['tutorial', 'guide', 'reference']).optional(),\n      }),\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Basic LinkCard Usage in MDX\nDESCRIPTION: Demonstrates basic implementation of a LinkCard component with required title and href attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/link-cards.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\n\n<LinkCard\n\ttitle=\"Creación de contenido en Markdown\"\n\thref=\"/es/guides/authoring-content/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Excluding Page Sections from Pagefind Search Index (Markdown/HTML)\nDESCRIPTION: Shows how to exclude specific sections within a Markdown page from the Pagefind search index by wrapping the content in an HTML element (like a `<div>`) and adding the `data-pagefind-ignore` attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```md title=\"src/content/docs/partially-indexed.md\" ins=\"data-pagefind-ignore\"\n---\ntitle: Partially indexed page\n---\n\nThis text will be discoverable via search.\n\n<div data-pagefind-ignore>\n\nThis text will be hidden from search.\n\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Starlight Configuration with Locales (JavaScript)\nDESCRIPTION: Illustrates a Starlight configuration setup with multiple locales, including English as the default and French as an additional language. This configuration is used as context for the absolutePathToLang function example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n  title: 'My Docs',\n  defaultLocale: 'en',\n  locales: {\n    // English docs in `src/content/docs/en/`\n    en: { label: 'English' },\n    // French docs in `src/content/docs/fr/`\n    fr: { label: 'Français', lang: 'fr' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the AnchorHeading Component in Astro\nDESCRIPTION: Shows how to use the `<AnchorHeading>` component in a custom Astro page to render an HTML heading element (e.g., `<h2>`) with a clickable anchor link, styled consistently with Starlight's Markdown headings. It requires the `level` prop (heading level 1-6) and the `id` prop (unique identifier for the link). The component is imported from `@astrojs/starlight/components/AnchorHeading.astro`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport AnchorHeading from '@astrojs/starlight/components/AnchorHeading.astro';\n---\n\n<AnchorHeading level=\"2\" id=\"sub-heading\">Sub heading</AnchorHeading>\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Astro + Starlight + Tailwind - Plaintext\nDESCRIPTION: This code block outlines the default directory and file structure for a newly scaffolded Astro project using the Starlight and Tailwind starter template. It highlights where assets, content, source code, and configuration files reside. Users should follow this structure when customizing or extending the project. No dependencies are required—this serves as a reference. Input: n/a. Output: Visual guide to the expected folder/file layout.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/tailwind/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   └── content.config.ts\n├── astro.config.mjs\n├── package.json\n├── tailwind.config.mjs\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Setting Light/Dark Mode Hero Images in Starlight (Markdown)\nDESCRIPTION: Shows how to specify different images for the hero section in light and dark modes using the `dark` and `light` properties within the `hero.image` frontmatter configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\nhero:\n  image:\n    alt: A glittering, brightly colored logo\n    dark: ~/assets/logo-dark.png\n    light: ~/assets/logo-light.png\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text/Regex in JS (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for highlighting specific text strings and regular expressions in a JavaScript code block using quotation marks and forward slashes as markers.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_11\n\nLANGUAGE: md\nCODE:\n```\n````md\n```js \"Individual terms\" /Even.*supported/\n// Individual terms can be highlighted, too\nfunction demo() {\n\treturn 'Even regular expressions are supported';\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Accessing UI Translations in Astro Endpoints\nDESCRIPTION: Example of using the translation function in an Astro endpoint to return localized content via the context.locals object.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const GET = (context) => {\n\treturn new Response(context.locals.t('404.text'));\n};\n```\n\n----------------------------------------\n\nTITLE: Using Astro Image Helper with Starlight Schema in TypeScript\nDESCRIPTION: Example demonstrating how to take advantage of the Astro image() helper in Starlight's schema by using a function that returns a schema extension. This adds a 'cover' field that must resolve to a local image.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// src/content.config.ts\nimport { defineCollection, z } from 'astro:content';\nimport { docsLoader } from '@astrojs/starlight/loaders';\nimport { docsSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n  docs: defineCollection({\n    loader: docsLoader(),\n    schema: docsSchema({\n      extend: ({ image }) => {\n        return z.object({\n          // Add a field that must resolve to a local image.\n          cover: image(),\n        });\n      },\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Collection for UI Translations\nDESCRIPTION: This snippet shows how to configure the i18n collection in the content configuration file to enable UI string translations.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/i18n.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/content.config.ts\nimport { defineCollection } from 'astro:content';\nimport { docsLoader, i18nLoader } from '@astrojs/starlight/loaders';\nimport { docsSchema, i18nSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n\tdocs: defineCollection({ loader: docsLoader(), schema: docsSchema() }),\n+\ti18n: defineCollection({ loader: i18nLoader(), schema: i18nSchema() }),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Page Frontmatter in Markdown\nDESCRIPTION: Example showing how to set basic frontmatter metadata in a Markdown file using YAML syntax between triple dashes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My page title\n---\n\nPage content follows the second `---`.\n```\n\n----------------------------------------\n\nTITLE: Custom Title Aside Example in MDX\nDESCRIPTION: Demonstrates how to set a custom title for an aside component in MDX format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/asides.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n\n<Aside type=\"caution\" title=\"Watch out!\">\n\tA warning aside *with* a custom title.\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Adding Route Middleware via config:setup Hook in JavaScript\nDESCRIPTION: Demonstrates how a Starlight plugin written in JavaScript can add route middleware using the `config:setup` hook. It calls the `addRouteMiddleware` function, passing an object with the `entrypoint` property set to a module specifier (`@example/starlight-plugin/route-middleware`) that resolves to the middleware handler file.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n// plugin.ts\nexport default {\n  name: '@example/starlight-plugin',\n  hooks: {\n    'config:setup'({ addRouteMiddleware }) {\n      addRouteMiddleware({\n        entrypoint: '@example/starlight-plugin/route-middleware',\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Translating Page Title in Starlight Configuration\nDESCRIPTION: This snippet demonstrates how to provide translated page titles for different locales in the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/i18n.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n-\t\t\ttitle: 'My Docs',\n+\t\t\ttitle: {\n+\t\t\t\ten: 'My Docs',\n+\t\t\t\t'zh-CN': '我的文档',\n+\t\t\t},\n\t\t\tdefaultLocale: 'en',\n\t\t\tlocales: {\n\t\t\t\ten: { label: 'English' },\n\t\t\t\t'zh-cn': { label: '简体中文', lang: 'zh-CN' },\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Route Data Entry Title in Middleware - TypeScript\nDESCRIPTION: This snippet provides an example of a route middleware that mutates the route data's entry title on each page render. It accesses context.locals.starlightRoute, retrieves the entry, and appends an exclamation mark to entry.data.title. Requires @astrojs/starlight/route-data and the correct middleware setup. The entry parameter represents the current page data; the output is a modified in-memory route data object during the render process. Useful for dynamic title manipulation across the documentation site.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/route-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// src/routeData.ts\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware((context) => {\n\t// Get the content collection entry for this page.\n\tconst { entry } = context.locals.starlightRoute;\n\t// Update the title to add an exclamation mark.\n\tentry.data.title = entry.data.title + '!';\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Marking Inserted/Deleted Text in JavaScript using Expressive Code\nDESCRIPTION: Demonstrates marking specific text strings as inserted (`ins=\"inserted\"`) or deleted (`del=\"deleted\"`) alongside default highlighting (`\"return true;\"`) within a JavaScript code block using Expressive Code markers. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n```js \"return true;\" ins=\"inserted\" del=\"deleted\"\nfunction demo() {\n\tconsole.log('These are inserted and deleted marker types');\n\t// The return statement uses the default marker type\n\treturn true;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Data in a Starlight Override Component\nDESCRIPTION: Shows how a custom Starlight override component (`Title.astro`) can access data for the current page via `Astro.locals.starlightRoute`. This example retrieves the page title from the frontmatter (`entry.data.title`) and renders it within an `<h1>` tag, also applying custom CSS styling.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/overriding-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Title.astro\n\nconst { title } = Astro.locals.starlightRoute.entry.data;\n---\n\n<h1 id=\"_top\">{title}</h1>\n\n<style>\n\th1 {\n\t\tfont-family: 'Comic Sans';\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling for Sidebar Badges in Starlight (JavaScript)\nDESCRIPTION: Demonstrates advanced badge customization using the badge object with text, variant, and optional class properties. By setting variant, built-in styling (e.g., caution/yellow) can be enabled, and the class property can apply a custom CSS class for unique badge appearances. Inputs include badge details in configuration, output is a sidebar badge displayed with custom style next to the link. Requires remaining Starlight sidebar setup.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Stars',\n\t\t\titems: [\n\t\t\t\t// A link with a yellow \"Stub\" badge.\n\t\t\t\t{\n\t\t\t\t\tslug: 'stars/sirius',\n\t\t\t\t\tbadge: { text: 'Stub', variant: 'caution' },\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Example UI String Translations for Starlight\nDESCRIPTION: This JSON snippet provides examples of UI string translations for Starlight, including Expressive Code and Pagefind translations.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/i18n.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"expressiveCode.copyButtonCopied\": \"Copied!\",\n\t\"expressiveCode.copyButtonTooltip\": \"Copy to clipboard\",\n\t\"expressiveCode.terminalWindowFallbackTitle\": \"Terminal window\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"pagefind.clear_search\": \"Clear\",\n\t\"pagefind.load_more\": \"Load more results\",\n\t\"pagefind.search_label\": \"Search this site\",\n\t\"pagefind.filters_label\": \"Filters\",\n\t\"pagefind.zero_results\": \"No results for [SEARCH_TERM]\",\n\t\"pagefind.many_results\": \"[COUNT] results for [SEARCH_TERM]\",\n\t\"pagefind.one_result\": \"[COUNT] result for [SEARCH_TERM]\",\n\t\"pagefind.alt_search\": \"No results for [SEARCH_TERM]. Showing results for [DIFFERENT_TERM] instead\",\n\t\"pagefind.search_suggestion\": \"No results for [SEARCH_TERM]. Try one of the following searches:\",\n\t\"pagefind.searching\": \"Searching for [SEARCH_TERM]...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Entries in FileTree (MDX)\nDESCRIPTION: Shows how to highlight specific files or directories in the FileTree component using bold text in MDX.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- src\n  - components\n    - **Header.astro**\n    - Title.astro\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Custom Title Aside Example in Markdoc\nDESCRIPTION: Shows how to set a custom title for an aside using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/asides.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% aside type=\"caution\" title=\"Watch out!\" %}\nA warning aside *with* a custom title.\n{% /aside %}\n```\n\n----------------------------------------\n\nTITLE: Translating Pagefind Search UI Strings in Starlight using JSON\nDESCRIPTION: Provides an example of how to translate UI strings for the Pagefind search interface used by Starlight. These key-value pairs (e.g., `pagefind.search_label`), including placeholders like `[SEARCH_TERM]` and `[COUNT]`, are added to the locale-specific JSON file (e.g., `src/content/i18n/en.json`) to customize the search experience.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"pagefind.clear_search\": \"Clear\",\n\t\"pagefind.load_more\": \"Load more results\",\n\t\"pagefind.search_label\": \"Search this site\",\n\t\"pagefind.filters_label\": \"Filters\",\n\t\"pagefind.zero_results\": \"No results for [SEARCH_TERM]\",\n\t\"pagefind.many_results\": \"[COUNT] results for [SEARCH_TERM]\",\n\t\"pagefind.one_result\": \"[COUNT] result for [SEARCH_TERM]\",\n\t\"pagefind.alt_search\": \"No results for [SEARCH_TERM]. Showing results for [DIFFERENT_TERM] instead\",\n\t\"pagefind.search_suggestion\": \"No results for [SEARCH_TERM]. Try one of the following searches:\",\n\t\"pagefind.searching\": \"Searching for [SEARCH_TERM]...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Card Grid Implementation in MDX\nDESCRIPTION: Demonstrates how to group multiple Card components in a grid layout using CardGrid.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Card, CardGrid } from '@astrojs/starlight/components';\n\n<CardGrid>\n\t<Card title=\"Check this out\" icon=\"open-book\">\n\t\tInteresting content you want to highlight.\n\t</Card>\n\t<Card title=\"Other feature\" icon=\"information\">\n\t\tMore information you want to share.\n\t</Card>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Referencing Built-in Icons with StarlightIcon Type in TypeScript\nDESCRIPTION: Demonstrates how to import and utilize the StarlightIcon TypeScript type from @astrojs/starlight for referencing the names of built-in icons in a type-safe manner. This approach ensures that icon names are constrained to the valid set recognized by the Starlight framework. The getIconLabel function receives an icon identifier as a parameter of type StarlightIcon and processes it. The code requires the @astrojs/starlight package and assumes a working TypeScript environment.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { StarlightIcon } from '@astrojs/starlight/types';\n\nfunction getIconLabel(icon: StarlightIcon) {\n\t// …\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text and Using Regular Expressions in JavaScript\nDESCRIPTION: Demonstrates how to highlight specific text phrases and use regular expressions to match patterns in a JavaScript code block.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Auch einzelne Begriffe können hervorgehoben werden\nfunction demo() {\n\treturn 'Auch reguläre Ausdrücke (RegEx) werden unterstützt';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Schema with Image Helper\nDESCRIPTION: Example demonstrating how to extend the schema using Astro's image helper function\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/reference/frontmatter.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\nimport { docsSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n  docs: defineCollection({\n    schema: docsSchema({\n      extend: ({ image }) => {\n        return z.object({\n          // Agrega un campo que debe resolverse a una imagen local.\n          cover: image(),\n        });\n      },\n    }),\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Sitemap Generation\nDESCRIPTION: Configuration to enable sitemap generation by setting the site URL in the Astro config.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\n\nexport default defineConfig({\n\tsite: 'https://stargazers.club',\n\tintegrations: [starlight({ title: 'Site with sitemap' })],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Sitemap Generation (JavaScript)\nDESCRIPTION: Illustrates how to enable sitemap generation for a Starlight site by setting the site URL in the Astro configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\n\nexport default defineConfig({\n\tsite: 'https://stargazers.club',\n\tintegrations: [starlight({ title: 'Sitio con mapa del sitio' })],\n});\n```\n\n----------------------------------------\n\nTITLE: Using t.all() to Get All UI Strings\nDESCRIPTION: Example of using the t.all() function to retrieve all UI strings available for the current locale as an object.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\nconst allStrings = Astro.locals.t.all();\n//    ^\n//    {\n//      \"skipLink.label\": \"Skip to content\",\n//      \"search.label\": \"Search\",\n//      …\n//    }\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to FileTree Entries (MDX)\nDESCRIPTION: This snippet illustrates how to add comments to file or directory entries in the FileTree component using MDX. It also shows that inline Markdown formatting is supported in comments.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- src\n  - components\n    - Header.astro an **important** file\n    - Title.astro\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Updating Starlight Plugin Setup Hook to Config:Setup\nDESCRIPTION: Example of updating a Starlight plugin to use the new config:setup hook instead of the deprecated setup hook, following a breaking change in v0.32.0.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  name: 'plugin-with-translations',\n  hooks: {\n-   'setup'({ config }) {\n+   'config:setup'({ config }) {\n      // Your plugin configuration setup code\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Badge Variants in Markdoc\nDESCRIPTION: Shows the Markdoc syntax for creating badges with different variants.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n- {% badge text=\"Note\" variant=\"note\" /%}\n- {% badge text=\"Success\" variant=\"success\" /%}\n- {% badge text=\"Tip\" variant=\"tip\" /%}\n- {% badge text=\"Caution\" variant=\"caution\" /%}\n- {% badge text=\"Danger\" variant=\"danger\" /%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicon in Starlight\nDESCRIPTION: This code shows how to set a custom favicon path for a Starlight website, pointing to an image file in the public directory.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n  favicon: '/images/favicon.svg',\n}),\n```\n\n----------------------------------------\n\nTITLE: Structure of the `entry` Property in Starlight Route Data (TypeScript)\nDESCRIPTION: Provides a conceptual TypeScript representation of the `entry` property within the `starlightRoute` object. It highlights that `entry.data` contains frontmatter values (like `title`, `description`) from the Astro content collection entry for the current page.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/route-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nentry: {\n\tdata: {\n\t\ttitle: string;\n\t\tdescription: string | undefined;\n\t\t// etc.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Expressive Code UI Strings in Starlight using JSON\nDESCRIPTION: Provides an example of how to translate UI strings related to the Expressive Code library used by Starlight for code blocks. These key-value pairs (e.g., `expressiveCode.copyButtonCopied`) are added to the locale-specific JSON file (e.g., `src/content/i18n/en.json`) to customize interface elements like copy buttons.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"expressiveCode.copyButtonCopied\": \"Copied!\",\n\t\"expressiveCode.copyButtonTooltip\": \"Copy to clipboard\",\n\t\"expressiveCode.terminalWindowFallbackTitle\": \"Terminal window\"\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Insertions and Deletions in JavaScript\nDESCRIPTION: Example of how to mark text as inserted or deleted in a code block, using the ins and del markers to highlight additions and removals.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction demo() {\n\tconsole.log('Dies sind eingefügte und gelöschte Markertypen');\n\t// Die return-Anweisung verwendet den Standard-Markierungstyp\n\treturn true;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Utility Functions from Starlight Route Middleware (TypeScript)\nDESCRIPTION: Illustrates how to invoke a custom utility function (like `usePageTitleInTOC` from the previous example) within Starlight route middleware. It involves importing the function and passing the `context.locals.starlightRoute` object to it, allowing for modular modification of route data.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/route-data.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// src/route-middleware.ts\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\nimport { usePageTitleInTOC } from './route-utils';\n\nexport const onRequest = defineRouteMiddleware((context) => {\n\tusePageTitleInTOC(context.locals.starlightRoute);\n});\n```\n\n----------------------------------------\n\nTITLE: LocaleConfig Interface Definition - TypeScript\nDESCRIPTION: Provides the interface for configuring a locale in Starlight with required 'label' (locale name), and optional 'lang' (BCP-47 tag) and 'dir' (text direction). Used to ensure valid per-locale config in multilingual documentation. Input is a locale config object. Output: used for static type checking and IDE support.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ninterface LocaleConfig {\n\tlabel: string;\n\tlang?: string;\n\tdir?: 'ltr' | 'rtl';\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Last Updated Date in Starlight Frontmatter (Markdown)\nDESCRIPTION: Shows how to override the automatically determined last updated date for a page in Starlight. By setting the `lastUpdated` frontmatter field with a valid YAML timestamp, you can specify a custom date instead of using the Git history.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page with a custom last update date\nlastUpdated: 2022-08-09\n---\n```\n```\n\n----------------------------------------\n\nTITLE: BadgeConfig Interface Definition - TypeScript\nDESCRIPTION: Specifies the allowed structure for the 'badge' option on sidebar items, including 'text', 'variant', and an optional 'class' for custom styling. Used for adding contextual badges like 'note', 'tip', or 'danger' to navigation items. Input is a badge config object. Output is a badge in the UI sidebar for enhanced visual cues.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ninterface BadgeConfig {\n\ttext: string;\n\tvariant?: 'note' | 'tip' | 'caution' | 'danger' | 'success' | 'default';\n\tclass?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logo Variants for Light/Dark Mode\nDESCRIPTION: Setting up different logo variants for light and dark themes in Starlight using the logo.light and logo.dark options.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n  title: 'Docs With My Logo',\n  logo: {\n    light: './src/assets/light-logo.svg',\n    dark: './src/assets/dark-logo.svg',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Synced Tabs for Styling Options in Astro\nDESCRIPTION: Illustrates synchronized tabs using `syncKey=\"style\"`. This could be used to switch between related code examples, such as CSS and Tailwind implementations. Selecting 'css' or 'tailwind' synchronizes with other 'style' keyed tabs.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"style\">\n\t<TabItem label=\"css\">css code</TabItem>\n\t<TabItem label=\"tailwind\">tailwind code</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Badge Size Configuration in MDX\nDESCRIPTION: Demonstrates how to use different badge sizes using the size prop.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Badge } from '@astrojs/starlight/components';\n\n- <Badge text=\"New\" size=\"small\" />\n- <Badge text=\"New and improved\" size=\"medium\" />\n- <Badge text=\"New, improved, and bigger\" size=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Importing FileTree Component in TSX\nDESCRIPTION: Demonstrates how to import the FileTree component from the Starlight components package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font Selectively in Starlight using CSS\nDESCRIPTION: This CSS snippet shows how to apply a custom font ('IBM Plex Serif') only to the main content area (`<main>` element) of a Starlight site, leaving other areas like sidebars with the default font. This provides more targeted font styling.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n/* src/styles/custom.css */\n\nmain {\n\tfont-family: 'IBM Plex Serif', serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Control Headers for Optimized Caching\nDESCRIPTION: Example of the recommended Cache-Control HTTP header configuration for static assets in Starlight projects. This header setup allows browsers to cache bundled assets for long periods, reducing unnecessary downloads and improving environmental impact.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/environmental-impact.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCache-Control: public, max-age=604800, immutable\n```\n\n----------------------------------------\n\nTITLE: Checking if Translation Keys Exist with t.exists()\nDESCRIPTION: Example of using t.exists() to check if a translation key exists for the current locale or a specified locale like French.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\nconst keyExistsInCurrentLocale = Astro.locals.t.exists('a.key');\n//    ^ true\nconst keyExistsInFrench = Astro.locals.t.exists('another.key', { lng: 'fr' });\n//    ^ false\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Expressive Code in Starlight\nDESCRIPTION: This snippet shows how to completely disable the Expressive Code feature for code blocks in Starlight by setting the expressiveCode option to false.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\texpressiveCode: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Markdown Heading Anchor Links in Starlight - JavaScript\nDESCRIPTION: Configures Starlight to disable the automatic rendering of anchor links beside Markdown and MDX headings. The configuration uses the 'headingLinks' option under a 'markdown' object in the Starlight settings. Inputs include the project title and options for Markdown processing. Outputs are used by Starlight during site generation. This requires the Starlight integration and is passed to the Astro build system.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nstarlight({\n  title: 'My docs',\n  markdown: {\n    headingLinks: false,\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Sidebar Badge in Starlight (Markdown)\nDESCRIPTION: Shows how to add a simple text badge next to a page link in an autogenerated sidebar group using the `sidebar.badge` frontmatter field with a string value. This uses the default accent color.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page with a badge\nsidebar:\n  # Uses the default variant matching your site’s accent color\n  badge: New\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents Heading Levels in Starlight (Markdown)\nDESCRIPTION: Shows how to customize the table of contents for a specific page using the `tableOfContents` frontmatter field in Starlight. This example configures the ToC to only include H2 headings.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page with only H2s in the table of contents\ntableOfContents:\n  minHeadingLevel: 2\n  maxHeadingLevel: 2\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Using Code Component with Markdoc Syntax\nDESCRIPTION: Shows how to use the Code component with Markdoc syntax, including code, language, title, and meta information for highlighting.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/code.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% code\n   code=\"console.log('This could come from a file or CMS!');\"\n   lang=\"js\"\n   title=\"example.js\"\n   meta=\"'file' 'CMS'\" /%}\n```\n\n----------------------------------------\n\nTITLE: Controlling Sidebar Sort Order in Starlight (Markdown)\nDESCRIPTION: Illustrates how to control the position of a page within an autogenerated sidebar group by setting the `sidebar.order` frontmatter field. Lower numbers appear higher in the list.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page to display first\nsidebar:\n  order: 1\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Typing Starlight Plugin Hook Parameters in TypeScript\nDESCRIPTION: Shows how to use the `HookParameters` utility type from `@astrojs/starlight/types` to correctly infer and apply the type definition for the `options` parameter passed to a specific plugin hook, such as `config:setup`. This ensures type safety when accessing hook arguments.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { HookParameters } from '@astrojs/starlight/types';\n\nfunction configSetup(options: HookParameters['config:setup']) {\n  options.useTranslations('en');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FileTree Component in Starlight\nDESCRIPTION: This snippet shows how to import the FileTree component from the Starlight components library.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Installs all the necessary project dependencies listed in the `package.json` file. This command should be run from the root of the project directory after creating or cloning the project.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Excluding a Page from Pagefind Search Index (Markdown)\nDESCRIPTION: Demonstrates how to prevent an entire Markdown page from being indexed by the default Pagefind search engine by adding the `pagefind: false` property to the page's frontmatter.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md title=\"src/content/docs/not-indexed.md\" ins={3}\n---\ntitle: Content to hide from search\npagefind: false\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Netlify Caching Headers for Starlight Projects\nDESCRIPTION: Example of configuring custom caching headers for Netlify deployments using a _headers file. This configuration applies long-term caching to static assets in the _astro directory to reduce redundant downloads.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/environmental-impact.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/_astro/*\n  Cache-Control: public\n  Cache-Control: max-age=604800\n  Cache-Control: immutable\n```\n\n----------------------------------------\n\nTITLE: Marking a Page as Draft in Starlight (Markdown)\nDESCRIPTION: Demonstrates how to mark a page as a draft, excluding it from production builds, by setting the `draft` frontmatter field to `true`. Draft pages are only visible during development.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\n# Exclude this page from production builds\ndraft: true\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Splash Page Template Configuration\nDESCRIPTION: Frontmatter configuration for using the splash page template layout.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n---\n# src/content/docs/index.md\n\ntitle: My Landing Page\ntemplate: splash\n---\n```\n\n----------------------------------------\n\nTITLE: Basic LinkCard Usage in MDX\nDESCRIPTION: Demonstrates basic implementation of the LinkCard component with required title and href props.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-cards.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\n\n<LinkCard title=\"Authoring Markdown\" href=\"/guides/authoring-content/\" />\n```\n\n----------------------------------------\n\nTITLE: Inferring Translation Types from Source File in TypeScript\nDESCRIPTION: Demonstrates a method in a TypeScript declaration file (`env.d.ts`) to infer the types for the `StarlightApp.I18n` interface automatically. It uses `typeof import('./ui-strings').UIStrings.en` to derive the types directly from the keys of the English strings defined in the `ui-strings.ts` source file, reducing manual type definition.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ndeclare namespace StarlightApp {\n  type UIStrings = typeof import('./ui-strings').UIStrings.en;\n  interface I18n extends UIStrings {}\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Internal Links in Starlight Sidebar (JavaScript)\nDESCRIPTION: This snippet shows a shorthand way to specify internal links in the Starlight sidebar configuration by directly providing the page slugs as strings.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: ['constellations/andromeda', 'constellations/orion'],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling the Next Page Link in Starlight (Markdown)\nDESCRIPTION: Illustrates how to hide the pagination link to the next page by setting the `next` frontmatter field to `false`. This works similarly to the `prev` field.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\n# Hide the next page link\nnext: false\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Enhanced LinkCard with Description in MDX\nDESCRIPTION: Examples showing how to add an optional description to the LinkCard component in MDX format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-cards.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\n\n<LinkCard\n\ttitle=\"Internationalization\"\n\thref=\"/guides/i18n/\"\n\tdescription=\"Configure Starlight to support multiple languages.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight UI Components in Astro/MDX\nDESCRIPTION: This snippet imports the `CardGrid` and `LinkCard` components from the `@astrojs/starlight/components` module. These components are used later in the file to display lists of links in a visually appealing grid format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/community-content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport { CardGrid, LinkCard } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Synced Package Manager Tabs in Astro\nDESCRIPTION: Another example of synchronized tabs using `syncKey=\"pkg\"`. This set includes tabs for 'npm', 'pnpm', 'bun', and 'yarn', displaying different command examples. Selection is synced with other 'pkg' keyed tabs.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"pkg\">\n\t<TabItem label=\"npm\">another npm command</TabItem>\n\t<TabItem label=\"pnpm\">another pnpm command</TabItem>\n\t<TabItem label=\"bun\">another bun command</TabItem>\n\t<TabItem label=\"yarn\">another yarn command</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Heading Links in Starlight\nDESCRIPTION: This code snippet shows how to disable Starlight's clickable heading anchor links by setting the headingLinks option to false in the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tmarkdown: {\n\t\t// Disable Starlight's clickable heading anchor links.\n\t\theadingLinks: false,\n\t},\n}),\n```\n\n----------------------------------------\n\nTITLE: Basic FileTree Usage in Markdoc\nDESCRIPTION: Demonstrates the equivalent Markdoc syntax for displaying a basic directory structure using the FileTree component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- astro.config.mjs\n- package.json\n- src\n  - components\n    - Header.astro\n    - Title.astro\n  - pages/\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Defining Local Font with @font-face in CSS\nDESCRIPTION: This CSS snippet demonstrates how to define a custom font using the `@font-face` rule. It specifies the font family name, the path to the local font file (`.woff2` format), and properties like weight, style, and display behavior. This file should be placed in `src/fonts/font-face.css`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* src/fonts/font-face.css */\n\n@font-face {\n\tfont-family: 'Custom Font';\n\t/* Use a relative path to the local font file in `url()`. */\n\tsrc: url('./CustomFont.woff2') format('woff2');\n\tfont-weight: normal;\n\tfont-style: normal;\n\tfont-display: swap;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Synced Tabs for Operating Systems in Astro\nDESCRIPTION: Shows synchronized tabs using `syncKey=\"os\"`. This set represents different operating systems: macOS, Windows, and GNU/Linux. Selecting an OS tab synchronizes the selection with other 'os' keyed tab sets on the page.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"os\">\n\t<TabItem label=\"macos\">macOS</TabItem>\n\t<TabItem label=\"windows\">Windows</TabItem>\n\t<TabItem label=\"linux\">GNU/Linux</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components in Astro Starlight\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the `@astrojs/starlight/components` package. This makes the components available for use within the Astro or MDX file to create tabbed interfaces.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tabs in Astro Starlight\nDESCRIPTION: Shows a simple implementation of the `<Tabs>` component without a `syncKey` prop. Each `<TabItem>` displays basic text content ('tab 1', 'tab 2', 'tab 3') under its respective labeled tab ('one', 'two', 'three'). The selection state of these tabs is independent.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs>\n\t<TabItem label=\"one\">tab 1</TabItem>\n\t<TabItem label=\"two\">tab 2</TabItem>\n\t<TabItem label=\"three\">tab 3</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic LinkButton Usage in Markdoc\nDESCRIPTION: Shows how to implement LinkButton components using Markdoc syntax with different variants.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-buttons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% linkbutton href=\"/getting-started/\" %}Get started{% /linkbutton %}\n\n{% linkbutton href=\"/reference/configuration/\" variant=\"secondary\" %}\nConfiguration Reference\n{% /linkbutton %}\n```\n\n----------------------------------------\n\nTITLE: Basic LinkCard Usage in Markdoc\nDESCRIPTION: Shows how to implement the LinkCard component using Markdoc syntax with required properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-cards.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% linkcard title=\"Authoring Markdown\" href=\"/guides/authoring-content/\" /%}\n```\n\n----------------------------------------\n\nTITLE: Example File Structure for Starlight Content Pages (Text)\nDESCRIPTION: Illustrates the placement of Markdown files within `src/content/docs/` to generate corresponding page routes like `/hello-world` and `/reference/faq` in a Starlight project. Sub-folders create nested URL paths.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- src/\n  - content/\n    - docs/\n      - hello-world.md\n      - reference/\n        - faq.md\n```\n\n----------------------------------------\n\nTITLE: LinkButton with Icon in MDX\nDESCRIPTION: Example of using LinkButton with custom icon and icon placement properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-buttons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkButton } from '@astrojs/starlight/components';\n\n<LinkButton\n\thref=\"https://docs.astro.build\"\n\tvariant=\"secondary\"\n\ticon=\"external\"\n\ticonPlacement=\"start\"\n>\n\tRelated: Astro\n</LinkButton>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in JavaScript Code Blocks\nDESCRIPTION: Example of how to highlight specific lines in a JavaScript code block using curly braces syntax. This highlights lines 2 and 3 in the code snippet.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction demo() {\n\t// Diese Zeile (#2) und die nächste Zeile sind hervorgehoben\n\treturn 'Dies ist Zeile #3 dieses Ausschnittes';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight Markdoc Preset with Yarn\nDESCRIPTION: Command to install the Starlight Markdoc preset package using Yarn package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @astrojs/starlight-markdoc\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Starlight Docs Schema in TypeScript\nDESCRIPTION: Basic configuration for setting up Starlight's docs content collection using the docsSchema() helper in src/content.config.ts.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/content.config.ts\nimport { defineCollection } from 'astro:content';\nimport { docsLoader, i18nLoader } from '@astrojs/starlight/loaders';\nimport { docsSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n  docs: defineCollection({ loader: docsLoader(), schema: docsSchema() }),\n};\n```\n\n----------------------------------------\n\nTITLE: Synchronized Tabs in Markdoc\nDESCRIPTION: Demonstrates synchronized tab groups implementation using Markdoc syntax with the syncKey attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n_Some stars:_\n\n{% tabs syncKey=\"constellations\" %}\n{% tabitem label=\"Orion\" %}\nBellatrix, Rigel, Betelgeuse\n{% /tabitem %}\n\n{% tabitem label=\"Gemini\" %}\nPollux, Castor A, Castor B\n{% /tabitem %}\n{% /tabs %}\n\n_Some exoplanets:_\n\n{% tabs syncKey=\"constellations\" %}\n{% tabitem label=\"Orion\" %}\nHD 34445 b, Gliese 179 b, Wasp-82 b\n{% /tabitem %}\n\n{% tabitem label=\"Gemini\" %}\nPollux b, HAT-P-24b, HD 50554 b\n{% /tabitem %}\n{% /tabs %}\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components in Astro\nDESCRIPTION: This snippet imports the necessary `Tabs` and `TabItem` components from the '@astrojs/starlight/components' library to enable tab functionality within an Astro or MDX file.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs-unsynced.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: LogoConfig Type Definition - TypeScript\nDESCRIPTION: Defines the TypeScript type for the expected structure of the 'logo' property in Starlight config. This union type allows either a single-src logo or separate 'light' and 'dark' logos, along with optional 'alt' text and a 'replacesTitle' boolean. Inputs are logo asset paths and optional flags; intended for static type checking, not runtime use.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype LogoConfig = { alt?: string; replacesTitle?: boolean } & (\n\t| { src: string }\n\t| { light: string; dark: string }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Titles for Asides in MDX\nDESCRIPTION: This snippet demonstrates how to override the default title of an Aside component by using the title attribute. This allows for more specific context in admonitions.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/asides.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n\n<Aside type=\"caution\" title=\"¡Cuidado!\">\n\tUna advertencia *con* un título personalizado.\n</Aside>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Frontmatter in Markdown\nDESCRIPTION: This YAML block embedded within a Markdown file defines metadata for the page. The `title` key sets the displayed title ('Example Guide'), and the `description` key provides a brief summary ('A guide in my new Starlight docs site.') for SEO or previews. This is a common pattern in static site generators and documentation tools like Starlight.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/src/content/docs/guides/example.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Example Guide\ndescription: A guide in my new Starlight docs site.\n---\n```\n\n----------------------------------------\n\nTITLE: Staggered Card Grid in MDX\nDESCRIPTION: Shows how to create a staggered grid layout using the stagger prop on CardGrid.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Card, CardGrid } from '@astrojs/starlight/components';\n\n<CardGrid stagger>\n\t<Card title=\"Check this out\" icon=\"open-book\">\n\t\tInteresting content you want to highlight.\n\t</Card>\n\t<Card title=\"Other feature\" icon=\"information\">\n\t\tMore information you want to share.\n\t</Card>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Line Highlighting\nDESCRIPTION: Example of how to write the Markdown syntax to highlight specific lines in a code block. Shows the raw Markdown needed to create a JavaScript block with highlighted lines.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```js {2-3}\nfunction demo() {\n\t// Diese Zeile (#2) und die nächste Zeile sind hervorgehoben\n\treturn 'Dies ist Zeile #3 dieses Ausschnittes';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in Markdoc\nDESCRIPTION: Shows how to create tabbed interfaces using Markdoc syntax with equivalent functionality to the MDX version.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% tabs %}\n{% tabitem label=\"Stars\" %}\nSirius, Vega, Betelgeuse\n{% /tabitem %}\n\n{% tabitem label=\"Moons\" %}\nIo, Europa, Ganymede\n{% /tabitem %}\n{% /tabs %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Badge Component within Test Block - Astro/JSX\nDESCRIPTION: This snippet demonstrates rendering a Starlight Badge component, with text 'Note' and variant 'note', inside a Test component for display. The 'id' prop passed to Test facilitates identification or testing. The Badge's 'text' and 'variant' props control its label and style. Inputs include the desired badge text and variant; output is a styled badge UI element within the Test container. The code assumes these components are properly imported and available.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/whitespaces.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Test id=\"badge\">\n\tBadge (<Badge text=\"Note\" variant=\"note\" />)\n</Test>\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Types for Plugin Translations in TypeScript\nDESCRIPTION: Illustrates how to define global TypeScript namespaces (`App.Locals` and `StarlightApp.I18n`) in a declaration file (`env.d.ts`). This allows TypeScript to recognize and type-check custom translation strings injected by the plugin, improving developer experience and type safety when using `Astro.locals.t`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// env.d.ts\ndeclare namespace App {\n  type StarlightLocals = import('@astrojs/starlight').StarlightLocals;\n  // Define the `locals.t` object in the context of a plugin.\n  interface Locals extends StarlightLocals {}\n}\n\ndeclare namespace StarlightApp {\n  // Define the additional plugin translations in the `I18n` interface.\n  interface I18n {\n    'myPlugin.doThing': string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Components in Markdoc with Starlight\nDESCRIPTION: Shows how to use Starlight's built-in components in Markdoc files using the tag syntax, without requiring imports.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/using-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdoc\nCODE:\n```\n---\n# src/content/docs/example.mdoc\ntitle: Welcome to my docs\n---\n\n{% card title=\"Stars\" icon=\"star\" %}\nSirius, Vega, Betelgeuse\n{% /card %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Heading Links in Markdoc Configuration\nDESCRIPTION: JavaScript configuration demonstrating how to disable the default heading anchor link support in Starlight Markdoc by setting the headingLinks option to false.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_39\n\nLANGUAGE: js\nCODE:\n```\nexport default defineMarkdocConfig({\n\t// Disable the default heading anchor link support\n\textends: [starlightMarkdoc({ headingLinks: false })],\n});\n```\n\n----------------------------------------\n\nTITLE: Tabs with Icons in MDX\nDESCRIPTION: Shows how to add icons to tab labels using Starlight's built-in icon system.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n\n<Tabs>\n\t<TabItem label=\"Stars\" icon=\"star\">\n\t\tSirius, Vega, Betelgeuse\n\t</TabItem>\n\t<TabItem label=\"Moons\" icon=\"moon\">\n\t\tIo, Europa, Ganymede\n\t</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FileTree Component in Markdoc\nDESCRIPTION: This example shows how to use the FileTree component to display a directory structure in Markdoc format. It presents the same file tree structure as the MDX example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- astro.config.mjs\n- package.json\n- src\n  - components\n    - Header.astro\n    - Title.astro\n  - pages/\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Favicon Formats in Starlight\nDESCRIPTION: This example demonstrates how to set a primary favicon while also adding additional favicon variants using the head option for better browser compatibility.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tfavicon: '/images/favicon.svg',\n\thead: [\n\t\t// Add ICO favicon fallback for Safari.\n\t\t{\n\t\t\ttag: 'link',\n\t\t\tattrs: {\n\t\t\t\trel: 'icon',\n\t\t\t\thref: '/images/favicon.ico',\n\t\t\t\tsizes: '32x32',\n\t\t\t},\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Example File Structure Mixing Content and Custom Pages (Text)\nDESCRIPTION: Shows a project structure combining Markdown content pages in `src/content/docs/` with custom Astro (`.astro`) and HTML (`.html`) pages located in the `src/pages/` directory, leveraging Astro's file-based routing for advanced use cases.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/pages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- src/\n  - content/\n    - docs/\n      - hello-world.md\n  - pages/\n    - custom.astro\n    - archived.html\n```\n\n----------------------------------------\n\nTITLE: Highlighting Entries in FileTree Component (MDX)\nDESCRIPTION: This snippet demonstrates how to highlight a specific entry in the FileTree component using bold formatting in MDX.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- src\n  - components\n    - **Header.astro**\n    - Title.astro\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Basic Starlight Schema Configuration\nDESCRIPTION: Basic setup for configuring Starlight's docs collection schema using docsSchema helper\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/reference/frontmatter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/content/config.ts\nimport { defineCollection } from 'astro:content';\nimport { docsSchema } from '@astrojs/starlight/schema';\n\nexport const collections = {\n  docs: defineCollection({ schema: docsSchema() }),\n};\n```\n\n----------------------------------------\n\nTITLE: Example Output from Starlight Plugin Logger in Shell\nDESCRIPTION: Provides an example of the console output generated when a Starlight plugin uses the provided logger. The output message (`Starting long process…`) is automatically prefixed with the plugin's name enclosed in square brackets (`[long-process-plugin]`).\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n[long-process-plugin] Starting long process…\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in Markdoc\nDESCRIPTION: Shows how to use icons in Markdoc syntax with name and label attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/icons.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% icon name=\"star\" /%}\n{% icon name=\"starlight\" label=\"The Starlight logo\" /%}\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage with Variants in MDX\nDESCRIPTION: Demonstrates how to use the Badge component with different variants including note, success, tip, caution, and danger.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Badge } from '@astrojs/starlight/components';\n\n- <Badge text=\"Note\" variant=\"note\" />\n- <Badge text=\"Success\" variant=\"success\" />\n- <Badge text=\"Tip\" variant=\"tip\" />\n- <Badge text=\"Caution\" variant=\"caution\" />\n- <Badge text=\"Danger\" variant=\"danger\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Route Middleware Using defineRouteMiddleware - TypeScript\nDESCRIPTION: This snippet illustrates setting up a basic route middleware file in TypeScript for Starlight. It imports the defineRouteMiddleware utility, and exports an onRequest function using it, ready for extension to modify route data. The only prerequisite is @astrojs/starlight as a dependency. There are no inputs as the function does nothing yet, but this is foundational for all Starlight route data middleware customization.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/route-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// src/routeData.ts\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware(() => {});\n```\n```\n\n----------------------------------------\n\nTITLE: Awaiting Subsequent Middleware in TypeScript\nDESCRIPTION: Illustrates how to use async/await to wait for subsequent middleware to execute before modifying route data.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/route-data.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware(async (context, next) => {\n\t// Espera a que se ejecute el middleware posterior.\n\tawait next();\n\t// Modifica los datos de ruta.\n\tconst { entry } = context.locals.starlightRoute;\n\tentry.data.title = entry.data.title + '!';\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ThemeGrid Component in Astro\nDESCRIPTION: This snippet demonstrates how to import the ThemeGrid Astro component and render it with a collection of theme metadata, including accessible labels, preview images, descriptions, and links. It requires the ThemeGrid component file to exist and expects arrays of theme objects and labels as props. The component is dynamically populated to produce a responsive grid of community themes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport ThemeGrid from '~/components/theme-grid.astro';\n\n<ThemeGrid\n\tlabels={{\n\t\t/** Accessible label for the theme toggle. */\n\t\tlegend: 'Preview',\n\t\t/** Accessible label for the dark color scheme variant. */\n\t\tdark: 'Dark',\n\t\t/** Accessible label for the light color scheme variant. */\n\t\tlight: 'Light',\n\t}}\n\tthemes={[\n\t\t{\n\t\t\ttitle: 'Starlight Rapide',\n\t\t\tdescription:\n\t\t\t\t'Starlight theme inspired by the Visual Studio Code Vitesse theme.',\n\t\t\thref: 'https://starlight-theme-rapide.vercel.app/',\n\t\t\tpreviews: { light: 'rapide-light.png', dark: 'rapide-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Starlight Obsidian Theme',\n\t\t\tdescription:\n\t\t\t\t'Starlight theme inspired by the style of Obsidian Publish sites.',\n\t\t\thref: 'https://fevol.github.io/starlight-theme-obsidian/',\n\t\t\tpreviews: { light: 'obsidian-light.png', dark: 'obsidian-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Catppuccin for Starlight',\n\t\t\tdescription: 'Soothing pastel theme for Starlight.',\n\t\t\thref: 'https://starlight.catppuccin.com/',\n\t\t\tpreviews: { light: 'catppuccin-light.png', dark: 'catppuccin-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Ion',\n\t\t\tdescription: 'A sleek, modern theme for Starlight.',\n\t\t\thref: 'https://louisescher.github.io/starlight-ion-theme/',\n\t\t\tpreviews: { light: 'ion-light.png', dark: 'ion-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Starlight Black',\n\t\t\tdescription: 'Starlight theme inspired by shadcn docs.',\n\t\t\thref: 'https://starlight-theme-black.vercel.app/',\n\t\t\tpreviews: { light: 'black-light.png', dark: 'black-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Starlight Flexoki',\n\t\t\tdescription:\n\t\t\t\t'A warm and friendly theme based on the Flexoki color palette.',\n\t\t\thref: 'https://delucis.github.io/starlight-theme-flexoki/',\n\t\t\tpreviews: { light: 'flexoki-light.png', dark: 'flexoki-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Starlight Nova',\n\t\t\tdescription: 'A modern and beautiful theme for Starlight.',\n\t\t\thref: 'https://starlight-theme-nova.pages.dev/',\n\t\t\tpreviews: { light: 'nova-light.png', dark: 'nova-dark.png' },\n\t\t},\n\t\t{\n\t\t\ttitle: 'Starlight NextJS Theme',\n\t\t\tdescription: 'Starlight theme inspired by the NextJS docs.',\n\t\t\thref: 'https://starlight-nextjs-theme.trueberryless.org/',\n\t\t\tpreviews: { light: 'nextjs-light.png', dark: 'nextjs-dark.png' },\n\t\t},\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to FileTree Entries (Markdoc)\nDESCRIPTION: Shows how to add comments to files or directories in the FileTree component using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- src\n  - components\n    - Header.astro un archivo **importante**\n    - Title.astro\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight UI Components (JavaScript/MDX)\nDESCRIPTION: Imports the `Card` and `CardGrid` components from the `@astrojs/starlight/components` package. These are reusable UI components provided by the Starlight theme, used later in the MDX file to structure and display content in a visually appealing card layout.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/src/content/docs/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, CardGrid } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Enhanced LinkCard with Description in Markdoc\nDESCRIPTION: Shows how to implement the LinkCard component with a description using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-cards.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% linkcard\n   title=\"Internationalization\"\n\t href=\"/guides/i18n/\"\n\t description=\"Configure Starlight to support multiple languages.\" /%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Frontmatter (Markdown)\nDESCRIPTION: Shows how to customize the table of contents settings for a specific page using frontmatter in Starlight.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# src/content/docs/example.md\ntitle: Página con solo encabezados H2 en la tabla de contenidos\ntableOfContents:\n  minHeadingLevel: 2\n  maxHeadingLevel: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Using useTranslations Function in Starlight Plugin (TypeScript)\nDESCRIPTION: Demonstrates how to use the useTranslations function in a Starlight plugin to access UI strings for a specific language. The example shows how to log a translated message for Simplified Chinese.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// plugin.ts\nexport default {\n  name: 'plugin-use-translations',\n  hooks: {\n    'config:setup'({ useTranslations, logger }) {\n      const t = useTranslations('zh-CN');\n      logger.info(t('builtWithStarlight.label'));\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in TSX\nDESCRIPTION: Shows how to import the Card component from Starlight components package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/cards.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Example Project Directory Structure for Starlight Markdoc\nDESCRIPTION: Illustrates the typical directory layout of an Astro Starlight project using Markdoc. Key folders include `src/content/docs/` for documentation files (.md, .mdx, .mdoc), `src/assets/` for images, and `public/` for static assets. Configuration files like `astro.config.mjs` and `markdoc.config.mjs` are located at the root.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/markdoc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── public/\\n├── src/\\n│   ├── assets/\\n│   ├── content/\\n│   │   ├── docs/\\n│   └── content.config.ts\\n├── astro.config.mjs\\n├── markdoc.config.mjs\\n├── package.json\\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text/Regex in JS (Markdoc Syntax)\nDESCRIPTION: Shows the Markdoc syntax for highlighting specific text strings and regular expressions in a JavaScript code block using the `{% meta=\"'Individual terms' /Even.*supported/\" %}` tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_12\n\nLANGUAGE: markdoc\nCODE:\n```\n````markdoc\n```js {% meta=\"'Individual terms' /Even.*supported/\" %}\n// Individual terms can be highlighted, too\nfunction demo() {\n\treturn 'Even regular expressions are supported';\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Basic LinkButton Usage in MDX\nDESCRIPTION: Demonstrates basic implementation of LinkButton components with primary and secondary variants.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-buttons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkButton } from '@astrojs/starlight/components';\n\n<LinkButton href=\"/getting-started/\">Get started</LinkButton>\n<LinkButton href=\"/reference/configuration/\" variant=\"secondary\">\n\tConfiguration Reference\n</LinkButton>\n```\n\n----------------------------------------\n\nTITLE: Rendering UI String with Interpolation in Astro\nDESCRIPTION: Example of rendering a UI string with variable interpolation, passing a feature parameter to replace the {{feature}} placeholder in the translation string.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n<a href=\"https://docs.astro.build/en/guides/astro-db/\">\n\t{Astro.locals.t('link.astro.custom', { feature: 'Astro DB' })}\n</a>\n<!-- Renders: <a href=\"...\">Astro documentation for Astro DB</a> -->\n```\n\n----------------------------------------\n\nTITLE: LinkButton with Icon in Markdoc\nDESCRIPTION: Shows how to add icons to LinkButton using Markdoc syntax with placement configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-buttons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% linkbutton\n   href=\"https://docs.astro.build\"\n\t variant=\"secondary\"\n\t icon=\"external\"\n\t iconPlacement=\"start\" %}\nRelated: Astro\n{% /linkbutton %}\n```\n\n----------------------------------------\n\nTITLE: Astro Config Update for Custom CSS\nDESCRIPTION: Configuration changes needed in astro.config.mjs to include custom CSS files in the Starlight setup.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/css-and-tailwind.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs With Custom CSS',\n\t\t\tcustomCss: [\n\t\t\t\t// Relative path to your custom CSS file\n\t\t\t\t'./src/styles/custom.css',\n\t\t\t],\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: LinkCard with Description in MDX\nDESCRIPTION: Shows how to add a description to a LinkCard component using the description attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/link-cards.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\n\n<LinkCard\n\ttitle=\"Internacionalización\"\n\thref=\"/es/guides/i18n/\"\n\tdescription=\"Configura Starlight para admitir varios idiomas.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in FileTree Component (MDX)\nDESCRIPTION: This snippet shows how to use placeholders in the FileTree component to indicate additional content without specifying all items explicitly. It uses '...' or '…' as placeholder names.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- src\n  - components\n    - Header.astro\n    - …\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Setting Splash Page Template (Markdown)\nDESCRIPTION: Demonstrates how to use the splash page template for a wider layout without sidebars in Starlight frontmatter.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# src/content/docs/index.md\n\ntitle: Mi página Landing\ntemplate: splash\n---\n```\n\n----------------------------------------\n\nTITLE: Marking Inserted/Deleted Text in JS (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for marking text as inserted or deleted using `ins=` and `del=` attributes alongside default highlighting markers in a JavaScript code block.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_14\n\nLANGUAGE: md\nCODE:\n```\n````md\n```js \"return true;\" ins=\"inserted\" del=\"deleted\"\nfunction demo() {\n\tconsole.log('These are inserted and deleted marker types');\n\t// The return statement uses the default marker type\n\treturn true;\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Page Metadata with Frontmatter - Markdown\nDESCRIPTION: This snippet shows how to define metadata for a Markdown page using YAML frontmatter. The frontmatter sets the page \"title\" property to \"Content\" and enables the \"lastUpdate\" flag. This is used by static site generators like Astro to manage page titles and display last-updated timestamps. The rest of the content is standard Markdown with a heading. No explicit dependencies are required, but the system interpreting the frontmatter (e.g., Astro) must support YAML frontmatter parsing. Inputs include the metadata keys and Markdown content; outputs are rendered pages with metadata used for display, routing, or tooling.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/ssr/src/content/docs/content.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Content\nlastUpdate: true\n---\n\nExample page\n```\n\n----------------------------------------\n\nTITLE: Modifying Head Metadata in Starlight - diff\nDESCRIPTION: Demonstrates how to update head entry configuration in Starlight by removing default 'attrs' and 'content' fields, which may now remain undefined. Useful when customizing head metadata or overriding Starlight's Head component. No external dependencies except a Starlight/Astro configuration context. Inputs are JavaScript objects representing entries in the head array; outputs are modified head entries with omitted properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nhead.push({\n  tag: 'style',\n  content: 'div { color: red }'\n- attrs: {},\n});\nhead.push({\n  tag: 'link',\n- content: ''\n  attrs: { rel: 'me', href: 'https://example.com' },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Text Direction with t.dir()\nDESCRIPTION: Example of using t.dir() to determine text direction for the current locale or a specific locale like Arabic.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/i18n.mdx#2025-04-22_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\nconst currentDirection = Astro.locals.t.dir();\n//    ^\n//    'ltr'\nconst arabicDirection = Astro.locals.t.dir('ar');\n//    ^\n//    'rtl'\n---\n```\n\n----------------------------------------\n\nTITLE: Markdoc Syntax for Text and RegEx Highlighting\nDESCRIPTION: Shows the Markdoc syntax required to highlight specific text and use regular expressions for pattern matching in code blocks using the meta attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdoc\nCODE:\n```\n```js {% meta=\"'einzelne Begriffe' /Auch.*unterstützt/\" %}\n// Auch einzelne Begriffe können hervorgehoben werden\nfunction demo() {\n\treturn 'Auch reguläre Ausdrücke (RegEx) werden unterstützt';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font Globally in Starlight using CSS\nDESCRIPTION: This CSS snippet demonstrates how to apply a custom font (e.g., 'IBM Plex Serif') globally throughout the Starlight site by overriding the `--sl-font` CSS custom property within the `:root` element. This requires the font to be previously defined and loaded via local files or Fontsource.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* src/styles/custom.css */\n\n:root {\n\t--sl-font: 'IBM Plex Serif', serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Icon Component within Test Block - Astro/JSX\nDESCRIPTION: This snippet illustrates rendering a Starlight Icon component, with the 'name' prop set to 'star', inside a Test component for isolated demonstration. The 'id' prop on the Test component allows for identification in test suites or documentation. The Icon component's display is determined by the 'name' prop; the output is the corresponding icon within a Test container. Components must be imported as described previously.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/whitespaces.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Test id=\"icon\">\n\tIcon (<Icon name=\"star\" />)\n</Test>\n```\n\n----------------------------------------\n\nTITLE: Basic FileTree Usage in MDX\nDESCRIPTION: Shows how to use the FileTree component to display a basic directory structure with files and subdirectories.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- astro.config.mjs\n- package.json\n- src\n  - components\n    - Header.astro\n    - Title.astro\n  - pages/\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Tabs with Icons in Markdoc\nDESCRIPTION: Demonstrates how to implement tabs with icons using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/tabs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdoc\nCODE:\n```\n{% tabs %}\n{% tabitem label=\"Stars\" icon=\"star\" %}\nSirius, Vega, Betelgeuse\n{% /tabitem %}\n\n{% tabitem label=\"Moons\" icon=\"moon\" %}\nIo, Europa, Ganymede\n{% /tabitem %}\n{% /tabs %}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in JS (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for highlighting lines 2-3 in a JavaScript code block using the `{2-3}` text marker attached to the language identifier.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_8\n\nLANGUAGE: md\nCODE:\n```\n````md\n```js {2-3}\nfunction demo() {\n\t// This line (#2) and the next one are highlighted\n\treturn 'This is line #3 of this snippet';\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Marking Inserted/Deleted Text in JS (Markdoc Syntax)\nDESCRIPTION: Shows the Markdoc syntax for marking text as inserted or deleted using `ins=` and `del=` attributes within the `{% meta=\"...\" %}` tag for a JavaScript code block.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_15\n\nLANGUAGE: markdoc\nCODE:\n```\n````markdoc\n```js {% meta=\"'return true;' ins='inserted' del='deleted'\" %}\nfunction demo() {\n\tconsole.log('These are inserted and deleted marker types');\n\t// The return statement uses the default marker type\n\treturn true;\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Badge Size Configuration in Markdoc\nDESCRIPTION: Shows how to set different badge sizes using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n- {% badge text=\"New\" size=\"small\" /%}\n- {% badge text=\"New and improved\" size=\"medium\" /%}\n- {% badge text=\"New, improved, and bigger\" size=\"large\" /%}\n```\n\n----------------------------------------\n\nTITLE: Moving Translation Injection from Config:Setup to I18n:Setup\nDESCRIPTION: Example showing how to update a Starlight plugin to use the new i18n:setup hook instead of config:setup for injecting translations, following a breaking change in v0.32.0.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nexport default {\n  name: 'plugin-with-translations',\n  hooks: {\n-   'config:setup'({ injectTranslations }) {\n+   'i18n:setup'({ injectTranslations }) {\n      injectTranslations({\n        en: {\n          'myPlugin.doThing': 'Do the thing',\n        },\n        fr: {\n          'myPlugin.doThing': 'Faire le truc',\n        },\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding External Links to Starlight Sidebar (JavaScript)\nDESCRIPTION: This code demonstrates how to add external links or non-documentation links to the Starlight sidebar using the 'label' and 'link' properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/sidebar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t// Un enlace a una página que no sea de documentación en este sitio.\n\t\t{ label: 'Tienda de Meteoritos', link: '/shop/' },\n\t\t// Un enlace externo al sitio web de la NASA.\n\t\t{ label: 'NASA', link: 'https://www.nasa.gov/' },\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Starlight Project with Package Managers (Shell)\nDESCRIPTION: These shell commands demonstrate how to create a new Starlight project using different package managers (npm, pnpm, and Yarn). They are part of a step-by-step guide example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/steps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create astro --template starlight\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create astro --template starlight\n```\n\n----------------------------------------\n\nTITLE: Using ComponentProps Type in Starlight\nDESCRIPTION: Demonstrates how to use ComponentProps type from Astro to reference props of existing components for type safety.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/using-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\nimport type { ComponentProps } from 'astro/types';\nimport { Badge } from '@astrojs/starlight/components';\n\ntype BadgeProps = ComponentProps<typeof Badge>;\n---\n```\n\n----------------------------------------\n\nTITLE: Markdoc Syntax for Insertion and Deletion Markers\nDESCRIPTION: Shows the Markdoc syntax required to mark text as inserted or deleted in a code block using the meta attribute with ins and del properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_8\n\nLANGUAGE: markdoc\nCODE:\n```\n```js {% meta=\"'return true;' ins='eingefügte' del='gelöschte'\" %}\nfunction demo() {\n\tconsole.log('Dies sind eingefügte und gelöschte Markertypen');\n\t// Die return-Anweisung verwendet den Standard-Markierungstyp\n\treturn true;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Directory for i18n in Starlight\nDESCRIPTION: This snippet demonstrates how to set up a root directory for a language without an i18n prefix in its path, using the 'root' key in the locales configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/i18n.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Meine Dokumentation',\n\t\t\tdefaultLocale: 'root', // optional\n\t\t\tlocales: {\n\t\t\t\troot: {\n\t\t\t\t\tlabel: 'English',\n\t\t\t\t\tlang: 'en', // lang ist für Stammverzeichnis erforderlich\n\t\t\t\t},\n\t\t\t\t'zh-cn': {\n\t\t\t\t\tlabel: '简体中文',\n\t\t\t\t\tlang: 'zh-CN',\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Image Insertion in Markdown\nDESCRIPTION: Shows how to insert images in Markdown using both absolute and relative paths.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![An illustration of planets and stars featuring the word \"astro\"](https://raw.githubusercontent.com/withastro/docs/main/public/default-og-image.png)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n// src/content/docs/page-1.md\n\n![A rocketship in space](../../assets/images/rocket.svg)\n```\n\n----------------------------------------\n\nTITLE: Using Steps Component in Markdoc (Markdoc)\nDESCRIPTION: This Markdoc snippet shows how to use the Steps component to create a styled numbered list for a step-by-step guide in Markdoc format. It uses the {% steps %} tag to wrap the list items.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/steps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdoc\nCODE:\n```\n{% steps %}\n\n1. Import the component into your MDX file:\n\n   ```js\n   import { Steps } from '@astrojs/starlight/components';\n   ```\n\n2. Wrap `<Steps>` around your ordered list items.\n\n{% /steps %}\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Not Found Page in Astro Starlight (YAML)\nDESCRIPTION: This YAML configuration sets up a custom 404 Not Found page for an Astro Starlight project. It uses a splash template, disables editing and last updated info, and includes a space-themed error message with a call-to-action to return home.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/404.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Not found\ntemplate: splash\neditUrl: false\nlastUpdated: false\nhero:\n  title: '404'\n  tagline: <strong>Houston, we have a problem.</strong> We couldn't find that page.<br>Check the URL or try using the search bar.\n  actions:\n    - text: Go home\n      icon: right-arrow\n      link: /\n      variant: primary\n---\n```\n\n----------------------------------------\n\nTITLE: Markdoc Syntax for Line Highlighting\nDESCRIPTION: Example of how to write the Markdoc syntax to highlight specific lines in a code block. Uses the meta attribute to specify which lines should be highlighted.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n```js {% meta=\"{2-3}\" %}\nfunction demo() {\n\t// Diese Zeile (#2) und die nächste Zeile sind hervorgehoben\n\treturn 'Dies ist Zeile #3 dieses Ausschnittes';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight for a Single Non-English Language in JavaScript\nDESCRIPTION: Demonstrates how to configure a Starlight site to be monolingual in a language other than the default English, using a diff format. This is achieved by defining a single `root` locale in `astro.config.mjs` with the desired language's label and `lang` code (e.g., Simplified Chinese).\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My Docs',\n\t\t\tlocales: {\n+\t\t\t\troot: {\n+\t\t\t\t\tlabel: '简体中文',\n+\t\t\t\t\tlang: 'zh-CN',\n+\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Markdoc Configuration File\nDESCRIPTION: JavaScript configuration to set up Markdoc with Starlight by creating a markdoc.config.mjs file and using the Starlight Markdoc preset.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_38\n\nLANGUAGE: js\nCODE:\n```\nimport { defineMarkdocConfig } from '@astrojs/markdoc/config';\nimport starlightMarkdoc from '@astrojs/starlight-markdoc';\n\nexport default defineMarkdocConfig({\n\textends: [starlightMarkdoc()],\n});\n```\n\n----------------------------------------\n\nTITLE: Card Grid Implementation in Markdoc\nDESCRIPTION: Shows the Markdoc syntax for creating a grid of cards using CardGrid.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% cardgrid %}\n{% card title=\"Check this out\" icon=\"open-book\" %}\nInteresting content you want to highlight.\n{% /card %}\n\n{% card title=\"Other feature\" icon=\"information\" %}\nMore information you want to share.\n{% /card %}\n{% /cardgrid %}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Starlight UI Translation Files\nDESCRIPTION: Illustrates the required directory structure for storing custom UI string translations in Starlight. JSON files, named according to their locale code (e.g., `ar.json`, `zh-CN.json`), should be placed within the `src/content/i18n/` directory.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n- src/\n  - content/\n    - i18n/\n      - ar.json\n      - zh-CN.json\n```\n\n----------------------------------------\n\nTITLE: Adding Title via Comment (Markdoc Tab Example)\nDESCRIPTION: Shows the code presented within the Markdoc tab for adding a file name title using a comment. Note: The code fence uses `js` language, not Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_21\n\nLANGUAGE: md\nCODE:\n```\n````md\n```js\n// my-test-file.js\nconsole.log('Hello World!');\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Language Site in Starlight\nDESCRIPTION: This snippet shows how to set up a single-language site in a language other than English by setting it as the 'root' in the locales configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/i18n.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My Docs',\n\t\t\tlocales: {\n\t\t\t\troot: {\n\t\t\t\t\tlabel: '简体中文',\n\t\t\t\t\tlang: 'zh-CN',\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Announcement Banner via Starlight Frontmatter (Markdown)\nDESCRIPTION: Demonstrates how to display an announcement banner at the top of a Starlight page using the `banner` frontmatter field. The `content` property can include HTML, as shown here with a link.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page with a banner\nbanner:\n  content: |\n    We just launched something cool!\n    <a href=\"https://example.com\">Check it out</a>\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Excluding a Page from Search Index in Starlight (Markdown)\nDESCRIPTION: Shows how to exclude a specific page from the Pagefind search index by setting the `pagefind` frontmatter field to `false`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\n# Hide this page from the search index\npagefind: false\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Markdoc Integration with pnpm\nDESCRIPTION: Command to add the Markdoc integration to an existing Astro project using pnpm package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\npnpm astro add markdoc\n```\n\n----------------------------------------\n\nTITLE: Customizing Icons in MDX\nDESCRIPTION: Examples of customizing icons with color and size properties in MDX format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/icons.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Icon } from '@astrojs/starlight/components';\n\n<Icon name=\"star\" color=\"goldenrod\" size=\"2rem\" />\n<Icon name=\"rocket\" color=\"var(--sl-color-text-accent)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Shiki Theme for Fallback - diff\nDESCRIPTION: Shows how to change the Astro project configuration to manually select the 'css-variables' Shiki theme, which was previously provided as an automatic fallback in Starlight. This diff highlights the addition of the 'markdown.shikiConfig.theme' option to the exported configuration. Inputs are changes to the Astro config file (typically astro.config.mjs); outputs are the application of the Shiki css-variables theme for syntax highlighting in code blocks. Requires Astro and the Shiki integration.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n+ markdown: {\n+   shikiConfig: {\n+     theme: 'css-variables',\n+   },\n+ },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight DocSearch Plugin using pnpm (Shell)\nDESCRIPTION: Provides the pnpm command to install the `@astrojs/starlight-docsearch` package for integrating Algolia DocSearch into a Starlight project.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n```sh\npnpm add @astrojs/starlight-docsearch\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Title in Starlight Component Override\nDESCRIPTION: Code example showing how to access the siteTitle property in a custom Starlight component. This is the recommended approach for accessing the site title after changes to the title field structure.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport type { Props } from '@astrojs/starlight/props';\n\n// The site title for this page's language:\nconst { siteTitle } = Astro.props;\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Social Configuration from Old to New Syntax\nDESCRIPTION: Example showing how to update from the old social configuration syntax to the new syntax in astro.config.mjs. The new syntax requires explicitly specifying icon and label for each social link.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- social: {\n-   github: 'https://github.com/withastro/starlight',\n-   discord: 'https://astro.build/chat',\n- },\n+ social: [\n+   { icon: 'github', label: 'GitHub', href: 'https://github.com/withastro/starlight' },\n+   { icon: 'discord', label: 'Discord', href: 'https://astro.build/chat' },\n+ ],\n```\n\n----------------------------------------\n\nTITLE: Styling Components in Starlight\nDESCRIPTION: Example of using the not-content class to disable Starlight's default content styling for custom components.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/using-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\n---\n\n<div class=\"not-content\">\n\t<p>Not impacted by Starlight's default content styling.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Directories with a Root Locale for Starlight i18n\nDESCRIPTION: Illustrates the file structure required when using a `root` locale in Starlight. Content files for the root language (e.g., English index.md) are placed directly in `src/content/docs/`, while other languages (e.g., Chinese index.md) reside in their named sub-directories.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- src/\n  - content/\n    - docs/\n      - **index.md**\n      - zh-cn/\n        - **index.md**\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in FileTree (MDX)\nDESCRIPTION: Demonstrates how to use placeholders in the FileTree component to indicate additional content without specifying all items explicitly in MDX.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- src\n  - components\n    - Header.astro\n    - …\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Entries in FileTree Component (Markdoc)\nDESCRIPTION: This example shows how to highlight a specific entry in the FileTree component using bold formatting in Markdoc.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- src\n  - components\n    - **Header.astro**\n    - Title.astro\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Creating Synced Package Manager Tabs with Icons in Astro\nDESCRIPTION: Demonstrates adding icons to synchronized tabs (`syncKey=\"pkg\"`) using the `icon` prop on each `<TabItem`. Icons are specified using icon set prefixes (e.g., `seti:npm`, `seti:yarn`) or simple names (e.g., `pnpm`, `bun`) likely configured within Starlight. Selection remains synced.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"pkg\">\n\t<TabItem label=\"npm\" icon=\"seti:npm\">\n\t\tanother npm command\n\t</TabItem>\n\t<TabItem label=\"pnpm\" icon=\"pnpm\">\n\t\tanother pnpm command\n\t</TabItem>\n\t<TabItem label=\"bun\" icon=\"bun\">\n\t\tanother bun command\n\t</TabItem>\n\t<TabItem label=\"yarn\" icon=\"seti:yarn\">\n\t\tanother yarn command\n\t</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Global CSS Configuration for Tailwind\nDESCRIPTION: Setup for global CSS file when using Tailwind with Starlight, including proper layer ordering and imports.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/css-and-tailwind.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* src/styles/global.css */\n@layer base, starlight, theme, components, utilities;\n\n@import '@astrojs/starlight-tailwind';\n@import 'tailwindcss/theme.css' layer(theme);\n@import 'tailwindcss/utilities.css' layer(utilities);\n```\n\n----------------------------------------\n\nTITLE: Shell Output for absolutePathToLang Example (Shell)\nDESCRIPTION: Shows the expected shell output when using the absolutePathToLang function to determine the language and then logging a translated message in French.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n[plugin-use-translations] Astuce\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Titles for Asides in Markdoc\nDESCRIPTION: This example shows how to set a custom title for an Aside using Markdoc syntax. It provides the same functionality as the MDX example but with Markdoc's attribute format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/asides.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% aside type=\"caution\" title=\"¡Cuidado!\" %}\nUna advertencia *con* un título personalizado.\n{% /aside %}\n```\n\n----------------------------------------\n\nTITLE: Updating StarlightPage Sidebar Configuration\nDESCRIPTION: Example of updating the sidebar configuration for the StarlightPage component to use the new array of SidebarItem objects format.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/pages/custom-page/example.astro\n---\n\n<StarlightPage\n  frontmatter={{ title: 'My custom page' }}\n  sidebar={[\n    {\n      label: 'Resources',\n      badge: { text: 'New' },\n      items: [\n        'showcase',\n        { label: 'Starlight', link: 'https://starlight.astro.build/' },\n      ],\n    },\n  ]}\n>\n  <p>This is a custom page with a custom component.</p>\n</StarlightPage>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Previous Page Link Text in Starlight (Markdown)\nDESCRIPTION: Shows how to override the default text for the previous page pagination link by providing a custom string value to the `prev` frontmatter field.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\n# Override the previous page link text\nprev: Continue the tutorial\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Card Usage in Markdoc\nDESCRIPTION: Shows how to create a basic card using Markdoc syntax with title and content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/cards.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% card title=\"Check this out\" %}\nInteresting content you want to highlight.\n{% /card %}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in JavaScript using Expressive Code\nDESCRIPTION: Demonstrates highlighting specific lines (2 and 3) in a JavaScript code block using Expressive Code's curly brace syntax `{2-3}`. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js {2-3}\nfunction demo() {\n\t// This line (#2) and the next one are highlighted\n\treturn 'This is line #3 of this snippet';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Filename Tab with a Comment in JavaScript\nDESCRIPTION: Example of how to add a filename tab to a code block using a comment in the first line of the code. Creates a code editor frame with the specified filename.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// meine-test-datei.js\nconsole.log('Hallo Welt!');\n```\n\n----------------------------------------\n\nTITLE: Importing Code Component in Starlight\nDESCRIPTION: Shows how to import the Code component from Starlight's components package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/code.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Code } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Creating Japanese Translation File with JSON in Starlight\nDESCRIPTION: Example of providing translations in JSON files in the src/content/i18n/ directory for customizing Starlight's UI. This snippet shows a German translation file for search UI elements.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"search.label\": \"Suchen\",\n  \"search.shortcutLabel\": \"(Drücke / zum Suchen)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component in TSX\nDESCRIPTION: Shows how to import the Icon component from Starlight components package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Disabling Window Frame (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for disabling the window frame for a bash code block using the `frame=\"none\"` attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_26\n\nLANGUAGE: md\nCODE:\n```\n````md\n```bash frame=\"none\"\necho \"This is not rendered as a terminal despite using the bash language\"\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Customizing Icons in Markdoc\nDESCRIPTION: Shows how to customize icons with color and size properties using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/icons.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% icon name=\"star\" color=\"goldenrod\" size=\"2rem\" /%}\n{% icon name=\"rocket\" color=\"var(--sl-color-text-accent)\" /%}\n```\n\n----------------------------------------\n\nTITLE: Restoring Legacy Vertical Spacing in Markdown Content\nDESCRIPTION: CSS snippet to restore vertical spacing between content elements to match Starlight v0.15 and earlier versions\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n/* Restore vertical spacing to match Starlight v0.15 and below. */\n.sl-markdown-content\n  :not(a, strong, em, del, span, input, code)\n  + :not(a, strong, em, del, span, input, code, :where(.not-content *)) {\n  margin-top: 1.5rem;\n}\n.sl-markdown-content\n  :not(h1, h2, h3, h4, h5, h6)\n  + :is(h1, h2, h3, h4, h5, h6):not(:where(.not-content *)) {\n  margin-top: 2.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text/Regex in JavaScript using Expressive Code\nDESCRIPTION: Demonstrates highlighting specific text strings (`\"Individual terms\"`) and regular expressions (`/Even.*supported/`) within a JavaScript code block using Expressive Code markers. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n```js \"Individual terms\" /Even.*supported/\n// Individual terms can be highlighted, too\nfunction demo() {\n\treturn 'Even regular expressions are supported';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Tailwind v3 Configuration for Starlight (JavaScript)\nDESCRIPTION: This JavaScript snippet shows an example `tailwind.config.mjs` file demonstrating how theme customizations (accent colors, gray scale, font families) were configured for Starlight using Tailwind v3 and the `@astrojs/starlight-tailwind` plugin. This configuration method is deprecated in v4.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/tailwind/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// tailwind.config.mjs\nimport starlightPlugin from '@astrojs/starlight-tailwind';\nimport colors from 'tailwindcss/colors';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],\n  theme: {\n    extend: {\n      colors: {\n        // Custom accent colors.\n        accent: colors.fuchsia,\n        // Custom gray scale.\n        gray: colors.slate,\n      },\n      fontFamily: {\n        // Custom text font.\n        sans: ['\"Atkinson Hyperlegible\"'],\n        // Custom code font.\n        mono: ['\"IBM Plex Mono\"'],\n      },\n    },\n  },\n  plugins: [starlightPlugin()],\n};\n```\n\n----------------------------------------\n\nTITLE: Astro Config with Expressive Code Migration\nDESCRIPTION: Example showing how to migrate from manual Expressive Code setup to using Starlight's built-in Expressive Code support via the expressiveCode configuration option.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport starlight from '@astrojs/starlight';\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  integrations: [\n    starlight({\n      title: 'My docs',\n      expressiveCode: {\n        themes: ['rose-pine'],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Page Configuration\nDESCRIPTION: Frontmatter configuration for creating a custom 404 error page.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n---\n# src/content/docs/404.md\ntitle: '404'\ntemplate: splash\neditUrl: false\nhero:\n  title: '404'\n  tagline: Page not found. Check the URL or try using the search bar.\n---\n```\n\n----------------------------------------\n\nTITLE: Diff Highlighting with JS Syntax (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for combining diff markers (`+`, `-`) with JavaScript syntax highlighting using `diff` language and a `lang='js'` attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_17\n\nLANGUAGE: md\nCODE:\n```\n````md\n```diff lang=\"js\"\n  function thisIsJavaScript() {\n    // This entire block gets highlighted as JavaScript,\n    // and we can still add diff markers to it!\n-   console.log('Old code to be removed')\n+   console.log('New and shiny code!')\n  }\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Terminal Title\nDESCRIPTION: Shows the Markdown syntax required to create a bash code block with a custom title for the terminal window.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n```bash title=\"Installieren von Abhängigkeiten…\"\nnpm install\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Social Links (JavaScript)\nDESCRIPTION: Shows how to add social media links to the site header using the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs Con Mis Enlaces Sociales',\n\t\t\tsocial: {\n\t\t\t\tdiscord: 'https://astro.build/chat',\n\t\t\t\tgithub: 'https://github.com/withastro/starlight',\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Including AboutAstro Section with Slot Content in Astro (JavaScript/JSX)\nDESCRIPTION: This snippet displays the AboutAstro component and provides descriptive slot content about the Astro framework. Requires the AboutAstro component to be imported from a local .astro file. No input parameters except for the 'title' prop; accepts children as Markdown or HTML for rendering below the heading. Used to educate visitors on Astro within the docs site. Outputs an informational section and includes a Markdown-formatted external Astro link.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<AboutAstro title=\"Brought to you by\">\nAstro is the all-in-one web framework designed for speed.\nPull your content from anywhere and deploy everywhere, all powered by your favorite UI components and libraries.\n\n[Learn about Astro](https://astro.build/)\n\n</AboutAstro>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with PNPM\nDESCRIPTION: Command to start the local development server using PNPM package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Importing LinkCard Component in TSX\nDESCRIPTION: Shows how to import the LinkCard component from Starlight components library.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/link-cards.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Combining Syntax Highlighting and Markers with Meta Attribute in Markdown Code Blocks (Markdown with Diff and Markdoc Attributes)\nDESCRIPTION: This code snippet demonstrates how to use the meta fence attribute to combine JavaScript syntax highlighting with diff markers and text line markers in a markdown code block. It uses Expressive Code features to highlight lines as JavaScript, apply diff (addition/removal) syntax, and indicate highlighted markers. The block is suitable for documentation purposes and requires Expressive Code integration and Markdoc support.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/markdoc/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: mdoc\nCODE:\n```\n```diff {% meta=\"lang=js 'markers'\" %}\n  function thisIsJavaScript() {\n    // This entire block gets highlighted as JavaScript,\n    // and we can still add diff markers to it!\n-   console.log('Old code to be removed')\n+   console.log('New and shiny code!')\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Yarn\nDESCRIPTION: Command to start the local development server using Yarn package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Badge in MDX\nDESCRIPTION: Shows how to apply custom styling to a badge using inline styles.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Badge } from '@astrojs/starlight/components';\n\n<Badge text=\"Custom\" variant=\"success\" style={{ fontStyle: 'italic' }} />\n```\n\n----------------------------------------\n\nTITLE: Diff Highlighting with JS Syntax (Markdoc Syntax)\nDESCRIPTION: Shows the Markdoc syntax for combining diff markers (`+`, `-`) with JavaScript syntax highlighting using the `diff` language identifier and `{% meta=\"lang='js'\" %}` tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_18\n\nLANGUAGE: markdoc\nCODE:\n```\n````markdoc\n```diff {% meta=\"lang='js'\" %}\n  function thisIsJavaScript() {\n    // This entire block gets highlighted as JavaScript,\n    // and we can still add diff markers to it!\n-   console.log('Old code to be removed')\n+   console.log('New and shiny code!')\n  }\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Importing LinkCard Component in TSX\nDESCRIPTION: Shows how to import the LinkCard component from Starlight components library.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-cards.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlight Sidebar with Slug-based Links\nDESCRIPTION: Example configuration showing the new syntax for specifying sidebar links using page slugs. This allows easier internal link configuration by automatically using the linked page's frontmatter.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n  title: 'Docs with easier sidebars',\n  sidebar: ['getting-started', { slug: 'guides/installation' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling the Previous Page Link in Starlight (Markdown)\nDESCRIPTION: Illustrates how to hide the pagination link to the previous page by setting the `prev` frontmatter field to `false`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\n# Hide the previous page link\nprev: false\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Code from File in MDX\nDESCRIPTION: Demonstrates how to import code from a file using Vite's ?raw import suffix and display it using the Code component in an MDX file.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/code.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n# src/content/docs/example.mdx\n\nimport { Code } from '@astrojs/starlight/components';\nimport importedCode from '/tsconfig.json?raw';\n\n<Code code={importedCode} lang=\"json\" title=\"tsconfig.json\" />\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Starlight (Shell)\nDESCRIPTION: Command to change the current directory to the cloned Starlight repository.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd starlight\n```\n\n----------------------------------------\n\nTITLE: Card with Icon in MDX\nDESCRIPTION: Shows how to add an icon to a Card component using the icon prop in MDX format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/cards.mdx#2025-04-22_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Card } from '@astrojs/starlight/components';\n\n<Card title=\"Stars\" icon=\"star\">\n\tSirius, Vega, Betelgeuse\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Adding Title to Terminal Window with Bash\nDESCRIPTION: Example of how to add a title to a terminal window frame for a bash code block using the title attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Shell)\nDESCRIPTION: Commands to change directory to Starlight package and run unit tests.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/starlight\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating an Unsynchronized Tab Group (Example 1)\nDESCRIPTION: This snippet demonstrates creating a set of tabs using the imported `Tabs` and `TabItem` components. Each `TabItem` represents a single tab with a specific label and content. This tab group focuses on package manager commands.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs-unsynced.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs>\n\t<TabItem label=\"npm\">npm command</TabItem>\n\t<TabItem label=\"pnpm\">pnpm command</TabItem>\n\t<TabItem label=\"yarn\">yarn command</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Starlight Documentation Site\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site and points to the XML sitemap location. The configuration enables proper site indexing and crawling.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/assets/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://starlight.astro.build/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in TSX\nDESCRIPTION: Shows how to import the Badge component from Starlight components package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Adding File Name Title via Comment in JavaScript\nDESCRIPTION: Demonstrates adding a title (displayed as a file name tab in the frame) to a JavaScript code block by including a comment like `// my-test-file.js` on the first line. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n```js\n// my-test-file.js\nconsole.log('Hello World!');\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component in Starlight (TSX)\nDESCRIPTION: This snippet shows how to import the Steps component from the Starlight components library. It's a prerequisite for using the Steps component in your documentation.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Steps } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Optimization in Astro Config\nDESCRIPTION: Example of disabling MDX optimization by manually adding the MDX integration to the Astro configuration file. This workaround is needed if you use MDX files outside of Starlight pages with the components prop.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\n+ import mdx from '@astrojs/mdx';\nimport starlight from '@astrojs/starlight';\n\n// https://astro.build/config\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'My docs',\n\t\t\t// ...\n\t\t}),\n+\t\tmdx(),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: Executes the `dev` script (typically `astro dev`) defined in `package.json` to start the local development server. The site becomes accessible, usually at `localhost:4321`, with features like hot module reloading.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Markdoc Syntax for Diff with Language Highlighting\nDESCRIPTION: Shows the Markdoc syntax required to create a diff view with language-specific syntax highlighting for JavaScript using the meta attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_11\n\nLANGUAGE: markdoc\nCODE:\n```\n```diff {% meta=\"lang='js'\" %}\n  function thisIsJavaScript() {\n    // Dieser gesamte Block wird als JavaScript hervorgehoben,\n    // und wir können ihm immer noch Diff-Markierungen hinzufügen!\n-   console.log('Zu entfernender alter Code')\n+   console.log('Neuer, glänzender Code!')\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Aside Usage Examples in Markdoc\nDESCRIPTION: Shows equivalent Markdoc syntax for creating asides with different types and content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/asides.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% aside %}\nSome content in an aside.\n{% /aside %}\n\n{% aside type=\"caution\" %}\nSome cautionary content.\n{% /aside %}\n\n{% aside type=\"tip\" %}\nOther content is also supported in asides.\n\n```js\n// A code snippet, for example.\n```\n{% /aside %}\n\n{% aside type=\"danger\" %}\nDo not give your password to anyone.\n{% /aside %}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Content Width Style for Starlight Pages in Astro\nDESCRIPTION: This snippet adds a <style> tag into the page head to set the CSS custom property --sl-content-width, controlling maximum content width. It leverages Astro's frontmatter 'head' property. No dependencies are required, and it enables fine-tuned visual customization globally or per page.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody { --sl-content-width: 66.75rem; }\n```\n\n----------------------------------------\n\nTITLE: Importing CardGrid Component in TSX\nDESCRIPTION: Shows how to import the CardGrid component from Starlight components package.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardGrid } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Disabling Window Frame for Bash Code\nDESCRIPTION: Demonstrates disabling the default terminal window frame for a bash code block using the `frame=\"none\"` attribute. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n```bash frame=\"none\"\necho \"This is not rendered as a terminal despite using the bash language\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component in JavaScript (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to import the Steps component from the Starlight components library. It's included as part of the step-by-step guide examples.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/steps.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Steps } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Displaying Article Links with CardGrid in Astro\nDESCRIPTION: This snippet demonstrates the use of the `CardGrid` component to wrap multiple `LinkCard` components. Each `LinkCard` represents a link to an external article or review about Starlight, defined by its `href`, `title`, and `description` props. This section specifically curates general articles and reviews.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/community-content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<CardGrid>\n\t<LinkCard\n\t\thref=\"https://devm.io/open-source/starlight-astro\"\n\t\ttitle=\"Static Site Generation with Starlight\"\n\t\tdescription=\"“No idea is too big or too small when designing components” — an interview with Chris Swithinbank, Starlight Lead\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://frontendatscale.com/blog/hybrid-frontend-architecture/\"\n\t\ttitle=\"Hybrid Frontend Architecture with Astro and Starlight\"\n\t\tdescription=\"Maxi Ferreira and Ben Holmes build a docs site with Starlight, TinaCMS, and an interactive API Playground with authentication.\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://www.olets.dev/posts/comparing-docs-site-builders-vuepress-vs-starlight/\"\n\t\ttitle=\"Comparing docs site builders: VuePress vs Starlight\"\n\t\tdescription=\"How do these two frameworks measure up?\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://astro.build/case-studies/wp-engine/\"\n\t\ttitle=\"Case Study: Slashing Development Costs\"\n\t\tdescription=\"How WP Engine Lowered Development Costs by Over 50% with Astro’s Starlight.\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://maciekpalmowski.dev/blog/building-a-documentation-site-using-astro-starlight/\"\n\t\ttitle=\"Building a documentation site using Astro Starlight\"\n\t\tdescription=\"Maciek Palmowski describes how Patchstack migrated their documentation to Starlight\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://blog.cloudflare.com/open-source-all-the-way-down-upgrading-our-developer-documentation/\"\n\t\ttitle=\"Open source all the way down\"\n\t\tdescription=\"How Cloudflare used Starlight to upgrade their developer documentation.\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://starlight-changelog.netlify.app/\"\n\t\ttitle=\"Starlight Changelog\"\n\t\tdescription=\"View all releases of the @astrojs/starlight package on a single beautiful page.\"\n\t/>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Creating Starlight Tailwind Project with Astro CLI - Bash\nDESCRIPTION: This snippet provides the command to bootstrap a new Astro project preconfigured with Starlight and Tailwind CSS. It uses npm to invoke the Astro project generator, passing the Starlight/Tailwind template source. Execute this command in a terminal to scaffold the recommended starter files and configuration for documentation sites using Starlight and Tailwind. Required dependencies: Node.js, npm. Input: n/a. Output: A new project directory populated with necessary files.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/tailwind/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight/tailwind\n```\n\n----------------------------------------\n\nTITLE: Rendering Anchor Headings with AnchorHeading Component - Astro\nDESCRIPTION: Renders two heading elements using the AnchorHeading component at levels 2 and 3, providing unique IDs for each. The component is provided with props: 'level' (specifying heading level) and 'id' (the HTML anchor/link target). Outputs properly-marked up headings with anchor links for in-page navigation. Requires that the AnchorHeading component is imported, and inputs should include semantic text content between the tags.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/anchor-heading-component.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<AnchorHeading level=\\\"2\\\" id=\\\"an-anchor-heading\\\">An anchor heading</AnchorHeading>\n```\n\nLANGUAGE: astro\nCODE:\n```\n<AnchorHeading level=\\\"3\\\" id=\\\"another-anchor-heading\\\">Another anchor heading</AnchorHeading>\n```\n\n----------------------------------------\n\nTITLE: Disabling Starlight Default Styles for Components\nDESCRIPTION: Demonstrates how to use the 'not-content' class to disable Starlight's default content styles for a custom component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/using-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/Example.astro\n---\n\n<div class=\"not-content\">\n\t<p>No se ve afectado por los estilos predeterminados de Starlight.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm (Shell)\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Adding Aside Component in TypeScript\nDESCRIPTION: Introduction of a new <Aside> component, complementing the existing Markdown syntax. Added in version 0.19.0.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n97bf523923fb9678c12f58fcdbe36757f0e56ceb Thanks [@delucis](https://github.com/delucis)! - Adds a new `<Aside>` component\n\nThe new component is in addition to the existing custom Markdown syntax.\n```\n\n----------------------------------------\n\nTITLE: Installing Theme Package in StackBlitz\nDESCRIPTION: Command to install a custom theme package in the StackBlitz demo environment\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm i your-theme-name\n```\n\n----------------------------------------\n\nTITLE: Adding Title via Comment (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for adding a file name title to a code block frame using a comment on the first line.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_20\n\nLANGUAGE: md\nCODE:\n```\n````md\n```js\n// my-test-file.js\nconsole.log('Hello World!');\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Customizing Previous Page Link and Text in Starlight (Markdown)\nDESCRIPTION: Demonstrates how to override both the link target and the display text for the previous page pagination link using an object with `link` and `label` properties in the `prev` frontmatter field.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\n# Override both the previous page link and text\nprev:\n  link: /unrelated-page/\n  label: Check out this other page\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the Aside Component in Starlight\nDESCRIPTION: This snippet shows how to import the Aside component from Starlight's components library. This import is required before using any Aside component in your MDX files.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/asides.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Displaying Recipe Links with CardGrid in Astro\nDESCRIPTION: This snippet utilizes the `CardGrid` and `LinkCard` components to present a collection of community-produced recipes and how-to guides for Starlight. Each `LinkCard` provides a direct link (`href`), a title, and a brief description of the guide.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/community-content.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<CardGrid>\n\t<LinkCard\n\t\thref=\"https://www.webpro.nl/scraps/versioned-docs-with-starlight-and-vercel\"\n\t\ttitle=\"Versioned documentation with Starlight & Vercel\"\n\t\tdescription=\"A guide to implementing separate versions of documentation for each major version of a project\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://hideoo.dev/notes/starlight-heading-links\"\n\t\ttitle=\"Add links to Starlight headings\"\n\t\tdescription=\"A guide to using a rehype plugin to share links to specific sections of your documentation\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://blog.otterlord.dev/posts/starlight-sponsors/\"\n\t\ttitle=\"Add sponsors to your Starlight site\"\n\t\tdescription=\"A guide to implement a custom sponsors component in your documentation sidebar\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://hideoo.dev/notes/starlight-og-images\"\n\t\ttitle=\"Add Open Graph images to Starlight\"\n\t\tdescription=\"A guide to generating social images and the corresponding meta tags for your pages\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://hideoo.dev/notes/starlight-third-party-icon-sets\"\n\t\ttitle=\"Use third-party icon sets in Starlight\"\n\t\tdescription=\"A guide to using unplugin-icons to expand the selection of available icons for Starlight\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://hideoo.dev/notes/starlight-custom-html-head\"\n\t\ttitle=\"Edit the HTML head of Starlight pages\"\n\t\tdescription=\"Learn how to add common head content such as web analytics, fonts, and scripts\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://dev.to/mrrobot/publishing-documentation-with-astro-starlight-691\"\n\t\ttitle=\"Publishing Documentation with Astro Starlight\"\n\t\tdescription=\"Getting started with Starlight documentation\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://events-3bg.pages.dev/jotter/starlight/guide/\"\n\t\ttitle=\"Enable View Transitions\"\n\t\tdescription=\"Get that SPA-like look and feel with the Bag of Tricks’ view transitions support\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://jamcomments.com/posts/structured-data-with-starlight\"\n\t\ttitle=\"Adding Structured Data to Starlight Pages\"\n\t\tdescription=\"Learn how to build dynamic JSON-LD structured data for your documentation pages.\"\n\t/>\n\t<LinkCard\n\t\thref=\"https://starlight-examples.netlify.app/\"\n\t\ttitle=\"Starlight Examples\"\n\t\tdescription=\"A collection of StackBlitz embeds demonstrating practical ways of doing stuff in Starlight documentation sites.\"\n\t/>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Syntax Highlighting\nDESCRIPTION: Example of a code block with JavaScript syntax highlighting.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Javascript code with syntax highlighting.\nvar fun = function lang(l) {\n\tdateformat.i18n = require('./lang/' + l);\n\treturn true;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components for Custom Documentation UI - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the CardGrid and LinkCard components from the @astrojs/starlight/components package. These dependencies are necessary to render custom cards and grid layouts within Starlight documentation pages. Importing these components enables the visual listing of plugins and integrations described elsewhere in the file.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CardGrid, LinkCard } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in FileTree Component (Markdoc)\nDESCRIPTION: This example demonstrates the use of placeholders in the FileTree component using Markdoc syntax. It shows the same structure as the MDX example with a placeholder for additional content.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_8\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- src\n  - components\n    - Header.astro\n    - …\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Inline Text Formatting Examples\nDESCRIPTION: Demonstrates basic Markdown syntax for inline text formatting including bold, italic, and strikethrough.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nText can be **bold**, _italic_, or ~~strikethrough~~.\n```\n\n----------------------------------------\n\nTITLE: Adding Title to Bash Terminal Frame\nDESCRIPTION: Demonstrates adding a title (`title=\"Installing dependencies…\"`) to a bash code block, which renders it within a terminal-style window frame with the specified title. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Installing dependencies…\"\nnpm install\n```\n```\n\n----------------------------------------\n\nTITLE: Using Components in Markdoc\nDESCRIPTION: Shows how to use Starlight's built-in components in a Markdoc file using the tag syntax, without the need for imports.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/using-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdoc\nCODE:\n```\n---\n# src/content/docs/example.mdoc\ntitle: Bienvenido a mi documentación\n---\n\n{% card title=\"Estrellas\" icon=\"star\" %}\nSirius, Vega, Betelgeuse\n{% /card %}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Custom Astro Component\nDESCRIPTION: This snippet demonstrates importing a custom Astro component named 'ShowcaseSites' from a relative path ('~/components/showcase-sites.astro'). It is then rendered within the page's markup using JSX-like syntax (<ShowcaseSites />) to display the list of Starlight showcase websites.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/showcase.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\nimport ShowcaseSites from '~/components/showcase-sites.astro';\n```\n\nLANGUAGE: astro\nCODE:\n```\n<ShowcaseSites />\n```\n\n----------------------------------------\n\nTITLE: Basic Card Usage in MDX\nDESCRIPTION: Demonstrates basic usage of the Card component with a title and content in MDX format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/cards.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Card } from '@astrojs/starlight/components';\n\n<Card title=\"Check this out\">Interesting content you want to highlight.</Card>\n```\n\n----------------------------------------\n\nTITLE: Markdoc Syntax for Terminal Title\nDESCRIPTION: Shows the Markdoc syntax required to create a bash code block with a custom title for the terminal window using the title attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_16\n\nLANGUAGE: markdoc\nCODE:\n```\n```bash {% title=\"Installieren von Abhängigkeiten…\" %}\nnpm install\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Custom YouTubeGrid Component in Astro\nDESCRIPTION: This import statement brings in a custom Astro component named `YouTubeGrid` from the project's local components directory (`~/components/youtube-grid.astro`). This component is specifically designed to display YouTube video links in a grid format.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/community-content.mdx#2025-04-22_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\nimport YouTubeGrid from '~/components/youtube-grid.astro';\n```\n\n----------------------------------------\n\nTITLE: Basic LinkCard Usage in Markdoc\nDESCRIPTION: Shows how to create a basic LinkCard using Markdoc syntax with required attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/link-cards.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% linkcard title=\"Creación de contenido en Markdown\" href=\"/es/guides/authoring-content/\" /%}\n```\n\n----------------------------------------\n\nTITLE: Card with Icon in Markdoc\nDESCRIPTION: Demonstrates how to create a card with an icon using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/cards.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% card title=\"Stars\" icon=\"star\" %}\nSirius, Vega, Betelgeuse\n{% /card %}\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components in Astro Starlight\nDESCRIPTION: This import statement brings the `Tabs` and `TabItem` components from the `@astrojs/starlight/components` module into the current Astro/MDX file. These components are necessary for creating tabbed interfaces within Starlight documentation.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs-nested.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Disabling Window Frame in Bash Code Block\nDESCRIPTION: Example of how to disable the terminal window frame for a bash code block using the frame attribute set to none.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\necho \"Dies wird trotz Verwendung der Bash-Sprache nicht als Terminal dargestellt\"\n```\n\n----------------------------------------\n\nTITLE: Using Steps Component in MDX (MDX)\nDESCRIPTION: This MDX snippet demonstrates how to use the Steps component to create a styled numbered list for a step-by-step guide. It includes importing the component and wrapping it around list items.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/steps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Steps } from '@astrojs/starlight/components';\n\n<Steps>\n\n1. Import the component into your MDX file:\n\n   ```js\n   import { Steps } from '@astrojs/starlight/components';\n   ```\n\n2. Wrap `<Steps>` around your ordered list items.\n\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Astro Component - JavaScript/Astro\nDESCRIPTION: This code snippet imports the custom ServerCheck Astro component from the specified relative path and mounts it inside the current Astro file. It requires an Astro project setup and assumes that '../../component/ServerCheck.astro' exists and exports a component. The snippet expects the component to handle all UI and state internally, rendering its output when the page is loaded. There are no parameters passed, and its main output is the rendered component. No additional client-side interactivity is shown.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/ssr/src/content/docs/404.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ServerCheck from '../../component/ServerCheck.astro';\n```\n\nLANGUAGE: astro\nCODE:\n```\n<ServerCheck />\n```\n\n----------------------------------------\n\nTITLE: Hiding a Page from Autogenerated Sidebar in Starlight (Markdown)\nDESCRIPTION: Demonstrates how to prevent a page from appearing in an autogenerated sidebar group by setting the `sidebar.hidden` frontmatter field to `true`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page to hide from autogenerated sidebar\nsidebar:\n  hidden: true\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Fontsource Package using npm (Shell)\nDESCRIPTION: This shell command installs the Fontsource package for the 'IBM Plex Serif' font using the npm package manager. This makes the font's CSS files available within the project's `node_modules`.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @fontsource/ibm-plex-serif\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Text and RegEx Highlighting\nDESCRIPTION: Shows the raw Markdown syntax required to highlight specific text and use regular expressions for pattern matching in code blocks.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```js \"einzelne Begriffe\" /Auch.*unterstützt/\n// Auch einzelne Begriffe können hervorgehoben werden\nfunction demo() {\n\treturn 'Auch reguläre Ausdrücke (RegEx) werden unterstützt';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing LinkButton Component in TSX\nDESCRIPTION: Shows how to import the LinkButton component from Starlight components library.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/link-buttons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinkButton } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Filename Comment\nDESCRIPTION: Shows the Markdown syntax needed to create a code block with a filename indicator using a comment in the first line.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n```js\n// meine-test-datei.js\nconsole.log('Hallo Welt!');\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to FileTree Entries (Markdoc)\nDESCRIPTION: This example demonstrates how to add comments to file or directory entries in the FileTree component using Markdoc. It shows the same structure and formatting as the MDX example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/file-tree.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- src\n  - components\n    - Header.astro an **important** file\n    - Title.astro\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Light and Dark Logo Variants (JavaScript)\nDESCRIPTION: Shows how to set up different logo versions for light and dark modes in the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n  title: 'Docs Con Mi Logo',\n  logo: {\n+    light: './src/assets/light-logo.svg',\n+    dark: './src/assets/dark-logo.svg',\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Displaying Official Astro Videos with YouTubeGrid\nDESCRIPTION: This snippet uses the custom `YouTubeGrid` component to display official videos related to Astro and Starlight. It passes an array of video objects, each containing `href`, `title`, and `description`, to the component's `videos` prop.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/community-content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n<YouTubeGrid\n\tvideos={[\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=5u0Ds7wzUeI',\n\t\t\ttitle: 'Starlight by Astro',\n\t\t\tdescription: 'Watch the official Starlight launch video',\n\t\t},\n\t\t{\n\t\t\thref: 'https://www.youtube.com/shorts/zjOWezSzd18',\n\t\t\ttitle: '🌟 SUB 1 MINUTE RUN',\n\t\t\tdescription: 'Watch Ben launch a new Starlight site in under a minute!',\n\t\t},\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Fontsource Package using pnpm (Shell)\nDESCRIPTION: This shell command installs the Fontsource package for the 'IBM Plex Serif' font using the pnpm package manager. This adds the font's CSS files to the project dependencies.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @fontsource/ibm-plex-serif\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML frontmatter block, delimited by '---', is used at the beginning of Markdown or MDX files in frameworks like Astro Starlight to set metadata for the page. Here, it sets the page's title to 'Home Page' and enables the display of the last updated timestamp by setting 'lastUpdated' to true.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/git/src/content/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Home Page\nlastUpdated: true\n---\n```\n\n----------------------------------------\n\nTITLE: Link Card Grid in Markdoc\nDESCRIPTION: Demonstrates the Markdoc syntax for creating a grid of link cards.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% cardgrid %}\n{% linkcard title=\"Authoring Markdown\" href=\"/guides/authoring-content/\" /%}\n\n{% linkcard title=\"Components\" href=\"/components/using-components/\" /%}\n{% /cardgrid %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Frontmatter in Astro\nDESCRIPTION: This YAML block at the beginning of the Astro file defines metadata for the page. It sets the 'title' that appears in the browser tab/window, a 'description' often used for SEO, and a 'sidebar' object specifying the 'label' used in the site's navigation.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/showcase.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Starlight Showcase\ndescription: Discover sites built with Starlight!\nsidebar:\n  label: Site Showcase\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Diff with Language Highlighting\nDESCRIPTION: Shows the Markdown syntax required to create a diff view with language-specific syntax highlighting for JavaScript.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```diff lang=\"js\"\n  function thisIsJavaScript() {\n    // Dieser gesamte Block wird als JavaScript hervorgehoben,\n    // und wir können ihm immer noch Diff-Markierungen hinzufügen!\n-   console.log('Zu entfernender alter Code')\n+   console.log('Neuer, glänzender Code!')\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to FileTree Entries (MDX)\nDESCRIPTION: Illustrates how to add comments to files or directories in the FileTree component using MDX syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport { FileTree } from '@astrojs/starlight/components';\n\n<FileTree>\n\n- src\n  - components\n    - Header.astro un archivo **importante**\n    - Title.astro\n\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Attributes to Starlight Sidebar Links\nDESCRIPTION: This snippet demonstrates how to add custom HTML attributes to a sidebar link in Starlight. It shows how to set a target attribute to open the link in a new tab and apply custom styling.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/sidebar.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tsidebar: [\n\t\t{\n\t\t\tlabel: 'Resources',\n\t\t\titems: [\n\t\t\t\t// An external link to the NASA website opening in a new tab.\n\t\t\t\t{\n\t\t\t\t\tlabel: 'NASA',\n\t\t\t\t\tlink: 'https://www.nasa.gov/',\n\t\t\t\t\tattrs: { target: '_blank', style: 'font-style: italic' },\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Community Videos with YouTubeGrid\nDESCRIPTION: Similar to the previous example, this snippet employs the `YouTubeGrid` component, but this time it displays a curated list of community-created videos and live streams about Starlight. An array of video objects (with `href`, `title`, `description`) is passed via the `videos` prop.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/resources/community-content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n<YouTubeGrid\n\tvideos={[\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=sF6UcV3moZg',\n\t\t\ttitle: 'Building docs with Starlight and Astro',\n\t\t\tdescription:\n\t\t\t\t'Watch Chris and Alex dive into Starlight on Code with CodingCat.dev',\n\t\t},\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=sWkkHbwDeQc',\n\t\t\ttitle: 'Astro Starlight',\n\t\t\tdescription: 'Introduction to Starlight in under a minute.',\n\t\t},\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=-Ki-1E5gNCk',\n\t\t\ttitle: 'Astro Starlight Documentation Template (build custom app docs!)',\n\t\t\tdescription: 'Get a new Starlight site up and running in about 5 minutes',\n\t\t},\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=12o7WxjAxjM',\n\t\t\ttitle: 'Include Starlight docs in a Next.js project with proxies',\n\t\t\tdescription:\n\t\t\t\t'Set up Starlight as a sub-directory project inside a Next.js website',\n\t\t},\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=5pq80drDrNs',\n\t\t\ttitle: \"I Recreated Shadcn's Docs In 30 Minutes With This Amazing Tool\",\n\t\t\tdescription:\n\t\t\t\t'In this video I go over what makes Starlight so cool and why you may want to give it a try on your next project.',\n\t\t},\n\t\t{\n\t\t\thref: 'https://www.youtube.com/watch?v=Q1E4Gkt63ko',\n\t\t\ttitle: 'Astro Starlight and emoji-blast with Chris Swithinbank',\n\t\t\tdescription:\n\t\t\t\t\"Wherein Chris, the creator of Astro's Starlight framework-on-a-framework, walks me through setting it up for a new emoji-blast website. 🌟 🎇\",\n\t\t},\n\t]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Title and Frame Attributes in Markdown Code Blocks (Markdown with Markdoc Fence Attributes)\nDESCRIPTION: This code snippet illustrates the use of the title and frame attributes in a markdown code block for Expressive Code features. The code block is rendered with a terminal frame styled with a custom title. Requires Expressive Code support in the Astro project. The inner code logs 'Hello, world!' to the console. Meta attributes are provided in the code fence for further customization.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/markdoc/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: mdoc\nCODE:\n```\n```js {% title=\"editor.exe\" frame=\"terminal\" %}\nconsole.log('Hello, world!');\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an Unsynchronized Tab Group (Example 2)\nDESCRIPTION: This snippet shows another independent set of tabs created using the `Tabs` and `TabItem` components. It illustrates that multiple `Tabs` instances on the same page function independently (unsynchronized) from each other.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs-unsynced.mdx#2025-04-22_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs>\n\t<TabItem label=\"one\">tab 1</TabItem>\n\t<TabItem label=\"two\">tab 2</TabItem>\n\t<TabItem label=\"three\">tab 3</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Staggered Card Grid in Markdoc\nDESCRIPTION: Demonstrates the Markdoc syntax for creating a staggered grid layout.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/card-grids.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdoc\nCODE:\n```\n{% cardgrid stagger=true %}\n{% card title=\"Check this out\" icon=\"open-book\" %}\nInteresting content you want to highlight.\n{% /card %}\n\n{% card title=\"Other feature\" icon=\"information\" %}\nMore information you want to share.\n{% /card %}\n{% /cardgrid %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Insertion and Deletion Markers\nDESCRIPTION: Shows the Markdown syntax needed to mark text as inserted or deleted in a code block using the ins and del attributes.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```js \"return true;\" ins=\"eingefügte\" del=\"gelöschte\"\nfunction demo() {\n\tconsole.log('Dies sind eingefügte und gelöschte Markertypen');\n\t// Die return-Anweisung verwendet den Standard-Markierungstyp\n\treturn true;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Asides with Markdoc Syntax\nDESCRIPTION: This example shows how to create asides using Markdoc syntax instead of the component approach. It demonstrates the same functionality as the MDX example but with Markdoc's tag-based syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/asides.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdoc\nCODE:\n```\n{% aside %}\nContenido en un apartado.\n{% /aside %}\n\n{% aside type=\"caution\" %}\nContenido de precaución.\n{% /aside %}\n\n{% aside type=\"tip\" %}\nOtro tipo de contenido también es compatible en los apartados.\n\n```js\n// Por ejemplo, un fragmento de código.\n```\n{% /aside %}\n\n{% aside type=\"danger\" %}\nNo des tu contraseña a nadie.\n{% /aside %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Table of Contents for a Page in Starlight (Markdown)\nDESCRIPTION: Illustrates how to completely hide the table of contents on a specific page by setting the `tableOfContents` frontmatter field to `false` in Starlight.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/frontmatter.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n---\n# src/content/docs/example.md\ntitle: Page with no table of contents\ntableOfContents: false\n---\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Badge in Markdoc\nDESCRIPTION: Demonstrates custom badge styling using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/components/badges.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdoc\nCODE:\n```\n{% badge text=\"Custom\" variant=\"success\" style=\"font-style: italic;\" /%}\n```\n\n----------------------------------------\n\nTITLE: Astro Config with TrailingSlash Example\nDESCRIPTION: Configuration example showing how to preserve Starlight's previous trailing slash behavior by setting the trailingSlash option in astro.config.mjs.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n  trailingSlash: 'always',\n  integrations: [\n    starlight({\n      // ...\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Synchronized Tabs with Astro Starlight – JSX\nDESCRIPTION: This snippet illustrates the use of Astro Starlight's Tabs and TabItem components within Markdown/JSX to create synchronized tab sections. By assigning the same syncKey (\\\"things\\\") to separate Tabs groups, both sets reflect the same active tab selection, even though each contains different content lengths. The code expects the @astrojs/starlight package and proper Astro project configuration. The \\\"label\\\" property on TabItem defines the tab title; switching a tab in one group synchronizes selection in the other group. Inputs are provided using JSX, and the UI renders the associated tab content. The key limitation is that sync only works across groups sharing the same syncKey.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs-variable-height.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs syncKey=\\\"things\\\">\n<TabItem label=\\\"A\\\">\n\nA little bit of text.\n\n</TabItem>\n<TabItem label=\\\"B\\\">\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\n</TabItem>\n</Tabs>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs syncKey=\\\"things\\\">\n<TabItem label=\\\"A\\\">\n\nA little bit of text.\n\n</TabItem>\n<TabItem label=\\\"B\\\">\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\nA lot more text.\n\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Route Middleware in Astro Config\nDESCRIPTION: Shows how to set up multiple route middleware handlers in the Astro configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/route-data.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Mi sitio con múltiples middleware',\n\t\t\trouteMiddleware: ['./src/middleware-one.ts', './src/middleware-two.ts'],\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Hero Image Configuration Breaking Change\nDESCRIPTION: Example showing stricter hero.image schema configuration. The hero.image.html property can no longer be used with hero.image.alt or hero.image.file properties.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\nhero:\n  image:\n    # Can only use either html OR file+alt, not both\n    html: \"<svg>...</svg>\" \n    file: \"./hero.png\"\n    alt: \"Hero description\"\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in FileTree (Markdoc)\nDESCRIPTION: Shows how to use placeholders in the FileTree component to indicate additional content without specifying all items explicitly in Markdoc.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_8\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- src\n  - components\n    - Header.astro\n    - …\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example in Asides\nDESCRIPTION: This is a simple JavaScript code snippet that demonstrates how code examples can be embedded within Aside components in documentation.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/asides.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Por ejemplo, un fragmento de código.\n```\n\n----------------------------------------\n\nTITLE: Creating Note Asides\nDESCRIPTION: Example of creating a note aside with nested code block using Starlight's custom syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\nStarlight is a documentation website toolkit built with [Astro](https://astro.build/). You can get started with this command:\n\n```sh\nnpm create astro@latest -- --template starlight\n```\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Adding Title Attribute (Markdoc Syntax)\nDESCRIPTION: Shows the Markdoc syntax for adding a title to a bash code block's terminal frame using the `{% title=\"...\" %}` tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_24\n\nLANGUAGE: markdoc\nCODE:\n```\n````markdoc\n```bash {% title=\"Installing dependencies…\" %}\nnpm install\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Updating Hero Component Action Button in Frontmatter\nDESCRIPTION: Example of updating hero component action buttons to include the 'variant' property with 'minimal' value to preserve previous appearance.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhero:\n  actions:\n    - text: View on GitHub\n      link: https://github.com/astronaut/my-project\n      icon: external\n+     variant: minimal\n```\n\n----------------------------------------\n\nTITLE: Default English DocSearch UI Translations (JSON)\nDESCRIPTION: Provides the default English key-value pairs for the Algolia DocSearch user interface elements. These keys should be used when creating translation files (e.g., `src/content/i18n/fr.json`) for other languages within the Starlight i18n system.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"src/content/i18n/en.json\"\n{\n\t\"docsearch.searchBox.resetButtonTitle\": \"Clear the query\",\n\t\"docsearch.searchBox.resetButtonAriaLabel\": \"Clear the query\",\n\t\"docsearch.searchBox.cancelButtonText\": \"Cancel\",\n\t\"docsearch.searchBox.cancelButtonAriaLabel\": \"Cancel\",\n\t\"docsearch.searchBox.searchInputLabel\": \"Search\",\n\n\t\"docsearch.startScreen.recentSearchesTitle\": \"Recent\",\n\t\"docsearch.startScreen.noRecentSearchesText\": \"No recent searches\",\n\t\"docsearch.startScreen.saveRecentSearchButtonTitle\": \"Save this search\",\n\t\"docsearch.startScreen.removeRecentSearchButtonTitle\": \"Remove this search from history\",\n\t\"docsearch.startScreen.favoriteSearchesTitle\": \"Favorite\",\n\t\"docsearch.startScreen.removeFavoriteSearchButtonTitle\": \"Remove this search from favorites\",\n\n\t\"docsearch.errorScreen.titleText\": \"Unable to fetch results\",\n\t\"docsearch.errorScreen.helpText\": \"You might want to check your network connection.\",\n\n\t\"docsearch.footer.selectText\": \"to select\",\n\t\"docsearch.footer.selectKeyAriaLabel\": \"Enter key\",\n\t\"docsearch.footer.navigateText\": \"to navigate\",\n\t\"docsearch.footer.navigateUpKeyAriaLabel\": \"Arrow up\",\n\t\"docsearch.footer.navigateDownKeyAriaLabel\": \"Arrow down\",\n\t\"docsearch.footer.closeText\": \"to close\",\n\t\"docsearch.footer.closeKeyAriaLabel\": \"Escape key\",\n\t\"docsearch.footer.searchByText\": \"Search by\",\n\n\t\"docsearch.noResultsScreen.noResultsText\": \"No results for\",\n\t\"docsearch.noResultsScreen.suggestedQueryText\": \"Try searching for\",\n\t\"docsearch.noResultsScreen.reportMissingResultsText\": \"Believe this query should return results?\",\n\t\"docsearch.noResultsScreen.reportMissingResultsLinkText\": \"Let us know.\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Default 404 Route (JavaScript)\nDESCRIPTION: Shows how to disable Starlight's default 404 route to use a fully custom 404 page layout.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs With Custom 404',\n\t\t\tdisable404Route: true,\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Window Frame (Markdoc Syntax)\nDESCRIPTION: Shows the Markdoc syntax for disabling the window frame for a bash code block using the `{% frame=\"none\" %}` tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_27\n\nLANGUAGE: markdoc\nCODE:\n```\n````markdoc\n```bash {% frame=\"none\" %}\necho \"This is not rendered as a terminal despite using the bash language\"\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with PNPM\nDESCRIPTION: Command to create a new Astro project with Starlight template using PNPM package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm create astro --template starlight\n```\n\n----------------------------------------\n\nTITLE: Using HTML Details Element in Markdown\nDESCRIPTION: Demonstrates how to use standard HTML `<details>` and `<summary>` elements within Markdown content to create collapsible disclosure widgets (accordions).\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_28\n\nLANGUAGE: md\nCODE:\n```\n```md\n<details>\n<summary>Where and when is the Andromeda constellation most visible?</summary>\n\nThe [Andromeda constellation](<https://en.wikipedia.org/wiki/Andromeda_(constellation)>) is most visible in the night sky during the month of November at latitudes between `+90°` and `−40°`.\n\n</details>\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Disabling Frames\nDESCRIPTION: Shows the Markdown syntax needed to create a bash code block without the default terminal frame by using the frame attribute.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n```bash frame=\"none\"\necho \"Dies wird trotz Verwendung der Bash-Sprache nicht als Terminal dargestellt\"\n```\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in JS (Markdoc Syntax)\nDESCRIPTION: Shows the Markdoc syntax for highlighting lines 2-3 in a JavaScript code block using the `{% meta=\"{2-3}\" %}` tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_9\n\nLANGUAGE: markdoc\nCODE:\n```\n````markdoc\n```js {% meta=\"{2-3}\" %}\nfunction demo() {\n\t// This line (#2) and the next one are highlighted\n\treturn 'This is line #3 of this snippet';\n}\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Badge in Markdown Frontmatter\nDESCRIPTION: Example showing how to add a badge to a page title in the sidebar using frontmatter configuration\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/reference/frontmatter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# src/content/docs/example.md\ntitle: Página con una insignia\nsidebar:\n  badge:\n    text: Experimental\n    variant: caution\n---\n```\n\n----------------------------------------\n\nTITLE: Integrating New Grammars in Starlight Configuration\nDESCRIPTION: Diff showing how to update the Starlight configuration to include additional grammar files for syntax highlighting. The example demonstrates adding a new grammar file to the existing configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/grammars/README.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nstarlight({\n  expressiveCode: {\n    shiki: {\n      langs: [\n        JSON.parse(\n          fs.readFileSync('./grammars/existing.tmLanguage.json', 'utf-8'),\n+         fs.readFileSync('./grammars/new.tmLanguage.json', 'utf-8'),\n        ),\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Page Title Override\nDESCRIPTION: Example frontmatter showing how to override the default page title behavior using the head property.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My Page\nhead:\n  - tag: title\n    content: Custom Title\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Title Attribute (Markdown/MDX Syntax)\nDESCRIPTION: Shows the Markdown/MDX syntax for adding a `title` attribute to a bash code block to display a title in the terminal frame.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_23\n\nLANGUAGE: md\nCODE:\n```\n````md\n```bash title=\"Installing dependencies…\"\nnpm install\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with Yarn\nDESCRIPTION: Command to create a new Astro project with Starlight template using Yarn package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn create astro --template starlight\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Markdoc Integration with npm\nDESCRIPTION: Command to add the Markdoc integration to an existing Astro project using npm package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nnpx astro add markdoc\n```\n\n----------------------------------------\n\nTITLE: Upgrading Project Dependencies using Astro CLI (Shell)\nDESCRIPTION: This shell command utilizes the Astro upgrade utility to update the project's dependencies, specifically mentioned in the context of ensuring Starlight meets the minimum required version for `@astrojs/starlight-tailwind` updates (e.g., v0.30.0 for 3.0.0, v0.34.0 for 4.0.0).\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/tailwind/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @astrojs/upgrade\n```\n\n----------------------------------------\n\nTITLE: Combining Diff Syntax with JavaScript Highlighting\nDESCRIPTION: Demonstrates using `diff` language identifier with a `lang=\"js\"` attribute to apply JavaScript syntax highlighting while also using `+` and `-` prefixes for diff-like line highlighting. This is the rendered output example.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"js\"\n  function thisIsJavaScript() {\n    // This entire block gets highlighted as JavaScript,\n    // and we can still add diff markers to it!\n-   console.log('Old code to be removed')\n+   console.log('New and shiny code!')\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Astro Component in Markdown - Astro\nDESCRIPTION: This snippet imports the ServerCheck component from the specified path and renders it inline within the document. It requires an Astro project setup with the ServerCheck component available at '../../component/ServerCheck.astro'. No parameters are passed to the component, and its output depends on the internal implementation of ServerCheck. The snippet demonstrates integrating Astro components into Markdown content.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/ssr/src/content/docs/demo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport ServerCheck from '../../component/ServerCheck.astro';\n\n<ServerCheck />\n```\n\n----------------------------------------\n\nTITLE: Using Heading Anchor Links\nDESCRIPTION: Demonstrates how to use and reference anchor links generated from Markdown headings.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My page of content\ndescription: How to use Starlight's built-in anchor links\n---\n\n## Introduction\n\nI can link to [my conclusion](#conclusion) lower on the same page.\n\n## Conclusion\n\n`https://my-site.com/page1/#introduction` navigates directly to my Introduction.\n```\n\n----------------------------------------\n\nTITLE: Updating Starlight with Yarn\nDESCRIPTION: Command to update Starlight and other Astro packages using Yarn package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn dlx @astrojs/upgrade\n```\n\n----------------------------------------\n\nTITLE: Common NPM Commands for Managing the Starlight Project\nDESCRIPTION: Lists essential NPM commands for managing the Astro Starlight project lifecycle. `npm install` fetches dependencies. `npm run dev` starts the local development server. `npm run build` creates a production-ready build in the `./dist/` directory. `npm run preview` serves the production build locally. `npm run astro` allows running Astro CLI commands directly.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/markdoc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                   | Action                                           |\\n| :------------------------ | :----------------------------------------------- |\\n| `npm install`             | Installs dependencies                            |\\n| `npm run dev`             | Starts local dev server at `localhost:4321`      |\\n| `npm run build`           | Build your production site to `./dist/`          |\\n| `npm run preview`         | Preview your build locally, before deploying     |\\n| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |\\n| `npm run astro -- --help` | Get help using the Astro CLI                     |\n```\n\n----------------------------------------\n\nTITLE: Upgrading Astro Starlight and Markdoc Packages (Shell)\nDESCRIPTION: This shell command upgrades the Starlight and Starlight Markdoc packages to their latest compatible versions using the @astrojs/upgrade tool. No parameters are required. Expected to be executed in a terminal within the project root. On successful execution, project dependencies will be updated to recommended versions. Prerequisite: npm must be installed.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/markdoc/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @astrojs/upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating a New Astro Starlight Markdoc Project via NPM\nDESCRIPTION: This command uses the `npm create astro` utility to initialize a new Astro project. The `--template starlight/markdoc` argument specifies that the project should be based on the official Starlight starter kit configured for Markdoc usage. Running this command scaffolds the project structure and necessary configuration files.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/markdoc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest -- --template starlight/markdoc\n```\n\n----------------------------------------\n\nTITLE: Creating an H3 Anchor Heading in Markdown\nDESCRIPTION: This Markdown snippet defines a level 3 heading (H3). Similar to H2 headings, this syntax typically creates an anchor link (`id`) derived from the heading text (e.g., 'another-anchor-heading'), facilitating navigation within the document.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/anchor-heading.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Another anchor heading\n```\n\n----------------------------------------\n\nTITLE: Splash Template Configuration\nDESCRIPTION: Example frontmatter for configuring a splash page template and disabling footer elements.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Landing page\ntemplate: splash\n# Disable unwanted footer elements as needed\neditUrl: false\nlastUpdated: false\nprev: false\nnext: false\n---\n```\n\n----------------------------------------\n\nTITLE: Building Production Site with npm\nDESCRIPTION: Runs the `build` script (typically `astro build`) defined in `package.json`. This command compiles the Astro and Starlight project into optimized static files ready for deployment, usually outputting to the `./dist/` directory.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight DocSearch Plugin using Yarn (Shell)\nDESCRIPTION: Provides the Yarn command to install the `@astrojs/starlight-docsearch` package for integrating Algolia DocSearch into a Starlight project.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/site-search.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn add @astrojs/starlight-docsearch\n```\n```\n\n----------------------------------------\n\nTITLE: Running Astro CLI Commands via npm\nDESCRIPTION: Provides a way to execute arbitrary Astro CLI commands (e.g., `astro add`, `astro check`) using npm as a runner. Replace `...` with the specific Astro command and its arguments. The `npm run astro` part refers to a potential script in `package.json`.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run astro ...\n```\n\n----------------------------------------\n\nTITLE: Creating Starlight/Markdoc Project with npm\nDESCRIPTION: Shell command to initialize a new Astro Starlight project pre-configured with Markdoc support using the `npm create astro` command.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpm create astro@latest -- --template starlight/markdoc\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Starlight/Markdoc Project with Yarn\nDESCRIPTION: Shell command to initialize a new Astro Starlight project pre-configured with Markdoc support using the `yarn create astro` command.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn create astro --template starlight/markdoc\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Astro CLI Help via npm\nDESCRIPTION: Runs the Astro CLI help command through npm. The `--` ensures that the `--help` flag is passed directly to the underlying `astro` command rather than being interpreted by npm itself.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run astro -- --help\n```\n\n----------------------------------------\n\nTITLE: Installing Fontsource Package using Yarn (Shell)\nDESCRIPTION: This shell command installs the Fontsource package for the 'IBM Plex Serif' font using the Yarn package manager. This incorporates the font's CSS files into the project.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/customization.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @fontsource/ibm-plex-serif\n```\n\n----------------------------------------\n\nTITLE: Restoring Table of Contents Highlight Styles\nDESCRIPTION: CSS snippet to preserve previous table of contents highlighting behavior that was updated to prevent UI shifts\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\nstarlight-toc a[aria-current='true'],\nstarlight-toc a[aria-current='true']:hover,\nstarlight-toc a[aria-current='true']:focus {\n  font-weight: 600;\n  color: var(--sl-color-text-invert);\n  background-color: var(--sl-color-text-accent);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AnchorHeading Component in Astro - Astro\nDESCRIPTION: Imports the AnchorHeading component from the @astrojs/starlight/components/AnchorHeading.astro package. This import is necessary before using the AnchorHeading element in the Astro file. No configuration parameters are required, but the package must be installed as a dependency for successful import.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/anchor-heading-component.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport AnchorHeading from '@astrojs/starlight/components/AnchorHeading.astro';\n```\n\n----------------------------------------\n\nTITLE: Fallback Syntax Highlighting Theme CSS Variables - CSS\nDESCRIPTION: Provides a CSS block for customizing the appearance of code blocks using previously used variables for syntax highlighting fallback. Designed for use in a CSS file or style section, with variables set on the :root pseudo-class for easy theme overrides. Inputs are CSS variable assignments; no explicit outputs. This is primarily relevant if migrating from the prior built-in fallback theme and customizing Expressive Code or Shiki output.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --astro-code-foreground: var(--sl-color-white);\n  --astro-code-background: var(--sl-color-gray-6);\n  --astro-code-token-constant: var(--sl-color-blue-high);\n  --astro-code-token-string: var(--sl-color-green-high);\n  --astro-code-token-comment: var(--sl-color-gray-2);\n  --astro-code-token-keyword: var(--sl-color-purple-high);\n  --astro-code-token-parameter: var(--sl-color-red-high);\n  --astro-code-token-function: var(--sl-color-red-high);\n  --astro-code-token-string-expression: var(--sl-color-green-high);\n  --astro-code-token-punctuation: var(--sl-color-gray-2);\n  --astro-code-token-link: var(--sl-color-blue-high);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind v4 using Astro CLI (Shell)\nDESCRIPTION: This shell command uses the Astro CLI to add and configure Tailwind v4. It installs the necessary packages (`tailwindcss`, `@tailwindcss/vite`) required for using Tailwind v4 with Astro, replacing the need for the older `@astrojs/tailwind` integration.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/tailwind/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx astro add tailwind\n```\n\n----------------------------------------\n\nTITLE: Defining UI Translation Strings in a TypeScript File\nDESCRIPTION: Shows a TypeScript file (`ui-strings.ts`) exporting an object `UIStrings` which contains nested objects for different languages (e.g., 'en', 'fr'). Each language object holds the key-value pairs for the UI translation strings used by the plugin.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const UIStrings = {\n  en: { 'myPlugin.doThing': 'Do the thing' },\n  fr: { 'myPlugin.doThing': 'Faire le truc' },\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlight Repository (Shell)\nDESCRIPTION: Command to clone the forked Starlight repository to the local machine. Replace 'YOUR-USERNAME' with the actual GitHub username.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/starlight.git\n```\n\n----------------------------------------\n\nTITLE: Upgrading Astro and Starlight Dependencies - shell\nDESCRIPTION: Lists the command-line instruction to upgrade Astro (and likely Starlight) to their latest compatible versions. Intended for use at a shell prompt via tools like npm or npx. This is required after breaking changes in the minimum version for Astro compatibility in Starlight. No inputs apart from running the command in the project directory; output is an updated set of dependencies.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx @astrojs/upgrade\n```\n\n----------------------------------------\n\nTITLE: Mocking Content Collections for Testing (JavaScript)\nDESCRIPTION: Example of mocking Astro content collections for unit testing using Vi and the mockedAstroContent helper.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe, expect, test, vi } from 'vitest';\n\nvi.mock('astro:content', async () =>\n  (await import('../test-utils')).mockedAstroContent({\n    docs: [\n      ['index.mdx', { title: 'Home Page' }],\n      ['environmental-impact.md', { title: 'Eco-friendly docs' }],\n    ],\n    i18n: [['en', { 'page.editLink': 'Modify this doc!' }]],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Line Height in CSS\nDESCRIPTION: CSS code snippet for preserving the previous line-height value in Starlight. This can be added to custom CSS to maintain the line height of 1.8 when upgrading to a newer version.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --sl-line-height: 1.8;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Credits in Starlight Footer\nDESCRIPTION: This snippet demonstrates how to enable the \"Built with Starlight\" credits link in the site footer by setting the credits option to true.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/configuration.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nstarlight({\n\tcredits: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Link Checker for Docs (Shell)\nDESCRIPTION: Commands to change directory to docs and run the link checker.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd docs\npnpm linkcheck\n```\n\n----------------------------------------\n\nTITLE: Removing Astro Tailwind v3 Integration (Diff)\nDESCRIPTION: This diff snippet shows the necessary changes in `astro.config.mjs` to remove the `@astrojs/tailwind` integration when upgrading to `@astrojs/starlight-tailwind` v4.0.0, as Tailwind v4 support is handled differently (via a Vite plugin). It involves removing the import and the integration call.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/tailwind/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n // astro.config.mjs\n import { defineConfig } from \"astro/config\";\n import starlight from \"@astrojs/starlight\";\n-import tailwind from \"@astrojs/tailwind\";\n\n export default defineConfig({\n   integrations: [\n     starlight({\n       title: \"Docs with Tailwind\",\n       customCss: [\"./src/tailwind.css\"],\n     }),\n-    tailwind({ applyBaseStyles: false }),\n   ],\n });\n```\n\n----------------------------------------\n\nTITLE: Creating E2E Test Factory (TypeScript)\nDESCRIPTION: Example of creating an E2E test factory using the testFactory helper to define a fixture for testing.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testFactory } from './test-utils';\n\nconst test = await testFactory('./fixtures/basics/');\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight Markdoc Preset with npm\nDESCRIPTION: Command to install the Starlight Markdoc preset package using npm package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @astrojs/starlight-markdoc\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight Markdoc Preset with pnpm\nDESCRIPTION: Command to install the Starlight Markdoc preset package using pnpm package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @astrojs/starlight-markdoc\n```\n\n----------------------------------------\n\nTITLE: Defining Vitest Config for Test Environment (TypeScript)\nDESCRIPTION: Example of defining a Vitest configuration for a specific test environment using the defineVitestConfig helper.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineVitestConfig } from '../test-config';\n\nexport default defineVitestConfig({\n  title: 'Basics',\n});\n```\n\n----------------------------------------\n\nTITLE: Fix for Badge Component Trailing Space Issue\nDESCRIPTION: Example showing how to fix code that might be affected by the removal of trailing spaces in the Badge component. This requires adding an explicit space after the component.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge text=\"New\" />Feature\n+ <Badge text=\"New\" /> Feature\n```\n\n----------------------------------------\n\nTITLE: Updating Component Override Example from Props to Locals\nDESCRIPTION: Example demonstrating how to refactor a component override for Starlight's LastUpdated component to use Astro.locals instead of Astro.props following a breaking change in v0.32.0.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n---\nimport Default from '@astrojs/starlight/components/LastUpdated.astro';\n- import type { Props } from '@astrojs/starlight/props';\n\n- const { lastUpdated } = Astro.props;\n+ const { lastUpdated } = Astro.locals.starlightRoute;\n\nconst updatedThisYear = lastUpdated?.getFullYear() === new Date().getFullYear();\n---\n\n{updatedThisYear && (\n-   <Default {...Astro.props}><slot /></Default>\n+   <Default><slot /></Default>\n)}\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands for Starlight Project\nDESCRIPTION: List of essential commands for managing the Starlight documentation project, including installation, development server startup, building, previewing, and CLI operations.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run preview\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run astro ...\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run astro --help\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Base Styles for v4 (Diff)\nDESCRIPTION: This diff illustrates how to update the base Tailwind CSS file (e.g., `src/tailwind.css`) for Tailwind v4 compatibility with Starlight. It replaces the old `@tailwind` directives with `@layer` definitions and imports specific CSS files for base styles, Starlight Tailwind integration, theme, and utilities. It also introduces the `@theme` block for Starlight customizations.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/tailwind/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n /* src/tailwind.css */\n-@tailwind base;\n-@tailwind components;\n-@tailwind utilities;\n+@layer base, starlight, theme, components, utilities;\n+\n+@import '@astrojs/starlight-tailwind';\n+@import 'tailwindcss/theme.css' layer(theme);\n+@import 'tailwindcss/utilities.css' layer(utilities);\n+\n+@theme {\n+\t/*\n+\tConfigure your Tailwind theme that will be used by Starlight.\n+\thttps://starlight.astro.build/guides/css-and-tailwind/#styling-starlight-with-tailwind\n+\t*/\n+}\n+\n+/*\n+Add additional Tailwind styles to this file:\n+https://tailwindcss.com/docs/adding-custom-styles#using-custom-css\n+*/\n```\n\n----------------------------------------\n\nTITLE: Showcase Site Card Component Addition\nDESCRIPTION: Example of adding a new showcase site entry to the Card component list in showcase-sites.astro\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<Card title=\"Example\" href=\"https://example.net\" thumbnail=\"example.net.png\" />\n<Card title=\"Last Example\" href=\"https://example.org\" thumbnail=\"example.org.png\" />\n+ <Card title=\"New Example\" href=\"https://example.com\" thumbnail=\"example.com.png\" />\n</FluidGrid>\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Markdoc Integration with Yarn\nDESCRIPTION: Command to add the Markdoc integration to an existing Astro project using Yarn package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/guides/authoring-content.mdx#2025-04-22_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nyarn astro add markdoc\n```\n\n----------------------------------------\n\nTITLE: Restoring LinkCard Line Height in CSS\nDESCRIPTION: CSS snippet to preserve previous line-height (1.6) for LinkCard components after a style update\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.sl-link-card a {\n  line-height: 1.6;\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Output for useTranslations Example (Shell)\nDESCRIPTION: Shows the expected shell output when using the useTranslations function to log a translated message in Simplified Chinese.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/reference/plugins.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n[plugin-use-translations] 基于 Starlight 构建\n```\n\n----------------------------------------\n\nTITLE: Upgrading Starlight via @astrojs/upgrade Command Line (shell)\nDESCRIPTION: This shell snippet demonstrates how to upgrade your Starlight project using the official @astrojs/upgrade CLI command. The command should be executed in the terminal at the root of your project and requires Node.js and npm installed. Running this will automatically update your project to match the required minimum version of Starlight, applying all relevant migrations and configuration changes as necessary. Input: none; Output: the project is upgraded in-place as per the tool documentation. This command must be run whenever a breaking change increases the minimum required Starlight version.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/docsearch/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @astrojs/upgrade\n\n```\n\n----------------------------------------\n\nTITLE: Hiding Guideline for Final Step in CSS\nDESCRIPTION: CSS snippet to hide the guideline for the final step in <Steps> lists, preserving previous behavior.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* Hide the guideline for the final step in <Steps> lists. */\n.sl-steps > li:last-of-type::after {\n  background: transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Theme Customizations to Tailwind v4 (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to migrate theme customizations from a Tailwind v3 `tailwind.config.mjs` file to the `@theme` block within the main Tailwind CSS file (e.g., `src/tailwind.css`) when using Tailwind v4 with Starlight. It shows defining custom CSS variables for colors and fonts.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/tailwind/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* src/tailwind.css */\n@layer base, starlight, theme, components, utilities;\n\n@import '@astrojs/starlight-tailwind';\n@import 'tailwindcss/theme.css' layer(theme);\n@import 'tailwindcss/utilities.css' layer(utilities);\n\n@theme {\n  /* Custom accent colors. */\n  --color-accent-50: var(--color-fuchsia-50);\n  --color-accent-100: var(--color-fuchsia-100);\n  --color-accent-200: var(--color-fuchsia-200);\n  --color-accent-300: var(--color-fuchsia-300);\n  --color-accent-400: var(--color-fuchsia-400);\n  --color-accent-500: var(--color-fuchsia-500);\n  --color-accent-600: var(--color-fuchsia-600);\n  --color-accent-700: var(--color-fuchsia-700);\n  --color-accent-800: var(--color-fuchsia-800);\n  --color-accent-900: var(--color-fuchsia-900);\n  --color-accent-950: var(--color-fuchsia-950);\n  /* Custom gray scale. */\n  --color-gray-50: var(--color-slate-50);\n  --color-gray-100: var(--color-slate-100);\n  --color-gray-200: var(--color-slate-200);\n  --color-gray-300: var(--color-slate-300);\n  --color-gray-400: var(--color-slate-400);\n  --color-gray-500: var(--color-slate-500);\n  --color-gray-600: var(--color-slate-600);\n  --color-gray-700: var(--color-slate-700);\n  --color-gray-800: var(--color-slate-800);\n  --color-gray-900: var(--color-slate-900);\n  --color-gray-950: var(--color-slate-950);\n  /* Custom text font. */\n  --font-sans: 'Atkinson Hyperlegible';\n  /* Custom code font. */\n  --font-mono: 'IBM Plex Mono';\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build with npm\nDESCRIPTION: Executes the `preview` script (typically `astro preview`) defined in `package.json`. This command serves the contents of the production build directory (`./dist/`) locally, allowing you to test the final site before deploying it.\nSOURCE: https://github.com/withastro/starlight/blob/main/examples/basics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Creating an H2 Anchor Heading in Markdown\nDESCRIPTION: This Markdown snippet defines a level 2 heading (H2). In many Markdown processors and static site generators like Astro Starlight, this automatically generates an anchor link (`id`) based on the heading text (e.g., 'an-anchor-heading'), allowing direct linking to this section of the document.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/anchor-heading.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## An anchor heading\n```\n\n----------------------------------------\n\nTITLE: Creating Details/Disclosure Elements in Markdown\nDESCRIPTION: Example of how to create a collapsible details/disclosure element in Markdown using the HTML details and summary tags. Allows hiding content that can be expanded when needed.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary>Wo und wann ist das Sternbild Andromeda am besten zu sehen?</summary>\n\nDas Sternbild [Andromeda](<https://de.wikipedia.org/wiki/Andromeda_(Sternbild)>) ist am Nachthimmel im Monat November in Breitengraden zwischen `+90°` und `−40°` am besten sichtbar.\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Translating the Starlight Site Title per Locale in JavaScript\nDESCRIPTION: Shows how to provide different site titles for each configured language in Starlight, presented as a diff. Instead of a single string, the `title` option in `astro.config.mjs` accepts an object mapping locale keys (e.g., 'en', 'it') to their respective translated titles.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n-\t\t\ttitle: 'My Docs',\n+\t\t\ttitle: {\n+\t\t\t\ten: 'My Docs',\n+\t\t\t\tit: 'I Miei Documenti',\n+\t\t\t},\n\t\t\tdefaultLocale: 'en',\n\t\t\tlocales: {\n\t\t\t\ten: { label: 'English' },\n\t\t\t\tit: { label: 'Italiano', lang: 'it' },\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Changeset (Shell)\nDESCRIPTION: Command to add a changeset for describing changes in a pull request.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm exec changeset\n```\n\n----------------------------------------\n\nTITLE: Running Dev Server for Docs (Shell)\nDESCRIPTION: Commands to change directory to docs and start the development server with host flag for GitHub Codespaces.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd docs\npnpm dev --host\n```\n\n----------------------------------------\n\nTITLE: Generating Grammars in Starlight Docs\nDESCRIPTION: Command to generate grammar files from their source files for use in the Starlight documentation website.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/grammars/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm grammars\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in Starlight Integration\nDESCRIPTION: This snippet shows how to configure language support in Starlight by setting defaultLocale and defining supported locales with their respective settings.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/i18n.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Meine Dokumentation',\n\t\t\t// Lege Englisch als Standardsprache für diese Website fest.\n\t\t\tdefaultLocale: 'en',\n\t\t\tlocales: {\n\t\t\t\t// Englische Dokumentation in `src/content/docs/en/`\n\t\t\t\ten: {\n\t\t\t\t\tlabel: 'English',\n\t\t\t\t},\n\t\t\t\t// Vereinfachte chinesische Dokumentation in `src/content/docs/zh-cn/`\n\t\t\t\t'zh-cn': {\n\t\t\t\t\tlabel: '简体中文',\n\t\t\t\t\tlang: 'zh-CN',\n\t\t\t\t},\n\t\t\t\t// Arabische Dokumentation in `src/content/docs/ar/`\n\t\t\t\tar: {\n\t\t\t\t\tlabel: 'العربية',\n\t\t\t\t\tdir: 'rtl',\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Directories for Starlight i18n\nDESCRIPTION: Shows the recommended file structure for organizing documentation content when using Starlight's internationalization features. Each configured locale (e.g., 'ar', 'en', 'zh-cn') requires a corresponding sub-directory within `src/content/docs/` to hold its specific content files.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/it/guides/i18n.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- src/\n  - content/\n    - docs/\n      - ar/\n      - en/\n      - zh-cn/\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server in the theme preview environment\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Synced OS Tabs with Commands in Astro\nDESCRIPTION: Another example of synchronized tabs using `syncKey=\"os\"`. This instance displays corresponding shell commands (`ls` for macOS/Linux, `Get-ChildItem` for Windows) within each OS tab. Selection is synced with other 'os' keyed tabs.\nSOURCE: https://github.com/withastro/starlight/blob/main/packages/starlight/__e2e__/fixtures/basics/src/content/docs/tabs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n<Tabs syncKey=\"os\">\n\t<TabItem label=\"macos\">ls</TabItem>\n\t<TabItem label=\"windows\">Get-ChildItem</TabItem>\n\t<TabItem label=\"linux\">ls</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using the Aside Component in MDX\nDESCRIPTION: This code demonstrates various ways to use the Aside component in MDX, including different types (default, caution, tip, danger) and with nested content such as code blocks.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/asides.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n\n<Aside>Contenido en un apartado.</Aside>\n\n<Aside type=\"caution\">Contenido de precaución.</Aside>\n\n<Aside type=\"tip\">\n\nOtro tipo de contenido también es compatible en los apartados.\n\n```js\n// Por ejemplo, un fragmento de código.\n```\n\n</Aside>\n\n<Aside type=\"danger\">No des tu contraseña a nadie.</Aside>\n```\n\n----------------------------------------\n\nTITLE: Updating Starlight with NPM\nDESCRIPTION: Command to update Starlight and other Astro packages using NPM package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx @astrojs/upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating Starlight with PNPM\nDESCRIPTION: Command to update Starlight and other Astro packages using PNPM package manager.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx @astrojs/upgrade\n```\n\n----------------------------------------\n\nTITLE: Combining Syntax Highlighting with Diff-Like Syntax\nDESCRIPTION: Demonstrates how to combine JavaScript syntax highlighting with diff-like annotations to show code changes with plus and minus signs.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  function thisIsJavaScript() {\n    // Dieser gesamte Block wird als JavaScript hervorgehoben,\n    // und wir können ihm immer noch Diff-Markierungen hinzufügen!\n-   console.log('Zu entfernender alter Code')\n+   console.log('Neuer, glänzender Code!')\n  }\n```\n\n----------------------------------------\n\nTITLE: Markdoc Syntax for Disabling Frames\nDESCRIPTION: Shows the Markdoc syntax needed to create a bash code block without the default terminal frame by using the frame attribute in the meta tag.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/de/guides/authoring-content.mdx#2025-04-22_snippet_19\n\nLANGUAGE: markdoc\nCODE:\n```\n```bash {% frame=\"none\" %}\necho \"Dies wird trotz Verwendung der Bash-Sprache nicht als Terminal dargestellt\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Logo in Astro Config (JavaScript)\nDESCRIPTION: Demonstrates how to add a custom logo to a Starlight site by specifying the logo file path in the Astro configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs Con Mi Logo',\n\t\t\tlogo: {\n+\t\t\t\tsrc: './src/assets/my-logo.svg',\n\t\t\t},\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage (Shell)\nDESCRIPTION: Commands to change directory to Starlight package and run test coverage.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/starlight\npnpm test:coverage\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 404 Page (Markdown)\nDESCRIPTION: Demonstrates how to create a custom 404 error page using Starlight's splash template and hero component.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# src/content/docs/404.md\ntitle: '404'\ntemplate: splash\neditUrl: false\nhero:\n  title: '404'\n  tagline: Página no encontrada. Verifica la URL o intenta usar la barra de búsqueda.\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents Globally (JavaScript)\nDESCRIPTION: Demonstrates how to set global table of contents options for all pages in the Starlight configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/customization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\n\ndefineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Docs con una configuración personalizada de tabla de contenidos',\n\t\t\ttableOfContents: { minHeadingLevel: 2, maxHeadingLevel: 2 },\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Route Data in TypeScript Middleware\nDESCRIPTION: Demonstrates how to update the route data by modifying the page title in a TypeScript middleware function.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/route-data.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRouteMiddleware } from '@astrojs/starlight/route-data';\n\nexport const onRequest = defineRouteMiddleware((context) => {\n\t// Obtiene la entrada de la colección de contenido para esta página.\n\tconst { entry } = context.locals.starlightRoute;\n\t// Actualiza el título para añadir un signo de exclamación.\n\tentry.data.title = entry.data.title + '!';\n});\n```\n\n----------------------------------------\n\nTITLE: Highlighting Entries in FileTree (Markdoc)\nDESCRIPTION: Demonstrates how to highlight specific files or directories in the FileTree component using bold text in Markdoc.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/file-tree.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% filetree %}\n- src\n  - components\n    - **Header.astro**\n    - Title.astro\n{% /filetree %}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests (Shell)\nDESCRIPTION: Commands to change directory to Starlight package and run end-to-end tests.\nSOURCE: https://github.com/withastro/starlight/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/starlight\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Middleware in Astro Config\nDESCRIPTION: Illustrates how to specify the location of the route data middleware file in the Astro configuration.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/guides/route-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\n\nexport default defineConfig({\n\tintegrations: [\n\t\tstarlight({\n\t\t\ttitle: 'Mi increíble sitio de documentación',\n\t\t\trouteMiddleware: './src/routeData.ts',\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Attributes in Markdown Frontmatter\nDESCRIPTION: Example demonstrating how to add HTML attributes to sidebar links using frontmatter configuration\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/reference/frontmatter.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# src/content/docs/example.md\ntitle: Página que se abre en una nueva pestaña\nsidebar:\n  # Abre la página en una nueva pestaña\n  attrs:\n    target: _blank\n---\n```\n\n----------------------------------------\n\nTITLE: LinkCard with Description in Markdoc\nDESCRIPTION: Demonstrates how to create a LinkCard with description using Markdoc syntax.\nSOURCE: https://github.com/withastro/starlight/blob/main/docs/src/content/docs/es/components/link-cards.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdoc\nCODE:\n```\n{% linkcard\n   title=\"Internacionalización\"\n\t href=\"/es/guides/i18n/\"\n\t description=\"Configura Starlight para admitir varios idiomas.\" /%}\n```"
  }
]