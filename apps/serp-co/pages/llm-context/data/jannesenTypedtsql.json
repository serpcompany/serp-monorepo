[
  {
    "owner": "jannesen",
    "repo": "typedtsql",
    "content": "TITLE: Declaring Custom Type and Variable Assignment in TypedTSQL\nDESCRIPTION: Demonstrates creating a custom type 't' with strict typechecking from INT base type and assigning predefined values. Shows how to reference typed values in variable declarations, which get transpiled to standard TSQL.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/decl/type.md#2025-04-21_snippet_0\n\nLANGUAGE: tsql\nCODE:\n```\nTYPE [t]\nFROM INT\nWITH TYPECHECK STRICT\nVALUES (\n\t[a] = 1,\n\t[b] = 2,\n\t[c] = 3\n)\n\nVAR @i = [t]::[b] -- transpiled to DECLARE @i = 2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Type Checking in Typed T-SQL\nDESCRIPTION: This code snippet illustrates the strict type checking level in Typed T-SQL. It defines custom types with strict type checking and shows allowed and disallowed assignments between variables of different types.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/type-name-checking.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nTYPE [relation_id] FROM INT WITH TYPECHECK STRICT\nTYPE [person_id] FROM INT WITH TYPECHECK STRICT\n\nDECLARE @i1 INT\nDECLARE @r1 [relation_id]\nDECLARE @r2 [relation_id]\nDECLARE @p1 [person_id]\n\nSET @r1 = @r2 -- allowed\nSET @p1 = @r2 -- error\nSET @p1 = @i1 -- error\n```\n\n----------------------------------------\n\nTITLE: WEBMETHOD Syntax Definition in TypedTSQL\nDESCRIPTION: Comprehensive syntax definition for creating WEBMETHOD procedures in TypedTSQL. Shows the complete structure including method declaration, parameter definition, authorization options, and procedure body format.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/webservice/webmethod.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWEBMETHOD webservicename::'name'\n    METHOD 'method'\n    (PROXY 'proxymodule:name' | \n       ( HANDLER 'handler'\n         [ optionname = 'value'[,...] ]\n         [ DEPENDENTASSEMBLY 'assemblyname'[,...] ]\n         [ HANDLERCONFIG `XML[ xmlisland ]LMX` ] ))\n(\n    <parameter>[,...]\n    \n    [ <RETURNS statement> ]\n)\n[ WITH <procedure_option>]\n[ GRANT groupname[,...]]\nBEGIN\n    statements\nEND\n\n<parameter> ::=\n    @name SOURCE 'source'\n        [ ( <customsource>[,...] )]\n        [ REQUIRED | DEFAULT = defaultvalue ]\n        [ AS `[ module:typescript-rich-datatype ]` ]\n\n<procedure_option> ::=\n    [ ENCRYPTION ]  \n    [ RECOMPILE ]  \n    [ EXECUTE AS Clause ]  \n```\n\n----------------------------------------\n\nTITLE: Defining WebService Syntax in TypedTSQL\nDESCRIPTION: Specifies the syntax for creating a WEBSERVICE in TypedTSQL. It includes optional parameters for emit path, database, base URL, index service, and type mapping. The type mapping allows for mapping user-defined types to TypeScript rich data types.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/webservice/webservice.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWEBSERVICE name \n[ EMITBASEPATH='emitbasepath' ]\n[ DATABASE='database' ]\n[ BASEURL='baseurl' ]\n[ INDEX='indexservice' ]\n[ TYPEMAP (\n    <typemapentry>[,...]\n)]\n\n<typemapentry> ::=\n    udtname AS `[ module:typescript-rich-datatype ]`\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Procedure in Typed T-SQL\nDESCRIPTION: Simplified Typed T-SQL version of the same hello world procedure. The syntax is more concise while maintaining the same functionality, eliminating the need for GO statements and explicit CREATE/DROP keywords.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/sample/hello-world.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nPROCEDURE hello_world\nGRANT EXECUTE TO public\nBEGIN\n    SELECT 'Hello world'\nEND\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Procedure in Traditional T-SQL\nDESCRIPTION: Standard T-SQL code to create a simple stored procedure that returns 'Hello world'. The procedure is first dropped if it exists, then created, and finally granted EXECUTE permission to public users.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/sample/hello-world.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDROP PROCEDDURE IF EXISTS dbo.hello_world\nGO\nCREATE PROCEDURE dbo.hello_world\nAS\nBEGIN\n    SELECT 'Hello world'\nEND\nGO\nGRANT EXECUTE dbo.hello_world TO public\nGO\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Insert in TTSQL\nDESCRIPTION: This snippet demonstrates the syntax for named insert in TTSQL. It allows specifying target columns explicitly in the SELECT clause, reducing the risk of mismatched column orders. This approach improves code readability and reduces errors compared to traditional SQL inserts.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/stat/named-insert.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO <target> (*)\nSELECT [target-colum] = <expr>,...\n```\n\n----------------------------------------\n\nTITLE: Create Account Retrieval Stored Procedure\nDESCRIPTION: Creates a stored procedure that retrieves account information including nested device data using XML formatting. Accepts an account ID parameter and returns account details with associated devices in a structured XML format.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/web-service-response/output.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE dbo.[test/test.spj*get]  \n(\n    @id     int      = NULL\n)\nAS\nbegin\n    SET NOCOUNT,ANSI_NULLS,ANSI_PADDING,ANSI_WARNINGS,ARITHABORT,CONCAT_NULL_YIELDS_NULL,XACT_ABORT ON;\n    SET NUMERIC_ROUNDABORT OFF;\n    SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n\n--\tRETURNS ( SELECT [username] FROM [net/account] WHERE [account_id] = @id )\n\n      \n        SELECT [account_id]   = [account_id],\n               [username]     = [username],\n               [device]       =  (\n                                    SELECT top(1)\n                                           [device_id] = [device_id],\n                                           [devicekey] = [devicekey]\n                                      FROM dbo.[net/device] d\n                                     WHERE d.[account_id] = a.[account_id]\n                                 FOR XML RAW('object'),TYPE),\n               [data]         =  (\n                                     SELECT [*] = [device_id]\n                                       FROM dbo.[net/device] d\n                                      WHERE d.[account_id] = a.[account_id]\n                                 FOR XML PATH('value'),ROOT('array'),TYPE),\n               [devices]      =  (\n                                    SELECT top(5)\n                                           [device_id] = [device_id],\n                                           [devicekey] = [devicekey]\n                                      FROM dbo.[net/device] d\n                                     WHERE d.[account_id] = a.[account_id]\n                                 FOR XML RAW('object'),ROOT('array'),TYPE),\n               [emailaddress] = [emailaddress]\n          FROM dbo.[net/account] a\n         WHERE [account_id] = @id\n\t FOR XML RAW('object'),TYPE  OPTION (FORCE ORDER);\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Stored Procedure with DateTime Parameter\nDESCRIPTION: Defines a stored procedure named 'proc-test' that accepts a datetime parameter, sets execution environment variables, declares a local variable, and returns the parameter value. The procedure uses REPEATABLE READ isolation level for transaction consistency.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/simple/output.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE procedure dbo.[proc-test]\n(\n    @a      datetime\n)\nAS\nbegin\n    SET NOCOUNT,ANSI_NULLS,ANSI_PADDING,ANSI_WARNINGS,ARITHABORT,CONCAT_NULL_YIELDS_NULL,XACT_ABORT ON;\n    SET NUMERIC_ROUNDABORT OFF;\n    SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n\n    DECLARE @b datetime;\n    SET @b = @a;\n    select @b;\nend\nGO\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Environment Settings\nDESCRIPTION: Sets up standard SQL Server environment variables for consistent execution behavior. These settings control nulls, padding, identifiers, language, date formats, and arithmetic behavior.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/simple/output.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSET NOCOUNT                 ON;\nSET ANSI_WARNINGS           ON;\nSET ANSI_NULLS              ON;\nSET ANSI_PADDING            ON;\nSET QUOTED_IDENTIFIER       ON;\nSET CONCAT_NULL_YIELDS_NULL ON;\nSET NUMERIC_ROUNDABORT      OFF;\nSET LANGUAGE                US_ENGLISH;\nSET DATEFORMAT              YMD;\nSET DATEFIRST               7;\nSET ARITHABORT              ON;\nGO\n```\n\n----------------------------------------\n\nTITLE: SQL Server Configuration Settings\nDESCRIPTION: Initial SQL Server configuration settings to ensure consistent behavior including ANSI settings, date formats, and arithmetic handling.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/web-service-response/output.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSET NOCOUNT                 ON;\nSET ANSI_WARNINGS           ON;\nSET ANSI_NULLS              ON;\nSET ANSI_PADDING            ON;\nSET QUOTED_IDENTIFIER       ON;\nSET CONCAT_NULL_YIELDS_NULL ON;\nSET NUMERIC_ROUNDABORT      OFF;\nSET LANGUAGE                US_ENGLISH;\nSET DATEFORMAT              YMD;\nSET DATEFIRST               7;\nSET ARITHABORT              ON;\n```\n\n----------------------------------------\n\nTITLE: IS_EQUAL Function SQL Transpilation\nDESCRIPTION: Shows how the IS_EQUAL function transpiles to SQL code, handling both direct equality and NULL equality cases.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/is_equal.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n((a = b) or (a is null and b is null))\n```\n\n----------------------------------------\n\nTITLE: Transpiling IS_NOT_EQUAL Function to SQL\nDESCRIPTION: Provides the SQL expression that the IS_NOT_EQUAL function transpiles to. This expression handles equality comparison and NULL value checks.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/is_not_equal.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n((a <> b) or (a is null and b is not null) or (a is not null and b is null))\n```\n\n----------------------------------------\n\nTITLE: Dropping Existing Stored Procedure if it Exists\nDESCRIPTION: Checks if the procedure 'proc-test' already exists in the database and drops it if found. This ensures a clean slate before creating the new version of the procedure.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/simple/output.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nIF EXISTS (SELECT * FROM sys.sysobjects WHERE [id] = object_id('dbo.[proc-test]') AND [type] in ('P','PC'))\n    DROP PROCEDURE dbo.[proc-test]\nGO\nPRINT '# create storedprocedure                dbo.[proc-test]';\nGO\n```\n\n----------------------------------------\n\nTITLE: Drop Existing Procedure Check\nDESCRIPTION: Checks for and drops existing procedure if it exists to prevent conflicts during creation.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/web-service-response/output.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nIF EXISTS (SELECT * FROM sys.sysobjects WHERE [id] = object_id('dbo.[test/test.spj*get]') AND [type] in ('P'))\n    DROP PROCEDURE dbo.[test/test.spj*get]\n```\n\n----------------------------------------\n\nTITLE: IS_EQUAL Function Syntax Definition\nDESCRIPTION: Defines the syntax for the IS_EQUAL function, which takes two arguments to compare.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/is_equal.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIS_EQUAL(a,b)\n```\n\n----------------------------------------\n\nTITLE: Defining IS_NOT_EQUAL Function Syntax in TypedTSQL\nDESCRIPTION: Specifies the syntax for the IS_NOT_EQUAL function, which takes two parameters (a and b) to compare.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/is_not_equal.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nIS_NOT_EQUAL(a,b)\n```\n\n----------------------------------------\n\nTITLE: Grant Procedure Permissions\nDESCRIPTION: Grants execute permissions on the stored procedure to the DBA group.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/web-service-response/output.txt#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT execute ON dbo.[test/test.spj*get] TO [grpDBA]\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for the Stored Procedure\nDESCRIPTION: Prints a message indicating that permissions are being set for the stored procedure. This is a placeholder for actual permission-setting statements that would typically follow.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.Language.TypedTSql.Tester/tests/simple/output.txt#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nPRINT '# set permissions';\nGO\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Extension Debugging for TypedTSql\nDESCRIPTION: Settings for debugging the Visual Studio Extension in the Jannesen.VisualStudioExtension.TypedTSql project. This configuration specifies the path to Visual Studio executable and provides command line arguments including the experimental instance flag.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/DEBUGGING.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nProgram: C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\devenv.exe\nArguments: /rootsuffix Exp <path-to-.sln>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Debugging for TypedTSql Build\nDESCRIPTION: Settings for debugging the MSBuild TASK in the Jannesen.VisualStudioExtension.TypedTSql.Build project. This configuration specifies the path to MSBuild executable and provides command line arguments to build a .ttsqlproj file.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/DEBUGGING.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProgram: C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe\nArguments: <path-to-.ttsqlproj> /property:Configuration=Release /property:Platform=AnyCPU /T:Rebuild\n```\n\n----------------------------------------\n\nTITLE: Build Rules Header Comment in TypedTSQL\nDESCRIPTION: A simple comment indicating that this file contains or will contain build rules for the TypedTSQL project. This is likely a placeholder or file header for configuration that will define how the project should be built.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Jannesen.VisualStudioExtension.TypedTSql.ProjectTemplate/Readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Build rules\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for TypedTSQL Project\nDESCRIPTION: A placeholder for defining the syntax of the TypedTSQL project. This code block is currently empty and marked as TODO, indicating that the syntax definition is yet to be implemented.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/decl/assembly.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```\n\n----------------------------------------\n\nTITLE: Empty TODO Syntax Block in Markdown\nDESCRIPTION: A placeholder code block marked with 'TODO' that is intended to document syntax specifications for the TypedTSQL project. The block is currently empty and needs to be filled with actual syntax information.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/decl/function.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```\n\n----------------------------------------\n\nTITLE: Placeholder TODO Syntax in Markdown\nDESCRIPTION: An empty code block labeled as 'TODO' intended to contain syntax examples or rules. The block is currently empty and serves as a placeholder for future content.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/stat/store.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Defining TODO Syntax for TypedTSQL\nDESCRIPTION: A placeholder code block for documenting the syntax of TODO items in the TypedTSQL project. This section appears to be incomplete and needs to be filled with actual syntax documentation.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/webservice/webreturns.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```\n\n----------------------------------------\n\nTITLE: TODO Placeholder in Markdown\nDESCRIPTION: A placeholder code block marked with 'TODO' indicating future content to be added to the syntax section.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/json-type.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Defining FileBinary Syntax in TypedTSQL\nDESCRIPTION: This code block is intended to define the syntax for the FileBinary feature in TypedTSQL. However, it is currently marked as TODO, indicating that the syntax definition is not yet complete or implemented.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/filebinary.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```\n\n----------------------------------------\n\nTITLE: TODO Syntax Example in TypedTSql\nDESCRIPTION: Empty placeholder for future syntax examples of TODO functionality in the TypedTSql project.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/webservice/returns.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: TODO Syntax Placeholder in typedtsql Project\nDESCRIPTION: An empty code block labeled as 'TODO' intended to contain syntax definitions or examples for the typedtsql project. This is a placeholder that will be populated with actual syntax information in the future.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/decl/procedure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Basic TODO Syntax Template\nDESCRIPTION: A placeholder for defining TODO syntax rules or examples\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/webservice/webcomplextype.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Empty TODO Syntax Block in TypedTSQL Project\nDESCRIPTION: A placeholder code block labeled as 'TODO' with no content. This appears to be a reminder to add syntax documentation or examples for the TypedTSQL project.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/openjson.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Defining TODO Syntax for TypedTSQL Project\nDESCRIPTION: A placeholder for defining the syntax structure for the TypedTSQL project. This section is intended to outline specific syntax rules or examples that need to be implemented or documented.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/stat/for-select.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```\n\n----------------------------------------\n\nTITLE: Placeholder TODO Syntax Block in Markdown\nDESCRIPTION: A code block placeholder for documenting TODO syntax. This is currently empty and marked with 'TODO' to indicate that content needs to be added.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/stat/exec_sql.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```\n\n----------------------------------------\n\nTITLE: TODO Syntax Block Placeholder\nDESCRIPTION: An empty code block labeled 'TODO' intended to contain syntax information for the TypedTSQL project. This is currently a placeholder waiting to be populated with actual syntax specifications.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/decl/trigger.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Placeholder for TypedTSQL Syntax Definition\nDESCRIPTION: An empty code block marked as a placeholder for future TypedTSQL syntax documentation.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/var-let.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Placeholder TODO Syntax Block in TypedTSQL\nDESCRIPTION: An empty code block marked as a TODO item for defining syntax in the TypedTSQL project. This placeholder indicates where syntax definitions or examples will be added in the future.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/func/json_value.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTODO\n```\n\n----------------------------------------\n\nTITLE: Defining TODO Syntax for TypedTSQL\nDESCRIPTION: Placeholder for future syntax definitions in the TypedTSQL project. This code block is currently empty and needs to be filled with the appropriate syntax rules or examples.\nSOURCE: https://github.com/jannesen/typedtsql/blob/master/Doc/decl/view.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTODO\n```\n```"
  }
]