[
  {
    "owner": "vuetifyjs",
    "repo": "vuetify",
    "content": "TITLE: Initializing Vuetify in a Nuxt 3 Plugin\nDESCRIPTION: This code initializes Vuetify and adds it to the main Vue app instance within a Nuxt 3 plugin. It imports necessary CSS files, creates a Vuetify instance, and registers it with the Vue application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// import this after install `@mdi/font` package\nimport '@mdi/font/css/materialdesignicons.css'\n\nimport 'vuetify/styles'\nimport { createVuetify } from 'vuetify'\n\nexport default defineNuxtPlugin((app) => {\n  const vuetify = createVuetify({\n    // ... your configuration\n  })\n  app.vueApp.use(vuetify)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify and Dependencies (npm)\nDESCRIPTION: These commands install Vuetify, the vite-plugin-vuetify, and the Material Design Icons font as development dependencies in a project using npm.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D vuetify vite-plugin-vuetify\nnpm i @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Initializing Vuetify in Existing Vue App\nDESCRIPTION: This JavaScript code demonstrates how to initialize Vuetify in an existing Vue application. It imports necessary Vuetify components, creates a Vuetify instance, and registers it with the Vue application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\n// Vuetify\nimport 'vuetify/styles'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\nimport * as directives from 'vuetify/directives'\n\n// Components\nimport App from './App.vue'\n\nconst vuetify = createVuetify({\n  components,\n  directives,\n})\n\ncreateApp(App).use(vuetify).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Basic Form Validation Rules Example\nDESCRIPTION: Demonstrates implementing a basic required field validation rule in a Vuetify form component. The rule function checks if an input has a value, making it a required field.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/rules-required\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Vuetify Project using create-vuetify\nDESCRIPTION: This command initializes a new Vuetify 3 project using the create-vuetify scaffolding tool. It prompts the user for project name, TypeScript usage, and package manager selection.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create vuetify\n```\n\n----------------------------------------\n\nTITLE: Creating a Vuetify Project using create-vuetify\nDESCRIPTION: This command initializes a new Vuetify 3 project using the create-vuetify scaffolding tool. It prompts the user for project name, TypeScript usage, and package manager selection.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vuetify\n```\n\n----------------------------------------\n\nTITLE: Using Vuetify with Laravel Mix\nDESCRIPTION: This JavaScript code demonstrates how to integrate Vuetify with a Vue application using Laravel Mix. It imports necessary Vuetify components, creates a Vuetify instance, and registers it with the Vue application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\n// Vuetify\nimport '@mdi/font/css/materialdesignicons.css'\nimport 'vuetify/styles'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\nimport * as directives from 'vuetify/directives'\n\n// Components\nimport App from './App.vue'\n\nconst vuetify = createVuetify({\n  components,\n  directives\n})\n\ncreateApp(App).use(vuetify).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Form Component Properties Exposure\nDESCRIPTION: Shows how to access internal form methods like validate(), reset(), and resetValidation() using component refs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/misc-exposed\" />\n```\n\n----------------------------------------\n\nTITLE: Async Form Validation Rules\nDESCRIPTION: Shows how to implement asynchronous validation rules that interact with an API service. The validation occurs on form submission and demonstrates using the validate-on prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/rules-async\" />\n```\n\n----------------------------------------\n\nTITLE: Server-side Pagination and Sorting in Vuetify Data Table\nDESCRIPTION: Demonstrates how to implement server-side pagination and sorting in a Vuetify data table. It uses the @update:options event to fetch new data and the loading prop to display a progress bar during data fetching.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/data-tables/server-side-tables.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-data-table/misc-server-side-paginate-and-sort\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt 3 App\nDESCRIPTION: These commands initialize a new Nuxt 3 application using the `nuxi` tool.  It includes navigating to the project directory, and installing the dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init <project-name>\ncd <project-name>\nyarn\n```\n\n----------------------------------------\n\nTITLE: Vuelidate Integration\nDESCRIPTION: Example of integrating the Vuelidate validation library with Vuetify forms.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/misc-vuelidate\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Vuetify Project using create-vuetify\nDESCRIPTION: This command initializes a new Vuetify 3 project using the create-vuetify scaffolding tool. It prompts the user for project name, TypeScript usage, and package manager selection.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vuetify\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Existing Projects (npm)\nDESCRIPTION: These commands install Vuetify as a dependency in an existing project using npm.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vuetify\n```\n\n----------------------------------------\n\nTITLE: Disabled Form Implementation\nDESCRIPTION: Example showing how to disable all input components in a Vuetify form using the disabled prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Using Vuetify with CDN\nDESCRIPTION: This JavaScript code demonstrates how to initialize and use Vuetify in a Vue application using CDN links. It imports Vue and Vuetify from the CDN, creates a Vuetify instance, and registers it with the Vue application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createApp } = Vue\nconst { createVuetify } = Vuetify\n\nconst vuetify = createVuetify()\n\nconst app = createApp()\napp.use(vuetify).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filter Function in TypeScript\nDESCRIPTION: This snippet shows the function signature for a custom filter function that can be used with the data table's 'custom-filter' prop. It allows for overriding the default filtering behavior.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/data-tables/data-and-display.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string, query: string, item?: any) => boolean | number | [number, number] | [number, number][]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt 3 App\nDESCRIPTION: These commands initialize a new Nuxt 3 application using the `nuxi` tool.  It includes navigating to the project directory, and installing the dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbunx nuxi@latest init <project-name>\ncd <project-name>\nbun install\n```\n\n----------------------------------------\n\nTITLE: Installing All Vuetify Components Globally using JavaScript\nDESCRIPTION: The code demonstrates how to globally install all Vuetify components, including Labs components, in a Vue.js application. Requires Vuetify and Vue.js. All components are registered, providing full access without individual imports.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/labs/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\nimport * as labsComponents from 'vuetify/labs/components'\n\nexport default createVuetify({\n  components: {\n    ...components,\n    ...labsComponents,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vuetify Project using create-vuetify\nDESCRIPTION: This command initializes a new Vuetify 3 project using the create-vuetify scaffolding tool. It prompts the user for project name, TypeScript usage, and package manager selection.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vuetify@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt 3 App\nDESCRIPTION: These commands initialize a new Nuxt 3 application using the `nuxi` tool.  It includes navigating to the project directory, and installing the dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init <project-name>\ncd <project-name>\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Vitepress (bun)\nDESCRIPTION: These commands install Vuetify as a dependency in a Vitepress project using bun.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nbun add vuetify\n```\n\n----------------------------------------\n\nTITLE: Using Vuetify Defaults in Custom Components with JavaScript\nDESCRIPTION: This code shows how to integrate a custom component with Vuetify's default system by assigning default prop values through the configuration object, effectively reducing duplicated code and maintaining consistency.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\\n\\nexport default createVuetify({\\n  defaults: {\\n    MyComponent1: {\\n      foo: 'bar',\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Text Field with Label in Vuetify\nDESCRIPTION: A simple example of a v-text-field component with a label for collecting a user's first name.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/text-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-text-field label=\"First name\"></v-text-field>\n```\n\n----------------------------------------\n\nTITLE: Creating Fixed Header in v-table with Vue\nDESCRIPTION: Shows how to use the fixed-header prop in combination with the height prop to create a table with a fixed header that remains visible while scrolling through the table body.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tables.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-table/prop-fixed-header\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple File Selection in v-file-input\nDESCRIPTION: Illustrates the use of the multiple prop to allow selection of multiple files simultaneously in the file input component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies for Vuetify\nDESCRIPTION: This set of snippets demonstrates how to install necessary dependencies for unit testing Vuetify components using various package managers. Dependencies include vue-test-utils, vitest, and resize-observer-polyfill.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/unit-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @vue/test-utils vitest resize-observer-polyfill --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vue/test-utils vitest resize-observer-polyfill --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vue/test-utils vitest resize-observer-polyfill --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @vue/test-utils vitest resize-observer-polyfill --dev\n```\n\n----------------------------------------\n\nTITLE: Basic Usage - Vuetify Infinite Scroll\nDESCRIPTION: Demonstrates basic usage of v-infinite-scroll component with loading states and callbacks. The component emits load events when scrolling reaches boundaries and handles different loading states.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-infinite-scroll\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Vuetify Packages\nDESCRIPTION: This snippet outlines the commands to navigate to the Vuetify folder, install all project dependencies using pnpm, and build the necessary Vuetify packages. This setup is crucial for local development.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"# Navigate to the vuetify folder\\ncd vuetify\\n\\n# Install all project dependencies\\npnpm i\\n\\n# Build the packages\\npnpm build vuetify\\npnpm build api\"\n```\n\n----------------------------------------\n\nTITLE: Manual Imports of Vuetify Components in Vue\nDESCRIPTION: This snippet demonstrates how to manually import Vuetify components into your Vue application for usage without the loader plugin. It illustrates the component registration process using `createVuetify`.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/treeshaking.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createVuetify } from 'vuetify'\nimport { VCard } from 'vuetify/components/VCard'\nimport { VRating } from 'vuetify/components/VRating'\nimport { VToolbar } from 'vuetify/components/VToolbar'\nimport { Ripple } from 'vuetify/directives'\n\nconst vuetify = createVuetify({\n  components: {\n    VCard,\n    VRating,\n    VToolbar,\n  },\n  directives: {\n    Ripple,\n  },\n})\n\nexport default vuetify\n```\n\n----------------------------------------\n\nTITLE: Adding Vuetify Navigation Menu with Vue.js\nDESCRIPTION: This snippet introduces a navigation menu using the v-navigation-drawer component in a Vuetify app. The menu is bound to a reactive variable via v-model and displays list items that route to different pages in the application. It utilizes Vue.js reactivity and Vuetify's icon set. Dependencies include Vuetify and Vue Router to handle navigation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n  <!-- Toolbar at the top of the screen -->\n  <v-app-bar color=\"primary\" height=\"48\">\n    <!-- Title of the application with adjusted margin and font size -->\n    <v-app-bar-title class=\"text-h6 ms-3\">\n      <v-icon icon=\"mdi-apps\"></v-icon>\n\n      <span class=\"ms-1\">My Application</span>\n    </v-app-bar-title>\n  </v-app-bar>\n\n  <!-- Navigation drawer for menu actions -->\n  <v-navigation-drawer v-model=\"drawer\">\n    <v-list>\n      <!-- Menu items in the drawer with icons -->\n      <v-list-item\n        @click=\"navigateTo('/')\"\n        title=\"Home\"\n        prepend-icon=\"mdi-home\"\n      ></v-list-item>\n\n      <v-list-item\n        @click=\"navigateTo('/products')\"\n        title=\"Products\"\n        prepend-icon=\"mdi-cube-outline\"\n      ></v-list-item>\n\n      <v-list-item\n        @click=\"navigateTo('/contact')\"\n        title=\"Contact\"\n        prepend-icon=\"mdi-email\"\n      ></v-list-item>\n    </v-list>\n  </v-navigation-drawer>\n\n  <!-- Main content of the application -->\n  <v-main>\n    <NuxtPage />\n  </v-main>\n\n  <!-- Smaller footer at the bottom of the screen -->\n  <v-footer app color=\"secondary\" height=\"30\">\n    <v-container class=\"text-center text-caption\">\n      © {{ new Date().getFullYear() }} My Application - All Rights Reserved\n    </v-container>\n  </v-footer>\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Components with Nested Defaults in Vuetify\nDESCRIPTION: Demonstrates the usage of components with nested defaults in a Vuetify application. Shows how the same component receives different default values based on its parent context.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <v-main>\n      <MyComponent1 /> <!-- I am bar -->\n\n      <MyComponent2>\n        <MyComponent1 /> <!-- I am baz -->\n      </MyComponent2>\n    </v-main>\n  </v-app>\n</template>\n\n<script setup>\n  import MyComponent1 from './MyComponent1.vue'\n  import MyComponent2 from './MyComponent2.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify with bun\nDESCRIPTION: Command to create a new Vuetify project using bun package manager.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create vuetify\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Existing Projects (bun)\nDESCRIPTION: These commands install Vuetify as a dependency in an existing project using bun.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nbun add vuetify\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-list Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-list component with single-line, two-line, and three-line variations. The line declaration specifies the minimum height of the item.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-list\" />\n```\n\n----------------------------------------\n\nTITLE: Accepting Specific File Types with v-file-input in Vue\nDESCRIPTION: Shows how to use the accept prop to limit the file types that can be selected. This example demonstrates accepting specific media formats or file types.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-accept\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Icon Set in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to create a custom icon set for Vuetify. This includes defining necessary icon aliases and creating an IconSet object with a custom component renderer.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { h } from 'vue'\nimport type { IconSet, IconAliases, IconProps } from 'vuetify'\n\nconst aliases: IconAliases = {\n  collapse: '...',\n  complete: '...',\n  cancel: '...',\n  close: '...',\n  delete: '...',\n  clear: '...',\n  success: '...',\n  info: '...',\n  warning: '...',\n  error: '...',\n  prev: '...',\n  next: '...',\n  checkboxOn: '...',\n  checkboxOff: '...',\n  checkboxIndeterminate: '...',\n  delimiter: '...',\n  sortAsc: '...',\n  sortDesc: '...',\n  sort: '...',\n  expand: '...',\n  menu: '...',\n  subgroup: '...',\n  dropdown: '...',\n  radioOn: '...',\n  radioOff: '...',\n  edit: '...',\n  ratingEmpty: '...',\n  ratingFull: '...',\n  ratingHalf: '...',\n  loading: '...',\n  first: '...',\n  last: '...',\n  unfold: '...',\n  file: '...',\n  plus: '...',\n  minus: '...',\n  calendar:  '...',\n}\n\nconst custom: IconSet = {\n  component: (props: IconProps) => h(...),\n}\n\nexport { aliases, custom }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-virtual-scroll in Vue\nDESCRIPTION: Demonstrates the basic usage of v-virtual-scroll component to display a virtual, infinite list. The component renders just enough records to fill the viewport.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/virtual-scroller.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-virtual-scroll\" />\n```\n\n----------------------------------------\n\nTITLE: Server-side Search in Vuetify Data Table\nDESCRIPTION: Shows how to implement server-side search functionality in a Vuetify data table. It uses the search prop to trigger new data fetching when search input changes, supporting multiple searchable values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/data-tables/server-side-tables.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-data-table/server-search\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-radio-group Component in Vue\nDESCRIPTION: Demonstrates basic usage of v-radio-group component in Vuetify. This example shows how to implement a radio button group.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/radio-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-radio-group\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify with Material Icons\nDESCRIPTION: This snippet configures Vuetify to use Material Icons as the default icon set, including the import statements necessary for its usage in the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'material-design-icons-iconfont/dist/material-design-icons.css' // Ensure your project is capable of handling css files\nimport { createVuetify } from 'vuetify'\nimport { aliases, md } from 'vuetify/iconsets/md'\n\nexport default createVuetify({\n  icons: {\n    defaultSet: 'md',\n    aliases,\n    sets: {\n      md,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Display Information using Options API in Vue\nDESCRIPTION: This snippet demonstrates how to access the display information through the global `$vuetify` variable when using the Options API in a Vue component. Specifically, it accesses the `mobile` property of the `$vuetify.display` object within the `mounted` lifecycle hook and logs its value.  Note that refs are unwrapped when using options API.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  export default {\n    mounted () {\n      console.log(this.$vuetify.display.mobile)\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt 3 with Vuetify\nDESCRIPTION: This code snippet demonstrates how to integrate Vuetify with Nuxt 3 by modifying the `nuxt.config.ts` file. It utilizes the `vite:extendConfig` hook to add the Vuetify plugin to the Vite configuration and configures asset URL transformation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport vuetify, { transformAssetUrls } from 'vite-plugin-vuetify'\nexport default defineNuxtConfig({\n  //...\n  build: {\n    transpile: ['vuetify'],\n  },\n  modules: [\n    (_options, nuxt) => {\n      nuxt.hooks.hook('vite:extendConfig', (config) => {\n        // @ts-expect-error\n        config.plugins.push(vuetify({ autoImport: true }))\n      })\n    },\n    //...\n  ],\n  vite: {\n    vue: {\n      template: {\n        transformAssetUrls,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Snackbar Queue Store with Pinia in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Pinia store to manage a queue of snackbars. It defines types for the Snackbar and store state, and implements a show method to add snackbars to the queue.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/announcing-vuetify-3.8.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\nimport { Ref } from 'vue'\n\nexport type Snackbar = Record<string, any>\n\nexport interface SnackbarQueueState {\n  queue: Ref<Snackbar[]>\n  show: (text: Snackbar | string) => void\n}\n\nexport const useQueueStore = defineStore('Queue', () => {\n  const queue = ref<Snackbar[]>([])\n\n  function show (text: Snackbar) {\n    const record = typeof text === 'string' ? { text } : text\n\n    queue.value.push(record)\n  }\n\n  return {\n    queue,\n    show,\n  } as SnackbarQueueState\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Component Defaults in Vuetify\nDESCRIPTION: Sets up Vuetify instance with default configurations for components, demonstrating how to define different defaults for a component based on its parent context.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\n\nexport default createVuetify({\n  defaults: {\n    MyComponent: { foo: 'bar' },\n\n    MyComponent2: {\n      MyComponent: { foo: 'baz' },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Contextual Defaults for Nested Vuetify Components in JavaScript\nDESCRIPTION: This code allows you to set default properties for components nested inside other components, such as setting a default variant for all VBtn components within a VCard.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateVuetify({\\n  defaults: {\\n    VCard: {\\n      VBtn: { variant: 'outlined' },\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Vitepress (pnpm)\nDESCRIPTION: These commands install Vuetify as a dependency in a Vitepress project using pnpm.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npnpm i vuetify\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Awesome SVG with Vuetify in Vue Application\nDESCRIPTION: Setup code to register Font Awesome SVG icons globally in a Vue application using Vuetify. This includes registering the FontAwesomeIcon component, adding solid and regular icon libraries, and configuring Vuetify to use Font Awesome as the default icon set.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createVuetify } from 'vuetify'\nimport { aliases, fa } from 'vuetify/iconsets/fa-svg'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\n\nconst app = createApp()\n\napp.component('font-awesome-icon', FontAwesomeIcon) // Register component globally\nlibrary.add(fas) // Include needed solid icons\nlibrary.add(far) // Include needed regular icons\n\nconst vuetify = createVuetify({\n  icons: {\n    defaultSet: 'fa',\n    aliases,\n    sets: {\n      fa,\n    },\n  },\n})\n\napp.use(vuetify)\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Form Validation in Vue with Vuetify and JavaScript\nDESCRIPTION: This HTML snippet shows a simple form implementation using Vuetify's validation rules. It includes a submit handler to process form submission with validation. The form utilizes the Vuetify component system.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/rules.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <v-app>\n    <v-container>\n      <v-form validate-on=\"submit\" @submit.prevent=\"submit\">\n        <v-text-field :rules=\"[rules.required()]\" label=\"Email\" />\n\n        <v-btn text=\"Submit\" type=\"submit\"/>\n      </v-form>\n    </v-container>\n  </v-app>\n</template>\n\n<script setup>\n  import { useRules } from 'vuetify/labs/rules'\n\n  const rules = useRules()\n\n  async function submit (event) {\n    await event\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Text Field with Label and Placeholder in Vuetify\nDESCRIPTION: An example of a v-text-field component with both label and placeholder for collecting an email address.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/text-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<v-text-field\n  label=\"Email address\"\n  placeholder=\"johndoe@gmail.com\"\n  type=\"email\"\n></v-text-field>\n```\n\n----------------------------------------\n\nTITLE: Customizing Selection Display in v-file-input\nDESCRIPTION: Demonstrates the use of the selection slot to customize the appearance of selected files, typically using chips or other components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/slot-selection\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Vuetify Unit Testing\nDESCRIPTION: This snippet configures Vite to inline the 'vuetify' dependency for unit testing. It sets up the testing environment to use jsdom as the simulator during testing.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/unit-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    server: {\n      deps: {\n        inline: ['vuetify'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Data Iterator Implementation in Vue\nDESCRIPTION: Basic example showing how to implement a v-data-iterator component with a list display of numbered items. The component iterates over a simple array and renders each item in a v-list-item component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/data-iterators.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-data-iterator :items=\"[1, 2, 3, 4, 5]\">\n  <template v-slot:default=\"{ items }\">\n    <v-list-item\n      v-for=\"(item, i) in items\"\n      :key=\"i\"\n      :title=\"`Item ${i}`\"\n    ></v-list-item>\n  </template>\n</v-data-iterator>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-app-bar in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-app-bar component for application-wide actions and information.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/app-bars.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-app-bar\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-tabs Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-tabs component for organizing content into separate sections. It shows how to implement tabs and their associated content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Basic v-empty-state Usage Example in Vue\nDESCRIPTION: Demonstrates basic usage of the v-empty-state component with its fundamental elements: title, description, icon, and action button.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-empty-state\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Unit Test Setup for Vuetify Component\nDESCRIPTION: This code snippet illustrates how to create a basic unit test for a Vuetify component using '@vue/test-utils' and 'vitest'. It mounts the 'HelloWorld' component and asserts the rendered text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/unit-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from '@vue/test-utils'\nimport { expect, test } from 'vitest'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\nimport * as directives from 'vuetify/directives'\nimport HelloWorld from '../../src/components/HelloWorld.vue'\n\nconst vuetify = createVuetify({\n  components,\n  directives,\n})\n\nglobal.ResizeObserver = require('resize-observer-polyfill')\n\ntest('displays message', () => {\n  const wrapper = mount({\n    template: '<v-layout><hello-world></hello-world></v-layout>'\n  }, {\n    props: {},\n    global: {\n      components: {\n        HelloWorld,\n      },\n      plugins: [vuetify],\n    }\n  })\n\n  // Assert the rendered text of the component\n  expect(wrapper.text()).toContain('Components')\n})\n```\n\n----------------------------------------\n\nTITLE: Using the useRules Composable with Vuetify Form Validation\nDESCRIPTION: This snippet shows how to use the new useRules composable for form validation in Vuetify. It demonstrates applying multiple validation rules (required and email) to a text field and handling form submission.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/announcing-vuetify-3.8.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <v-container>\n      <v-form validate-on=\"submit\" @submit.prevent=\"submit\">\n        <v-text-field :rules=\"[rules.required(), rules.email()]\" label=\"Email\" />\n\n        <v-btn text=\"Submit\" type=\"submit\"/>\n      </v-form>\n    </v-container>\n  </v-app>\n</template>\n\n<script setup>\n  import { useRules } from 'vuetify/labs/rules'\n\n  const rules = useRules()\n\n  async function submit (event) {\n    await event\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Component Height Based on Breakpoint\nDESCRIPTION: This code demonstrates how to use the `useDisplay` composable to dynamically set the height of a `v-card` component based on the current breakpoint.  It utilizes a computed property that switches on the `name` property of the `useDisplay` composable and returns a different height value for each breakpoint.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-card :height=\"height\">\n    ...\n  </v-card>\n</template>\n\n<script setup>\n  import { computed } from 'vue'\n  import { useDisplay } from 'vuetify'\n\n  const { name } = useDisplay()\n\n  const height = computed(() => {\n    // name is reactive and\n    // must use .value\n    switch (name.value) {\n      case 'xs': return 220\n      case 'sm': return 400\n      case 'md': return 500\n      case 'lg': return 600\n      case 'xl': return 800\n      case 'xxl': return 1200\n    }\n\n    return undefined\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Vuetify Automatic Treeshaking\nDESCRIPTION: This snippet demonstrates how to configure Vite to enable automatic treeshaking for Vuetify components in your project. It imports necessary plugins and sets them into the Vite configuration.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/treeshaking.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vuetify from 'vite-plugin-vuetify'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    vuetify(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Day View in v-calendar (HTML/Vue)\nDESCRIPTION: This example illustrates how to set up the v-calendar component to show a daily view by setting the type prop to 'day'.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/calendars.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-calendar/prop-type-day\" />\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Sizing in Vuetify Grid\nDESCRIPTION: Demonstrates how to use the cols, sm, md, lg, and xl props to define column sizes for different viewport sizes in a Vuetify grid layout.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row>\n      <v-col\n        cols=\"12\"\n        sm=\"6\"\n        md=\"4\"\n        lg=\"3\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          cols=\"12\" sm=\"6\" md=\"4\" lg=\"3\"\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-table Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-table component in a Vue template. The example shows a simple table with headers and rows.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tables.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-table/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Installing VCalendar Component in Vuetify (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and register the VCalendar component from Vuetify labs. It's required for manual import and registration with the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/calendars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VCalendar } from 'vuetify/labs/VCalendar'\n\nexport default createVuetify({\n  components: {\n    VCalendar,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-expansion-panels in Vue with Vuetify\nDESCRIPTION: Demonstrates the basic implementation of expansion panels in Vuetify. This example shows how expansion panels can display a list of expandable items either by declaring markup explicitly or using title and text props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-expansion-panels\" />\n```\n\n----------------------------------------\n\nTITLE: Using Vuetify Button as Router Link\nDESCRIPTION: This snippet demonstrates how to use the Vuetify button component as a router link, enabling navigation to the specified route. The 'to' prop indicates the path to navigate to, and 'text' prop specifies the button label.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-btn to=\"/home\" text=\"Home\"></v-btn>\n```\n\n----------------------------------------\n\nTITLE: Integrating Snackbar Queue with Global State in Vue App Component\nDESCRIPTION: This example shows how to integrate the v-snackbar-queue component with a global message store in the main App.vue file, allowing for centralized message handling.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbar-queue.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <router-view></router-view>\n\n    <v-snackbar-queue v-model=\"messages.queue\"></v-snackbar-queue>\n  </v-app>\n</template>\n\n<script setup>\n  const messages = useMessagesStore()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Virtualized Infinite Scroll - Vuetify\nDESCRIPTION: Advanced implementation of infinite scroll with virtualization for uniform-sized items to optimize rendering performance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/misc-virtual\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Specific Properties with v-model in Vue.js\nDESCRIPTION: Shows how to bind specific properties as models using v-model:prop syntax. This is demonstrated with v-list and v-text-field components, binding multiple properties simultaneously.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/v-model.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-list\n    v-model:active=\"active\"\n    v-model:opened=\"opened\"\n    v-model:selected=\"selected\"\n  />\n\n  <v-text-field\n    v-model=\"model\"\n    v-model:focus=\"focus\"\n  />\n</template>\n\n<script setup>\n  import { shallowRef } from 'vue'\n\n  const active = shallowRef([])\n  const opened = shallowRef([])\n  const selected = shallowRef([1])\n  const model = shallowRef('')\n  const focus = shallowRef(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Inserting Vuetify Toolbar and Footer with Vue.js\nDESCRIPTION: This code snippet demonstrates how to incorporate a toolbar and footer using Vuetify components in a Nuxt.js app. The toolbar at the top and a footer at the bottom are established using v-app-bar and v-footer, respectively. The footer requires an app attribute to correctly correlate with the toolbar. It expects the presence of Vuetify library and Nuxt.js. The HTML template has a main section wrapped with v-main which integrates dynamic page content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <!-- Toolbar at the top of the screen -->\n    <v-app-bar color=\"primary\" height=\"48\">\n    <!-- Title of the application with adjusted margin and font size -->\n      <v-app-bar-title class=\"text-h6 ms-3\">\n        <v-icon icon=\"mdi-apps\"></v-icon>\n\n        <span class=\"ms-1\">My Application</span>\n      </v-app-bar-title>\n    </v-app-bar>\n\n    <!-- Main content of the application -->\n    <v-main>\n      <NuxtPage />\n    </v-main>\n\n    <!-- Smaller footer at the bottom of the screen -->\n    <v-footer color=\"secondary\" height=\"30\">\n      <v-container class=\"text-center text-caption\">\n        © {{ new Date().getFullYear() }} My Application - All Rights Reserved\n      </v-container>\n    </v-footer>\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Signup Form Using Textarea - Vue\nDESCRIPTION: This example highlights the application of `v-textarea` in building a signup form, illustrating how different input styles can be utilized for user-friendly interfaces.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/misc-signup-form\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog with Activator Prop\nDESCRIPTION: Example using the activator prop instead of the activator slot to trigger the dialog.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/prop-activator\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Closable Chips with v-model in Vue\nDESCRIPTION: This example demonstrates how to create closable chips using the v-chip component with v-model for control and the click:close event for handling chip closure.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-closable\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify to use DayJs adapter\nDESCRIPTION: Configures Vuetify to use the DayJs adapter for date handling, including setting the locale. It imports `createVuetify` from `vuetify`, `DayJsAdapter` from `@date-io/dayjs`, and `en` locale from `dayjs/locale/en`.  The adapter and locale are configured in the `date` option.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport DayJsAdapter from '@date-io/dayjs'\nimport en from 'dayjs/locale/en'\n\nexport default createVuetify({\n  date: {\n    adapter: DayJsAdapter,\n    locale: { en },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Size and Density Properties in Vuetify\nDESCRIPTION: This example showcases the combined effect of size and density properties on various Vuetify components. It demonstrates how these props can be used together to easily adjust the overall size and appearance of components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/density-and-sizing.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"concepts/density-and-size\" preview />\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Adapter with Localization in Vuetify (JavaScript)\nDESCRIPTION: This example shows how to set up a custom date adapter (DateFnsAdapter) with localization support for multiple languages in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DateFnsAdapter from '@date-io/date-fns'\nimport enUS from 'date-fns/locale/en-US'\nimport svSE from 'date-fns/locale/sv'\n\ncreateVuetify({\n  date: {\n    adapter: DateFnsAdapter,\n    locale: {\n      en: enUS,\n      sv: svSE,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Vuetify Carousel Usage\nDESCRIPTION: Demonstrates the basic implementation of a v-carousel component which expands upon v-window functionality for displaying images.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-carousel\" />\n```\n\n----------------------------------------\n\nTITLE: Toggling Fullscreen Dialog based on Mobile Breakpoint in Vue\nDESCRIPTION: This snippet demonstrates how to toggle the `fullscreen` property of a `v-dialog` component based on the `mobile` property provided by the `useDisplay` composable.  It imports `useDisplay` from Vuetify and uses destructuring to extract the `mobile` ref. The `fullscreen` property of `v-dialog` is then bound to this ref.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-dialog :fullscreen=\"mobile\">\n    ...\n  </v-dialog>\n</template>\n\n<script setup>\n  import { useDisplay } from 'vuetify'\n\n  const { mobile } = useDisplay()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Defaults for Vuetify Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Vuetify instance with global default prop values, specifically disabling the ripple effect and setting the default elevation for VSheet components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\\nimport { createVuetify } from 'vuetify'\\n\\nexport default createVuetify({\\n  defaults: {\\n    global: {\\n      ripple: false,\\n    },\\n    VSheet: {\\n      elevation: 4,\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-bottom-navigation in Vue\nDESCRIPTION: Demonstrates the basic usage of v-bottom-navigation component with v-btn sub-components. The active state can be controlled programmatically using the value property.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-bottom-navigation\" />\n```\n\n----------------------------------------\n\nTITLE: Vee-validate Integration\nDESCRIPTION: Example of integrating the Vee-validate validation library with Vuetify forms.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/misc-vee-validate\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue CLI for Vuetify Automatic Treeshaking\nDESCRIPTION: This snippet shows how to configure Vuetify with Vue CLI for automatic treeshaking by including the Vuetify plugin in the Vue configuration.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/treeshaking.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { VuetifyPlugin } = require('webpack-plugin-vuetify')\n\nmodule.exports = {\n  plugins: [\n    new VuetifyPlugin(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Vitepress (npm)\nDESCRIPTION: These commands install Vuetify as a dependency in a Vitepress project using npm.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vuetify\n```\n\n----------------------------------------\n\nTITLE: Fast-Fail Form Validation\nDESCRIPTION: Demonstrates the fast-fail prop usage which stops validation after finding the first invalid input, optimizing performance for forms with complex validation rules.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/forms.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-form/prop-fast-fail\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Material Design 1 Blueprint in Vuetify\nDESCRIPTION: This code snippet demonstrates how to apply the Material Design 1 blueprint to a Vuetify application. It imports the `createVuetify` function and the `md1` blueprint from `vuetify/blueprints`. The `md1` blueprint is then passed as the `blueprint` option when creating the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/blueprints.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { md1 } from 'vuetify/blueprints'\n\nexport default createVuetify({\n  blueprint: md1,\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Navigation Drawers\nDESCRIPTION: Example showing how to implement multiple navigation drawers, with one using rail mode.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/misc-combined\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Textarea - Vue\nDESCRIPTION: This snippet showcases the use of `append-icon` and `prepend-icon` props in `v-textarea` to add contextual icons, enhancing the visual interactivity and usability of the component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Array Model Checkbox Implementation\nDESCRIPTION: Demonstrates how to bind multiple checkboxes to a single array v-model, allowing for multiple selection functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/checkboxes.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-checkbox/prop-model-as-array\" />\n```\n\n----------------------------------------\n\nTITLE: Using Chips for Filtering in Vuetify\nDESCRIPTION: This example illustrates how to use chips for filtering a list of items and displaying available keywords, showcasing their use as supplementary actions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/misc-filtering\" />\n```\n\n----------------------------------------\n\nTITLE: Model-Controlled Expansion Panels in Vuetify\nDESCRIPTION: Demonstrates how expansion panels can be controlled externally using v-model. Each panel needs a value to be referenced outside the component. With the multiple prop, the v-model value becomes an array.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-expansion-panels/prop-model\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Adapter in Vuetify (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure Vuetify to use a custom date adapter, specifically DayJsAdapter from @date-io/dayjs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DayJsAdapter from '@date-io/dayjs'\n\ncreateVuetify({\n  date: {\n    adapter: DayJsAdapter,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Font Awesome 5 Icons\nDESCRIPTION: This snippet shows how to include Font Awesome 5 icons through a CDN, as well as how to add necessary imports to configure Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@fortawesome/fontawesome-free/css/all.css' // Ensure your project is capable of handling css files\nimport { createVuetify } from 'vuetify'\nimport { aliases, fa } from 'vuetify/iconsets/fa'\n\nexport default createVuetify({\n  icons: {\n    defaultSet: 'fa',\n    aliases,\n    sets: {\n      fa,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation\nDESCRIPTION: Example showing a basic v-checkbox component with color variations. Demonstrates how to apply different colors using the color prop with Vuetify's built-in color system.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/checkboxes.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-checkbox/prop-colors\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-progress-circular in Vue.js\nDESCRIPTION: Demonstrates the simplest form of v-progress-circular, displaying a circular progress bar. The value prop is used to control the progress.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-circular.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-progress-circular\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-btn-toggle in Vue\nDESCRIPTION: Demonstrates how to use v-btn-toggle to create a group of selectable buttons with a single v-model.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Nested Menu Implementation - Vue\nDESCRIPTION: Example of nested menus with submenu prop for keyboard navigation using left/right arrow keys.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/prop-submenu\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Global State for Snackbar Messages using Pinia in Vue\nDESCRIPTION: This snippet demonstrates how to use Pinia to create a global state for managing snackbar messages. It defines a store with a queue and an add function for messages.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbar-queue.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useMessagesStore = defineStore('messages', () => {\n  const queue = ref([])\n  function add (message) {\n    queue.push(message)\n  }\n\n  return { queue, add }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Filter in v-autocomplete\nDESCRIPTION: Demonstrates the use of the custom-filter prop to apply custom filtering logic to each item in the autocomplete list.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/autocompletes.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-autocomplete/prop-filter\" />\n```\n\n----------------------------------------\n\nTITLE: Localization Configuration\nDESCRIPTION: Demonstrates how to configure localization for the date composable in Vuetify. It shows how to map language codes to locales, allowing you to use different locales for translations and date formatting. In this example, the application uses `en` for translations but `en-GB` for date formatting.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createVuetify({\n  locale: {\n    locale: 'en',\n  },\n  date: {\n    locale: {\n      en: 'en-GB',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoints with Vuetify's createVuetify function\nDESCRIPTION: This snippet showcases how to configure the `useDisplay` composable and Vuetify's breakpoint system by customizing breakpoint thresholds and setting the `mobileBreakpoint` within the `createVuetify` function.  It imports the `createVuetify` function from Vuetify and exports a default configuration object that includes customized `display` options.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify} from 'vuetify'\n\nexport default createVuetify({\n  display: {\n    mobileBreakpoint: 'sm',\n    thresholds: {\n      xs: 0,\n      sm: 340,\n      md: 540,\n      lg: 800,\n      xl: 1280,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Styles for Vuetify Components in JavaScript\nDESCRIPTION: In this snippet, we modify the default text-transform style for all VBtn components globally using the Vuetify configuration.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\\nimport { VBtn } from 'vuetify/components/VBtn'\\n\\nexport default createVuetify({\\n  defaults: {\\n    VBtn: {\\n      style: 'text-transform: none;',\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: DateAdapter Interface Definition\nDESCRIPTION: Defines the `DateAdapter` interface that custom date adapters must implement. This interface outlines the required methods for handling dates, including formatting, parsing, comparison, and manipulation. A custom date adapter must implement each of these functions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DateAdapter } from 'vuetify'\n\nexport interface DateAdapter<TDate> {\n  date (value?: any): TDate | null\n  format (date: TDate, formatString: string): string\n  toJsTDate (value: TDate): TDate\n  parseISO (date: string): TDate\n  toISO (date: TDate): string\n\n  startOfDay (date: TDate): TDate\n  endOfDay (date: TDate): TDate\n  startOfMonth (date: TDate): TDate\n  endOfMonth (date: TDate): TDate\n  startOfYear (date: TDate): TDate\n  endOfYear (date: TDate): TDate\n\n  isBefore (date: TDate, comparing: TDate): boolean\n  isAfter (date: TDate, comparing: TDate): boolean\n  isEqual (date: TDate, comparing: TDate): boolean\n  isSameDay (date: TDate, comparing: TDate): boolean\n  isSameMonth (date: TDate, comparing: TDate): boolean\n  isValid (date: any): boolean\n  isWithinRange (date: TDate, range: [TDate, TDate]): boolean\n\n  addDays (date: TDate, amount: number): TDate\n  addMonths (date: TDate, amount: number): TDate\n\n  getYear (date: TDate): number\n  setYear (date: TDate, year: number): TDate\n  getDiff (date: TDate, comparing: TDate | string, unit?: string): number\n  getWeekArray (date: TDate): TDate[][]\n  getWeekdays (): string[]\n  getMonth (date: TDate): number\n  setMonth (date: TDate, month: number): TDate\n  getNextMonth (date: TDate): TDate\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-rating Component in Vue\nDESCRIPTION: Demonstrates the basic implementation of the v-rating component for gathering user feedback.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-rating\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Speed Dial with FAB in Vuetify\nDESCRIPTION: Example demonstrating the speed-dial component with the v-fab for creating customized floating action button experiences.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/floating-action-buttons.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-fab/misc-speed-dial\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Ratings with v-rating Component in Vue\nDESCRIPTION: Shows practical application of the rating component in product cards for gathering customer feedback.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/misc-card\" />\n```\n\n----------------------------------------\n\nTITLE: Clearable Text Field with Custom Event Handler in Vuetify\nDESCRIPTION: Example of a clearable text field with a custom event handler for the clear action, demonstrating how to use the @click:clear event.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/text-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-text-field\n    clearable\n    label=\"Last name\"\n    placeholder=\"Doe\"\n    persistent-clear\n    @click:clear=\"onClear\"\n  ></v-text-field>\n</template>\n\n<script setup>\n  onClear () {\n    alert('User cleared the input')\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Drawer Implementation in Vue\nDESCRIPTION: Basic setup of v-navigation-drawer within a Vue application. The drawer should be placed as a direct child of v-app component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <v-navigation-drawer />\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic v-model Usage with Vue.js Text Field\nDESCRIPTION: Demonstrates the basic usage of v-model with a v-text-field component in Vue.js. It shows how v-model is a shorthand for :model-value and @update:model-value.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/v-model.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-text-field v-model=\"foo\" />\n</template>\n\n<script setup>\n  import { shallowRef } from 'vue'\n\n  const foo = shallowRef('foo')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checkbox States Implementation\nDESCRIPTION: Example showing different checkbox states including default, disabled, and indeterminate states.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/checkboxes.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-checkbox/prop-states\" />\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoint Conditionals to Style v-sheet Component in Vue\nDESCRIPTION: This example demonstrates using breakpoint conditionals from the `useDisplay` composable to dynamically style a `v-sheet` component.  It shows how to adjust the minimum height of the `v-sheet` based on whether the screen is medium or larger, and how to control rounded corners based on whether the screen is extra small.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-sheet\n    :min-height=\"mdAndUp ? 300 : '20vh'\"\n    :rounded=\"xs\"\n  >\n    ...\n  </v-sheet>\n</template>\n\n<script setup>\n  import { useDisplay } from 'vuetify'\n\n  // Destructure only the keys you want to use\n  const { xs, mdAndUp } = useDisplay()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-window Component in Vue\nDESCRIPTION: Demonstrates the basic implementation of v-window for cycling through content easily.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-locale-provider in Vue.js\nDESCRIPTION: This example demonstrates how to use the v-locale-provider component to set locale-specific prop values for child components. The locale prop is expected to have the same structure as the locale object passed to createVuetify when initializing the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/locale-providers.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<v-locale-provider locale=\"fr\">\n  <!-- Child components here will use French locale -->\n</v-locale-provider>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom List with Chips in Vuetify\nDESCRIPTION: This advanced example shows how to implement a custom list using chips instead of v-autocomplete, providing always-visible options with search and selection functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/misc-custom-list\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Item and Selection Slots in v-autocomplete\nDESCRIPTION: Shows how to use slots to customize the visual output of the select, including adding profile pictures for chips and list items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/autocompletes.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-autocomplete/slot-item-and-selection\" />\n```\n\n----------------------------------------\n\nTITLE: Loading State in Vuetify Data Table\nDESCRIPTION: Illustrates how to use the loading prop to indicate data loading in a Vuetify data table. It also shows how to customize the loading message using the loading-text prop or the loading slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/data-tables/server-side-tables.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-data-table/prop-loading\" />\n```\n\n----------------------------------------\n\nTITLE: State Selector Using v-autocomplete\nDESCRIPTION: Demonstrates creating a stylish toggleable autocomplete field for state selection using v-autocomplete slots and transitions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/autocompletes.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-autocomplete/misc-state-selector\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify to use DateFns adapter\nDESCRIPTION: Configures Vuetify to use the DateFns adapter for date handling. It imports `createVuetify` from `vuetify` and `DateFnsAdapter` from `@date-io/date-fns`, then sets the `adapter` option in the `date` configuration to `DateFnsAdapter`.  This will then use DateFns for the Datepicker.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport DateFnsAdapter from \"@date-io/date-fns\"\n\nexport default createVuetify({\n  date: {\n    adapter: DateFnsAdapter,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Settings File in SCSS\nDESCRIPTION: This SCSS snippet demonstrates setting up custom Vuetify SASS variables by using the 'vuetify/settings' module within a 'settings.scss' file. Users can override default Vuetify variables here.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  // variables go here\n);\n```\n\n----------------------------------------\n\nTITLE: Manual Mode - Vuetify Infinite Scroll\nDESCRIPTION: Shows how to implement manual loading mode where user interaction is required to load more content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/prop-mode\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-slide-group in Vue\nDESCRIPTION: Demonstrates the basic usage of v-slide-group component, allowing items to take up as much space as needed and enabling horizontal scrolling through provided information.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for v-slider in Vuetify\nDESCRIPTION: Illustrates how to set minimum and maximum values for the slider using min and max props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-min-and-max\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Selection Display in Vuetify Select Component\nDESCRIPTION: This snippet shows how to use the selection slot in a v-select component to customize the display of selected values in the input field. It's useful for controlling how selections appear, especially in multi-select scenarios.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/selects.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-select/slot-selection\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Usage in Vue\nDESCRIPTION: Simple example of using v-avatar component to display circular user profile pictures or content within a circular container.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-avatar\" />\n```\n\n----------------------------------------\n\nTITLE: Vuetify Button Component Aliasing\nDESCRIPTION: Example of component aliasing to create virtual button components with different default configurations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetifyjs'\nimport { VBtn } from 'vuetifyjs/components'\n\nexport createVuetify({\n  aliases: {\n    VBtnSecondary: VBtn,\n    VBtnTertiary: VBtn,\n  },\n  defaults: {\n    VBtn: {\n      color: 'primary',\n      variant: 'text',\n    },\n    VBtnSecondary: {\n      color: 'secondary',\n      variant: 'flat',\n    },\n    VBtnTertiary: {\n      rounded: true,\n      variant: 'plain',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding VApp component in Nuxt 3\nDESCRIPTION: This code snippet demonstrates how to add Vuetify's root `VApp` component in `~/app.vue` file. The VApp component provides the basic Vuetify layout structure.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <NuxtLayout>\n    <v-app>\n      <NuxtPage />\n    </v-app>\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-calendar Component (HTML/Vue)\nDESCRIPTION: This example shows the basic usage of the v-calendar component. It includes an array of events with title, start, and end properties. The end property is optional and defaults to the start if not provided.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/calendars.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-calendar/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Icon Sets in Vue Template\nDESCRIPTION: Example showing how to use icons from different icon sets in a Vue template. This demonstrates using both Font Awesome (default) and Material Design Icons (with prefix) in the same template.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"fas fa-plus\" /> // This renders a FontAwesome icon\n  <v-icon icon=\"mdi:mdi-minus\" /> // This renders a MDI icon\n</template>\n```\n\n----------------------------------------\n\nTITLE: New Tab Functionality in v-autocomplete\nDESCRIPTION: Showcases the auto-select-first property which highlights the first search result, allowing quick selection with tab or enter keys.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/autocompletes.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-autocomplete/misc-new-tab\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Vuetify Automatic Treeshaking\nDESCRIPTION: This snippet outlines how to set up a Webpack configuration to work with Vuetify's automatic treeshaking feature by using the Vuetify plugin.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/treeshaking.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { VueLoaderPlugin } = require('vue-loader')\nconst { VuetifyPlugin } = require('webpack-plugin-vuetify')\n\nmodule.exports = {\n  plugins: [\n    new VueLoaderPlugin(),\n    new VuetifyPlugin(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded v-model Implementation in Vue.js\nDESCRIPTION: Shows the expanded form of v-model, explicitly using :model-value for binding and @update:model-value for updating. This demonstrates what happens behind the scenes with v-model.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/v-model.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-text-field :model-value=\"foo\" @update:model-value=\"onUpdateModel\" />\n</template>\n\n<script setup>\n  import { shallowRef } from 'vue'\n\n  const foo = shallowRef('foo')\n\n  function onUpdateModel (value) {\n    foo.value = value\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navigation Drawer with Rail Variant\nDESCRIPTION: Example of using the rail prop to create a compact drawer that shrinks to show only the first element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-mini-variant\" />\n```\n\n----------------------------------------\n\nTITLE: Creating an Account Creation Form with v-window\nDESCRIPTION: Demonstrates how to use v-window to create a rich form with smooth animations for account creation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/misc-account-creation\" />\n```\n\n----------------------------------------\n\nTITLE: Vuetify App Bar and Drawer Layout - Drawer Priority\nDESCRIPTION: Shows how v-navigation-drawer takes priority when declared before v-app-bar, affecting the component layering.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/application.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"application/drawer-app-bar\" open preview  />\n```\n\n----------------------------------------\n\nTITLE: Carousel with v-model Control\nDESCRIPTION: Demonstrates how to control the carousel using v-model binding.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/prop-model\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying File Size in v-file-input\nDESCRIPTION: Shows how to use the show-size property to configure the display of selected file sizes, with options for different size formats.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-show-size\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-slider in Vue.js\nDESCRIPTION: Demonstrates the basic implementation of the v-slider component in a Vue.js application using Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-slider\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-file-input in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-file-input component in Vuetify. It shows how to implement a simple file input field.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-file-input\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to v-file-input in Vue\nDESCRIPTION: Illustrates how to use the rules prop to create custom validation parameters for the file input component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-validation\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-model with v-color-picker in Vue\nDESCRIPTION: Shows how to use v-model to control the displayed color in v-color-picker, supporting various color formats including hex strings and RGBA/HSLA/HSVA objects.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/color-pickers.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-color-picker/prop-model\" />\n```\n\n----------------------------------------\n\nTITLE: Buffering Progress Bar in Vue\nDESCRIPTION: Shows how to create a buffering progress bar using v-progress-linear. The primary value is controlled by v-model, while the buffer is controlled by the buffer-value prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-buffer-value\" />\n```\n\n----------------------------------------\n\nTITLE: Colored Cards in Vuetify\nDESCRIPTION: Shows how to apply colors to v-card components using Vuetify's built-in color system.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  color=\"primary\"\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Binding for v-radio-group in Vue\nDESCRIPTION: Shows how to use v-model with v-radio-group to access and control the selected radio button. It also notes the use of :value for integer values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/radio-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-radio-group/prop-model-group\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt 3 App\nDESCRIPTION: These commands initialize a new Nuxt 3 application using the `nuxi` tool.  It includes navigating to the project directory, and in some cases, creates a `.npmrc` file with `shamefully-hoist=true`.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpx nuxi@latest init <project-name>\ncd <project-name>\n# Create a .npmrc file with shamefully-hoist=true\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using v-scroll with Self Modifier in Vue\nDESCRIPTION: This example demonstrates using the v-scroll directive with the .self modifier to watch scrolling within a v-card element. The onScroll method is invoked when the card contents are scrolled, incrementing a counter.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/scroll.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-scroll/option-self\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-autocomplete in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-autocomplete component, which extends v-select and adds filtering capability.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/autocompletes.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-autocomplete\" />\n```\n\n----------------------------------------\n\nTITLE: Static Value Binding with v-model in Vue.js\nDESCRIPTION: Demonstrates how to set a static value using v-model by defining the prop with an initial value and the event with a no-op function. This prevents the value from being updated.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/v-model.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-text-field model-value=\"Foobar\" @update:model-value=\"onUpdateModel\" />\n</template>\n\n<script setup>\n  function onUpdateModel (value) {\n    // noop\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: User Directory Example with v-virtual-scroll in Vue\nDESCRIPTION: An example of using v-virtual-scroll to render a large user directory by only rendering items needed to fill the viewport.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/virtual-scroller.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-virtual-scroll/misc-user-directory\" />\n```\n\n----------------------------------------\n\nTITLE: Basic v-input Component Usage in Vue\nDESCRIPTION: Demonstrates basic implementation of v-input with prepend/append slots, default slot, and messages areas.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<v-input>\n  <template v-slot:prepend></template>\n  <template v-slot:default></template>\n  <template v-slot:append></template>\n  <!-- Messages appear here -->\n</v-input>\n```\n\n----------------------------------------\n\nTITLE: Basic Number Input Usage - Vue\nDESCRIPTION: Example showing basic usage of v-number-input component with various control variants.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/number-inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-number-input/prop-control-variant\" />\n```\n\n----------------------------------------\n\nTITLE: Basic OTP Input Implementation in Vue\nDESCRIPTION: Simple implementation of the v-otp-input component without any additional properties.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-otp-input></v-otp-input>\n```\n\n----------------------------------------\n\nTITLE: Building an Onboarding Flow with v-window\nDESCRIPTION: Shows how to use v-window to create a custom onboarding component, similar to a differently styled stepper.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/misc-onboarding\" />\n```\n\n----------------------------------------\n\nTITLE: Combining v-list with v-card\nDESCRIPTION: Demonstrates how to combine a list with a card component for a cohesive UI element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/misc-card-list\" />\n```\n\n----------------------------------------\n\nTITLE: Centering Active Tab in Vuetify\nDESCRIPTION: Demonstrates the use of the center-active prop to always keep the active tab centered.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-center-active\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing v-slider Colors in Vuetify\nDESCRIPTION: Shows how to set custom colors for the slider, track, and thumb using the color, track-color, and thumb-color props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-colors\" />\n```\n\n----------------------------------------\n\nTITLE: Using Auto Grow Prop for Textarea - Vue\nDESCRIPTION: This snippet demonstrates the usage of the `auto-grow` prop, which allows the textarea to automatically grow in size based on the length of the input text. This enhances user experience by accommodating larger inputs without manual resizing.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-auto-grow\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Rendering in Vuetify Select Component\nDESCRIPTION: This snippet shows how to use the item slot in a v-select component to customize the rendering of items in the list. It provides access to the item object and props for each list item.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/selects.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-select/slot-item\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Combobox\nDESCRIPTION: Implementation of multiple selection functionality in v-combobox, allowing users to enter multiple values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/combobox.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-combobox/prop-multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Gestures with v-touch Directive in Vue\nDESCRIPTION: This example demonstrates the usage of the v-touch directive in a Vue component. It captures swipe gestures and applies directional callbacks, allowing for interactive touch-based functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/touch.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-touch/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Hint Implementation in v-input\nDESCRIPTION: Shows how to add hints to input with persistent-hint property for continuous visibility.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<v-input hint=\"Hint text\" persistent-hint></v-input>\n```\n\n----------------------------------------\n\nTITLE: Hover-Activated Menu - Vue\nDESCRIPTION: Implementation of menus that open on hover instead of click using the open-on-hover prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/prop-open-on-hover\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-color-picker in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-color-picker component in a Vue template. This example shows how to implement a simple color picker with default settings.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/color-pickers.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-color-picker\" />\n```\n\n----------------------------------------\n\nTITLE: Hover with Transition Effects\nDESCRIPTION: Demonstrates creating customized components that respond to user interaction with transition effects.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/hover.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-hover/misc-transition\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Usage in Vue with Vuetify\nDESCRIPTION: Demonstrates the basic usage of Vuetify's grid system with v-container, v-row, and v-col components. Shows how to create a responsive layout with different column sizes for various breakpoints.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row>\n      <v-col\n        v-for=\"n in 3\"\n        :key=\"n\"\n        cols=\"12\"\n        sm=\"4\"\n      >\n        <v-card height=\"200\"></v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using MDI SVG Icons in Vue Template\nDESCRIPTION: This snippet shows how to use SVG icons from MDI within a Vue single-file component, importing specific icons required for the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon :icon=\"mdiAccount\" />\n</template>\n\n<script setup>\n  import { mdiAccount } from '@mdi/js'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Menu Component Basic Usage - Vue\nDESCRIPTION: Three main approaches to define menus in markup using v-menu component - through activator slot, parent prop, or CSS selector string.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Options Implementation\nDESCRIPTION: Advanced implementation showcasing custom filter algorithm, inline list editing, and dynamic input items in v-combobox.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/combobox.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-combobox/misc-advanced\" />\n```\n\n----------------------------------------\n\nTITLE: Offsetting Columns in Vuetify Grid\nDESCRIPTION: Shows how to use the offset prop to control the position of content in a Vuetify grid layout, including offset for different breakpoints.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row>\n      <v-col\n        offset=\"3\"\n        cols=\"6\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          offset-3 cols=\"6\"\n        </v-card>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col\n        offset-md=\"4\"\n        cols=\"6\"\n        md=\"4\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          offset-md=\"4\" cols=\"6\" md=\"4\"\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Form Dialog Example\nDESCRIPTION: Implementation of a form within a dialog component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/misc-form\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Colors and Variants to Chips in Vuetify\nDESCRIPTION: This snippet showcases how to apply different colors from the Material Design palette and various style variants to v-chip components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-colored\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic SVG Icons in Vuetify with Script Setup\nDESCRIPTION: Example demonstrating how to implement semantic SVG icons with proper accessibility attributes and script setup in Vue 3.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/icons.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<v-icon aria-label=\"My Account\" role=\"img\" aria-hidden=\"false\">\n  mdiAccount\n</v-icon>\n\n<script setup>\nimport { mdiAccount } from \"@mdi/js\";\n\nconst icons = { mdiAccount }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Append and Prepend Slots Usage\nDESCRIPTION: Shows how to use append and prepend slots for custom icons or content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<v-input>\n  <template v-slot:prepend>\n    <v-icon>mdi-prepend-icon</v-icon>\n  </template>\n  <template v-slot:append>\n    <v-icon>mdi-append-icon</v-icon>\n  </template>\n</v-input>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Custom Navigation Arrows\nDESCRIPTION: Demonstrates how to customize carousel navigation arrows using prev and next slots.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/slots-next-prev\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Swatches in v-color-picker for Vue\nDESCRIPTION: Demonstrates how to display and customize color swatches in v-color-picker using the show-swatches prop and swatches prop for custom colors.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/color-pickers.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-color-picker/prop-swatches\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Dialog Implementation\nDESCRIPTION: Example of creating a customized loading experience using the dialog component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/misc-loader\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting a date using useDate\nDESCRIPTION: Shows how to use the `useDate` composable to format a date string using a specified format. The `format` method is used to convert a date string into a human-readable format.  This example shows converting the date to 'fullDateWithWeekday' format.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import { useDate } from 'vuetify'\n\n  const date = useDate()\n\n  const formatted = date.format('2010-04-13', 'fullDateWithWeekday')\n\n  console.log(formatted) // Tuesday, April 13, 2010\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Usage with v-model\nDESCRIPTION: Basic implementation of v-pagination component that shows how to use the length prop and v-model for maintaining current page state.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/paginations.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<v-pagination v-model=\"page\" :length=\"length\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Chip Group Usage in Vue\nDESCRIPTION: Demonstrates basic implementation of v-chip-group for creating filterable selections. The component defaults to horizontal overflow but can be configured for column layout.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chip-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<v-chip-group>\n  <!-- Chip content goes here -->\n</v-chip-group>\n```\n\n----------------------------------------\n\nTITLE: Using v-speed-dial Component in Vue.js with Vuetify\nDESCRIPTION: This snippet demonstrates the usage of the v-speed-dial component in a Vue.js application using Vuetify. The component is used as a floating action button that can reveal additional actions when clicked. It can be attached to material to signify a promoted action in the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/speed-dials.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-speed-dial\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Button Toggle in Vue\nDESCRIPTION: Illustrates the use of the multiple prop to allow selection of multiple values in v-btn-toggle.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/prop-multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-click-outside Directive in Vue\nDESCRIPTION: Demonstrates basic usage of the v-click-outside directive in a Vue component. The directive is applied to a button element and triggers a handler function when clicked outside.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/click-outside.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-click-outside/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Using Tab and Item Slots in Vuetify Tabs\nDESCRIPTION: Shows how to use the tab and item slots with the items prop to reduce the markup required for building tabs. This feature was introduced in version 3.6.0.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/slot-tabs\" />\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items in Vuetify\nDESCRIPTION: Shows how to use the align and align-self properties to change the vertical alignment of flex items and their parents in a Vuetify grid.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row\n      align=\"start\"\n      no-gutters\n      style=\"height: 150px;\"\n    >\n      <v-col\n        v-for=\"align in alignments\"\n        :key=\"align\"\n        align-self=\"{{ align }}\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          {{ align }}\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      alignments: [\n        'start',\n        'center',\n        'end',\n      ],\n    }),\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vuetify with JavaScript Color Pack\nDESCRIPTION: This code snippet demonstrates how to create a Vuetify instance with a theme that utilizes JavaScript-based colors from the Vuetify color utility. The 'primary' and 'secondary' colors are defined using specific color shades from the Vuetify color pack.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/colors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\n\nimport colors from 'vuetify/util/colors'\n\nexport default createVuetify({\n  theme: {\n    themes: {\n      light: {\n        dark: false,\n        colors: {\n          primary: colors.red.darken1, // #E53935\n          secondary: colors.red.lighten4, // #FFCDD2\n          ...\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Cursor Utilities with SASS in Vuetify\nDESCRIPTION: This snippet demonstrates how to customize the cursor utility classes in Vuetify using SASS variables. It uses the `vuetify/settings` module to configure the `cursor` utility, defining the property, class name prefix, and available values. This allows developers to modify the available cursor styles or add new ones.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/cursor.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  $utilities: (\n    \"cursor\": (\n      property: cursor,\n      class: cursor,\n      values: auto default pointer wait text move help not-allowed progress grab grabbing none\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering VPullToRefresh Component in Vuetify\nDESCRIPTION: This snippet demonstrates how to import and register the VPullToRefresh component from Vuetify labs. It requires manual import and registration with the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/pull-to-refresh.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VPullToRefresh } from 'vuetify/labs/VPullToRefresh'\n\nexport default createVuetify({\n  components: {\n    VPullToRefresh,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Shaped v-list Items\nDESCRIPTION: Demonstrates how to create shaped list items with rounded borders on one side using the 'shaped' prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-shaped\" />\n```\n\n----------------------------------------\n\nTITLE: Text Field with Persistent Hint in Vuetify\nDESCRIPTION: Demonstrates how to use the persistent-hint property to always show a hint message for a password input field.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/text-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<v-text-field\n  hint=\"Enter your password to access this website\"\n  label=\"Password\"\n  persistent-hint\n  type=\"input\"\n></v-text-field>\n```\n\n----------------------------------------\n\nTITLE: Multiple v-switches with Shared v-model in Vue\nDESCRIPTION: Shows how multiple v-switch components can share the same v-model using an array.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-switch/prop-model-as-array\" />\n```\n\n----------------------------------------\n\nTITLE: VDateInput with Range Selection in Vuetify\nDESCRIPTION: This example shows how to use the multiple prop with a value of range to select two dates and all dates between them.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-date-input/prop-multiple-range\" />\n```\n\n----------------------------------------\n\nTITLE: Expansion Panel Variants in Vuetify\nDESCRIPTION: Demonstrates the four different variants of Vuetify expansion panels: default, accordion (no margins around active panel), inset (smaller when activated), and popup (larger when activated).\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-expansion-panels/prop-variant\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Expansion Panel Implementation in Vuetify\nDESCRIPTION: Demonstrates an advanced implementation of expansion panels using slots in the v-expansion-panel-title component to create reactive content that fades in and out based on open/closed state.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-expansion-panels/misc-advanced\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Item Title Using Array in Vuetify (HTML)\nDESCRIPTION: This snippet shows how to use the item-title prop with an array value to lookup properties on each item object. This method is useful when the key contains a dot or for accessing nested properties.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/items.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<v-component\n  :item-title=\"['name']\"\n  :item-title=\"['user', 'name']\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Toolbar Loader Progress Bar in Vue\nDESCRIPTION: Shows how to position v-progress-linear at the bottom of a v-toolbar using the absolute prop and control visibility with the active prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/misc-toolbar-loader\" />\n```\n\n----------------------------------------\n\nTITLE: Card Variants in Vuetify\nDESCRIPTION: Demonstrates different card variants available in Vuetify, including elevated, flat, tonal, outlined, text, and plain.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  variant=\"elevated\"\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Start Side Loading - Vuetify Infinite Scroll\nDESCRIPTION: Demonstrates loading content at the start of the scroll container with bottom-initialized scrollbar.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/prop-side-start\" />\n```\n\n----------------------------------------\n\nTITLE: Accessible Icon Button Implementation in Vuetify\nDESCRIPTION: Demonstrates how to create an accessible icon button with proper ARIA labeling for screen readers.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<v-btn\n  aria-label=\"Refresh\"\n  icon=\"mdi-refresh\"\n></v-btn>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Components with Vuetify in Vue\nDESCRIPTION: In this snippet, dynamic components are illustrated, showcasing how to conditionally render Vuetify components using `<component>` in a Vue component. This addresses a specific limitation around dynamic imports with the loader plugin.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/treeshaking.md#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <component :is=\"button ? 'v-btn' : 'v-chip'\" />\n</template>\n\n<script setup>\n  import { VBtn } from 'vuetify/components/VBtn'\n  import { VChip } from 'vuetify/components/VChip'\n  import { shallowRef } from 'vue'\n\n  const button = shallowRef(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Persistent Dialog Implementation\nDESCRIPTION: Example of a persistent dialog that cannot be dismissed by clicking outside or pressing ESC.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/prop-persistent\" />\n```\n\n----------------------------------------\n\nTITLE: Justifying Grid Items in Vuetify\nDESCRIPTION: Shows how to use the justify property to change the horizontal alignment of flex items in a Vuetify grid layout.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row\n      v-for=\"justify in justifyItems\"\n      :key=\"justify\"\n      :justify=\"justify\"\n      no-gutters\n    >\n      <v-col\n        v-for=\"n in 3\"\n        :key=\"n\"\n        cols=\"2\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          {{ justify }}\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      justifyItems: [\n        'start',\n        'center',\n        'end',\n        'space-between',\n        'space-around',\n      ],\n    }),\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-ripple Directive in Vue\nDESCRIPTION: Demonstrates how to apply the v-ripple directive to enable basic ripple functionality on a component or HTML element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/ripple.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-ripple/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Setting VTooltip Props with v-tooltip Directive in Vue\nDESCRIPTION: Demonstrates how to pass an object of VTooltip props to the v-tooltip directive. This allows for more complex tooltip configurations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/tooltip.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tooltip-directive/object-literals\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify in Vitepress Theme\nDESCRIPTION: This TypeScript code configures Vuetify within a Vitepress theme. It imports necessary Vuetify modules, creates a Vuetify instance, and registers it with the Vitepress application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport DefaultTheme from 'vitepress/theme'\nimport 'vuetify/styles'\nimport * as components from 'vuetify/components'\nimport * as directives from 'vuetify/directives'\nimport { createVuetify } from 'vuetify'\n\nconst vuetify = createVuetify({ components, directives })\n\nexport default {\n  ...DefaultTheme,\n  enhanceApp({ app }) {\n    app.use(vuetify)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Cycling Carousel\nDESCRIPTION: Implements automatic slide transitions every 6 seconds using the cycle prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/prop-cycle\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Display in v-window Component\nDESCRIPTION: Shows how to use the show-arrows prop to display navigation arrows, with an option to show on hover.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/prop-show-arrows\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Label Slot Implementation\nDESCRIPTION: Shows how to use the label slot to create custom HTML content for checkbox labels.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/checkboxes.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-checkbox/slot-label\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Thumb Label for v-slider in Vuetify\nDESCRIPTION: Shows how to display and customize the thumb label of the slider, including color and size adjustments.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-thumb\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Display Format in VDateInput\nDESCRIPTION: This example shows how to use the display-format prop with the date composable to change the displayed format of the date in the input.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-date-input/prop-display-format\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Hover Component Usage in Vue.js\nDESCRIPTION: Demonstrates the basic implementation of v-hover component which provides scoped access to its internal model and mouse event listeners. The component can be explicitly controlled using the model-value property.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/hover.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-hover\" />\n```\n\n----------------------------------------\n\nTITLE: Field-Level Error Message Customization in HTML\nDESCRIPTION: The snippet redefines default error messages directly at the field level. It requires the use of the rules composable to allow personalized error messages for form validation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/rules.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<v-form>\n  <v-text-field\n    label=\"Username\"\n    :rules=\"[rules.required('You have to fill this field!')]\"\n  ></v-text-field>\n</v-form>\n```\n\n----------------------------------------\n\nTITLE: Disabling v-slider in Vuetify\nDESCRIPTION: Illustrates how to disable the v-slider component, preventing user interaction.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Snackbar Props for All Messages in Vue\nDESCRIPTION: This snippet demonstrates how to set Snackbar props on the queue to apply to all messages. It sets a timeout of 2000ms and an error color for all snackbars in the queue.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbar-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-snackbar-queue timeout=\"2000\" color=\"error\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Sparkline Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the Sparkline component in Vuetify, showing both trend and bar variations with customization options.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sparklines.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-sparkline/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Tabs in Toolbar Extension Slot\nDESCRIPTION: Shows how to place v-tabs inside the extension slot of v-toolbar, a common usage pattern.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/misc-content\" />\n```\n\n----------------------------------------\n\nTITLE: Menu with Tooltip Activator - Vue\nDESCRIPTION: Advanced setup for nested activators combining v-menu and v-tooltip on the same activator button.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/slot-activator-and-tooltip\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Chips with Selects in Vuetify\nDESCRIPTION: This snippet shows how to use chips within select components to display selected data, allowing for dynamic addition of custom tags.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/misc-in-selects\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Two-line v-list with Subheader\nDESCRIPTION: Shows how to create a two-line list with subheaders and dividers, where the subtitle overflows with ellipsis if it extends past one line.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-two-line-and-subheader\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced VDateInput Example: Passenger Date of Birth\nDESCRIPTION: This example demonstrates a more advanced use case of the v-date-input component, specifically for selecting a passenger's date of birth.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-date-input/misc-passenger\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Background Images to v-app-bar in Vue\nDESCRIPTION: Illustrates how to integrate background images into the v-app-bar component using the image prop or custom image slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/app-bars.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-app-bar/prop-image\" />\n```\n\n----------------------------------------\n\nTITLE: Grid with No Gutters in Vuetify\nDESCRIPTION: Demonstrates how to remove the negative margins from v-row and the padding from its direct v-col children using the no-gutters property in a Vuetify grid.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row no-gutters>\n      <v-col\n        v-for=\"n in 3\"\n        :key=\"n\"\n        cols=\"12\"\n        sm=\"4\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          Column\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Sticky Banner Implementation\nDESCRIPTION: Shows how to implement a sticky banner that remains pinned to the top of the screen using the sticky prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/banners.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nv-banner/prop-sticky\n```\n\n----------------------------------------\n\nTITLE: Inset v-switch in Vue\nDESCRIPTION: Demonstrates how to render a v-switch component in inset mode.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-switch/prop-inset\" />\n```\n\n----------------------------------------\n\nTITLE: Inline Checkbox Implementation\nDESCRIPTION: Demonstrates how to use v-checkbox-btn component for inline placement with other form components like text fields.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/checkboxes.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-checkbox/misc-inline-textfield\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Thumb Label in v-range-slider\nDESCRIPTION: Demonstrates how to create a customized solution using the tick-labels prop and the thumb-label slot in v-range-slider.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-range-slider/slot-thumb-label\" />\n```\n\n----------------------------------------\n\nTITLE: Custom No-Data Slot with Chips\nDESCRIPTION: Example showing custom no-data slot implementation in v-combobox to provide context during search/creation of items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/combobox.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-combobox/slot-no-data\" />\n```\n\n----------------------------------------\n\nTITLE: Navigation Drawer with Background Images\nDESCRIPTION: Example showing how to apply custom background images to the drawer using the image prop or image slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-images\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Outlined Chips in Vuetify\nDESCRIPTION: This example demonstrates how to create outlined chips that inherit their border color from the current text color.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-outlined\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Display Information using Composition API in Vue\nDESCRIPTION: This snippet demonstrates how to access display information, specifically the `mobile` property, using the `useDisplay` composable within a Vue 3 component using the Composition API. It imports `useDisplay` from Vuetify and `onMounted` from Vue, then logs the initial value of the `mobile` ref when the component is mounted.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import { onMounted } from 'vue'\n  import { useDisplay } from 'vuetify'\n\n  const { mobile } = useDisplay()\n\n  onMounted(() => {\n    console.log(mobile.value) // false\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Template Example for Custom Component using Defaults in HTML\nDESCRIPTION: This is an example of how the custom component MyComponent1 utilizes the default value set in the Vuetify config, showcasing the ease of integrating defaults in Vue templates.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\\n  <MyComponent1 /> <!-- I am bar -->\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify Time Picker Component\nDESCRIPTION: This snippet shows how to import and register the VTimePicker component from Vuetify labs. It's required for manual import and registration with the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/time-pickers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VTimePicker } from 'vuetify/labs/VTimePicker'\n\nexport default createVuetify({\n  components: {\n    VTimePicker,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: WYSIWYG Button Toggle in Vue\nDESCRIPTION: Shows how to create a custom WYSIWYG component by grouping similar actions using v-btn-toggle.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/misc-wysiwyg\" />\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias for Vuetify Components in JavaScript\nDESCRIPTION: This snippet creates an alias for the VBtn component and sets specific defaults for this new virtual component, demonstrating how classes and styles are merged in Vuetify's defaults system.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\\nimport { VBtn } from 'vuetify/components/VBtn'\\n\\nexport default createVuetify({\\n  aliases: {\\n    VBtnPrimary: VBtn,\\n  },\\n\\n  defaults: {\\n    VBtnPrimary: {\\n      class: ['v-btn--primary', 'text-none'],\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Using v-intersect Directive in Vue\nDESCRIPTION: This example demonstrates how to use the v-intersect directive in a Vue component. It shows a card that changes color when it becomes visible in the viewport.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/intersect.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-intersect/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Visibility in Vue\nDESCRIPTION: Demonstrates how to programmatically control the visibility of a tooltip using v-model in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tooltips.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tooltip/prop-visibility\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Vuetify Icon Aliases\nDESCRIPTION: JavaScript code demonstrating how to extend the built-in Vuetify icon aliases with custom aliases. This allows developers to use additional icon aliases like $product and $support in their components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { aliases, mdi } from 'vuetify/iconsets/mdi'\n\nexport default createVuetify({\n  icons: {\n    aliases: {\n      ...aliases,\n      product: 'mdi-dropbox',\n      support: 'mdi-lifebuoy',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vuetify Theme Toggle Example\nDESCRIPTION: Example showing how to use the theme prop to dynamically switch between light and dark themes in a Vuetify application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/application.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"application/theme\" open preview />\n```\n\n----------------------------------------\n\nTITLE: Rendering v-list with Items Prop in Vue\nDESCRIPTION: Shows how to create a list using the 'items' prop instead of markup. This approach allows for dynamic list generation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-items\" />\n```\n\n----------------------------------------\n\nTITLE: Using Global Snackbar Messages in Vue Error Handling\nDESCRIPTION: This code demonstrates how to use the global message store to add error messages to the snackbar queue from any component, specifically in an error handling scenario.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbar-queue.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  const messages = useMessagesStore()\n\n  function onError (err) {\n    messages.add({ text: err.message, color: 'error' })\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Append and Prepend Slots in v-slider\nDESCRIPTION: Shows how to use append and prepend slots to customize the v-slider component for various situations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/slot-append-and-prepend\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Chip Group\nDESCRIPTION: Demonstrates a chip group that allows multiple values to be selected simultaneously using the multiple prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chip-groups.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<v-chip-group multiple>\n  <!-- Multiple selection chips -->\n</v-chip-group>\n```\n\n----------------------------------------\n\nTITLE: Custom Content in Progress Bar using Vue\nDESCRIPTION: Demonstrates using the default slot or local model binding to display custom content inside the progress bar.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/slot-default\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Subheaders and Dividers to v-list\nDESCRIPTION: Shows how to add subheaders or dividers to the list by including items with a 'type' property. The property to use can be customized with the 'item-type' prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-items-type\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Overflow Button Usage\nDESCRIPTION: Demonstrates basic implementation of v-overflow-btn component for creating selection lists in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-overflow-btn\" />\n```\n\n----------------------------------------\n\nTITLE: Pseudo Carousel with v-slide-group\nDESCRIPTION: Demonstrates a creative use of v-slide-group to display information on sheets, using selection to show auxiliary information.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/misc-pseudo-carousel\" />\n```\n\n----------------------------------------\n\nTITLE: Carousel without Delimiters\nDESCRIPTION: Shows how to hide the bottom control delimiters using the hide-delimiters prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/prop-hide-delimiters\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling v-list Interaction\nDESCRIPTION: Demonstrates how to disable interaction with the entire list using the 'disabled' prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Props in Vuetify Select Component\nDESCRIPTION: This snippet demonstrates how to use custom item props in a v-select component. It shows different ways to pass additional properties to list items, including using the 'props' key in item objects or passing a custom transform function to itemProps.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/selects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = [\n  {\n    title: 'John',\n    props: { subtitle: 'Engineering' },\n  },\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = [\n  {\n    title: 'John',\n    subtitle: 'Engineering',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Height of v-table in Vue\nDESCRIPTION: Demonstrates how to use the height prop to set a specific height for the table, which can be useful for controlling the table's size in the layout.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tables.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-table/prop-height\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Loader Implementation - HTML\nDESCRIPTION: This snippet demonstrates how to implement a basic skeleton loader component using Vuetify. The skeleton loader acts as a placeholder while content is being fetched.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/skeleton-loaders.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-skeleton-loader></v-skeleton-loader>\n```\n\n----------------------------------------\n\nTITLE: Complex Selection Display in v-file-input\nDESCRIPTION: Shows a complex use-case for the selection slot, displaying the first two selections as chips with a number indicator for remaining files.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/misc-complex-selection\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Modes for v-color-picker in Vue\nDESCRIPTION: Illustrates how to specify available input modes for users and control the current mode using the modes prop and mode v-model.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/color-pickers.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-color-picker/prop-mode\" />\n```\n\n----------------------------------------\n\nTITLE: Account Verification OTP\nDESCRIPTION: Implementation of OTP input for account verification purposes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/misc-verify\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic Font Icons in Vuetify\nDESCRIPTION: Example showing how to implement semantic icons with proper accessibility attributes in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/icons.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-icon aria-hidden=\"false\">\n  mdi-account\n</v-icon>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vuetify Plugin Configuration\nDESCRIPTION: Creates a Vuetify plugin configuration file that imports and sets up Vuetify components for use in a Nuxt application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const vuetify = createVuetify({ components })\n  nuxtApp.vueApp.use(vuetify)\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Scrolling with Vue Router\nDESCRIPTION: This snippet demonstrates how to use the `goTo` function from Vuetify in conjunction with Vue Router to control scrolling behavior on route changes.  It configures the router's `scrollBehavior` option to scroll to a hash, saved position, or the top of the page.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/scrolling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Router from 'vue-router'\nimport goTo from 'vuetify/lib/services/goto'\n\nexport default new Router({\n  scrollBehavior: (to, from, savedPosition) => {\n    let scrollTo = 0\n\n    if (to.hash) {\n      scrollTo = to.hash\n    } else if (savedPosition) {\n      scrollTo = savedPosition.y\n    }\n\n    return goTo(scrollTo)\n  },\n  routes: [\n    //\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-fab Component in Vuetify\nDESCRIPTION: Basic implementation example showing how to use the v-fab component in different sizes and contexts within an application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/floating-action-buttons.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-fab\" />\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Chips with Vuetify\nDESCRIPTION: This snippet shows how to incorporate icons from the Material Icons font library into v-chip components using the icon slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/slot-icon\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Slot in v-rating Component in Vue\nDESCRIPTION: Demonstrates how to use the item-label slot to display arbitrary content for labels.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/slot-item-label\" />\n```\n\n----------------------------------------\n\nTITLE: Pagination Length Configuration\nDESCRIPTION: Implementation showing how to set pagination length which determines the number of page buttons displayed.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/paginations.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<v-pagination :length=\"length\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Direction for Radio Groups in Vuetify\nDESCRIPTION: Demonstrates how to set the direction (row or column) for radio groups in Vuetify using respective props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/radio-buttons.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-radio-group/prop-direction\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-resize Directive in Vue\nDESCRIPTION: This example demonstrates how to use the v-resize directive in a Vue component. It shows a basic implementation where values change as the window is resized.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/resize.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-resize/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Defaults for Components\nDESCRIPTION: This snippet illustrates how to define nested default properties based on component hierarchy. When `MyButton` or `VBtn` are nested inside a `VCard`, their `color` properties are swapped. This allows creating context-aware default styles for components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/aliasing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { VBtn } from 'vuetify/components/VBtn'\n\nexport default createVuetify({\n  aliases: {\n    MyButton: VBtn,\n  },\n  defaults: {\n    MyButton: {\n      color: 'primary',\n      variant: 'tonal',\n    },\n    VBtn: {\n      color: 'secondary',\n      variant: 'flat',\n    },\n    VCard: {\n      MyButton: { color: 'secondary' },\n      VBtn: { color: 'primary' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Right-positioned Navigation Drawer\nDESCRIPTION: Example showing how to position the drawer on the right side using the location prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-right\" />\n```\n\n----------------------------------------\n\nTITLE: Toggle Functionality in v-bottom-navigation\nDESCRIPTION: Shows how to use the active prop to control the display state of v-bottom-navigation, as it supports v-model.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-navigation.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-navigation/prop-toggle\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Icons in v-slide-group\nDESCRIPTION: Shows how to use the next-icon and prev-icon props to customize the pagination icons in the slide group.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/prop-custom-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-defaults-provider Component in Vue with Vuetify\nDESCRIPTION: This example demonstrates how to use the v-defaults-provider component to set default props for child components. It hooks into Vuetify's Global configuration feature to scope prop changes to specific sections of the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/defaults-providers.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-defaults-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Vuetify App Bar and Drawer Layout - App Bar Priority\nDESCRIPTION: Demonstrates how v-app-bar takes priority over v-navigation-drawer due to rendering order when app bar is declared first.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/application.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"application/app-bar-drawer\" open preview  />\n```\n\n----------------------------------------\n\nTITLE: Banner Actions Slot Usage\nDESCRIPTION: Demonstrates how to implement action buttons within the banner using the actions slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/banners.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nv-banner/slot-actions\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-snackbar in Vue\nDESCRIPTION: Demonstrates the simplest form of v-snackbar, displaying a temporary and closable notification to the user.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbars.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-snackbar/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Global mobileBreakpoint Value with useDisplay\nDESCRIPTION: This example demonstrates how to override the global `mobileBreakpoint` value by passing it directly to the `useDisplay` composable. It provides a custom value of `580`, which will be used to determine the `mobile` property's value, instead of the globally configured value.  The example logs `false` if the viewport width is 960px.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import { onMounted } from 'vue'\n  import { useDisplay } from 'vuetify'\n\n  const { mobile } = useDisplay({ mobileBreakpoint: 580 })\n\n  // Given a viewport width of 960px\n  onMounted(() => {\n    console.log(mobile.value) // false\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-progress-linear in Vue\nDESCRIPTION: Demonstrates the simplest form of v-progress-linear, displaying a horizontal progress bar. The value prop controls the progress.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-progress-linear\" />\n```\n\n----------------------------------------\n\nTITLE: Using Vuetify Icon Component with MDI\nDESCRIPTION: This snippet shows how to use the Vuetify v-icon component within a Vue template, referencing an icon from the MDI set.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"mdi-home\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Specifying Item Title Using Function in Vuetify (HTML)\nDESCRIPTION: This snippet demonstrates how to use the item-title prop with a function value. This method is useful for formatting values or accessing properties that are not direct children of the item object.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/items.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<v-component\n  :item-title=\"item => item.name\"\n  :item-title=\"item => item.user.name\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing v-color-picker Appearance in Vue\nDESCRIPTION: Shows how to customize the appearance of the v-color-picker by hiding or showing various parts like canvas, sliders, inputs, and swatches using props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/color-pickers.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-color-picker/prop-canvas\" />\n```\n\n----------------------------------------\n\nTITLE: Mandatory Selection Chip Group\nDESCRIPTION: Creates a chip group where at least one value must always be selected using the mandatory prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chip-groups.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<v-chip-group mandatory>\n  <!-- Mandatory selection chips -->\n</v-chip-group>\n```\n\n----------------------------------------\n\nTITLE: Temporary Navigation Drawer\nDESCRIPTION: Implementation of a temporary drawer that sits above the application with a scrim overlay.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-temporary\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for v-range-slider\nDESCRIPTION: Shows how to set minimum and maximum values for the v-range-slider component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-range-slider/prop-min-and-max\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing the Title Slot in v-empty-state\nDESCRIPTION: Shows how to customize the font-sizing and appearance of the title using utility classes via the title slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/slot-title\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Icon Sets in Vuetify\nDESCRIPTION: Configuration to use multiple icon sets simultaneously in Vuetify. This example sets Font Awesome as the default while maintaining access to Material Design Icons through a prefix.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { aliases, fa } from 'vuetify/iconsets/fa'\nimport { mdi } from 'vuetify/iconsets/mdi'\n\nexport default createVuetify({\n  icons: {\n    defaultSet: 'fa',\n    aliases,\n    sets: {\n      fa,\n      mdi,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Floating Navigation Drawer\nDESCRIPTION: Example of a floating drawer that removes the default border and detaches from the side.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-permanent-and-floating\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Properties in v-list\nDESCRIPTION: Demonstrates how to customize which properties are used for the title and value of each item using the 'item-title' and 'item-value' props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-items-custom\" />\n```\n\n----------------------------------------\n\nTITLE: Character Count Limitation for Textarea - Vue\nDESCRIPTION: This snippet demonstrates how to provide user feedback on character limits by utilizing the `counter` prop for the `v-textarea`. It informs users about the maximum allowed characters, enhancing data input control.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-counter\" />\n```\n\n----------------------------------------\n\nTITLE: Aliasing Vuetify Components\nDESCRIPTION: This snippet demonstrates how to create aliases for Vuetify components. It imports `createVuetify` and `VBtn`, then defines aliases `MyButton` and `MyButtonAlt` that map to the `VBtn` component.  This allows using `MyButton` and `MyButtonAlt` as virtual components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/aliasing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { VBtn } from 'vuetify/components/VBtn'\n\nexport default createVuetify({\n  aliases: {\n    MyButton: VBtn,\n    MyButtonAlt: VBtn,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Behavior for v-app-bar in Vue\nDESCRIPTION: Shows how to implement different scroll behaviors for the v-app-bar component, including hide, fully-hide, collapse, elevate, and fade-image options.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/app-bars.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<prop-scroll-behavior />\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify Treeview Component\nDESCRIPTION: This snippet shows how to import and register the VTreeview component from Vuetify labs. It requires manual import and registration with the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/treeview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VTreeview } from 'vuetify/labs/VTreeview'\n\nexport default createVuetify({\n  components: {\n    VTreeview,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dialog with Custom Transitions\nDESCRIPTION: Implementation showing dialogs with custom transition animations from top or bottom.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/prop-transitions\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Display Classes Using useDisplay\nDESCRIPTION: This snippet shows how to use the `displayClasses` property returned by `useDisplay` to apply custom classes to a component based on the current display. It defines a custom name, `v-component`, and uses it to generate a class name suffix (--mobile) when the mobile breakpoint is active. The resulting class names are then applied to the root element of the component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div\n    :class=\"[\n      'v-component',\n      displayClasses,\n    ]\"\n  >\n    <!-- v-component--mobile -->\n  </div>\n</template>\n\n<script setup>\n  import { defineName } from 'vue'\n  import { useDisplay } from 'vuetify'\n\n  const { displayClasses } = useDisplay({ mobileBreakpoint }, 'v-component')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Additional Elements in v-click-outside Detection\nDESCRIPTION: Demonstrates the use of the include option with v-click-outside. This option allows you to specify additional HTML elements that should be considered part of the 'inside' area.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/click-outside.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-click-outside/option-include\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Label-style Chips in Vuetify\nDESCRIPTION: This example shows how to create label-style chips that use the v-card border-radius, providing a distinct visual style for the chips.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-label\" />\n```\n\n----------------------------------------\n\nTITLE: Adding VApp component in Nuxt 3\nDESCRIPTION: This code snippet demonstrates how to add Vuetify's root `VApp` component in `~/layouts/default.vue` file. The VApp component provides the basic Vuetify layout structure.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <!-- .... -->\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Slot in v-rating Component in Vue\nDESCRIPTION: Illustrates advanced customization possibilities using the item slot for more flexibility in rating display.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/slot-item\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-tooltip in Vue\nDESCRIPTION: Demonstrates the basic usage of v-tooltip component wrapping an element in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tooltips.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-tooltip\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical v-snackbar in Vue\nDESCRIPTION: Demonstrates the use of the vertical property to stack the content of the v-snackbar.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbars.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-snackbar/prop-vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Values in v-range-slider\nDESCRIPTION: Demonstrates how to set step values other than 1 for v-range-slider. This can be useful for applications requiring more or less precise value adjustments.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-range-slider/prop-step\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Aria Labels to v-rating Component in Vue\nDESCRIPTION: Shows how to improve accessibility by providing labels for assistive technologies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-icon-label\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Utility Classes to Vuetify Components in JavaScript\nDESCRIPTION: This snippet illustrates how to use utility classes to modify default properties for Vuetify components, specifically applying 'text-none' class to all VBtn components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\\nimport { VBtn } from 'vuetify/components/VBtn'\\n\\nexport default createVuetify({\\n  defaults: {\\n    VBtn: {\\n      class: 'text-none',\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Component-Integrated Menu - Vue\nDESCRIPTION: Example showing how to integrate menus within other components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/misc-use-in-components\" />\n```\n\n----------------------------------------\n\nTITLE: Card with Prepend and Append Slots in Vuetify\nDESCRIPTION: Shows how to use prepend and append slots to add icons or avatars to a card.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  prepend-icon=\"mdi-home\"\n  append-icon=\"mdi-dots-vertical\"\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Appending Text Field to v-slider in Vuetify\nDESCRIPTION: Demonstrates how to combine v-slider with other components like v-text-field in its append slot for additional functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/slot-append-text-field\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vuetify Rules Plugin in JavaScript\nDESCRIPTION: This snippet provides the setup to initialize and register the Rules plugin with a Vuetify instance. It integrates with Vuetify's locale system for internationalization. The code requires Vue and Vuetify to be imported and initialized first.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/rules.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createVue } from 'vue'\nimport { createVuetify } from 'vuetify'\nimport { createRulesPlugin } from 'vuetify/labs/rules'\n\nconst app = createVue()\nconst vuetify = createVuetify()\n\napp.use(createRulesPlugin({ /* options */ }, vuetify.locale))\n```\n\n----------------------------------------\n\nTITLE: Ordering Grid Items in Vuetify\nDESCRIPTION: Demonstrates how to control the ordering of grid items using the order prop, including first and last ordering, in a Vuetify grid layout.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/grids.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <v-container class=\"grey lighten-5\">\n    <v-row>\n      <v-col\n        v-for=\"n in 3\"\n        :key=\"n\"\n        :order=\"n\"\n      >\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          Column {{ n }}\n        </v-card>\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col order=\"last\">\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          Last\n        </v-card>\n      </v-col>\n      <v-col>\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          Second\n        </v-card>\n      </v-col>\n      <v-col order=\"first\">\n        <v-card\n          class=\"pa-2\"\n          outlined\n          tile\n        >\n          First\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Usage in Vue with Vuetify\nDESCRIPTION: Demonstrates the simplest form of using v-overlay component in a Vue template with Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overlays.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-overlay activator=\"#id\" />\n<v-overlay activator=\".class\" />\n<v-overlay :activator=\"elementRef\" />\n<v-btn>\n  <v-overlay activator=\"parent\" />\n</v-btn>\n```\n\n----------------------------------------\n\nTITLE: Menu with Custom Transitions - Vue\nDESCRIPTION: Implementation of menus with custom transition effects using Vuetify's built-in transitions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/misc-transition\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Tick Marks to v-slider in Vuetify\nDESCRIPTION: Illustrates how to add tick marks to the slider to represent predetermined values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-ticks\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Icon in VDateInput\nDESCRIPTION: This example demonstrates how to move the calendar icon within the input or entirely by using the prepend-icon and prepend-inner-icon properties.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-date-input/prop-prepend-icon\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Ripple Color in Vue Components\nDESCRIPTION: Illustrates how to change the color of the ripple effect using helper classes in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/ripple.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-ripple/misc-custom-color\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Wrap Reverse in Vue with Vuetify\nDESCRIPTION: This example shows how to use flex-wrap-reverse in a Vuetify flex container.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-wrap-reverse\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-card in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-card component with title, subtitle, text, and actions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  title=\"Card title\"\n  subtitle=\"Subtitle\"\n  text=\"This is content\"\n>\n  <v-card-actions>\n    <v-btn>Click me</v-btn>\n  </v-card-actions>\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Creating Card Overview with v-rating Component in Vue\nDESCRIPTION: Illustrates another example of using the rating component within card layouts for product overviews.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/misc-card-overview\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-line v-snackbar in Vue\nDESCRIPTION: Shows how to use the multi-line property to extend the height of the v-snackbar for more content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbars.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-snackbar/prop-multi-line\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical v-range-slider in Vue\nDESCRIPTION: Shows how to create vertical sliders using the vertical prop. The height of the slider can be adjusted using CSS.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-range-slider/prop-vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing VIconBtn Size Names in Vuetify Configuration\nDESCRIPTION: This snippet shows how to customize the size names for the VIconBtn component in the Vuetify configuration. It demonstrates using custom size names like 'xs', 'sm', 'md', etc., instead of the default names.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/announcing-vuetify-3.8.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  VIconBtn: {\n    sizes: [\n      ['xs', 16],\n      ['sm', 20],\n      ['md', 24],\n      ['lg', 28],\n      ['xl', 32],\n      ['2xl', 36],\n    ],\n    iconSizes: [\n      ['xs', 10],\n      ['sm', 12],\n      ['md', 14],\n      ['lg', 16],\n      ['xl', 18],\n      ['2xl', 20],\n    ],\n    size: 'xl',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Banner Prepend Slot Usage\nDESCRIPTION: Demonstrates how to use the prepend slot for adding custom content at the start of the banner.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/banners.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nv-banner/slot-prepend\n```\n\n----------------------------------------\n\nTITLE: Customizing Prepend Icon in v-file-input\nDESCRIPTION: Demonstrates how to change the default prepend-icon of the file input component, which can be set on the component or adjusted globally.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-prepend-icon\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Sizes for Touch Targets in Vuetify\nDESCRIPTION: Shows how to implement buttons with larger touch targets for better accessibility on touch devices.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<v-btn size=\"large\">\n  Large Button\n</v-btn>\n\n<v-btn size=\"x-large\">\n  Extra Large Button\n</v-btn>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Align Items in Vue with Vuetify\nDESCRIPTION: This snippet shows how to use align-items with flex-direction: column and mt-auto/mb-auto classes to adjust flex item positioning.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/margins-align-items\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Individual Snackbar Messages with Custom Props in JavaScript\nDESCRIPTION: This code shows how to add individual messages to the snackbar queue as objects, allowing for custom properties like timeout and color to be set for each message.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbar-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nqueue.push({\n  text: text.value,\n  timeout: 2000,\n  color: 'error',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Layout with Toolbar\nDESCRIPTION: Creates the main application layout with a Vuetify toolbar containing navigation elements and icons.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <!-- Toolbar at the top of the screen -->\n    <v-app-bar color=\"primary\" height=\"48\">\n      <!-- Title of the application with adjusted margin and font size -->\n      <v-app-bar-title class=\"text-h6 ms-3\">\n        <v-icon icon=\"mdi-apps\"></v-icon>\n\n        <span class=\"ms-1\">My Application</span>\n      </v-app-bar-title>\n    </v-app-bar>\n\n    <!-- Main content of the application -->\n    <v-main>\n      <NuxtPage />\n    </v-main>\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Bottom Sheet Implementation in Vue\nDESCRIPTION: This snippet demonstrates a basic implementation of the v-bottom-sheet component. It uses a v-card inside the bottom sheet to display a title and text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-sheets.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-bottom-sheet>\n  <v-card\n    title=\"Bottom Sheet\"\n    text=\"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ut, eos? Nulla aspernatur odio rem, culpa voluptatibus eius debitis.\"\n  ></v-card>\n</v-bottom-sheet>\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-groups in v-list\nDESCRIPTION: Shows how to create sub-groups of items using the v-list-group component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-sub-group\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tabs in Vuetify\nDESCRIPTION: Shows how tabs can be dynamically added and removed, with automatic model updating and scrolling of selected items into view when container overflows.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/misc-dynamic\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical Tabs in Vuetify\nDESCRIPTION: Demonstrates the use of the direction prop to stack v-tab components vertically.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-direction\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Prepend Content to v-breadcrumbs in Vue\nDESCRIPTION: Demonstrates how to prepend content to the breadcrumbs using the prepend slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/breadcrumbs.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-breadcrumbs/slot-prepend\" />\n```\n\n----------------------------------------\n\nTITLE: Installing MDI as a Local Dependency\nDESCRIPTION: This snippet provides commands for installing Material Design Icons as a local project dependency using various package managers.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mdi/font -D\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mdi/font -D\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mdi/font -D\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @mdi/font -D\n\n```\n\n----------------------------------------\n\nTITLE: Combining Props, Slots, and Markup in v-card\nDESCRIPTION: Shows how to combine different methods of populating a v-card with content using props, slots, and manual markup.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  title=\"Card title\"\n  subtitle=\"Subtitle\"\n>\n  <template v-slot:text>\n    This is content\n  </template>\n  <v-card-actions>\n    <v-btn>Click me</v-btn>\n  </v-card-actions>\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Boolean Model Checkbox Implementation\nDESCRIPTION: Shows how to implement a single checkbox with boolean value binding using v-model.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/checkboxes.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-checkbox/prop-model-as-boolean\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Content in v-empty-state Component\nDESCRIPTION: Shows how to configure the three main text content properties of v-empty-state: title, subtitle, and text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/prop-content\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Aria-label for Skeleton Loader - JavaScript\nDESCRIPTION: This snippet illustrates how to configure the default text for the loading state of the skeleton loader component. It updates the locale messages to provide user-friendly descriptions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/skeleton-loaders.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\n\nexport default createVuetify({\n  locale: {\n    messages: {\n      loading: 'Loading content...',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabled Card in Vuetify\nDESCRIPTION: Shows how to create a disabled card that prevents user interaction.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  disabled\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Application Settings\nDESCRIPTION: Defines the Nuxt configuration including Vuetify integration, styling, plugins, and build settings.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  pages: true,\n  ssr: false,\n  devtools: { enabled: false },\n  css: [\n    'vuetify/styles',\n    '@mdi/font/css/materialdesignicons.min.css',\n  ],\n  plugins: ['~/plugins/vuetify.js'],\n  components: true,\n  build: {\n    transpile: ['vuetify'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Size and Width of v-progress-circular in Vue.js\nDESCRIPTION: Shows how to use the size and width props to alter the dimensions of the v-progress-circular component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-circular.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-circular/prop-size-and-width\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Button Defaults in Vuetify\nDESCRIPTION: Shows how to set global defaults for buttons within toolbars using Vuetify's configuration system.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createVuetify({\n  defaults: {\n    VToolbar: {\n      VBtn: { variant: 'flat' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Effects to v-rating Component in Vue\nDESCRIPTION: Illustrates how to add visual feedback when users hover over rating items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-hover\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing v-list with Actions and Item Groups\nDESCRIPTION: Demonstrates a three-line list with actions, utilizing select-strategy to connect actions to tiles.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/misc-actions\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Vuetify Toolbar with Footer in Vue.js\nDESCRIPTION: Enhances the previous integration by adding the app attribute to the v-app-bar and v-footer components, aligning the footer with the toolbar. This ensures proper layout positioning, fulfilling Vuetify's requirements for linked components. The snippet depends on Vuetify within a Nuxt.js framework. It assumes a working understanding of Vue's component structure.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <!-- Toolbar at the top of the screen -->\n    <v-app-bar color=\"primary\" height=\"48\">\n      <!-- Title of the application with adjusted margin and font size -->\n      <v-app-bar-title class=\"text-h6 ms-3\">\n        <v-icon icon=\"mdi-apps\"></v-icon>\n\n        <span class=\"ms-1\">My Application</span>\n      </v-app-bar-title>\n    </v-app-bar>\n\n    <!-- Main content of the application -->\n    <v-main>\n      <NuxtPage />\n    </v-main>\n\n    <!-- Smaller footer at the bottom of the screen -->\n    <v-footer app color=\"secondary\" height=\"30\">\n      <v-container class=\"text-center text-caption\">\n        © {{ new Date().getFullYear() }} My Application - All Rights Reserved\n      </v-container>\n    </v-footer>\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Month View in v-calendar (HTML/Vue)\nDESCRIPTION: This example demonstrates how to set up a calendar with the type 'month'. It showcases the monthly view of the v-calendar component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/calendars.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-calendar/prop-type-month\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify to use Moment adapter\nDESCRIPTION: Configures Vuetify to use the Moment adapter for date handling. It imports `createVuetify` from `vuetify` and `MomentAdapter` from `@date-io/moment`, then sets the `adapter` option in the `date` configuration to `MomentAdapter`.  This configures Moment to be used in Vuetify date components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport MomentAdapter from '@date-io/moment'\n\nexport default createVuetify({\n  date: {\n    adapter: MomentAdapter,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Menu Location Configuration - Vue\nDESCRIPTION: Example showing how to offset menus relative to their activator using the location prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/prop-location\" />\n```\n\n----------------------------------------\n\nTITLE: Using the Default Slot in v-empty-state\nDESCRIPTION: Demonstrates utilizing the default slot positioned between the text and actions sections for custom content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/slot-default\" />\n```\n\n----------------------------------------\n\nTITLE: Tile Avatar Configuration\nDESCRIPTION: Example showing how to create square avatars using the rounded prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-avatar/prop-tile\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify to use Luxon adapter\nDESCRIPTION: Configures Vuetify to use the Luxon adapter for date handling. It imports `createVuetify` from `vuetify` and `LuxonAdapter` from `@date-io/luxon`, then sets the `adapter` option in the `date` configuration to `LuxonAdapter`.  This configures Luxon to be used in Vuetify date components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport LuxonAdapter from '@date-io/luxon'\n\nexport default createVuetify({\n  date: {\n    adapter: LuxonAdapter,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Future Image Formats with v-img in Vue\nDESCRIPTION: Demonstrates how to use the v-img component with WebP image format support and fallback for older browsers using the sources slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/images.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-img src=\"image.jpeg\">\n  <template #sources>\n    <source srcset=\"image.webp\">\n  </template>\n</v-img>\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Chips in Vuetify\nDESCRIPTION: This example demonstrates how to create actionable chips that can invoke methods when clicked, making them interactive elements in the UI.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/event-action-chips\" />\n```\n\n----------------------------------------\n\nTITLE: Banner Icon Slot Implementation\nDESCRIPTION: Shows how to use the icon slot to add custom icon content to the banner.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/banners.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nv-banner/slot-icon\n```\n\n----------------------------------------\n\nTITLE: Mandatory Selection in v-slide-group\nDESCRIPTION: Demonstrates the use of the mandatory prop to require at least one item to be selected in the slide group.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/prop-mandatory\" />\n```\n\n----------------------------------------\n\nTITLE: Filled Overflow Button\nDESCRIPTION: Demonstrates the filled variant of the overflow button with alternative box design.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-filled\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical v-slider in Vuetify\nDESCRIPTION: Demonstrates how to create a vertical slider using the direction prop and adjust its height using CSS.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Streaming Progress Bar in Vue\nDESCRIPTION: Demonstrates the stream property working with buffer-value to convey ongoing action to the user.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-stream\" />\n```\n\n----------------------------------------\n\nTITLE: Filtered Chip Group\nDESCRIPTION: Implements a chip group with visual feedback for selected items using the filter prop, providing an alternative visual style for selected chips.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chip-groups.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<v-chip-group filter>\n  <!-- Filterable chips content -->\n</v-chip-group>\n```\n\n----------------------------------------\n\nTITLE: Centering Active Item in v-slide-group\nDESCRIPTION: Demonstrates the use of the center-active prop to keep the active item always centered in the slide group.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/prop-center-active\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vuetify Page Components in Vue.js\nDESCRIPTION: This snippet illustrates defining a page component in a Nuxt.js application using Vuetify. It shows a simple product page structure within a v-container, complete with an icon and text. The snippet is foundational for creating additional pages like index.vue. Assumes familiarity with Vuetify component usage.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-container class=\"fill-height d-flex flex-column align-center justify-center text-center\">\n    <v-icon icon=\"mdi-cube-outline\" size=\"64\"></v-icon>\n\n    <div class=\"mt-3\">My Application's Products Page</div>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Vuetify Combobox Usage\nDESCRIPTION: Example showing basic implementation of v-combobox component allowing users to select from provided items or enter custom values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/combobox.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-combobox\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Color and Icon for v-alert in Vue\nDESCRIPTION: This example shows how to set a custom color and icon for a v-alert component, achieving the same effect as using type=\"success\".\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/alerts.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<v-alert\n  color=\"success\"\n  icon=\"$success\"\n  title=\"Alert title\"\n  text=\"Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus...\"\n></v-alert>\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Progress Circular in Vue.js\nDESCRIPTION: Demonstrates the use of the indeterminate prop to create an indefinitely animating progress circular.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-circular.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-circular/prop-indeterminate\" />\n```\n\n----------------------------------------\n\nTITLE: Open In List Example using Bottom Sheet in Vue\nDESCRIPTION: This example demonstrates how to create an 'open in' component by combining a functional list with a bottom sheet. It includes a reference to an example file showing this implementation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-sheets.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-sheet/misc-open-in-list\" />\n```\n\n----------------------------------------\n\nTITLE: Dividers with Subheaders in Vuetify\nDESCRIPTION: Shows how dividers and subheaders can be used together to break up content, with the option to line them up using the inset prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dividers.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-divider/misc-subheaders\" />\n```\n\n----------------------------------------\n\nTITLE: Starting the Vite Development Server\nDESCRIPTION: These commands navigate to the newly created project directory and start the Vite development server. This allows you to view and test your Vuetify application in a browser.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd vuetify-project\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Custom Icon in Vuetify Expansion Panels\nDESCRIPTION: Shows how to customize the expand action icon in expansion panels using either the expand-icon prop or the actions slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-expansion-panels/misc-custom-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Card with Custom Elevation in Vuetify\nDESCRIPTION: Demonstrates how to set custom elevation levels for v-card components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  elevation=\"8\"\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Implementing VSnackbarQueue Component in Vue\nDESCRIPTION: This Vue template shows how to use the VSnackbarQueue component with a Pinia store. It imports the store and binds the queue to the component, then demonstrates showing a basic snackbar message.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/announcing-vuetify-3.8.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-snackbar-queue v-model=\"queue.queue\" />\n</template>\n\n<script setup>\n  import { useQueueStore } from '@/stores/queue'\n\n  const queue = useQueueStore()\n\n  queue.show('Hello world!')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom True/False Values for v-switch in Vue\nDESCRIPTION: Illustrates how to use custom values for a v-switch's v-model using the true-value and false-value props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-switch/prop-custom-values\" />\n```\n\n----------------------------------------\n\nTITLE: Overflow Button with Menu Props\nDESCRIPTION: Shows how to customize the underlying v-menu component using menu-props property.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-menu-props\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Vitepress (yarn)\nDESCRIPTION: These commands install Vuetify as a dependency in a Vitepress project using yarn.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vuetify\n```\n\n----------------------------------------\n\nTITLE: Multiple Month Selection\nDESCRIPTION: Implementation of multiple month selection functionality using the multiple prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Loading State in v-input\nDESCRIPTION: Demonstrates how to implement loading state in v-input for data loading indication.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<v-input loading></v-input>\n```\n\n----------------------------------------\n\nTITLE: Hidden Input Number Component - Vue\nDESCRIPTION: Shows how to hide the input field while keeping stepper buttons visible.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/number-inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-number-input/prop-hide-input\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to v-slider in Vuetify\nDESCRIPTION: Shows how to add icons to the slider using append-icon and prepend-icon props, and how to handle icon click events.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Chips in Vuetify\nDESCRIPTION: This snippet demonstrates how to implement draggable chips using the draggable prop on the v-chip component, enabling mouse-based drag functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-draggable\" />\n```\n\n----------------------------------------\n\nTITLE: Error Count Implementation in v-input\nDESCRIPTION: Shows how to implement multiple error messages with error count property in v-input.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<v-input :error-count=\"2\" :error-messages=\"['Error 1', 'Error 2']\"></v-input>\n```\n\n----------------------------------------\n\nTITLE: Mobile-Friendly Tabs with Icons in Vuetify\nDESCRIPTION: Demonstrates the use of v-tab items with just icons to conserve space on mobile devices.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/misc-mobile\" />\n```\n\n----------------------------------------\n\nTITLE: Using Default Slot in v-progress-circular in Vue.js\nDESCRIPTION: Demonstrates how to use the default slot to replace the text inside the loader of v-progress-circular.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-circular.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-circular/prop-slot-default\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Picker with v-confirm-edit in Vuetify\nDESCRIPTION: Example showing how to integrate a date picker with the v-confirm-edit component for user-friendly date selection with confirmation functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/confirm-edit.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-confirm-edit/misc-date-picker\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Default Display Classes with useDisplay in AppDrawer\nDESCRIPTION: This snippet demonstrates how to use the `displayClasses` property returned by `useDisplay` to apply default Vuetify-generated classes to a `v-navigation-drawer` component. Because a name argument is not provided, `displayClasses` will use the default name of the local component and create a classname suffix (--mobile) when the mobile breakpoint is active.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-navigation-drawer\n    :class=\"[\n      displayClasses, // 'app-drawer--mobile'\n    ]\"\n  >\n    ...\n  </v-navigation-drawer>\n</template>\n\n<script setup>\n  import { useDisplay } from 'vuetify'\n\n  const { displayClasses } = useDisplay({ mobileBreakpoint })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Material Design 1 Blueprint\nDESCRIPTION: This code snippet imports the Material Design 1 blueprint from the `vuetify/blueprints` module. This import is necessary to apply the blueprint to a Vuetify application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/blueprints.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { md1 } from 'vuetify/blueprints'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Location in Vue\nDESCRIPTION: Shows how to use the location prop to specify the side of the element where the tooltip should appear.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tooltips.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tooltip/prop-location\" />\n```\n\n----------------------------------------\n\nTITLE: Using Inline Property in v-badge Component\nDESCRIPTION: Demonstrates the inline property of v-badge, allowing badges to be placed anywhere with content and render without a default slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/badges.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-badge/prop-inline\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Counter to v-file-input in Vue\nDESCRIPTION: Demonstrates the use of the show-size and counter props to display the total number of files and their size under the input field.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-counter\" />\n```\n\n----------------------------------------\n\nTITLE: Aligning Tabs to Center in Vuetify\nDESCRIPTION: Shows how to use the align-tabs prop to center-align the tabs within their container.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-align-tabs-center\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to v-table in Vue\nDESCRIPTION: Shows how to use the theme prop to switch the table to a different theme. This example likely demonstrates a dark theme application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tables.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-table/prop-dark\" />\n```\n\n----------------------------------------\n\nTITLE: Card with Background Image in Vuetify\nDESCRIPTION: Demonstrates how to apply a background image to a v-card component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  image=\"https://example.com/image.jpg\"\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Readonly Expansion Panels in Vuetify\nDESCRIPTION: Shows the readonly prop which functions similarly to disabled but doesn't affect the styles of the expansion panel.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-expansion-panels/prop-readonly\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Grow and Shrink in Vue with Vuetify\nDESCRIPTION: This snippet demonstrates the use of flex-grow and flex-shrink utilities in Vuetify, showing how to control the growth and shrinking of flex items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/grow-shrink\" />\n```\n\n----------------------------------------\n\nTITLE: Navigation Drawer with Bottom Position Example\nDESCRIPTION: Example of using the bottom prop to position the drawer at the bottom on mobile devices.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-bottom-drawer\" />\n```\n\n----------------------------------------\n\nTITLE: Hide Details Property Usage\nDESCRIPTION: Demonstrates the hide-details prop usage which controls the visibility of input messages.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<v-input hide-details=\"auto\"></v-input>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Actions in v-confirm-edit\nDESCRIPTION: Demonstration of controlling the disabled state of action buttons in the v-confirm-edit component using the disabled prop, allowing either targeted or global action disabling.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/confirm-edit.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-confirm-edit/misc-disable-actions\" />\n```\n\n----------------------------------------\n\nTITLE: Colored v-switch Components in Vue\nDESCRIPTION: Shows how to apply custom colors to v-switch components using the color prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-switch/prop-colors\" />\n```\n\n----------------------------------------\n\nTITLE: Navigation Drawer with Expand on Hover\nDESCRIPTION: Implementation of expand-on-hover functionality that places the component in rail mode and expands when hovered.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/prop-expand-on-hover\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Material Design 3 Blueprint\nDESCRIPTION: This code snippet imports the Material Design 3 blueprint from the `vuetify/blueprints` module.  This is the necessary import statement to implement Material Design 3 in a Vuetify project.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/blueprints.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { md3 } from 'vuetify/blueprints'\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup\nDESCRIPTION: This Vue component script imports `onMounted` from 'vue' and `useShopifyStore` from '@/stores/shopify'. It then calls `store.fetch()` when the component is mounted, likely to fetch data from a Shopify store.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/resources/themes.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { onMounted } from 'vue'\n  import { useShopifyStore } from '@/stores/shopify'\n\n  const store = useShopifyStore()\n\n  onMounted(() => {\n    store.fetch()\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Item Class in v-slide-group\nDESCRIPTION: Shows how to use the selected-class prop to customize the appearance of active items in the slide group.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/prop-active-class\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Density for v-rating Component in Vue\nDESCRIPTION: Illustrates how to control the space occupied by rating items using the density prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-density\" />\n```\n\n----------------------------------------\n\nTITLE: SASS Variables for Skeleton Loader - SCSS\nDESCRIPTION: This code snippet presents the SASS variables used to customize the appearance of the skeleton loader. Adjustments can be made to the gutter and button width to fit design requirements.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/skeleton-loaders.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  $skeleton-loader-gutter: 24px,\n  $skeleton-loader-button-width: 80px,\n);\n```\n\n----------------------------------------\n\nTITLE: Overflow Tabs to Menu in Vuetify\nDESCRIPTION: Demonstrates using a menu to hold additional tabs, allowing them to be swapped out dynamically.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/misc-overflow-to-menu\" />\n```\n\n----------------------------------------\n\nTITLE: Aligning Tabs with Toolbar Title in Vuetify\nDESCRIPTION: Shows how to align tabs with the v-toolbar-title component by setting the align-tabs prop to 'title'.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-align-tabs-title\" />\n```\n\n----------------------------------------\n\nTITLE: Invite Dialog Implementation\nDESCRIPTION: Example of a specialized dialog used for inviting users to a group.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/misc-invite-dialog\" />\n```\n\n----------------------------------------\n\nTITLE: Hover Delay Implementation\nDESCRIPTION: Demonstrates how to add open and close delays to hover events using open-delay and close-delay props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/hover.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-hover/prop-open-and-close-delay\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Variants to v-list\nDESCRIPTION: Shows how to use the 'variant' prop with v-list to change its visual style.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-variant\" />\n```\n\n----------------------------------------\n\nTITLE: Using Activator Slots in Vue Template\nDESCRIPTION: This code demonstrates how to use activator slots in Vuetify components like v-menu to pass down accessibility (a11y) options. The necessary a11y attributes are passed down through the slot's scope and bound to the activator element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<template>\n  <v-menu>\n    <template v-slot:activator=\"{ props }\">\n      <v-btn\n        text=\"Click me\"\n        v-bind=\"props\"\n      ></v-btn>\n    </template>\n\n    <v-list>\n      <v-list-item @click=\"method\">\n        <v-list-item-title>Option 1</v-list-item-title>\n      </v-list-item>\n\n      <v-list-item disabled>\n        <v-list-item-title>Option 2</v-list-item-title>\n      </v-list-item>\n\n      <v-list-item @click=\"method\">\n        <v-list-item-title>Option 3</v-list-item-title>\n      </v-list-item>\n    </v-list>\n  </v-menu>\n</template>\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumb Titles in v-breadcrumbs with Vue\nDESCRIPTION: Illustrates how to use the title slot to customize the appearance of each breadcrumb title.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/breadcrumbs.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-breadcrumbs/slot-title\" />\n```\n\n----------------------------------------\n\nTITLE: VDateInput with Multiple Prop in Vuetify\nDESCRIPTION: This example demonstrates the use of the multiple prop with v-date-input. When using the multiple prop, the default model value is an empty array.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-date-input/prop-multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Card with Sparkline in Vue\nDESCRIPTION: Illustrates how to combine Sparkline with v-card and v-sheet to create customized information cards for admin dashboards.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sparklines.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-sparkline/misc-dashboard-card\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Items in v-list\nDESCRIPTION: Demonstrates how to customize individual items using the 'item-props' prop. It can spread properties on the v-list-item component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-items-prop\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing useDefaults in a Vuetify Component\nDESCRIPTION: Enhances MyComponent2 to use the useDefaults composable from Vuetify, enabling it to apply the configured default values to its child components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <slot />\n  </div>\n</template>\n\n<script setup>\n  import MyComponent1 from './MyComponent1.vue'\n  import { useDefaults } from 'vuetify'\n\n  useDefaults()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Reactive Name Variable in Vue 3 Setup Script\nDESCRIPTION: This snippet uses the Vue 3 Composition API to create a reactive 'name' variable using shallowRef. This variable is likely used to dynamically update the API documentation based on user interaction.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/api/[name].md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n  const name = shallowRef('')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Empty State - Vuetify Infinite Scroll\nDESCRIPTION: Customizes the empty state message using the empty slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/slot-empty\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Density of v-table in Vue\nDESCRIPTION: Illustrates the use of the density prop to create a dense version of the table, reducing the vertical space used by each row.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tables.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-table/prop-dense\" />\n```\n\n----------------------------------------\n\nTITLE: VDateInput with Model Prop in Vuetify\nDESCRIPTION: This example shows how to use the model prop with v-date-input. The default model value is a Date object, displayed as formatted text in the input.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-date-input/prop-model\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Height for v-virtual-scroll in Vue\nDESCRIPTION: Shows how to set a specific height for the v-virtual-scroll component using the height prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/virtual-scroller.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-virtual-scroll/prop-height\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Icons in Month Picker\nDESCRIPTION: Demonstrates how to override default icons in the month picker component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Lateral Screens with FAB in Vuetify\nDESCRIPTION: Implementation showing how to signal a change in a FAB's action using Vue's transition system by binding the key prop to state data.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/floating-action-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-fab/misc-lateral-screens\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical Divider in Vuetify\nDESCRIPTION: Demonstrates the use of vertical dividers for creating unique layouts.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dividers.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-divider/prop-vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Timeout for v-snackbar in Vue\nDESCRIPTION: Demonstrates how to use the timeout property to customize the delay before the v-snackbar is hidden.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbars.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-snackbar/prop-timeout\" />\n```\n\n----------------------------------------\n\nTITLE: Popover Menu Configuration - Vue\nDESCRIPTION: Static menu configuration that functions as a popover, useful for interactive menu contents.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/menus.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-menu/misc-popover\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Month Picker Usage in Vue with Vuetify\nDESCRIPTION: Demonstrates basic implementation of a v-date-picker component in portrait and landscape orientations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/usage\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Dividers in v-breadcrumbs with Vue\nDESCRIPTION: Shows how to use the divider slot to customize the appearance of dividers in breadcrumbs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/breadcrumbs.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-breadcrumbs/slot-icon-dividers\" />\n```\n\n----------------------------------------\n\nTITLE: Striped Progress Bar in Vue\nDESCRIPTION: Shows how to apply a striped background to the value portion of the progress bar using the striped prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-striped\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination Icons for Tabs in Vuetify\nDESCRIPTION: Shows how to use prev-icon and next-icon props to apply custom pagination icons to the tabs component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon Aliases in Vue Template\nDESCRIPTION: HTML template example showing how to use custom icon aliases in a Vuetify application. This demonstrates referencing custom icon aliases with the $ prefix syntax.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"$product\" />\n  <v-icon icon=\"$support\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt.js Project with CLI\nDESCRIPTION: Command to create a new Nuxt.js project using the Nuxt CLI tool 'nuxi'. Creates a new project directory named 'vuetify-app' with all necessary configuration files and folder structure.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init vuetify-app\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Loading - Vuetify Infinite Scroll\nDESCRIPTION: Shows how to load content from both ends of the scroll container with centered scrollbar.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/prop-side-both\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Ripple Effect in Vuetify Components\nDESCRIPTION: Shows how to use the ripple prop in Vuetify components to control the ripple effect, including turning it off or customizing its behavior.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/ripple.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-ripple/misc-ripple-in-components\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Files as Chips in v-file-input\nDESCRIPTION: Illustrates how to display selected files as chips using the chips prop. When combined with the multiple prop, each file is shown as a separate chip.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-chips\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Item Height for v-virtual-scroll in Vue\nDESCRIPTION: Shows how to set a specific item-height for uniform items in v-virtual-scroll, which is used for calculations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/virtual-scroller.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-virtual-scroll/prop-item-height\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Density to v-list\nDESCRIPTION: Shows how to use the 'density' property with v-list to adjust the compactness of the list items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-density\" />\n```\n\n----------------------------------------\n\nTITLE: Divided Button Toggle in Vue\nDESCRIPTION: Shows how to add visual dividers between buttons in a v-btn-toggle group using the divided prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/prop-divided\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Expandable Chips with v-menu in Vuetify\nDESCRIPTION: This snippet demonstrates how to combine chips with v-menu to create expandable chips that reveal a specific set of actions when activated.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/misc-expandable\" />\n```\n\n----------------------------------------\n\nTITLE: Using useDate composable\nDESCRIPTION: Demonstrates how to import and use the `useDate` composable in a Vue component to access date functionality. It retrieves the month from a given date using the `getMonth` method provided by the composable.  The default implementation uses the native Date object.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import { useDate } from 'vuetify'\n\n  const date = useDate()\n\n  console.log(date.getMonth(new Date('March 1, 2021'))) // 2\n</script>\n```\n\n----------------------------------------\n\nTITLE: Activator Slot Usage in Vuetify Overlay\nDESCRIPTION: Shows how to use the activator slot for more manual control over the v-overlay component in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overlays.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<v-overlay>\n  <template #activator=\"{ isActive, props }\">\n    <v-btn v-bind=\"props\">Overlay is {{ isActive ? 'open' : 'closed' }}</v-btn>\n  </template>\n</v-overlay>\n```\n\n----------------------------------------\n\nTITLE: Current Month Display Options\nDESCRIPTION: Shows different ways to display the current month using the show-current prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-show-current\" />\n```\n\n----------------------------------------\n\nTITLE: OTP Input with Error State\nDESCRIPTION: Example demonstrating error state handling in the OTP input component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/prop-error\" />\n```\n\n----------------------------------------\n\nTITLE: File Loader Progress Bar in Vue\nDESCRIPTION: Demonstrates using v-progress-linear as a file loader to communicate waiting for a response to the user.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/misc-file-loader\" />\n```\n\n----------------------------------------\n\nTITLE: Colored Navigation Drawer\nDESCRIPTION: Example of a customized drawer with custom background color and appended content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/navigation-drawers.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-navigation-drawer/misc-colored\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-list-item with Props in Item Slot Template\nDESCRIPTION: Example of how to use the item slot in v-select/v-combobox/v-autocomplete components in Vuetify v3. The slot now provides a props object that must be bound to v-list-item instead of automatically generating the component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/upgrade-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <template #item=\"{ props }\">\n    <v-list-item v-bind=\"props\"></v-list-item>\n  </template>\n```\n\n----------------------------------------\n\nTITLE: Installing Luxon adapter with yarn\nDESCRIPTION: Installs the `@date-io/luxon` and `luxon` packages using yarn. These packages are required for using Luxon as a date adapter in Vuetify. This is one of the installation options when using Luxon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @date-io/luxon luxon\n```\n\n----------------------------------------\n\nTITLE: Directional Scrolling - Vuetify Infinite Scroll\nDESCRIPTION: Implements horizontal and vertical scrolling directions for infinite scroll component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/prop-direction\" />\n```\n\n----------------------------------------\n\nTITLE: Adjusting Size and Density of Chips in Vuetify\nDESCRIPTION: This example illustrates how to modify the size and density of v-chip components, allowing for customization of vertical spacing and overall dimensions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-sizes\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Color for v-rating Component in Vue\nDESCRIPTION: Shows how to customize the colors of selected and unselected rating items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-color\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Size Property in Vuetify Components\nDESCRIPTION: This example shows how the size property affects various Vuetify components, including changes in vertical and horizontal width, as well as font size. Size options include x-small, small, default, large, and x-large.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/density-and-sizing.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"concepts/size\" preview />\n```\n\n----------------------------------------\n\nTITLE: Rounded Pagination Buttons\nDESCRIPTION: Example showing how to implement rounded pagination buttons using the rounded prop for alternative styling.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/paginations.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<v-pagination :rounded=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic v-alert with Text in Vue\nDESCRIPTION: This snippet demonstrates how to create a basic v-alert component with only text content.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/alerts.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-alert text=\"Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi, ratione debitis quis est labore voluptatibus...\"></v-alert>\n```\n\n----------------------------------------\n\nTITLE: Configuring v-mutate with Custom Options in Vue\nDESCRIPTION: Shows how to configure v-mutate directive using a custom object with handler and options, compared to using modifiers.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/mutate.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-mutate=\"{\n      handler: onMutate,\n        modifiers: {\n          child: true,\n          sub: true,\n        }\n      }\"\n    />\n\n    <!-- is the same as -->\n\n    <div v-mutate.child.sub=\"onMutate\" />\n  </div>\n</template>\n\n<script setup>\n  function onMutate () {\n    //\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Clearing Textarea Content - Vue\nDESCRIPTION: This example shows how to implement the `clearable` prop to allow users to clear the text in a `v-textarea`. It also covers the customization option for the clearable icon using the `clearable-icon` prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-clearable\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Sparkline Labels in Vue\nDESCRIPTION: Demonstrates how to use a custom label slot to modify the displayed content of a Sparkline, such as adding a dollar sign.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sparklines.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-sparkline/misc-custom-labels\" />\n```\n\n----------------------------------------\n\nTITLE: OTP Input with Length Property\nDESCRIPTION: Example showing how to use the length prop to determine the number of input fields.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/prop-length\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Avatar Implementation\nDESCRIPTION: Complex example showing avatar integration with other components for enhanced UI.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-avatar/misc-advanced\" />\n```\n\n----------------------------------------\n\nTITLE: Scrollable Dialog Implementation\nDESCRIPTION: Example of a dialog with scrollable content implementation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/prop-scrollable\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify and Dependencies (pnpm)\nDESCRIPTION: These commands install Vuetify, the vite-plugin-vuetify, and the Material Design Icons font as development dependencies in a project using pnpm.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D vuetify vite-plugin-vuetify\npnpm i @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify with pnpm\nDESCRIPTION: Command to create a new Vuetify project using pnpm package manager.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vuetify\n```\n\n----------------------------------------\n\nTITLE: Dynamic Item Height in v-virtual-scroll for Vue\nDESCRIPTION: Demonstrates how to handle non-uniform item sizes in v-virtual-scroll by omitting the item-height prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/virtual-scroller.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-virtual-scroll/prop-dynamic-item-height\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Ripple Effect on Chips in Vuetify\nDESCRIPTION: This snippet illustrates how to disable the ripple effect on v-chip components by setting the ripple prop to false.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chips.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-chip/prop-no-ripple\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons in v-rating Component in Vue\nDESCRIPTION: Demonstrates how to use custom icons instead of the default star icons in the rating component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Item Title Using String in Vuetify (HTML)\nDESCRIPTION: This snippet demonstrates how to use the item-title prop with a string value to specify the property to use for the title when you have an array of user objects. It shows both direct property access and nested property access.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/items.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-component\n  item-title=\"name\"\n  item-title=\"user.name\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Reverse Number Input Layout - Vue\nDESCRIPTION: Demonstrates the reverse prop usage which changes stepper buttons position.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/number-inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-number-input/prop-reverse\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Label Slot for v-switch in Vue\nDESCRIPTION: Shows how to use the label slot to render a switch label with more complex markup than plain text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-switch/slot-label\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Buffer Color and Opacity in Progress Bar\nDESCRIPTION: Demonstrates controlling buffer color and opacity using the buffer-color and buffer-opacity props to create multi-colored progress bars.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/misc-buffer-color\" />\n```\n\n----------------------------------------\n\nTITLE: Growing Tabs in Vuetify\nDESCRIPTION: Shows the use of the grow prop to make tab items take up all available space without a limit.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-grow\" />\n```\n\n----------------------------------------\n\nTITLE: Browser Autocomplete Feature for Textarea - Vue\nDESCRIPTION: This snippet explains how to enable the autocomplete feature for the `v-textarea` by using the `autocomplete` prop. It helps in predicting user inputs, thereby improving the overall user experience.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-browser-autocomplete\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Colors to Radio Buttons in Vuetify\nDESCRIPTION: Shows how to apply different colors to radio buttons using the color prop in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/radio-buttons.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-radio-group/prop-colors\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-confirm-edit Component\nDESCRIPTION: Basic implementation example of the v-confirm-edit component showing standard usage patterns.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/confirm-edit.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-confirm-edit\" />\n```\n\n----------------------------------------\n\nTITLE: Avatar with Menu Integration\nDESCRIPTION: Example showing how to combine avatar component with menu functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-avatar/misc-avatar-menu\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Arrows in v-window Component\nDESCRIPTION: Shows how to use the prev and next slots to customize the navigation arrows in the window component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/slots-next-prev\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Vuetify Modules\nDESCRIPTION: This code snippet shows how to import Vue and Vuetify modules in an HTML file using CDN and ES modules.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { createApp, ref, computed } from \"vue\"\n  import { createVuetify } from \"vuetify\"\n  //... setup as usual\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify with yarn\nDESCRIPTION: Command to create a new Vuetify project using yarn package manager.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vuetify\n```\n\n----------------------------------------\n\nTITLE: Adding Action Buttons to v-empty-state Component\nDESCRIPTION: Shows how to add action buttons to the empty state to provide users with next steps or options.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/prop-actions\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Textarea - Vue\nDESCRIPTION: This snippet illustrates how to utilize the `background-color` and `color` props for the `v-textarea` component, providing enhanced control over its styling properties. These props allow developers to customize the textarea's look and feel.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-background-color\" />\n```\n\n----------------------------------------\n\nTITLE: Error State - Vuetify Infinite Scroll\nDESCRIPTION: Implements custom error state display using the error slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/slot-error\" />\n```\n\n----------------------------------------\n\nTITLE: Rendered v-btn HTML Output with A11y attributes\nDESCRIPTION: This HTML snippet shows the rendered output of a `v-btn` component when using activator slots with accessibility attributes.  The `aria-expanded`, `aria-haspopup`, `role`, and `type` attributes are automatically added to the button element to improve accessibility.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/accessibility.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<button\n  aria-expanded=\"false\"\n  aria-haspopup=\"true\"\n  role=\"button\"\n  type=\"button\"\n>\n  Click me\n</button>\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Size of v-rating Component in Vue\nDESCRIPTION: Demonstrates how to change the size of rating items using built-in classes or custom sizes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-size\" />\n```\n\n----------------------------------------\n\nTITLE: Column Layout Chip Group\nDESCRIPTION: Shows how to implement a column-based chip group that allows chips to wrap to the next line using the column prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/chip-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<v-chip-group column>\n  <!-- Wrapping chips content -->\n</v-chip-group>\n```\n\n----------------------------------------\n\nTITLE: Carousel with Progress Bar\nDESCRIPTION: Implements a linear progress bar to indicate carousel cycle progress.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/prop-progress\" />\n```\n\n----------------------------------------\n\nTITLE: Installing VDateInput Component in Vuetify\nDESCRIPTION: This snippet shows how to import and register the VDateInput component with the Vuetify instance. It requires manual import and registration for Labs components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VDateInput } from 'vuetify/labs/VDateInput'\n\nexport default createVuetify({\n  components: {\n    VDateInput,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Centering Ripple Effect in Vue Components\nDESCRIPTION: Demonstrates how to use the center option with v-ripple to make the ripple effect always originate from the center of the target element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/ripple.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-ripple/option-center\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Model Values for Individual v-radio Components in Vue\nDESCRIPTION: Demonstrates how to use v-model with individual v-radio components, allowing for custom true and false values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/radio-buttons.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-radio-group/prop-model-radio\" />\n```\n\n----------------------------------------\n\nTITLE: Determinate Progress Bar in Vue\nDESCRIPTION: Shows a determinate state progress bar that can be modified using v-model.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/misc-determinate\" />\n```\n\n----------------------------------------\n\nTITLE: Avatar Size Examples\nDESCRIPTION: Demonstration of using the size prop to modify the height and width of avatars.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-avatar/prop-size\" />\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Dialog Example\nDESCRIPTION: Implementation of a fullscreen dialog, particularly useful for mobile devices.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/prop-fullscreen\" />\n```\n\n----------------------------------------\n\nTITLE: Installing SASS with Different Package Managers\nDESCRIPTION: These commands illustrate how to install the sass-loader and sass pre-processor using pnpm, yarn, npm, and bun package managers. The installation is essential for compiling SASS/SCSS files in a Vuetify project.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D sass-loader sass\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D sass\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D sass-loader sass\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D sass-loader sass\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify with npm\nDESCRIPTION: Command to create a new Vuetify project using npm package manager.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vuetify@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Media to v-empty-state Component\nDESCRIPTION: Demonstrates how to add icons or images to the empty state component to enhance visual communication.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/prop-media\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Rows in Textarea - Vue\nDESCRIPTION: This snippet illustrates how to set the number of visible rows in `v-textarea` using the `rows` prop. Additionally, it explains how to adjust the height of each row via the `row-height` prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-rows\" />\n```\n\n----------------------------------------\n\nTITLE: Readonly Overflow Button\nDESCRIPTION: Demonstrates readonly state of overflow button where it remains visible but inactive.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-readonly\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Luxon adapter with bun\nDESCRIPTION: Installs the `@date-io/luxon` and `luxon` packages using bun. These packages are required for using Luxon as a date adapter in Vuetify. This is one of the installation options when using Luxon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbun add @date-io/luxon luxon\n```\n\n----------------------------------------\n\nTITLE: OTP Input with Autofocus\nDESCRIPTION: Implementation showing the autofocus functionality for the first input element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/prop-focus-all\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-scroll with Target Option in Vue\nDESCRIPTION: This snippet shows how to use the v-scroll directive with a specific target for finer control over scroll event listening. The target option allows designating a specific element to bind the scroll event listener to.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/scroll.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-scroll/option-target\" />\n```\n\n----------------------------------------\n\nTITLE: Colored Progress Bar in Vue\nDESCRIPTION: Demonstrates setting colors for the progress bar using the color and bg-color props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-colors\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Density for v-app-bar in Vue\nDESCRIPTION: Demonstrates how to create a dense app bar with lower height using the density prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/app-bars.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-app-bar/prop-density\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Group Labels with Slots in Vuetify\nDESCRIPTION: Shows how to use the label slot to define custom HTML content for radio group labels in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/radio-buttons.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-radio-group/slot-label\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Readonly v-slider in Vuetify\nDESCRIPTION: Demonstrates how to create a readonly slider that displays values but cannot be interacted with.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-readonly\" />\n```\n\n----------------------------------------\n\nTITLE: Density Property Implementation\nDESCRIPTION: Demonstration of the density prop usage in v-combobox to adjust vertical spacing within the component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/combobox.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-combobox/prop-density\" />\n```\n\n----------------------------------------\n\nTITLE: Internationalized Month Picker\nDESCRIPTION: Example of implementing internationalization using the locale prop with BCP 47 language tags.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/misc-internationalization\" />\n```\n\n----------------------------------------\n\nTITLE: Nested Dialogs Example\nDESCRIPTION: Demonstration of nested dialogs where one dialog can be opened from another.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/misc-nesting\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Moment adapter with pnpm\nDESCRIPTION: Installs the `@date-io/moment` and `moment` packages using pnpm. These packages are required for using Moment as a date adapter in Vuetify. This is one of the installation options when using Moment.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @date-io/moment moment\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify Styles in vite.config.js\nDESCRIPTION: This JavaScript snippet configures Vuetify to use a custom styles configuration file, 'styles.configFile', in a Vite project. The 'configFile' option is specified to override Vuetify's default SASS variables.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvuetify({\n  styles: {\n    configFile: 'src/styles/settings.scss',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Carousel with Hidden Controls\nDESCRIPTION: Shows how to hide navigation controls or make them appear only on hover.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/prop-hide-controls\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Load More Button - Vuetify Infinite Scroll\nDESCRIPTION: Customizes the load more action button in manual mode using the load-more slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/slot-load-more\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Vuetify Settings with Forward Directive\nDESCRIPTION: This SCSS code illustrates how to modify Vuetify settings by forwarding configurations using the @forward directive instead of the @use directive in a settings file.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n@forward 'vuetify/settings' with (\n  $layers: true,\n);\n```\n\n----------------------------------------\n\nTITLE: OTP Input with Loader\nDESCRIPTION: Example showing loading state functionality with the loader prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/prop-loader\" />\n```\n\n----------------------------------------\n\nTITLE: Card as a Link in Vuetify\nDESCRIPTION: Demonstrates how to turn a v-card into a clickable link using the href prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  href=\"https://vuetifyjs.com\"\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Implementing Heart Rate Visualization with Sparkline in Vue\nDESCRIPTION: Shows how to use a trend line with gradient in Sparkline to provide concise heart rate information without overwhelming detail.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sparklines.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-sparkline/misc-heart-rate\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Textarea Resizing - Vue\nDESCRIPTION: This snippet describes how to implement the `no-resize` prop to keep the `v-textarea` fixed in size regardless of input content. This is useful when a consistent layout is preferred.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/textareas.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-textarea/prop-no-resize\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Carousel Delimiters\nDESCRIPTION: Shows how to implement custom icon delimiters for carousel slide navigation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/carousels.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-carousel/prop-custom-icons\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Fork to Git Repository\nDESCRIPTION: This snippet shows how to add a remote fork to your local Git repository. This is essential for managing your feature branches and submitting pull requests back to the original Vuetify repository.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"# Using HTTPS\\ngit remote add fork https://github.com/YOUR_USERNAME/vuetify.git\\n\\n# Using SSH\\ngit remote add fork git@github.com:YOUR_USERNAME/vuetify.git\"\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO Dates with Vuetify Date Composable (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the Vuetify Date composable to parse ISO date strings correctly, avoiding timezone issues.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDate } from 'vuetify'\n\nconst adapter = useDate()\nconst date = '2023-11-30'\n\nconsole.log(new Date(date)) // Wed Nov 29 2023 18:00:00 GMT-0600\nconsole.log(adapter.parseISO(date)) // Thu Nov 30 2023 00:00:00 GMT-0600\n```\n\n----------------------------------------\n\nTITLE: Month Picker Width Configuration\nDESCRIPTION: Demonstrates how to specify the picker's width or make it full width.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-width\" />\n```\n\n----------------------------------------\n\nTITLE: Music Player Example using Bottom Sheet in Vue\nDESCRIPTION: This example shows how to create a practical music player component using an inset bottom sheet. It includes a reference to an example file demonstrating this implementation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-sheets.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-sheet/misc-player\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring VIconBtn Sizes in Vuetify Plugin\nDESCRIPTION: This snippet demonstrates how to configure the sizes for the VIconBtn component in the Vuetify plugin. It sets up default sizes and icon sizes using arrays of tuples, allowing for more flexible size mapping.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/announcing-vuetify-3.8.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\n\nexport default createVuetify({\n  defaults: {\n    VIconBtn: {\n      sizes: [\n        ['x-small', 16],\n        ['small', 20],\n        ['medium', 24],\n        ['large', 28],\n        ['x-large', 32],\n      ],\n      iconSizes: [\n        ['x-small', 10],\n        ['small', 12],\n        ['medium', 14],\n        ['large', 16],\n        ['x-large', 18],\n      ],\n      size: 'small',\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Border-Radius Class Generation in SASS\nDESCRIPTION: This snippet shows how to disable the generation of border-radius classes in Vuetify using the SASS settings file. By setting the `$rounded` variable to `false`, users can suppress these utility classes, which may be useful for custom project configurations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/border-radius.md#2025-04-22_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n@use 'vuetify/settings' with (\n  $rounded: false\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-mutate Directive in Vue\nDESCRIPTION: Demonstrates the basic usage of v-mutate directive with default modifiers and custom options.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/mutate.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <!-- attr, char, child, and sub are true -->\n    <div v-mutate=\"...\" />\n\n    <!-- child is true, attr, char, and child are false -->\n    <div v-mutate.child=\"...\">\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Rules Composable in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the rules composable in your components. It is used to access various validation rules within a Vuetify application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/rules.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRules } from 'vuetify/labs/rules'\n\nconst rules = useRules()\n```\n\n----------------------------------------\n\nTITLE: Enabling Cascade Layers in Vuetify with SCSS\nDESCRIPTION: This SCSS snippet enables modern cascade layers to manage CSS rule layers without specificity issues. It shows the usage of the @forward directive with layer management.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@forward 'vuetify/settings' with (\n  $layers: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Material Icons in Vuetify Template\nDESCRIPTION: This snippet demonstrates the use of Material Icons within a Vuetify icon component in a Vue template.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"home\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mandatory Button Toggle in Vue\nDESCRIPTION: Shows how to use the mandatory prop to ensure that v-btn-toggle always has a selected value.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/prop-mandatory\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-tooltip Directive in Vue\nDESCRIPTION: Demonstrates basic usage of the v-tooltip directive in a Vue template. The directive is applied to a button element to display a tooltip.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/tooltip.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-tooltip-directive\" />\n```\n\n----------------------------------------\n\nTITLE: Aligning Tabs to End in Vuetify\nDESCRIPTION: Demonstrates aligning tabs to the end of their container using the align-tabs prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-align-tabs-end\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding mobile-breakpoint Property on v-banner Component\nDESCRIPTION: This snippet illustrates how to override the default `mobile-breakpoint` property on the `v-banner` component and access the `width` and `mobile` values from the `useDisplay` composable. The first v-banner uses the global mobile-breakpoint value of `lg` while the second overrides this default with `580`.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/display-and-platform.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <v-banner>\n      ...\n    </v-banner>\n\n    <v-banner mobile-breakpoint=\"580\">\n      ...\n    </v-banner>\n  </div>\n</template>\n\n<script setup>\n  import { onMounted } from 'vue'\n  import { useDisplay } from 'vuetify'\n\n  const { width, mobile } = useDisplay()\n\n  onMounted(() => {\n    console.log(width.value) // 960\n    console.log(mobile.value) // true\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Inset Number Input Style - Vue\nDESCRIPTION: Demonstrates the inset prop which modifies button divider styling.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/number-inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-number-input/prop-min-max\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation - Vuetify Lazy Component\nDESCRIPTION: Markdown documentation defining the v-lazy component's metadata, features, usage and API. Includes component description, navigation details, and related components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lazy.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmeta:\n  nav: Lazy\n  title: Lazy component\n  description: The lazy component allows you to dynamically render content based upon the user's viewport.\n  keywords: lazy loading\nrelated:\n  - /components/badges/\n  - /components/icons/\n  - /components/lists/\nfeatures:\n  github: /components/VLazy/\n  label: 'C: VLazy'\n  report: true\n---\n\n# Lazy\n\nThe `v-lazy` component is used to dynamically load components based upon an elements visibility.\n\n<PageFeatures />\n\n## Usage\n\nThe `v-lazy` component by default will not render its contents until it has been intersected. Scroll down and watch the element render as you go past it.\n\n<ExamplesUsage name=\"v-lazy\" />\n\n<PromotedEntry />\n\n## API\n\n| Component | Description |\n| - | - |\n| [v-lazy](/api/v-lazy/) | Primary Component |\n\n<ApiInline hide-links />\n```\n\n----------------------------------------\n\nTITLE: Using VDateInput Component in Vuetify\nDESCRIPTION: This example demonstrates the basic usage of the v-date-input component. It's a placeholder for the actual usage example, which would be replaced with real code in the documentation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesUsage name=\"v-date-input\" />\n```\n\n----------------------------------------\n\nTITLE: Defining SASS Utility Variables for Height and Width\nDESCRIPTION: This code snippet defines SASS variables to customize Vuetify height and width classes. Each size is assigned its corresponding CSS property, enabling responsive design.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/sizing.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  $utilities: (\n    \"fill-height\": (\n      property: height,\n      class: fill,\n      values: (\n        height: 100%\n      )\n    ),\n    \"height\": (\n      property: height,\n      responsive: true,\n      class: h,\n      values: (\n        auto: auto,\n        screen: 100vh,\n        0: 0,\n        25: 25%,\n        50: 50%,\n        75: 75%,\n        100: 100%\n      )\n    ),\n    \"height-screen\": (\n      property: height,\n      class: h,\n      values: (\n        screen: 100dvh\n      )\n    ),\n    \"width\": (\n      property: width,\n      responsive: true,\n      class: w,\n      values: (\n        auto: auto,\n        0: 0,\n        25: 25%,\n        33: 33%,\n        50: 50%,\n        66: 66%,\n        75: 75%,\n        100: 100%\n      )\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Vuetify Flex Utility Classes Reference Table\nDESCRIPTION: A comprehensive table mapping Vuetify's CSS utility class names to their corresponding CSS properties. The table covers display types, flex properties, gap spacing, flex direction, justification, and alignment options with responsive variants.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Class | Properties |\n| - | - |\n| **d-flex** | display: flex; |\n| **d-inline-flex** | display: inline-flex; |\n| **d-sm-flex** | display: flex; |\n| **d-sm-inline-flex** | display: inline-flex; |\n| **d-md-flex** | display: flex; |\n| **d-md-inline-flex** | display: inline-flex; |\n| **d-lg-flex** | display: flex; |\n| **d-lg-inline-flex** | display: inline-flex; |\n| **d-xl-flex** | display: flex; |\n| **d-xl-inline-flex** | display: inline-flex; |\n| **flex-fill** | flex: 1 1 auto; |\n| **flex-sm-fill** | flex: 1 1 auto; |\n| **flex-md-fill** | flex: 1 1 auto; |\n| **flex-lg-fill** | flex: 1 1 auto; |\n| **flex-xl-fill** | flex: 1 1 auto; |\n| **flex-1-1** | flex: 1 1 auto; |\n| **flex-sm-1-1** | flex: 1 1 auto; |\n| **flex-md-1-1** | flex: 1 1 auto; |\n| **flex-lg-1-1** | flex: 1 1 auto; |\n| **flex-xl-1-1** | flex: 1 1 auto; |\n| **flex-1-0** | flex: 1 0 auto; |\n| **flex-sm-1-0** | flex: 1 0 auto; |\n| **flex-md-1-0** | flex: 1 0 auto; |\n| **flex-lg-1-0** | flex: 1 0 auto; |\n| **flex-xl-1-0** | flex: 1 0 auto; |\n| **flex-0-1** | flex: 0 1 auto; |\n| **flex-sm-0-1** | flex: 0 1 auto; |\n| **flex-md-0-1** | flex: 0 1 auto; |\n| **flex-lg-0-1** | flex: 0 1 auto; |\n| **flex-xl-0-1** | flex: 0 1 auto; |\n| **flex-0-0** | flex: 0 0 auto; |\n| **flex-sm-0-0** | flex: 0 0 auto; |\n| **flex-md-0-0** | flex: 0 0 auto; |\n| **flex-lg-0-0** | flex: 0 0 auto; |\n| **flex-xl-0-0** | flex: 0 0 auto; |\n| **flex-1-1-0** | flex: 1 1 0%; |\n| **flex-sm-1-1-0** | flex: 1 1 0%; |\n| **flex-md-1-1-0** | flex: 1 1 0%; |\n| **flex-lg-1-1-0** | flex: 1 1 0%; |\n| **flex-xl-1-1-0** | flex: 1 1 0%; |\n| **flex-1-1-100** | flex: 1 1 100%; |\n| **flex-sm-1-1-100** | flex: 1 1 100%; |\n| **flex-md-1-1-100** | flex: 1 1 100%; |\n| **flex-lg-1-1-100** | flex: 1 1 100%; |\n| **flex-xl-1-1-100** | flex: 1 1 100%; |\n| **flex-1-0-0** | flex: 1 0 0%; |\n| **flex-sm-1-0-0** | flex: 1 0 0%; |\n| **flex-md-1-0-0** | flex: 1 0 0%; |\n| **flex-lg-1-0-0** | flex: 1 0 0%; |\n| **flex-xl-1-0-0** | flex: 1 0 0%; |\n| **flex-1-0-100** | flex: 1 0 100%; |\n| **flex-sm-1-0-100** | flex: 1 0 100%; |\n| **flex-md-1-0-100** | flex: 1 0 100%; |\n| **flex-lg-1-0-100** | flex: 1 0 100%; |\n| **flex-xl-1-0-100** | flex: 1 0 100%; |\n| **flex-0-1-0** | flex: 0 1 0%; |\n| **flex-sm-0-1-0** | flex: 0 1 0%; |\n| **flex-md-0-1-0** | flex: 0 1 0%; |\n| **flex-lg-0-1-0** | flex: 0 1 0%; |\n| **flex-xl-0-1-0** | flex: 0 1 0%; |\n| **flex-0-1-100** | flex: 0 1 100%; |\n| **flex-sm-0-1-100** | flex: 0 1 100%; |\n| **flex-md-0-1-100** | flex: 0 1 100%; |\n| **flex-lg-0-1-100** | flex: 0 1 100%; |\n| **flex-xl-0-1-100** | flex: 0 1 100%; |\n| **flex-0-0-0** | flex: 0 0 0% |\n| **flex-sm-0-0-0** | flex: 0 0 0% |\n| **flex-md-0-0-0** | flex: 0 0 0% |\n| **flex-lg-0-0-0** | flex: 0 0 0% |\n| **flex-xl-0-0-0** | flex: 0 0 0% |\n| **flex-0-0-100** | flex: 0 0 100%; |\n| **flex-sm-0-0-100** | flex: 0 0 100%; |\n| **flex-md-0-0-100** | flex: 0 0 100%; |\n| **flex-lg-0-0-100** | flex: 0 0 100%; |\n| **flex-xl-0-0-100** | flex: 0 0 100%; |\n| **ga-0** | gap: 0; |\n| **ga-1** | gap: 4px; |\n| **ga-2** | gap: 8px; |\n| **ga-3** | gap: 12px; |\n| **ga-4** | gap: 16px; |\n| **ga-5** | gap: 20px; |\n| **ga-6** | gap: 24px; |\n| **ga-7** | gap: 28px; |\n| **ga-8** | gap: 32px; |\n| **ga-9** | gap: 36px; |\n| **ga-10** | gap: 40px; |\n| **ga-11** | gap: 44px; |\n| **ga-12** | gap: 48px; |\n| **ga-13** | gap: 52px; |\n| **ga-14** | gap: 56px; |\n| **ga-15** | gap: 60px; |\n| **ga-16** | gap: 64px; |\n| **ga-sm-0** | gap: 0; |\n| **ga-sm-1** | gap: 4px; |\n| **ga-sm-2** | gap: 8px; |\n| **ga-sm-3** | gap: 12px; |\n| **ga-sm-4** | gap: 16px; |\n| **ga-sm-5** | gap: 20px; |\n| **ga-sm-6** | gap: 24px; |\n| **ga-sm-7** | gap: 28px; |\n| **ga-sm-8** | gap: 32px; |\n| **ga-sm-9** | gap: 36px; |\n| **ga-sm-10** | gap: 40px; |\n| **ga-sm-11** | gap: 44px; |\n| **ga-sm-12** | gap: 48px; |\n| **ga-sm-13** | gap: 52px; |\n| **ga-sm-14** | gap: 56px; |\n| **ga-sm-15** | gap: 60px; |\n| **ga-sm-16** | gap: 64px; |\n| **ga-md-0** | gap: 0; |\n| **ga-md-1** | gap: 4px; |\n| **ga-md-2** | gap: 8px; |\n| **ga-md-3** | gap: 12px; |\n| **ga-md-4** | gap: 16px; |\n| **ga-md-5** | gap: 20px; |\n| **ga-md-6** | gap: 24px; |\n| **ga-md-7** | gap: 28px; |\n| **ga-md-8** | gap: 32px; |\n| **ga-md-9** | gap: 36px; |\n| **ga-md-10** | gap: 40px; |\n| **ga-md-11** | gap: 44px; |\n| **ga-md-12** | gap: 48px; |\n| **ga-md-13** | gap: 52px; |\n| **ga-md-14** | gap: 56px; |\n| **ga-md-15** | gap: 60px; |\n| **ga-md-16** | gap: 64px; |\n| **ga-lg-0** | gap: 0; |\n| **ga-lg-1** | gap: 4px; |\n| **ga-lg-2** | gap: 8px; |\n| **ga-lg-3** | gap: 12px; |\n| **ga-lg-4** | gap: 16px; |\n| **ga-lg-5** | gap: 20px; |\n| **ga-lg-6** | gap: 24px; |\n| **ga-lg-7** | gap: 28px; |\n| **ga-lg-8** | gap: 32px; |\n| **ga-lg-9** | gap: 36px; |\n| **ga-lg-10** | gap: 40px; |\n| **ga-lg-11** | gap: 44px; |\n| **ga-lg-12** | gap: 48px; |\n| **ga-lg-13** | gap: 52px; |\n| **ga-lg-14** | gap: 56px; |\n| **ga-lg-15** | gap: 60px; |\n| **ga-lg-16** | gap: 64px; |\n| **ga-xl-0** | gap: 0; |\n| **ga-xl-1** | gap: 4px; |\n| **ga-xl-2** | gap: 8px; |\n| **ga-xl-3** | gap: 12px; |\n| **ga-xl-4** | gap: 16px; |\n| **ga-xl-5** | gap: 20px; |\n| **ga-xl-6** | gap: 24px; |\n| **ga-xl-7** | gap: 28px; |\n| **ga-xl-8** | gap: 32px; |\n| **ga-xl-9** | gap: 36px; |\n| **ga-xl-10** | gap: 40px; |\n| **ga-xl-11** | gap: 44px; |\n| **ga-xl-12** | gap: 48px; |\n| **ga-xl-13** | gap: 52px; |\n| **ga-xl-14** | gap: 56px; |\n| **ga-xl-15** | gap: 60px; |\n| **ga-xl-16** | gap: 64px; |\n| **flex-row** | flex-direction: row; |\n| **flex-row-reverse** | flex-direction: row-reverse; |\n| **flex-column** | flex-direction: column; |\n| **flex-column-reverse** | flex-direction: column-reverse; |\n| **flex-sm-row** | flex-direction: row; |\n| **flex-sm-row-reverse** | flex-direction: row-reverse; |\n| **flex-sm-column** | flex-direction: column; |\n| **flex-sm-column-reverse** | flex-direction: column-reverse; |\n| **flex-md-row** | flex-direction: row; |\n| **flex-md-row-reverse** | flex-direction: row-reverse; |\n| **flex-md-column** | flex-direction: column; |\n| **flex-md-column-reverse** | flex-direction: column-reverse; |\n| **flex-lg-row** | flex-direction: row; |\n| **flex-lg-row-reverse** | flex-direction: row-reverse; |\n| **flex-lg-column** | flex-direction: column; |\n| **flex-lg-column-reverse** | flex-direction: column-reverse; |\n| **flex-xl-row** | flex-direction: row; |\n| **flex-xl-row-reverse** | flex-direction: row-reverse; |\n| **flex-xl-column** | flex-direction: column; |\n| **flex-xl-column-reverse** | flex-direction: column-reverse; |\n| **justify-start** | justify-content: flex-start; |\n| **justify-end** | justify-content: flex-end; |\n| **justify-center** | justify-content: center; |\n| **justify-space-between** | justify-content: space-between; |\n| **justify-space-around** | justify-content: space-around; |\n| **justify-space-evenly** | justify-content: space-evenly; |\n| **justify-sm-start** | justify-content: flex-start; |\n| **justify-sm-end** | justify-content: flex-end; |\n| **justify-sm-center** | justify-content: center; |\n| **justify-sm-space-between** | justify-content: space-between; |\n| **justify-sm-space-around** | justify-content: space-around; |\n| **justify-sm-space-evenly** | justify-content: space-evenly; |\n| **justify-md-start** | justify-content: flex-start; |\n| **justify-md-end** | justify-content: flex-end; |\n| **justify-md-center** | justify-content: center; |\n| **justify-md-space-between** | justify-content: space-between; |\n| **justify-md-space-around** | justify-content: space-around; |\n| **justify-md-space-evenly** | justify-content: space-evenly; |\n| **justify-lg-start** | justify-content: flex-start; |\n| **justify-lg-end** | justify-content: flex-end; |\n| **justify-lg-center** | justify-content: center; |\n| **justify-lg-space-between** | justify-content: space-between; |\n| **justify-lg-space-around** | justify-content: space-around; |\n| **justify-lg-space-evenly** | justify-content: space-evenly; |\n| **justify-xl-start** | justify-content: flex-start; |\n| **justify-xl-end** | justify-content: flex-end; |\n| **justify-xl-center** | justify-content: center; |\n| **justify-xl-space-between** | justify-content: space-between; |\n| **justify-xl-space-around** | justify-content: space-around; |\n| **justify-xl-space-evenly** | justify-content: space-evenly; |\n| **align-start** | align-items: flex-start; |\n| **align-end** | align-items: flex-end; |\n| **align-center** | align-items: center; |\n| **align-baseline** | align-items: baseline; |\n| **align-stretch** | align-items: stretch; |\n| **align-sm-start** | align-items: flex-start; |\n| **align-sm-end** | align-items: flex-end; |\n| **align-sm-center** | align-items: center; |\n| **align-sm-baseline** | align-items: baseline; |\n| **align-sm-stretch** | align-items: stretch; |\n| **align-md-start** | align-items: flex-start; |\n| **align-md-end** | align-items: flex-end; |\n| **align-md-center** | align-items: center; |\n| **align-md-baseline** | align-items: baseline; |\n| **align-md-stretch** | align-items: stretch; |\n| **align-lg-start** | align-items: flex-start; |\n| **align-lg-end** | align-items: flex-end; |\n| **align-lg-center** | align-items: center; |\n| **align-lg-baseline** | align-items: baseline; |\n| **align-lg-stretch** | align-items: stretch; |\n| **align-xl-start** | align-items: flex-start; |\n| **align-xl-end** | align-items: flex-end; |\n| **align-xl-center** | align-items: center; |\n| **align-xl-baseline** | align-items: baseline; |\n| **align-xl-stretch** | align-items: stretch; |\n| **align-self-start** | align-self: flex-start; |\n| **align-self-end** | align-self: flex-end; |\n| **align-self-center** | align-self: center; |\n| **align-self-baseline** | align-self: baseline; |\n| **align-self-auto** | align-self: auto; |\n| **align-self-stretch** | align-self: stretch; |\n| **align-self-sm-start** | align-self: flex-start; |\n| **align-self-sm-end** | align-self: flex-end; |\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Location with v-tooltip Directive in Vue\nDESCRIPTION: Shows how to set the location of the tooltip using the v-tooltip directive argument. The location is specified as a hyphen-separated string.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/tooltip.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tooltip-directive/args\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog and Menu Integration\nDESCRIPTION: Shows how to integrate the month picker with v-text-field using dialog and menu components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/misc-dialog-and-menu\" />\n```\n\n----------------------------------------\n\nTITLE: SASS Border Disable\nDESCRIPTION: This SASS code snippet demonstrates how to disable the generation of border utility classes by setting the `$borders` variable to `false`. This can be useful for reducing the CSS file size if border utilities are not needed.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/borders.md#2025-04-22_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n\"@use 'vuetify/settings' with (\\n  $borders: false\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Using VNoSsr Component in Vue Template\nDESCRIPTION: Demonstrates how to use the v-no-ssr component to wrap content that should only be rendered on the client side. The component prevents the wrapped content from being processed during server-side rendering.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/no-ssr.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-no-ssr>\n    <!-- Everything inside will only render on the Client -->\n    <v-sheet>\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias vitae minus, incidunt laboriosam amet doloribus officiis?\n    </v-sheet>\n  </v-no-ssr>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying Color to v-bottom-navigation in Vue\nDESCRIPTION: Shows how to use the color prop to apply a background color to the bottom navigation. It's recommended to use light and dark props for proper text contrast.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-navigation.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-navigation/prop-color\" />\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Icon Set in Vuetify\nDESCRIPTION: JavaScript configuration to register a custom icon set as the default in Vuetify. This imports the custom icon set and aliases from a separate file and configures them in the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { aliases, custom } from '../iconsets/custom'\n\nexport default createVuetify({\n  icons: {\n    defaultSet: 'custom',\n    aliases,\n    sets: {\n      custom,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing VIconBtn Component in Vuetify\nDESCRIPTION: Shows how to import and register the VIconBtn component with a Vuetify instance. This is required for labs components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/icon-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VIconBtn } from 'vuetify/labs/VIconBtn'\n\nexport default createVuetify({\n  components: {\n    VIconBtn,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dialog Default Slot Usage\nDESCRIPTION: Example showing the usage of the default slot with isActive ref.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/slot-default\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Vuetify API Explorer\nDESCRIPTION: YAML frontmatter configuration for the Vuetify API Explorer page, including metadata settings for navigation, title, description, and keywords. The configuration also specifies page layout properties like backmatter and fluid settings.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/explorer/[...name].md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbackmatter: false\nfluid: true\nmeta:\n  nav: API Explorer\n  title: API Explorer\n  description: Explore the Vuetify API\n  keywords: vuetify api explorer\n---\n```\n\n----------------------------------------\n\nTITLE: Vue Wireframe Component Template with Side Navigation\nDESCRIPTION: Vue template that sets up a wireframe layout page with front matter metadata and imports a side navigation component. Uses script setup syntax for composition API.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/side-navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n---\nlayout: wireframe\nmeta:\n  title: Base Wireframe\n---\n<script setup>\n  import SideNavigation from '@/examples/wireframes/side-navigation.vue'\n</script>\n\n<side-navigation />\n```\n\n----------------------------------------\n\nTITLE: Using Grow Property in v-bottom-navigation\nDESCRIPTION: Demonstrates the grow property which forces v-btn components to fill all available space, with a maximum width of 168px per button.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-navigation.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-navigation/prop-grow\" />\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome Icons in Vue Template\nDESCRIPTION: Example of how to use Font Awesome icons in a Vue template with the v-icon component. This demonstrates the syntax for referencing a Font Awesome solid icon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"fas fa-home\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component Script Setup\nDESCRIPTION: Setup script for a blog post component that imports team member component and Vuetify sparkline component. Uses composition API to compute team member data.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/state-of-the-union-2024.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import AboutTeamMember from '@/components/about/TeamMember.vue'\n  import { VSparkline } from 'vuetify'\n\n  const teams = useTeamStore()\n  const kael = computed(() => teams.members.find(member => member.github === 'KaelWD'))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Flex Utility Classes in Vuetify\nDESCRIPTION: This snippet showcases the structure of Vuetify's flex utility classes. Each class corresponds to a specific CSS flex property and value, often with viewport size modifiers.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nalign-self-sm-center { align-self: center; }\nalign-self-sm-baseline { align-self: baseline; }\nalign-self-sm-auto { align-self: auto; }\nalign-self-sm-stretch { align-self: stretch; }\nalign-self-md-start { align-self: flex-start; }\nalign-self-md-end { align-self: flex-end; }\n/* ... more classes ... */\nflex-xl-shrink-1 { flex-shrink: 1; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Animation with v-fab-transition in Vue\nDESCRIPTION: Example demonstrating how to animate a floating action button onto the screen using v-fab-transition with v-show in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/floating-action-buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-fab/misc-display-animation\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Labels in v-rating Component in Vue\nDESCRIPTION: Shows how to add labels above or below each rating item for better context.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-item-labels\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Discord Wireframe Component in Vue\nDESCRIPTION: This snippet demonstrates how to import and use a Discord wireframe component in a Vue application. It uses the script setup syntax to import the component and then renders it using the custom element syntax.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/discord.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Discord from '@/examples/wireframes/discord.vue'\n</script>\n\n<discord />\n```\n\n----------------------------------------\n\nTITLE: Illustrating Flex Nowrap in Vue with Vuetify\nDESCRIPTION: This example demonstrates the default nowrap behavior of d-flex in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-nowrap\" />\n```\n\n----------------------------------------\n\nTITLE: Shift Behavior in v-bottom-navigation\nDESCRIPTION: Demonstrates the shift prop which hides button text when not active, providing an alternative visual style. Requires v-btn text to be wrapped in a span tag.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-navigation.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-navigation/prop-shift\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling All Utility Classes\nDESCRIPTION: This SCSS example shows how to disable all utility classes in Vuetify by setting the $utilities variable to false, ideal for removing unnecessary classes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify' with (\n  $utilities: false,\n);\n```\n\n----------------------------------------\n\nTITLE: Vuetify Global Configuration Setup\nDESCRIPTION: Configuration to set default values and styles for all v-btn components using Vuetify's global configuration system.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetifyjs'\n\nexport default createVuetify({\n  defaults: {\n    VBtn: {\n      color: 'primary',\n      variant: 'outlined',\n      rounded: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rounded Progress Bar in Vue\nDESCRIPTION: Shows how to apply border radius to the v-progress-linear component using the rounded prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-rounded\" />\n```\n\n----------------------------------------\n\nTITLE: CSS Border Properties\nDESCRIPTION: These CSS classes are used to style the border of HTML elements, defining their width, style, color, and opacity. They are part of Vuetify's utility classes and offer a convenient way to quickly apply consistent border styles throughout an application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/borders.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"border: thin solid rgba(var(--v-border-color), var(--v-border-opacity));\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-width: 1px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-width: 2px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-width: 4px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-width: 8px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-width: 0;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: 0;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: 1px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: 2px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: 4px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-top-width: 8px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: 0;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: 1px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: 2px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: 4px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-end-width: 8px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: 0;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: 1px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: 2px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: 4px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-bottom-width: 8px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: 0;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: thin;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: 1px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: 2px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: 4px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-inline-start-width: 8px;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-opacity: 0;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-opacity: .12;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-opacity: .25;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-opacity: .5;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-opacity: .75;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-opacity: 1;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-style: dashed;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-style: dotted;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-style: double;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"border-style: solid;\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-primary);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-secondary);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-accent);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-error);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-info);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-success);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-warning);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-surface);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-background);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-surface-light);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-surface-variant);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: var(--v-theme-surface-bright);\"\n```\n\nLANGUAGE: css\nCODE:\n```\n\"--v-border-color: currentColor;\"\n```\n\n----------------------------------------\n\nTITLE: Rounded Button Toggle in Vue\nDESCRIPTION: Demonstrates how to control the border radius of v-btn-toggle using the rounded prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/prop-rounded\" />\n```\n\n----------------------------------------\n\nTITLE: Using Inset Prop with Bottom Sheet in Vue\nDESCRIPTION: This snippet demonstrates the use of the inset prop to reduce the maximum width of the bottom sheet content on desktop. It includes a reference to an example file.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-sheets.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-sheet/prop-inset\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Centered Homepage Layout\nDESCRIPTION: Implements a centered homepage layout with an icon and text using Vuetify's flexbox utilities.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-container class=\"fill-height d-flex flex-column align-center justify-center text-center\">\n    <v-icon icon=\"mdi-home\" size=\"64\"></v-icon>\n\n    <div class=\"mt-3\">My Application's Home Page</div>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Showing Flex Wrap in Vue with Vuetify\nDESCRIPTION: This snippet illustrates how to apply flex-wrap to a flex container in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-wrap\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating VIconBtn with Vue Router\nDESCRIPTION: Demonstrates how to use the v-icon-btn component with vue-router's RouterLink component for navigation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/icon-buttons.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <RouterLink v-slot=\"{ navigate, isActive }\" to=\"/page1\" custom>\n    <v-icon-btn\n      :active=\"isActive\"\n      color=\"primary\"\n      icon=\"$vuetify\"\n      tag=\"a\"\n      @click=\"navigate\"\n    />\n  </RouterLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Small Variant FAB in Vuetify Lists\nDESCRIPTION: Example showing how to use the small variant of the v-fab component to match list avatars for better visual appeal.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/floating-action-buttons.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-fab/misc-small\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Form Validation with useRules\nDESCRIPTION: This example demonstrates how the useRules composable supports localization, allowing validation messages to change based on the current locale. It shows both default locale and Spanish locale validation messages.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/announcing-vuetify-3.8.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-form validate-on=\"submit\" @submit.prevent=\"submit\">\n    // This field is required\n    <v-text-field :rules=\"[rules.required()]\" />\n\n    <v-locale-provider locale=\"es\">\n      // Este campo es obligatorio\n      <v-text-field :rules=\"[rules.required()]\" />\n    </v-locale-provider>\n  </v-form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Existing Projects (yarn)\nDESCRIPTION: These commands install Vuetify as a dependency in an existing project using yarn.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vuetify\n```\n\n----------------------------------------\n\nTITLE: Setting Step Size for v-slider in Vuetify\nDESCRIPTION: Demonstrates how to control the precision and step size of the slider using the step prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sliders.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slider/prop-step\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Vuetify's Color Packs\nDESCRIPTION: This SCSS snippet demonstrates how to disable color packs in Vuetify by setting the $color-pack variable to false, useful for removing unneeded color styles.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify' with (\n  $color-pack: false,\n);\n```\n\n----------------------------------------\n\nTITLE: Using v-mutate with 'immediate' Modifier in Vue\nDESCRIPTION: Shows how to use the 'immediate' modifier with v-mutate to invoke the callback when the element is initially mounted and on subsequent mutations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/mutate.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-mutate.immediate=\"onMutate\">...</div>\n</template>\n\n<script setup>\n  import { onMounted, shallowRef } from 'vue'\n\n  const mutations = shallowRef(0)\n\n  onMounted(() => {\n    console.log(mutations.value) // 1\n  })\n\n  function onMutate () {\n    mutations.value++\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Hover List Implementation\nDESCRIPTION: Shows how to combine v-hover with v-for to create interactive lists where items respond to hover events.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/hover.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-hover/misc-hover-list\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog with v-model Control\nDESCRIPTION: Example demonstrating dialog control using v-model without an activator element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/prop-model\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Icons\nDESCRIPTION: Example demonstrating how to customize previous and next page icons using prev-icon and next-icon props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/paginations.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<v-pagination :prev-icon=\"prevIcon\" :next-icon=\"nextIcon\" />\n```\n\n----------------------------------------\n\nTITLE: Stacked Tabs in Vuetify\nDESCRIPTION: Demonstrates the stacked prop which increases the v-tabs height to 72px to allow for both icons and text to be displayed.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-stacked\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-badge Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-badge component in Vuetify. The badge is displayed in the upper right of the wrapped content and requires the badge slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/badges.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-badge\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vuetify with Material Design Icons\nDESCRIPTION: This snippet demonstrates how to configure Vuetify to use the Material Design Icons (MDI) icon set by importing necessary components and setting the default icon library.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { aliases, mdi } from 'vuetify/iconsets/mdi'\n\nexport default createVuetify({\n  icons: {\n    defaultSet: 'mdi',\n    aliases,\n    sets: {\n      mdi,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Actions Slot for Multiple Actions\nDESCRIPTION: Demonstrates how to use the actions slot to add multiple action buttons instead of just one configured via props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/slot-actions\" />\n```\n\n----------------------------------------\n\nTITLE: Default Slot Avatar Content\nDESCRIPTION: Example demonstrating the default slot usage for rendering custom content like icons, images, or text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-avatar/slot-default\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Homepage with Vuetify Components\nDESCRIPTION: Implements a simple homepage using Vuetify container and button components.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-container>\n    <v-btn color=\"primary\" text=\"Vuetify Button\"></v-btn>\n  </v-container>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Vuetify Dependency for Nightly Build in package.json\nDESCRIPTION: This diff snippet shows how to update the Vuetify dependency in `package.json` to use a nightly build. The version is specified using npm's alias feature, pointing to the `@vuetify/nightly` namespace.  This allows developers to test the latest changes but may introduce instability.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n \"devDependencies\": {\n-  \"vuetify\": \"^3.3.0\"\n+  \"vuetify\": \"npm:@vuetify/nightly@3.3.0-master.2023-05-21\"\n }\n```\n\n----------------------------------------\n\nTITLE: Precision Control - Vue\nDESCRIPTION: Demonstrates precision prop usage for controlling decimal place precision.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/number-inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-number-input/prop-precision\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Elevation for v-color-picker in Vue\nDESCRIPTION: Demonstrates how to adjust the elevation of the v-color-picker component using the elevation or flat prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/color-pickers.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-color-picker/prop-elevation\" />\n```\n\n----------------------------------------\n\nTITLE: Using v-mutate with 'once' Modifier in Vue\nDESCRIPTION: Demonstrates the use of the 'once' modifier with v-mutate to disconnect the observer after the first detected mutation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/mutate.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <input type=\"text\" v-model=\"content\">\n\n    <v-card v-mutate=\"onMutate\">{{ content }}</v-card>\n\n    <v-card v-mutate.once=\"onMutate\">{{ content }}</v-card>\n  </div>\n</template>\n\n<script setup>\n  import { onMounted, shallowRef } from 'vue'\n\n  const content = shallowRef('Foo')\n  const mutations = shallowRef(0)\n\n  onMounted(() => {\n    content.value = 'Bar'\n\n    console.log(mutations.value) // 2\n\n    setTimeout(() => {\n      content.value = 'Foobar'\n\n      console.log(mutations.value) // 3\n    }, 200)\n  })\n\n  function onMutate () {\n    mutations.value++\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Changing Transition Direction in v-window Component\nDESCRIPTION: Demonstrates how to use the direction prop to change the transition to vertical in the window component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/prop-direction\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Three-line v-list\nDESCRIPTION: Demonstrates a three-line list where the subtitle clamps vertically at 2 lines and then ellipsis, using line-clamp CSS feature.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-three-line\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection in v-slide-group\nDESCRIPTION: Shows how to enable multiple item selection in the slide group using the multiple prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/slide-groups.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-slide-group/prop-multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Fixed Tabs in Vuetify\nDESCRIPTION: Demonstrates the fixed-tabs prop which forces v-tab items to take up all available space up to their maximum width and centers them.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/prop-fixed-tabs\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation in Vuetify\nDESCRIPTION: Basic implementation of a Vuetify button component containing only text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<v-btn>Button</v-btn>\n```\n\n----------------------------------------\n\nTITLE: Including MDI CSS via CDN\nDESCRIPTION: This snippet illustrates how to include the Material Design Icons CSS via a CDN link in the index.html file to enable the icons in the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Week View in v-calendar (HTML/Vue)\nDESCRIPTION: This example shows how to configure the v-calendar component to display a weekly view by setting the type to 'week'.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/calendars.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-calendar/prop-type-week\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Close with v-click-outside in Vue\nDESCRIPTION: Shows how to use the closeConditional option with v-click-outside. This option allows you to specify a function that determines whether the outside click handler should be invoked.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/click-outside.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-click-outside/option-close-on-outside-click\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing App Layout with Toolbar Buttons in Vue/Vuetify\nDESCRIPTION: A complete implementation of app.vue that creates an application layout with a toolbar containing navigation buttons, a navigation drawer, main content area, and footer. The component uses v-spacer to push buttons to the right side of the toolbar and includes click handlers for navigation between pages.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/blog/building-a-basic-nuxt-application-with-vuetify.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <!-- Toolbar at the top of the screen -->\n    <v-app-bar color=\"primary\" height=\"48\">\n      <!-- Title of the application with adjusted margin and font size -->\n      <v-app-bar-title class=\"text-h6 ms-3\">\n        <v-icon icon=\"mdi-apps\" @click=\"drawer = !drawer\"></v-icon>\n\n        <span class=\"ms-1\">My Application</span>\n      </v-app-bar-title>\n\n      <!-- Spacer to push the following elements to the right -->\n      <v-spacer />\n\n      <!-- Menu icons on the right side of the toolbar -->\n      <v-btn icon=\"mdi-home\" @click=\"navigateTo('/')\"></v-btn>\n\n      <v-btn icon=\"mdi-cube-outline\" @click=\"navigateTo('/products')\"></v-btn>\n\n      <v-btn icon=\"mdi-email\" @click=\"navigateTo('/contact')\"></v-btn>\n    </v-app-bar>\n\n    <!-- Navigation drawer for menu actions -->\n    <v-navigation-drawer v-model=\"drawer\">\n      <v-list>\n        <!-- Menu items in the drawer with icons -->\n        <v-list-item\n          @click=\"navigateTo('/')\"\n          title=\"Home\"\n          prepend-icon=\"mdi-home\"\n        ></v-list-item>\n\n\n        <v-list-item\n          @click=\"navigateTo('/products')\"\n          title=\"Products\"\n          prepend-icon=\"mdi-cube-outline\"\n        ></v-list-item>\n\n\n        <v-list-item\n          @click=\"navigateTo('/contact')\"\n          title=\"Contact\"\n          prepend-icon=\"mdi-email\"\n        ></v-list-item>\n      </v-list>\n    </v-navigation-drawer>\n\n    <!-- Main content of the application -->\n    <v-main>\n      <NuxtPage />\n    </v-main>\n\n    <!-- Smaller footer at the bottom of the screen -->\n    <v-footer app color=\"secondary\" height=\"30\">\n      <v-container class=\"text-caption text-center\">\n        © {{ new Date().getFullYear() }} My Application - All Rights Reserved\n      </v-container>\n    </v-footer>\n  </v-app>\n</template>\n\n<script setup>\n// Drawer state to open/close the navigation drawer\nconst drawer = shallowRef(false)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Showing Flex Align Content Start in Vue with Vuetify\nDESCRIPTION: This example illustrates the use of align-content: flex-start in a Vuetify flex container.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-align-content-start\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Steam Wireframe\nDESCRIPTION: YAML configuration block defining metadata for the Steam wireframe template including title, keywords, and description for SEO purposes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/steam.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: wireframe\nmeta:\n  title: Steam Wireframe\n  keywords: vuetify wireframe, vuetify app, vue app\n  description: A steam wireframe template for Vuetify\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Colors to v-progress-circular in Vue.js\nDESCRIPTION: Shows how to apply alternate colors to v-progress-circular using the color prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-circular.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-circular/prop-color\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DateFns adapter with pnpm\nDESCRIPTION: Installs the `@date-io/date-fns` and `date-fns` packages using pnpm. These packages are required for using DateFns as a date adapter in Vuetify.  This is one of the installation options when using DateFns.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @date-io/date-fns date-fns\n```\n\n----------------------------------------\n\nTITLE: Disabled Pagination Component\nDESCRIPTION: Implementation of disabled pagination using the disabled prop to deactivate pagination items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/paginations.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<v-pagination :disabled=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Rounded Corners to v-list Items\nDESCRIPTION: Shows how to make v-list items rounded using the 'rounded' prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-rounded\" />\n```\n\n----------------------------------------\n\nTITLE: Button Toggle Variant in Vue\nDESCRIPTION: Demonstrates how to change the button variant in v-btn-toggle using the variant prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/button-groups.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-btn-toggle/prop-variant\" />\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Progress Bar in Vue\nDESCRIPTION: Shows how to create an indeterminate progress bar that continuously animates using the indeterminate prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-indeterminate\" />\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome 5 Icons in Template\nDESCRIPTION: This snippet illustrates how to utilize Font Awesome 5 icons in a Vuetify icon component within a template.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"fas fa-home\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: HTML Picture Element Structure\nDESCRIPTION: Shows the equivalent HTML picture element structure that v-img generates for handling multiple image sources.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/images.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source srcset=\"image.webp\">\n  <img src=\"image.jpeg\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Horizontal Layout in v-bottom-navigation\nDESCRIPTION: Shows how to use the horizontal prop to adjust the style of buttons and icons, positioning button text inline with the provided v-icon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-navigation.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-navigation/prop-horizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Prominent v-app-bar in Vue\nDESCRIPTION: Shows how to use the density=\"prominent\" prop to create an app bar with a stronger presence, suitable for longer titles or imagery.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/app-bars.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-app-bar/prop-prominent\" />\n```\n\n----------------------------------------\n\nTITLE: Total Visible Pages Configuration\nDESCRIPTION: Example showing how to limit the maximum number of visible pagination buttons using the total-visible prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/paginations.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<v-pagination :total-visible=\"totalVisible\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Vuetify Automatic Treeshaking\nDESCRIPTION: This snippet illustrates how to add Vuetify's vite-plugin to a Nuxt project, ensuring that it loads in the correct order within the Nuxt configuration.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/treeshaking.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport vuetify from 'vite-plugin-vuetify'\n\nexport default defineNuxtConfig({\n  modules: [\n    async (options, nuxt) => {\n      nuxt.hooks.hook('vite:extendConfig', config => config.plugins.push(\n        vuetify()\n      ))\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Rotating v-progress-circular in Vue.js\nDESCRIPTION: Illustrates how to use the rotate prop to customize the origin of v-progress-circular.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-circular.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-circular/prop-rotate\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Moment adapter with yarn\nDESCRIPTION: Installs the `@date-io/moment` and `moment` packages using yarn. These packages are required for using Moment as a date adapter in Vuetify. This is one of the installation options when using Moment.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @date-io/moment moment\n```\n\n----------------------------------------\n\nTITLE: Applying Variants to v-snackbar in Vue\nDESCRIPTION: Shows how to apply different styles to the snackbar using props such as text, shaped, outlined, and more.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/snackbars.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-snackbar/prop-variants\" />\n```\n\n----------------------------------------\n\nTITLE: Colored Loading - Vuetify Infinite Scroll\nDESCRIPTION: Customizes the color of loading button and spinner using the color prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/prop-color\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Sparkline in Vue\nDESCRIPTION: Shows how to create a Sparkline with fill using the 'fill' property in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/sparklines.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-sparkline/prop-fill\" />\n```\n\n----------------------------------------\n\nTITLE: Astro Dog Advanced Example with v-empty-state\nDESCRIPTION: An advanced example creating a fun and engaging empty state with the astro dog theme.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/misc-astro-dog\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DateFns adapter with yarn\nDESCRIPTION: Installs the `@date-io/date-fns` and `date-fns` packages using yarn. These packages are required for using DateFns as a date adapter in Vuetify.  This is one of the installation options when using DateFns.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @date-io/date-fns date-fns\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome 4 Icons\nDESCRIPTION: This snippet presents how to include Font Awesome 4 icons via a CDN and the configurations required in the Vuetify setup.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'font-awesome/css/font-awesome.min.css' // Ensure your project is capable of handling css files\nimport { createVuetify } from 'vuetify'\nimport { aliases, fa } from 'vuetify/iconsets/fa4'\n\nexport default createVuetify({\n  icons: {\n    defaultSet: 'fa',\n    aliases,\n    sets: {\n      fa,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Property in v-badge Component\nDESCRIPTION: Shows how to use the dot property in v-badge, which removes the badge's content and reduces its size for subtle attention-drawing.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/badges.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-badge/prop-dot\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-breadcrumbs in Vue\nDESCRIPTION: Demonstrates the default usage of v-breadcrumbs component with a text divider.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/breadcrumbs.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-breadcrumbs\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Thickness Divider in Vuetify\nDESCRIPTION: Illustrates how to adjust the thickness of a divider using the thickness prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dividers.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-divider/misc-portrait-view\" />\n```\n\n----------------------------------------\n\nTITLE: OTP Input Variants\nDESCRIPTION: Implementation showing different visual variants of the OTP input component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/prop-variant\" />\n```\n\n----------------------------------------\n\nTITLE: Registering \\'VPicker\\' Globally in Vuetify using JavaScript\nDESCRIPTION: This snippet shows how to register the \\'VPicker\\' component globally within a Vue.js application by modifying the Vuetify plugin file. The dependencies are Vuetify and Vue.js. This method makes \\'VPicker\\' accessible throughout the application without needing to import it into each component individually.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/labs/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { VPicker } from 'vuetify/labs/VPicker'\n\nexport default createVuetify({\n  components: {\n    VPicker,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Dashboard Component with Script Setup\nDESCRIPTION: Vue component implementation that imports the DashboardDashboardEmptyState component and renders it. Uses the script setup syntax from Vue 3 Composition API for simplified component definition.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/user/dashboard.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import DashboardDashboardEmptyState from '@/components/dashboard/DashboardEmptyState.vue'\n</script>\n\n<DashboardDashboardEmptyState />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-range-slider in Vue\nDESCRIPTION: Demonstrates the basic usage of the v-range-slider component in Vuetify. The slider reflects a range of values along a bar, from which users can select a range.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-range-slider\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Font Awesome 5 SVG Packages with yarn\nDESCRIPTION: Command to install Font Awesome SVG core, Vue components, and icon libraries using yarn package manager as development dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @fortawesome/fontawesome-svg-core @fortawesome/vue-fontawesome @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons -D\n```\n\n----------------------------------------\n\nTITLE: Disabled Hover Functionality Example\nDESCRIPTION: Shows how to disable the hover functionality using the disabled prop in v-hover component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/hover.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-hover/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Validation Rules Implementation\nDESCRIPTION: Shows how to add custom validation rules to v-input using functions that return true or error messages.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<v-input :rules=\"[v => !!v || 'Field is required']\"></v-input>\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Three Column Wireframe\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the three-column wireframe page, including title, keywords, and description for SEO purposes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/three-column.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: wireframe\nmeta:\n  title: Three column Wireframe\n  keywords: vuetify wireframe, vuetify app, vue app\n  description: A three-column wireframe template for Vuetify\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Luxon adapter with pnpm\nDESCRIPTION: Installs the `@date-io/luxon` and `luxon` packages using pnpm. These packages are required for using Luxon as a date adapter in Vuetify.  This is one of the installation options when using Luxon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @date-io/luxon luxon\n```\n\n----------------------------------------\n\nTITLE: Using Vuetify as ES Module with CDN\nDESCRIPTION: This HTML snippet demonstrates how to use Vuetify as an ES module using CDN links and an import map.  It defines the import map and imports vue and vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/vuetify@{{ version }}/dist/vuetify.min.css\" />\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@mdi/font@latest/css/materialdesignicons.min.css\" />\n  <link rel=\"stylesheet\" href=\"https://fonts.bunny.net/css?family=roboto:400,500,700\" />\n  <script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://cdn.jsdelivr.net/npm/vue@latest/dist/vue.esm-browser.js\",\n      \"vuetify\": \"https://cdn.jsdelivr.net/npm/vuetify@{{ version }}/dist/vuetify.esm.js\"\n    }\n  }\n  </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing v-defaults-provider with Custom Defaults Object in Vue\nDESCRIPTION: This example shows how to pass a defaults object to the v-defaults-provider component. The structure is the same as the defaults object passed to createVuetify when initializing the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/defaults-providers.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-defaults-provider/prop-defaults\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing v-breadcrumbs Divider in Vue\nDESCRIPTION: Shows how to set a custom divider for breadcrumbs using the divider prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/breadcrumbs.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-breadcrumbs/prop-divider\" />\n```\n\n----------------------------------------\n\nTITLE: Inset Divider in Vuetify\nDESCRIPTION: Shows how to create an inset divider that is moved 72px to the right, aligning with list items.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dividers.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-divider/prop-inset\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Order in Vue with Vuetify\nDESCRIPTION: This snippet demonstrates how to change the visual order of flex items using order utilities in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-order\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Vuetify for SSR in Javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize Vuetify with Server-Side Rendering (SSR) enabled. It imports necessary CSS files and uses `createVuetify` with the `ssr` option set to `true`. This configuration ensures that Vuetify properly renders the application on the server.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@mdi/font/css/materialdesignicons.css'\nimport 'vuetify/styles'\n\nconst vuetify = createVuetify({\n  ssr: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Action with Text to v-list\nDESCRIPTION: Shows how to include additional meta information within an action in a list item.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/misc-action-stack\" />\n```\n\n----------------------------------------\n\nTITLE: Pagination for Overflowing Tabs in Vuetify\nDESCRIPTION: Shows how pagination controls appear for desktop when tab items overflow their container, and how to display arrows on mobile devices using the show-arrows prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/tabs.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tabs/misc-pagination\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Font Awesome 5 SVG Packages with bun\nDESCRIPTION: Command to install Font Awesome SVG core, Vue components, and icon libraries using bun package manager as development dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbun add @fortawesome/fontawesome-svg-core @fortawesome/vue-fontawesome @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons -D\n```\n\n----------------------------------------\n\nTITLE: Different States of v-switch in Vue\nDESCRIPTION: Demonstrates various states of a v-switch component, including default, disabled, and loading.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-switch/prop-states\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-switch in Vue\nDESCRIPTION: Demonstrates the simplest form of a v-switch component, providing a toggle between 2 values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/switches.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-switch\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata with YAML Frontmatter in Vuetify\nDESCRIPTION: YAML frontmatter that defines metadata for a user dashboard page, including layout type, navigation context, title, description, and keywords for SEO purposes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/user/dashboard.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: user\nmeta:\n  nav: Dashboard\n  title: User Dashboard\n  description: User Dashboard\n  keywords: user dashboard\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Component in Vuetify\nDESCRIPTION: Defines MyComponent2 that imports and uses MyComponent1 as a child component. This establishes the parent-child relationship needed for nested defaults.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <MyComponent1 />\n</template>\n\n<script setup>\n  import MyComponent1 from './MyComponent1.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify in Existing Projects (pnpm)\nDESCRIPTION: These commands install Vuetify as a dependency in an existing project using pnpm.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npnpm i vuetify\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branches for Development\nDESCRIPTION: This snippet details how to switch branches in your local Git repository to prepare for development on the appropriate Vuetify version based on the type of changes being made.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"# Switch to the desired branch\\n# v3\\ngit switch master\\n# v2\\ngit switch v2-stable\"\n```\n\n----------------------------------------\n\nTITLE: Complex Astro Cat Example with v-tabs and v-window\nDESCRIPTION: A complex example demonstrating integration of v-empty-state with other Vuetify components like v-tabs and v-window.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/empty-states.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-empty-state/misc-astro-cat\" />\n```\n\n----------------------------------------\n\nTITLE: Preventing Ripple Propagation in Vue Components\nDESCRIPTION: Shows how to use v-ripple.stop to prevent ripple effects from propagating to outer elements when inner elements are clicked.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/ripple.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-ripple/stop\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DayJs adapter with bun\nDESCRIPTION: Installs the `@date-io/dayjs` and `dayjs` packages using bun. These packages are required for using DayJs as a date adapter in Vuetify. This is one of the installation options when using DayJs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbun add @date-io/dayjs dayjs\n```\n\n----------------------------------------\n\nTITLE: Installing DateFns adapter with npm\nDESCRIPTION: Installs the `@date-io/date-fns` and `date-fns` packages using npm. These packages are required for using DateFns as a date adapter in Vuetify.  This is one of the installation options when using DateFns.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @date-io/date-fns date-fns\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Align Content End in Vue with Vuetify\nDESCRIPTION: This snippet shows how to apply align-content: flex-end to a flex container in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-align-content-end\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Append and Prepend Items to Vuetify Select Component\nDESCRIPTION: This example demonstrates how to use the append and prepend item slots in a v-select component. These slots allow for adding custom functionality like a 'select-all' option.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/selects.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ExamplesExample file=\"v-select/slot-append-and-prepend-item\" />\n```\n\n----------------------------------------\n\nTITLE: Reversing Transitions in v-window Component\nDESCRIPTION: Illustrates the use of the reverse prop to change the direction of transitions in the window component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/windows.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-window/prop-reverse\" />\n```\n\n----------------------------------------\n\nTITLE: Using Nav Styling with v-list\nDESCRIPTION: Demonstrates the 'nav' prop which applies alternative styling, reducing item width and adding border radius.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/lists.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-list/prop-nav\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Vuetify API Documentation Template\nDESCRIPTION: This snippet shows the template structure for the Vuetify API documentation page. It includes custom components for features, backlinks, promoted entries, and search functionality. The template uses Vue's template syntax with dynamic binding for the 'name' variable.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/api/[name].md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ApiView v-on:update:name=\"name = $event\">\n\n# {{ name }} API\n\n<PageFeatures />\n\n<ApiBacklinks :name=\"name\" />\n\n<PromotedEntry />\n\n<ApiSearch />\n\n</ApiView>\n```\n\n----------------------------------------\n\nTITLE: Using the useDefaults Composable in a Custom Vuetify Component\nDESCRIPTION: This snippet demonstrates the usage of the useDefaults composable in a custom component, allowing the component to retrieve default prop values set in the Vuetify configuration.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/global-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\\n  <div>I am {{ props.foo }}</div>\\n</template>\\n\\n<script setup>\\n  import { useDefaults } from 'vuetify'\\n\\n  const _props = defineProps({ foo: String })\\n  const props = useDefaults(_props, 'MyComponent1')\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify and Dependencies (bun)\nDESCRIPTION: These commands install Vuetify, the vite-plugin-vuetify, and the Material Design Icons font as development dependencies in a project using bun.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbun add -d vuetify vite-plugin-vuetify\nbun add @mdi/font\n```\n\n----------------------------------------\n\nTITLE: OTP Input with Divider\nDESCRIPTION: Example showing OTP input implementation with divider elements.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/misc-divider\" />\n```\n\n----------------------------------------\n\nTITLE: Disabled Expansion Panels in Vuetify\nDESCRIPTION: Shows how both the expansion panel and its content can be disabled using the disabled prop in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/expansion-panels.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-expansion-panels/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Slot Click Events Usage\nDESCRIPTION: Demonstrates handling click events for append and prepend slots in v-input.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<v-input @click:append=\"appendClick\" @click:prepend=\"prependClick\"></v-input>\n```\n\n----------------------------------------\n\nTITLE: Importing Steam Component with Vue Script Setup\nDESCRIPTION: Vue script setup block that imports the Steam component from the examples/wireframes directory.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/steam.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Steam from '@/examples/wireframes/steam.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing DayJs adapter with pnpm\nDESCRIPTION: Installs the `@date-io/dayjs` and `dayjs` packages using pnpm. These packages are required for using DayJs as a date adapter in Vuetify. This is one of the installation options when using DayJs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @date-io/dayjs dayjs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Align Content Space Around in Vue with Vuetify\nDESCRIPTION: This example shows how to apply align-content: space-around to a flex container in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-align-content-around\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-divider in Vue\nDESCRIPTION: Demonstrates the simplest form of a divider, displaying a horizontal line. This example uses the border-opacity utility class.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dividers.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-divider\" />\n```\n\n----------------------------------------\n\nTITLE: Profile Card with Avatar\nDESCRIPTION: Implementation of a profile card using avatar with rounded prop set to 0 for hard-lined edges.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/avatars.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-avatar/misc-profile-card\" />\n```\n\n----------------------------------------\n\nTITLE: Mobile Text OTP Implementation\nDESCRIPTION: Example showing OTP input optimized for mobile text input.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/misc-mobile\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Utility Classes in Vuetify\nDESCRIPTION: This SCSS snippet demonstrates how to disable specific utility classes in Vuetify by setting corresponding variables to false, allowing for streamlined and efficient style management.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify' with (\n  $utilities: (\n    \"align-content\": false,\n    \"align-items\": false,\n    // Other utilities...\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Component Defaults\nDESCRIPTION: This snippet shows how to set default properties for virtual components. It defines an alias `MyButton` for `VBtn` and then sets the default `variant` property to `'tonal'` for `MyButton` and `'flat'` for the original `VBtn`. This allows customizing the default appearance of the virtual component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/aliasing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\nimport { VBtn } from 'vuetify/components/VBtn'\n\nexport default createVuetify({\n  aliases: {\n    MyButton: VBtn,\n  },\n  defaults: {\n    VBtn: { variant: 'flat' },\n    MyButton: { variant: 'tonal' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Vuetify and Dependencies (yarn)\nDESCRIPTION: These commands install Vuetify, the vite-plugin-vuetify, and the Material Design Icons font as development dependencies in a project using yarn.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D vuetify vite-plugin-vuetify\nyarn add @mdi/font\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Property in v-badge Component\nDESCRIPTION: Shows how to use the content property in v-badge to display a simple text value on the badge.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/badges.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-badge/prop-content\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Loading Slot - Vuetify Infinite Scroll\nDESCRIPTION: Implements custom loading message using the loading slot.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/infinite-scroller.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-infinite-scroll/slot-loading\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Align Content Center in Vue with Vuetify\nDESCRIPTION: This example demonstrates centering flex content using align-content: center in Vuetify.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-align-content-center\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify SASS Color Pack\nDESCRIPTION: This SASS code snippet demonstrates how to disable the SASS color pack feature in Vuetify. It shows the usage of the '@use' directive to configure Vuetify's SASS variables appropriately to reduce the CSS export size.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/colors.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify' with (\n  $color-pack: false,\n);\n```\n\n----------------------------------------\n\nTITLE: Installing DayJs adapter with yarn\nDESCRIPTION: Installs the `@date-io/dayjs` and `dayjs` packages using yarn. These packages are required for using DayJs as a date adapter in Vuetify. This is one of the installation options when using DayJs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @date-io/dayjs dayjs\n```\n\n----------------------------------------\n\nTITLE: Modifying Length of v-rating Component in Vue\nDESCRIPTION: Shows how to change the number of rating items by adjusting the length prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-length\" />\n```\n\n----------------------------------------\n\nTITLE: Making v-rating Component Clearable in Vue\nDESCRIPTION: Demonstrates how to allow users to reset the rating by clicking on the current value.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-clearable\" />\n```\n\n----------------------------------------\n\nTITLE: Item Group API Components Table\nDESCRIPTION: Markdown table showing the main components of the Item Group API - v-item-group and v-item with their descriptions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/item-groups.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Component | Description |\n| - | - |\n| [v-item-group](/api/v-item-group/) | The item group component. |\n| [v-item](/api/v-item/) | Sub-component used for modifying the `v-item-group` state |\n```\n\n----------------------------------------\n\nTITLE: OTP Input Card Implementation\nDESCRIPTION: Advanced example showing OTP input within a card component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/otp-input.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-otp-input/misc-card\" />\n```\n\n----------------------------------------\n\nTITLE: Readonly Month Picker\nDESCRIPTION: Example of a readonly month picker where new date selection is disabled.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-readonly\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring v-intersect Options in Vue\nDESCRIPTION: This snippet shows how to use the v-intersect directive with custom options, specifically the threshold option from the Intersection Observer API.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/intersect.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-intersect/prop-options\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DayJs adapter with npm\nDESCRIPTION: Installs the `@date-io/dayjs` and `dayjs` packages using npm. These packages are required for using DayJs as a date adapter in Vuetify. This is one of the installation options when using DayJs.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @date-io/dayjs dayjs\n```\n\n----------------------------------------\n\nTITLE: Importing \\'v-picker\\' in Vuetify using HTML\nDESCRIPTION: Demonstrates how to import and set up the \\'v-picker\\' component locally within a Vue.js template script setup syntax. Dependencies include Vuetify and Vue.js. The main parameter is the component itself, \\'VPicker\\', which is expected to be imported from Vuetify Labs. The output is a functional picker component in the UI.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/labs/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-picker />\n</template>\n\n<script setup>\n  import { VPicker } from 'vuetify/labs/VPicker'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Step Configuration - Vue\nDESCRIPTION: Shows how to use the step prop to define incremental value changes.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/number-inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-number-input/prop-step\" />\n```\n\n----------------------------------------\n\nTITLE: Showing Flex Align Content Space Between in Vue with Vuetify\nDESCRIPTION: This snippet illustrates the use of align-content: space-between in a Vuetify flex container.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/flex.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"flex/flex-align-content-between\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Constrained Wireframe Component in Vue\nDESCRIPTION: This snippet imports a constrained wireframe component from the examples directory and renders it in the page. The component is imported using the script setup syntax from Vue 3 and then rendered as a custom element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/constrained.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Constrained from '@/examples/wireframes/constrained.vue'\n</script>\n\n<constrained />\n```\n\n----------------------------------------\n\nTITLE: Installing Font Awesome 5 SVG Packages with pnpm\nDESCRIPTION: Command to install Font Awesome SVG core, Vue components, and icon libraries using pnpm package manager as development dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @fortawesome/fontawesome-svg-core @fortawesome/vue-fontawesome @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons -D\n```\n\n----------------------------------------\n\nTITLE: Applying Density Property to Vuetify Components\nDESCRIPTION: This example demonstrates the effect of the density property on Vuetify components. Density reduces vertical padding and sometimes font size, with options including default, comfortable, and compact. Square/round components like icons also have reduced horizontal padding.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/density-and-sizing.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"concepts/density\" preview />\n```\n\n----------------------------------------\n\nTITLE: Adjusting Density of v-file-input in Vue\nDESCRIPTION: Shows how to reduce the height of the file input using the density prop for a more compact appearance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-file-input/prop-dense\" />\n```\n\n----------------------------------------\n\nTITLE: Month Picker Orientation Options\nDESCRIPTION: Demonstrates portrait and landscape orientation variations of the month picker.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/misc-orientation\" />\n```\n\n----------------------------------------\n\nTITLE: Using RuleBuilders with Options in HTML\nDESCRIPTION: This HTML snippet demonstrates the use of RuleBuilders with options, such as setting a maximum length for input fields. Allows for option customization like length constraints, along with personalized error messaging.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/rules.md#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<v-form>\n  <v-text-field\n    label=\"Username\"\n    :rules=\"[rules.maxLength(10)]\"\n  ></v-text-field>\n</v-form>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<v-form>\n  <v-text-field\n    label=\"Username\"\n    :rules=\"[rules.maxLength(10, 'You can\\'t write over 10 characters')]\"\n  ></v-text-field>\n</v-form>\n```\n\n----------------------------------------\n\nTITLE: Setting v-rating Component to Readonly in Vue\nDESCRIPTION: Shows how to make the rating component non-interactive for display purposes only.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-readonly\" />\n```\n\n----------------------------------------\n\nTITLE: Router View with Transitions in Vue.js\nDESCRIPTION: This code snippet illustrates how to implement a router view with transitions using Vuetify. It showcases the use of 'router-view' to render components and employs a 'v-fade-transition' for smooth transitions between different views in the application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/concepts/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-app>\n    <v-app-bar app>\n      <v-toolbar-title>My App</v-toolbar-title>\n    </v-app-bar>\n\n    <v-main>\n      <router-view v-slot=\"{ Component }\">\n        <v-fade-transition hide-on-leave>\n          <component :is=\"Component\" />\n        </v-fade-transition>\n      </router-view>\n    </v-main>\n  </v-app>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Material Design 2 Blueprint\nDESCRIPTION: This code snippet imports the Material Design 2 blueprint from the `vuetify/blueprints` module. This import is required for utilizing the Material Design 2 blueprint within a Vuetify application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/blueprints.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { md2 } from 'vuetify/blueprints'\n```\n\n----------------------------------------\n\nTITLE: Month Picker with Allowed Months Restriction\nDESCRIPTION: Shows how to restrict selectable months using arrays, objects or functions.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-allowed-months\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Mode in v-range-slider\nDESCRIPTION: Shows how to use the strict prop with v-range-slider. When applied, the thumbs of the range slider are not allowed to cross over each other.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-range-slider/prop-strict\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Button SASS Variables in Vuetify\nDESCRIPTION: Demonstrates how to modify default button styling using SASS variables to adjust button height and padding.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/buttons.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  $button-banner-actions-padding: 16px,\n  $button-height: 32px,\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Font Awesome 5 SVG Packages with npm\nDESCRIPTION: Command to install Font Awesome SVG core, Vue components, and icon libraries using npm package manager as development dependencies.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fortawesome/fontawesome-svg-core @fortawesome/vue-fontawesome @fortawesome/free-solid-svg-icons @fortawesome/free-regular-svg-icons -D\n```\n\n----------------------------------------\n\nTITLE: Cloning Vuetify Repository Using Git\nDESCRIPTION: This snippet shows how to clone the Vuetify repository using both HTTPS and SSH protocols. Cloning is the first step to start working on the Vuetify codebase.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"# Using HTTPS\\ngit clone https://github.com/vuetifyjs/vuetify.git\\n\\n# Using SSH\\ngit clone git@github.com:vuetifyjs/vuetify.git\"\n```\n\n----------------------------------------\n\nTITLE: Using Font Awesome 4 Icons in Template\nDESCRIPTION: This snippet shows how to implement Font Awesome 4 icons in a Vuetify component template.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/icon-fonts.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <v-icon icon=\"fa-check\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Height for v-virtual-scroll in Vue\nDESCRIPTION: Demonstrates setting the height of v-virtual-scroll by placing it inside a flex container.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/virtual-scroller.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-virtual-scroll/prop-height-parent\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Overflow Button\nDESCRIPTION: Implementation of overflow button with loading state and linear progress indicator.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-loading\" />\n```\n\n----------------------------------------\n\nTITLE: Margin Classes Implementation in Vuetify\nDESCRIPTION: CSS utility classes for controlling margin properties in Vuetify framework with support for LTR and RTL layouts. Includes positive, negative and auto margin values with directional control.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/spacing.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Margin Examples */\n.me-n12 { margin-right: -48px; /* LTR */ margin-left: -48px; /* RTL */ }\n.mb-n1 { margin-bottom: -4px; }\n.ma-auto { margin: auto; }\n.ms-auto { margin-left: auto; /* LTR */ margin-right: auto; /* RTL */ }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Playground.vue for Development\nDESCRIPTION: This snippet provides the template for the Playground.vue file used in Vuetify development. This file serves as a workspace to test changes and features before submitting them.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"<template>\\n  <v-app>\\n    <v-container>\\n      <!--  -->\\n    </v-container>\\n  </v-app>\\n</template>\\n\\n<script setup>\\n  //\\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify for Server-Side Rendering\nDESCRIPTION: This snippet demonstrates how to enable server-side rendering in Vuetify by setting the 'ssr' property to true in the Vuetify configuration object. This is essential for applications that require pre-rendering for SEO or performance improvements.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/frequently-asked-questions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createVuetify } from 'vuetify'\n\nexport default createVuetify({\n  ssr: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Example without Scope\nDESCRIPTION: An example of a commit message without scope following the conventional-changelog standard. This example demonstrates how to format a documentation-related commit with explanatory body text.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocs: restructure nav components\n\nMoved duplicated functionality in drawer to reduce\nscope of responsibility\n```\n\n----------------------------------------\n\nTITLE: Customizing Month Picker Colors\nDESCRIPTION: Example of setting custom colors for the month picker using color and header-color props.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/date-pickers-month.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-date-picker-month/prop-colors\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Network Partners and Resellers\nDESCRIPTION: This code snippet defines a list of ad network partners, resellers, and their associated identifiers. It includes configurations for various platforms such as EMXDGT, Appnexus, Google, Rubicon, and others. The snippet also contains specific settings for video demand partners and Outbrain-related configurations.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/public/ads.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nEMXDGT.com, 1759, Reseller, 1e1d41537f7cad7f\nAppnexus.com, 1356, RESELLER, f5ab79cb980f11d1\ngoogle.com, pub-7439041255533808, RESELLER, f08c47fec0942fa0\nrubiconproject.com, 19396, Reseller, 0bfd66d529a55807\nonetag.com, 5d49f482552c9b6, Reseller\nsonobi.com, 83729e979b, RESELLER\n33across.com, 0010b00002cGp2AAAS, Reseller, bbea06d9c4d2853c\nrhythmone.com, 3611299104, RESELLER\n#fluct\nadingo.jp, 29875, RESELLER\n#Outbrain\noutbrain.com, 00ae023ac373956acf51a9b845069dca8a, DIRECT\nappnexus.com, 7597, RESELLER, f5ab79cb980f11d1\nFreewheel.tv, 741650, RESELLER # Premium video demand\nopenx.com, 540393169, RESELLER, 6a698e2ec38604c6 # Premium video demand\nrubiconproject.com, 19668, RESELLER, 0bfd66d529a55807\nindexexchange.com, 190856, RESELLER, 50b1c356f2c5c8fc # Premium Video Demand\npubmatic.com, 158615, RESELLER, 5d62403b186f2ace # Premium video & display demand\nvidazoo.com, 1773068026, RESELLER, b6ada874b4d7d0b2 # Premium Video Demand\nvideo.unrulymedia.com, 367782854, RESELLER # Premium video demand from Outbrain\nindexexchange.com, 193091, RESELLER, 50b1c356f2c5c8fc # Premium video demand from Outbrain\npubmatic.com, 160065, RESELLER, 5d62403b186f2ace # Premium video demand from Outbrain\nimprovedigital.com, 1863, RESELLER # Premium video demand from Outbrain\nfreewheel.tv, 1220655, RESELLER # Premium video demand from Outbrain\nrisecodes.com,6022acddc8b2f90001767980, RESELLER\nyahoo.com, 59040, RESELLER, e1a5b5b6e3255540\nemxdgt.com, 2014, RESELLER, 1e1d41537f7cad7f\nvi.ai, g-004a0d4b5efc1727f1afd5a5b06f11a099, DIRECT #instream video by outbrain\ngoogle.com, pub-5617098146054077, RESELLER, f08c47fec0942fa0 #instream video by outbrain\npubmatic.com, 158055, RESELLER, 5d62403b186f2ace #instream video by outbrain\nxandr.com, 10736, RESELLER #instream video by outbrain\nrubiconproject.com, 21506, RESELLER, 0bfd66d529a55807 #instream video by outbrain\nrhythmone.com, 1014191143, RESELLER, a670c89d4a324e47 #instream video by outbrain\nvideo.unrulymedia.com, 1014191143, RESELLER #instream video by outbrain\nIndexexchange.com, 190500, RESELLER #instream video by outbrain\nsmartadserver.com,2776,RESELLER #instream video by outbrain\nopenx.com, 540362347, RESELLER, 6a698e2ec38604c6 #instream video by outbrain\nmedia.net, 8CUIH830U, RESELLER #instream video by outbrain\ntriplelift.com, 11547, RESELLER, 6c33edb13117fd86 #instream video by outbrain\nimprovedigital.com, 1552, Reseller #instream video by outbrain\ncontextweb.com, 562709, RESELLER, 89ff185a4c4e857c\naps.amazon.com, 3965, RESELLER #instream video by outbrain\nfreewheel.tv, 1220559, RESELLER # Premium video demand from Outbrain\nfreewheel.tv, 1133073, RESELLER #instream video by outbrain\nsovrn.com, 267974, RESELLER, fafdf38b16bf6b2b #instream video by outbrain\nadform.com, 2611, RESELLER #instream video by outbrain\nsharethrough.com, c21oBkqP, RESELLER, d53b998a7bd4ecd2\nsmaato.com, 1100054606, RESELLER, 07bcf65f187117b4\n#BuySellAds Inc\nbuysellads.com, 93, DIRECT\nMANAGERDOMAIN=buysellads.com\nOWNERDOMAIN=vuetifyjs.com\n```\n\n----------------------------------------\n\nTITLE: Overflow Button with Counter\nDESCRIPTION: Implementation of v-overflow-btn with character count limitation feature.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-counter\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Extended Toolbar Component in Vue\nDESCRIPTION: This snippet demonstrates how to import and use the Extended Toolbar component in a Vue application. It uses the script setup syntax to import the component from the examples/wireframes directory and then renders it as a custom element.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/extended-toolbar.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import ExtendedToolbar from '@/examples/wireframes/extended-toolbar.vue'\n</script>\n\n<extended-toolbar />\n```\n\n----------------------------------------\n\nTITLE: Editable Overflow Button\nDESCRIPTION: Shows implementation of an editable overflow button that functions similar to v-text-field.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-editable\" />\n```\n\n----------------------------------------\n\nTITLE: Segmented Overflow Button\nDESCRIPTION: Shows implementation of segmented variant with a divider between content and icon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-segmented\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Moment adapter with npm\nDESCRIPTION: Installs the `@date-io/moment` and `moment` packages using npm. These packages are required for using Moment as a date adapter in Vuetify. This is one of the installation options when using Moment.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @date-io/moment moment\n```\n\n----------------------------------------\n\nTITLE: Basic Vuetify Banner Props Example - Lines\nDESCRIPTION: Demonstrates how to use the lines prop to control text display length in v-banner component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/banners.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nv-banner/prop-lines\n```\n\n----------------------------------------\n\nTITLE: Padding Classes Implementation in Vuetify\nDESCRIPTION: CSS utility classes for controlling padding properties in Vuetify framework with support for LTR and RTL layouts. Includes values from 0 to 16 with directional control.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/spacing.md#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n/* Padding Examples */\n.pa-0 { padding: 0; }\n.pl-4 { padding-left: 16px; }\n.ps-2 { padding-left: 8px; /* LTR */ padding-right: 8px; /* RTL */ }\n.pe-16 { padding-right: 64px; /* LTR */ padding-left: 64px; /* RTL */ }\n```\n\n----------------------------------------\n\nTITLE: Defining Rounded SASS Variables in SCSS\nDESCRIPTION: This snippet defines the SASS variables to customize border-radius styles in Vuetify. Key values include 0, 'sm', 'lg', 'xl', 'pill', and 'circle', which correspond to different levels of rounded corners. Dependencies include Vuetify's SASS infrastructure. Inputs include custom ratios, with expected outputs being scalable CSS styles.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/border-radius.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$rounded: (\n  0: 0,\n  'sm': $border-radius-root / 2,\n  null: $border-radius-root,\n  'lg': $border-radius-root * 2,\n  'xl': $border-radius-root * 6,\n  'pill': 9999px,\n  'circle': 50%\n);\n```\n\n----------------------------------------\n\nTITLE: Commit Message with Issue References\nDESCRIPTION: Example showing how to properly reference multiple resolved issues in a commit message. The body text includes the 'resolves' keyword followed by issue numbers.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocs(sass-variables): fix broken link to api\n\nresolves #3219\nresolves #3254\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Transitions with Stylus\nDESCRIPTION: Commented-out code showing the Stylus styling for a fade transition in Vuetify. It demonstrates how to define transition states including enter, leave, and active states with appropriate CSS properties.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: stylus\nCODE:\n```\n.fade-transition\n  &-leave-active\n    position: absolute\n\n  &-enter-active, &-leave, &-leave-to\n    transition: $primary-transition\n\n  &-enter, &-leave-to\n    opacity: 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in Vue Templates\nDESCRIPTION: This HTML snippet, with embedded SCSS, shows how to access and utilize global Vuetify variables within a Vue component by importing the settings file.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style lang=\"scss\">\n  @use './settings';\n\n  .my-button {\n    height: settings.$button-height;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: SASS Opacity Variable Customization\nDESCRIPTION: This code snippet demonstrates how to customize the opacity values in Vuetify using SASS variables. It shows how to override the default opacity values for hover, focus, selected, activated, pressed, and dragged states, as well as numerical opacity values.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/opacity.md#2025-04-22_snippet_0\n\nLANGUAGE: Sass\nCODE:\n```\n@use 'vuetify/settings' with (\n  $opacities: (\n    hover: var(--v-hover-opacity),\n    focus: var(--v-focus-opacity),\n    selected: var(--v-selected-opacity),\n    activated: var(--v-activated-opacity),\n    pressed: var(--v-pressed-opacity),\n    dragged: var(--v-dragged-opacity),\n    0: 0,\n    10: .1,\n    20: .2,\n    30: .3,\n    40: .4,\n    50: .5,\n    60: .6,\n    70: .7,\n    80: .8,\n    90: .9,\n    100: 1\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Moment adapter with bun\nDESCRIPTION: Installs the `@date-io/moment` and `moment` packages using bun. These packages are required for using Moment as a date adapter in Vuetify. This is one of the installation options when using Moment.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nbun add @date-io/moment moment\n```\n\n----------------------------------------\n\nTITLE: Disabled Overflow Button\nDESCRIPTION: Demonstrates how to disable the overflow button to prevent user interaction.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Dense Overflow Button\nDESCRIPTION: Shows how to create a compact version of the overflow button with reduced height.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-dense\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Steam Component\nDESCRIPTION: Vue template code that renders the imported Steam component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/steam.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<steam />\n```\n\n----------------------------------------\n\nTITLE: Installing DateFns adapter with bun\nDESCRIPTION: Installs the `@date-io/date-fns` and `date-fns` packages using bun. These packages are required for using DateFns as a date adapter in Vuetify.  This is one of the installation options when using DateFns.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbun install @date-io/date-fns date-fns\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Layer Order\nDESCRIPTION: This CSS example shows how to define the order of CSS layers, affecting the hierarchy and precedence of styles applied across a project.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/sass-variables.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@layer base, vuetify, overrides;\n```\n\n----------------------------------------\n\nTITLE: Disabling v-range-slider in Vue\nDESCRIPTION: Demonstrates how to disable the v-range-slider component. Users cannot interact with disabled sliders.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/range-sliders.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-range-slider/prop-disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Luxon adapter with npm\nDESCRIPTION: Installs the `@date-io/luxon` and `luxon` packages using npm. These packages are required for using Luxon as a date adapter in Vuetify. This is one of the installation options when using Luxon.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @date-io/luxon luxon\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Example with Scope\nDESCRIPTION: An example of a commit message with scope following the conventional-changelog standard with angular preset. This example shows how to format a bug fix commit that references an issue number.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/contributing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfix(VSelect): don't close when a detachable child is clicked\n\nfixes #12354\n```\n\n----------------------------------------\n\nTITLE: Disabling SASS Class Generation\nDESCRIPTION: This code snippet shows how to disable the generation of specific height and width utility classes in Vuetify by setting their corresponding variables to false within SASS settings.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/sizing.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  $utilities: (\n    \"fill-height\": false,\n    \"height\": false,\n    \"height-screen\": false,\n    \"width\": false\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using System Bar Component in Vue\nDESCRIPTION: This snippet demonstrates how to import a system bar component from the examples directory and use it in a Vue template. The setup script includes the import statement, and the component is then used in the template.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/system-bar.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import SystemBar from '@/examples/wireframes/system-bar.vue'\n</script>\n\n<system-bar />\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Text with v-tooltip Directive in Vue\nDESCRIPTION: Illustrates how to set custom tooltip text using the v-tooltip directive value. The example shows both default text content and custom string usage.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/directives/tooltip.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-tooltip-directive/text\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Mix for Fonts\nDESCRIPTION: This JavaScript code configures Laravel Mix to copy the Material Design Icons font files to the `dist/fonts/` directory. This ensures that the icons are available in the built application.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/getting-started/installation.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmix.copy('node_modules/@mdi/font/fonts/', 'dist/fonts/')\n```\n\n----------------------------------------\n\nTITLE: Vue Component References in Markdown\nDESCRIPTION: Component references used to display team member information and promotional content throughout the page.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/about/meet-the-team.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<PageFeatures />\n\n<PromotedEntry />\n\n<AboutTeamMembers team=\"company\" />\n\n<PromotedPromoted slug=\"vuetify-open-collective\" />\n\n<AboutTeamMembers team=\"core\" />\n\n<AboutTeamMembers team=\"legends\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuetify Position Classes in SCSS\nDESCRIPTION: This SCSS snippet demonstrates how to disable the generation of position utility classes in Vuetify. It uses the $utilities map to set the position, top, right, bottom, and left options to false. This requires the 'vuetify/settings' module.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/position.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\\n  $utilities: (\\n    position: false,\\n    top: false,\\n    right: false,\\n    bottom: false,\\n    left: false\\n  )\\n);\n```\n\n----------------------------------------\n\nTITLE: Item Group Component Meta Information\nDESCRIPTION: YAML metadata block defining navigation, title, description and related component information for the Item Group documentation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/item-groups.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmeta:\n  nav: Item groups\n  title: Item group component\n  description: The item group components provides the ability to create a group of selectable items out of any component.\n  keywords: item groups, vuetify item group component, vue item group component\nrelated:\n  - /components/button-groups\n  - /components/carousels\n  - /components/tabs\nfeatures:\n  github: /components/VItemGroup/\n  label: 'C: VItemGroup'\n  report: true\n```\n\n----------------------------------------\n\nTITLE: Typescript Module Augmentation\nDESCRIPTION: Shows how to use TypeScript's module augmentation to extend the `vuetify` module with a custom date adapter interface.  This allows you to specify the type of adapter used in your application and provides type safety.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/dates.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createVuetify({\n  ...\n})\n\ndeclare module 'vuetify' {\n  namespace DateModule {\n    interface Adapter extends LuxonAdapter {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Half Increments in v-rating Component in Vue\nDESCRIPTION: Illustrates how to increase rating granularity by allowing half-star ratings.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/ratings.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-rating/prop-half-increments\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the default behavior for all web crawlers accessing the site. It allows unrestricted access to all pages and resources.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: YAML Metadata Configuration for Team Page\nDESCRIPTION: Front matter metadata configuration for the team documentation page, defining title, description, keywords and related pages.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/about/meet-the-team.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmeta:\n  title: Meet the team\n  description: Meet the team responsible for building Vuetify. These are the core individuals who drive the vision of the framework.\n  keywords: vuetify dev team, vuetify core team\nrelated:\n  - /introduction/enterprise-support/\n  - /introduction/long-term-support/\n  - /introduction/roadmap/\n```\n\n----------------------------------------\n\nTITLE: Overflow Button with Hint\nDESCRIPTION: Shows how to add helper text using the hint property on the overflow button.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/overflow-btns.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-overflow-btn/prop-hint\" />\n```\n\n----------------------------------------\n\nTITLE: SASS Opacity Class Disabling\nDESCRIPTION: This code snippet shows how to disable the generation of opacity classes in Vuetify by setting the `$opacities` SASS variable to `false`. This can be useful for reducing CSS size if opacity utilities are not needed.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/opacity.md#2025-04-22_snippet_1\n\nLANGUAGE: Sass\nCODE:\n```\n@use 'vuetify/settings' with (\n  $opacities: false\n);\n```\n\n----------------------------------------\n\nTITLE: SASS Border Customization\nDESCRIPTION: This SASS code snippet allows customization of border widths using the `$borders` variable. It defines a map of border widths that can be applied using Vuetify's border utility classes. The `resource` attribute specifies the file where these settings are applied.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/borders.md#2025-04-22_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n\"@use 'vuetify/settings' with (\\n  $borders: (\\n    0: 0,\\n    null: thin,\\n    thin: thin,\\n    sm: 1px,\\n    md: 2px,\\n    lg: 4px,\\n    xl: 8px\\n  )\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Transitions in Vuetify with JavaScript\nDESCRIPTION: Commented-out code showing how to create custom transitions in Vuetify using the createSimpleTransition helper function. It demonstrates importing the function, creating a transition, and registering it as a Vue component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSimpleTransition } from 'vuetify/components/transitions/createTransition'\n\nconst myTransition = createSimpleTransition('my-transition')\n\nVue.component('my-transition', myTransition)\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Metadata for Discord Wireframe\nDESCRIPTION: This YAML front matter defines metadata for the Discord wireframe page, including the title, keywords for SEO, and a description. This metadata helps with page indexing and search engine optimization.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/discord.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: wireframe\nmeta:\n  title: Discord Wireframe\n  keywords: vuetify wireframe, vuetify app, vue app\n  description: A discord wireframe template for Vuetify\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Cursor Utility Generation in Vuetify with SASS\nDESCRIPTION: This snippet shows how to disable the generation of cursor utility classes in Vuetify using SASS. By setting the `cursor` utility to `false` within the `vuetify/settings` module, the default cursor classes will not be generated, allowing for more granular control over CSS output and potentially reducing file size. It's useful if you don't need or want to use the built-in cursor utilities.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/styles/cursor.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use 'vuetify/settings' with (\n  $utilities: (\n    \"cursor\": false,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Reversed Progress Bar in Vue\nDESCRIPTION: Demonstrates a reversed progress bar using the reverse prop, which also supports RTL display.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/progress-linear.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-progress-linear/prop-reverse\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying a Vuetify Baseline Wireframe Component\nDESCRIPTION: This code imports a baseline wireframe Vue component from the examples directory and renders it in the template. The script uses the Vue Composition API's setup syntax for component initialization.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/baseline.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Baseline from '@/examples/wireframes/baseline.vue'\n</script>\n\n<baseline />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Inbox Wireframe Component in Vue\nDESCRIPTION: This snippet demonstrates how to import a Vuetify inbox wireframe component and render it within a Vue template. It uses the script setup syntax from Vue 3 for component registration and renders the component using self-closing tag notation.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/inbox.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import Inbox from '@/examples/wireframes/inbox.vue'\n</script>\n\n<inbox />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Three Column Wireframe Component in Vue\nDESCRIPTION: Sets up a Vue component that implements a three-column layout wireframe using Vuetify. The code uses script setup syntax and imports a custom component from the examples directory.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/wireframes/three-column.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import ThreeColumn from '@/examples/wireframes/three-column.vue'\n</script>\n\n<three-column />\n```\n\n----------------------------------------\n\nTITLE: Creating and Overwriting Custom Rules in JavaScript\nDESCRIPTION: This snippet allows the creation of custom validation rules or overwriting existing ones in Vuetify. The example defines a new rule `pinCode` and overwrites an existing rule `integer`. This setup is tailored for developers looking to extend Vuetify's validation capabilities.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/features/rules.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRulesPlugin } from 'vuetify/labs/rules'\n\nexport default createRulesPlugin({\n  rules: {\n    aliases: {\n      // Create a new rule named \"pinCode\"\n      pinCode: err => {\n        return v => (/^[\\d]{4}$/.test(v)) || err || 'Field must contain a 4-digit PIN'\n      },\n      // Overwrite an existing rule by redefining it\n      integer: err => {\n        return v => Number.isInteger(v) || err || 'Field must contain an interger value'\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Virtual Data Table in Vue with Vuetify\nDESCRIPTION: This example demonstrates how to use the v-data-table-virtual component in Vuetify to create a virtual table for displaying large datasets efficiently. The component uses virtualization to render only a portion of the rows at a time.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/data-tables/virtual-tables.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-data-table/virtual\" />\n```\n\n----------------------------------------\n\nTITLE: Installing VFileUpload Component from Vuetify Labs\nDESCRIPTION: Code snippet showing how to import and register the VFileUpload component from Vuetify labs in a Vue application. This registration is required as it's a labs component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/file-upload.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VFileUpload } from 'vuetify/labs/VFileUpload'\n\nexport default createVuetify({\n  components: {\n    VFileUpload,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing VStepperVertical Component in Vuetify\nDESCRIPTION: This snippet shows how to import and register the VStepperVertical component from Vuetify labs. It requires manual import and registration with the Vuetify instance.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/vertical-steppers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VStepperVertical } from 'vuetify/labs/VStepperVertical'\n\nexport default createVuetify({\n  components: {\n    VStepperVertical,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Ad Network Partner Configuration\nDESCRIPTION: Comprehensive list of advertising network partnerships and configurations including publisher IDs and relationship types (DIRECT/RESELLER) for multiple ad platforms. Includes configurations for major ad networks like Google AdSense, Amazon, AppNexus, Rubicon and others.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/public/ads.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nbuysellads.com, 8198, DIRECT\nappnexus.com, 8394, DIRECT, f5ab79cb980f11d1\nxandr.com, 8394, DIRECT, f5ab79cb980f11d1\nrubiconproject.com, 18812, DIRECT, 0bfd66d529a55807\nrubiconproject.com, 22884, DIRECT, 0bfd66d529a55807\nrubiconproject.com, 18814, DIRECT, 0bfd66d529a55807\naps.amazon.com,747b8b51-ec47-4dee-9823-b2b73124b71f,DIRECT\n```\n\n----------------------------------------\n\nTITLE: Controlling Bottom Sheet Visibility with v-model in Vue\nDESCRIPTION: This example shows how to control the visibility of the bottom sheet using v-model. It includes a reference to an example file demonstrating this functionality.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/bottom-sheets.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-bottom-sheet/prop-model\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Usage with Activator Slot\nDESCRIPTION: Basic example showing how to use the v-dialog component with an activator slot to render a button that opens the dialog.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesUsage name=\"v-dialog\" />\n```\n\n----------------------------------------\n\nTITLE: Hoverable Cards in Vuetify\nDESCRIPTION: Shows how to create cards that increase elevation on hover using the hover prop.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/cards.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<v-card\n  class=\"mx-auto\"\n  max-width=\"344\"\n  hover\n>\n  <!-- Card content -->\n</v-card>\n```\n\n----------------------------------------\n\nTITLE: Overflowed Dialog Content\nDESCRIPTION: Example showing how dialogs handle content that exceeds the available window space.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/dialogs.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-dialog/misc-overflowed\" />\n```\n\n----------------------------------------\n\nTITLE: Density Prop Usage in v-autocomplete\nDESCRIPTION: Shows how to use the density prop to adjust vertical spacing within the v-autocomplete component.\nSOURCE: https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/pages/en/components/autocompletes.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ExamplesExample file=\"v-autocomplete/prop-density\" />\n```"
  }
]