[
  {
    "owner": "mudblazor",
    "repo": "mudblazor",
    "content": "TITLE: ParameterState Pattern for Safe Two-Way Binding - C#\nDESCRIPTION: Exhibits the correct pattern for toggling a two-way bound parameter using ParameterState to avoid directly modifying the parameter property. ParameterState mediates the value and event callback, preserving proper Blazor behavior. All dependencies (ParameterState<T>, EventCallback) must be set up in the component's registration.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\nprivate readonly ParameterState<bool> _expandedState;\n\n[Parameter]\npublic bool Expanded { get; set; }\n\n[Parameter]\npublic EventCallback<bool> ExpandedChanged { get; set; }\n\npublic MudTreeViewItemToggleButton()\n{\n    using var registerScope = CreateRegisterScope();\n    _expandedState = registerScope.RegisterParameter<bool>(nameof(Expanded))\n        .WithParameter(() => Expanded)\n        .WithEventCallback(() => ExpandedChanged);\n}\n\nprivate Task ToggleAsync()\n{\n\treturn _expandedState.SetValueAsync(!_expandedState.Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL Support in MudBlazor Components (C#)\nDESCRIPTION: Code example showing how to implement Right-to-Left support in MudBlazor components by using a cascading parameter to detect RTL mode. This allows components to adapt their styling for languages that read from right to left.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[CascadingParameter] public bool RightToLeft {get; set;}\n```\n\n----------------------------------------\n\nTITLE: Registering a Parameter Using ParameterState - C#\nDESCRIPTION: This snippet illustrates the correct way to declare a Blazor component parameter using the ParameterState pattern. The property remains an auto-property, and a ParameterState field is declared for it. This enables automated change detection and async handling without embedding logic in the property setter. Prerequisite: ParameterState<T> class and registration infrastructure.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nprivate readonly ParameterState<bool> _expandedState;\n\n[Parameter]\npublic bool Expanded { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Parameter Implementation in MudBlazor (C#)\nDESCRIPTION: Shows the recommended way to handle parameter changes in MudBlazor components using the SetParameter method pattern, which properly integrates with Blazor's component lifecycle.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string _text;\n\n[Parameter]\npublic string Text { get; set; }\n\nprotected override async Task OnParametersSetAsync()\n{\n   await SetTextAsync();\n}\n\nprotected async Task SetTextAsync()\n{\n   if (_text == Text)\n      return;\n   _text = Text;\n   await OnTextChangedAsync();\n}\n\nprotected async Task OnTextChangedAsync()\n{\n   // do what needs to be done\n   StateHasChanged();\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Parameter Assignment in Blazor (Recommended) - Razor/C#\nDESCRIPTION: Illustrates the preferred pattern for assigning parameters to child components using markup binding instead of imperative code. The ShowOnlyOneCalendar parameter is bound to the _showOnlyOne field, which is updated from component logic. This keeps the Blazor data flow declarative and supports proper UI updates.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: razor\nCODE:\n```\n<CalendarComponent ShowOnlyOneCalendar=\"@_showOnlyOne\"  />\n<button @onclick=\"Update\">\n        Update\n</button>\n\n@code\n{\n    private bool _showOnlyOne;;\n\t\n    private void Update()\n    {\n        _showOnlyOne = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of HTML Element Interactions in bUnit Tests (C#)\nDESCRIPTION: This snippet shows the correct way to interact with HTML elements in bUnit tests. It avoids saving element references and instead queries the component each time an interaction is needed.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\nvar comp = ctx.RenderComponent<MudTextField<string>>();\n\n// correct   \ncomp.Find(\"input\").Change(\"Garfield\");\ncomp.Find(\"input\").Blur();\ncomp.FindComponent<MudTextField<string>>().Instance.Value.NotBeNullOrEmpty();\n```\n\n----------------------------------------\n\nTITLE: Adding MudBlazor Services in Program.cs - C#\nDESCRIPTION: Imports MudBlazor services into the dependency injection container of a Blazor application. The first snippet adds the using statement for MudBlazor.Services for accessing extension methods. The second snippet registers all MudBlazor services via AddMudServices(). Place both snippets in your Blazor app's Program.cs for proper dependency injection and component functionality.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing MudBlazor.Services;\\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddMudServices();\\n\n```\n\n----------------------------------------\n\nTITLE: Adding MudBlazor Providers to Layouts - Razor\nDESCRIPTION: Registers MudBlazor's providers (theme, popover, dialog, snackbar) at the app layout level in MainLayout.razor or App.razor so MudBlazor services are available to all child components. Each provider supports a related UI or service feature. Place these components near the root of your component tree to enable them globally.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n<MudThemeProvider/>\\n<MudPopoverProvider/>\\n<MudDialogProvider/>\\n<MudSnackbarProvider/>\\n\n```\n\n----------------------------------------\n\nTITLE: Registering ParameterState with Change Handler in Constructor - C#\nDESCRIPTION: Shows how to register a Blazor parameter in the constructor using ParameterState, attach a value provider and event callback, and wire an async change handler. This pattern centralizes side-effects and allows proper async execution. Dependencies: CreateRegisterScope method, OnExpandedChangedAsync, ExpandedChanged, Expanded.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\npublic MudCollapse()\n{\n    using var registerScope = CreateRegisterScope();\n    _expandedState = registerScope.RegisterParameter<bool>(nameof(Expanded)) // the property name is needed for automatic value change detection in SetParametersAsync\n        .WithParameter(() => Expanded) // a get func enabling the ParameterState to read the parameter value w/o resorting to Reflection\n        .WithEventCallback(() => ExpandedChanged) // a get func enabling the ParameterState to get the EventCallback of the parameter (if the param is two-way bindable)\n        .WithChangeHandler(OnExpandedChangedAsync); // the change handler \n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Change Handler Implementation - C#\nDESCRIPTION: Implements the async change handler for a registered ParameterState parameter. All logic previously in the property setter moves here, allowing for proper async execution and exception handling. Parameters for state management (_isRendered, _expandedState, etc.) are expected to be available in the component. Async flows are handled correctly, and event callbacks are awaited.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nprivate async Task OnExpandedChangedAsync()\n{\n    if (_isRendered)\n    {\n        _state = _expandedState.Value ? CollapseState.Entering : CollapseState.Exiting;\n        await UpdateHeightAsync();  // async Task not discarded\n        _updateHeight = true;\n    }\n    else if (_expandedState.Value)\n    {\n        _state = CollapseState.Entered;\n    }\n    await ExpandedChanged.InvokeAsync(_expandedState.Value); // async Task not discarded\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Parameters with Shared Change Handler - C#\nDESCRIPTION: Demonstrates how to register two ParameterState instances for different parameters, both pointing to the same change handler. This enables efficient batching when several parameters change simultaneously. Prerequisites: CreateRegisterScope(), Param1, Param2, OnParametersChanged. The change handler is only called once if both param values change together.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\n// Param1 and Param2 share the same change handler\nusing var registerScope = CreateRegisterScope();\n_param1State = registerScope.RegisterParameter<int>(nameof(Param1)).WithParameter(() => Param1).WithChangeHandler(OnParametersChanged);\n_param2State = registerScope.RegisterParameter<int>(nameof(Param2)).WithParameter(() => Param2).WithChangeHandler(OnParametersChanged);\n```\n\n----------------------------------------\n\nTITLE: Using MudBlazor Components and Event Handling - Razor/C#\nDESCRIPTION: Provides an example of using MudBlazor components (MudText, MudButton) and demonstrates binding and updating state with @code in Razor. Relies on prior registration and service setup for MudBlazor. The snippet showcases component parameters (Typo, Variant, Color, OnClick), data binding, and an event handler for button clicks that updates displayed text and click count. Place this code in a Blazor page or component file after MudBlazor setup.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_6\n\nLANGUAGE: razor\nCODE:\n```\n<MudText Typo=\\\"Typo.h6\\\">\\n    MudBlazor is @Text\\n</MudText>\\n\\n<MudButton Variant=\\\"Variant.Filled\\\" \\n           Color=\\\"Color.Primary\\\" \\n           OnClick=\\\"ButtonOnClick\\\">\\n    @ButtonText\\n</MudButton>\\n\\n@code {\\n    string Text { get; set; } = \\\"????\\\";\\n    string ButtonText { get; set; } = \\\"Click Me\\\";\\n    int ClickCount { get; set; }\\n\\n    void ButtonOnClick()\\n    {\\n        ClickCount += 1;\\n        Text = $\\\"Awesome x {ClickCount}\\\";\\n        ButtonText = \\\"Click Me Again\\\";\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Registering MudBlazor Namespace in Razor Files - Razor\nDESCRIPTION: Imports the MudBlazor components namespace for use throughout the Blazor project by adding an @using directive in the _Imports.razor file. This makes all MudBlazor components accessible without additional import statements. Place into your Blazor app's _Imports.razor to enable MudBlazor components in any page or component.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@using MudBlazor\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Font and CSS References to HTML Head - Razor\nDESCRIPTION: Adds Google Fonts and the MudBlazor main stylesheet to the HTML document's <head> section, ensuring the application uses consistent typography and base styling. Insert these <link> tags inside index.html, _Layout.cshtml, _Host.cshtml, or App.razor as appropriate for your Blazor hosting model. No inputs; output is correct font and theme styling in the app.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: razor\nCODE:\n```\n<link href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\\\" rel=\\\"stylesheet\\\" />\\n<link href=\\\"_content/MudBlazor/MudBlazor.min.css\\\" rel=\\\"stylesheet\\\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Package via .NET CLI - Shell\nDESCRIPTION: Installs the MudBlazor NuGet package into a .NET project using the .NET CLI. Requires the .NET SDK to be installed on the system. Run this command inside your project directory to add MudBlazor as a project dependency. No input or output parameters; installs latest version of the MudBlazor library into the local project file.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package MudBlazor\\n\n```\n\n----------------------------------------\n\nTITLE: Adding MudBlazor JavaScript Reference to HTML Body - Razor\nDESCRIPTION: Adds the MudBlazor JavaScript file at the end of the HTML body to enable certain MudBlazor interactive behaviors. Should be placed in index.html, _Layout.cshtml, _Host.cshtml or equivalent, depending on your hosting model (WebAssembly or Server). Required for MudBlazor components that need browser-side interactivity.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: razor\nCODE:\n```\n<script src=\\\"_content/MudBlazor/MudBlazor.min.js\\\"></script>\\n\n```\n\n----------------------------------------\n\nTITLE: Using InvokeAsync for Setting Component Parameters in bUnit Tests (C#)\nDESCRIPTION: This snippet illustrates the importance of using InvokeAsync when setting parameter values on a component in bUnit tests. This ensures that the interaction happens on the Blazor UI-thread.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_15\n\nLANGUAGE: c#\nCODE:\n```\nvar comp = ctx.RenderComponent<MudTextField<string>>();\nvar textField=comp.FindComponent<MudTextField<string>>().Instance;\n\n// wrong!\ntextField.Value=\"Garfield\";\n// correct\nawait comp.InvokeAsync(()=>textField.Value=\"I love dogs\");\n```\n\n----------------------------------------\n\nTITLE: Two-Way Binding with Direct Parameter Assignment (Anti-Pattern) - C#\nDESCRIPTION: Shows an incorrect approach to toggling a two-way bound parameter by directly assigning to the [Parameter] property in component logic. This can overwrite parameters and lead to synchronization issues because the source of truth typically resides outside the component. Dependencies: Expanded property and ExpandedChanged EventCallback.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\n[Parameter]\npublic bool Expanded { get; set; }\n\n[Parameter]\npublic EventCallback<bool> ExpandedChanged { get; set; }\n\n\nprivate Task ToggleAsync()\n{\n\tExpanded = !Expanded;\n\treturn ExpandedChanged.InvokeAsync(Expanded);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Parameter Implementation in MudBlazor (C#)\nDESCRIPTION: Demonstrates an anti-pattern where logic is placed directly in a parameter's setter, which can cause issues in Blazor's rendering lifecycle. This approach should be avoided as it can lead to unexpected behavior.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string _text;\n\n[Parameter]\npublic string Text \n{\n   get => _text; \n   set \n   { \n      if (_text == value)\n         return;\n      _text = value;\n      InvokeAsync(StateHasChanged);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter with Logic in the Setter - C#\nDESCRIPTION: This snippet demonstrates an anti-pattern where a Blazor [Parameter] property contains logic and even async function invocations in its setter. This practice is discouraged because Blazor property setters must remain synchronous, leading to discarded tasks, unobserved exceptions, and difficult-to-diagnose bugs. Dependencies: CollapseState enum, UpdateHeight async function, ExpandedChanged EventCallback.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nprivate bool _expanded;\n\n[Parameter]\npublic bool Expanded\n{\n    get => _expanded;\n    set\n    {\n        if (_expanded == value)\n            return;\n        _expanded = value;\n        if (_isRendered)\n        {\n            _state = _expanded ? CollapseState.Entering : CollapseState.Exiting;\n            _ = UpdateHeight();  // <-- unobserved async discard !!!\n            _updateHeight = true;\n        }\n        else if (_expanded)\n        {\n            _state = CollapseState.Entered;\n        }\n        _ = ExpandedChanged.InvokeAsync(_expanded); // <-- unobserved async discard !!!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Parameter Imperatively Using Component Reference (Anti-Pattern) - Razor/C#\nDESCRIPTION: This snippet shows a Razor component where a reference to a child CalendarComponent is used to directly assign to its parameter property from outside the component. This triggers warning BL0005 as it breaks Blazor's unidirectional parameter flow. Direct parameter assignment externally is discouraged.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: razor\nCODE:\n```\n<CalendarComponent @ref=\"@_calendar\" />\n<button @onclick=\"Update\">\n        Update\n</button>\n\n@code\n{\n    private CalendarComponent _calendarRef = null!;\n\n    private void Update()\n    {\n        _calendarRef.ShowOnlyOneCalendar = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Saved HTML Elements in bUnit Tests (C#)\nDESCRIPTION: This snippet demonstrates an incorrect approach to interacting with HTML elements in bUnit tests. Saving queried elements as variables can lead to stale references and test failures.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\nvar comp = ctx.RenderComponent<MudTextField<string>>();\n\n// wrong - this will fail:\nvar textField = comp.Find(\"input\");\ntextField.Change(\"Garfield\");\ntextField.Blur();\ncomp.FindComponent<MudTextField<string>>().Instance.Value.NotBeNullOrEmpty();\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Description in MudBlazor Component (C#)\nDESCRIPTION: Demonstrates how to add a static description field to a MudBlazor test component. This field is used to provide a description of the test that will be displayed in the test viewer.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/src/MudBlazor.UnitTests.Viewer/TestComponents/_README.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n@code {\n    public static string __description__ = \"...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a CalendarComponent with a Parameter - C#\nDESCRIPTION: Defines a Blazor component with a [Parameter] property intended for toggling display state. The property name appears to be missing a type (should likely be a bool). Serves as a context for discussing imperative vs. declarative parameter assignment.\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\npublic class CalendarComponent : ComponentBase\n{\n\t[Parameter]\n\tpublic ShowOnlyOneCalendar { get;set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to MudBlazor Releases\nDESCRIPTION: Markdown link syntax pointing to the MudBlazor GitHub releases page for detailed changelog information\nSOURCE: https://github.com/mudblazor/mudblazor/blob/dev/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Releases page](https://github.com/MudBlazor/MudBlazor/releases)\n```"
  }
]