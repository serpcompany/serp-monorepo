[
  {
    "owner": "zharta",
    "repo": "lending-protocol-v2",
    "content": "TITLE: Offer and Loan Struct Definitions in Vyper\nDESCRIPTION: Data structures defining the Offer and Loan types used in the protocol. Offers include lending terms and conditions, while Loans contain the active loan state information.\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: vyper\nCODE:\n```\nstruct Offer:\n    principal: uint256\n    interest: uint256\n    payment_token: address\n    duration: uint256\n    expiration: uint256\n    lender: address\n    collateral_contract: address\n    offer_type: OfferType\n    token_ids: uint256[]\n\nstruct Loan:\n    id: bytes32\n    amount: uint256\n    interest: uint256\n    payment_token: address\n    maturity: uint256\n    start_time: uint256\n    borrower: address\n    lender: address\n    collateral_contract: address\n    collateral_token_id: uint256\n```\n\n----------------------------------------\n\nTITLE: State Variables Structure in Vyper for P2P NFT Lending\nDESCRIPTION: Core state variables for the P2P lending contract including owner addresses, protocol fees, loan mappings, and proxy authorizations. These variables manage contract ownership, fee structures, loan states, and proxy permissions.\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: vyper\nCODE:\n```\nowner: address\nproposed_owner: address\npayment_token: address\nprotocol_wallet: address\nprotocol_upfront_fee: uint256\nprotocol_settlement_fee: uint256\nloans: HashMap[bytes32, bytes32]\noffer_count: HashMap[bytes32, uint256]\nrevoked_offers: HashMap[bytes32, bool]\nauthorized_proxies: HashMap[address, bool]\n```\n\n----------------------------------------\n\nTITLE: UV Generated Requirements File\nDESCRIPTION: Automatically generated requirements file listing Python package dependencies with their specific versions and dependency relationships. Includes development dependencies specified in pyproject.toml.\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/requirements-dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#    uv pip compile -o requirements-dev.txt --extra dev pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Development Setup Command\nDESCRIPTION: Command to set up the development environment\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake install-dev\n```\n\n----------------------------------------\n\nTITLE: Testing Commands\nDESCRIPTION: Commands for running unit tests, coverage analysis, and gas profiling\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake unit-tests\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake coverage\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake branch-coverage\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake gas\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Mock Contracts\nDESCRIPTION: Directory structure showing mock contract implementations used for testing and development environments\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncontracts/\n└── auxiliary\n    ├── CryptoPunksMarketMock.vy\n    ├── DelegationRegistryMock.vy\n    ├── ERC20.vy\n    ├── ERC721.vy\n    └── WETH9Mock.vy\n```\n\n----------------------------------------\n\nTITLE: Network Deployment Command\nDESCRIPTION: Example command for deploying to development environment\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake deploy-dev\n```\n\n----------------------------------------\n\nTITLE: UV Pip Compile Command for Requirements Generation\nDESCRIPTION: The command used to auto-generate the requirements.txt file using uv package manager\nSOURCE: https://github.com/zharta/lending-protocol-v2/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nuv pip compile -o requirements.txt pyproject.toml\n```"
  }
]