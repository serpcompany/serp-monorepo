[
  {
    "owner": "geek-cookbook",
    "repo": "premix",
    "content": "TITLE: Deploying oauth2_proxy via Docker Swarm for Non-Docker Service in YAML\nDESCRIPTION: Defines a Docker Compose stack for deploying `oauth2_proxy` in Docker Swarm. Traefik labels automatically configure routing for `ipp.example.com`. The proxy authenticates users and forwards requests to the upstream internal service specified in the command arguments (`http://192.168.1.4:4679`). Requires external network `traefik_public`, an environment file (`/var/data/config/ipp/ipp.env`), and an authenticated emails file (`/var/data/config/eaton-ipp/authenticated-emails.txt`).\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefikv2/README-traefik-with-non-swarm-backends.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.2\"\n\nservices:\n  proxy:\n    image: funkypenguin/oauth2_proxy\n    env_file: /var/data/config/ipp/ipp.env\n    networks:\n      - traefik_public\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n    deploy:\n      labels:\n        - traefik.frontend.rule=Host:ipp.example.com\n        - traefik.docker.network=traefik_public\n        - traefik.port=4180\n\n    volumes:\n      - /var/data/config/eaton-ipp/authenticated-emails.txt:/authenticated-emails.txt\n    command: |\n      -cookie-secure=false\n      -upstream=http://192.168.1.4:4679\n      -redirect-url=https://ipp.example.com\n      -http-address=http://0.0.0.0:4180\n      -email-domain=gmail.com\n      -provider=github\n      -authenticated-emails-file=/authenticated-emails.txt\n\nnetworks:\n  traefik_public:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Variable in Ansible Vault (YAML)\nDESCRIPTION: Example line showing how to define a secret variable within the encrypted `vars/vault.yml` file. Variables should typically be prefixed with `vault_` (e.g., `vault_proxmox_host_password`) for clarity and assigned their secret values. The actual structure and required variables can be referenced from `group_vars/all/01_fake_vault.yml`.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvault_proxmox_host_password: mysekritpassword\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted Ansible Vault File (Shell)\nDESCRIPTION: Uses the `ansible-vault create` command to generate a new, encrypted YAML file named `vars/vault.yml`. The `--encrypt-vault-id geek-cookbook-premix` flag tells Ansible Vault to use the password stored in the corresponding password file (`~/.ansible/vault-password-geek-cookbook-premix`). This file is intended to securely store sensitive variables (secrets) for the Ansible project and is ignored by git.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nansible-vault create --encrypt-vault-id geek-cookbook-premix vars/vault.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik File Provider for Non-Docker Service in TOML\nDESCRIPTION: Defines Traefik frontend and backend rules within the `traefik.toml` file to proxy requests for `ipp.example.com` to an internal service running at `http://192.168.1.4:4679`. Requires the `file` provider to be enabled in Traefik's main configuration and watches for file changes.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefikv2/README-traefik-with-non-swarm-backends.txt#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[file]\nwatch=true\n[frontends]\n  [frontends.ipp]\n  backend = \"ipp\"\n  pastHostHeader = true\n    [frontends.ipp.routes.1]\n    rule = \"Host:ipp.example.com\"\n\n\n[backends]\n  [backends.ipp]\n    [backends.ipp.servers.ipp1]\n    url = \"http://192.168.1.4:4679\" #local address of the service\n```\n\n----------------------------------------\n\nTITLE: Creating Ansible Vault Password File (Shell)\nDESCRIPTION: Creates a file named `vault-password-geek-cookbook-premix` in the `.ansible` directory within the user's home directory, containing the vault password (`mysecretpassword` in this example). This file is used by Ansible Vault commands (with the matching vault ID `geek-cookbook-premix`) to avoid interactively typing the password. It's crucial to store this file outside the version-controlled repository for security.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho mysecretpassword > ~/.ansible/vault-password-geek-cookbook-premix\n```\n\n----------------------------------------\n\nTITLE: Editing Encrypted Ansible Vault File (Shell)\nDESCRIPTION: Executes the `ansible-vault edit` command to securely open and modify the existing encrypted `vars/vault.yml` file. Ansible will use the configured vault password file or prompt for the password interactively to decrypt the file for editing and re-encrypt it upon saving.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nansible-vault edit vars/vault.yml\n```\n\n----------------------------------------\n\nTITLE: Including an Ansible Role in a Playbook (YAML)\nDESCRIPTION: Demonstrates how to use the documented Ansible role within a playbook, specifying hosts and passing variables as parameters. No external dependencies are referenced for this snippet, but the actual role referenced should exist and be fully implemented. The example defines one host group (servers) and references a parameter (x) passed to the role; outputs will depend on the role's logic and variable usage.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/roles/k3s-master/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- hosts: servers\\n  roles:\\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Configuring and Applying Ansible Role - YAML\nDESCRIPTION: This YAML code snippet demonstrates how to apply an Ansible role to a group of hosts within an Ansible playbook example. It includes the specification of target hosts and demonstrates passing variables (e.g., 'x: 42') to the role. Users should have Ansible installed and be familiar with structuring playbooks, and the 'username.rolename' syntax refers to the full name of the role, following Ansible Galaxy conventions. Customize 'username.rolename' and the variables as needed for your scenario.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/roles/k3s-worker/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\\n  roles:\\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Executing Ansible Deployment Playbook (Shell)\nDESCRIPTION: Runs the main deployment playbook (`deploy.yml`) using the `ansible-playbook` command. The `-i hosts` flag specifies the inventory file (`hosts`, customized from `hosts.example`) which defines the target hosts and potentially group variables. This command initiates the process of creating the cluster and deploying recipes as defined in the playbook.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i hosts deploy.yml\n```\n\n----------------------------------------\n\nTITLE: Installing/Upgrading 'wash-hands' Helm Chart (Shell)\nDESCRIPTION: This command uses Helm to install or upgrade a release named 'wash-hands' within the 'wash-hands' namespace. It targets the Helm chart located in the 'wash-hands/helm-chart/wash-hands' directory relative to the repository root. The `--install` flag ensures that if the release doesn't exist, it gets installed.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/wash-hands/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install -n wash-hands wash-hands wash-hands/helm-chart/wash-hands\n```\n\n----------------------------------------\n\nTITLE: Rendering Helm Chart Notes with Conditional Ingress URLs - Go Templating\nDESCRIPTION: This snippet uses Go templating within a Helm chart to render notes upon installation of the AutoPirate software. It conditionally lists the ingress URLs for enabled services by iterating over the \".Values.apps\" object and checking both app and ingress enablement flags. Dependencies include Helm, a properly structured values.yaml, and partial templates such as funkycore.notes.header, funkycore.notes.chartSuggestion, and funkycore.notes.footer. Inputs are Helm values and context objects; output is a formatted installation message. Limitations are that it assumes the presence of specific structure in the values and the referenced partials.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/charts/autopirate/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ include \"funkycore.notes.header\" . }}\n\nSuccess! AutoPirate has been installed into your cluster.\n\n{{ include \"funkycore.notes.chartSuggestion\" . }}\n\n{{ if .Values.ingress.enabled }}\nYou can access your services at the following links:\n{{- range $key,$value := .Values.apps -}}\n{{ if and $value.enable $value.ingress.enable }}\n{{ title $key }} - {{ $value.ingress.host }}{{ $value.ingress.path }}\n{{ end }}\n{{- end -}}\n{{ end }}\n\n{{ include \"funkycore.notes.footer\" . }}\n```\n\n----------------------------------------\n\nTITLE: Applying cert-manager CRDs using kubectl (Shell)\nDESCRIPTION: This command uses kubectl to apply the Custom Resource Definitions (CRDs) required by cert-manager version 0.13. It fetches the CRD manifest directly from the cert-manager GitHub repository. The `--validate=false` flag is used to skip validation, which might be necessary for older Kubernetes versions or specific CRD structures.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/wash-hands/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply --validate=false \\\n    -f https://raw.githubusercontent.com/jetstack/certmanager/release-0.13/deploy/manifests/00-crds.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying oauth2_proxy for Non-Docker Service via Docker Compose (YAML)\nDESCRIPTION: This Docker Compose file defines a Docker Swarm stack for deploying an `oauth2_proxy` service. This service acts as an intermediary, handling authentication (configured via environment variables and an authenticated emails file) before proxying requests to a non-Docker service (`http://192.168.1.4:4679`). Traefik labels are used for automatic discovery and routing based on the hostname `ipp.example.com`. The service requires the `traefik_public` external network.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefik/README-traefik-with-non-swarm-backends.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.2\"\n\nservices:\n  proxy:\n    image: funkypenguin/oauth2_proxy\n    env_file: /var/data/config/ipp/ipp.env\n    networks:\n      - traefik_public\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n    deploy:\n      labels:\n        - traefik.frontend.rule=Host:ipp.example.com\n        - traefik.docker.network=traefik_public\n        - traefik.port=4180\n\n    volumes:\n      - /var/data/config/eaton-ipp/authenticated-emails.txt:/authenticated-emails.txt\n    command: |\n      -cookie-secure=false\n      -upstream=http://192.168.1.4:4679\n      -redirect-url=https://ipp.example.com\n      -http-address=http://0.0.0.0:4180\n      -email-domain=gmail.com\n      -provider=github\n      -authenticated-emails-file=/authenticated-emails.txt\n\nnetworks:\n  traefik_public:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Deploying OAuth2 Proxy as a Swarm Stack behind Traefik - YAML\nDESCRIPTION: This Docker Compose YAML defines an OAuth2 proxy service (funkypenguin/oauth2_proxy) to enable OAuth2 authentication in front of a non-Docker backend service. The configuration binds to the traefik_public network, injects environment variables, mounts authentication files, and sets command-line arguments for upstream service and provider details. Traefik rules are defined via deploy labels for dynamic routing. Dependencies: Docker Swarm, existing traefik_public network, funkypenguin/oauth2_proxy image, and Traefik as an active ingress. Inputs: requests to ipp.example.com; Outputs: requests are authenticated via OAuth2 and forwarded to the internal service. Authenticated emails file and specific environment variables are referenced from mounted volumes and env files.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefikv1/README-traefik-with-non-swarm-backends.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.2\"\n\nservices:\n  proxy:\n    image: funkypenguin/oauth2_proxy\n    env_file: /var/data/config/ipp/ipp.env\n    networks:\n      - traefik_public\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n    deploy:\n      labels:\n        - traefik.frontend.rule=Host:ipp.example.com\n        - traefik.docker.network=traefik_public\n        - traefik.port=4180\n\n    volumes:\n      - /var/data/config/eaton-ipp/authenticated-emails.txt:/authenticated-emails.txt\n    command: |\n      -cookie-secure=false\n      -upstream=http://192.168.1.4:4679\n      -redirect-url=https://ipp.example.com\n      -http-address=http://0.0.0.0:4180\n      -email-domain=gmail.com\n      -provider=github\n      -authenticated-emails-file=/authenticated-emails.txt\n\nnetworks:\n  traefik_public:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Docker Swarm Stack using Docker CLI in Shell\nDESCRIPTION: Uses the `docker stack deploy` command to deploy or update a Docker Swarm stack named `ipp` using the configuration specified in the `/var/data/config/ipp.yml` file. Requires Docker Swarm to be running and the specified compose file to exist.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefikv2/README-traefik-with-non-swarm-backends.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy ipp -c /var/data/config/ipp.yml\n```\n\n----------------------------------------\n\nTITLE: Deploying Docker Swarm Stack (Shell)\nDESCRIPTION: This shell command deploys a Docker Swarm stack named 'ipp' using the configuration defined in the specified Docker Compose file (`/var/data/config/ipp.yml`). It requires Docker running in Swarm mode and access to the specified compose file.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefik/README-traefik-with-non-swarm-backends.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy ipp -c /var/data/config/ipp.yml\n```\n\n----------------------------------------\n\nTITLE: Deploying Docker Stack with Docker Compose File - Shell\nDESCRIPTION: This shell command demonstrates how to deploy the previously defined OAuth2 proxy and its associated services as a Docker Swarm stack using the provided Compose YAML file. It targets the 'ipp' stack and utilizes the configuration at /var/data/config/ipp.yml. Dependency: Docker Swarm running on the host. Input: YAML file with properly defined services; Output: active stack deployment in Docker Swarm. The stack must be deployed on a system with all referenced networks, volumes, and environment files available.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefikv1/README-traefik-with-non-swarm-backends.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy ipp -c /var/data/config/ipp.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring File Provider in Traefik (toml) for Non-Docker Service - TOML\nDESCRIPTION: This snippet provides a sample Traefik configuration using the TOML syntax to route a domain (ipp.example.com) to a backend service running on a host (external to Docker and Swarm) with IP 192.168.1.4:4679. It enables the file provider for hot reloads, defines a frontend and backend, and specifies the routing rule based on the incoming host header. Dependencies: Traefik 1.x, access to the configuration file (traefik.toml). Key parameters: 'watch' for live config reloads, 'frontends.ipp.routes.1.rule' for host-based routing, 'backends.ipp.servers.ipp1.url' for the backend service address. Input: HTTP requests to the specified FQDN; Output: proxied traffic to the backend service. The approach requires Traefik to be configured with the file provider enabled.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefikv1/README-traefik-with-non-swarm-backends.txt#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[file]\nwatch=true\n[frontends]\n  [frontends.ipp]\n  backend = \"ipp\"\n  pastHostHeader = true\n    [frontends.ipp.routes.1]\n    rule = \"Host:ipp.example.com\"\n\n\n[backends]\n  [backends.ipp]\n    [backends.ipp.servers.ipp1]\n    url = \"http://192.168.1.4:4679\" #local address of the service\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik File Provider for Non-Docker Service (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to configure Traefik's file provider to route requests for a specific domain (`ipp.example.com`) to an internal service running outside Docker at a specific IP address and port (`http://192.168.1.4:4679`). It defines a frontend with a host rule and a corresponding backend pointing to the non-containerized service URL. The `watch=true` directive enables automatic reloading of the configuration upon changes.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/traefik/README-traefik-with-non-swarm-backends.txt#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[file]\nwatch=true\n[frontends]\n  [frontends.ipp]\n  backend = \"ipp\"\n  pastHostHeader = true\n    [frontends.ipp.routes.1]\n    rule = \"Host:ipp.example.com\"\n\n\n[backends]\n  [backends.ipp]\n    [backends.ipp.servers.ipp1]\n    url = \"http://192.168.1.4:4679\" #local address of the service\n```\n\n----------------------------------------\n\nTITLE: Executing Ansible Destruction Playbook (Shell)\nDESCRIPTION: Runs the destruction playbook (`carefully_destroy.yml`) using `ansible-playbook`. The `-i hosts` flag specifies the inventory file. This command is intended to remove the VMs and destroy any data created during the deployment process. It should be used with extreme caution.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/ansible/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i hosts carefully_destroy.yml\n```\n\n----------------------------------------\n\nTITLE: Deploying Dex with Docker Stack - Shell\nDESCRIPTION: This shell snippet demonstrates how to deploy the Dex stack using Docker's 'stack deploy' command. It requires Docker with swarm mode initialized, and the proper Dex configuration ('dex.yml') at the specified location. The primary parameters are the stack name ('dex') and the configuration file path, and running this command launches the Dex service according to the defined settings. Expected input is the existence of the specified config file and appropriate permissions, while outputs will be the operational Dex Docker stack.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/dex/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker stack deploy dex -c /var/data/config/dex/dex.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Core TRTL Pool Deployments and Services (Shell)\nDESCRIPTION: These commands use kubectl to create the core Kubernetes resources (likely Deployments and Services) defined in the specified YAML files (redis.yml, wallet.yml, daemon.yml, pool.yml, pool-service.yml). These resources run the actual mining pool software components (Redis, Wallet, Daemon, Pool Frontend/Backend). The environment variables within these YAML files should be customized before creation.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f redis.yml\nkubecl create -f wallet.yml\nkubecl create -f daemon.yml\nkubecl create -f pool.yml\nkubecl create -f pool-service.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress Resource for TRTL Pool UI and API (Shell)\nDESCRIPTION: This command uses kubectl to create a Kubernetes Ingress resource defined in 'pool-ingress.yml'. This ingress rule configures Traefik (or another ingress controller) to route external HTTP traffic to the pool's web UI and API based on hostnames.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f pool-ingress.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMaps for TRTL Pool Configuration (Shell)\nDESCRIPTION: These commands first copy example configuration files and then use kubectl to create Kubernetes ConfigMaps within the 'trtl' namespace. These ConfigMaps store configuration data for the wallet, pool settings (trtl.json), email templates, and Redis. The example files (e.g., 'wallet.conf-example') must be edited with appropriate values before creating the ConfigMaps.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp wallet.conf-example wallet.conf\nkubectl create configmap -n trtl wallet-conf --from-file=wallet.conf\n\ncp trtl.json-example trtl.json\nkubectl create configmap -n trtl pool-config --from-file=trtl.json\n\nkubecl create configmap -n trtl pool-email-txt --from-file=email.txt\n\nkubecl create configmap -n trtl redis-config --from-file=redis.conf\n```\n\n----------------------------------------\n\nTITLE: Creating NodePort Service for TRTL Mining Ports (Shell)\nDESCRIPTION: This command uses kubectl to create a Kubernetes Service of type NodePort, as defined in 'pool-service-nodeport.yml'. This service exposes the mining pool's specific ports (e.g., 3333, 5555, 7777) on each node of the Kubernetes cluster, allowing miners to connect directly.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f pool-service-nodeport.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Webhook Token (Shell)\nDESCRIPTION: This sequence first copies an example secret file ('webhook_token.secret-example') to 'webhook_token.secret'. After potentially editing the new file with the actual token, it uses kubectl to create a generic Kubernetes secret named 'trtl-credentials' in the 'trtl' namespace from the file. This secret likely holds credentials for a webhook integration.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp webhook_token.secret-example webhook_token.secret\nkubectl create secret -n trtl generic trtl-credentials \\\n   --from-file=webhook_token.secret\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Volume Claims for TRTL Pool Components (Shell)\nDESCRIPTION: These commands use kubectl to create PersistentVolumeClaims (PVCs) as defined in the respective YAML files. PVCs request storage for stateful components like the daemon, pool data, Redis, and the wallet.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f daemon-persistent-volumeclaim.yml\nkubecl create -f pool-persistent-volumeclaim.yml\nkubecl create -f redis-persistent-volumeclaim.yml\nkubecl create -f wallet-persistent-volumeclaim.yml\n```\n\n----------------------------------------\n\nTITLE: Verifying TRTL Pool Kubernetes Resource Status (Shell)\nDESCRIPTION: These commands demonstrate how to use kubectl to check the status of the deployed resources (Pods, Services, Ingress) within the 'trtl' namespace. The output shows example running pods, configured services (ClusterIP and NodePort), and the ingress rule managing external access.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n[funkypenguin:~] 1 % kubectl get pods -n trtl\nNAME                      READY     STATUS             RESTARTS   AGE\ndaemon-675dcbb5b5-vk6hs   1/1       Running            0          23d\npool-566fdd57c-m8lht      5/5       Running            0          26d\nredis-7df4f65f5-dr7rs     1/1       Running            0          31d\nwallet-bd4b5977b-q8spv    1/1       Running            0          31d\n[funkypenguin:~] %\n[funkypenguin:~] % kubectl get services -n trtl\nNAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                                        AGE\ndaemon                 ClusterIP   None            <none>        11898/TCP                                      113d\npool-mining-nodeport   NodePort    10.59.254.187   <none>        3333:30333/TCP,5555:30555/TCP,7777:30777/TCP   112d\npool-ui                ClusterIP   10.59.241.6     <none>        80/TCP,8117/TCP                                167d\nredis                  ClusterIP   None            <none>        6379/TCP                                       167d\nwallet                 ClusterIP   None            <none>        8070/TCP                                       166d\n[funkypenguin:~] %\n[funkypenguin:~] % kubectl get ingress -n trtl\nNAME        HOSTS                                                                   ADDRESS   PORTS     AGE\ntrtl-pool   trtl.heigh-ho.funkypenguin.co.nz,api.trtl.heigh-ho.funkypenguin.co.nz             80        167d\n[funkypenguin:~] %\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for TRTL Pool (Shell)\nDESCRIPTION: This command uses kubectl to create a Kubernetes namespace defined in the 'namespace.yml' file. This namespace will isolate the resources for the Turtlecoin mining pool.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/turtle-pool/kubernetes/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f namespace.yml\n```\n\n----------------------------------------\n\nTITLE: Expected Output after Applying cert-manager CRDs (Shell)\nDESCRIPTION: This snippet shows the expected output after successfully executing the kubectl command to apply cert-manager CRDs. It confirms the creation of various custom resource definitions like CertificateRequests, Certificates, Challenges, ClusterIssuers, Issuers, and Orders within the Kubernetes cluster's API extensions.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/wash-hands/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply --validate=false \\\n    -f https://raw.githubusercontent.com/jetstack/certmanager/release-0.13/deploy/manifests/00-crds.yaml\ncustomresourcedefinition.apiextensions.k8s.io/certificaterequests.certmanager.io created\ncustomresourcedefinition.apiextensions.k8s.io/certificates.certmanager.io created\ncustomresourcedefinition.apiextensions.k8s.io/challenges.acme.certmanager.io created\ncustomresourcedefinition.apiextensions.k8s.io/clusterissuers.certmanager.io created\ncustomresourcedefinition.apiextensions.k8s.io/issuers.certmanager.io created\ncustomresourcedefinition.apiextensions.k8s.io/orders.acme.certmanager.io created\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Using Git - Shell\nDESCRIPTION: This shell command demonstrates how to clone the premix repository using git for configuration deployment. The command pulls the repository from GitHub into the local directory '/var/data/config'. This step is required before customizing and deploying individual recipes and presumes that the SSH key used has sufficient permission.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit pull git@github.com:funkypenguin/geek-cookbook-premix.git /var/data/config\n```\n\n----------------------------------------\n\nTITLE: Creating FileBrowser Data Directory - Bash\nDESCRIPTION: Creates the directory /var/data/runtime/filebrowser using the mkdir command as a preparatory step for storing FileBrowser data. This operation requires typical Unix command-line utilities and permissions to create folders at the specified path. The command expects the path to not already exist or will return an error unless used with -p; no inputs required other than shell access, and it outputs a new directory for subsequent configuration and use by FileBrowser.\nSOURCE: https://github.com/geek-cookbook/premix/blob/main/filebrowser/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /var/data/runtime/filebrowser\n```"
  }
]