[
  {
    "owner": "grpc-ecosystem",
    "repo": "grpc-gateway",
    "content": "TITLE: Implementing a Basic gRPC Server in Go\nDESCRIPTION: This Go code implements a simple gRPC server with a Greeter service. It creates a TCP listener on port 8080, initializes a gRPC server, registers the Greeter service implementation, and starts serving requests. The SayHello method responds with a message that combines the input name with the word 'world'.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/creating_main.go.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\n\thelloworldpb \"github.com/myuser/myrepo/proto/helloworld\"\n)\n\ntype server struct{\n\thelloworldpb.UnimplementedGreeterServer\n}\n\nfunc NewServer() *server {\n\treturn &server{}\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *helloworldpb.HelloRequest) (*helloworldpb.HelloReply, error) {\n\treturn &helloworldpb.HelloReply{Message: in.Name + \" world\"}, nil\n}\n\nfunc main() {\n\t// Create a listener on TCP port\n\tlis, err := net.Listen(\"tcp\", \":8080\")\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to listen:\", err)\n\t}\n\n\t// Create a gRPC server object\n\ts := grpc.NewServer()\n\t// Attach the Greeter service to the server\n\thelloworldpb.RegisterGreeterServer(s, &server{})\n\t// Serve gRPC Server\n\tlog.Println(\"Serving gRPC on 0.0.0.0:8080\")\n\tlog.Fatal(s.Serve(lis))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC and HTTP Gateway Server in Go\nDESCRIPTION: Complete Go server implementation that handles both gRPC and HTTP requests through gRPC-Gateway. Includes server setup, request handling, and gateway proxy configuration.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/adding_annotations.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\thelloworldpb \"github.com/myuser/myrepo/proto/helloworld\"\n)\n\ntype server struct{\n\thelloworldpb.UnimplementedGreeterServer\n}\n\nfunc NewServer() *server {\n\treturn &server{}\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *helloworldpb.HelloRequest) (*helloworldpb.HelloReply, error) {\n\treturn &helloworldpb.HelloReply{Message: in.Name + \" world\"}, nil\n}\n\nfunc main() {\n\t// Create a listener on TCP port\n\tlis, err := net.Listen(\"tcp\", \":8080\")\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to listen:\", err)\n\t}\n\n\t// Create a gRPC server object\n\ts := grpc.NewServer()\n\t// Attach the Greeter service to the server\n\thelloworldpb.RegisterGreeterServer(s, &server{})\n\t// Serve gRPC server\n\tlog.Println(\"Serving gRPC on 0.0.0.0:8080\")\n\tgo func() {\n\t\tlog.Fatalln(s.Serve(lis))\n\t}()\n\n\t// Create a client connection to the gRPC server we just started\n\t// This is where the gRPC-Gateway proxies the requests\n\tconn, err := grpc.NewClient(\n\t\t\"0.0.0.0:8080\",\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to dial server:\", err)\n\t}\n\n\tgwmux := runtime.NewServeMux()\n\t// Register Greeter\n\terr = helloworldpb.RegisterGreeterHandler(context.Background(), gwmux, conn)\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to register gateway:\", err)\n\t}\n\n\tgwServer := &http.Server{\n\t\tAddr:    \":8090\",\n\t\tHandler: gwmux,\n\t}\n\n\tlog.Println(\"Serving gRPC-Gateway on http://0.0.0.0:8090\")\n\tlog.Fatalln(gwServer.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: This code snippet defines a simple gRPC service called 'Greeter' using Protocol Buffers. It includes a 'SayHello' RPC method that takes a HelloRequest message and returns a HelloReply message. The service is defined in the 'helloworld' package using proto3 syntax.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/simple_hello_world.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\n// The greeting service definition\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Reverse-Proxy Server Implementation in Go\nDESCRIPTION: Go code for implementing an HTTP reverse-proxy server that forwards HTTP requests to a gRPC server. It uses the runtime package from grpc-gateway to register handlers and start an HTTP server on port 8081.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"flag\"\n  \"net/http\"\n\n  \"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/insecure\"\n  \"google.golang.org/grpc/grpclog\"\n\n  gw \"github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service\"  // Update\n)\n\nvar (\n  // command-line options:\n  // gRPC server endpoint\n  grpcServerEndpoint = flag.String(\"grpc-server-endpoint\",  \"localhost:9090\", \"gRPC server endpoint\")\n)\n\nfunc run() error {\n  ctx := context.Background()\n  ctx, cancel := context.WithCancel(ctx)\n  defer cancel()\n\n  // Register gRPC server endpoint\n  // Note: Make sure the gRPC server is running properly and accessible\n  mux := runtime.NewServeMux()\n  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}\n  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)\n  if err != nil {\n    return err\n  }\n\n  // Start HTTP server (and proxy calls to gRPC server endpoint)\n  return http.ListenAndServe(\":8081\", mux)\n}\n\nfunc main() {\n  flag.Parse()\n\n  if err := run(); err != nil {\n    grpclog.Fatal(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service in Protocol Buffers\nDESCRIPTION: Example protocol buffer definition for a simple echo service using proto3 syntax.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage your.service.v1;\noption go_package = \"github.com/yourorg/yourprotos/gen/go/your/service/v1\";\n\nmessage StringMessage {\n  string value = 1;\n}\n\nservice YourService {\n  rpc Echo(StringMessage) returns (StringMessage) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Proto Service with gRPC-Gateway Annotations\nDESCRIPTION: Proto file definition for a Greeter service with gRPC-Gateway annotations that map HTTP POST endpoints to gRPC methods. Includes message definitions and HTTP routing configuration.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/adding_annotations.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\nimport \"google/api/annotations.proto\";\n\n// Here is the overall greeting service definition where we define all our endpoints\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {\n    option (google.api.http) = {\n      post: \"/v1/example/echo\"\n      body: \"*\"\n    };\n  }\n}\n\n// The request message containing the user's name\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Routes in gRPC-Gateway with Go\nDESCRIPTION: This code snippet demonstrates how to create a server that combines gRPC-Gateway generated routes with custom HTTP routes. It includes setting up a mux, registering generated handlers, adding a custom route, and starting the HTTP server.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/inject_router.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\n\tpb \"github.com/grpc-ecosystem/grpc-gateway/v2/examples/internal/helloworld\"\n\t\"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n)\n\nfunc main() {\n\tctx := context.TODO()\n\tmux := runtime.NewServeMux()\n\t// Register generated routes to mux\n\terr := pb.RegisterGreeterHandlerServer(ctx, mux, &GreeterServer{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Register custom route for  GET /hello/{name}\n\terr = mux.HandlePath(\"GET\", \"/hello/{name}\", func(w http.ResponseWriter, r *http.Request, pathParams map[string]string) {\n\t\tw.Write([]byte(\"hello \" + pathParams[\"name\"]))\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\thttp.ListenAndServe(\":8080\", mux)\n}\n\n// GreeterServer is the server API for Greeter service.\ntype GreeterServer struct {\n\n}\n\n// SayHello implement to say hello\nfunc (h *GreeterServer) SayHello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error) {\n\treturn &pb.HelloReply{\n\t\tMessage: \"hello \" + req.Name,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic gRPC Service Definition in Protocol Buffers\nDESCRIPTION: Defines a simple gRPC service with an Echo method that accepts and returns a StringMessage.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/grpc_api_configuration.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage your.service.v1;\noption go_package = \"github.com/yourorg/yourprotos/gen/go/your/service/v1\";\nmessage StringMessage {\n  string value = 1;\n}\n\nservice YourService {\n  rpc Echo(StringMessage) returns (StringMessage) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpBody Service in Go\nDESCRIPTION: Go implementation of the HttpBody service showing how to return custom content types and data. Includes examples of both single response and streaming endpoints with HTML content.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/httpbody_messages.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*HttpBodyExampleService) Helloworld(ctx context.Context, in *empty.Empty) (*httpbody.HttpBody, error) {\n\treturn &httpbody.HttpBody{\n\t\tContentType: \"text/html\",\n\t\tData:        []byte(\"Hello World\"),\n\t}, nil\n}\n\nfunc (HttpBodyExampleService) Download(_ *empty.Empty, stream HttpBodyExampleService_DownloadServer) error {\n\tmsgs := []*httpbody.HttpBody{\n\t\t{\n\t\t\tContentType: \"text/html\",\n\t\t\tData:        []byte(\"Hello 1\"),\n\t\t},\n\t\t{\n\t\t\tContentType: \"text/html\",\n\t\t\tData:        []byte(\"Hello 2\"),\n\t\t},\n\t}\n\n\tfor _, msg := range msgs {\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Codes in gRPC-Gateway\nDESCRIPTION: Implements a custom status setting function that modifies the HTTP status code based on the response message type.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc setStatus(ctx context.Context, w http.ResponseWriter, m protoreflect.ProtoMessage) error {\n  switch v := m.(type) {\n  case *pb.CreateUserResponse:\n    w.WriteHeader(http.StatusCreated)\n  }\n  // keep default behavior\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Query Parameter Parser with gRPC-Gateway ServeMux\nDESCRIPTION: Code example showing how to integrate the custom query parameter parser into the gRPC-Gateway setup by using the runtime.SetQueryParameterParser option when creating a new ServeMux.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/using_custom_query_parser.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\n\t\"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\n\t\"your_module/path/customparser\"\n)\n\n// create a new ServeMux with custom parser and other runtime options as needed\nfunc createGRPCGatewayMux() *runtime.ServeMux {\n\t// whatever custom code you may need before you create the mux...\n\t\n\treturn runtime.NewServeMux(\n\t\t// Custom query parameter parser\n\t\truntime.SetQueryParameterParser(&customparser.CustomQueryParameterParser{}),\n\t\t\n\t\t// other runtime options you may need...\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Response Structure in gRPC-Gateway\nDESCRIPTION: Implements a response envelope function that transforms specific response messages into a custom structure before sending to the client.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc responseEnvelope(_ context.Context, response proto.Message) (interface{}, error) {\n  switch v := response.(type) {\n  case *pb.CreateUserResponse:\n    // wrap the response in a custom structure\n    return map[string]any{\n      \"success\": true,\n      \"data\":    response,\n    }, nil\n  }\n  return response, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Buf Generator Configuration with Parameter Options\nDESCRIPTION: YAML configuration for buf generator showing how to pass parameter options to the gRPC-Gateway plugin, including configuration for paths, API configuration, and standalone mode.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nplugins:\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - grpc_api_configuration=path/to/config.yaml\n      - standalone=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Body Logging Middleware in Go\nDESCRIPTION: Custom HTTP middleware implementation that logs request bodies when response status codes are not 200. It includes a custom response writer that tracks status codes and a handler that buffers and logs request bodies.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/logging.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype logResponseWriter struct {\n\thttp.ResponseWriter\n\tstatusCode int\n}\n\nfunc (rsp *logResponseWriter) WriteHeader(code int) {\n\trsp.statusCode = code\n\trsp.ResponseWriter.WriteHeader(code)\n}\n\n// Unwrap returns the original http.ResponseWriter. This is necessary\n// to expose Flush() and Push() on the underlying response writer.\nfunc (rsp *logResponseWriter) Unwrap() http.ResponseWriter {\n\treturn rsp.ResponseWriter\n}\n\nfunc newLogResponseWriter(w http.ResponseWriter) *logResponseWriter {\n\treturn &logResponseWriter{w, http.StatusOK}\n}\n\n// logRequestBody logs the request body when the response status code is not 200.\nfunc logRequestBody(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlw := newLogResponseWriter(w)\n\n\t\t// Note that buffering the entire request body could consume a lot of memory.\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, fmt.Sprintf(\"failed to read body: %v\", err), http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tclonedR := r.Clone(r.Context())\n\t\tclonedR.Body = io.NopCloser(bytes.NewReader(body))\n\n\t\th.ServeHTTP(lw, clonedR)\n\n\t\tif lw.statusCode != http.StatusOK {\n\t\t\tgrpclog.Errorf(\"http error %+v request body %+v\", lw.statusCode, string(body))\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Path Unescaping in gRPC-Gateway\nDESCRIPTION: Go code showing how to configure a ServeMux to unescape all characters in URL paths, allowing for percent-encoded slash characters.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithUnescapingMode(runtime.UnescapingModeAllCharacters),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pretty-Print JSON in gRPC Gateway\nDESCRIPTION: Demonstrates how to add support for pretty-printed JSON responses when '?pretty' query parameter is used.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithMarshalerOption(\"application/json+pretty\", &runtime.JSONPb{\n\t\tMarshalOptions: protojson.MarshalOptions{\n\t\t\tIndent: \"  \",\n\t\t\tMultiline: true, // Optional, implied by presence of \"Indent\".\n\t\t},\n\t\tUnmarshalOptions: protojson.UnmarshalOptions{\n\t\t\tDiscardUnknown: true,\n\t\t},\n\t}),\n)\nprettier := func(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// checking Values as map[string][]string also catches ?pretty and ?pretty=\n\t\t// r.URL.Query().Get(\"pretty\") would not.\n\t\tif _, ok := r.URL.Query()[\"pretty\"]; ok {\n\t\t\tr.Header.Set(\"Accept\", \"application/json+pretty\")\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t})\n}\nhttp.ListenAndServe(\":8080\", prettier(mux))\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Service with Hidden FieldMask\nDESCRIPTION: This Protobuf snippet defines a gRPC service method 'UpdateV2' with HTTP bindings for PUT and PATCH operations. The PATCH binding hides the FieldMask from the REST request, following Google API design guidelines.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/patch_feature.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc UpdateV2(UpdateV2Request) returns (google.protobuf.Empty) {\n option (google.api.http) = {\n   put: \"/v2/example/a_bit_of_everything/{abe.uuid}\"\n   body: \"abe\"\n   additional_bindings {\n     patch: \"/v2/example/a_bit_of_everything/{abe.uuid}\"\n     body: \"abe\"\n   }\n };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Header to gRPC Metadata Mapping\nDESCRIPTION: Demonstrates how to implement a custom header matcher function to map HTTP headers to gRPC metadata.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc CustomMatcher(key string) (string, bool) {\n\tswitch key {\n\tcase \"X-Custom-Header1\":\n\t\treturn key, true\n\tcase \"X-Custom-Header2\":\n\t\treturn \"custom-header2\", true\n\tdefault:\n\t\treturn key, false\n\t}\n}\n\nmux := runtime.NewServeMux(\n\truntime.WithIncomingHeaderMatcher(CustomMatcher),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Annotations to gRPC Service Proto Definition\nDESCRIPTION: This diff snippet shows how to add the google.api.http annotation to a protobuf service definition to expose a gRPC service as a RESTful API endpoint. It imports the required annotations.proto file and configures an HTTP POST endpoint for the Echo method.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n syntax = \"proto3\";\n package your.service.v1;\n option go_package = \"github.com/yourorg/yourprotos/gen/go/your/service/v1\";\n+\n+import \"google/api/annotations.proto\";\n+\n message StringMessage {\n   string value = 1;\n }\n\n service YourService {\n-  rpc Echo(StringMessage) returns (StringMessage) {}\n+  rpc Echo(StringMessage) returns (StringMessage) {\n+    option (google.api.http) = {\n+      post: \"/v1/example/echo\"\n+      body: \"*\"\n+    };\n+  }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Error Handler in gRPC-Gateway\nDESCRIPTION: Go code showing how to configure a ServeMux with a custom stream error handler for streaming responses.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithStreamErrorHandler(handleStreamError),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Watch Method for gRPC Health Check in Go\nDESCRIPTION: Implementation of the Watch method required for the gRPC Health Checking Protocol. This example shows how to register the method but return an Unimplemented error if not needed.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/health_check.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *serviceServer) Watch(in *health.HealthCheckRequest, _ health.Health_WatchServer) error {\n    // Example of how to register both methods but only implement the Check method.\n\treturn status.Error(codes.Unimplemented, \"unimplemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateV2Request Message in Protobuf\nDESCRIPTION: This snippet defines the UpdateV2Request message structure in Protobuf, which includes the resource to be updated (ABitOfEverything) and a FieldMask for specifying which fields to update.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/patch_feature.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage UpdateV2Request {\n ABitOfEverything abe = 1;\n google.protobuf.FieldMask update_mask = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Query Parameter Parser in Go for gRPC-Gateway\nDESCRIPTION: Custom implementation of QueryParameterParser interface that handles nested message fields by directly mapping simple query parameters (like 'limit') to fields in nested messages (like 'pagination.limit').\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/using_custom_query_parser.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage customparser\n\nimport (\n\t\"net/url\"\n\t\"strconv\"\n\n\t\"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n\t\"github.com/grpc-ecosystem/grpc-gateway/v2/utilities\"\n\t\"google.golang.org/protobuf/proto\"\n\n\tyour_service_v1 \"path/to/your/service/v1\"\n)\n\n// CustomQueryParameterParser parses query parameters into the appropriate gRPC message fields.\ntype CustomQueryParameterParser struct{}\n\n// Parse parses query parameters and populates the appropriate fields in the gRPC request message.\nfunc (p *CustomQueryParameterParser) Parse(target proto.Message, values url.Values, filter *utilities.DoubleArray) error {\n\tswitch req := target.(type) {\n\t// Different messages/requests can have different parsers, of course\n\tcase *your_service_v1.ListStuffRequest:\n\t\treturn populateListStuffParams(values, req)\n\t}\n\t\n\treturn (runtime.DefaultQueryParser{}).Parse(target, values, filter)\n}\n\n// populateListStuffParams populates the ListStuffRequest with query parameters.\nfunc populateListStuffParams(values url.Values, r *your_service_v1.ListStuffRequest) error {\n\tpageOptions := &your_service_v1.PageOptions{}\n\t\n\tif limit := values.Get(\"limit\"); limit != \"\" {\n\t\tif parsedLimit, err := strconv.Atoi(limit); err == nil {\n\t\t\tpageOptions.Limit = int32(parsedLimit)\n\t\t}\n\t}\n\tif page := values.Get(\"page\"); page != \"\" {\n\t\tif parsedPage, err := strconv.Atoi(page); err == nil {\n\t\t\tpageOptions.Page = int32(parsedPage)\n\t\t}\n\t}\n\n\tr.Pagination = pageOptions\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stream Error Handler in gRPC-Gateway\nDESCRIPTION: Implementation of a custom stream error handler that transforms errors for streaming responses, providing sanitized error messages to clients.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// handleStreamError overrides default behavior for computing an error\n// message for a server stream.\n//\n// It uses a default \"502 Bad Gateway\" HTTP code, only emits \"safe\"\n// messages and does not set the details field (so it will\n// be omitted from the resulting JSON object that is sent to client).\nfunc handleStreamError(ctx context.Context, err error) *status.Status {\n\tcode := codes.Internal\n\tmsg := \"unexpected error\"\n\tif s, ok := status.FromError(err); ok {\n\t\tcode = s.Code()\n\t\t// default message, based on the gRPC status\n\t\tmsg = s.Message()\n\t\t// see if error details include \"safe\" message to send\n\t\t// to external callers\n\t\tfor _, msg := range s.Details() {\n\t\t\tif safe, ok := msg.(*SafeMessage); ok {\n\t\t\t\tmsg = safe.Text\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn status.Errorf(code, msg)\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTracing Middleware Implementation\nDESCRIPTION: Implementation of OpenTracing middleware for span propagation through the gateway.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/opentracing/opentracing-go\"\n\t\"github.com/opentracing/opentracing-go/ext\"\n)\n\nvar grpcGatewayTag = opentracing.Tag{Key: string(ext.Component), Value: \"grpc-gateway\"}\n\nfunc tracingWrapper(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tparentSpanContext, err := opentracing.GlobalTracer().Extract(\n\t\t\topentracing.HTTPHeaders,\n\t\t\topentracing.HTTPHeadersCarrier(r.Header))\n\t\tif err == nil || err == opentracing.ErrSpanContextNotFound {\n\t\t\tserverSpan := opentracing.GlobalTracer().StartSpan(\n\t\t\t\t\"ServeHTTP\",\n\t\t\t\t// this is magical, it attaches the new span to the parent parentSpanContext, and creates an unparented one if empty.\n\t\t\t\text.RPCServerOption(parentSpanContext),\n\t\t\t\tgrpcGatewayTag,\n\t\t\t)\n\t\t\tr = r.WithContext(opentracing.ContextWithSpan(r.Context(), serverSpan))\n\t\t\tdefer serverSpan.Finish()\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Filter for HTTP Headers in gRPC Gateway\nDESCRIPTION: Shows how to implement a custom filter function to set HTTP response headers based on the gRPC response message.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc myFilter(ctx context.Context, w http.ResponseWriter, resp proto.Message) error {\n\tt, ok := resp.(*externalpb.Tokenizer)\n\tif ok {\n\t\tw.Header().Set(\"X-My-Tracking-Token\", t.Token)\n\t\tt.Token = \"\"\n\t}\n\treturn nil\n}\n\nmux := runtime.NewServeMux(\n\truntime.WithForwardResponseOption(myFilter),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Marshaler in Go\nDESCRIPTION: Demonstrates how to register a custom MessagePack marshaler for gRPC Gateway using WithMarshalerOption.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar m your.MsgPackMarshaler\nmux := runtime.NewServeMux(\n\truntime.WithMarshalerOption(\"application/x-msgpack\", m),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Service with Exposed FieldMask\nDESCRIPTION: This Protobuf snippet defines a gRPC service method 'UpdateV2' with an HTTP PATCH binding that exposes the FieldMask in the REST request. The entire request message is included in the body.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/patch_feature.md#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc UpdateV2(UpdateV2Request) returns (google.protobuf.Empty) {\n option (google.api.http) = {\n   patch: \"/v2a/example/a_bit_of_everything/{abe.uuid}\"\n   body: \"*\"\n };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Unmarshaling per Content-Type in gRPC Gateway\nDESCRIPTION: Shows how to configure different unmarshaling options for specific Content-Types in gRPC Gateway.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithMarshalerOption(\"application/json+strict\", &runtime.JSONPb{\n\t\tUnmarshalOptions: &protojson.UnmarshalOptions{\n\t\t\tDiscardUnknown: false, // explicit \"false\", &protojson.UnmarshalOptions{} would have the same effect\n\t\t},\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Method-Level Tracing\nDESCRIPTION: Example of adding tracing to specific service methods.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *service) Name(ctx context.Context, req *pb.Request) (*pb.Response, error) {\n    // Here we add the span ourselves.\n    ctx, span := trace.StartSpan(ctx, \"name.to.use.in.trace\", trace.\n    // Select a sampler that fits your implementation.\n    WithSampler(trace.AlwaysSample()))\n    defer span.End()\n    /// Other stuff goes here.\n}\n```\n\n----------------------------------------\n\nTITLE: Buf Generator Configuration with Remote Plugins\nDESCRIPTION: YAML configuration for buf generator that uses remote plugins instead of local installations. It specifies versioned plugins for Go, gRPC, gRPC-Gateway, and OpenAPI generation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nplugins:\n  - remote: buf.build/protocolbuffers/go:v1.31.0\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - remote: buf.build/grpc/go:v1.3.0\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - remote: buf.build/grpc-ecosystem/gateway:v2.16.2\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - remote: buf.build/grpc-ecosystem/openapiv2:v2.16.2\n    out: gen/openapiv2\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary File Upload Handler\nDESCRIPTION: Implementation of the handler function that processes the binary file upload request, including form parsing and file extraction\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/binary_file_uploads.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc handleBinaryFileUpload(w http.ResponseWriter, r *http.Request, params map[string]string) {\n\terr := r.ParseForm()\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to parse form: %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tf, header, err := r.FormFile(\"attachment\")\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"failed to get file 'attachment': %s\", err.Error()), http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer f.Close()\n\n\t//\n\t// Now do something with the io.Reader in `f`, i.e. read it into a buffer or stream it to a gRPC client side stream.\n\t// Also `header` will contain the filename, size etc of the original file.\n\t//\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with HttpBody Response\nDESCRIPTION: Protobuf service definition showing how to configure endpoints that return HttpBody responses, including both single and streaming responses. Uses google.api.httpbody.proto for custom content type handling.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/httpbody_messages.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"google/api/httpbody.proto\";\nimport \"google/api/annotations.proto\";\nimport \"google/protobuf/empty.proto\";\n\nservice HttpBodyExampleService {\n\trpc HelloWorld(google.protobuf.Empty) returns (google.api.HttpBody) {\n\t\toption (google.api.http) = {\n\t\t\tget: \"/helloworld\"\n\t\t};\n\t}\n\trpc Download(google.protobuf.Empty) returns (stream google.api.HttpBody) {\n\t\toption (google.api.http) = {\n\t\t\tget: \"/download\"\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling HTTP Status Codes in gRPC Gateway\nDESCRIPTION: Demonstrates how to set custom HTTP status codes for gRPC responses using metadata and a response modifier function.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n_ = grpc.SetHeader(ctx, metadata.Pairs(\"x-http-code\", \"401\"))\n\nfunc httpResponseModifier(ctx context.Context, w http.ResponseWriter, p proto.Message) error {\n\tmd, ok := runtime.ServerMetadataFromContext(ctx)\n\tif !ok {\n\t\treturn nil\n\t}\n\n\t// set http status code\n\tif vals := md.HeaderMD.Get(\"x-http-code\"); len(vals) > 0 {\n\t\tcode, err := strconv.Atoi(vals[0])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// delete the headers to not expose any grpc-metadata in http response\n\t\tdelete(md.HeaderMD, \"x-http-code\")\n\t\tdelete(w.Header(), \"Grpc-Metadata-X-Http-Code\")\n\t\tw.WriteHeader(code)\n\t}\n\n\treturn nil\n}\n\ngwMux := runtime.NewServeMux(\n\truntime.WithForwardResponseOption(httpResponseModifier),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Path Pattern in Protocol Buffers\nDESCRIPTION: Proto definition for a LoginService with HTTP path annotation that maps the gRPC service to a REST endpoint. Includes service definition with google.api.http annotation for POST method.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/annotated_context.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption go_package = \"github.com/grpc-ecosystem/grpc-gateway/v2/examples/internal/proto/examplepb\";\npackage grpc.gateway.examples.internal.proto.examplepb;\n\nimport \"google/api/annotations.proto\";\n\nservice LoginService {\n  rpc Login (LoginRequest) returns (LoginReply) {\n    option (google.api.http) = {\n        post: \"/v1/example/login\"\n        body: \"*\"\n    };\n  }\n}\n\nmessage LoginRequest {}\n\nmessage LoginReply {}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS X-ray Exporter\nDESCRIPTION: Setup and registration of AWS X-ray exporter for tracing in gRPC server.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nxrayExporter, err := xray.NewExporter(\n    xray.WithVersion(\"latest\"),\n    // Add your AWS region.\n    xray.WithRegion(\"ap-southeast-1\"),\n)\nif err != nil {\n    // Handle any error.\n}\n// Do not forget to call Flush() before the application terminates.\ndefer xrayExporter.Flush()\n\n// Register the trace exporter.\ntrace.RegisterExporter(xrayExporter)\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Headers in gRPC Server\nDESCRIPTION: Shows how to access custom HTTP headers that have been mapped to gRPC metadata on the server side.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nuserID := \"\"\nif md, ok := metadata.FromIncomingContext(ctx); ok {\n\tif uID, ok := md[\"x-user-id\"]; ok {\n\t\tuserID = strings.Join(uID, \",\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC-Gateway ServeMux with Custom Response Options\nDESCRIPTION: Go code showing how to create a new ServeMux with custom forward response options for modifying response status and structure.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n  runtime.WithForwardResponseOption(setStatus),\n  runtime.WithForwardResponseRewriter(responseEnvelope),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Proto Names in JSON for gRPC Gateway\nDESCRIPTION: Shows how to configure gRPC Gateway to use exact proto field names in JSON output instead of camelCase.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithMarshalerOption(runtime.MIMEWildcard, &runtime.JSONPb{\n\t\tMarshalOptions: protojson.MarshalOptions{\n\t\t\tUseProtoNames: true,\n\t\t},\n\t\tUnmarshalOptions: protojson.UnmarshalOptions{\n\t\t\tDiscardUnknown: true,\n\t\t},\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Client Tracing Handler\nDESCRIPTION: Implementation of client-side tracing handler for gRPC calls.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconn, err := grpc.NewClient(\n    // Other options goes here.\n    // Add ocgrpc.ClientHandler for tracing the grpc client calls.\n    grpc.WithStatsHandler(&ocgrpc.ClientHandler{}),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Parameter Unescaping Mode in gRPC-Gateway\nDESCRIPTION: Go code showing how to configure a ServeMux with a specific unescaping mode for URL path parameters, preserving reserved characters.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithUnescapingMode(runtime.UnescapingModeAllExceptReserved),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Metadata for HTTP Response Headers\nDESCRIPTION: Demonstrates how to set gRPC metadata that will be mapped to HTTP response headers.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nif appendCustomHeader {\n\tgrpc.SendHeader(ctx, metadata.New(map[string]string{\n\t\t\"x-custom-header1\": \"value\",\n\t}))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Routing Error Handler in gRPC-Gateway\nDESCRIPTION: Go code showing how to create a ServeMux with a custom routing error handler for better HTTP error handling.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithRoutingErrorHandler(handleRoutingError),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Routing Error Handler in gRPC-Gateway\nDESCRIPTION: Custom routing error handler implementation that preserves HTTP status code 405 (Method Not Allowed) instead of mapping it to the gRPC UNIMPLEMENTED status.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc handleRoutingError(ctx context.Context, mux *runtime.ServeMux, marshaler runtime.Marshaler, w http.ResponseWriter, r *http.Request, httpStatus int) {\n\tif httpStatus != http.StatusMethodNotAllowed {\n\t\truntime.DefaultRoutingErrorHandler(ctx, mux, marshaler, w, r, httpStatus)\n\t\treturn\n\t}\n\n\t// Use HTTPStatusError to customize the DefaultHTTPErrorHandler status code\n\terr := &runtime.HTTPStatusError{\n\t\tHTTPStatus: httpStatus,\n\t\tErr:        status.Error(codes.Unimplemented, http.StatusText(httpStatus)),\n\t}\n\n\truntime.DefaultHTTPErrorHandler(ctx, mux, marshaler, w, r, err)\n}\n```\n\n----------------------------------------\n\nTITLE: Buf Generator Configuration with OpenAPI Definition Generation\nDESCRIPTION: YAML configuration for buf generator that includes the protoc-gen-openapiv2 plugin for generating OpenAPI definitions. It also enables the generate_unbound_methods option for the gRPC-Gateway plugin.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - generate_unbound_methods=true\n  - local: protoc-gen-openapiv2\n    out: gen/go\n```\n\n----------------------------------------\n\nTITLE: Setting Global Trace Configuration\nDESCRIPTION: Configuration for global tracing settings with always-on sampling.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Always trace in this example.\n// In production this can be set to a trace.ProbabilitySampler.\ntrace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})\n```\n\n----------------------------------------\n\nTITLE: Executing PATCH Request with Exposed FieldMask\nDESCRIPTION: This cURL command shows how to perform a PATCH request with an exposed FieldMask. It updates the 'singleNested' field of the resource, specifying the update mask explicitly in the request body.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/patch_feature.md#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  --data '{\"abe\":{\"singleNested\":{\"amount\":457},\"stringValue\":\"some value that will not get updated because not in the field mask\"},\"updateMask\":\"singleNested\"}}' \\\n  -X PATCH \\\n  http://address:port/v2a/example/a_bit_of_everything/1\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Mux with OpenCensus\nDESCRIPTION: Integration of OpenCensus HTTP handler with gateway multiplexer.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngwmux := runtime.NewServeMux()\n\nopenCensusHandler := &ochttp.Handler{\n\t\tHandler: gwmux,\n}\n\ngwServer := &http.Server{\n    Addr: \"0.0.0.0:10000\",\n    Handler: openCensusHandler,\n    }),\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PATCH Request with Hidden FieldMask\nDESCRIPTION: This cURL command demonstrates how to perform a PATCH request with a hidden FieldMask. It updates only the 'stringValue' field of the resource, leaving other fields unchanged.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/patch_feature.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n  --data '{\"stringValue\": \"strprefix/foo\"}' \\\n  -X PATCH \\\n  http://address:port/v2/example/a_bit_of_everything/1\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC-Gateway and Protocol Buffer Tools with Go\nDESCRIPTION: Instructions for installing the necessary gRPC-Gateway and Protocol Buffer compiler plugins using Go's install command. These tools are required for generating code that enables REST-to-gRPC translation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/introduction.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest\n$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\n$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Output with Proto Comments in Protobuf\nDESCRIPTION: Demonstrates how to add comments in Protocol Buffer definitions that will be translated into OpenAPI comments. It also shows how to use the openapiv2_field option to add a description to a field.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MyMessage {\n  // This comment will end up directly in your Open API definition\n  string uuid = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: \"The UUID field.\"}];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffer Response Message in gRPC-Gateway\nDESCRIPTION: Protocol buffer definition for a simple CreateUserResponse message containing a name field.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_10\n\nLANGUAGE: proto\nCODE:\n```\nmessage CreateUserResponse {\n  string name = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service with OpenTracing Interceptor\nDESCRIPTION: Configuration for registering services with OpenTracing interceptor integration.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"google.golang.org/grpc\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\"\n)\n\nopts := []grpc.DialOption{\n\tgrpc.WithUnaryInterceptor(\n\t\tgrpc_opentracing.UnaryClientInterceptor(\n\t\t\tgrpc_opentracing.WithTracer(opentracing.GlobalTracer()),\n\t\t),\n\t),\n}\nif err := pb.RegisterMyServiceHandlerFromEndpoint(ctx, mux, serviceEndpoint, opts); err != nil {\n\tlog.Fatalf(\"could not register HTTP service: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Buf Plugins for Go and gRPC Stub Generation\nDESCRIPTION: This YAML configuration specifies the plugins and options for generating Go types and gRPC service definitions. It uses the 'go' and 'go-grpc' plugins, outputting files relative to the 'proto' folder with source-relative paths.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/generating_stubs/using_buf.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nplugins:\n  - plugin: go\n    out: proto\n    opt: paths=source_relative\n  - plugin: go-grpc\n    out: proto\n    opt: paths=source_relative\n```\n\n----------------------------------------\n\nTITLE: Protobuf Service with Custom Response Definitions\nDESCRIPTION: Example of a protobuf service that defines custom response codes using the openapiv2_operation option, specifying a 201 Created response instead of the default 200 OK.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloproto.v1;\n\nimport \"google/api/annotations.proto\";\nimport \"protoc-gen-openapiv2/options/annotations.proto\";\n\noption go_package = \"helloproto/v1;helloproto\";\n\nservice EchoService {\n  rpc Hello(HelloReq) returns (HelloResp) {\n    option (google.api.http) = {get: \"/api/hello\"};\n    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {\n      responses: {\n        key: \"201\",\n        value: {\n          description: \"Created\";\n          schema: {\n            json_schema: {ref: \".helloproto.v1.HelloResp\"}\n          }\n        }\n      };\n    };\n  }\n}\n\nmessage HelloReq {\n  string name = 1;\n}\n\nmessage HelloResp {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Output for Enums in Protobuf\nDESCRIPTION: Demonstrates how to customize OpenAPI output for enums in Protocol Buffers. It includes examples of setting description, title, extensions, external_docs, and example.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// NumericEnum is one or zero.\nenum NumericEnum {\n  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_enum) = {\n    description: \"NumericEnum is one or zero.\"\n    title: \"NumericEnum\"\n    extensions: {\n      key: \"x-a-bit-of-everything-foo\"\n      value {\n        string_value: \"bar\"\n      }\n    }\n    external_docs: {\n      url: \"https://github.com/grpc-ecosystem/grpc-gateway\"\n      description: \"Find out more about ABitOfEverything\"\n    }\n    example: \"\\\"ZERO\\\"\"\n  };\n  // ZERO means 0\n  ZERO = 0;\n  // ONE means 1\n  ONE = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML with Custom HTTP Headers\nDESCRIPTION: The resulting OpenAPI YAML output showing custom HTTP header parameters defined in the parameters section, including their types, descriptions, and required status.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: \"2.0\"\ninfo:\n  title: helloproto/v1/hello.proto\n  version: version not set\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /api/hello:\n    get:\n      operationId: Hello\n      responses:\n        \"200\":\n          description: A successful response.\n          schema:\n            $ref: \"#/definitions/helloproto.v1.HelloResp\"\n      parameters:\n        - name: name\n          in: query\n          required: false\n          type: string\n        - name: X-Foo\n          description: Foo Header\n          in: header\n          required: true\n          type: string\n        - name: X-Bar\n          description: Bar Header\n          in: header\n          required: false\n          type: number\ndefinitions:\n  helloproto.v1.HelloResp:\n    type: object\n    properties:\n      message:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Path Parameter Pattern in Protobuf\nDESCRIPTION: This example demonstrates a gRPC service definition with a path parameter that contains sub-path segments, using the pattern 'publishers/*/books/*' in the HTTP option annotation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc GetBook(GetBookRequest) returns (Book) {\n  option (google.api.http) = {\n    get: \"/v1/{name=publishers/*/books/*}\"\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Buf for gRPC-Gateway Generation\nDESCRIPTION: Buf configuration files for generating gRPC and gRPC-Gateway code, including plugin configuration and dependency management.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/adding_annotations.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nplugins:\n  - plugin: go\n    out: proto\n    opt: paths=source_relative\n  - plugin: go-grpc\n    out: proto\n    opt: paths=source_relative,require_unimplemented_servers=false\n  - plugin: grpc-gateway\n    out: proto\n    opt: paths=source_relative\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nname: buf.build/myuser/myrepo\ndeps:\n  - buf.build/googleapis/googleapis\n```\n\n----------------------------------------\n\nTITLE: Using Google API Field Behavior in Protobuf\nDESCRIPTION: Shows how to use Google's field_behavior option to define the behavior of fields in Protocol Buffers. It includes an example of marking a field as required.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"google/api/field_behavior.proto\";\n\nmessage MyMessage {\n    string a_required_field = 1 [(google.api.field_behavior) = REQUIRED];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go stubs for gRPC using protoc\nDESCRIPTION: This command uses protoc with go and go-grpc plugins to generate Go types and gRPC service definitions. It outputs the generated files relative to the proto folder, using the paths=source_relative option to maintain the original directory structure.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/generating_stubs/using_protoc.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ protoc -I ./proto \\\n   --go_out ./proto --go_opt paths=source_relative \\\n   --go-grpc_out ./proto --go-grpc_opt paths=source_relative \\\n   ./proto/helloworld/hello_world.proto\n```\n\n----------------------------------------\n\nTITLE: Making HTTP File Upload Request\nDESCRIPTION: Example of how to make a binary file upload request using curl command\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/binary_file_uploads.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -F \"attachment=@/tmp/somefile.txt\" http://localhost:9090/v1/files\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC-Gateway APIs with curl in Bash\nDESCRIPTION: This snippet demonstrates how to test the gRPC-Gateway APIs using curl commands. It includes examples of listing all APIs and making POST and GET requests to specific endpoints.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# List all apis\n$ curl http://localhost:8080/openapiv2/echo_service.swagger.json\n\n# Visit the apis\n$ curl -XPOST http://localhost:8080/v1/example/echo/foo\n{\"id\":\"foo\"}\n\n$ curl  http://localhost:8080/v1/example/echo/foo/123\n{\"id\":\"foo\",\"num\":\"123\"}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML with Custom Responses\nDESCRIPTION: The resulting OpenAPI YAML output when default responses are disabled and custom responses are defined, showing only the specified 201 response code.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: \"2.0\"\ninfo:\n  title: helloproto/v1/hello.proto\n  version: version not set\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /api/hello:\n    get:\n      operationId: EchoService_Hello\n      responses:\n        \"201\":\n          description: Created\n          schema:\n            $ref: \"#/definitions/v1HelloResp\"\n      parameters:\n        - name: name\n          in: query\n          required: false\n          type: string\ndefinitions:\n  v1HelloResp:\n    type: object\n    properties:\n      message:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTTP Responses in Protocol Buffers\nDESCRIPTION: Shows how to define custom HTTP responses with specific status codes in the Protocol Buffer service definition.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {\n    option (google.api.http) = {\n      post: \"/v1/example/echo\"\n      body: \"*\"\n    };\n    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {\n      responses: {\n        key: \"201\"\n        value: {\n          description: \"A successful response.\"\n          schema: {\n            json_schema: {\n              ref: \".mypackage.HelloReply\"\n            }\n          }\n        }\n      }\n    };\n  }\n\n  rpc SayGoodbye (GoodbyeRequest) returns (google.protobuf.Empty) {\n    option (google.api.http) = {\n      delete: \"/v1/example/echo/{id}\"\n    };\n    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {\n      responses: {\n        key: \"204\"\n        value: {\n          description: \"A successful response.\"\n          schema: {}\n        }\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Buf Generation Configuration\nDESCRIPTION: YAML configuration for generating gRPC and Gateway stubs using the buf build tool.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - generate_unbound_methods=true\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Route Handler in gRPC Gateway\nDESCRIPTION: Code to create a mux instance and configure a custom route handler for POST requests to handle file uploads\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/binary_file_uploads.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create a mux instance\nmux := runtime.NewServeMux()\n\n// Attachment upload from http/s handled manually\nmux.HandlePath(\"POST\", \"/v1/files\", handleBinaryFileUpload)\n```\n\n----------------------------------------\n\nTITLE: Resulting OpenAPI JSON for Custom Response\nDESCRIPTION: This snippet shows the generated OpenAPI JSON output for the custom response definition. It includes the description and schema reference for the 400 status code response.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/using_ref_with_responses.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"400\": {\n  \"description\": \"Returned when the request is malformed.\",\n  \"schema\": {\n    \"$ref\": \"#/definitions/v1GenericResponse\"\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Customized HTTP JSON Response Format in gRPC-Gateway\nDESCRIPTION: Example of a customized JSON response with HTTP 201 Created status code and a modified response structure that wraps the original data.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nHTTP 201 Created\nContent-Type: application/json\n\n{\"success\":true,\"data\":{\"name\":\"John Doe\"}}\n```\n\n----------------------------------------\n\nTITLE: Default HTTP JSON Response Format in gRPC-Gateway\nDESCRIPTION: Example of the default JSON response format returned by gRPC-Gateway with HTTP 200 OK status code.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_your_gateway.md#2025-04-10_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nHTTP 200 OK\nContent-Type: application/json\n\n{\"name\":\"John Doe\"}\n```\n\n----------------------------------------\n\nTITLE: Integrating Logging Middleware with gRPC Gateway Mux\nDESCRIPTION: Example showing how to wrap the gRPC Gateway serve mux with the logging middleware. This connects the custom logging handler to the gateway server setup.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/logging.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    mux := runtime.NewServeMux()\n    // Register generated gateway handlers\n\n    s := &http.Server{\n        Handler: logRequestBody(mux),\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Method for gRPC Health Check in Go\nDESCRIPTION: Implementation of the Check method required for the gRPC Health Checking Protocol. This method returns a response indicating that the service is serving and functioning properly.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/health_check.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *serviceServer) Check(ctx context.Context, in *health.HealthCheckRequest) (*health.HealthCheckResponse, error) {\n\treturn &health.HealthCheckResponse{Status: health.HealthCheckResponse_SERVING}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Schema Object in Protobuf\nDESCRIPTION: Shows how to use proto options to customize the OpenAPI Schema Object for messages and fields. It includes examples of setting json_schema, external_docs, example, and extensions.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"protoc-gen-openapiv2/options/annotations.proto\";\n\nmessage ABitOfEverything {\n    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {\n        json_schema: {\n            title: \"A bit of everything\"\n            description: \"Intentionally complicated message type to cover many features of Protobuf.\"\n            required: [\"uuid\", \"int64_value\", \"double_value\"]\n        }\n        external_docs: {\n            url: \"https://github.com/grpc-ecosystem/grpc-gateway\";\n            description: \"Find out more about ABitOfEverything\";\n        }\n        example: \"{\\\"uuid\\\": \\\"0cf361e1-4b44-483d-a159-54dabdf7e814\\\"}\"\n        extensions: {\n            key: \"x-irreversible\";\n            value {\n                bool_value: true;\n            }\n        }\n    };\n\n    string uuid = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: \"The UUID field.\"}];\n}\n```\n\n----------------------------------------\n\nTITLE: Example Protobuf Service Definition for Echo Service\nDESCRIPTION: A simple protobuf service definition for an Echo service with a Hello RPC method that has an HTTP GET mapping to '/api/hello'.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloproto.v1;\noption go_package = \"helloproto/v1;helloproto\";\n\nimport \"google/api/annotations.proto\";\n\nservice EchoService {\n    rpc Hello(HelloReq) returns (HelloResp) {\n        option (google.api.http) = {\n            get: \"/api/hello\"\n        };\n    }\n}\n\nmessage HelloReq {\n    string name = 1;\n}\n\nmessage HelloResp {\n    string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swagger Extensions in Protobuf\nDESCRIPTION: Demonstrates how to add Swagger Extensions as key-value pairs to options in Protocol Buffers. It shows an example of adding an Amazon API Gateway authorizer extension.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nextensions: {\n  key: \"x-amazon-apigateway-authorizer\";\n  value {\n    struct_value {\n      fields {\n        key: \"type\";\n        value {\n          string_value: \"token\";\n        }\n      }\n      fields {\n        key: \"authorizerResultTtlInSeconds\";\n        value {\n          number_value: 60;\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI YAML Output for Echo Service\nDESCRIPTION: The resulting OpenAPI YAML output generated from the Echo service protobuf definition, showing the paths, parameters, and data definitions.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: \"2.0\"\ninfo:\n  title: helloproto/v1/example.proto\n  version: version not set\ntags:\n- name: EchoService\nconsumes:\n- application/json\nproduces:\n- application/json\npaths:\n  /api/hello:\n    get:\n      operationId: EchoService_Hello\n      responses:\n        \"200\":\n          description: A successful response.\n          schema:\n            $ref: '#/definitions/v1HelloResp'\n        default:\n          description: An unexpected error response.\n          schema:\n            $ref: '#/definitions/rpcStatus'\n      parameters:\n      - name: name\n        in: query\n        required: false\n        type: string\n      tags:\n      - EchoService\ndefinitions:\n  protobufAny:\n    type: object\n    properties:\n      '@type':\n        type: string\n    additionalProperties: {}\n  rpcStatus:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\n      details:\n        type: array\n        items:\n          $ref: '#/definitions/protobufAny'\n  v1HelloResp:\n    type: object\n    properties:\n      message:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Service with Nested Fields for gRPC-Gateway\nDESCRIPTION: A protobuf definition showing a gRPC service with nested message fields (PageOptions inside ListStuffRequest) and API annotations for HTTP endpoint mapping.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/using_custom_query_parser.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\nimport \"google/api/annotations.proto\";\n\npackage your.service.v1;\n\nmessage PageOptions {\n  int32 limit = 1;\n  int32 page = 2;\n}\n\nmessage ListStuffRequest {\n  string stuff_uuid = 1;\n  PageOptions pagination = 2;\n}\n\nmessage ListStuffResponse {\n  repeated string stuff = 1;\n}\n\nservice MyService {\n  rpc ListStuff(ListStuffRequest) returns (ListStuffResponse) {\n    option (google.api.http) = {\n      get: \"/path/to/{stuff_uuid}/stuff\"\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selective Path Tracing\nDESCRIPTION: Configuration for selective tracing based on URL paths without global configuration.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngwmux := runtime.NewServeMux()\n\nopenCensusHandler := &ochttp.Handler{\n    Handler: gwmux,\n    GetStartOptions: func(r *http.Request) trace.StartOptions {\n        startOptions := trace.StartOptions{}\n        if strings.HasPrefix(r.URL.Path, \"/api\") {\n            // This example will always trace anything starting with /api.\n            startOptions.Sampler = trace.AlwaysSample()\n        }\n        return startOptions\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Response Descriptions in Protobuf for OpenAPI\nDESCRIPTION: This snippet demonstrates how to add a custom response description for all RPCs in the protobuf file using gRPC Gateway annotations. It defines a new message for the custom response and sets up the OpenAPI options.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/using_ref_with_responses.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\noption (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {\n  responses: {\n    key: \"400\"\n    value: {\n      description: \"Returned when the request is malformed.\"\n      schema: {\n        json_schema: {ref: \".example.service.v1.GenericResponse\"} // Must match the fully qualified name of the message\n      }\n    }\n  }\n};\n\nmessage GenericResponse {\n  repeated string resources = 1;\n  repeated string errors = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic gRPC Service and Messages in Protobuf\nDESCRIPTION: This snippet shows the basic structure of a protobuf file defining a gRPC service with a single RPC method and its request/response messages.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/using_ref_with_responses.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage example.service.v1;\n\nimport \"protoc-gen-openapiv2/options/annotations.proto\";\n\nservice GenericService {\n  rpc GenericRPC(GenericRPCRequest) returns (GenericRPCResponse);\n}\n\nmessage GenericRPCRequest {\n  string id = 1;\n}\n\nmessage GenericRPCResponse {\n  string result = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check Without Tracing\nDESCRIPTION: Example of a service method without tracing implementation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *service) Check(ctx context.Context, in *health.HealthCheckRequest) (*health.HealthCheckResponse, error) {\n    // Note no span here.\n    return &health.HealthCheckResponse{Status: health.HealthCheckResponse_SERVING}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Reverse-Proxy with YAML Config\nDESCRIPTION: Shell command to generate the gRPC-Gateway reverse proxy using the YAML configuration file.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/grpc_api_configuration.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I . \\\n  --grpc-gateway_out ./gen/go \\\n  --grpc-gateway_opt paths=source_relative \\\n  --grpc-gateway_opt grpc_api_configuration=path/to/your_service.yaml \\\n  your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: Extracting HTTP Path Pattern at Runtime in Go\nDESCRIPTION: Go code example showing how to extract HTTP path pattern from the request context using runtime.WithMetadata middleware. Demonstrates capturing both RPC method and HTTP pattern into metadata.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/annotated_context.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithMetadata(func(ctx context.Context, r *http.Request) metadata.MD {\n\t\tmd := make(map[string]string)\n\t\tif method, ok := runtime.RPCMethod(ctx); ok {\n\t\t\tmd[\"method\"] = method // /grpc.gateway.examples.internal.proto.examplepb.LoginService/Login\n\t\t}\n\t\tif pattern, ok := runtime.HTTPPathPattern(ctx); ok {\n\t\t\tmd[\"pattern\"] = pattern // /v1/example/login\n\t\t}\n\t\treturn metadata.New(md)\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Protoc Command with External gRPC API Configuration\nDESCRIPTION: Shell command that uses protoc to generate gRPC-Gateway code with an external API configuration file. It includes options for paths, grpc_api_configuration, and standalone mode.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --grpc-gateway_out ./gen/go \\\n    --grpc-gateway_opt paths=source_relative \\\n    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \\\n    --grpc-gateway_opt standalone=true \\\n    your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: Protoc Command for gRPC-Gateway Generation\nDESCRIPTION: Shell command that uses protoc to generate gRPC-Gateway code. It specifies the output directory and sets the paths option to source_relative.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --grpc-gateway_out ./gen/go \\\n    --grpc-gateway_opt paths=source_relative \\\n    your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: Using Go Templates with Custom Values in Protoc Command\nDESCRIPTION: Demonstrates how to use the protoc command with Go templates enabled and custom template values set. It shows how to specify multiple custom values using the go_template_args option.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ protoc -I. \\\n    --go_out . --go-grpc_out . \\\n    --grpc-gateway_out . \\\n    --openapiv2_out . \\\n    --openapiv2_opt use_go_templates=true \\\n    --openapiv2_opt go_template_args=environment=test1 \\\n    --openapiv2_opt go_template_args=environment_label=Test1 \\\n    path/to/my/proto/v1/myproto.proto\n```\n\n----------------------------------------\n\nTITLE: Buf Generator Configuration for gRPC-Gateway\nDESCRIPTION: YAML configuration for buf generator that sets up the protoc plugins for generating Go code, gRPC stubs, and gRPC-Gateway code. It specifies the output directories and options for each plugin.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Plugin Configuration in buf.gen.yaml\nDESCRIPTION: YAML configuration example showing how to specify OpenAPI plugin options in a buf.gen.yaml file.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: openapiv2\n    out: foo\n    opt: bar=baz,color=red\n```\n\n----------------------------------------\n\nTITLE: Buf Generator Configuration with External gRPC API Configuration\nDESCRIPTION: YAML configuration for buf generator that includes the standalone and grpc_api_configuration options. This allows using an external configuration file for gRPC-Gateway without modifying the proto files.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - grpc_api_configuration=path/to/config.yaml\n      - standalone=true\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Plugin Options with Protoc CLI\nDESCRIPTION: Command line example showing how to pass OpenAPI plugin options using the protoc compiler CLI.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n--openapiv2_out . --openapiv2_opt bar=baz,color=red\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Dependencies in Go\nDESCRIPTION: Go module configuration for tracking tool dependencies required by gRPC-Gateway including protocol buffer compiler plugins.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +build tools\n\npackage tools\n\nimport (\n    _ \"github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway\"\n    _ \"github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2\"\n    _ \"google.golang.org/grpc/cmd/protoc-gen-go-grpc\"\n    _ \"google.golang.org/protobuf/cmd/protoc-gen-go\"\n)\n```\n\n----------------------------------------\n\nTITLE: Protoc Command for OpenAPI Definition Generation\nDESCRIPTION: Shell command that uses protoc with the openapiv2 plugin to generate OpenAPI (Swagger) definitions for the service.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I . --openapiv2_out ./gen/openapiv2 \\\n    your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: Creating a Go Module for gRPC-Gateway Project\nDESCRIPTION: Command to initialize a new Go module using go mod init. This creates a go.mod file that identifies your code as a module and will track dependencies.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/introduction.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ go mod init github.com/myuser/myrepo\ngo: creating new go.mod: module github.com/myuser/myrepo\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Stubs Command\nDESCRIPTION: Shell command to generate Go gRPC stubs from the proto file using protoc compiler.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/grpc_api_configuration.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I . \\\n  --go_out ./gen/go/ \\\n  --go_opt paths=source_relative \\\n  --go-grpc_out ./gen/go/ \\\n  --go-grpc_opt paths=source_relative \\\n  your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: Go 1.24 Tool Directive Configuration\nDESCRIPTION: Example of using the new tool directive in Go 1.24's go.mod file to manage executable dependencies.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule tools\n\ngo 1.24\n\ntool (\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2\n\tgoogle.golang.org/grpc/cmd/protoc-gen-go-grpc\n\tgoogle.golang.org/protobuf/cmd/protoc-gen-go\n)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI/Swagger Documentation\nDESCRIPTION: Shell commands to generate OpenAPI/Swagger documentation with optional configuration file.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/grpc_api_configuration.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I . --openapiv2_out ./gen/go \\\n  --openapiv2_opt grpc_api_configuration=path/to/your_service.yaml \\\n  --openapiv2_opt openapi_configuration=path/to/your_service_swagger.yaml \\\n  your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: gRPC API Configuration in YAML\nDESCRIPTION: YAML configuration file that defines HTTP rules for the gRPC service, mapping the Echo method to a POST endpoint.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/grpc_api_configuration.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: google.api.Service\nconfig_version: 3\n\nhttp:\n  rules:\n    - selector: your.service.v1.YourService.Echo\n      post: /v1/example/echo\n      body: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Using Go Templates in Proto File Comments\nDESCRIPTION: Demonstrates how to use Go templates in Protocol Buffer file comments to generate more advanced documentation. It includes an example of importing content from an external Markdown file.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nservice LoginService {\n    // Login\n    //\n    // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the \"{{.Service.Name}}\" service.\n    // It takes in \"{{.RequestType.Name}}\" and returns a \"{{.ResponseType.Name}}\".\n    //\n    // {{import \"tables.md\"}}\n    rpc Login (LoginRequest) returns (LoginReply) {\n        option (google.api.http) = {\n            post: \"/v1/example/login\"\n            body: \"*\"\n        };\n    }\n}\n\nmessage LoginRequest {\n    // The entered username\n    string username = 1;\n    // The entered password\n    string password = 2;\n}\n\nmessage LoginReply {\n    // Whether you have access or not\n    bool access = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running gRPC-Gateway Example Server in Bash\nDESCRIPTION: This snippet shows the process of navigating to the correct directory, installing necessary npm packages, and running gulp tasks to set up and start the gRPC-Gateway example server and frontend.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you are in the correct directory: \n# $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/v2/examples\n$ cd examples/internal/browser\n$ pwd\n\n# Install gulp\n$ npm install -g gulp-cli\n$ npm install\n$ gulp\n\n# Run\n$ gulp bower\n$ gulp backends\n```\n\n----------------------------------------\n\nTITLE: Merged OpenAPI Generation Configuration\nDESCRIPTION: YAML configuration showing how to merge multiple proto files into a single OpenAPI specification using the allow_merge option.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: openapiv2\n    out: foo\n    strategy: all\n    opt: allow_merge=true,merge_file_name=foo\n```\n\n----------------------------------------\n\nTITLE: Custom Marshaler Configuration in Go\nDESCRIPTION: Configures a custom marshaler to use proto names and control default value emission behavior.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/grpc-gateway_v2_migration_guide.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmux := runtime.NewServeMux(\n\truntime.WithMarshalerOption(runtime.MIMEWildcard, &runtime.HTTPBodyMarshaler{\n\t\tMarshaler: &runtime.JSONPb{\n\t\t\tMarshalOptions: protojson.MarshalOptions{\n\t\t\t\tUseProtoNames:   true,\n\t\t\t\tEmitUnpopulated: true,\n\t\t\t},\n\t\t\tUnmarshalOptions: protojson.UnmarshalOptions{\n\t\t\t\tDiscardUnknown: true,\n\t\t\t},\n\t\t},\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Tag Generation in buf.yaml\nDESCRIPTION: Configuration example for disabling the generation of service tags in OpenAPI using the 'disable_service_tags' option in buf.yaml.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nplugins:\n  - name: openapiv2\n    out: .\n    opt:\n      - disable_service_tags=true\n```\n\n----------------------------------------\n\nTITLE: Defining LoginService with Templates in Protocol Buffers\nDESCRIPTION: Example protocol buffer service definition using Go templates and custom values to define a login endpoint with HTTP bindings.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nservice LoginService {\n    // Login (Environment: {{arg \"environment_label\"}})\n    //\n    // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the \"{{.Service.Name}}\" service.\n    // It takes in \"{{.RequestType.Name}}\" and returns a \"{{.ResponseType.Name}}\".\n    // This only works in the {{arg \"environment\"}} domain.\n    //\n    rpc Login (LoginRequest) returns (LoginReply) {\n        option (google.api.http) = {\n            post: \"/v1/example/login\"\n            body: \"*\"\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Output Format in buf.yaml\nDESCRIPTION: Example of configuring OpenAPI output format to YAML using the 'output_format' option in a buf.yaml configuration file.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: openapiv2\n    out: pkg\n    opt: output_format=yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies for gRPC-Gateway Example in Bash\nDESCRIPTION: This snippet demonstrates how to initialize dependencies for the gRPC-Gateway example project using the dep tool. It's the first step in setting up the project environment.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Handle dependencies\n$ dep init\n```\n\n----------------------------------------\n\nTITLE: Enum as Integer OpenAPI Schema\nDESCRIPTION: JSON schema showing how enums are represented when using the enums_as_ints option to generate integer-based enums.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"enumValue\",\n    \"description\": \" - Example enums\",\n    \"in\": \"query\",\n    \"required\": false,\n    \"type\": \"int\",\n    \"enum\": [\n        0,\n        1\n    ],\n    \"default\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Protobuf Service with Custom HTTP Header Parameters\nDESCRIPTION: Example of adding custom HTTP header parameters to OpenAPI operation definitions using the openapiv2_operation option, defining headers like X-Foo and X-Bar with different types.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_26\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloproto.v1;\n\nimport \"google/api/annotations.proto\";\nimport \"protoc-gen-openapiv2/options/annotations.proto\";\n\noption go_package = \"helloproto/v1;helloproto\";\n\nservice EchoService {\n  rpc Hello(HelloReq) returns (HelloResp) {\n    option (google.api.http) = {get: \"/api/hello\"};\n    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {\n      parameters: {\n        headers: {\n          name: \"X-Foo\";\n          description: \"Foo Header\";\n          type: STRING,\n          required: true;\n        };\n        headers: {\n          name: \"X-Bar\";\n          description: \"Bar Header\";\n          type: NUMBER,\n        };\n      };\n    };\n  }\n}\n\nmessage HelloReq {\n  string name = 1;\n}\n\nmessage HelloResp {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using protoc to Disable Default Responses\nDESCRIPTION: Command line example of using protoc to disable default response generation with the --openapiv2_opt flag.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --openapiv2_out=. --openapiv2_opt=disable_default_responses=true ./path/to/file.proto\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Simple gRPC-Gateway Browser Example in Shell\nDESCRIPTION: These commands run the 'bower' and 'backends' gulp tasks to set up a simple browser example. After running these, the user should open 'index.html' to view the example.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/browser/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gulp bower\n$ gulp backends\n```\n\n----------------------------------------\n\nTITLE: Using protoc to Ignore Comments\nDESCRIPTION: Command line example of using protoc to ignore comments in OpenAPI generation with the --openapiv2_opt flag.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --openapiv2_out=. --openapiv2_opt=ignore_comments=true ./path/to/file.proto\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests with PhantomJS for gRPC-Gateway in Shell\nDESCRIPTION: These commands install gulp-cli globally, install project dependencies, and run the default gulp task which executes integration tests with PhantomJS.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/browser/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install -g gulp-cli\n$ npm install\n$ gulp\n```\n\n----------------------------------------\n\nTITLE: Generated Swagger YAML output with deprecated method\nDESCRIPTION: Example of the generated Swagger YAML output when the enable_rpc_deprecation option is enabled. The RPC method marked as deprecated in the proto file is also marked as deprecated in the generated Swagger documentation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: \"2.0\"\ninfo:\n  title: helloproto/v1/example.proto\n  version: version not set\ntags:\n  - name: EchoService\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /api/hello:\n    get:\n      operationId: EchoService_Hello\n      responses:\n        \"200\":\n          description: A successful response.\n          schema:\n            $ref: '#/definitions/v1HelloResp'\n        default:\n          description: An unexpected error response.\n          schema:\n            $ref: '#/definitions/rpcStatus'\n      parameters:\n        - name: name\n          in: query\n          required: false\n          type: string\n      tags:\n        - EchoService\n      deprecated: true\ndefinitions:\n  protobufAny:\n    type: object\n    properties:\n      '@type':\n        type: string\n    additionalProperties: {}\n  rpcStatus:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\n      details:\n        type: array\n        items:\n          type: object\n          $ref: '#/definitions/protobufAny'\n  v1HelloResp:\n    type: object\n    properties:\n      message:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Go Templates in Proto Comments\nDESCRIPTION: Shows an example of a Markdown template file that can be imported into Protocol Buffer comments using Go templates. It defines tables for request and response types.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## {{.RequestType.Name}}\n| Field ID    | Name      | Type                                                       | Description                  |\n| ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}\n| {{.Number}} | {{.Name}} | {{if eq .Label.String \"LABEL_REPEATED\"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}\n\n## {{.ResponseType.Name}}\n| Field ID    | Name      | Type                                                       | Description                  |\n| ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}\n| {{.Number}} | {{.Name}} | {{if eq .Label.String \"LABEL_REPEATED\"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}\n```\n\n----------------------------------------\n\nTITLE: Enabling preserve_rpc_order with protoc in gRPC Gateway\nDESCRIPTION: Command to generate OpenAPI v2 documentation while preserving the order of RPC paths using protoc. This ensures the path order in the Swagger documentation matches the order in the proto files.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nprotoc --openapiv2_out=. --openapiv2_opt=preserve_rpc_order=true ./path/to/file.proto\n```\n\n----------------------------------------\n\nTITLE: Referencing gRPC-Gateway Example in Markdown\nDESCRIPTION: This snippet provides a reference to the main.go program of the gRPC-Gateway example in Markdown format, which can be useful for understanding how to implement a custom wrapper for ServeMux.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/faq.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[gateway main.go program](https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/gateway/main.go)\n```\n\n----------------------------------------\n\nTITLE: Enabling preserve_rpc_order with buf in gRPC Gateway\nDESCRIPTION: Configuration for buf.gen.yaml to enable preserving RPC path order in generated OpenAPI v2 documentation. This ensures the path order in the Swagger documentation matches the order in the proto files.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nplugins:\n  - name: openapiv2\n    out: .\n    opt:\n      - preserve_rpc_order=true\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI JSON Schema with Expanded Path Parameters\nDESCRIPTION: This example shows the resulting OpenAPI JSON schema when the 'expand_slashed_path_patterns=true' option is enabled, which expands the 'publishers/*/books/*' pattern into separated path parameters.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n \"/v1/publishers/{publisher}/books/{book}\": {\n      \"get\": {\n        \"parameters\": [\n          {\n            \"name\": \"publisher\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"type\": \"string\",\n          },\n          {\n            \"name\": \"book\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"type\": \"string\",\n          }\n        ]\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling RPC deprecation with buf in gRPC Gateway\nDESCRIPTION: Configuration for buf.gen.yaml to enable RPC deprecation in generated OpenAPI v2 documentation. This allows marking methods as deprecated in the Swagger output based on the deprecated option in the proto definition.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/customizing_openapi_output.md#2025-04-10_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\nplugins:\n  - name: openapiv2\n    out: .\n    opt:\n      - enable_rpc_deprecation=true\n```\n\n----------------------------------------\n\nTITLE: Referencing gRPC-Gateway ServeMux in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the gRPC-Gateway ServeMux in Markdown, which is important for understanding how to customize request handling in gRPC-Gateway.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/faq.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`runtime.ServeMux`](https://pkg.go.dev/github.com/grpc-ecosystem/grpc-gateway/runtime?tab=doc#ServeMux)\n```\n\n----------------------------------------\n\nTITLE: Referencing Google API HttpRule in Markdown\nDESCRIPTION: This snippet shows how to reference the Google API HttpRule specification in Markdown format, which is crucial for understanding how to write annotations for gRPC-Gateway.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/faq.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`google.api.HttpRule`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto)\n```\n\n----------------------------------------\n\nTITLE: Referencing Go's HTTP Handler Interface in Markdown\nDESCRIPTION: This snippet shows how to reference Go's standard HTTP Handler interface in Markdown, which is relevant for understanding how to integrate gRPC-Gateway with existing Go HTTP libraries.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/faq.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`http.Handler`](http://golang.org/pkg/http#Handler)\n```\n\n----------------------------------------\n\nTITLE: Buf Configuration for gRPC-Gateway Dependencies\nDESCRIPTION: YAML configuration for buf that specifies the required dependencies for gRPC-Gateway integration. It includes the googleapis dependency which contains the necessary annotation proto files.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nname: buf.build/yourorg/myprotos\ndeps:\n  - buf.build/googleapis/googleapis\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC-Gateway Packages with Go Get\nDESCRIPTION: Commands to download and install the required Go packages for gRPC-Gateway development. Includes the gateway generator, OpenAPI generator, and Protocol Buffer generators.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u -v github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway\ngo get -u -v github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2\ngo get -u -v google.golang.org/protobuf/cmd/protoc-gen-go\ngo get -u -v google.golang.org/grpc/cmd/protoc-gen-go-grpc\n```\n\n----------------------------------------\n\nTITLE: Importing AWS X-ray and OpenCensus Dependencies\nDESCRIPTION: Required import statements for implementing tracing with AWS X-ray and OpenCensus.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/tracing.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nxray \"contrib.go.opencensus.io/exporter/aws\"\n\"go.opencensus.io/plugin/ocgrpc\"\n\"go.opencensus.io/plugin/ochttp\"\n\"go.opencensus.io/trace\"\n```\n\n----------------------------------------\n\nTITLE: Getting Additional Dependencies for gRPC-Gateway Project\nDESCRIPTION: Command to get all required dependencies for a gRPC-Gateway project. Should be run in the directory containing the main.go file.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo get -v\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffer Compiler in Cygwin\nDESCRIPTION: Commands to run the Protocol Buffer compiler (protoc) in Cygwin. Uses cygpath to convert Unix paths to Windows paths for proper functioning with protoc.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nprotoc -I. -I$(cygpath -w /usr/local/include) -I${GOPATH}/src --go_out=. --go-grpc_out=. ./path/to/your_service.proto\nprotoc -I. -I$(cygpath -w /usr/local/include) -I${GOPATH}/src ./path/to/your_service.proto\nprotoc -I. -I$(cygpath -w /usr/local/include) -I${GOPATH}/src ./path/to/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: Manually Cloning Required Repositories in Cygwin\nDESCRIPTION: Git clone commands to manually set up the required repositories in the correct Cygwin paths. This is a workaround for the path issues with go get in Cygwin environments.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grpc-ecosystem/grpc-gateway $(cygpath -u $GOPATH)/src/github.com/grpc-ecosystem/grpc-gateway\ngit clone https://github.com/golang/protobuf $(cygpath -u $GOPATH)/src/github.com/golang/protobuf\ngit clone https://github.com/google/go-genproto $(cygpath -u $GOPATH)/src/google.golang.org/genproto\n```\n\n----------------------------------------\n\nTITLE: Building and Installing gRPC-Gateway Service\nDESCRIPTION: Command to compile and install a gRPC-Gateway service. The built binary will be placed in the $GOPATH/bin directory.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo install\n```\n\n----------------------------------------\n\nTITLE: Installing Go in Cygwin\nDESCRIPTION: Commands to download and install the Go programming language on Windows using Cygwin. The command downloads Go 1.8.1 and installs it with passive mode enabled.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -N https://storage.googleapis.com/golang/go1.8.1.windows-amd64.msi\nmsiexec /i go1.8.1.windows-amd64.msi /passive /promptrestart\n```\n\n----------------------------------------\n\nTITLE: Creating Go Workspace in Cygwin\nDESCRIPTION: Commands to create the necessary directory structure for a Go workspace in the Cygwin home directory. Creates the main workspace directory and the bin, pkg, and src subdirectories.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /home/user/go\nmkdir /home/user/go/bin\nmkdir /home/user/go/pkg\nmkdir /home/user/go/src\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Buffers in Cygwin\nDESCRIPTION: Commands to download and extract Protocol Buffers 3.2.0 for Windows into the Cygwin environment. This is needed because no native Cygwin protoc with version 3 is available.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -N https://github.com/google/protobuf/releases/download/v3.2.0/protoc-3.2.0-win32.zip`\n7z x protoc-3.2.0-win32.zip -o/usr/local/\n```\n\n----------------------------------------\n\nTITLE: ListResponseBodies Endpoint Documentation\nDESCRIPTION: API endpoint that returns an array of RepeatedResponseBodyOutResponse objects. Requires a data parameter and returns application/json content.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ResponseBodyServiceApi.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Required Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **ctx** | **context.Context** | context for authentication, logging, cancellation, deadlines, tracing, etc.\n  **data** | **string**|  |\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables in Windows\nDESCRIPTION: Batch commands to set GOPATH environment variable and add Go bin directory to PATH in Windows registry. Uses reg add instead of setx to avoid PATH truncation issues.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nsetx GOPATH c:\\path\\to\\your\\cygwin\\home\\user\\go /M\nset pathkey=\"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\"\nfor /F \"usebackq skip=2 tokens=2*\" %A IN (`reg query %pathkey% /v Path`) do (reg add %pathkey% /f /v Path /t REG_SZ /d \"%B;c:\\path\\to\\your\\cygwin\\home\\user\\go\\bin\")\n```\n\n----------------------------------------\n\nTITLE: Example Field Format Change\nDESCRIPTION: Shows the transition from using google.protobuf.Any to string for example fields in OpenAPI annotations.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/grpc-gateway_v2_migration_guide.md#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nexample: { value: '{ \"uuid\": \"0cf361e1-4b44-483d-a159-54dabdf7e814\" }' }\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nexample: \"{\\\"uuid\\\": \\\"0cf361e1-4b44-483d-a159-54dabdf7e814\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Manually Cloning Additional Required Repositories\nDESCRIPTION: Git clone commands to manually set up additional required repositories in the Cygwin paths. Part of the workaround for path issues with go get in Cygwin environments.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/installation_for_cygwin.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://go.googlesource.com/net $(cygpath -u $GOPATH)/src/golang.org/x/net\ngit clone https://go.googlesource.com/text $(cygpath -u $GOPATH)/src/golang.org/x/text\ngit clone https://github.com/grpc/grpc-go $(cygpath -u $GOPATH)/src/google.golang.org/grpc\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Properties Definition\nDESCRIPTION: Property table defining the structure of the ExamplepbResponseBodyOut model, showing the Response field of type ExamplepbResponseBodyOutResponse as an optional property.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ExamplepbResponseBodyOut.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**Response** | [***ExamplepbResponseBodyOutResponse**](examplepbResponseBodyOutResponse.md) |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Regenerating Files Using VS Code Dev Containers for gRPC-Gateway\nDESCRIPTION: This snippet shows how to regenerate files after making changes to the gRPC-Gateway project using Visual Studio Code dev containers. It includes two separate commands: one for make operations and another for bazel operations.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make install && make clean && make generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel run :gazelle -- update-repos -from_file=go.mod -to_macro=repositories.bzl%go_repositories && \\\n    bazel run :gazelle && \\\n    bazel run :buildifier\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeError Model Structure in gRPC Gateway\nDESCRIPTION: Markdown table defining the properties of the RuntimeError model. Includes error message, code, message and details fields with their types and configuration options.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/RuntimeError.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **Error_** | **string** |  | [optional] [default to null] |\n| **Code** | **int32** |  | [optional] [default to null] |\n| **Message** | **string** |  | [optional] [default to null] |\n| **Details** | [**[]ProtobufAny**](protobufAny.md) |  | [optional] [default to null] |\n```\n\n----------------------------------------\n\nTITLE: Generating Standalone Reverse-Proxy\nDESCRIPTION: Shell command to generate a standalone reverse proxy that references external types appropriately.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/grpc_api_configuration.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I . \\\n  --grpc-gateway_out ./gen/go \\\n  --grpc-gateway_opt paths=source_relative \\\n  --grpc-gateway_opt standalone=true \\\n  --grpc-gateway_opt grpc_api_configuration=path/to/your_service.yaml \\\n  your/service/v1/your_service.proto\n```\n\n----------------------------------------\n\nTITLE: ProtobufAny Type Field Usage\nDESCRIPTION: Demonstration of protocol buffer message type URL format using canonical paths and type servers. Shows examples of path formatting with google.protobuf.Duration and explains scheme behavior for http/https URLs.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ProtobufAny.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npath/google.protobuf.Duration\n```\n\n----------------------------------------\n\nTITLE: Serving gRPC-Gateway Integration Test for Manual Browser Testing in Shell\nDESCRIPTION: This command runs the 'serve' gulp task to start a local server. After running this, the user should open 'http://localhost:8000' in their browser to perform manual integration testing.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/browser/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gulp serve\n```\n\n----------------------------------------\n\nTITLE: Regenerating Files Using Docker for gRPC-Gateway\nDESCRIPTION: This snippet demonstrates how to use Docker to regenerate files after making changes to the gRPC-Gateway project. It involves running two Docker commands that execute make and bazel commands to install dependencies, clean, generate files, and update repositories.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd):/grpc-gateway -w /grpc-gateway --rm ghcr.io/grpc-ecosystem/grpc-gateway/build-env:latest \\\n    /bin/bash -c 'make install && \\\n        make clean && \\\n        make generate'\ndocker run -itv $(pwd):/grpc-gateway -w /grpc-gateway --entrypoint /bin/bash --rm \\\n    ghcr.io/grpc-ecosystem/grpc-gateway/build-env:latest -c '\\\n        bazel run :gazelle -- update-repos -from_file=go.mod -to_macro=repositories.bzl%go_repositories && \\\n        bazel run :gazelle && \\\n        bazel run :buildifier'\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Layout for gRPC Gateway Development Docs\nDESCRIPTION: YAML front matter configuration for a Jekyll documentation page that defines the development section. Sets up the page layout, navigation order, and indicates it has child pages.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Development\nnav_order: 4\nhas_children: true\n---\n```\n\n----------------------------------------\n\nTITLE: Updated OpenAPI Import Path in Protobuf\nDESCRIPTION: Shows the change in import path from protoc-gen-swagger to protoc-gen-openapiv2 for OpenAPI annotations.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/grpc-gateway_v2_migration_guide.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"protoc-gen-openapiv2/options/annotations.proto\";\n```\n\n----------------------------------------\n\nTITLE: Updated OpenAPI Option Declaration\nDESCRIPTION: Demonstrates the new syntax for declaring OpenAPI options in protobuf files.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/development/grpc-gateway_v2_migration_guide.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\noption (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {\n```\n\n----------------------------------------\n\nTITLE: GetResponseBodyStream Endpoint Documentation\nDESCRIPTION: API endpoint that returns a stream of ResponseBodyOut objects. Requires a data parameter and streams results as application/json.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ResponseBodyServiceApi.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Required Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **ctx** | **context.Context** | context for authentication, logging, cancellation, deadlines, tracing, etc.\n  **data** | **string**|  |\n```\n\n----------------------------------------\n\nTITLE: GetResponseBody Endpoint Documentation\nDESCRIPTION: API endpoint that returns a single ResponseBodyOutResponse. Requires a data parameter and returns application/json content.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ResponseBodyServiceApi.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Required Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **ctx** | **context.Context** | context for authentication, logging, cancellation, deadlines, tracing, etc.\n  **data** | **string**|  |\n```\n\n----------------------------------------\n\nTITLE: ListResponseStrings Endpoint Documentation\nDESCRIPTION: API endpoint that returns an array of strings. Requires a data parameter and returns application/json content.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ResponseBodyServiceApi.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Required Parameters\n\nName | Type | Description  | Notes\n------------- | ------------- | ------------- | -------------\n **ctx** | **context.Context** | context for authentication, logging, cancellation, deadlines, tracing, etc.\n  **data** | **string**|  |\n```\n\n----------------------------------------\n\nTITLE: Implementing EchoDelete Method in GenerateUnboundMethodsEchoService\nDESCRIPTION: Implementation of the EchoDelete method that receives a GenerateUnboundMethodsSimpleMessage and returns it. Requires a context parameter for authentication and request handling.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/generateunboundmethods/docs/GenerateUnboundMethodsEchoServiceApi.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nGenerateUnboundMethodsEchoServiceEchoDelete(ctx, body)\n```\n\n----------------------------------------\n\nTITLE: Defining ExamplepbResponseBodyOutResponse Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ExamplepbResponseBodyOutResponse model using a markdown table. It specifies the property name, type, description, and additional notes.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ExamplepbResponseBodyOutResponse.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**Data** | **string** |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Defining StreamResultOfExamplepbResponseBodyOut Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the StreamResultOfExamplepbResponseBodyOut model using a markdown table. It includes the property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/StreamResultOfExamplepbResponseBodyOut.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**Result** | [***ExamplepbResponseBodyOutResponse**](examplepbResponseBodyOutResponse.md) |  | [optional] [default to null]\n**Error_** | [***RpcStatus**](rpcStatus.md) |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Defining ExamplepbRepeatedResponseBodyOutResponse Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ExamplepbRepeatedResponseBodyOutResponse model using a Markdown table. It includes the property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ExamplepbRepeatedResponseBodyOutResponse.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**Data** | **string** |  | [optional] [default to null]\n**Type_** | [***ResponseResponseType**](ResponseResponseType.md) |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Defining Model Properties for ExamplepbResponseBodyMessageResponse\nDESCRIPTION: Markdown table defining the properties of the ExamplepbResponseBodyMessageResponse model. Contains a single optional string property 'Data' with default value set to null.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ExamplepbResponseBodyMessageResponse.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**Data** | **string** |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Defining ExamplepbRepeatedResponseStrings Model Structure\nDESCRIPTION: Model definition for ExamplepbRepeatedResponseStrings containing an optional array of strings. The Values field is a repeated string field that can contain multiple string values.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/responsebody/docs/ExamplepbRepeatedResponseStrings.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ExamplepbRepeatedResponseStrings {\n  repeated string values = 1 [optional];\n}\n```\n\n----------------------------------------\n\nTITLE: RuntimeError Model Structure Definition\nDESCRIPTION: Defines the structure of a RuntimeError object with properties for error message, code, details array, and an optional error field. Uses Protobuf for the details array implementation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/examples/internal/clients/generateunboundmethods/docs/RuntimeError.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# RuntimeError\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**Error_** | **string** |  | [optional] [default to null]\n**Code** | **int32** |  | [optional] [default to null]\n**Message** | **string** |  | [optional] [default to null]\n**Details** | [**[]ProtobufAny**](protobufAny.md) |  | [optional] [default to null]\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter for Mapping Documentation\nDESCRIPTION: YAML front matter that configures the Jekyll documentation page for the Mapping section. It defines the page layout, title, navigation order, and indicates the page has children.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/mapping/index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Mapping\nnav_order: 2\nhas_children: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for gRPC-Gateway Documentation\nDESCRIPTION: YAML front matter configuration for Jekyll that defines the page layout, title, navigation order, and child page status for the Overview page of the gRPC-Gateway documentation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/overview/index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Overview\nnav_order: 1\nhas_children: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Front Matter\nDESCRIPTION: YAML front matter configuration for a Jekyll documentation page that defines the page layout, title, navigation order, and child page settings.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/tutorials/index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Tutorials\nnav_order: 6\nhas_children: true\n---\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration for Contributing Page\nDESCRIPTION: Front matter YAML configuration for a Jekyll page that defines the page title, navigation order, and page hierarchy settings. This configuration makes this page appear as a parent page with child pages in the navigation menu.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/contributing/index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Contributing\nnav_order: 5\nhas_children: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Layout for gRPC-Gateway Operations Documentation\nDESCRIPTION: This YAML front matter configures the Jekyll layout for the Operations section of the gRPC-Gateway documentation. It sets the default layout, defines the title as 'Operations', sets the navigation order to 3, and indicates that this page has child pages.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/docs/docs/operations/index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Operations\nnav_order: 3\nhas_children: true\n---\n```\n\n----------------------------------------\n\nTITLE: Buf Configuration with gRPC-Gateway Dependencies for OpenAPI\nDESCRIPTION: YAML configuration for buf that includes both the googleapis and grpc-gateway dependencies required for OpenAPI definition generation.\nSOURCE: https://github.com/grpc-ecosystem/grpc-gateway/blob/main/README.md#2025-04-10_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v2\nname: buf.build/yourorg/myprotos\ndeps:\n  - buf.build/googleapis/googleapis\n  - buf.build/grpc-ecosystem/grpc-gateway\n```"
  }
]