[
  {
    "owner": "spotware",
    "repo": "openapipy",
    "content": "TITLE: Setting Up and Running cTrader Open API Client in Python\nDESCRIPTION: Complete example showing how to initialize a client connection to cTrader Open API, set up callback handlers for connection events and messages, and authenticate with the API. This implementation uses Twisted for asynchronous communication and handles connection, authentication, and message processing.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, Auth, EndPoints\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiModelMessages_pb2 import *\nfrom twisted.internet import reactor\n\nhostType = input(\"Host (Live/Demo): \")\nhost = EndPoints.PROTOBUF_LIVE_HOST if hostType.lower() == \"live\" else EndPoints.PROTOBUF_DEMO_HOST\nclient = Client(host, EndPoints.PROTOBUF_PORT, TcpProtocol)\n\ndef onError(failure): # Call back for errors\n    print(\"Message Error: \", failure)\n\ndef connected(client): # Callback for client connection\n    print(\"\\nConnected\")\n    # Now we send a ProtoOAApplicationAuthReq\n    request = ProtoOAApplicationAuthReq()\n    request.clientId = \"Your application Client ID\"\n    request.clientSecret = \"Your application Client secret\"\n    # Client send method returns a Twisted deferred\n    deferred = client.send(request)\n    # You can use the returned Twisted deferred to attach callbacks\n    # for getting message response or error backs for getting error if something went wrong\n    # deferred.addCallbacks(onProtoOAApplicationAuthRes, onError)\n    deferred.addErrback(onError)\n\ndef disconnected(client, reason): # Callback for client disconnection\n    print(\"\\nDisconnected: \", reason)\n\ndef onMessageReceived(client, message): # Callback for receiving all messages\n    print(\"Message received: \\n\", Protobuf.extract(message))\n\n# Setting optional client callbacks\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMessageReceived)\n# Starting the client service\nclient.startService()\n# Run Twisted reactor\nreactor.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous cTrader API Client\nDESCRIPTION: Complete example of setting up an asynchronous client connection to cTrader API using Twisted. Demonstrates connection handling, authentication, and message processing with callbacks.\nSOURCE: https://github.com/spotware/openapipy/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, Auth, EndPoints\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiModelMessages_pb2 import *\nfrom twisted.internet import reactor\n\nhostType = input(\"Host (Live/Demo): \")\nhost = EndPoints.PROTOBUF_LIVE_HOST if hostType.lower() == \"live\" else EndPoints.PROTOBUF_DEMO_HOST\nclient = Client(host, EndPoints.PROTOBUF_PORT, TcpProtocol)\n\ndef onError(failure): # Call back for errors\n    print(\"Message Error: \", failure)\n\ndef connected(client): # Callback for client connection\n    print(\"\\nConnected\")\n    # Now we send a ProtoOAApplicationAuthReq\n    request = ProtoOAApplicationAuthReq()\n    request.clientId = \"Your application Client ID\"\n    request.clientSecret = \"Your application Client secret\"\n    # Client send method returns a Twisted deferred\n    deferred = client.send(request)\n    # You can use the returned Twisted deferred to attach callbacks\n    # for getting message response or error backs for getting error if something went wrong\n    # deferred.addCallbacks(onProtoOAApplicationAuthRes, onError)\n    deferred.addErrback(onError)\n\ndef disconnected(client, reason): # Callback for client disconnection\n    print(\"\\nDisconnected: \", reason)\n\ndef onMessageReceived(client, message): # Callback for receiving all messages\n    print(\"Message received: \\n\", Protobuf.extract(message))\n\n# Setting optional client callbacks\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMessageReceived)\n# Starting the client service\nclient.startService()\n# Run Twisted reactor\nreactor.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client Callbacks for API Communication\nDESCRIPTION: Defines callback functions for handling different stages of API communication, including connection, authentication, symbol retrieval, and data response processing. Uses Twisted's asynchronous programming model with deferreds.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef trendbarsResponseCallback(result):\n    print(\"\\nTrendbars received\")\n    trendbars = Protobuf.extract(result)\n    barsData = list(map(transformTrendbar, trendbars.trendbar))\n    global dailyBars\n    dailyBars.clear()\n    dailyBars.extend(barsData)\n    print(\"\\ndailyBars length:\", len(dailyBars))\n    print(\"\\Stopping reactor...\")\n    reactor.stop()\n    \ndef symbolsResponseCallback(result):\n    print(\"\\nSymbols received\")\n    symbols = Protobuf.extract(result)\n    global symbolName\n    symbolsFilterResult = list(filter(lambda symbol: symbol.symbolName == symbolName, symbols.symbol))\n    if len(symbolsFilterResult) == 0:\n        raise Exception(f\"There is symbol that matches to your defined symbol name: {symbolName}\")\n    elif len(symbolsFilterResult) > 1:\n        raise Exception(f\"More than one symbol matched with your defined symbol name: {symbolName}, match result: {symbolsFilterResult}\")\n    symbol = symbolsFilterResult[0]\n    request = ProtoOAGetTrendbarsReq()\n    request.symbolId = symbol.symbolId\n    request.ctidTraderAccountId = credentials[\"AccountId\"]\n    request.period = ProtoOATrendbarPeriod.D1\n    # We set the from/to time stamps to 50 weeks, you can load more data by sending multiple requests\n    # Please check the ProtoOAGetTrendbarsReq documentation for more detail\n    request.fromTimestamp = int(calendar.timegm((datetime.datetime.utcnow() - datetime.timedelta(weeks=50)).utctimetuple())) * 1000\n    request.toTimestamp = int(calendar.timegm(datetime.datetime.utcnow().utctimetuple())) * 1000\n    deferred = client.send(request)\n    deferred.addCallbacks(trendbarsResponseCallback, onError)\n    \ndef accountAuthResponseCallback(result):\n    print(\"\\nAccount authenticated\")\n    request = ProtoOASymbolsListReq()\n    request.ctidTraderAccountId = credentials[\"AccountId\"]\n    request.includeArchivedSymbols = False\n    deferred = client.send(request)\n    deferred.addCallbacks(symbolsResponseCallback, onError)\n    \ndef applicationAuthResponseCallback(result):\n    print(\"\\nApplication authenticated\")\n    request = ProtoOAAccountAuthReq()\n    request.ctidTraderAccountId = credentials[\"AccountId\"]\n    request.accessToken = credentials[\"AccessToken\"]\n    deferred = client.send(request)\n    deferred.addCallbacks(accountAuthResponseCallback, onError)\n\ndef onError(client, failure): # Call back for errors\n    print(\"\\nMessage Error: \", failure)\n\ndef disconnected(client, reason): # Callback for client disconnection\n    print(\"\\nDisconnected: \", reason)\n\ndef onMessageReceived(client, message): # Callback for receiving all messages\n    if message.payloadType in [ProtoHeartbeatEvent().payloadType, ProtoOAAccountAuthRes().payloadType, ProtoOAApplicationAuthRes().payloadType, ProtoOASymbolsListRes().payloadType, ProtoOAGetTrendbarsRes().payloadType]:\n        return\n    print(\"\\nMessage received: \\n\", Protobuf.extract(message))\n    \ndef connected(client): # Callback for client connection\n    print(\"\\nConnected\")\n    request = ProtoOAApplicationAuthReq()\n    request.clientId = credentials[\"ClientId\"]\n    request.clientSecret = credentials[\"Secret\"]\n    deferred = client.send(request)\n    deferred.addCallbacks(applicationAuthResponseCallback, onError)\n    \n# Setting optional client callbacks\nclient.setConnectedCallback(connected)\nclient.setDisconnectedCallback(disconnected)\nclient.setMessageReceivedCallback(onMessageReceived)\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Instance in ctrader_open_api Python Library\nDESCRIPTION: Demonstrates how to initialize a Client instance to connect to the API. It uses demo endpoint for Protobuf over TCP connection.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/client.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, Auth, EndPoints\n\nclient = Client(EndPoints.PROTOBUF_DEMO_HOST, EndPoints.PROTOBUF_PORT, TcpProtocol)\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth Object in ctrader_open_api Python Package\nDESCRIPTION: Creates an instance of the Auth class from the ctrader_open_api package with required application credentials. You need to provide your App ID, App Secret, and redirect URI to establish authentication context.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ctrader_open_api import Auth\n\nauth = Auth(\"Your App ID\", \"Your App Secret\", \"Your App redirect URI\")\n```\n\n----------------------------------------\n\nTITLE: Creating cTrader API Client Connection\nDESCRIPTION: Creates a client instance for connecting to either the demo or live cTrader Open API endpoint based on the host type specified in the credentials file.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhost = EndPoints.PROTOBUF_LIVE_HOST if credentials[\"HostType\"].lower() == \"live\" else EndPoints.PROTOBUF_DEMO_HOST\nclient = Client(host, EndPoints.PROTOBUF_PORT, TcpProtocol)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token with Auth Code in ctrader_open_api\nDESCRIPTION: Exchanges the authorization code for an access token using the Auth.getToken method. This token is required for authenticating API requests to the cTrader Open API on behalf of the user.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# This method uses EndPoints.TOKEN_URI as a base URI to get token\n# you can change it by passing another URI via optional baseUri parameter\ntoken = auth.getToken(\"auth_code\")\n```\n\n----------------------------------------\n\nTITLE: Refreshing Expired Access Token in ctrader_open_api\nDESCRIPTION: Demonstrates how to refresh an expired access token using the refresh token previously obtained. The refreshToken method requests a new access token from the API without requiring the user to re-authenticate.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This method uses EndPoints.TOKEN_URI as a base URI to refresh token\n# you can change it by passing another URI via optional baseUri parameter\nnewToken = auth.refreshToken(\"refresh_Token\")\n```\n\n----------------------------------------\n\nTITLE: Creating a ProtoOAApplicationAuthReq Message in ctrader_open_api\nDESCRIPTION: Shows how to import message types and create a ProtoOAApplicationAuthReq message for application authentication. This message requires the client ID and client secret of your application.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/client.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Import all message types\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiModelMessages_pb2 import *\n\n# ProtoOAApplicationAuthReq message\napplicationAuthReq = ProtoOAApplicationAuthReq()\napplicationAuthReq.clientId = \"Your App Client ID\"\napplicationAuthReq.clientSecret = \"Your App Client secret\"\n```\n\n----------------------------------------\n\nTITLE: Sending a Message with Client in ctrader_open_api\nDESCRIPTION: Demonstrates how to send a protobuf message using the client's send method, which returns a Twisted deferred object that will be called when a response is received.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/client.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndeferred = client.send(applicationAuthReq)\n```\n\n----------------------------------------\n\nTITLE: Handling Message Response and Errors in ctrader_open_api\nDESCRIPTION: Shows how to add callback functions to handle both successful responses and errors when sending messages. Uses Twisted's deferred.addCallbacks method to register the handlers.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/client.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef onProtoOAApplicationAuthRes(result):\n\tprint(result)\n\ndef onError(failure):\n\tprint(failure)\n\ndeferred.addCallbacks(onProtoOAApplicationAuthRes, onError)\n```\n\n----------------------------------------\n\nTITLE: Starting Client Service and Twisted Reactor\nDESCRIPTION: Starts the client service and runs the Twisted reactor to begin asynchronous communication with the cTrader Open API. This initiates the chain of authentication and data retrieval callbacks.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Starting the client service\nclient.startService()\n# Run Twisted reactor, we imported it earlier\nreactor.run()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for cTrader Open API\nDESCRIPTION: Imports necessary classes and modules from the ctrader-open-api package and other required libraries. This includes client connectivity, protocol buffers, and the Twisted framework for asynchronous operations.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ctrader_open_api import Client, Protobuf, TcpProtocol, Auth, EndPoints\nfrom ctrader_open_api.messages.OpenApiCommonMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiMessages_pb2 import *\nfrom ctrader_open_api.messages.OpenApiModelMessages_pb2 import *\nfrom twisted.internet import reactor\nimport json\nimport datetime\nimport calendar\n```\n\n----------------------------------------\n\nTITLE: Implementing Trendbar Transformation Function\nDESCRIPTION: Defines a function to transform the trend bar data from the API into a more usable format. Converts timestamps to datetime objects and prices from integer to floating-point values.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef transformTrendbar(trendbar):\n    openTime = datetime.datetime.fromtimestamp(trendbar.utcTimestampInMinutes * 60, datetime.timezone.utc)\n    openPrice = (trendbar.low + trendbar.deltaOpen) / 100000.0\n    highPrice = (trendbar.low + trendbar.deltaHigh) / 100000.0\n    lowPrice = trendbar.low / 100000.0\n    closePrice = (trendbar.low + trendbar.deltaClose) / 100000.0\n    return [openTime, openPrice, highPrice, lowPrice, closePrice, trendbar.volume]\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication URI with ctrader_open_api\nDESCRIPTION: Retrieves the authentication URI that users need to visit to authorize your application. This URL directs users to the cTrader Open API authentication page where they can grant permission for your app.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nauthUri = auth.getAuthUri()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenApiPy Package using pip\nDESCRIPTION: Command to install the ctrader-open-api package from PyPI\nSOURCE: https://github.com/spotware/openapipy/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ctrader-open-api\n```\n\n----------------------------------------\n\nTITLE: Installing OpenApiPy Package via pip\nDESCRIPTION: Command to install the cTrader Open API Python package using pip package manager.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ctrader-open-api\n```\n\n----------------------------------------\n\nTITLE: Installing cTrader Open API Python Package\nDESCRIPTION: Installs the ctrader-open-api Python package using pip, which is required for connecting to the cTrader Open API.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install ctrader-open-api\n```\n\n----------------------------------------\n\nTITLE: Loading API Credentials from JSON File\nDESCRIPTION: Reads API credentials from a JSON file named 'credentials-dev.json'. This file should contain the client ID, secret, account ID, access token, and host type (demo or live).\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncredentialsFile = open(\"credentials-dev.json\")\ncredentials = json.load(credentialsFile)\n```\n\n----------------------------------------\n\nTITLE: Creating Credentials File for OpenApiPy Jupyter Sample\nDESCRIPTION: Instructions for creating and configuring the credentials file needed to run the OpenApiPy Jupyter notebook sample. Users need to create a copy of 'credentials.json', rename it to 'credentials-dev.json', and fill it with Open API application credentials, access token, and trading account ID.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo use the sample you have to create a copy of \"credentials.json\" file and rename it to \"credentials-dev.json\".\n\nThen fill the file with your Open API application credentials, access token, and a trading account ID.\n```\n\n----------------------------------------\n\nTITLE: Processing Redirect URI Example in cTrader Authentication Flow\nDESCRIPTION: Demonstrates the format of the redirect URI after successful authentication. This is the URL format where the authorization code will be appended as a query parameter which you'll need to retrieve the access token.\nSOURCE: https://github.com/spotware/openapipy/blob/main/docs/authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://redirect-uri.com/?code={authorization-code-will-be-here}\n```\n\n----------------------------------------\n\nTITLE: Converting Trend Bars to Pandas DataFrame\nDESCRIPTION: Transforms the retrieved daily bars data into a pandas DataFrame with proper column names and data types for further analysis.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(np.array(dailyBars),\n                   columns=['Time', 'Open', 'High', 'Low', 'Close', 'Volume'])\ndf[\"Open\"] = pd.to_numeric(df[\"Open\"])\ndf[\"High\"] = pd.to_numeric(df[\"High\"])\ndf[\"Low\"] = pd.to_numeric(df[\"Low\"])\ndf[\"Close\"] = pd.to_numeric(df[\"Close\"])\ndf[\"Volume\"] = pd.to_numeric(df[\"Volume\"])\n```\n\n----------------------------------------\n\nTITLE: Training and Testing a Logistic Regression Model\nDESCRIPTION: Creates a logistic regression model using scikit-learn to predict whether the next day's price will close higher than its open. The data is split into training and testing sets, and model accuracy is evaluated.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nmodel = LogisticRegression()\n\nx = df.loc[:, [\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]]\ny = df.Labels\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.7)\n\nmodel.fit(x_train, y_train)\n\ny_pred= model.predict(x_test)\n\nprint(\"Our Model accuracy score is: \", accuracy_score(y_test, y_pred))\n```\n\n----------------------------------------\n\nTITLE: Creating Labels for Machine Learning Model\nDESCRIPTION: Creates a labels series for the machine learning model, where 1 indicates a bullish bar (close > open) and 0 indicates a bearish bar. The labels are shifted to predict the next day's bar type.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndf[\"Labels\"] = (df[\"Close\"] > df[\"Open\"]).astype(int)\ndf[\"Labels\"] = df[\"Labels\"].shift(-1)\ndf.drop(df.tail(1).index,inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Data Analysis Libraries\nDESCRIPTION: Imports pandas and numpy libraries for data manipulation and analysis of the retrieved trend bars data.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Setting Symbol for Analysis\nDESCRIPTION: Defines the symbol name to be used for retrieving trend bars data. This must match one of the symbol names available in the trading account.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsymbolName = \"EURUSD\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Storage for Daily Bars Data\nDESCRIPTION: Creates an empty list to store the daily bars data that will be retrieved from the API.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndailyBars = []\n```\n\n----------------------------------------\n\nTITLE: Displaying DataFrame Summary\nDESCRIPTION: Displays the last few rows of the DataFrame to examine the processed data before model training.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/jupyter/main.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndf.tail()\n```\n\n----------------------------------------\n\nTITLE: Installing Klein Framework for OpenApiPy Web App\nDESCRIPTION: Command to install the Klein web framework using pip, which is required to run the web application sample for Spotware OpenApiPy.\nSOURCE: https://github.com/spotware/openapipy/blob/main/samples/KleinWebAppSample/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install klein\n```"
  }
]