[
  {
    "owner": "encode",
    "repo": "httpx",
    "content": "TITLE: Basic HTTPX Usage Example in Python\nDESCRIPTION: Demonstrates basic HTTP GET request using HTTPX, including response handling and accessing response properties like status code, headers and content.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/index.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import httpx\n>>> r = httpx.get('https://www.example.org/')\n>>> r\n<Response [200 OK]>\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'text/html; charset=UTF-8'\n>>> r.text\n'<!doctype html>\\n<html>\\n<head>\\n<title>Example Domain</title>...'\n```\n\n----------------------------------------\n\nTITLE: Basic Client Usage with Context Manager\nDESCRIPTION: Shows how to properly use an HTTPX Client instance with a context manager for automatic connection cleanup.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith httpx.Client() as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Response Content Handling in HTTPX\nDESCRIPTION: Examples of handling response content, including text decoding, binary content, and JSON parsing.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> r = httpx.get('https://www.example.org/')\n>>> r.text\n>>> r.encoding\n>>> r.content\n>>> from PIL import Image\n>>> from io import BytesIO\n>>> i = Image.open(BytesIO(r.content))\n```\n\n----------------------------------------\n\nTITLE: Making Basic Async Request with AsyncClient\nDESCRIPTION: Example showing how to make a basic asynchronous GET request using HTTPX's AsyncClient within an async context manager.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> async with httpx.AsyncClient() as client:\n...     r = await client.get('https://www.example.com/')\n...\n>>> r\n<Response [200 OK]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Level Basic Authentication in HTTPX\nDESCRIPTION: Shows how to configure basic authentication at the client level so all requests automatically include credentials.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.BasicAuth(username=\"username\", password=\"secret\")\n>>> client = httpx.Client(auth=auth)\n>>> response = client.get(\"https://www.example.com/\")\n```\n\n----------------------------------------\n\nTITLE: Handling HTTPStatusError Exceptions in HTTPX\nDESCRIPTION: Shows how to handle HTTPStatusError exceptions in HTTPX, which are raised for non-2xx status codes. The example demonstrates accessing both request and response information from the exception.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = httpx.get(\"https://www.example.com/\")\ntry:\n    response.raise_for_status()\nexcept httpx.HTTPStatusError as exc:\n    print(f\"Error response {exc.response.status_code} while requesting {exc.request.url!r}.\")\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Requests with HTTPX\nDESCRIPTION: Shows how to import HTTPX and make basic GET, POST, PUT, DELETE, HEAD, and OPTIONS requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import httpx\n>>> r = httpx.get('https://httpbin.org/get')\n>>> r = httpx.post('https://httpbin.org/post', data={'key': 'value'})\n>>> r = httpx.put('https://httpbin.org/put', data={'key': 'value'})\n>>> r = httpx.delete('https://httpbin.org/delete')\n>>> r = httpx.head('https://httpbin.org/get')\n>>> r = httpx.options('https://httpbin.org/get')\n```\n\n----------------------------------------\n\nTITLE: Configuring Fine-Grained Timeout Settings in HTTPX\nDESCRIPTION: Demonstrates how to set up granular timeout configurations using the Timeout class, showing how to specify different timeout values for different operations like connecting versus other operations.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/timeouts.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# A client with a 60s timeout for connecting, and a 10s timeout elsewhere.\ntimeout = httpx.Timeout(10.0, connect=60.0)\nclient = httpx.Client(timeout=timeout)\n\nresponse = client.get('http://example.com/')\n```\n\n----------------------------------------\n\nTITLE: Basic HTTPX Logging Setup\nDESCRIPTION: Demonstrates basic logging configuration for HTTPX using Python's logging module. Sets up debug level logging with a custom format that includes timestamp, level, logger name and message.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/logging.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport httpx\n\nlogging.basicConfig(\n    format=\"%(levelname)s [%(asctime)s] %(name)s - %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n    level=logging.DEBUG\n)\n\nhttpx.get(\"https://www.example.com\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic HTTP Proxy in HTTPX\nDESCRIPTION: Configures an HTTPX Client to route all traffic (HTTP and HTTPS) through a proxy server located at http://localhost:8030.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/proxies.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith httpx.Client(proxy=\"http://localhost:8030\") as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic usage of HTTPX in Python\nDESCRIPTION: Shows a basic example of using HTTPX to make a GET request and inspect the response. It demonstrates how to send a request, check the status code, and access response headers and content.\nSOURCE: https://github.com/encode/httpx/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import httpx\n>>> r = httpx.get('https://www.example.org/')\n>>> r\n<Response [200 OK]>\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'text/html; charset=UTF-8'\n>>> r.text\n'<!doctype html>\\n<html>\\n<head>\\n<title>Example Domain</title>...'\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Certificates in HTTPX\nDESCRIPTION: Demonstrates how to set up client-side certificates for authentication to remote servers using HTTPX and the SSL context load_cert_chain method.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nctx = ssl.create_default_context()\nctx.load_cert_chain(certfile=\"path/to/client.pem\")  # Optionally also keyfile or password.\nclient = httpx.Client(verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging with HTTPX Event Hooks in Python\nDESCRIPTION: Demonstrates how to create basic request and response logging hooks in HTTPX. The example defines two functions: one that logs when a request is about to be sent, and another that logs when a response is received, including the status code.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/event-hooks.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = httpx.Client(event_hooks={'request': [log_request], 'response': [log_response]})\n```\n\n----------------------------------------\n\nTITLE: Creating Client Instances in HTTPX\nDESCRIPTION: Shows the equivalent of creating a Requests Session in HTTPX, which is done using the Client class. This is used for maintaining session state and configurations across multiple requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsession = requests.Session(**kwargs)\n```\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: File Upload and Form Data with HTTPX\nDESCRIPTION: Shows how to upload files and send form data using multipart encoding and JSON data.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> with open('report.xls', 'rb') as report_file:\n...     files = {'upload-file': report_file}\n...     r = httpx.post(\"https://httpbin.org/post\", files=files)\n\n>>> data = {'integer': 123, 'boolean': True, 'list': ['a', 'b', 'c']}\n>>> r = httpx.post(\"https://httpbin.org/post\", json=data)\n```\n\n----------------------------------------\n\nTITLE: Client-Level Configuration\nDESCRIPTION: Demonstrates setting client-level configuration that applies to all requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'http://httpbin.org/headers'\n>>> headers = {'user-agent': 'my-app/0.0.1'}\n>>> with httpx.Client(headers=headers) as client:\n...     r = client.get(url)\n...\n>>> r.json()['headers']['User-Agent']\n'my-app/0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses with HTTPX\nDESCRIPTION: Demonstrates how to handle streaming responses for large downloads, including binary, text, and line-by-line streaming.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> with httpx.stream(\"GET\", \"https://www.example.com\") as r:\n...     for data in r.iter_bytes():\n...         print(data)\n\n>>> with httpx.stream(\"GET\", \"https://www.example.com\") as r:\n...     for text in r.iter_text():\n...         print(text)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a URL Object in Python\nDESCRIPTION: Shows how to create an HTTPX URL object and access its properties. This example demonstrates the URL class's ability to handle normalized, IDNA-supporting URLs and access specific components like the host.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/api.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL(\"https://example.org/\")\n>>> url.host\n'example.org'\n```\n\n----------------------------------------\n\nTITLE: Constructing and Sending an HTTP Request in Python\nDESCRIPTION: Demonstrates how to create an HTTPX Request object with specific parameters and send it using a client. This example shows the flexibility of constructing requests explicitly for more control over the request details.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/api.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> request = httpx.Request(\"GET\", \"https://example.org\", headers={'host': 'example.org'})\n>>> response = client.send(request)\n```\n\n----------------------------------------\n\nTITLE: Using HTTPX Cookies Class for Domain-Specific Cookies\nDESCRIPTION: Demonstrates the usage of the HTTPX Cookies class to set domain-specific cookies. It shows how to create a Cookies instance, set cookies for different domains, and use them in a request.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> cookies = httpx.Cookies()\n>>> cookies.set('cookie_on_domain', 'hello, there!', domain='httpbin.org')\n>>> cookies.set('cookie_off_domain', 'nope.', domain='example.org')\n>>> r = httpx.get('http://httpbin.org/cookies', cookies=cookies)\n>>> r.json()\n{'cookies': {'cookie_on_domain': 'hello, there!'}}\n```\n\n----------------------------------------\n\nTITLE: URL Parameters in HTTPX\nDESCRIPTION: Demonstrates how to add query parameters to URLs using the params keyword argument, including support for multiple values per key.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> params = {'key1': 'value1', 'key2': 'value2'}\n>>> r = httpx.get('https://httpbin.org/get', params=params)\n>>> params = {'key1': 'value1', 'key2': ['value2', 'value3']}\n>>> r = httpx.get('https://httpbin.org/get', params=params)\n```\n\n----------------------------------------\n\nTITLE: Token Refresh Authentication Implementation\nDESCRIPTION: Custom authentication implementation that handles token refresh flows with response body access.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomAuth(httpx.Auth):\n    requires_response_body = True\n\n    def __init__(self, access_token, refresh_token, refresh_url):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.refresh_url = refresh_url\n\n    def auth_flow(self, request):\n        request.headers[\"X-Authentication\"] = self.access_token\n        response = yield request\n\n        if response.status_code == 401:\n            # If the server issues a 401 response, then issue a request to\n            # refresh tokens, and resend the request.\n            refresh_response = yield self.build_refresh_request()\n            self.update_tokens(refresh_response)\n\n            request.headers[\"X-Authentication\"] = self.access_token\n            yield request\n\n    def build_refresh_request(self):\n        # Return an `httpx.Request` for refreshing tokens.\n        ...\n\n    def update_tokens(self, response):\n        # Update the `.access_token` and `.refresh_token` tokens\n        # based on a refresh response.\n        data = response.json()\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using HTTP/2 AsyncClient with Context Manager\nDESCRIPTION: Demonstrates how to use HTTPX AsyncClient with HTTP/2 support in a context manager pattern, ensuring proper connection cleanup.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/http2.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with httpx.AsyncClient(http2=True) as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Request Basic Authentication in HTTPX\nDESCRIPTION: Demonstrates how to apply basic authentication for a single HTTP request using HTTPX client. Uses BasicAuth class with username and password credentials.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.BasicAuth(username=\"username\", password=\"secret\")\n>>> client = httpx.Client()\n>>> response = client.get(\"https://www.example.com/\", auth=auth)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Redirect Transport in Python for HTTPX\nDESCRIPTION: This example demonstrates how to implement a custom transport that always redirects HTTP requests to HTTPS, and how to use it with HTTPX's Mounts feature.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass HTTPSRedirect(httpx.BaseTransport):\n    \"\"\"\n    A transport that always redirects to HTTPS.\n    \"\"\"\n    def handle_request(self, request):\n        url = request.url.copy_with(scheme=\"https\")\n        return httpx.Response(303, headers={\"Location\": str(url)})\n\n# A client where any `http` requests are always redirected to `https`\ntransport = httpx.Mounts({\n    'http://': HTTPSRedirect()\n    'https://': httpx.HTTPTransport()\n})\nclient = httpx.Client(transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX using pip\nDESCRIPTION: Demonstrates how to install HTTPX using pip. This is the basic installation command for HTTPX.\nSOURCE: https://github.com/encode/httpx/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy and Making Requests in Python with HTTPX\nDESCRIPTION: This snippet demonstrates how to set an HTTP proxy using an environment variable and make requests with HTTPX. It shows both a request that uses the proxy and one that bypasses it by setting trust_env=False.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/environment_variables.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTP_PROXY=http://my-external-proxy.com:1234\n\n# This request will be sent through the proxy\npython -c \"import httpx; httpx.get('http://example.com')\"\n\n# This request will be sent directly, as we set `trust_env=False`\npython -c \"import httpx; httpx.get('http://example.com', trust_env=False)\"\n```\n\n----------------------------------------\n\nTITLE: Using AsyncClient with Context Manager\nDESCRIPTION: Shows how to properly initialize and use an AsyncClient with a context manager for automatic resource cleanup.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync with httpx.AsyncClient() as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Download Progress Monitoring with Rich\nDESCRIPTION: Example of monitoring download progress using Rich progress bar library.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\nimport httpx\nimport rich.progress\n\nwith tempfile.NamedTemporaryFile() as download_file:\n    url = \"https://speed.hetzner.de/100MB.bin\"\n    with httpx.stream(\"GET\", url) as response:\n        total = int(response.headers[\"Content-Length\"])\n\n        with rich.progress.Progress(\n            \"[progress.percentage]{task.percentage:>3.0f}%\",\n            rich.progress.BarColumn(bar_width=None),\n            rich.progress.DownloadColumn(),\n            rich.progress.TransferSpeedColumn(),\n        ) as progress:\n            download_task = progress.add_task(\"Download\", total=total)\n            for chunk in response.iter_bytes():\n                download_file.write(chunk)\n                progress.update(download_task, completed=response.num_bytes_downloaded)\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Request Timeouts in HTTPX\nDESCRIPTION: Demonstrates how to set timeouts for individual HTTP requests using both the top-level API and client instance approaches. Shows setting a specific timeout value of 10.0 seconds.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/timeouts.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Using the top-level API:\nhttpx.get('http://example.com/api/v1/example', timeout=10.0)\n\n# Using a client instance:\nwith httpx.Client() as client:\n    client.get(\"http://example.com/api/v1/example\", timeout=10.0)\n```\n\n----------------------------------------\n\nTITLE: Using Default Encoding in HTTPX (Python)\nDESCRIPTION: This snippet demonstrates the default behavior of HTTPX for text decoding. It shows how to instantiate a client, make a request, and access the response encoding and text.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/text-encodings.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n# Instantiate a client with the default configuration.\nclient = httpx.Client()\n# Using the client...\nresponse = client.get(...)\nprint(response.encoding)  # This will either print the charset given in\n                          # the Content-Type charset, or else \"utf-8\".\nprint(response.text)  # The text will either be decoded with the Content-Type\n                      # charset, or using \"utf-8\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Proxies for HTTP and HTTPS in HTTPX\nDESCRIPTION: Sets up an HTTPX Client with different proxy servers for HTTP and HTTPS traffic using the mounts dictionary, with HTTP requests routed through port 8030 and HTTPS through port 8031.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/proxies.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nproxy_mounts = {\n    \"http://\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n    \"https://\": httpx.HTTPTransport(proxy=\"http://localhost:8031\"),\n}\n\nwith httpx.Client(mounts=proxy_mounts) as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Uploading Text Content with HTTPX\nDESCRIPTION: Shows how to upload plain text content as a file using HTTPX. Demonstrates setting a custom MIME type and handling content without a filename.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> files = {'upload-file': (None, 'text content', 'text/plain')}\n>>> r = httpx.post(\"https://httpbin.org/post\", files=files)\n>>> print(r.text)\n{\n  ...\n  \"files\": {},\n  \"form\": {\n    \"upload-file\": \"text-content\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Redirect Following in HTTPX\nDESCRIPTION: Demonstrates how to enable automatic redirect following in HTTPX, which is not enabled by default unlike Requests. This can be done on a per-request basis or by configuring a client instance.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.get(url, follow_redirects=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client(follow_redirects=True)\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Handling\nDESCRIPTION: Example of handling streaming responses using async iterators with AsyncClient.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> client = httpx.AsyncClient()\n>>> async with client.stream('GET', 'https://www.example.com/') as response:\n...     async for chunk in response.aiter_bytes():\n...         ...\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in HTTPX\nDESCRIPTION: Illustrates HTTPX's default behavior for handling redirects and how to modify it. The example shows a request to GitHub, which redirects HTTP to HTTPS, and demonstrates accessing redirect information.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> r = httpx.get('http://github.com/')\n>>> r.status_code\n301\n>>> r.history\n[]\n>>> r.next_request\n<Request('GET', 'https://github.com/')>\n```\n\n----------------------------------------\n\nTITLE: Upload Progress Monitoring\nDESCRIPTION: Example of monitoring upload progress using tqdm progress bar library with a content generator.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport random\n\nimport httpx\nfrom tqdm import tqdm\n\n\ndef gen():\n    \"\"\"\n    this is a complete example with generated random bytes.\n    you can replace `io.BytesIO` with real file object.\n    \"\"\"\n    total = 32 * 1024 * 1024  # 32m\n    with tqdm(ascii=True, unit_scale=True, unit='B', unit_divisor=1024, total=total) as bar:\n        with io.BytesIO(random.randbytes(total)) as f:\n            while data := f.read(1024):\n                yield data\n                bar.update(len(data))\n\n\nhttpx.post(\"https://httpbin.org/post\", content=gen())\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication in HTTPX\nDESCRIPTION: Shows how to use Basic HTTP authentication in HTTPX by passing credentials as a tuple to the 'auth' parameter in a GET request.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> httpx.get(\"https://example.com\", auth=(\"my_user\", \"password123\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Transport Routing in HTTPX\nDESCRIPTION: Sets up global routing through a proxy for all requests using the all:// scheme.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default SSL Verification Behavior in HTTPX\nDESCRIPTION: Shows how HTTPX by default verifies HTTPS connections and raises errors for invalid SSL certificates, such as expired certificates.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> httpx.get(\"https://expired.badssl.com/\")\nhttpx.ConnectError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:997)\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for SSL Certificate Paths in HTTPX\nDESCRIPTION: Shows how to explicitly configure HTTPX to use SSL_CERT_FILE or SSL_CERT_DIR environment variables, with fallback to certifi when those variables aren't set.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Use `SSL_CERT_FILE` or `SSL_CERT_DIR` if configured.\n# Otherwise default to certifi.\nctx = ssl.create_default_context(\n    cafile=os.environ.get(\"SSL_CERT_FILE\", certifi.where()),\n    capath=os.environ.get(\"SSL_CERT_DIR\"),\n)\nclient = httpx.Client(verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timeouts in HTTPX\nDESCRIPTION: Demonstrates how to set custom timeout values for HTTPX requests. It shows examples of setting a very short timeout and disabling timeouts altogether.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> httpx.get('https://github.com/', timeout=0.001)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> httpx.get('https://github.com/', timeout=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeouts with Extensions in Python HTTPX\nDESCRIPTION: Demonstrates how to set request timeouts using the extensions parameter in HTTPX client. The timeout values are passed through the entire call stack.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/extensions.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()\nresponse = client.get(\n    \"https://www.example.com\",\n    extensions={\"timeout\": {\"connect\": 5.0}}\n)\nresponse.request.extensions[\"timeout\"]\n{\"connect\": 5.0}\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request with Client\nDESCRIPTION: Example of making a simple GET request using an HTTPX Client instance.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> with httpx.Client() as client:\n...     r = client.get('https://example.com')\n...\n>>> r\n<Response [200 OK]>\n```\n\n----------------------------------------\n\nTITLE: Loading Alternative Certificate Store in HTTPX\nDESCRIPTION: Shows how to configure HTTPX to use an alternative certificate verification store using Python's standard SSL context API.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nimport ssl\n\n# Use an explicitly configured certificate store.\nctx = ssl.create_default_context(cafile=\"path/to/certs.pem\")  # Either cafile or capath.\nclient = httpx.Client(verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Transport with Custom Configuration in Python\nDESCRIPTION: This snippet demonstrates how to create an HTTP transport with a custom local address and connection retries, then use it with an HTTPX client.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import httpx\n>>> transport = httpx.HTTPTransport(local_address=\"0.0.0.0\")\n>>> client = httpx.Client(transport=transport)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import httpx\n>>> transport = httpx.HTTPTransport(retries=1)\n>>> client = httpx.Client(transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Advanced HTTPX Logging Configuration\nDESCRIPTION: Shows a more complex logging setup using dictionary configuration style. Configures separate handlers for httpx and httpcore loggers with custom formatting and output streams.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/logging.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging.config\nimport httpx\n\nLOGGING_CONFIG = {\n    \"version\": 1,\n    \"handlers\": {\n        \"default\": {\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"http\",\n            \"stream\": \"ext://sys.stderr\"\n        }\n    },\n    \"formatters\": {\n        \"http\": {\n            \"format\": \"%(levelname)s [%(asctime)s] %(name)s - %(message)s\",\n            \"datefmt\": \"%Y-%m-%d %H:%M:%S\",\n        }\n    },\n    'loggers': {\n        'httpx': {\n            'handlers': ['default'],\n            'level': 'DEBUG',\n        },\n        'httpcore': {\n            'handlers': ['default'],\n            'level': 'DEBUG',\n        },\n    }\n}\n\nlogging.config.dictConfig(LOGGING_CONFIG)\nhttpx.get('https://www.example.com')\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in HTTPX Response\nDESCRIPTION: Demonstrates how to access cookies set by a server in an HTTPX response. The example shows sending a GET request to a URL that sets a cookie and then retrieving its value.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> r = httpx.get('https://httpbin.org/cookies/set?chocolate=chip')\n>>> r.cookies['chocolate']\n'chip'\n```\n\n----------------------------------------\n\nTITLE: Configuration Merging Example\nDESCRIPTION: Shows how client-level and request-level configuration options are merged.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> headers = {'X-Auth': 'from-client'}\n>>> params = {'client_id': 'client1'}\n>>> with httpx.Client(headers=headers, params=params) as client:\n...     headers = {'X-Custom': 'from-request'}\n...     params = {'request_id': 'request1'}\n...     r = client.get('https://example.com', headers=headers, params=params)\n...\n>>> r.request.url\nURL('https://example.com?client_id=client1&request_id=request1')\n>>> r.request.headers['X-Auth']\n'from-client'\n>>> r.request.headers['X-Custom']\n'from-request'\n```\n\n----------------------------------------\n\nTITLE: Sending Cookies with HTTPX Request\nDESCRIPTION: Shows how to include cookies in an outgoing HTTPX request using the 'cookies' parameter. The example sends a GET request with a custom cookie and displays the server's response.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> cookies = {\"peanut\": \"butter\"}\n>>> r = httpx.get('https://httpbin.org/cookies', cookies=cookies)\n>>> r.json()\n{'cookies': {'peanut': 'butter'}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain-Specific HTTP/2 Settings in HTTPX\nDESCRIPTION: Demonstrates how to enable HTTP/2 globally while disabling it for specific domains using transport mounts.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://\": httpx.HTTPTransport(http2=True),\n    \"all://*example.org\": httpx.HTTPTransport()\n}\nclient = httpx.Client(mounts=mounts)\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Example with HTTPX\nDESCRIPTION: Complete example of using basic authentication with HTTPX against a test endpoint.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.BasicAuth(username=\"finley\", password=\"secret\")\n>>> client = httpx.Client(auth=auth)\n>>> response = client.get(\"https://httpbin.org/basic-auth/finley/secret\")\n>>> response\n<Response [200 OK]>\n```\n\n----------------------------------------\n\nTITLE: Streaming Response with Starlette Integration\nDESCRIPTION: Shows how to integrate HTTPX streaming responses with Starlette web framework for proxy-like functionality.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom starlette.background import BackgroundTask\nfrom starlette.responses import StreamingResponse\n\nclient = httpx.AsyncClient()\n\nasync def home(request):\n    req = client.build_request(\"GET\", \"https://www.example.com/\")\n    r = await client.send(req, stream=True)\n    return StreamingResponse(r.aiter_text(), background=BackgroundTask(r.aclose))\n```\n\n----------------------------------------\n\nTITLE: Authenticating with HTTP Proxy in HTTPX\nDESCRIPTION: Demonstrates how to include username and password credentials in the proxy URL for authentication with the proxy server.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/proxies.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith httpx.Client(proxy=\"http://username:password@localhost:8030\") as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Uploading Content in HTTPX\nDESCRIPTION: Demonstrates the preferred way to upload raw content and form data in HTTPX. It uses 'content' for raw data and 'data' for form data, providing a clearer separation of concerns.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Uploading text, bytes, or a bytes iterator.\nhttpx.post(..., content=b\"Hello, world\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Uploading form data.\nhttpx.post(..., data={\"message\": \"Hello, world\"})\n```\n\n----------------------------------------\n\nTITLE: Digest Authentication Implementation in HTTPX\nDESCRIPTION: Demonstrates digest authentication implementation which provides encrypted credentials and requires an additional round-trip negotiation.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.DigestAuth(username=\"olivia\", password=\"secret\")\n>>> client = httpx.Client(auth=auth)\n>>> response = client.get(\"https://httpbin.org/digest-auth/auth/olivia/secret\")\n>>> response\n<Response [200 OK]>\n>>> response.history\n[<Response [401 UNAUTHORIZED]>]\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Protocol Version\nDESCRIPTION: Shows how to inspect which HTTP protocol version was used for a request by accessing the http_version property on the response object.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/http2.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.AsyncClient(http2=True)\nresponse = await client.get(...)\nprint(response.http_version)  # \"HTTP/1.0\", \"HTTP/1.1\", or \"HTTP/2\".\n```\n\n----------------------------------------\n\nTITLE: Implementing Digest Authentication in HTTPX\nDESCRIPTION: Demonstrates how to use Digest authentication in HTTPX by creating a DigestAuth object with credentials and passing it to the 'auth' parameter in a GET request.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.DigestAuth(\"my_user\", \"password123\")\n>>> httpx.get(\"https://example.com\", auth=auth)\n<Response [200 OK]>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Target Extensions for Non-Standard HTTP Requests\nDESCRIPTION: Demonstrates how to use the target extension to send requests with non-standard path escaping and special HTTP requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/extensions.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nextensions = {\"target\": b\"/test^path\"}\nresponse = httpx.get(\"https://www.example.com\", extensions=extensions)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Client Timeouts in HTTPX\nDESCRIPTION: Illustrates different ways to configure default timeout behavior when creating an HTTPX client instance, including default 5s timeout, custom 10s timeout, and disabled timeouts.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/timeouts.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()              # Use a default 5s timeout everywhere.\nclient = httpx.Client(timeout=10.0)  # Use a default 10s timeout everywhere.\nclient = httpx.Client(timeout=None)  # Disable all timeouts by default.\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Version Information from Response Extensions\nDESCRIPTION: Shows how to retrieve the HTTP version information from response extensions. The version is returned as bytes.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/extensions.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()\nresponse = client.get(\"https://www.example.com\")\nprint(response.extensions[\"http_version\"])  # b\"HTTP/1.1\"\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL Verification in HTTPX\nDESCRIPTION: Demonstrates how to disable SSL verification to allow insecure requests in HTTPX by setting verify=False when making HTTP requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> httpx.get(\"https://expired.badssl.com/\", verify=False)\n<Response [200 OK]>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in HTTPX Client\nDESCRIPTION: Shows the correct way to set cookies in HTTPX, which should always be done on the client instance rather than per-request. This ensures consistent cookie handling, especially during redirects.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client(cookies=...)\nclient.post(...)\n```\n\n----------------------------------------\n\nTITLE: Manual Client Cleanup\nDESCRIPTION: Demonstrates explicit client cleanup using try/finally block when not using context manager.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()\ntry:\n    ...\nfinally:\n    client.close()\n```\n\n----------------------------------------\n\nTITLE: Accessing Network Stream Information via Extensions\nDESCRIPTION: Shows how to access low-level network information through the network_stream extension.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/extensions.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = httpx.get(\"https://www.example.com\")\nnetwork_stream = response.extensions[\"network_stream\"]\n\nclient_addr = network_stream.get_extra_info(\"client_addr\")\nserver_addr = network_stream.get_extra_info(\"server_addr\")\nprint(\"Client address\", client_addr)\nprint(\"Server address\", server_addr)\n```\n\n----------------------------------------\n\nTITLE: Auto-raising Exceptions for Error Status Codes in HTTPX\nDESCRIPTION: Shows how to create an HTTPX client that automatically raises HTTPStatusError for 4xx and 5xx responses. This eliminates the need to call raise_for_status() after each request in the application code.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/event-hooks.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef raise_on_4xx_5xx(response):\n    response.raise_for_status()\n\nclient = httpx.Client(event_hooks={'response': [raise_on_4xx_5xx]})\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP/2 AsyncClient\nDESCRIPTION: Creates an instance of HTTPX AsyncClient with HTTP/2 support enabled using direct instantiation.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/http2.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.AsyncClient(http2=True)\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring SNI Hostname with IP Address Connection\nDESCRIPTION: Shows how to connect to an explicit IP address while specifying a different hostname for SSL verification and Host header.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/extensions.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()\nheaders = {\"Host\": \"www.encode.io\"}\nextensions = {\"sni_hostname\": \"www.encode.io\"}\nresponse = client.get(\n    \"https://185.199.108.153/path\",\n    headers=headers,\n    extensions=extensions\n)\n```\n\n----------------------------------------\n\nTITLE: Manual AsyncClient Cleanup\nDESCRIPTION: Demonstrates how to manually create and close an AsyncClient when context manager usage isn't suitable.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.AsyncClient()\n...\nawait client.aclose()\n```\n\n----------------------------------------\n\nTITLE: Modifying Requests with HTTPX Event Hooks in Python\nDESCRIPTION: Example showing how to modify requests before they are sent by adding custom headers. The hook adds a timestamp header to every outgoing request, which could be useful for debugging or auditing purposes.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/event-hooks.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef add_timestamp(request):\n    request.headers['x-request-timestamp'] = datetime.now(tz=datetime.utc).isoformat()\n\nclient = httpx.Client(event_hooks={'request': [add_timestamp]})\n```\n\n----------------------------------------\n\nTITLE: Download Progress Monitoring with tqdm\nDESCRIPTION: Example of monitoring download progress using tqdm progress bar library.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\n\nimport httpx\nfrom tqdm import tqdm\n\nwith tempfile.NamedTemporaryFile() as download_file:\n    url = \"https://speed.hetzner.de/100MB.bin\"\n    with httpx.stream(\"GET\", url) as response:\n        total = int(response.headers[\"Content-Length\"])\n\n        with tqdm(total=total, unit_scale=True, unit_divisor=1024, unit=\"B\") as progress:\n            num_bytes_downloaded = response.num_bytes_downloaded\n            for chunk in response.iter_bytes():\n                download_file.write(chunk)\n                progress.update(response.num_bytes_downloaded - num_bytes_downloaded)\n                num_bytes_downloaded = response.num_bytes_downloaded\n```\n\n----------------------------------------\n\nTITLE: Configuring SOCKS Proxy with HTTPX\nDESCRIPTION: Shows how to set up an HTTPX Client to make requests through a SOCKS5 proxy with authentication credentials.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/proxies.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhttpx.Client(proxy='socks5://user:pass@host:port')\n```\n\n----------------------------------------\n\nTITLE: Custom Headers Request\nDESCRIPTION: Shows how to send a request with custom headers using an HTTPX Client.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> with httpx.Client() as client:\n...     headers = {'X-Custom': 'value'}\n...     r = client.get('https://example.com', headers=headers)\n...\n>>> r.request.headers['X-Custom']\n'value'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker API via Unix Domain Socket in Python\nDESCRIPTION: This example shows how to use HTTPX to connect to the Docker API through a Unix Domain Socket by configuring a custom HTTP transport.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import httpx\n>>> # Connect to the Docker API via a Unix Socket.\n>>> transport = httpx.HTTPTransport(uds=\"/var/run/docker.sock\")\n>>> client = httpx.Client(transport=transport)\n>>> response = client.get(\"http://docker/info\")\n>>> response.json()\n{\"ID\": \"...\", \"Containers\": 4, \"Images\": 74, ...}\n```\n\n----------------------------------------\n\nTITLE: Catching General HTTPError Exceptions in HTTPX\nDESCRIPTION: Demonstrates how to catch the base HTTPError exception in HTTPX, which covers both request failures and non-2xx status codes. This approach provides a more general error handling strategy.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response = httpx.get(\"https://www.example.com/\")\n    response.raise_for_status()\nexcept httpx.HTTPError as exc:\n    print(f\"Error while requesting {exc.request.url!r}.\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Redirect Following in HTTPX\nDESCRIPTION: Shows how to enable automatic following of redirects in HTTPX using the 'follow_redirects' parameter. The example demonstrates a request to GitHub with redirect following enabled.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> r = httpx.get('http://github.com/', follow_redirects=True)\n>>> r.url\nURL('https://github.com/')\n>>> r.status_code\n200\n>>> r.history\n[<Response [301 Moved Permanently]>]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPX with Proxy and SSL - Python\nDESCRIPTION: Example code showing how to configure HTTPX client with a proxy and SSL certificates for development.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/contributing.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nctx = ssl.create_default_context(cafile=\"/path/to/client.pem\")\nclient = httpx.Client(proxy=\"http://127.0.0.1:8080/\", verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSL Context with Certifi in HTTPX\nDESCRIPTION: Shows how to create and use a custom SSL context with the certifi CA bundle in HTTPX. This is equivalent to the default verify=True behavior.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport certifi\nimport httpx\nimport ssl\n\n# This SSL context is equivelent to the default `verify=True`.\nctx = ssl.create_default_context(cafile=certifi.where())\nclient = httpx.Client(verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: HTTPX Exception Hierarchy Structure in Markdown\nDESCRIPTION: A hierarchical representation of all exception classes in HTTPX showing their inheritance relationships. The structure shows the main HTTPError class and its various subclasses including RequestError, HTTPStatusError, and related specialized exceptions.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/exceptions.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* HTTPError\n    * RequestError\n        * TransportError\n            * TimeoutException\n                * ConnectTimeout\n                * ReadTimeout\n                * WriteTimeout\n                * PoolTimeout\n            * NetworkError\n                * ConnectError\n                * ReadError\n                * WriteError\n                * CloseError\n            * ProtocolError\n                * LocalProtocolError\n                * RemoteProtocolError\n            * ProxyError\n            * UnsupportedProtocol\n        * DecodingError\n        * TooManyRedirects\n    * HTTPStatusError\n* InvalidURL\n* CookieConflict\n* StreamError\n    * StreamConsumed\n    * ResponseNotRead\n    * RequestNotRead\n    * StreamClosed\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX with HTTP/2 support\nDESCRIPTION: Demonstrates how to install HTTPX with optional HTTP/2 support using pip.\nSOURCE: https://github.com/encode/httpx/blob/master/README.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx[http2]\n```\n\n----------------------------------------\n\nTITLE: Simplified Client Proxy Configuration\nDESCRIPTION: A more concise way to configure proxies for both HTTP and HTTPS requests using the Client constructor's proxy parameter.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/troubleshooting.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nproxy = \"http://myproxy.org\"\nwith httpx.Client(proxy=proxy) as client:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using ASGI Transport with Starlette Application in Python\nDESCRIPTION: This snippet demonstrates how to use HTTPX's ASGI transport to make requests directly to a Starlette application in an asynchronous context.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.responses import HTMLResponse\nfrom starlette.routing import Route\n\n\nasync def hello(request):\n    return HTMLResponse(\"Hello World!\")\n\n\napp = Starlette(routes=[Route(\"/\", hello)])\n```\n\nLANGUAGE: python\nCODE:\n```\ntransport = httpx.ASGITransport(app=app)\n\nasync with httpx.AsyncClient(transport=transport, base_url=\"http://testserver\") as client:\n    r = await client.get(\"/\")\n    assert r.status_code == 200\n    assert r.text == \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Working with Case-Insensitive Headers in Python\nDESCRIPTION: Illustrates the creation and usage of the HTTPX Headers class, which is a case-insensitive multi-dict. This example shows how to initialize headers and access them regardless of case sensitivity.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/api.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> headers = Headers({'Content-Type': 'application/json'})\n>>> headers['content-type']\n'application/json'\n```\n\n----------------------------------------\n\nTITLE: Uploading Single File with HTTPX\nDESCRIPTION: Demonstrates how to upload a single file using HTTPX's multipart form encoding. Opens an XLS file and sends it to a server with a specified MIME type.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> with open('report.xls', 'rb') as report_file:\n...     files = {'upload-file': ('report.xls', report_file, 'application/vnd.ms-excel')}\n...     r = httpx.post(\"https://httpbin.org/post\", files=files)\n>>> print(r.text)\n{\n  ...\n  \"files\": {\n    \"upload-file\": \"<... binary content ...\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Requests with Custom Transport in Python\nDESCRIPTION: Demonstrates the new low-level Transport API for handling HTTP requests. The API has been simplified to return a response object directly from the handle_request method.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = transport.handle_request(request)\ntry:\n    ...\nfinally:\n    response.close()\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files with HTTPX\nDESCRIPTION: Demonstrates how to upload multiple files in a single request using HTTPX. Uses a list of tuples to send multiple files with the same form field name.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/clients.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> with open('foo.png', 'rb') as foo_file, open('bar.png', 'rb') as bar_file:\n...     files = [\n...         ('images', ('foo.png', foo_file, 'image/png')),\n...         ('images', ('bar.png', bar_file, 'image/png')),\n...     ]\n...     r = httpx.post(\"https://httpbin.org/post\", files=files)\n```\n\n----------------------------------------\n\nTITLE: Using Connection Limits in HTTPX\nDESCRIPTION: Shows the migration from PoolLimits to Limits in HTTPX 0.14.0, with the new parameter naming convention.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhttpx.Limits(max_keepalive_connections=...)\n```\n\n----------------------------------------\n\nTITLE: Simple Custom Authentication Class in HTTPX\nDESCRIPTION: Basic implementation of a custom authentication class that adds a custom header to requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomAuth(httpx.Auth):\n    def __init__(self, token):\n        self.token = token\n\n    def auth_flow(self, request):\n        # Send the request, with a custom `X-Authentication` header.\n        request.headers['X-Authentication'] = self.token\n        yield request\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Transport for Domain Testing in HTTPX\nDESCRIPTION: Shows how to mock responses for a specific domain while allowing other requests to proceed normally.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef handler(request):\n    return httpx.Response(200, json={\"text\": \"Hello, World!\"})\n\nmounts = {\"all://example.org\": httpx.MockTransport(handler)}\nclient = httpx.Client(mounts=mounts)\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses in HTTPX\nDESCRIPTION: Illustrates how to handle streaming responses in HTTPX using the .stream() method. This approach ensures proper resource management and provides clear blocks for streaming I/O operations.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith httpx.stream(\"GET\", \"https://www.example.com\") as response:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX Package with pip\nDESCRIPTION: Basic installation command for the HTTPX package using pip package manager.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transport in Python for HTTPX\nDESCRIPTION: This snippet shows how to create a custom transport class that always returns a JSON 'Hello, world!' response, regardless of the request.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport httpx\n\nclass HelloWorldTransport(httpx.BaseTransport):\n    \"\"\"\n    A mock transport that always returns a JSON \"Hello, world!\" response.\n    \"\"\"\n\n    def handle_request(self, request):\n        return httpx.Response(200, json={\"text\": \"Hello, world!\"})\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP/2 Dependencies with pip\nDESCRIPTION: Command to install HTTPX with optional HTTP/2 dependencies using pip package manager.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/http2.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx[http2]\n```\n\n----------------------------------------\n\nTITLE: Disabling Timeouts for Individual Requests in HTTPX\nDESCRIPTION: Shows how to disable timeouts for specific HTTP requests by setting timeout=None, demonstrated with both top-level API and client instance methods.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/timeouts.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Using the top-level API:\nhttpx.get('http://example.com/api/v1/example', timeout=None)\n\n# Using a client instance:\nwith httpx.Client() as client:\n    client.get(\"http://example.com/api/v1/example\", timeout=None)\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX CLI Interface\nDESCRIPTION: Installation command for the optional HTTPX command-line interface using pip.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/index.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# The command line client is an optional dependency.\n$ pip install 'httpx[cli]'\n```\n\n----------------------------------------\n\nTITLE: Using Truststore Package for System Certificate Stores in HTTPX\nDESCRIPTION: Demonstrates using the truststore package to support system certificate stores with HTTPX, providing an alternative to the default certifi bundle.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\nimport truststore\nimport httpx\n\n# Use system certificate stores.\nctx = truststore.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\nclient = httpx.Client(verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Context for HTTPX\nDESCRIPTION: Shows the new helper function introduced in HTTPX 0.14.0 for creating SSL contexts.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhttpx.create_ssl_context()\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Encoding in HTTPX (Python)\nDESCRIPTION: This example shows how to set an explicit default encoding when instantiating an HTTPX client. It uses 'shift-jis' as the default encoding for Japanese character set.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/text-encodings.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n# Instantiate a client with a Japanese character set as the default encoding.\nclient = httpx.Client(default_encoding=\"shift-jis\")\n# Using the client...\nresponse = client.get(...)\nprint(response.encoding)  # This will either print the charset given in\n                          # the Content-Type charset, or else \"shift-jis\".\nprint(response.text)  # The text will either be decoded with the Content-Type\n                      # charset, or using \"shift-jis\".\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX Pre-release Version\nDESCRIPTION: Command to install the pre-release development version of HTTPX using pip.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install httpx --pre\n```\n\n----------------------------------------\n\nTITLE: NetRC Authentication Setup in HTTPX\nDESCRIPTION: Various ways to configure NetRC authentication including default location, explicit path, and environment variable usage.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.NetRCAuth()\n>>> client = httpx.Client(auth=auth)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.NetRCAuth(file=\"/path/to/.netrc\")\n>>> client = httpx.Client(auth=auth)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> auth = httpx.NetRCAuth(file=os.environ.get(\"NETRC\"))\n>>> client = httpx.Client(auth=auth)\n```\n\n----------------------------------------\n\nTITLE: Development Tools - Shell Commands\nDESCRIPTION: Commands for running code formatting, linting and documentation tools.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/contributing.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/lint\n$ scripts/check\n$ scripts/docs\n```\n\n----------------------------------------\n\nTITLE: Installing SOCKS Proxy Support for HTTPX\nDESCRIPTION: Command to install the optional SOCKS protocol support for HTTPX using pip, which requires the additional 'socks' dependencies.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/proxies.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx[socks]\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX Development Dependencies - Shell Commands\nDESCRIPTION: Commands for installing HTTPX and its development dependencies after cloning.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/contributing.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd httpx\n$ scripts/install\n```\n\n----------------------------------------\n\nTITLE: Using WSGI Transport with Flask Application in Python\nDESCRIPTION: This snippet demonstrates how to use HTTPX's WSGI transport to make requests directly to a Flask application without going through a network.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nimport httpx\n\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\ntransport = httpx.WSGITransport(app=app)\nwith httpx.Client(transport=transport, base_url=\"http://testserver\") as client:\n    r = client.get(\"/\")\n    assert r.status_code == 200\n    assert r.text == \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: NetRC Configuration File Example\nDESCRIPTION: Example .netrc configuration file format for storing authentication credentials.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmachine example.org\nlogin example-username\npassword example-password\n\nmachine python-httpx.org\nlogin other-username\npassword other-password\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Redirect Transport in HTTPX\nDESCRIPTION: Sets up an HTTPX client that automatically redirects all HTTP requests to HTTPS.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmounts = {'http://': HTTPSRedirectTransport()}\nclient = httpx.Client(mounts=mounts)\n```\n\n----------------------------------------\n\nTITLE: Charset Detection Dependency for Testing\nDESCRIPTION: Installs the chardet library for character encoding auto-detection, which is used in the project's test cases.\nSOURCE: https://github.com/encode/httpx/blob/master/requirements.txt#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nchardet==5.2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheme-Based Proxy Routing in HTTPX\nDESCRIPTION: Configures different proxy servers for HTTP and HTTPS requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"http://\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n    \"https://\": httpx.HTTPTransport(proxy=\"http://localhost:8031\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging Dependencies\nDESCRIPTION: Installs tools needed for building and publishing Python packages, including the build package for creating distribution archives and twine for uploading to PyPI.\nSOURCE: https://github.com/encode/httpx/blob/master/requirements.txt#2025-04-08_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild==1.2.2.post1\ntwine==6.0.1\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies with HTTPX in Python\nDESCRIPTION: Demonstrates the usage of the HTTPX Cookies class, which provides a dict-like interface for managing cookies. This example shows how to create a Cookies object and set a cookie with specific attributes.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/api.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> cookies = Cookies()\n>>> cookies.set(\"name\", \"value\", domain=\"example.org\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts in HTTPX\nDESCRIPTION: Shows how to configure timeouts in HTTPX to match Requests' default behavior of no timeouts. HTTPX includes reasonable default timeouts for all network operations.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhttpx.get('https://www.example.com', timeout=None)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Query Parameters in HTTPX URLs\nDESCRIPTION: Demonstrates methods for manipulating query parameters on HTTPX URL objects, including setting, adding, removing, and merging parameters.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nurl.copy_set_param()\nurl.copy_add_param()\nurl.copy_remove_param()\nurl.copy_merge_params()\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Authentication with Response Handling\nDESCRIPTION: Custom authentication implementation that handles 401 responses and resends requests with authentication.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomAuth(httpx.Auth):\n    def __init__(self, token):\n        self.token = token\n\n    def auth_flow(self, request):\n      response = yield request\n      if response.status_code == 401:\n          # If the server issues a 401 response then resend the request,\n          # with a custom `X-Authentication` header.\n          request.headers['X-Authentication'] = self.token\n          yield request\n```\n\n----------------------------------------\n\nTITLE: AsyncIO Environment Setup\nDESCRIPTION: Example of setting up and using HTTPX with AsyncIO async environment.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport httpx\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        response = await client.get('https://www.example.com/')\n        print(response)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication with Request Body Access\nDESCRIPTION: Implementation of custom authentication that requires access to request body content for signing requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomAuth(httpx.Auth):\n    requires_request_body = True\n\n    def __init__(self, token):\n        self.token = token\n\n    def auth_flow(self, request):\n      response = yield request\n      if response.status_code == 401:\n          # If the server issues a 401 response then resend the request,\n          # with a custom `X-Authentication` header.\n          request.headers['X-Authentication'] = self.sign_request(...)\n          yield request\n\n    def sign_request(self, request):\n        # Create a request signature, based on `request.method`, `request.url`,\n        # `request.headers`, and `request.content`.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Sync and Async Custom Authentication\nDESCRIPTION: Implementation of custom authentication that supports both synchronous and asynchronous operations with proper locking mechanisms.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport threading\nimport httpx\n\n\nclass MyCustomAuth(httpx.Auth):\n    def __init__(self):\n        self._sync_lock = threading.RLock()\n        self._async_lock = asyncio.Lock()\n\n    def sync_get_token(self):\n        with self._sync_lock:\n            ...\n\n    def sync_auth_flow(self, request):\n        token = self.sync_get_token()\n        request.headers[\"Authorization\"] = f\"Token {token}\"\n        yield request\n\n    async def async_get_token(self):\n        async with self._async_lock:\n            ...\n\n    async def async_auth_flow(self, request):\n        token = await self.async_get_token()\n        request.headers[\"Authorization\"] = f\"Token {token}\"\n        yield request\n```\n\n----------------------------------------\n\nTITLE: Configuring WSGI Transport with Custom Parameters in Python\nDESCRIPTION: This example shows how to customize the WSGI transport in HTTPX by setting a specific client IP address for the requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate a client that makes WSGI requests with a client IP of \"1.2.3.4\".\ntransport = httpx.WSGITransport(app=app, remote_addr=\"1.2.3.4\")\nwith httpx.Client(transport=transport, base_url=\"http://testserver\") as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating URL Objects with Keyword Arguments in Python\nDESCRIPTION: Shows how to create URL objects using keyword arguments in HTTPX. This allows for more flexible URL construction.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhttpx.URL(scheme=\"https\", host=\"www.example.com\", path=\"/\")\n```\n\nLANGUAGE: python\nCODE:\n```\nhttpx.URL(\"https://www.example.com/\", username=\"tom@gmail.com\", password=\"123 456\")\n```\n\n----------------------------------------\n\nTITLE: Updating Client Parameters in HTTPX\nDESCRIPTION: Shows how to update client parameters using the new immutable QueryParams interface, replacing the previous mutable update method.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.params = client.params.merge(...)\n```\n\n----------------------------------------\n\nTITLE: Using URL Properties to Check for HTTPS\nDESCRIPTION: Demonstrates the recommended way to check if a URL uses HTTPS after the 0.14.0 release, where URL.is_ssl was deprecated.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nURL.scheme == \"https\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Timeout Settings in HTTPX\nDESCRIPTION: Demonstrates the proper way to initialize and use Timeout settings in HTTPX 0.14.0, with explicit defaults and concise argument names.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhttpx.Timeout(None, pool=5.0)\n```\n\n----------------------------------------\n\nTITLE: Handling RequestError Exceptions in HTTPX\nDESCRIPTION: Illustrates how to handle RequestError exceptions in HTTPX, which occur during the request process. The example shows how to access the request URL from the exception object.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response = httpx.get(\"https://www.example.com/\")\nexcept httpx.RequestError as exc:\n    print(f\"An error occurred while requesting {exc.request.url!r}.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPX Event Hooks After Client Creation\nDESCRIPTION: Demonstrates how to add event hooks to an HTTPX client after it has been instantiated. This approach allows for more flexible configuration and combining multiple hook functions for both request and response events.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/event-hooks.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()\nclient.event_hooks['request'] = [log_request]\nclient.event_hooks['response'] = [log_response, raise_on_4xx_5xx]\n```\n\n----------------------------------------\n\nTITLE: Sync-Only Custom Authentication\nDESCRIPTION: Example of a custom authentication class that only supports synchronous operations and properly handles async attempts.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/authentication.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nimport sync_only_library\n\n\nclass MyCustomAuth(httpx.Auth):\n    def sync_auth_flow(self, request):\n        token = sync_only_library.get_token(...)\n        request.headers[\"Authorization\"] = f\"Token {token}\"\n        yield request\n\n    async def async_auth_flow(self, request):\n        raise RuntimeError(\"Cannot use a sync authentication class with httpx.AsyncClient\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Limits in HTTPX with Python\nDESCRIPTION: This snippet demonstrates how to create custom connection pool limits for an HTTPX client. It configures the maximum number of keep-alive connections to 5 and the total maximum connections to 10 using the httpx.Limits class.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/resource-limits.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlimits = httpx.Limits(max_keepalive_connections=5, max_connections=10)\nclient = httpx.Client(limits=limits)\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect Chains in HTTPX\nDESCRIPTION: Illustrates how to handle redirect chains in HTTPX, which uses 'next_request' instead of 'next' as in Requests. This allows for manual control over the redirect process.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = httpx.Client()\nrequest = client.build_request(\"GET\", ...)\nwhile request is not None:\n    response = client.send(request)\n    request = response.next_request\n```\n\n----------------------------------------\n\nTITLE: Configuring ASGI Transport with Custom Client Address in Python\nDESCRIPTION: This example demonstrates how to customize the ASGI transport in HTTPX by setting a specific client IP address and port for the requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate a client that makes ASGI requests with a client IP of \"1.2.3.4\",\n# on port 123.\ntransport = httpx.ASGITransport(app=app, client=(\"1.2.3.4\", 123))\nasync with httpx.AsyncClient(transport=transport, base_url=\"http://testserver\") as client:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Tracing with Extensions in HTTPX\nDESCRIPTION: Demonstrates how to implement request tracing using extensions to monitor internal events within the httpcore transport.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/extensions.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n\ndef log(event_name, info):\n    print(event_name, info)\n\nclient = httpx.Client()\nresponse = client.get(\"https://www.example.com/\", extensions={\"trace\": log})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPX for Local HTTPS Server Connections\nDESCRIPTION: Demonstrates how to set up HTTPX to make secure HTTPS connections to a local development server using a client certificate generated with trustme.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/ssl.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nctx = ssl.create_default_context(cafile=\"client.pem\")\nclient = httpx.Client(verify=ctx)\n```\n\n----------------------------------------\n\nTITLE: Trio Environment Setup\nDESCRIPTION: Example of setting up and using HTTPX with Trio async environment.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nimport trio\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        response = await client.get('https://www.example.com/')\n        print(response)\n\ntrio.run(main)\n```\n\n----------------------------------------\n\nTITLE: AnyIO Environment Setup\nDESCRIPTION: Example of setting up and using HTTPX with AnyIO async environment.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/async.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nimport anyio\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        response = await client.get('https://www.example.com/')\n        print(response)\n\nanyio.run(main, backend='trio')\n```\n\n----------------------------------------\n\nTITLE: Handling Specific HTTPX Exceptions Separately\nDESCRIPTION: Shows how to handle RequestError and HTTPStatusError exceptions separately in HTTPX, allowing for more specific error handling based on the type of error encountered during the HTTP request.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/quickstart.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    response = httpx.get(\"https://www.example.com/\")\n    response.raise_for_status()\nexcept httpx.RequestError as exc:\n    print(f\"An error occurred while requesting {exc.request.url!r}.\")\nexcept httpx.HTTPStatusError as exc:\n    print(f\"Error response {exc.response.status_code} while requesting {exc.request.url!r}.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Debugging Transport in Python for HTTPX\nDESCRIPTION: This snippet shows how to create a custom transport that wraps the default HTTP implementation and adds debugging output for requests and responses.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass DebuggingTransport(httpx.BaseTransport):\n    def __init__(self, **kwargs):\n        self._wrapper = httpx.HTTPTransport(**kwargs)\n\n    def handle_request(self, request):\n        print(f\">>> {request}\")\n        response = self._wrapper.handle_request(request)\n        print(f\"<<< {response}\")\n        return response\n\n    def close(self):\n        self._wrapper.close()\n\ntransport = DebuggingTransport()\nclient = httpx.Client(transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Using Mock Transport for Testing in Python with HTTPX\nDESCRIPTION: This snippet shows how to use HTTPX's MockTransport for testing purposes, allowing predefined responses to be returned instead of making actual network requests.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef handler(request):\n    return httpx.Response(200, json={\"text\": \"Hello, world!\"})\n\n\n# Switch to a mock transport, if the TESTING environment variable is set.\nif os.environ.get('TESTING', '').upper() == \"TRUE\":\n    transport = httpx.MockTransport(handler)\nelse:\n    transport = httpx.HTTPTransport()\n\nclient = httpx.Client(transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPS Redirect Transport with Mounting in Python for HTTPX\nDESCRIPTION: This example demonstrates how to create a custom transport that always redirects to HTTPS and how to mount it for specific schemes or domains using HTTPX's mounting feature.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\n\nclass HTTPSRedirectTransport(httpx.BaseTransport):\n    \"\"\"\n    A transport that always redirects to HTTPS.\n    \"\"\"\n\n    def handle_request(self, method, url, headers, stream, extensions):\n        scheme, host, port, path = url\n        if port is None:\n            location = b\"https://%s%s\" % (host, path)\n        else:\n            location = b\"https://%s:%d%s\" % (host, port, path)\n        stream = httpx.ByteStream(b\"\")\n        headers = [(b\"location\", location)]\n        extensions = {}\n        return 303, headers, stream, extensions\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in HTTPX Client\nDESCRIPTION: Demonstrates the updated format for configuring proxies in HTTPX 0.14.0, using URL schemes as dictionary keys.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nClient(proxies={\"http://\": ...})\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Exclusions in HTTPX\nDESCRIPTION: Demonstrates how to exclude specific URLs from going through a proxy in HTTPX 0.14.0.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nproxies={\"https://www.example.com\": None}\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX with HTTP/2 Support\nDESCRIPTION: Installation command for HTTPX with optional HTTP/2 support enabled.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/index.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx[http2]\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX with Compression Support\nDESCRIPTION: Installation command for HTTPX with optional brotli and zstandard compression support.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/index.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx[brotli,zstd]\n```\n\n----------------------------------------\n\nTITLE: Sending Request Body with Non-Standard HTTP Methods in HTTPX\nDESCRIPTION: Demonstrates how to send a request body with HTTP methods that typically don't support one (GET, DELETE, HEAD, OPTIONS) using the generic .request method in HTTPX.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/compatibility.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhttpx.request(\n  method=\"DELETE\",\n  url=\"https://www.example.com/\",\n  content=b'A request body on a DELETE request.'\n)\n```\n\n----------------------------------------\n\nTITLE: Error Message for HTTPS Proxy Handshake Timeout\nDESCRIPTION: Console output showing the error message when a handshake operation times out while making HTTPS requests through a proxy.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/troubleshooting.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhttpx.ProxyError: _ssl.c:1091: The handshake operation timed out\n```\n\n----------------------------------------\n\nTITLE: Incorrect Proxy Configuration with Mixed HTTP/HTTPS Schemes\nDESCRIPTION: Example of a problematic proxy configuration where HTTP and HTTPS schemes are used for different types of requests, which may cause timeout errors with proxies that don't support HTTPS connections.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/troubleshooting.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n  \"http://\": httpx.HTTPTransport(proxy=\"http://myproxy.org\"),\n  \"https://\": httpx.HTTPTransport(proxy=\"https://myproxy.org\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Proxy Configuration Using HTTP Scheme\nDESCRIPTION: Fixed proxy configuration that uses HTTP scheme for both HTTP and HTTPS requests, resolving timeout issues with proxies that don't support HTTPS connections.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/troubleshooting.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n  \"http://\": httpx.HTTPTransport(proxy=\"http://myproxy.org\"),\n  \"https://\": httpx.HTTPTransport(proxy=\"http://myproxy.org\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Scheme Support in HTTPX\nDESCRIPTION: Example of adding support for custom URL schemes like file:// using custom transport handlers.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\"file://\": FileSystemTransport()}\nclient = httpx.Client(mounts=mounts)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Domain-Specific Proxy Routing in HTTPX\nDESCRIPTION: Various examples of domain-based proxy routing including exact domain matches and wildcard subdomain handling.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://example.com\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"http://example.com\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://*example.com\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://*.example.com\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port-Based Proxy Routing in HTTPX\nDESCRIPTION: Examples of routing requests based on specific ports and domain-port combinations.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"https://example.com:1234\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://*:1234\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing No-Proxy Exceptions in HTTPX\nDESCRIPTION: Shows how to configure proxy exceptions by setting specific routes to None.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://\": httpx.HTTPTransport(proxy=\"http://localhost:8031\"),\n    \"all://example.com\": None,\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Proxy Routing Configuration in HTTPX\nDESCRIPTION: Demonstrates a complex routing setup with multiple proxy servers, exceptions, and specific domain-port combinations.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmounts = {\n    \"all://\": httpx.HTTPTransport(proxy=\"http://localhost:8030\"),\n    \"https://domain.io\": None,\n    \"all://*example.com\": httpx.HTTPTransport(proxy=\"http://localhost:8031\"),\n    \"http://internal.example.com:5550\": httpx.HTTPTransport(proxy=\"http://localhost:8032\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy Round-Robin Transport in Python for HTTPX\nDESCRIPTION: This example demonstrates how to create a custom transport that rotates through a list of proxies for each request, implementing a simple load-balancing strategy.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/transports.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ProxyRoundRobin(httpx.BaseTransport):\n    def __init__(self, proxies, **kwargs):\n        self._transports = [\n            httpx.HTTPTransport(proxy=proxy, **kwargs)\n            for proxy in proxies\n        ]\n        self._idx = 0\n\n    def handle_request(self, request):\n        transport = self._transports[self._idx]\n        self._idx = (self._idx + 1) % len(self._transports)\n        return transport.handle_request(request)\n\n    def close(self):\n        for transport in self._transports:\n            transport.close()\n\nproxies = [\n    httpx.Proxy(\"http://127.0.0.1:8081\"),\n    httpx.Proxy(\"http://127.0.0.1:8082\"),\n    httpx.Proxy(\"http://127.0.0.1:8083\"),\n]\ntransport = ProxyRoundRobin(proxies=proxies)\nclient = httpx.Client(transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Proxy for HTTPX Client in Python\nDESCRIPTION: Shows how to create and use a Proxy object to configure an HTTPX Client with a proxy server. This example demonstrates setting up a proxy and using it with a client instance.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/api.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> proxy = Proxy(\"http://proxy.example.com:8030\")\n>>> client = Client(proxy=proxy)\n```\n\n----------------------------------------\n\nTITLE: Optional HTTP/2 Installation for HTTPX\nDESCRIPTION: Shows how to install HTTPX with HTTP/2 dependencies which became optional in version 0.14.0.\nSOURCE: https://github.com/encode/httpx/blob/master/CHANGELOG.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install httpx[http2]\n```\n\n----------------------------------------\n\nTITLE: Error Message for HTTPS Proxy Connection Issues\nDESCRIPTION: Console output showing the error message when attempting to connect to an HTTPS proxy that isn't properly supported by HTTPX.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/troubleshooting.md#2025-04-08_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhttpx.ProxyError: [SSL: PRE_MAC_LENGTH_TOO_LONG] invalid alert (_ssl.c:1091)\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX CLI using pip\nDESCRIPTION: Shows how to install HTTPX with the optional command-line interface (CLI) dependency using pip.\nSOURCE: https://github.com/encode/httpx/blob/master/README.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install 'httpx[cli]'  # The command line client is an optional dependency.\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX and Chardet (Shell)\nDESCRIPTION: This shell command installs both HTTPX and chardet packages using pip. Chardet is used for character set auto-detection.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/text-encodings.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install httpx\n$ pip install chardet\n```\n\n----------------------------------------\n\nTITLE: Using Auto-detection with Chardet in HTTPX (Python)\nDESCRIPTION: This snippet demonstrates how to use chardet for character set auto-detection with HTTPX. It defines an autodetect function and configures the client to use it for default encoding.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/advanced/text-encodings.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nimport chardet\n\ndef autodetect(content):\n    return chardet.detect(content).get(\"encoding\")\n\n# Using a client with character-set autodetection enabled.\nclient = httpx.Client(default_encoding=autodetect)\nresponse = client.get(...)\nprint(response.encoding)  # This will either print the charset given in\n                          # the Content-Type charset, or else the auto-detected\n                          # character set.\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX with Optional Dependencies\nDESCRIPTION: Installs HTTPX in development mode with optional features including brotli compression, command-line interface, HTTP/2 support, SOCKS proxy, and zstd compression.\nSOURCE: https://github.com/encode/httpx/blob/master/requirements.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .[brotli,cli,http2,socks,zstd]\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies\nDESCRIPTION: Installs packages needed for building project documentation, including MkDocs for the static site generator, MkAutodoc for API documentation, and Material theme for MkDocs.\nSOURCE: https://github.com/encode/httpx/blob/master/requirements.txt#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs==1.6.1\nmkautodoc==0.2.0\nmkdocs-material==9.5.47\n```\n\n----------------------------------------\n\nTITLE: Testing and Linting Dependencies\nDESCRIPTION: Installs packages needed for testing, code coverage, type checking, and linting. Includes conditional dependencies based on Python version for the trustme certificate authority package.\nSOURCE: https://github.com/encode/httpx/blob/master/requirements.txt#2025-04-08_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncoverage[toml]==7.6.1\ncryptography==44.0.1\nmypy==1.13.0\npytest==8.3.4\nruff==0.8.1\ntrio==0.27.0\ntrio-typing==0.10.0\ntrustme==1.1.0; python_version < '3.9'\ntrustme==1.2.0; python_version >= '3.9'\nuvicorn==0.32.1\n```\n\n----------------------------------------\n\nTITLE: Cloning HTTPX Repository - Shell Commands\nDESCRIPTION: Instructions for cloning the HTTPX repository from GitHub to begin development.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/contributing.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/YOUR-USERNAME/httpx\n```\n\n----------------------------------------\n\nTITLE: Running HTTPX Test Suite - Shell Commands\nDESCRIPTION: Commands for running the test suite and individual test files.\nSOURCE: https://github.com/encode/httpx/blob/master/docs/contributing.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ scripts/test\n$ scripts/test tests/test_multipart.py\n```"
  }
]