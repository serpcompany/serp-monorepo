[
  {
    "owner": "posthog",
    "repo": "posthog.git",
    "content": "TITLE: Using Query Component in React\nDESCRIPTION: Example of how to use the generic Query component that internally routes to the appropriate node based on the query type.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/queries/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Query query={} setQuery={} />\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Python\nDESCRIPTION: Command to run all Python tests using pytest.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Scene Component in TypeScript\nDESCRIPTION: Template for creating a component for a global scene that doesn't depend on URL parameters. Imports the necessary logic and exports both the component and scene configuration.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { dashboardsLogic } from './dashboardsLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { useValues } from 'kea'\n\nexport function Dashboards (): JSX.Element {\n    const {\n        counter\n    } = useValues(dashboardsLogic)\n\n    return (\n        // TODO: consolidate on a recommended naming convention\n        <div className='dashboard-scene'>\n            Dashboard Scene {counter}!\n        </div>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: Dashboards,\n    logic: dashboardsLogic,\n}\n```\n\n----------------------------------------\n\nTITLE: HogVM Bytecode Operations\nDESCRIPTION: Comprehensive list of bytecode operations with their numeric codes and syntax patterns. Includes operations for field access, function calls, logical operations, arithmetic, and comparisons.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFIELD = 1          # [arg3, arg2, arg1, FIELD, 3]       # arg1.arg2.arg3\nCALL_GLOBAL = 2    # [arg2, arg1, CALL, 'concat', 2]    # concat(arg1, arg2)\nAND = 3            # [val3, val2, val1, AND, 3]         # val1 and val2 and val3\nOR = 4             # [val3, val2, val1, OR, 3]          # val1 or val2 or val3\nNOT = 5            # [val, NOT]                         # not val\nPLUS = 6           # [val2, val1, PLUS]                 # val1 + val2\nMINUS = 7          # [val2, val1, MINUS]                # val1 - val2\nMULTIPLY = 8       # [val2, val1, MULTIPLY]             # val1 * val2\nDIVIDE = 9         # [val2, val1, DIVIDE]               # val1 / val2\nMOD = 10           # [val2, val1, MOD]                  # val1 % val2\nEQ = 11            # [val2, val1, EQ]                   # val1 == val2\nNOT_EQ = 12        # [val2, val1, NOT_EQ]               # val1 != val2\nGT = 13            # [val2, val1, GT]                   # val1 > val2\nGT_EQ = 14         # [val2, val1, GT_EQ]                # val1 >= val2\nLT = 15            # [val2, val1, LT]                   # val1 < val2\nLT_EQ = 16         # [val2, val1, LT_EQ]                # val1 <= val2\nLIKE = 17          # [val2, val1, LIKE]                 # val1 like val2\nILIKE = 18         # [val2, val1, ILIKE]                # val1 ilike val2\nNOT_LIKE = 19      # [val2, val1, NOT_LIKE]             # val1 not like val2\nNOT_ILIKE = 20     # [val2, val1, NOT_ILIKE]            # val1 not ilike val2\nIN = 21            # [val2, val1, IN]                   # val1 in val2\nNOT_IN = 22        # [val2, val1, NOT_IN]               # val1 not in val2\nREGEX = 23         # [val2, val1, REGEX]                # val1 =~ val2\nNOT_REGEX = 24     # [val2, val1, NOT_REGEX]            # val1 !~ val2\nIREGEX = 25        # [val2, val1, IREGEX]               # val1 =~* val2\nNOT_IREGEX = 26    # [val2, val1, NOT_IREGEX]           # val1 !~* val2\nTRUE = 29          # [TRUE]                             # true\nFALSE = 30         # [FALSE]                            # false\nNULL = 31          # [NULL]                             # null\nSTRING = 32        # [STRING, 'text']                   # 'text'\nINTEGER = 33       # [INTEGER, 123]                     # 123\nFLOAT = 34         # [FLOAT, 123.12]                    # 123.01\n```\n\n----------------------------------------\n\nTITLE: Implementing MaxTool Backend Class in Python\nDESCRIPTION: Example of creating a new AI tool class by inheriting from MaxTool. Shows how to define tool arguments schema, implement core logic, and handle LLM interactions.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/ee/hogai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ee.hogai.tool import MaxTool\nfrom pydantic import BaseModel, Field\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import ChatPromptTemplate\n\n# Define your tool's arguments schema\nclass YourToolArgs(BaseModel):\n    parameter_name: str = Field(description=\"Description of the parameter\")\n\nclass YourTool(MaxTool):\n    name: str = \"your_tool_name\"  # Must match a value in AssistantContextualTool enum\n    description: str = \"What this tool does\"\n    thinking_message: str = \"What to show while tool is working\"\n    root_system_prompt_template: str = \"Context about the tool state: {context_var}\" \n    args_schema: type[BaseModel] = YourToolArgs\n\n    def _run_impl(self, parameter_name: str) -> tuple[str, Any]:\n        # Implement tool logic here\n        # Access context with self.context (must have context_var from template)\n        \n        # Optional: Use LLM to process inputs or generate structured outputs\n        model = (\n            ChatOpenAI(model=\"gpt-4o\", temperature=0.2)\n            .with_structured_output(OutputType)\n            .with_retry()\n        )\n        \n        # Process and return results as (message, structured_data)\n        return \"Tool execution completed\", result_data\n```\n\n----------------------------------------\n\nTITLE: Defining Form Data in Kea Logic with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a feature flag form in a Kea logic, including defaults, validation, and submit functionality. It shows how to integrate with the existing loaders and add form-specific functionality.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a form.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const featureFlagLogic = kea<featureFlagLogicType<FeatureFlagLogicProps>>({ \n    path: (key) => ['scenes', 'feature-flags', 'featureFlagLogic', key],\n    props: {} as FeatureFlagLogicProps,\n    key: ({ id }) => id ?? 'new',\n\n    loaders: ({ values, props }) => ({\n        featureFlag: [\n            { ...NEW_FLAG } as FeatureFlagModel,\n            {\n                loadFeatureFlag: () => api.get(`api/projects/${values.currentProjectId}/feature_flags/${props.id}`),\n            },\n        ],\n    }),\n\n    forms: ({ actions }) => ({\n        featureFlag: {\n            // not really needed again since loader already defines it\n            defaults: { ...NEW_FLAG } as FeatureFlagModel,\n\n            // sync validation, will be shown as errors in the form\n            errors: (featureFlag) => ({\n                key: !featureFlag.key ? 'Must have a key' : undefined,\n            }),\n\n            // called on the form's onSubmit, unless a validation fails\n            submit: async (featureFlag, breakpoint) => {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const { created_at, id, ...flag } = featureFlag\n                const newFeatureFlag = updatedFlag.id\n                    ? await api.update(`api/projects/${values.currentProjectId}/feature_flags/${updatedFlag.id}`, flag)\n                    : await api.create(`api/projects/${values.currentProjectId}/feature_flags`, flag)\n                breakpoint()\n                actions.setFeatureFlagValues(newFeatureFlag)\n                lemonToast.success('Feature flag saved')\n                featureFlagsLogic.findMounted()?.actions.updateFlag(featureFlag)\n                router.actions.replace(urls.featureFlag(featureFlag.id))\n            },\n        },\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: HogQL Core Operations v1.0.0\nDESCRIPTION: Comprehensive list of core bytecode operations including field access, function calls, logical operations, arithmetic operations, comparisons, and data type definitions. Each operation includes its code, argument structure, and equivalent expression.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFIELD = 1          # [arg3, arg2, arg1, FIELD, 3]       # arg1.arg2.arg3\nCALL = 2           # [arg2, arg1, CALL, 'concat', 2]    # concat(arg1, arg2)\nAND = 3            # [val3, val2, val1, AND, 3]         # val1 and val2 and val3\nOR = 4             # [val3, val2, val1, OR, 3]          # val1 or val2 or val3\nNOT = 5            # [val, NOT]                         # not val\nPLUS = 6           # [val2, val1, PLUS]                 # val1 + val2\nMINUS = 7          # [val2, val1, MINUS]                # val1 - val2\nMULTIPLY = 8       # [val2, val1, MULTIPLY]             # val1 * val2\nDIVIDE = 9         # [val2, val1, DIVIDE]               # val1 / val2\nMOD = 10           # [val2, val1, MOD]                  # val1 % val2\nEQ = 11            # [val2, val1, EQ]                   # val1 == val2\nNOT_EQ = 12        # [val2, val1, NOT_EQ]               # val1 != val2\nGT = 13            # [val2, val1, GT]                   # val1 > val2\nGT_EQ = 14         # [val2, val1, GT_EQ]                # val1 >= val2\nLT = 15            # [val2, val1, LT]                   # val1 < val2\nLT_EQ = 16         # [val2, val1, LT_EQ]                # val1 <= val2\nLIKE = 17          # [val2, val1, LIKE]                 # val1 like val2\nILIKE = 18         # [val2, val1, ILIKE]                # val1 ilike val2\nNOT_LIKE = 19      # [val2, val1, NOT_LIKE]             # val1 not like val2\nNOT_ILIKE = 20     # [val2, val1, NOT_ILIKE]            # val1 not ilike val2\nIN = 21            # [val2, val1, IN]                   # val1 in val2\nNOT_IN = 22        # [val2, val1, NOT_IN]               # val1 not in val2\nREGEX = 23         # [val2, val1, REGEX]                # val1 =~ val2\nNOT_REGEX = 24     # [val2, val1, NOT_REGEX]            # val1 !~ val2\nIREGEX = 25        # [val2, val1, IREGEX]               # val1 =~* val2\nNOT_IREGEX = 26    # [val2, val1, NOT_IREGEX]           # val1 !~* val2\nTRUE = 29          # [TRUE]                             # true\nFALSE = 30         # [FALSE]                            # false\nNULL = 31          # [NULL]                             # null\nSTRING = 32        # [STRING, 'text']                   # 'text'\nINTEGER = 33       # [INTEGER, 123]                     # 123\nFLOAT = 34         # [FLOAT, 123.12]                    # 123.01\n```\n\n----------------------------------------\n\nTITLE: Deploying PostHog Open Source with Docker\nDESCRIPTION: One-line command to deploy a hobby instance of PostHog on Linux using Docker. Recommended for systems with at least 4GB of memory.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/posthog/posthog/HEAD/bin/deploy-hobby)\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Todo Application UI in React\nDESCRIPTION: A React functional component that renders a complete Todo application interface. The component includes a form for adding new tasks, filter buttons to show all/active/completed tasks, and a list of existing tasks with edit and delete capabilities for each task.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/jsx.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction App(props) {\n    return (\n        <div className=\"todoapp stack-large\">\n            <h1>TodoMatic</h1>\n            <form>\n                <h2 className=\"label-wrapper\">\n                    <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n                        What needs to be done?\n                    </label>\n                </h2>\n                <input type=\"text\" id=\"new-todo-input\" className=\"input input__lg\" name=\"text\" autoComplete=\"off\" />\n                <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n                    Add\n                </button>\n            </form>\n            <div className=\"filters btn-group stack-exception\">\n                <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\n                    <span className=\"visually-hidden\">Show </span>\n                    <span>all</span>\n                    <span className=\"visually-hidden\"> tasks</span>\n                </button>\n                <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"false\">\n                    <span className=\"visually-hidden\">Show </span>\n                    <span>Active</span>\n                    <span className=\"visually-hidden\"> tasks</span>\n                </button>\n                <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"false\">\n                    <span className=\"visually-hidden\">Show </span>\n                    <span>Completed</span>\n                    <span className=\"visually-hidden\"> tasks</span>\n                </button>\n            </div>\n            <h2 id=\"list-heading\">3 tasks remaining</h2>\n            <ul role=\"list\" className=\"todo-list stack-large stack-exception\" aria-labelledby=\"list-heading\">\n                <li className=\"todo stack-small\">\n                    <div className=\"c-cb\">\n                        <input id=\"todo-0\" type=\"checkbox\" defaultChecked />\n                        <label className=\"todo-label\" htmlFor=\"todo-0\">\n                            Eat\n                        </label>\n                    </div>\n                    <div className=\"btn-group\">\n                        <button type=\"button\" className=\"btn\">\n                            Edit <span className=\"visually-hidden\">Eat</span>\n                        </button>\n                        <button type=\"button\" className=\"btn btn__danger\">\n                            Delete <span className=\"visually-hidden\">Eat</span>\n                        </button>\n                    </div>\n                </li>\n                <li className=\"todo stack-small\">\n                    <div className=\"c-cb\">\n                        <input id=\"todo-1\" type=\"checkbox\" />\n                        <label className=\"todo-label\" htmlFor=\"todo-1\">\n                            Sleep\n                        </label>\n                    </div>\n                    <div className=\"btn-group\">\n                        <button type=\"button\" className=\"btn\">\n                            Edit <span className=\"visually-hidden\">Sleep</span>\n                        </button>\n                        <button type=\"button\" className=\"btn btn__danger\">\n                            Delete <span className=\"visually-hidden\">Sleep</span>\n                        </button>\n                    </div>\n                </li>\n                <li className=\"todo stack-small\">\n                    <div className=\"c-cb\">\n                        <input id=\"todo-2\" type=\"checkbox\" />\n                        <label className=\"todo-label\" htmlFor=\"todo-2\">\n                            Repeat\n                        </label>\n                    </div>\n                    <div className=\"btn-group\">\n                        <button type=\"button\" className=\"btn\">\n                            Edit <span className=\"visually-hidden\">Repeat</span>\n                        </button>\n                        <button type=\"button\" className=\"btn btn__danger\">\n                            Delete <span className=\"visually-hidden\">Repeat</span>\n                        </button>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating Component Stories in Storybook for UI Components\nDESCRIPTION: Comprehensive example of a Component story for a LemonSwitch UI component. Shows proper configuration with Meta, StoryObj types, component reference, argTypes for controls, and a functional component implementation with state management.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to create stories.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// frontend/src/lib/lemon-ui/LemonSwitch/LemonSwitch.stories.tsx\nimport { Meta, StoryObj } from '@storybook/react'\n\nimport { LemonSwitch, LemonSwitchProps } from './LemonSwitch'\n\ntype Story = StoryObj<typeof LemonSwitch>\nconst meta: Meta<typeof LemonSwitch> = {\n    title: 'Lemon UI/Lemon Switch',\n    component: LemonSwitch,\n    argTypes: {\n        loading: {\n            control: {\n                type: 'boolean',\n            },\n        },\n        label: {\n            name: 'label',\n            type: { name: 'string', required: false },\n            defaultValue: 'Hello',\n            description: 'demo description',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Hello' },\n            },\n            control: {\n                type: 'text'\n            },\n        },\n    },\n    tags: ['autodocs'],\n}\nexport default meta\n\nexport function LemonSwitch_(props: LemonSwitchProps): JSX.Element {\n    const [isChecked, setIsChecked] = useState(false)\n\n    return (\n        <LemonSwitch\n            {...props}\n            checked={props.checked !== undefined ? props.checked : isChecked}\n            onChange={setIsChecked}\n        />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding URL Function for a Global Scene\nDESCRIPTION: Example of adding a URL function to the URLs module for a global scene, which defines how to access the scene via URL.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const urls = {\n    dashboards: () => `/dashboard`,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Form UI Components with Kea-Forms in React\nDESCRIPTION: This snippet demonstrates how to build a feature flag form UI using Kea-Forms components like Form, Field, and Group. It shows how to connect the form to the logic, handle form submission, and work with nested form fields.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a form.stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Form, Group } from 'kea-forms'\nimport { Field } from 'lib/forms/Field'\nimport { featureFlagLogic, FeatureFlagLogicProps } from './featureFlagLogic'\n\nexport function FeatureFlag({ id }: { id?: string } = {}): JSX.Element {\n    const logicProps: FeatureFlagLogicProps = { id: id ? parseInt(id) : 'new' }\n    const {\n        featureFlag, // the values in the object are the values in the form\n        isFeatureFlagSubmitting, // if the submit action is doing something\n    } = useValues(featureFlagLogic(logicProps))\n    const {\n        submitFeatureFlag, // if we need to submit it outside the normal form submit\n        setFeatureFlagValue, // if we need to update any field outside the <Field /> tags\n    } = useActions(featureFlagLogic(logicProps))\n\n    return (\n        <Form\n            logic={featureFlagLogic}\n            props={logicProps}\n            formKey=\"featureFlag\"\n            enableFormOnSubmit // makes the HTML \"submit\" button work directly\n        >\n            <Field name=\"active\">\n                {/* value, onChange, onChangeEvent, name, label, id */}\n                {({ value, onChange }) => (\n                    <LemonSwitch\n                        checked={value}\n                        onChange={onChange}\n                        label={\n                            value ? (\n                                <span className=\"text-success\">Enabled</span>\n                            ) : (\n                                <span className=\"text-danger\">Disabled</span>\n                            )\n                        }\n                    />\n                )}\n            </Field>\n\n            <Field name=\"name\" label=\"Description\">\n                <LemonTextArea\n                    // value and onChange added automatically to Lemon components\n                    className=\"ph-ignore-input\"\n                    data-attr=\"feature-flag-description\"\n                    placeholder=\"Adding a helpful description can ensure others know what this feature is for.\"\n                />\n            </Field>\n\n            {featureFlag?.filters?.multivariate?.variants?.map((_, index) => (\n                // using <Group /> to scope the next fields\n                <Group key={index} name={['filters', 'multivariate', 'variants', index]}>\n                    <Field name=\"name\">\n                        {/* This will update featureFlag.filters.multivariate.variants[index].name */}\n                        {/* If you don't specify ({ value, onChange }) => (), we add these two props automatically */}\n                        <LemonInput\n                            data-attr=\"feature-flag-variant-name\"\n                            className=\"ph-ignore-input\"\n                            placeholder=\"Description\"\n                        />\n                    </Form.Item>\n                </Group>\n            ))}\n\n            <LemonButton\n                loading={isFeatureFlagSubmitting}\n                icon={<SaveOutlined />}\n                htmlType=\"submit\"\n                type=\"primary\"\n                data-attr=\"feature-flag-submit-bottom\"\n            >\n                Save changes\n            </LemonButton>\n        </Form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabbed Dashboard Interface with React\nDESCRIPTION: Implements the React component for the Dashboards scene, rendering the tabs using LemonTabs component. Maps tab keys to content and handles tab navigation by pushing URL changes through the router.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to add tabs to a scene.stories.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { DashboardsTabs } from '~/types'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs/LemonTabs'\nimport { urls } from 'scenes/urls'\nimport { dashboardsLogic, humanFriendlyTabName } from './dashboardsLogic'\n\nconst DASHBOARDS_TAB_TO_CONTENT: Record<DashboardsTabs, JSX.Element> = {\n    [DashboardsTabs.First]: <div>First tab content</div>,\n    [DashboardsTabs.Second]: <div>Second tab content</div>,\n}\n\nexport const scene: SceneExport = {\n    component: Dashboards,\n    logic: dashboardsLogic,\n}\n\nexport function Dashboards(): JSX.Element {\n    const { currentTab } = useValues(dashboardsLogic)\n\n    return (\n        <div>\n            <PageHeader />\n            <LemonTabs\n                activeKey={currentTab}\n                onChange={(tab) => router.actions.push(urls.dashboards(tab as DashboardsTabs))}\n                tabs={Object.values(DashboardsTabs).map((tab) => ({\n                    label: DASHBOARDS_TAB_TO_NAME[tab],\n                    key: tab,\n                    content: DASHBOARDS_TAB_TO_CONTENT[tab],\n                }))}\n            />\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: ConcurrencyController Class Implementation in TypeScript\nDESCRIPTION: Main controller class for managing concurrent operations with priority queuing. Handles operation scheduling, concurrency limits, and queue management using FastPriorityQueue.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/ts.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ConcurrencyController {\n    _concurrencyLimit: number\n\n    _current: ConcurrencyControllerItem<any>[] = []\n    private _queue: FastPriorityQueue<ConcurrencyControllerItem<any>> = new FastPriorityQueue(\n        (a, b) => a._priority < b._priority\n    )\n\n    constructor(concurrencyLimit: number) {\n        this._concurrencyLimit = concurrencyLimit\n    }\n\n    run = <T>({\n        fn,\n        priority,\n        abortController,\n        debugTag,\n    }: {\n        fn: () => Promise<T>\n        priority?: number\n        abortController?: AbortController\n        debugTag?: string\n    }): Promise<T> => {\n        const item = new ConcurrencyControllerItem(this, fn, abortController, priority, debugTag)\n\n        this._queue.add(item)\n\n        this._tryRunNext()\n\n        return item._promise\n    }\n\n    _runNext(): void {\n        const next = this._queue.poll()\n        if (next) {\n            next._runFn()\n                .catch(() => {\n                    // ignore\n                })\n                .finally(() => {\n                    this._tryRunNext()\n                })\n        }\n    }\n\n    _tryRunNext(): void {\n        if (this._current.length < this._concurrencyLimit) {\n            this._runNext()\n        }\n    }\n\n    setConcurrencyLimit = (limit: number): void => {\n        this._concurrencyLimit = limit\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ConcurrencyControllerItem Class Implementation in TypeScript\nDESCRIPTION: Implements a wrapper class for individual concurrent operations with priority handling, abort signal support, and promise management. Includes error handling and cleanup on completion.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/ts.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConcurrencyControllerItem<T> {\n    _debugTag?: string\n    _runFn: () => Promise<void>\n    _priority: number = Infinity\n    _promise: Promise<T>\n    constructor(\n        concurrencyController: ConcurrencyController,\n        userFn: () => Promise<T>,\n        abortController: AbortController | undefined,\n        priority: number = Infinity,\n        debugTag: string | undefined\n    ) {\n        this._debugTag = debugTag\n        this._priority = priority\n        const { promise, resolve, reject } = promiseResolveReject<T>()\n        this._promise = promise\n        this._runFn = async () => {\n            if (abortController?.signal.aborted) {\n                reject(new FakeAbortError(abortController.signal.reason || 'AbortError'))\n                return\n            }\n            if (concurrencyController._current.length >= concurrencyController._concurrencyLimit) {\n                throw new Error('Developer Error: ConcurrencyControllerItem: _runFn called while already running')\n            }\n            try {\n                concurrencyController._current.push(this)\n                const result = await userFn()\n                resolve(result)\n            } catch (error) {\n                reject(error)\n            }\n        }\n        abortController?.signal.addEventListener('abort', () => {\n            reject(new FakeAbortError(abortController.signal.reason || 'AbortError'))\n        })\n        promise\n            .catch(() => {\n                // ignore\n            })\n            .finally(() => {\n                if (concurrencyController._current.includes(this)) {\n                    concurrencyController._current = concurrencyController._current.filter((item) => item !== this)\n                    concurrencyController._runNext()\n                }\n            })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Logic with Kea State Management\nDESCRIPTION: Creates a Kea logic module for managing dashboard tab state, including tab selection, URL synchronization, and breadcrumb generation. Implements actionToUrl and urlToAction for bidirectional URL synchronization with tab state.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to add tabs to a scene.stories.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { kea, reducers, path, actions, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\n\nimport { Breadcrumb, DashboardsTabs } from '~/types'\nimport { urls } from 'scenes/urls'\n\nexport const DASHBOARDS_TAB_TO_NAME: Record<DashboardsTabs, string> = {\n    [DashboardsTabs.First]: 'First',\n    [DashboardsTabs.Second]: 'Second',\n}\n\nexport const dashboardsLogic = kea([\n    path(['scenes', 'dashboard', 'dashboardsLogic']),\n    actions({\n        setCurrentTab: (tab: DashboardsTabs = DashboardsTabs.First) => ({ tab }),\n    }),\n    reducers({\n        currentTab: [\n            DashboardsTabs.First as DashboardsTabs,\n            {\n                setCurrentTab: (_, { tab }) => tab,\n            },\n        ],\n    }),\n    selectors(() => ({\n        breadcrumbs: [\n            // Optional if you'd like the breadcrumbs to show the current tab\n            (s) => [s.currentTab],\n            (tab): Breadcrumb[] => {\n                const breadcrumbs: Breadcrumb[] = [{ name: 'Dashboards' }]\n                breadcrumbs.push({\n                    name: DASHBOARDS_TAB_TO_NAME[tab],\n                })\n\n                return breadcrumbs\n            },\n        ],\n    })),\n    actionToUrl(({ values }) => {\n        return {\n            setCurrentTab: () => [urls.dashboards(values.currentTab)],\n        }\n    }),\n    urlToAction(({ actions, values }) => ({\n        '/dashboards/:tab': ({ tab }) => {\n            if (tab !== values.currentTab) {\n                actions.setCurrentTab(tab as DashboardsTabs)\n            }\n        },\n    })),\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Django Model\nDESCRIPTION: Core Action model implementation with FileSystem sync capabilities, including fields for tracking, slack integration, and embedding features\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/python.txt#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Action(FileSystemSyncMixin, models.Model):\n    name = models.CharField(max_length=400, null=True, blank=True)\n    description = models.TextField(blank=True, default=\"\")\n    team = models.ForeignKey(\"Team\", on_delete=models.CASCADE)\n    project = models.ForeignKey(\"Project\", on_delete=models.CASCADE, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True, blank=True)\n    created_by = models.ForeignKey(\"User\", on_delete=models.SET_NULL, null=True, blank=True)\n    deleted = models.BooleanField(default=False)\n    events = models.ManyToManyField(\"Event\", blank=True)\n    post_to_slack = models.BooleanField(default=False)\n    slack_message_format = models.CharField(default=\"\", max_length=1200, blank=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    bytecode = models.JSONField(null=True, blank=True)\n    bytecode_error = models.TextField(blank=True, null=True)\n    steps_json = models.JSONField(null=True, blank=True)\n    pinned_at = models.DateTimeField(blank=True, null=True, default=None)\n    summary = models.TextField(blank=True, null=True, help_text=\"A summary of the action, generated by AI\")\n    last_summarized_at = models.DateTimeField(\n        blank=True, null=True, help_text=\"The last time the action was summarized by AI\"\n    )\n    embedding_last_synced_at = models.DateTimeField(\n        blank=True, null=True, help_text=\"The last time the action was synced to the vector database\"\n    )\n    embedding_version = models.PositiveSmallIntegerField(\n        blank=True, null=True, help_text=\"The version of the embedding model used to embed the action\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene and Route Mapping\nDESCRIPTION: Example of configuring scene properties and adding route-to-scene mapping, which connects URL routes to specific scenes.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport const sceneConfigurations: Partial<Record<Scene, SceneConfig>> = {\n    [Scene.Dashboards]: {\n        projectBased: true,\n        name: 'Dashboards',\n    },\n}\n\nexport const routes: Record<string, Scene> = {\n    [urls.dashboards()]: Scene.Dashboards,\n}\n```\n\n----------------------------------------\n\nTITLE: Frame Resolution Implementation Details\nDESCRIPTION: Contains the core implementation of frame resolution using sourcemaps, including position lookup and error handling.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/rust.txt#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nasync fn resolve_impl<C>(&self, team_id: i32, catalog: &C) -> Result<Frame, Error>\n    where\n        C: SymbolCatalog<OrChunkId<Url>, OwnedSourceMapCache>,\n    {\n        let Some(location) = &self.location else {\n            return Ok(Frame::from(self));\n        };\n\n        let r = self.get_ref()?;\n\n        let sourcemap = catalog.lookup(team_id, r).await?;\n        let smc = sourcemap.get_smc();\n\n        let Some(location) = smc.lookup(SourcePosition::new(location.line - 1, location.column))\n        else {\n            return Err(JsResolveErr::TokenNotFound(\n                self.fn_name.clone(),\n                location.line,\n                location.column,\n            )\n            .into());\n        };\n\n        Ok(Frame::from((self, location)))\n    }\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Common Crates in hog-rs Services\nDESCRIPTION: Documentation describing best practices for creating and maintaining internal Rust crates in the PostHog monorepo. The guidelines emphasize small feature scope, workspace dependencies, and proper testing and documentation.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/common/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Common crates for the hog-rs services\n\nThis folder holds internal crates for code reuse between services in the monorepo. To keep maintenance costs low,\nthese crates should ideally:\n\n- Cover a small feature scope and use as little dependencies as possible\n- Only use `{ workspace = true }` dependencies, instead of pinning versions that could diverge from the workspace\n- Have adequate test coverage and documentation\n```\n\n----------------------------------------\n\nTITLE: Mounting MaxTool in React Frontend\nDESCRIPTION: Example of integrating a MaxTool into a React component using the MaxTool wrapper. Demonstrates how to pass context data and handle tool outputs.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/ee/hogai/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MaxTool } from 'scenes/max/MaxTool'\n\nfunction YourComponent() {\n    return (\n        <MaxTool\n            name=\"your_tool_name\"  // Must match backend tool name - enforced by the AssistantContextualTool enum\n            displayName=\"Human-friendly name\"\n            context={{\n                // Context data passed to backend - can be empty if there truly is no context\n                context_var: relevantData,\n            }}\n            callback={(toolOutput) => {\n                // Handle structured output from tool\n                updateUIWithToolResults(toolOutput);\n            }}\n            initialMaxPrompt=\"Optional initial prompt for Max\"\n            onMaxOpen={() => {\n                // Optional actions when Max panel opens\n            }}\n        >\n            {/* Your UI component that will have Max assistant */}\n            <YourUIComponent />\n        </MaxTool>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Styles with SCSS\nDESCRIPTION: Template for creating scoped styles for a scene using SCSS, demonstrating how to scope styles to prevent global conflicts.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n.dashboards-scene {\n    // put all your styles inside this scope, as everything is global\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HogQL Parser from Local Sources\nDESCRIPTION: Command to install the hogql_parser package by building from local source files using pip.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogql_parser/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install ./common/hogql_parser\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Scene Component\nDESCRIPTION: Template for creating a component for a scene that depends on URL parameters, using paramsToProps for URL parameter binding.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { dashboardLogic } from './dashboardLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { useValues } from 'kea'\n\nexport const scene: SceneExport = {\n    component: Dashboard,\n    logic: dashboardLogic,\n    // paramsToProps - Convert url _string_ params to logic props.\n    // This mounts the right logic with turbo mode before the component renders.\n    // This wraps the scene's logic in <BindLogic />\n    paramsToProps: ({ params: {id} }:{ params: { id?: string }}) => ({ id: id ? parseInt(id) : 'new' }),\n}\n\nexport function Dashboard ({ id }: { id?: string } = {}): JSX.Element {\n    // dashboardLogic is automatically bound to the props above with BindLogic\n    const {\n        counter\n    } = useValues(dashboardLogic)\n\n    return (\n        // TODO: consolidate on a recommended naming convention\n        <div className='dashboard-scene'>\n            Dashboard Scene {id} {counter}!\n        </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding URL Function for a Parameterized Scene\nDESCRIPTION: Example of adding a URL function that supports URL parameters, allowing for dynamic route generation based on IDs.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexport const urls = {\n    dashboard: (id: string | number) => `/dashboard{id ? `/${id}` : ''}`,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized Scene Logic with Kea\nDESCRIPTION: Template for creating logic for a scene that depends on URL parameters, using props and key for instance management.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { kea, reducers, path, props, key } from 'kea'\n\nexport interface DashboardLogicProps {\n    id: number | 'new'\n}\n\nexport const dashboardLogic = kea([\n    props({} as DashboardLogicProps),\n    key(({ id }) => id),\n    path((id) => ['scenes', 'dashboard', 'dashboardLogic', id]),\n    reducers({\n        counter: [1, {}],\n    }),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Global Scene Logic with Kea\nDESCRIPTION: Template for creating the logic for a global scene using Kea. Defines the path and basic state reducers for the scene.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { kea, reducers, path } from 'kea'\n\nexport const dashboardsLogic = kea([\n    path(['scenes', 'dashboard', 'dashboardsLogic']),\n    reducers({\n        counter: [1, {}],\n    }),\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameterized Scene and Route Mapping\nDESCRIPTION: Example of configuring a parameterized scene and its route mapping, which includes support for URL parameters.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport const sceneConfigurations: Partial<Record<Scene, SceneConfig>> = {\n    [Scene.Dashboard]: {\n        projectBased: true,\n        name: 'Dashboard',\n    },\n}\n\nexport const routes: Record<string, Scene> = {\n    // this `:id` gets used in \"params\" in \"paramsToProps\" and passed to the <Dashboard /> component\n    [urls.dashboard(':id')]: Scene.Dashboard,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scene Routes for Dashboard Tabs\nDESCRIPTION: Updates the route configuration in scenes.ts to map all tab URLs to the Dashboards scene. Uses Object.fromEntries and Object.values to dynamically generate route entries for each tab.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to add tabs to a scene.stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n     // One entry for every available tab\n    ...Object.fromEntries(\n        Object.values(DashboardsTabs).map((tab) => [urls.dashboards(tab), Scene.Dashboards])\n    ) as Record<string, Scene>,\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Mocks with MockServiceWorker\nDESCRIPTION: Shows how to set up API mocks in a Storybook story file using either file-level decorators or story-level hooks.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to mock requests.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// SomeScene.stories.tsx\nimport { mswDecorator, useStorybookMocks } from '~/mocks/browser'\n\nexport default {\n    title: 'Scenes-App/Some Scene',\n    decorators: [\n        // applies for all stories in file\n        mswDecorator(MOCK_ARGUMENTS),\n    ],\n}\n\nexport function Dashboard(): JSX.Element {\n    // applies to just this story\n    useStorybookMocks(MOCK_ARGUMENTS)\n    return <div />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating URL Handler for Dashboard Tabs\nDESCRIPTION: Modifies the URL handler in urls.ts to support tab navigation. The function accepts an optional tab parameter that defaults to the First tab.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to add tabs to a scene.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndashboards: (tab: DashboardsTabs = DashboardsTabs.First): string => `/dashboards/${tab}`\n```\n\n----------------------------------------\n\nTITLE: HogQL Built-in Functions v1.0.0\nDESCRIPTION: Definition of built-in functions available in HogQL including string manipulation, pattern matching, and type conversion operations. Each function includes usage example and expected output.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconcat(...)             # concat('test: ', 1, null, '!') == 'test: 1!'\nmatch(string, pattern)  # match('fish', '$fi.*') == true\ntoString(val)          # toString(true) == 'true'\ntoInt(val)              # toInt('123') == 123\ntoFloat(val)            # toFloat('123.2') == 123.2\ntoUUID(val)             # toUUID('string') == 'string'\n```\n\n----------------------------------------\n\nTITLE: Generated Form Interface Methods and Values in TypeScript\nDESCRIPTION: This snippet shows the interface that kea-forms generates for the logic, including actions like setFeatureFlagValue and values like isFeatureFlagSubmitting. It demonstrates the automatic type generation for form-related functionality.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a form.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface featureFlagLogicType extends Logic {\n    actions: {\n        // kea-loaders\n        loadFeatureFlag: () => void\n        loadFeatureFlagSuccess: (featureFlag: any, payload?: any) => void\n        loadFeatureFlagFailure: (error: string, errorObject?: any) => void\n\n        // kea-forms\n        setFeatureFlagValue: (key: FieldName, value: any) => void\n        setFeatureFlagValues: (values: DeepPartial<FeatureFlagType>) => void\n        touchFeatureFlagField: (key: string) => void\n        resetFeatureFlag: (values?: FeatureFlagType) => void\n        submitFeatureFlag: () => void\n        submitFeatureFlagRequest: (featureFlag: FeatureFlagType) => void\n        submitFeatureFlagSuccess: (featureFlag: FeatureFlagType) => void\n        submitFeatureFlagFailure: (error: Error) => void\n    }\n    values: {\n        // kea-loaders\n        featureFlag: FeatureFlagType\n        featureFlagLoading: boolean\n\n        // kea-forms\n        isFeatureFlagSubmitting: boolean\n        showFeatureFlagErrors: boolean\n        featureFlagChanged: boolean\n        featureFlagTouches: Record<string, boolean>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionStepJSON Dataclass in Python\nDESCRIPTION: Dataclass definition for representing action steps with optional matching parameters for elements and events\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/python.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ActionStepJSON:\n    tag_name: Optional[str] = None\n    text: Optional[str] = None\n    text_matching: Optional[ActionStepMatching] = None\n    href: Optional[str] = None\n    href_matching: Optional[ActionStepMatching] = None\n    selector: Optional[str] = None\n    url: Optional[str] = None\n    url_matching: Optional[ActionStepMatching] = \"contains\"\n    event: Optional[str] = None\n    properties: Optional[list[dict]] = None\n```\n\n----------------------------------------\n\nTITLE: Starting and Managing Temporal Worker in Bash\nDESCRIPTION: This Bash script starts a Temporal worker using Python, handles graceful shutdown, and monitors the worker process. It includes signal trapping, process management, and status reporting.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/bash.txt#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\nset -e\n\ncleanup() {\n    echo \"Stopping worker...\"\n    if kill -0 \"$worker_pid\" >/dev/null 2>&1; then\n        kill -SIGTERM \"$worker_pid\"\n    else\n        echo \"Worker process is not running.\"\n    fi\n\n    trap cleanup SIGINT SIGTERM EXIT\n\n    python3 manage.py start_temporal_worker \"$@\" &\n\n    worker_pid=$!\n\n    # Run wait in a loop in case we trap SIGINT or SIGTERM.\n    # In both cases, wait will terminate early, potentially not waiting for graceful shutdown.\n    while wait $worker_pid\n    do\n        status=$?\n        # If we exit with SIGTERM, status will be 128 + 15.\n        # If we exit with SIGINT, status will be 128 + 2.\n        if [ $status -eq 143 ] || [ $status -eq 130 ]; then\n            echo \"Received signal $(($status - 128)), waiting for worker to finish\"\n        elif [ $status -eq 0 ]; then\n            echo \"Worker exited normally, terminating wait\"\n            break\n        else\n            echo \"Worker exited with unexpected exit status $status, terminating wait\"\n            break\n        fi\n    done\n\n    # Run wait in a loop in case we trap SIGINT or SIGTERM.\n    # In both cases, wait will terminate early, potentially not waiting for graceful shutdown.\n    while wait $worker_pid\n    do\n        status=$?\n        # If we exit with SIGTERM, status will be 128 + 15.\n        # If we exit with SIGINT, status will be 128 + 2.\n        if [ $status -eq 143 ] || [ $status -eq 130 ]; then\n            echo \"Received signal $(($status - 128)), waiting for worker to finish\"\n        elif [ $status -eq 0 ]; then\n            echo \"Worker exited normally, terminating wait\"\n            break\n        else\n            echo \"Worker exited with unexpected exit status $status, terminating wait\"\n            break\n        fi\n    done\n}\n\n\ncleanup\n```\n\n----------------------------------------\n\nTITLE: Creating LemonColorPicker with Hex Colors and Data Tokens in React\nDESCRIPTION: Demonstrates the implementation of LemonColorPicker component using both hex colors and data color tokens. It includes examples of handling color selection events.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/lib/lemon-ui/LemonColor/LemonColor.stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Using hex colors\n<LemonColorPicker\n    colors={['#FF0000', '#00FF00', '#0000FF']}\n    selectedColor=\"#FF0000\"\n    onSelectColor={(color) => console.log(color)}\n/>\n\n// Using data color tokens\n<LemonColorPicker\n    colorTokens={['primary', 'secondary', 'danger']}\n    selectedColorToken=\"primary\"\n    onSelectColorToken={(token) => console.log(token)}\n    themeId={1}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing LemonColorList with Hex Colors and Data Tokens in React\nDESCRIPTION: Shows how to use the LemonColorList component with both hex colors and data color tokens. It includes examples of handling color selection events.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/lib/lemon-ui/LemonColor/LemonColor.stories.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Using hex colors\n<LemonColorList\n    colors={['#FF0000', '#00FF00', '#0000FF']}\n    selectedColor=\"#FF0000\"\n    onSelectColor={(color) => console.log(color)}\n/>\n\n// Using data color tokens\n<LemonColorList\n    colorTokens={['primary', 'secondary', 'danger']}\n    selectedColorToken=\"primary\"\n    onSelectColorToken={(token) => console.log(token)}\n    themeId={1}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Local SDK Testing in JavaScript\nDESCRIPTION: Updates the package.json file to use a local version of the PostHog JS SDK for testing changes. This allows developers to test SDK modifications in the main PostHog app.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/scenes/surveys/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"posthog-js\": \"file:../posthog-js\"\n```\n\n----------------------------------------\n\nTITLE: Running Playwright E2E Tests for PostHog\nDESCRIPTION: This command starts the Playwright end-to-end test runner for PostHog. It uses a custom script to initiate the tests.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/playwright/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSTART_PLAYWRIGHT=1 ./bin/e2e-test-runner\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Mobile Testing\nDESCRIPTION: Configures environment variables for mobile testing setup, including core URLs, CORS settings, proxy configurations, and debug options.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/scenes/surveys/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n# Core URLs\nSITE_URL=https://posthog-web-test.ngrok.io\nJS_URL=https://posthog-web-test.ngrok.io\n\n# CORS and security\nCORS_ALLOW_ALL_ORIGINS=true\nCORS_ALLOW_CREDENTIALS=True\nALLOWED_HOSTS=*,localhost,localhost:8010,127.0.0.1,127.0.0.1:8010,posthog-web-test\nDISABLE_SECURE_SSL_REDIRECT=True\nSECURE_COOKIES=False\n\n# Proxy settings\nIS_BEHIND_PROXY=true\nUSE_X_FORWARDED_HOST=true\nUSE_X_FORWARDED_PORT=true\nTRUST_ALL_PROXIES=true\n\n# Debug settings\nDEBUG=true\nDJANGO_DEBUG=true\nSERVE_STATIC=true\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests Against Local PostHog Instance\nDESCRIPTION: This command runs Playwright tests against a locally running PostHog instance. It requires setting environment variables for login credentials and the base URL.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/playwright/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLOGIN_USERNAME='my@email.address' LOGIN_PASSWORD=\"the-password\" BASE_URL='http://localhost:8010' pnpm --filter=@posthog/playwright exec playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story for a Scene\nDESCRIPTION: Template for creating a Storybook story for a scene, including API mocking and URL routing configuration for testing.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { Meta, StoryObj } from '@storybook/react'\nimport { mswDecorator, useStorybookMocks } from '~/mocks/browser'\nimport { App } from 'scenes/App'\nimport { router } from 'kea-router'\nimport { urls } from 'scenes/urls'\n\nexport default {\n    title: 'Scenes-App/Dashboard',\n    decorators: [\n        // mocks used by all stories in this file\n        mswDecorator({\n            get: {\n                '/api/projects/1/dashboards/': require('./__mocks__/dashboards.json'),\n                '/api/projects/1/dashboards/1/': require('./__mocks__/dashboard1.json'),\n                '/api/projects/1/dashboards/1/collaborators/': [],\n            },\n        }),\n    ],\n    // NB! These `parameters` only apply for Scene stories.\n    parameters: { layout: 'fullscreen', options: { showPanel: false }, viewMode: 'story' }, // scene mode\n} as Meta\n\nexport function NewDashboard (): JSX.Element {\n    // mocks used only in this story\n    useStorybookMocks({\n        get: { '/api/projects/dashboard/2/': require('./__mocks__/dashboard2.json') },\n    })\n    useEffect(() => {\n        // change the URL\n        router.actions.push(urls.dashboard(2))\n        // call various other actions to set the initial state\n        newDashboardLogic.actions.showNewDashboardModal()\n    }, [])\n    return <App />\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Cache Consistency in Python\nDESCRIPTION: Provides Python functions for checking and fixing cache consistency issues related to the surveys_opt_in flag. These functions can be used in the Django shell to troubleshoot survey loading problems.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/scenes/surveys/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# In Django shell (python manage.py shell_plus)\nfrom posthog.models.surveys.debug import (\n    check_team_cache_consistency,\n    fix_team_cache_consistency,\n    find_teams_with_cache_inconsistencies,\n    fix_all_teams_cache_consistency\n)\n\n# Check single team\ncheck_team_cache_consistency(\"team_id_or_token\")\n\n# Fix single team\nfix_team_cache_consistency(\"team_id_or_token\")\n\n# Find all teams with issues (only active survey teams)\nfind_teams_with_cache_inconsistencies()\n\n# Fix all teams with issues\nfix_all_teams_cache_consistency()\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Stories in Storybook for Documentation\nDESCRIPTION: Example of how to create a Markdown story file (.stories.mdx) for documentation purposes in Storybook. This shows the basic structure including the Meta component import and title configuration.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to create stories.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- frontend/src/stories/New Page.stories.mdx -->\nimport { Meta } from '@storybook/addon-docs'\n\n<Meta title=\" New Page\" />\n\n# Page Title\n\nWrite your content here...\n```\n\n----------------------------------------\n\nTITLE: Frame Identification and Utility Methods\nDESCRIPTION: Implements utility methods for frame identification and URL handling, including SHA-512 based frame ID generation and source URL parsing.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/rust.txt#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn frame_id(&self) -> String {\n    let mut hasher = Sha512::new();\n    hasher.update(self.fn_name.as_bytes());\n    if let Some(location) = &self.location {\n        hasher.update(location.line.to_string().as_bytes());\n        hasher.update(location.column.to_string().as_bytes());\n    }\n    hasher.update(\n        self.source_url\n            .as_ref()\n            .unwrap_or(&\"\".to_string())\n            .as_bytes(),\n    );\n    format!(\"{:x}\", hasher.finalize())\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQL Migration on All Nodes in ClickHouse\nDESCRIPTION: This snippet shows how to run a SQL migration on all nodes in ClickHouse using the run_sql_with_exceptions function with NodeRole.ALL.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/clickhouse/migrations/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nrun_sql_with_exceptions(node_role=NodeRole.ALL)\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Tab Enum Types in TypeScript\nDESCRIPTION: Creates an enum in types.ts to define the available dashboard tabs. This enum provides type-safe references to tab identifiers throughout the application.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to add tabs to a scene.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum DashboardsTabs {\n    First = 'first',\n    Second = 'second',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Signal Handlers\nDESCRIPTION: Django signal handlers for post-save and post-delete actions to manage worker synchronization\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/python.txt#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@receiver(post_save, sender=Action)\ndef action_saved(sender, instance: Action, created, **kwargs):\n    reload_action_on_workers(team_id=instance.team_id, action_id=instance.id)\n\n@mutable_receiver(post_delete, sender=Action)\ndef action_deleted(sender, instance: Action, **kwargs):\n    drop_action_on_workers(team_id=instance.team_id, action_id=instance.id)\n```\n\n----------------------------------------\n\nTITLE: Running SQL Migration on Data Nodes in ClickHouse\nDESCRIPTION: This snippet demonstrates how to run a SQL migration specifically on data nodes in ClickHouse using the run_sql_with_exceptions function with NodeRole.DATA.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/clickhouse/migrations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nrun_sql_with_exceptions(node_role=NodeRole.DATA)\n```\n\n----------------------------------------\n\nTITLE: Installing ANTLR on Ubuntu\nDESCRIPTION: Script to install ANTLR 4.13.2 on Ubuntu-based systems. It downloads the JAR file, sets up environment variables, and creates an executable script.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/hogql/grammar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ANTLR_VERSION=4.13.2\n\nsudo apt-get install default-jre\nmkdir antlr\ncd antlr\ncurl -o antlr.jar https://www.antlr.org/download/antlr-$ANTLR_VERSION-complete.jar\nexport PWD=`pwd`\necho '#!/bin/bash' > antlr\necho \"java -jar $PWD/antlr.jar \\$*\" >> antlr\nchmod +x antlr\nexport CLASSPATH=\".:$PWD/antlr.jar:$CLASSPATH\"\nexport PATH=\"$PWD:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Package and Import Declarations for PostHog LiveStream Service in Go\nDESCRIPTION: Defines the main package and imports required dependencies for the PostHog LiveStream service. Includes packages for error handling, logging, HTTP, time management, monitoring with Sentry and Prometheus, and web service functionality with Echo framework.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/go.txt#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/getsentry/sentry-go\"\n\t\"github.com/labstack/echo-contrib/echoprometheus\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/spf13/viper\"\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering LemonColorGlyph with Hex Color and Data Token in React\nDESCRIPTION: Demonstrates usage of LemonColorGlyph component with both hex color and data token. It also shows how to use the small variant.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/lib/lemon-ui/LemonColor/LemonColor.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Using a hex color\n<LemonColorGlyph color=\"#FF0000\" />\n\n// Using a data token\n<LemonColorGlyph colorToken=\"primary\" themeId={1} />\n\n// Small variant\n<LemonColorGlyph color=\"#FF0000\" size=\"small\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing a PostHog CLI Release in Bash\nDESCRIPTION: This snippet demonstrates the process of creating a new release for the PostHog CLI. It includes steps for creating a new branch, bumping the version number, committing changes, tagging the release, pushing to the repository, and optionally publishing to crates.io.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b \"cli/release-v0.1.0-pre1\"\n# Bump version number in Cargo.toml\ngit add .\ngit commit -m \"Bump version number\"\ngit tag \"posthog-cli-v0.1.0-prerelease.1\"\ngit push\ngit push --tags\n# Optional - also publish to crates.io\ncd cli && cargo publish\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Generation for Kea Logic\nDESCRIPTION: Command for generating TypeScript types for Kea logic and validating the TypeScript code, which creates required type files.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm typegen:write && pnpm typescript:check\n```\n\n----------------------------------------\n\nTITLE: Starting Development Stack with Docker Compose for rusty-hook Testing\nDESCRIPTION: Command to start the development stack using Docker Compose. This sets up the required services for testing the rusty-hook webhook system.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/md.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.yml up -d --wait\n```\n\n----------------------------------------\n\nTITLE: Downloading and Decompressing IP Geolocation Database for RealTime Hog 3000\nDESCRIPTION: This bash command downloads a compressed IP-to-geolocation database from PostHog's CDN and decompresses it using brotli. The resulting mmdb.db file is required for geolocation features in the application.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/livestream/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://mmdbcdn.posthog.net/ | brotli -d > mmdb.db\n```\n\n----------------------------------------\n\nTITLE: Implementing LemonColorButton with Hex Color and Data Token in React\nDESCRIPTION: Shows how to use the LemonColorButton component with both a hex color and a data color token.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/lib/lemon-ui/LemonColor/LemonColor.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Using a hex color\n<LemonColorButton color=\"#FF0000\" />\n\n// Using a data color token\n<LemonColorButton colorToken=\"primary\" themeId={1} />\n```\n\n----------------------------------------\n\nTITLE: Running Tests for rusty-hook with Database Connection\nDESCRIPTION: Command to run tests for the rusty-hook service, with a note about the DATABASE_URL environment variable requirement that can be loaded from the project's .env file.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note that tests require a DATABASE_URL environment variable to be set, e.g.:\n# export DATABASE_URL=postgres://posthog:posthog@localhost:15432/test_database\n# But there is an .env file in the project root that should be used automatically.\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Running the RealTime Hog 3000 Application\nDESCRIPTION: This command starts the RealTime Hog 3000 application using Go. It runs the application in the current directory after configuration has been set up.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/livestream/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Clickhouse Benchmarks Locally\nDESCRIPTION: Commands to set up the benchmark machine and run all benchmarks against a Clickhouse node. Requires Clickhouse credentials to be provided as environment variables.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/ee/benchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set up machine\nasv machine --machine ci-benchmarks --config ee/benchmarks/asv.conf.json\n# Replace X with appropriate credentials\nCLICKHOUSE_HOST=X CLICKHOUSE_USER=X CLICKHOUSE_PASSWORD=X CLICKHOUSE_DATABASE=posthog asv run --config ee/benchmarks/asv.conf.json\n```\n\n----------------------------------------\n\nTITLE: Running Dagster Development Server Locally in Bash\nDESCRIPTION: Starts the Dagster development server in debug mode, which is critical for proper local execution. The server will be available at http://localhost:3000 by default.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/dags/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Important: Set DEBUG=1 when running locally to use local resources\nDEBUG=1 dagster dev\n```\n\n----------------------------------------\n\nTITLE: Using DataTable Component in React\nDESCRIPTION: Shows the standard pattern for using node-specific components, in this case the DataTable component that expects queries of kind 'DataTable'.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/queries/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nDataTable({ query, setQuery })\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL connection with a test query\nDESCRIPTION: SQL command for testing a successful connection to PostgreSQL by querying the current version. This is a simple way to verify connectivity without modifying any data.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT version();\n```\n\n----------------------------------------\n\nTITLE: Running DAG Tests with Pytest in Bash\nDESCRIPTION: Commands for running tests implemented using pytest. Includes examples for running all tests, specific test files, individual tests, and verbose output.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/dags/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# From the project root\npytest dags/\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest dags/tests/test_exchange_rate.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest dags/tests/test_exchange_rate.py::test_name\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest -v dags/tests/test_exchange_rate.py\n```\n\n----------------------------------------\n\nTITLE: Restoring a PostgreSQL database from a backup file\nDESCRIPTION: Command for restoring a PostgreSQL database from a SQL backup file. This command will recreate the database structure and repopulate it with data.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npsql -h hostname -p port -U username -W -d database -f backup.sql\n```\n\n----------------------------------------\n\nTITLE: Setting DAGSTER_HOME Environment Variable in Bash\nDESCRIPTION: Sets the DAGSTER_HOME environment variable to specify where Dagster stores instance configuration, logs, and other local artifacts. This can be set to a custom path or a subdirectory within the project.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/dags/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set DAGSTER_HOME to a directory of your choice\nexport DAGSTER_HOME=/path/to/your/dagster/home\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport DAGSTER_HOME=$(pwd)/.dagster_home\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Page Title using Meta Component in JSX\nDESCRIPTION: This JSX code uses the imported Meta component to set the title of the Storybook documentation page to 'Missing components'. This helps organize the Storybook navigation structure.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/Missing components.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\" Missing components\" />\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using psql with password authentication\nDESCRIPTION: Command to connect to a PostgreSQL database using psql with explicit password authentication. The command specifies the host, port, username, and prompts for a password.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql -h hostname -p port -U username -W -d database\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Avatars in Markdown and HTML\nDESCRIPTION: This code snippet creates a grid of contributor avatars using a combination of Markdown and HTML. Each avatar is displayed as a 50x50 pixel image linked to the contributor's GitHub profile.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n <a href=\"https://github.com/timgl\"><img src=\"https://avatars.githubusercontent.com/u/1727427?v=4\" width=\"50\" height=\"50\" alt=\"\"/></a> <a href=\"https://github.com/mariusandra\"><img src=\"https://avatars.githubusercontent.com/u/53387?v=4\" width=\"50\" height=\"50\" alt=\"\"/></a> <a href=\"https://github.com/EDsCODE\"><img src=\"https://avatars.githubusercontent.com/u/13127476?v=4\" width=\"50\" height=\"50\" alt=\"\"/></a>\n```\n\n----------------------------------------\n\nTITLE: Running Single Frontend Test\nDESCRIPTION: Command to run a specific frontend test file using Jest.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd frontend && pnpm jest <test_file>\n```\n\n----------------------------------------\n\nTITLE: Installing pymssql from Source for Troubleshooting\nDESCRIPTION: This command reinstalls the pymssql Python package from source without using binary packages or cache. This can resolve persistent issues with MS SQL connections after driver installation.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/warehouse/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre --no-binary :all: pymssql --no-cache\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Page Title with Meta Component in JSX\nDESCRIPTION: This code sets the title of the Storybook documentation page using the Meta component. It's typically used at the top of a Storybook documentation file.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to use components.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\" How to use components?\" />\n```\n\n----------------------------------------\n\nTITLE: Linting Python Code\nDESCRIPTION: Command to lint Python code using ruff.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nruff .\n```\n\n----------------------------------------\n\nTITLE: Error Message When MS SQL Drivers Are Missing\nDESCRIPTION: This error message appears when attempting to connect a SQL database to the data warehouse without the required MS SQL drivers installed. The specific error indicates a missing symbol in the flat namespace.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/warehouse/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsymbol not found in flat namespace '_bcp_batch'\n```\n\n----------------------------------------\n\nTITLE: Formatting Frontend Code\nDESCRIPTION: Command to format frontend code using pnpm.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd frontend && pnpm format\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock API Responses\nDESCRIPTION: Demonstrates various ways to configure mock API responses including simple objects, delayed responses, status codes, and parameter handling.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to mock requests.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseStorybookMocks({\n    get: {},\n    post: {},\n    patch: {},\n    delete: {},\n})\n\n// and any of these styles\nuseStorybookMocks({\n    get: {\n        // return a 200 success with the object passed here\n        '/api/endpoint': { results: [], success: true }\n\n        // return a 200 success after a 100ms delay, using msw-s ctx\n        '/api/other_endpoint': (_, __, ctx) => [\n            ctx.delay(100),\n            ctx.status(200),\n            ctx.json({ results: [], success: true })\n        ]\n\n        // shorthand for status + json\n        '/api/status_shorthand': () => [500, { error: 'Error text' }]\n\n        // complicated param handling\n        '/api/environments/:team_id/insights': (req, _, ctx) => {\n            const team = req.params['team']\n            const shortId = req.url.searchParams.get('short_id')\n            if (shortId === 'my_insight') {\n                return [200, { result: [{ ...insightJson, team_id: team }] }]\n            }\n            return [500, null]\n        }\n\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Building Frontend\nDESCRIPTION: Command to build the frontend using pnpm.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncd frontend && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Tests for rusty-hook with Environment Variables\nDESCRIPTION: Command to run tests for the rusty-hook system, with notes about the required DATABASE_URL environment variable that points to a PostgreSQL database. The project includes a default .env file that should be automatically detected.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/md.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note that tests require a DATABASE_URL environment variable to be set, e.g.:\n# export DATABASE_URL=postgres://posthog:posthog@localhost:15432/test_database\n# But there is an .env file in the project root that should be used automatically.\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Running BigQuery Batch Export Tests with Credentials\nDESCRIPTION: Command to run BigQuery batch export tests using a service account credentials file. Requires a BigQuery project, dataset, and a ServiceAccount with appropriate access.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/temporal/tests/batch_exports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=1 GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/project-credentials.json pytest posthog/temporal/tests/batch_exports/test_bigquery_batch_export_workflow.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS\nDESCRIPTION: Commands to install required libraries (boost and antlr4-cpp-runtime) using Homebrew package manager.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogql_parser/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install boost antlr4-cpp-runtime\n```\n\n----------------------------------------\n\nTITLE: JavaScript Frame Resolution Implementation\nDESCRIPTION: Implements the resolution of minified JavaScript frames using sourcemaps, including error handling and frame lookup logic.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/rust.txt#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl RawJSFrame {\n    pub async fn resolve<C>(&self, team_id: i32, catalog: &C) -> Result<Frame, UnhandledError>\n    where\n        C: SymbolCatalog<OrChunkId<Url>, OwnedSourceMapCache>,\n    {\n        match self.resolve_impl(team_id, catalog).await {\n            Ok(frame) => Ok(frame),\n            Err(Error::ResolutionError(FrameError::JavaScript(e))) => {\n                Ok(self.handle_resolution_error(e))\n            }\n            Err(Error::ResolutionError(FrameError::MissingChunkIdData(chunk_id))) => {\n                Ok(self.handle_resolution_error(JsResolveErr::NoSourcemapUploaded(chunk_id)))\n            }\n            Err(Error::UnhandledError(e)) => Err(e),\n            Err(Error::EventError(_)) => unreachable!(),\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Redshift Batch Export Tests with Credentials\nDESCRIPTION: Command to run Redshift batch export tests using host, user, and password credentials. Requires a Redshift instance, network access, and user credentials with CREATEDB permissions.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/temporal/tests/batch_exports/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=1 REDSHIFT_HOST=workgroup.111222333.region.redshift-serverless.amazonaws.com REDSHIFT_USER=test_user REDSHIFT_PASSWORD=test_password pytest posthog/temporal/tests/batch_exports/test_redshift_batch_export_workflow.py\n```\n\n----------------------------------------\n\nTITLE: Installing HogQL Parser Locally\nDESCRIPTION: Command for installing the HogQL parser package locally for testing purposes using pip.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogql_parser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ./hogql_parser\n```\n\n----------------------------------------\n\nTITLE: Running HogQL Tests\nDESCRIPTION: Command to run pytest for the hogql module using the locally-built version of hogql_parser.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogql_parser/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest posthog/hogql/\n```\n\n----------------------------------------\n\nTITLE: Running S3 Batch Export Tests with AWS Configuration\nDESCRIPTION: Command to run S3 batch export tests with a real S3 bucket and KMS key. Requires AWS account access, an S3 bucket, and a KMS key with appropriate permissions.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/temporal/tests/batch_exports/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=1 S3_TEST_KMS_KEY_ID='1111111-2222-3333-4444-55555555555' S3_TEST_BUCKET='your-test-bucket' pytest posthog/temporal/tests/batch_exports/test_s3_batch_export_workflow.py\n```\n\n----------------------------------------\n\nTITLE: Main Function Implementation for PostHog LiveStream Service in Go\nDESCRIPTION: The main function configures and initializes a PostHog LiveStream service. It sets up Sentry for error reporting, validates configuration requirements, initializes geolocation, statistics tracking, Kafka consumer, and an Echo web server with various middleware and routes for handling event streaming and metrics.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/go.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tloadConfigs()\n\n\tisProd := viper.GetBool(\"prod\")\n\n\terr := sentry.Init(sentry.ClientOptions{\n\t\tDsn:              viper.GetString(\"sentry.dsn\"),\n\t\tDebug:            !isProd,\n\t\tAttachStacktrace: true,\n\t})\n\tif err != nil {\n\t\tsentry.CaptureException(err)\n\t\tlog.Fatalf(\"sentry.Init: %s\", err)\n\t}\n\t// Flush buffered events before the program terminates.\n\t// Set the timeout to the maximum duration the program can afford to wait.\n\tdefer sentry.Flush(2 * time.Second)\n\n\tmmdb := viper.GetString(\"mmdb.path\")\n\tif mmdb == \"\" {\n\t\tsentry.CaptureException(errors.New(\"mmdb.path must be set\"))\n\t\tlog.Fatal(\"mmdb.path must be set\")\n\t}\n\tbrokers := viper.GetString(\"kafka.brokers\")\n\tif brokers == \"\" {\n\t\tsentry.CaptureException(errors.New(\"kafka.brokers must be set\"))\n\t\tlog.Fatal(\"kafka.brokers must be set\")\n\t}\n\ttopic := viper.GetString(\"kafka.topic\")\n\tif topic == \"\" {\n\t\tsentry.CaptureException(errors.New(\"kafka.topic must be set\"))\n\t\tlog.Fatal(\"kafka.topic must be set\")\n\t}\n\tgroupID := viper.GetString(\"kafka.group_id\")\n\tif groupID == \"\" {\n\t\tsentry.CaptureException(errors.New(\"kafka.group_id must be set\"))\n\t\tlog.Fatal(\"kafka.group_id must be set\")\n\t}\n\n\tgeolocator, err := NewMaxMindGeoLocator(mmdb)\n\tif err != nil {\n\t\tsentry.CaptureException(err)\n\t\tlog.Fatalf(\"Failed to open MMDB: %v\", err)\n\t}\n\n\tstats := newStatsKeeper()\n\n\tphEventChan := make(chan PostHogEvent)\n\tstatsChan := make(chan PostHogEvent)\n\tsubChan := make(chan Subscription)\n\tunSubChan := make(chan Subscription)\n\n\tgo stats.keepStats(statsChan)\n\n\tkafkaSecurityProtocol := \"SSL\"\n\tif !isProd {\n\t\tkafkaSecurityProtocol = \"PLAINTEXT\"\n\t}\n\tconsumer, err := NewPostHogKafkaConsumer(brokers, kafkaSecurityProtocol, groupID, topic, geolocator, phEventChan, statsChan)\n\tif err != nil {\n\t\tsentry.CaptureException(err)\n\t\tlog.Fatalf(\"Failed to create Kafka consumer: %v\", err)\n\t}\n\tdefer consumer.Close()\n\tgo consumer.Consume()\n\n\tfilter := NewFilter(subChan, unSubChan, phEventChan)\n\tgo filter.Run()\n\n\t// Echo instance\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.RequestID())\n\te.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n\t\tLevel: 9, // Set compression level to maximum\n\t}))\n\te.Use(echoprometheus.NewMiddlewareWithConfig(\n\t\techoprometheus.MiddlewareConfig{DoNotUseRequestPathFor404: true, Subsystem: \"livestream\"}))\n\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"*\"},\n\t\tAllowMethods: []string{http.MethodGet, http.MethodHead},\n\t}))\n\n\t// Routes\n\te.GET(\"/\", index)\n\n\t// For details why promhttp.Handler won't work: https://github.com/prometheus/client_golang/issues/622\n\te.GET(\"/metrics\", echo.WrapHandler(promhttp.InstrumentMetricHandler(\n\t\tprometheus.DefaultRegisterer,\n\t\tpromhttp.HandlerFor(prometheus.DefaultGatherer, promhttp.HandlerOpts{DisableCompression: true}),\n\t)))\n\n\te.GET(\"/served\", servedHandler(stats))\n\n\te.GET(\"/stats\", statsHandler(stats))\n\n\te.GET(\"/events\", streamEventsHandler(e.Logger, subChan, filter))\n\n\te.GET(\"/jwt\", func(c echo.Context) error {\n\t\tclaims, err := getAuth(c.Request().Header)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn c.JSON(http.StatusOK, claims)\n\t})\n\n\tif !isProd {\n\t\te.File(\"/debug\", \"./index.html\")\n\t\te.GET(\"/debug/sse\", func(c echo.Context) error {\n\t\t\te.Logger.Printf(\"Map client connected, ip: %v\", c.RealIP())\n\n\t\t\tw := c.Response()\n\t\t\tw.Header().Set(\"Content-Type\", \"text/event-stream\")\n\t\t\tw.Header().Set(\"Cache-Control\", \"no-cache\")\n\t\t\tw.Header().Set(\"Connection\", \"keep-alive\")\n\n\t\t\tticker := time.NewTicker(1 * time.Second)\n\t\t\tdefer ticker.Stop()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-c.Request().Context().Done():\n\t\t\t\t\te.Logger.Printf(\"SSE client disconnected, ip: %v\", c.RealIP())\n\t\t\t\t\treturn nil\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tevent := Event{\n\t\t\t\t\t\tData: []byte(\"ping: \" + time.Now().Format(time.RFC3339Nano)),\n\t\t\t\t\t}\n\t\t\t\t\tif err := event.WriteTo(w); err != nil {\n\t\t\t\t\t\treturn err\n\t\t\t\t\t}\n\t\t\t\t\tw.Flush()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress E2E Tests for PostHog\nDESCRIPTION: This command starts the Cypress end-to-end test runner for PostHog. It uses a custom script to initiate the tests.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/playwright/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSTART_CYPRESS=1 ./bin/e2e-test-runner\n```\n\n----------------------------------------\n\nTITLE: Installing ANTLR on macOS\nDESCRIPTION: Command to install the ANTLR parser generator tool on macOS using Homebrew.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/hogql/grammar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install antlr\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Compose for Testing\nDESCRIPTION: This command starts the Docker Compose setup for the development environment, which is required for running tests.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f ../docker-compose.dev.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Running the Feature Flags Binary with Debug Logging\nDESCRIPTION: This command runs the feature-flags binary with debug-level logging enabled, useful for development and troubleshooting.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=debug cargo run --bin feature-flags\n```\n\n----------------------------------------\n\nTITLE: SQL Migration - Create Salesforce Tables\nDESCRIPTION: Creates three tables: 'salesforce_project', 'salesforce_billing_customers', and 'salesforce_orders' for storing Salesforce integration data. Each table includes various fields for mapping Salesforce data to PostHog entities.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/migrations/max_migration.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n0710_add_salesforce_tables\n```\n\n----------------------------------------\n\nTITLE: Connecting to Pod with Default Claim Duration\nDESCRIPTION: Example command to connect to a toolbox pod with the default 12-hour claim duration.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/infra-scripts/clitools/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython toolbox.py\n```\n\n----------------------------------------\n\nTITLE: Formatting Code for Feature Flags Package\nDESCRIPTION: This command applies Rust's standard code formatting to the feature-flags package, ensuring consistent code style.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo fmt --package feature-flags\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Pod Claim Duration\nDESCRIPTION: Example command to extend the claim duration of an existing pod to 24 hours, without creating a new pod connection.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/infra-scripts/clitools/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython toolbox.py --update-claim --claim-duration 24\n```\n\n----------------------------------------\n\nTITLE: Installing ASV and Dependencies for Clickhouse Benchmarks\nDESCRIPTION: Command to install airspeed velocity (asv) and virtualenv, which are required to run the benchmarks.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/ee/benchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install asv virtualenv\n```\n\n----------------------------------------\n\nTITLE: Setting Up Feature Flags for Cypress Tests in PostHog\nDESCRIPTION: This code snippet demonstrates how to use the 'setupFeatureFlags' helper function to intercept calls to the 'decide' endpoint and set up feature flags for testing. It handles both relative and absolute URL calls to the endpoint.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/cypress/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetupFeatureFlags({\n    // add feature flags here, for e.g.\n    'feature-flag-key': true,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Scene to the Enum\nDESCRIPTION: Example of adding a scene to the Scene enum in the sceneTypes file, which registers the scene in the application.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport enum Scene {\n    Dashboards = 'Dashboards',\n}\n```\n\n----------------------------------------\n\nTITLE: Backfilling Historical Clickhouse Benchmark Data\nDESCRIPTION: Commands to backfill benchmark data for previous git commits. Requires cloning the benchmark-results repository and specifying a date range or commit range.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/ee/benchmarks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCLICKHOUSE_HOST=X CLICKHOUSE_USER=X CLICKHOUSE_PASSWORD=X CLICKHOUSE_DATABASE=posthog asv run --config ee/benchmarks/asv.conf.json --date-period 4d master~500..\nasv publish\n```\n\n----------------------------------------\n\nTITLE: Adding Scene Import to App Scenes\nDESCRIPTION: Example of adding a scene import to the appScenes record, which dynamically imports the scene component when needed.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to build a scene.stories.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport const appScenes: Record<Scene, () => any> = {\n    [Scene.Dashboards]: () => import('./dashboard/Dashboards'),\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JavaScript\nDESCRIPTION: This snippet imports the Meta component from Storybook's addon-docs package. It's used to set metadata for the Storybook documentation page.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/How to use components.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Basic HogVM Bytecode Examples\nDESCRIPTION: Examples of common expressions and their corresponding bytecode representation, including arithmetic operations, logical operations, property access, and function calls.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1 + 2                  # [_H, op.INTEGER, 2, op.INTEGER, 1, op.PLUS]\n1 and 2                # [_H, op.INTEGER, 2, op.INTEGER, 1, op.AND, 2]\n1 or 2                 # [_H, op.INTEGER, 2, op.INTEGER, 1, op.OR, 2]\nnot true               # [_H, op.TRUE, op.NOT]\nproperties.bla         # [_H, op.STRING, \"bla\", op.STRING, \"properties\", op.GET_GLOBAL, 2]\ncall('arg', 'another') # [_H, op.STRING, \"another\", op.STRING, \"arg\", op.CALL_GLOBAL, \"call\", 2]\n1 = 2                  # [_H, op.INTEGER, 2, op.INTEGER, 1, op.EQ]\n'bla' !~ 'a'           # [_H, op.STRING, 'a', op.STRING, 'bla', op.NOT_REGEX]\n```\n\n----------------------------------------\n\nTITLE: Using QueryEditor Component in React\nDESCRIPTION: Example of how to use the generic JSON editor component for queries.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/queries/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<QueryEditor query={} setQuery={} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Properties in Temporal with YAML\nDESCRIPTION: An example showing how to structure a docker.yaml file to override default dynamic configuration values in Temporal. The snippet demonstrates different property types (boolean, duration, float, map) with various constraints including namespace, taskQueueName, and taskType.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/docker/temporal/dynamicconfig/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntestGetBoolPropertyKey:\n  - value: false\n  - value: true\n    constraints:\n      namespace: \"global-samples-namespace\"\n  - value: false\n    constraints:\n      namespace: \"samples-namespace\"\ntestGetDurationPropertyKey:\n  - value: \"1m\"\n    constraints:\n      namespace: \"samples-namespace\"\n      taskQueueName: \"longIdleTimeTaskqueue\"\ntestGetFloat64PropertyKey:\n  - value: 12.0\n    constraints:\n      namespace: \"samples-namespace\"\ntestGetMapPropertyKey:\n  - value:\n      key1: 1\n      key2: \"value 2\"\n      key3:\n        - false\n        - key4: true\n          key5: 2.0\n```\n\n----------------------------------------\n\nTITLE: Raw JavaScript Frame Structure Definition in Rust\nDESCRIPTION: Defines the RawJSFrame struct that represents a minified JavaScript stack frame with location information, source URL, and other metadata needed for sourcemap resolution.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/rust.txt#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Deserialize, Serialize)]\npub struct RawJSFrame {\n    #[serde(flatten)]\n    pub location: Option<FrameLocation>,\n    #[serde(rename = \"filename\")]\n    pub source_url: Option<String>,\n    pub in_app: bool,\n    #[serde(rename = \"function\")]\n    pub fn_name: String,\n    #[serde(alias = \"chunkId\", skip_serializing_if = \"Option::is_none\")]\n    pub chunk_id: Option<String>,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Toolbox CLI Using Python\nDESCRIPTION: Command to run the toolbox CLI through Python with optional flags. This approach works on all systems that have Python installed.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/infra-scripts/clitools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython toolbox.py [flags]\n```\n\n----------------------------------------\n\nTITLE: Required HogVM Functions\nDESCRIPTION: List of mandatory function implementations for a Hog Certified Parser, including string manipulation, type conversion, and null handling functions.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconcat(...)              # concat('test: ', 1, null, '!') == 'test: 1!'\nmatch(string, pattern)   # match('fish', '$fi.*') == true\ntoString(val)            # toString(true) == 'true'\ntoInt(val)               # toInt('123') == 123\ntoFloat(val)             # toFloat('123.2') == 123.2\ntoUUID(val)              # toUUID('string') == 'string'\nifNull(val, alternative) # ifNull('string', false) == 'string'\n```\n\n----------------------------------------\n\nTITLE: Frame Location Structure Definition\nDESCRIPTION: Defines the FrameLocation struct that holds line and column information for a stack frame position.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/rust.txt#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Deserialize, Serialize, Eq, PartialEq)]\npub struct FrameLocation {\n    #[serde(rename = \"lineno\")]\n    pub line: u32,\n    #[serde(rename = \"colno\")]\n    pub column: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Pod with Custom Claim Duration\nDESCRIPTION: Example command to connect to a toolbox pod with a custom claim duration of 4 hours.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/infra-scripts/clitools/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython toolbox.py --claim-duration 4\n```\n\n----------------------------------------\n\nTITLE: Displaying PostHog CLI Help Information in Bash\nDESCRIPTION: This snippet shows the output of running the PostHog CLI help command. It displays available commands, options, and usage instructions for the CLI tool.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> posthog-cli --help\nThe command line interface for PostHog 🦔\n\nUsage: posthog-cli [OPTIONS] <COMMAND>\n\nCommands:\n  login      Interactively authenticate with PostHog, storing a personal API token locally. You can also use the environment variables `POSTHOG_CLI_TOKEN` and `POSTHOG_CLI_ENV_ID`\n  query      Run a SQL query against any data you have in posthog. This is mostly for fun, and subject to change\n  sourcemap  Upload a directory of bundled chunks to PostHog\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n      --host <HOST>  The PostHog host to connect to [default: https://us.posthog.com]\n  -h, --help         Print help\n  -V, --version      Print version\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using psql with URI format\nDESCRIPTION: Command to connect to a PostgreSQL database using psql with a URI connection string format. This format encapsulates all connection parameters in a single string.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql postgresql://username:password@hostname:port/database\n```\n\n----------------------------------------\n\nTITLE: HogVM Null Handling Examples\nDESCRIPTION: Examples demonstrating how null values are handled in equality comparisons and concatenation operations.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n1 == null # false\n1 != null # true\n```\n\n----------------------------------------\n\nTITLE: Temporal Workflows Package Description\nDESCRIPTION: Markdown documentation explaining the purpose and current state of the Temporal Workflows package, including a TODO note about future architectural improvements.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/temporal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Temporal Workflows\n\nThis python package contains the Temporal Workflows we use for e.g. maintenance\ntasks for the Person on Events project, and the Batch Export functionality.\n\nTODO: It's currently a package under the Django project. However, the nature of\nthe Batch Exports functionality is that we are adding lots of dependencies that\nare almost entirely unrelated to the web app. To avoid increased docker image\nsize, unnecessary pod churn on deployments, slow pip installs, slow IDE\nperformance, slow tooling performance it would be preferable to reduce the\ninterface between the web app and the temporal workers to the gRPC interface\nrather than a Python object interface.\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JavaScript\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs package. The Meta component is used to set metadata for the Storybook documentation page.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/Missing components.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs for defining the documentation page title.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/Lemon UI.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs'\n\n<Meta title=\"Lemon UI/Overview\" />\n```\n\n----------------------------------------\n\nTITLE: FakeAbortError Class Implementation in TypeScript\nDESCRIPTION: Custom error class that mimics the native AbortError, allowing for consistent error type checking when handling aborted operations.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/products/editor/backend/chunking/test/fixtures/ts.txt#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass FakeAbortError extends Error {\n    name = 'AbortError'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta Component in JSX\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs package, which is used to configure metadata for the documentation page.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/Missing scenes.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs'\n\n<Meta title=\" Missing scenes\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Storybook Meta Component in JSX\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs package and sets the title of the Storybook page to 'Hello'.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/stories/Hello.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs'\n\n<Meta title=\" Hello\" />\n```\n\n----------------------------------------\n\nTITLE: Manually Generating Python Code from Grammar\nDESCRIPTION: Commands to manually generate Python code from HogQL grammar files using ANTLR. This generates lexer and parser files with visitor support.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/hogql/grammar/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd posthog/hogql/grammar\nantlr -Dlanguage=Python3 HogQLLexer.g4\nantlr -visitor -Dlanguage=Python3 HogQLParser.g4\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors List in HTML/Markdown\nDESCRIPTION: HTML markup displaying contributor avatars in a grid format with links to their profiles. Each contributor is represented by a 50x50px avatar image and a link to their profile or website.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/grellyd\"><img src=\"https://avatars.githubusercontent.com/u/7812612?v=4\" width=\"50\" height=\"50\" alt=\"\"/></a>\n```\n\n----------------------------------------\n\nTITLE: Querying Survey Data in SQL\nDESCRIPTION: Demonstrates how to query the posthog_survey table in SQL to retrieve survey data for debugging purposes. This can be executed in Metabase or directly in the PostgreSQL database.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/scenes/surveys/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from posthog_survey\n where id = '{survey_id}'\n```\n\n----------------------------------------\n\nTITLE: Configuring ngrok for Mobile Device Testing\nDESCRIPTION: Sets up ngrok configuration for exposing localhost to test on mobile devices. It defines tunnels for both web and app components of PostHog.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/scenes/surveys/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nagent:\n    authtoken: YOUR_AUTH_TOKEN\ntunnels:\n    web:\n        proto: http\n        addr: 8010\n        host_header: rewrite\n        subdomain: posthog-web-test\n    app:\n        proto: http\n        addr: 3000\n        subdomain: posthog-app-test\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft SQL Server Drivers on macOS using Homebrew\nDESCRIPTION: This command sequence installs Microsoft ODBC Driver 18 for SQL Server and related tools on macOS. The HOMEBREW_ACCEPT_EULA=Y flag automatically accepts the end-user license agreement during installation.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/warehouse/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release\nbrew update\nHOMEBREW_ACCEPT_EULA=Y brew install msodbcsql18 mssql-tools18\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test with Detailed Output\nDESCRIPTION: This command runs a specific test in the feature-flags package, providing exact matching and detailed output for debugging purposes.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo watch -x \"test --package feature-flags --lib -- property_matching::tests::test_match_properties_math_operators --exact --show-output\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Database for PostgreSQL\nDESCRIPTION: This command sets up the test environment, specifically for PostgreSQL. It's required to run once when creating the test database.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nTEST=1 python manage.py setup_test_environment --only-postgres\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Feature Flags Package\nDESCRIPTION: This command runs all tests for the feature-flags package using Cargo, Rust's package manager and build system.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --package feature-flags\n```\n\n----------------------------------------\n\nTITLE: Installing Cargo Watch for Development\nDESCRIPTION: This command installs cargo-watch, a utility for watching code changes and automatically running commands, useful for development workflows.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install cargo-watch\n```\n\n----------------------------------------\n\nTITLE: Watching and Running Tests Automatically\nDESCRIPTION: This command uses cargo-watch to automatically run tests whenever changes are detected in the feature-flags package.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/feature-flags/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo watch -x test --package feature-flags\n```\n\n----------------------------------------\n\nTITLE: Running Snowflake Batch Export Tests with Password Authentication\nDESCRIPTION: Command to run Snowflake batch export tests using password authentication. Requires a Snowflake account, user, role, and warehouse with appropriate permissions.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/temporal/tests/batch_exports/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=1 SNOWFLAKE_WAREHOUSE='your-warehouse' SNOWFLAKE_USERNAME='your-username' SNOWFLAKE_PASSWORD='your-password' SNOWFLAKE_ACCOUNT='your-account' SNOWFLAKE_ROLE='your-role' pytest posthog/temporal/tests/batch_exports/test_snowflake_batch_export_workflow.py\n```\n\n----------------------------------------\n\nTITLE: Running Snowflake Batch Export Tests with Key Pair Authentication\nDESCRIPTION: Command to run Snowflake batch export tests using key pair authentication. Requires a Snowflake account, user, role, warehouse, and a generated key pair.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/temporal/tests/batch_exports/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=1 SNOWFLAKE_WAREHOUSE='your-warehouse' SNOWFLAKE_USERNAME='your-username' SNOWFLAKE_PRIVATE_KEY='your-private-key' SNOWFLAKE_PRIVATE_KEY_PASSPHRASE='your-passphrase' SNOWFLAKE_ACCOUNT='your-account' SNOWFLAKE_ROLE='your-role' pytest posthog/temporal/tests/batch_exports/test_snowflake_batch_export_workflow.py\n```\n\n----------------------------------------\n\nTITLE: Running Specific Clickhouse Benchmark Tests\nDESCRIPTION: Command to run only benchmarks matching a specific regex pattern, useful for quick testing and iteration during development.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/ee/benchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nasv run --config ee/benchmarks/asv.conf.json --bench track_lifecycle --quick\n```\n\n----------------------------------------\n\nTITLE: Regenerating Schema for Web Analytics in PostHog\nDESCRIPTION: Command to rebuild the schema that converts TypeScript types to Pydantic models for type hinting in the backend. This ensures consistency between frontend and backend type definitions.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/frontend/src/scenes/web-analytics/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run schema:build\n```\n\n----------------------------------------\n\nTITLE: Building Grammar with npm Script\nDESCRIPTION: Command to build the grammar using the predefined npm script in the project.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/posthog/hogql/grammar/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run grammar:build\n```\n\n----------------------------------------\n\nTITLE: Cohort Matching Operations in HogQL v1.0.1\nDESCRIPTION: Defines bytecode operations for cohort membership checking. Includes operations for both inclusion (IN_COHORT) and exclusion (NOT_IN_COHORT) checks.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/common/hogvm/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIN_COHORT = 27     # [val2, val1, IREGEX]               # val1 in cohort val2\nNOT_IN_COHORT = 28 # [val2, val1, NOT_IREGEX]           # val1 not in cohort val2\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Development Stack for rusty-hook\nDESCRIPTION: Command to start the development stack using Docker Compose, which is required for testing the rusty-hook service.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/rust/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-compose.yml up -d --wait\n```\n\n----------------------------------------\n\nTITLE: Running Single Python Test\nDESCRIPTION: Command to run a specific Python test method using pytest.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npytest path/to/test.py::TestClass::test_method\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Tests\nDESCRIPTION: Commands to run all frontend tests using pnpm.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd frontend && pnpm test\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Checking\nDESCRIPTION: Command to run TypeScript type checking on frontend code.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncd frontend && pnpm typescript:check\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment\nDESCRIPTION: Command to start the development environment.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/CLAUDE.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n./bin/start\n```\n\n----------------------------------------\n\nTITLE: Running Toolbox CLI Directly in Unix Systems\nDESCRIPTION: Command to run the toolbox CLI directly as an executable in Unix-based systems after making it executable with chmod.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/infra-scripts/clitools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./toolbox.py [flags]\n```\n\n----------------------------------------\n\nTITLE: Making Toolbox Script Executable in Unix Systems\nDESCRIPTION: Command to make the toolbox.py script executable in Unix-based systems, which is required before directly running the script from the command line.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/infra-scripts/clitools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x toolbox.py\n```\n\n----------------------------------------\n\nTITLE: Creating a compressed PostgreSQL backup with gzip\nDESCRIPTION: Command for creating a compressed database backup by piping the pg_dump output through gzip. This results in a smaller backup file size.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -h hostname -p port -U username -W -d database | gzip > backup.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using environment variables\nDESCRIPTION: Command demonstrating how to set environment variables for PostgreSQL connection parameters before using psql, which eliminates the need to specify connection details in the command line.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PGHOST=hostname\nexport PGPORT=port\nexport PGUSER=username\nexport PGPASSWORD=password\nexport PGDATABASE=database\npsql\n```\n\n----------------------------------------\n\nTITLE: Restoring a compressed PostgreSQL backup\nDESCRIPTION: Command for restoring a compressed PostgreSQL database backup. It uses gunzip to decompress the backup file before piping it to psql for restoration.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngunzip -c backup.sql.gz | psql -h hostname -p port -U username -W -d database\n```\n\n----------------------------------------\n\nTITLE: Creating a full PostgreSQL database backup with pg_dump\nDESCRIPTION: Command for creating a complete database backup using pg_dump. This creates a SQL script file that can be used to recreate the database in its entirety.\nSOURCE: https://github.com/posthog/posthog.git/blob/master/staticfiles/empty.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -h hostname -p port -U username -W -d database -f backup.sql\n```"
  }
]