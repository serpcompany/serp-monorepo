[
  {
    "owner": "tfranzel",
    "repo": "drf-spectacular",
    "content": "TITLE: Extending Schema for PersonView in Python\nDESCRIPTION: Demonstrates how to use the @extend_schema decorator to customize the schema for a view's retrieve method. It shows how to add custom parameters, specify request and response serializers, and override path variables.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PersonView(viewsets.GenericViewSet):\n    @extend_schema(\n        parameters=[\n          QuerySerializer,  # serializer fields are converted to parameters\n          OpenApiParameter(\"nested\", QuerySerializer),  # serializer object is converted to a parameter\n          OpenApiParameter(\"queryparam1\", OpenApiTypes.UUID, OpenApiParameter.QUERY),\n          OpenApiParameter(\"pk\", OpenApiTypes.UUID, OpenApiParameter.PATH), # path variable was overridden\n        ],\n        request=YourRequestSerializer,\n        responses=YourResponseSerializer,\n        # more customizations\n    )\n    def retrieve(self, request, pk, *args, **kwargs)\n        # your code\n```\n\n----------------------------------------\n\nTITLE: Using @extend_schema Decorator with ViewSet Methods in Python\nDESCRIPTION: Example showing how to customize API documentation for ViewSet methods using the @extend_schema decorator. It demonstrates overriding serializers, responses, and method-specific descriptions for both standard methods and custom actions.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nexamples=[\n    OpenApiExample(\n        'Example 1',\n        description='longer description',\n        value=...\n    ),\n    ...\n],\n)\ndef list(self, request):\n    # your non-standard behaviour\n    return super().list(request)\n\n@extend_schema(\n    request=AlbumLikeSerializer,\n    responses={204: None},\n    methods=[\"POST\"]\n)\n@extend_schema(description='Override a specific method', methods=[\"GET\"])\n@action(detail=True, methods=['post', 'get'])\ndef set_password(self, request, pk=None):\n    # your action behaviour\n    ...\n```\n\n----------------------------------------\n\nTITLE: Extending Schema for Custom Field in Python\nDESCRIPTION: Demonstrates how to use @extend_schema_field decorator to properly inform drf-spectacular about the expected output of a custom SerializerField.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_field(OpenApiTypes.BYTE)  # also takes basic python types\nclass CustomField(serializers.Field):\n    def to_representation(self, value):\n        return urlsafe_base64_encode(b'\\xf0\\xf1\\xf2')\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Documentation URLs\nDESCRIPTION: URL configuration for serving the API schema and documentation UIs.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView\nurlpatterns = [\n    # YOUR PATTERNS\n    path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n    # Optional UI:\n    path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n    path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),\n]\n```\n\n----------------------------------------\n\nTITLE: Using PolymorphicProxySerializer for views with dynamic serializers\nDESCRIPTION: Example showing how to handle views that use different serializers depending on the situation by using the @extend_schema decorator with PolymorphicProxySerializer, which allows representing multiple possible response schemas.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PersonView(viewsets.GenericViewSet):\n    @extend_schema(responses={\n        200: PolymorphicProxySerializer(\n                component_name='Person',\n                # on 200 either a legal or a natural person is returned\n                serializers=[LegalPersonSerializer, NaturalPersonSerializer],\n                resource_type_field_name='type',\n        ),\n        500: YourOptionalErrorSerializer,\n    })\n    def retrieve(self, request, *args, **kwargs)\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using @extend_schema instead of @swagger_auto_schema in Python\nDESCRIPTION: Example showing how to replace the drf-yasg @swagger_auto_schema decorator with the drf-spectacular @extend_schema decorator. The migration involves changing argument names like 'operation_description' to 'description' and 'request_body' to 'request'.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema(\n    description=\"...\",  # was operation_description\n    summary=\"...\",  # was operation_summary\n    parameters=[...],  # combines manual_parameters and query_serializer\n    auth=[...],  # was security\n    request=MySerializer,  # was request_body\n    methods=['GET', 'POST'],  # use methods instead of method\n    # Use None instead of no_body\n    # Additional arguments: exclude, operation, versions, examples\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Schema for SerializerMethodField in Python\nDESCRIPTION: Shows how to apply @extend_schema_field to a method of a SerializerMethodField to specify its return type in the generated schema.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ErrorDetailSerializer(serializers.Serializer):\n    field_custom = serializers.SerializerMethodField()\n\n    @extend_schema_field(OpenApiTypes.DATETIME)\n    def get_field_custom(self, object):\n        return '2020-03-06 20:54:00.104248'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple SpectacularAPIView Instances with Different Settings\nDESCRIPTION: Example of how to create multiple SpectacularAPIView instances with different configurations using the custom_settings parameter. This allows for having multiple schema endpoints with different settings.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path('api/schema/', SpectacularAPIView.as_view(),\n    path('api/schema-custom/', SpectacularAPIView.as_view(\n        custom_settings={\n            'TITLE': 'your custom title',\n            'SCHEMA_PATH_PREFIX': 'your custom regex',\n            ...\n        }\n    ), name='schema-custom'),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Envelope Helper for Wrapped API Responses\nDESCRIPTION: Helper function that wraps serializers in a generic envelope structure for APIs that require consistent response formatting. The function creates a dynamic EnvelopeSerializer with the original serializer in the data field.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef enveloper(serializer_class, many):\n    component_name = 'Enveloped{}{}'.format(\n        serializer_class.__name__.replace(\"Serializer\", \"\"),\n        \"List\" if many else \"\",\n    )\n\n    @extend_schema_serializer(many=False, component_name=component_name)\n    class EnvelopeSerializer(serializers.Serializer):\n        status = serializers.BooleanField()  # some arbitrary envelope field\n        data = serializer_class(many=many)  # the enveloping part\n\n    return EnvelopeSerializer\n\n\nclass XViewset(GenericViewSet):\n    @extend_schema(responses=enveloper(XSerializer, True))\n    def list(self, request, *args, **kwargs):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Extending Schema for AlbumSerializer in Python\nDESCRIPTION: Demonstrates the use of @extend_schema_serializer to customize the schema generation for a serializer. It shows how to exclude fields and add examples for requests and responses.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_serializer(\n    exclude_fields=('single',), # schema ignore these fields\n    examples = [\n         OpenApiExample(\n            'Valid example 1',\n            summary='short summary',\n            description='longer description',\n            value={\n                'songs': {'top10': True},\n                'single': {'top10': True}\n            },\n            request_only=True, # signal that example only applies to requests\n            response_only=True, # signal that example only applies to responses\n        ),\n    ]\n)\nclass AlbumSerializer(serializers.ModelSerializer):\n    songs = SongSerializer(many=True)\n    single = SongSerializer(read_only=True)\n\n    class Meta:\n        fields = '__all__'\n        model = Album\n```\n\n----------------------------------------\n\nTITLE: Configuring ViewSet Actions with Paginated List Responses\nDESCRIPTION: Example of how to properly configure a ViewSet action that returns a list response but needs pagination disabled. This demonstrates how to use @extend_schema to specify the response format while setting pagination_class=None.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass XViewset(viewsets.ModelViewSet):\n    queryset = SimpleModel.objects.all()\n    pagination_class = pagination.LimitOffsetPagination\n\n    @extend_schema(responses=SimpleSerializer(many=True))\n    @action(methods=['GET'], detail=False, pagination_class=None)\n    def custom_action(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Serving Binary Files and In-Memory Generated Content\nDESCRIPTION: Example of how to serve binary files or in-memory generated content with proper content type and download headers. Uses a custom renderer and @extend_schema to document the binary response.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom rest_framework.renderers import BaseRenderer\n\n\nclass BinaryRenderer(BaseRenderer):\n    media_type = \"application/octet-stream\"\n    format = \"bin\"\n\n\nclass FileViewSet(RetrieveModelMixin, GenericViewSet):\n    ...\n    renderer_classes = [BinaryRenderer]\n\n    @extend_schema(responses=bytes)\n    def retrieve(self, request, *args, **kwargs):\n        export_data = b\"...\"\n        return HttpResponse(\n            export_data,\n            content_type=BinaryRenderer.media_type,\n            headers={\n                \"Content-Disposition\": \"attachment; filename=out.bin\",\n            },\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Serializer Field with Lazy Loading in DRF\nDESCRIPTION: This snippet shows how to define a recursive serializer field in DRF using the lazy_serializer helper from drf-spectacular. It allows for cyclic definitions by lazily loading the serializer class.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom drf_spectacular.helpers import lazy_serializer\n\nclass BoxSerializer(ModelSerializer):\n    nested_boxes = SerializerMethodField()\n\n    @extend_schema_field(lazy_serializer(\"app.serializers.BoxSerializer\")(many=True))\n    def get_nested_boxes(self, instance: Box):\n        nested_boxes = instance.nested_boxes.all()\n        return BoxSerializer(nested_boxes, many=True).data\n```\n\n----------------------------------------\n\nTITLE: Creating OpenApiViewExtension for Library Views in Python\nDESCRIPTION: Demonstrates how to create an OpenApiViewExtension to augment or replace views from third-party libraries for improved schema generation.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Fix4(OpenApiViewExtension):\n    target_class = 'oscarapi.views.checkout.UserAddressDetail'\n\n    def view_replacement(self):\n        from oscar.apps.address.models import UserAddress\n\n        class Fixed(self.target_class):\n            queryset = UserAddress.objects.none()\n        return Fixed\n```\n\n----------------------------------------\n\nTITLE: Forcing Singular Serializer Response in DRF ViewSet List Method\nDESCRIPTION: This snippet demonstrates how to force a singular serializer response for a list view in a DRF ViewSet. It uses the forced_singular_serializer helper from drf-spectacular to create a copy of the serializer and mark it as non-list.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom drf_spectacular.helpers import forced_singular_serializer\n\nclass YourViewSet(viewsets.ModelViewSet):\n    serializer_class = SimpleSerializer\n    queryset = SimpleModel.objects.none()\n\n    @extend_schema(responses=forced_singular_serializer(SimpleSerializer))\n    def list(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using @extend_schema_field instead of @swagger_serializer_method in Python\nDESCRIPTION: Example showing how to replace the drf-yasg @swagger_serializer_method decorator with the drf-spectacular @extend_schema_field decorator. The component_name parameter allows breaking the field out as a separate component.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_field(OpenApiTypes.STR, component_name=\"CustomField\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializer Field Extension for DRF Spectacular\nDESCRIPTION: Demonstrates how to extend OpenApiSerializerFieldExtension to customize schema generation for custom serializer fields. This example shows a CategoryFieldFix that maps a custom CategoryField to a simple string in the schema.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CategoryFieldFix(OpenApiSerializerFieldExtension):\n    target_class = 'oscarapi.serializers.fields.CategoryField'\n\n    def map_serializer_field(self, auto_schema, direction):\n        # equivalent to return {'type': 'string'}\n        return build_basic_type(OpenApiTypes.STR)\n```\n\n----------------------------------------\n\nTITLE: Configuring DRF Spectacular in Django Settings\nDESCRIPTION: Adding DRF Spectacular to Django INSTALLED_APPS setting to enable the package.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ALL YOUR APPS\n    'drf_spectacular',\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema with extend_schema Decorator\nDESCRIPTION: Example of using the extend_schema decorator to customize API documentation for a viewset.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom drf_spectacular.utils import extend_schema, OpenApiParameter, OpenApiExample\nfrom drf_spectacular.types import OpenApiTypes\n\nclass AlbumViewset(viewset.ModelViewset):\n    serializer_class = AlbumSerializer\n\n    @extend_schema(\n        request=AlbumCreationSerializer,\n        responses={201: AlbumSerializer},\n    )\n    def create(self, request):\n        # your non-standard behaviour\n        return super().create(request)\n\n    @extend_schema(\n        # extra parameters added to the schema\n        parameters=[\n            OpenApiParameter(name='artist', description='Filter by artist', required=False, type=str),\n            OpenApiParameter(\n                name='release',\n                type=OpenApiTypes.DATE,\n                location=OpenApiParameter.QUERY,\n                description='Filter by release date',\n                examples=[\n                    OpenApiExample(\n                        'Example 1',\n                        summary='short optional summary',\n                        description='longer description',\n                        value='1993-08-23'\n                    ),\n                ],\n            ),\n        ],\n        # override default docstring extraction\n        description='More descriptive text',\n        # provide Authentication class that deviates from the views default\n        auth=None,\n        # change the auto-generated operation name\n        operation_id=None,\n        # or even completely override what AutoSchema would generate. Provide raw Open API spec as Dict.\n        operation=None,\n        # attach request/response examples to the operation.\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Component Configuration for Client Generation\nDESCRIPTION: Configuration settings to resolve component-related issues in client generation. Includes options for splitting components into request/response parts, handling read-only required fields, and separate PATCH endpoint components.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/client_generation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Split components into request and response parts where appropriate\n'COMPONENT_SPLIT_REQUEST': False,\n# Aid client generator targets that have trouble with read-only properties.\n'COMPONENT_NO_READ_ONLY_REQUIRED': False,\n# Create separate components for PATCH endpoints (without required list)\n'COMPONENT_SPLIT_PATCH': True,\n```\n\n----------------------------------------\n\nTITLE: Extending Schema View for XViewset in Python\nDESCRIPTION: Shows how to use @extend_schema_view to annotate methods provided by base classes of a view. This is useful when you can't directly attach @extend_schema to inherited methods.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_view(\n    list=extend_schema(description='text')\n)\nclass XViewset(mixins.ListModelMixin, viewsets.GenericViewSet):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Updating ViewSet Docstrings for drf-spectacular in Python\nDESCRIPTION: This snippet demonstrates how to migrate from drf-yasg's docstring parsing to drf-spectacular's @extend_schema decorator for defining API operation summaries and descriptions.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Supported by drf-yasg:\nclass UserViewSet(ViewSet):\n    def list(self, request):\n        \"\"\"\n        List all the users.\n\n        Return a list of all usernames in the system.\n        \"\"\"\n        ...\n\n# Updated for drf-spectacular using decorator for description:\nclass UserViewSet(ViewSet):\n    @extend_schema(\n        summary=\"List all the users.\",\n        description=\"Return a list of all usernames in the system.\",\n    )\n    def list(self, request):\n        ...\n\n# Updated for drf-spectacular using docstring for description:\nclass UserViewSet(ViewSet):\n    @extend_schema(summary=\"List all the users.\")\n    def list(self, request):\n        \"\"\"Return a list of all usernames in the system.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Handling get_queryset() During Schema Generation\nDESCRIPTION: Solution for views where get_queryset() depends on request attributes not available during schema generation. Provides a fallback using the swagger_fake_view attribute to return an empty queryset when generating the schema.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass XViewset(viewsets.ModelViewset):\n    ...\n\n    def get_queryset(self):\n        if getattr(self, 'swagger_fake_view', False):  # drf-yasg comp\n            return YourModel.objects.none()\n        # your usual logic\n```\n\n----------------------------------------\n\nTITLE: Annotating Function-Based Views with Multiple HTTP Methods\nDESCRIPTION: Example showing how to use @extend_schema_view with @api_view for a function-based view that handles multiple HTTP methods, providing different documentation for each method.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_view(\n    get=extend_schema(description='get desc', responses=XSerializer),\n    post=extend_schema(description='post desc', request=None, responses=OpenApiTypes.UUID),\n)\n@api_view(['GET', 'POST'])\ndef view_func(request, format=None):\n    return ...\n```\n\n----------------------------------------\n\nTITLE: Migrating Named Sections to extend_schema_view in Python\nDESCRIPTION: This snippet shows how to migrate from drf-yasg's named sections in docstrings to drf-spectacular's @extend_schema_view decorator for defining multiple API operations.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Supported by drf-yasg:\nclass UserViewSet(ViewSet):\n    \"\"\"\n    list:\n        List all the users.\n\n        Return a list of all usernames in the system.\n\n    retrieve:\n        Retrieve user\n\n        Get details of a specific user\n    \"\"\"\n    ...\n\n# Updated for drf-spectacular using decorator for description:\n@extend_schema_view(\n    list=extend_schema(\n        summary=\"List all the users.\",\n        description=\"Return a list of all usernames in the system.\",\n    ),\n    retrieve=extend_schema(\n        summary=\"Retrieve user\",\n        description=\"Get details of a specific user\",\n    ),\n)\nclass UserViewSet(ViewSet):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using OpenApiResponses in Python\nDESCRIPTION: Demonstrates how to use the new OpenApiResponses class to access response object descriptions in DRF Spectacular.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom drf_spectacular.utils import OpenApiResponses\n\n@extend_schema(\n    responses=OpenApiResponses({\n        200: OpenApiResponse(description=\"Successful response\"),\n        404: OpenApiResponse(description=\"Not found\")\n    })\n)\ndef my_view(request):\n    # View logic here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Scheme in DRF Spectacular\nDESCRIPTION: Creates a custom authentication extension by subclassing OpenApiAuthenticationExtension. This example defines a MyAuthenticationScheme that specifies how an authentication class should be represented in the OpenAPI schema.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyAuthenticationScheme(OpenApiAuthenticationExtension):\n    target_class = 'my_app.MyAuthentication'  # full import path OR class ref\n    name = 'MyAuthentication'  # name used in the schema\n\n    def get_security_definition(self, auto_schema):\n        return {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'api_key',\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring App for Schema Extensions in Python\nDESCRIPTION: Shows how to set up an app's configuration to automatically load schema extensions. This ensures that custom extensions are properly registered with drf-spectacular.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# your_main_app_name/apps.py\nclass YourMainAppNameConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"your_main_app_name\"\n\n    def ready(self):\n        import your_main_app_name.schema  # noqa: E402\n```\n\n----------------------------------------\n\nTITLE: Using OpenApiParameter instead of Parameter in Python\nDESCRIPTION: Example showing how to replace drf-yasg's Parameter class with drf-spectacular's OpenApiParameter. Key differences include using 'location' instead of 'in_', and 'type' instead of 'schema'.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# drf-yasg approach\nParameter(name='id', in_=IN_PATH, type=TYPE_INTEGER)\n\n# drf-spectacular equivalent\nOpenApiParameter(name='id', location=OpenApiParameter.PATH, type=int)\n\n# Array parameter in drf-spectacular\nOpenApiParameter(name='ids', location=OpenApiParameter.QUERY, type=int, many=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Extensions in Django App Configuration\nDESCRIPTION: Best practice for loading drf-spectacular extensions by importing them in the app's ready() method. This approach ensures the environment is properly set up and helps avoid circular import issues.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# your_main_app_name/apps.py\nclass YourMainAppNameConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"your_main_app_name\"\n\n    def ready(self):\n        import your_main_app_name.schema  # noqa: E402\n```\n\n----------------------------------------\n\nTITLE: Using OpenApiResponse instead of Response in Python\nDESCRIPTION: Example showing how to replace drf-yasg's Response class with drf-spectacular's OpenApiResponse. The 'schema' argument is renamed to 'response' and the argument order differs.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# drf-yasg approach\nResponse(description='Success', schema=Schema(...))\n\n# drf-spectacular equivalent\nOpenApiResponse(description='Success', response=MySerializer)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI OAuth in Python\nDESCRIPTION: Example of configuring OAuth settings for Swagger UI in DRF Spectacular. This allows customizing the OAuth flow in the Swagger UI interface.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    'SWAGGER_UI_SETTINGS': {\n        'oauth2RedirectUrl': 'http://localhost:8000/static/drf-spectacular/oauth2-redirect.html',\n        'usePkceWithAuthorizationCodeGrant': True,\n    },\n    'SWAGGER_UI_OAUTH2_CONFIG': {\n        'clientId': 'your-client-id',\n        'clientSecret': 'your-client-secret',\n        'realm': 'your-realms',\n        'appName': 'your-app-name',\n        'scopeSeparator': ' ',\n        'scopes': 'openid profile email phone address',\n        'additionalQueryStringParams': {},\n        'useBasicAuthenticationWithAccessCodeGrant': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Function-Based Views with @api_view for Single Method\nDESCRIPTION: Example showing how to use @extend_schema decorator with DRF's @api_view for a single-method function-based view to properly document request and response schemas.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema(request=XSerializer, responses=XSerializer)\n@api_view(['POST'])\ndef view_func(request, format=None):\n    return ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidecar UI Settings\nDESCRIPTION: Configuration for using offline UI components with the sidecar package.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ALL YOUR APPS\n    'drf_spectacular',\n    'drf_spectacular_sidecar',  # required for Django collectstatic discovery\n]\nSPECTACULAR_SETTINGS = {\n    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead\n    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',\n    'REDOC_DIST': 'SIDECAR',\n    # OTHER SETTINGS\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SwaggerUI Settings in Python for drf-spectacular\nDESCRIPTION: This snippet demonstrates how to configure SwaggerUI settings for drf-spectacular in the SPECTACULAR_SETTINGS dictionary. It includes options for customizing SwaggerUI behavior, specifying the SwaggerUI distribution version, and setting a custom favicon.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/settings.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    ...\n    # available SwaggerUI configuration parameters\n    # https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/\n    \"SWAGGER_UI_SETTINGS\": {\n        \"deepLinking\": True,\n        \"persistAuthorization\": True,\n        \"displayOperationId\": True,\n        ...\n    },\n    # available SwaggerUI versions: https://github.com/swagger-api/swagger-ui/releases\n    \"SWAGGER_UI_DIST\": \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@latest\", # default\n    \"SWAGGER_UI_FAVICON_HREF\": settings.STATIC_URL + \"your_company_favicon.png\", # default is swagger favicon\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Schema Path Prefix in Python\nDESCRIPTION: Sets the SCHEMA_PATH_PREFIX setting to None to enable auto-detection of a reasonable prefix. The previous default behavior can be restored by setting it to an empty string.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nSCHEMA_PATH_PREFIX = None  # New default, will auto-detect prefix\n# SCHEMA_PATH_PREFIX = ''  # Previous behavior\n```\n\n----------------------------------------\n\nTITLE: Using Python types instead of schema constants in OpenAPI specs\nDESCRIPTION: Example demonstrating how to replace drf-yasg's TYPE_* and FORMAT_* constants with drf-spectacular's OpenApiTypes enum or native Python types for OpenAPI schema definitions.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# drf-yasg approach\nParameter(name='id', in_=IN_PATH, type=TYPE_INTEGER)\nParameter(name='email', in_=IN_QUERY, type=TYPE_STRING, format=FORMAT_EMAIL)\n\n# drf-spectacular equivalent with OpenApiTypes\nOpenApiParameter(name='id', location=OpenApiParameter.PATH, type=OpenApiTypes.INT)\nOpenApiParameter(name='email', location=OpenApiParameter.QUERY, type=OpenApiTypes.EMAIL)\n\n# drf-spectacular equivalent with Python types\nOpenApiParameter(name='id', location=OpenApiParameter.PATH, type=int)\n# Some types still need OpenApiTypes\nOpenApiParameter(name='email', location=OpenApiParameter.QUERY, type=OpenApiTypes.EMAIL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Properties Handling for Client Generation\nDESCRIPTION: Setting to control how free-form additionalProperties are represented in the schema. Different formats can affect code generator compatibility with options for dictionary, boolean, or disabled representations.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/client_generation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Determines if and how free-form 'additionalProperties' should be emitted in the schema. Some\n# code generator targets are sensitive to this. None disables generic 'additionalProperties'.\n# allowed values are 'dict', 'bool', None\n'GENERIC_ADDITIONAL_PROPERTIES': 'dict',\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Postprocessing Hook in DRF Spectacular\nDESCRIPTION: Shows how to create a postprocessing hook that runs at the end of schema generation. This hook can modify the final schema before it's returned, allowing for customizations that aren't possible with other extension mechanisms.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef custom_postprocessing_hook(result, generator, request, public):\n    # your modifications to the schema in parameter result\n    return result\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Callbacks in Python\nDESCRIPTION: Shows how to set up OpenAPI callback operations in DRF Spectacular.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema(\n    callbacks=[\n        OpenApiCallback(\n            name='my_callback',\n            path='/callback/',\n            method='POST',\n            request=MySerializer,\n            responses={200: None}\n        )\n    ]\n)\ndef my_view(request):\n    # View logic\n```\n\n----------------------------------------\n\nTITLE: Using @extend_schema_view decorator in Python\nDESCRIPTION: Example showing how to use the drf-spectacular @extend_schema_view decorator instead of Django's @method_decorator with swagger_auto_schema. This provides a cleaner way to apply schema customizations to view methods.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_yasg.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_view(\n    list=extend_schema(description=\"List view\", responses=ListSerializer),\n    retrieve=extend_schema(description=\"Retrieve view\", responses=DetailSerializer)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Lists in extend_schema_view in Python\nDESCRIPTION: Demonstrates how to use lists when decorating views with extend_schema_view.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema_view(\n    list=[OpenApiParameter('param1', int), OpenApiParameter('param2', str)],\n    create=...,\n    retrieve=...\n)\nclass MyViewSet(viewsets.ModelViewSet):\n    # ViewSet implementation\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum name overrides for drf-spectacular\nDESCRIPTION: Code example showing how to configure ENUM_NAME_OVERRIDES setting to resolve enum-related warnings by providing explicit names for enum values, supporting various input formats like tuples, lists, callables, and import strings.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    ...\n    'ENUM_NAME_OVERRIDES': {\n        # variable containing list of tuples, e.g. [('US', 'US'), ('RU', 'RU'),]\n        'LanguageEnum': language_choices,\n        # dedicated Enum or models.Choices class\n        'CountryEnum': 'import_path.enums.CountryEnum',\n        # choices is an attribute of class CurrencyContainer containing a list of tuples\n        'CurrencyEnum': 'import_path.CurrencyContainer.choices',\n        # callable with choices\n        'NameEnum': 'import_path.enums.NameEnum.as_choices',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Handling for Client Generation\nDESCRIPTION: Setting to control how blank and null enum choices are represented in the schema. Disabling explicit blank/null choices can help with some generator targets that have issues with these values.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/client_generation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Adds \"blank\" and \"null\" enum choices where appropriate. disable on client generation issues\n'ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE': True,\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Preprocessing Hook in DRF Spectacular\nDESCRIPTION: Demonstrates how to create a preprocessing hook that runs before schema generation starts. This hook can modify the list of API operations to include or exclude in the schema, adjust paths, or modify other aspects of the detected endpoints.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/customization.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef custom_preprocessing_hook(endpoints):\n    # your modifications to the list of operations that are exposed in the schema\n    for (path, path_regex, method, callback) in endpoints:\n        pass\n    return endpoints\n```\n\n----------------------------------------\n\nTITLE: Using OpenApiParameter with Pattern in Python\nDESCRIPTION: Adds support for specifying a pattern when using OpenApiParameter.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nOpenApiParameter(\n    name='param',\n    type=str,\n    pattern=r'^[a-z]+$'\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing internationalization for drf-spectacular schema\nDESCRIPTION: Example demonstrating how to internationalize (i18n) schema documentation using Django's gettext_lazy to mark strings for translation, which works with both view docstrings and extend_schema parameters.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nclass PersonView(viewsets.GenericViewSet):\n    __doc__ = _(\"\"\"}\n    More lengthy explanation of the view\n    \"\"\")\n\n    @extend_schema(summary=_('Main endpoint for creating person'))\n    def retrieve(self, request, *args, **kwargs):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring DRF API Key Authentication Schema\nDESCRIPTION: Configuration for djangorestframework-api-key security scheme in DRF-Spectacular settings. Adds API key authentication to the OpenAPI schema.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/blueprints.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    \"APPEND_COMPONENTS\": {\n        \"securitySchemes\": {\n            \"ApiKeyAuth\": {\n                \"type\": \"apiKey\",\n                \"in\": \"header\",\n                \"name\": \"Authorization\"\n            }\n        }\n    },\n    \"SECURITY\": [{\"ApiKeyAuth\": [], }],\n     ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP for Swagger UI with drf-spectacular\nDESCRIPTION: Code example showing how to properly configure Content Security Policy (CSP) settings when using Swagger UI with drf-spectacular, offering two approaches: using the sidecar feature or allowing CDN assets.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Option: SIDECAR\nSPECTACULAR_SETTINGS = {\n     ...\n    'SWAGGER_UI_DIST': 'SIDECAR',\n    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',\n}\nCSP_DEFAULT_SRC = (\"'self'\", \"'unsafe-inline'\")\nCSP_IMG_SRC = (\"'self'\", \"data:\")\n\n# Option: CDN\nCSP_DEFAULT_SRC = (\"'self'\", \"'unsafe-inline'\", \"cdn.jsdelivr.net\")\nCSP_IMG_SRC = (\"'self'\", \"data:\", \"cdn.jsdelivr.net\")\n```\n\n----------------------------------------\n\nTITLE: Basic DRF Spectacular Settings Configuration\nDESCRIPTION: Configuring basic metadata settings for the API documentation.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    'TITLE': 'Your Project API',\n    'DESCRIPTION': 'Your project description',\n    'VERSION': '1.0.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    # OTHER SETTINGS\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DRF Spectacular Schema Class\nDESCRIPTION: Configuring DRF to use Spectacular's AutoSchema as the default schema generator.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    # YOUR SETTINGS\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Specifies required Python packages and their minimum version constraints for DRF-Spectacular. Includes dependencies for JWT authentication, REST framework extensions, database adapters, and various Django packages.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/optionals.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndrf-jwt>=0.13.0\ndj-rest-auth>=1.0.0\ndjangorestframework-simplejwt>=4.4.0\nsetuptools\ndjango-polymorphic>=2.1\ndjango-rest-polymorphic>=0.1.8\ndjango-oauth-toolkit>=1.2.0\ndjangorestframework-camel-case>=1.1.2\ndjango-filter>=2.3.0\npsycopg2-binary>=2.7.3.2\ndrf-nested-routers>=0.93.3\ndjangorestframework-recursive>=0.1.2\ndrf-spectacular-sidecar\ndjangorestframework-dataclasses>=1.0.0; python_version >= '3.7'\ndjangorestframework-gis>=1.0.0\npydantic>=2,<3; python_version >= '3.7'\ndjango-rest-knox>=4.1\ndjango-allauth[socialaccount]\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI in JavaScript\nDESCRIPTION: Example of adding custom JavaScript to the Swagger UI configuration in DRF Spectacular. This allows injecting custom behavior into the Swagger UI interface.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    'SWAGGER_UI_SETTINGS': {\n        'deepLinking': True,\n        'persistAuthorization': True,\n        'displayOperationId': True,\n    },\n    'SWAGGER_UI_DIST': 'SIDECAR',\n    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',\n    'SWAGGER_UI_JS_URL': 'SIDECAR',\n    \"SWAGGER_UI_LAYOUT\": \"BaseLayout\",\n    'SWAGGER_UI_EXTRA_JS': [\n        'https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.9.1/underscore-min.js',\n        'path/to/my/extra.js'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redoc Settings in Python\nDESCRIPTION: Adds support for custom Redoc settings in DRF Spectacular.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSPECTACULAR_SETTINGS = {\n    'REDOC_SETTINGS': {\n        # Custom Redoc settings here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Docs to Operations with extend_schema in Python\nDESCRIPTION: Demonstrates how to add external documentation links to API operations using extend_schema.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema(\n    external_docs={\n        'description': 'More info',\n        'url': 'https://example.com'\n    }\n)\ndef my_view(request):\n    # View logic\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP for Redoc with drf-spectacular\nDESCRIPTION: Code example showing how to properly configure Content Security Policy (CSP) settings when using Redoc with drf-spectacular, supporting both sidecar and CDN approaches with the required CSP directives.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Option: SIDECAR\nSPECTACULAR_SETTINGS = {\n     ...\n    'REDOC_DIST': 'SIDECAR',\n}\n# Option: CDN\nCSP_DEFAULT_SRC = (\"'self'\", \"cdn.jsdelivr.net\")\n\n# required for both CDN and SIDECAR\nCSP_WORKER_SRC = (\"'self'\", \"blob:\")\nCSP_IMG_SRC = (\"'self'\", \"data:\", \"cdn.redoc.ly\")\nCSP_STYLE_SRC = (\"'self'\", \"'unsafe-inline'\", \"fonts.googleapis.com\")\nCSP_FONT_SRC = (\"'self'\", \"fonts.gstatic.com\")\n```\n\n----------------------------------------\n\nTITLE: Setting up drf-spectacular Development Environment\nDESCRIPTION: Step-by-step console commands to set up a local development environment for contributing to drf-spectacular. Includes cloning the repository, creating a virtual environment, installing dependencies, and running tests.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ # fork the repo on github\n$ git clone https://github.com/YOURGITHUBNAME/drf-spectacular\n$ cd drf-spectacular\n$ python -m venv venv\n$ source venv/bin/activate\n(venv) $ pip install -r requirements.txt\n(venv) $ ./runtests.py  # runs tests (pytest) & linting (isort, flake8, mypy)\n```\n\n----------------------------------------\n\nTITLE: Extending OpenApiSerializerExtension Interface in Python\nDESCRIPTION: Extends the OpenApiSerializerExtension interface to provide more customization options.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CustomOpenApiSerializerExtension(OpenApiSerializerExtension):\n    # Extended interface methods\n```\n\n----------------------------------------\n\nTITLE: Configuring Main App for Schema Extensions\nDESCRIPTION: Shows how to set up the main Django app configuration to load schema extensions. This is done by importing the schema file in the app's ready() method.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/blueprints.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# your_main_app_name/apps.py\nclass YourMainAppNameConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"your_main_app_name\"\n\n    def ready(self):\n        import your_main_app_name.schema  # noqa: E402\n```\n\n----------------------------------------\n\nTITLE: Generating Schema from Command Line\nDESCRIPTION: Command to generate OpenAPI schema using the Django management command.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./manage.py spectacular --color --file schema.yml\n$ docker run -p 80:8080 -e SWAGGER_JSON=/schema.yml -v ${PWD}/schema.yml:/schema.yml swaggerapi/swagger-ui\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Schema Decorator Parameter Renaming\nDESCRIPTION: Documentation of breaking changes in the schema extension API where parameter names were updated for clarity and consistency.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/CHANGELOG.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@extend_schema renamed extra_parameters -> parameters\nExtraParameter renamed to OpenApiParameter\n```\n\n----------------------------------------\n\nTITLE: Installing DRF Spectacular with Sidecar UI\nDESCRIPTION: Command to install DRF Spectacular with the optional sidecar package for offline UI components.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install drf-spectacular[sidecar]\n```\n\n----------------------------------------\n\nTITLE: Using CLI to generate schema with specific API version\nDESCRIPTION: Command-line example for generating a schema with a specific API version, which is useful when working with versioned APIs to include endpoints for both unversioned and a specific version.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py spectacular --api-version 'YOUR_VERSION'\n```\n\n----------------------------------------\n\nTITLE: Listing Package Dependencies for drf-spectacular\nDESCRIPTION: Specifies the required packages and their minimum versions needed to run drf-spectacular. This includes Django 2.2+, Django REST Framework 3.10.3+, and utility packages for URL templating, YAML processing, JSON schema validation, and string manipulation.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango>=2.2\ndjangorestframework>=3.10.3\nuritemplate>=2.0.0\nPyYAML>=5.1\njsonschema>=2.6.0\ninflection>=0.3.1\ntyping-extensions; python_version < \"3.10\"\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.types.OpenApiTypes Class\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the OpenApiTypes class in the drf_spectacular.types module, including all members, undocumented members, and ordering members by source.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: drf_spectacular.types.OpenApiTypes\n    :members:\n    :undoc-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.hooks Module\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the drf_spectacular.hooks module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: drf_spectacular.hooks\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.openapi Module\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the drf_spectacular.openapi module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: drf_spectacular.openapi\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.extensions Module\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the drf_spectacular.extensions module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: drf_spectacular.extensions\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.utils Module\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the drf_spectacular.utils module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: drf_spectacular.utils\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.views Module\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the drf_spectacular.views module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: drf_spectacular.views\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing DRF Spectacular with pip\nDESCRIPTION: Command to install the DRF Spectacular package using pip package manager.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install drf-spectacular\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox for Multiple Python and Django Versions\nDESCRIPTION: Command to run tests across multiple Python and Django versions using tox. This ensures compatibility across different environments by executing the test suite against all supported configurations.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Defining pytest Testing Dependencies for DRF Spectacular\nDESCRIPTION: Lists the required testing dependencies with minimum version constraints. Includes pytest as the test runner, pytest-django for Django test integration, and pytest-cov for test coverage reporting.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/testing.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=5.3.5\npytest-django>=3.8.0\npytest-cov>=2.8.1\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Requirements Files\nDESCRIPTION: Main requirements file that combines multiple specialized requirements files using -r directive. Includes base dependencies, testing utilities, linting tools, optional features, packaging requirements and documentation dependencies.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r requirements/base.txt\n-r requirements/testing.txt\n-r requirements/linting.txt\n-r requirements/optionals.txt\n-r requirements/packaging.txt\n-r requirements/docs.txt\n```\n\n----------------------------------------\n\nTITLE: Documenting drf_spectacular.contrib.django_filters Module\nDESCRIPTION: Sphinx autodoc directive to generate documentation for the drf_spectacular.contrib.django_filters module, including all members and inheritance information.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/drf_spectacular.rst#2025-04-21_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: drf_spectacular.contrib.django_filters\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Specifying Django and DRF Package Dependencies\nDESCRIPTION: This requirements file specifies the exact versions of Django and Django REST Framework to be installed for the project. It pins Django to version 4.2.20 and Django REST Framework to version 3.14.0 to ensure compatibility and stability.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/linting-base.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nDjango==4.2.20\ndjangorestframework==3.14.0\n```\n\n----------------------------------------\n\nTITLE: Listing Python Development Dependencies for DRF-Spectacular\nDESCRIPTION: A requirements file that specifies the development dependencies needed for the DRF-Spectacular project. It includes testing tools (pytest), code quality tools (flake8, isort), type checking (mypy), and type stub packages for Django and Django REST Framework with specific version constraints.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/linting.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npytest  # required for mypy to succeed\nflake8\nisort==5.12.0  # 5.13 somehow breaks django-stubs plugin\nmypy==1.7.1\ndjango-stubs==4.2.3\ndjangorestframework-stubs==3.14.2\n```\n\n----------------------------------------\n\nTITLE: Including README in reStructuredText Documentation\nDESCRIPTION: This snippet demonstrates how to include an external README file in a reStructuredText document. It's commonly used in Sphinx documentation to incorporate the project's main README into the generated documentation.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/readme.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _readme:\n\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Building drf-spectacular\nDESCRIPTION: Lists the required Python package dependencies for building and distributing the drf-spectacular package. Includes twine for package publishing, wheel for built package distribution, and setuptools for package building. All packages have minimum version requirements.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/packaging.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntwine>=3.1.1\nwheel>=0.34.2\nsetuptools\n```\n\n----------------------------------------\n\nTITLE: Including External RST Content\nDESCRIPTION: ReStructuredText directive for including the content of CONTRIBUTING.rst from the parent directory.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for drf-spectacular\nDESCRIPTION: This snippet lists the required Python packages for the drf-spectacular project. It includes Sphinx version 4.1.0 or higher for documentation, furo for theme styling, and typing-extensions for enhanced type hinting capabilities.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSphinx>=4.1.0\nfuro\ntyping-extensions\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Requirements for DRF Spectacular with pip\nDESCRIPTION: Command to install the required dependencies for testing DRF Spectacular using pip. This installs all the packages listed in the requirements.txt file.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Tests for DRF Spectacular with runtests.py\nDESCRIPTION: Command to execute tests for DRF Spectacular using the provided runtests.py script. This runs the test suite directly.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ ./runtests.py\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG.rst in reStructuredText Document\nDESCRIPTION: A reStructuredText directive that includes the content of the CHANGELOG.rst file from the parent directory into the current document. This is used to avoid duplication and maintain the changelog in a single place.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Including LICENSE File in reStructuredText Document\nDESCRIPTION: This snippet uses the reStructuredText literalinclude directive to include the contents of the LICENSE file located in the parent directory. This is commonly used in documentation to display the full text of the project's license.\nSOURCE: https://github.com/tfranzel/drf-spectacular/blob/master/docs/license.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. literalinclude:: ../LICENSE\n```"
  }
]