[
  {
    "owner": "peterdemin",
    "repo": "openai-cli",
    "content": "TITLE: Installing OpenAI CLI in Python Virtual Environment\nDESCRIPTION: Command to install the OpenAI CLI package using pip in a Python virtual environment.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install openai-cli\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI CLI for Text Completion\nDESCRIPTION: Example of using the OpenAI CLI to complete a text prompt via command line pipe.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"Are cats faster than dogs?\" | openai complete -\n```\n\n----------------------------------------\n\nTITLE: Interactive Mode Usage with OpenAI CLI\nDESCRIPTION: Demonstration of using the OpenAI CLI in interactive mode (REPL) for text completion.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ openai repl\nPrompt: Can generative AI replace humans?\n\nNo, generative AI cannot replace humans.\nWhile generative AI can be used to automate certain tasks,\nit cannot replace the creativity, intuition, and problem-solving\nskills that humans possess.\nGenerative AI can be used to supplement human efforts,\nbut it cannot replace them.\n\nPrompt: ^C\n```\n\n----------------------------------------\n\nTITLE: Building Standalone Binary for OpenAI CLI\nDESCRIPTION: Commands to build a standalone binary for the OpenAI CLI using pex and move it to the PATH.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ make openai && mv openai ~/bin/\n$ openai repl\nPrompt:\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Definition\nDESCRIPTION: Specifies exact versions of Python packages required for the project. The main dependency is requests, with its transitive dependencies certifi, charset-normalizer, idna, and urllib3 pinned to specific versions.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/requirements/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncertifi==2025.1.31\n    # via requests\ncharset-normalizer==3.4.1\n    # via requests\nidna==3.10\n    # via requests\nrequests==2.32.3\n    # via -r requirements/base.in\nurllib3==2.3.0\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Parametrized pytest Tests for Fibonacci Function\nDESCRIPTION: The rewritten unit tests using pytest.parametrize for more efficient and maintainable testing of the Fibonacci function.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom .fib import Fibonacci\n\n\n@pytest.mark.parametrize(\n    \"n, expected\",\n    [(1, 0), (2, 1), (3, 1), (4, 2), (5, 3), (6, 5), (7, 8), (8, 13), (9, 21), (10, 34)],\n)\ndef test_fibonacci(n, expected):\n    assert Fibonacci(n) == expected\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Function with Fixed Type Annotations\nDESCRIPTION: The Fibonacci function with corrected type annotations to resolve mypy warnings.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef Fibonacci(n: int) -> int:\n    if n < 0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n == 1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n    return 0  # Changed return statement to return 0\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Fibonacci Function\nDESCRIPTION: The Fibonacci function with added type annotations for improved type checking.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef Fibonacci(n: int) -> int:\n    if n < 0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n == 1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Function in Python\nDESCRIPTION: The generated Python function for calculating Fibonacci numbers.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n == 1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n```\n\n----------------------------------------\n\nTITLE: Unit Tests for Fibonacci Function\nDESCRIPTION: The generated unit tests for the Fibonacci function using unittest framework.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom .fib import Fibonacci\n\n\nclass TestFibonacci(unittest.TestCase):\n    def test_negative_input(self):\n        self.assertEqual(Fibonacci(-1), None)\n\n    def test_first_fibonacci_number(self):\n        self.assertEqual(Fibonacci(1), 0)\n\n    def test_second_fibonacci_number(self):\n        self.assertEqual(Fibonacci(2), 1)\n\n    def test_third_fibonacci_number(self):\n        self.assertEqual(Fibonacci(3), 1)\n\n    def test_fourth_fibonacci_number(self):\n        self.assertEqual(Fibonacci(4), 2)\n\n    def test_fifth_fibonacci_number(self):\n        self.assertEqual(Fibonacci(5), 3)\n\n    def test_sixth_fibonacci_number(self):\n        self.assertEqual(Fibonacci(6), 5)\n\n    def test_seventh_fibonacci_number(self):\n        self.assertEqual(Fibonacci(7), 8)\n\n    def test_eighth_fibonacci_number(self):\n        self.assertEqual(Fibonacci(8), 13)\n\n    def test_ninth_fibonacci_number(self):\n        self.assertEqual(Fibonacci(9), 21)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Rewriting Tests with pytest.parametrize\nDESCRIPTION: Command to rewrite the unit tests using pytest.parametrize for more concise and maintainable tests.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ (echo \"Rewrite these tests to use pytest.parametrized\"; cat examples/test_fib.py) | openai complete - | black - | tee tmp && mv tmp examples/test_fib.py\n```\n\n----------------------------------------\n\nTITLE: Generating Python Fibonacci Function with OpenAI CLI\nDESCRIPTION: Example of using OpenAI CLI to generate a Python function for calculating Fibonacci numbers.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"Write Python function to calculate Fibonacci numbers\" | openai complete - | black - > examples/fib.py\n```\n\n----------------------------------------\n\nTITLE: Generating Unit Tests for Fibonacci Function with OpenAI CLI\nDESCRIPTION: Example of using OpenAI CLI to generate unit tests for the previously created Fibonacci function.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ (echo 'Write unit tests for this Python module named \"fib\":\\n'; cat examples/fib.py) | openai complete - | black - > examples/test_fib.py\n```\n\n----------------------------------------\n\nTITLE: Running Generated Unit Tests with pytest\nDESCRIPTION: Command to run the generated unit tests using pytest and display the results.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest -v examples/test_fib.py\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Fibonacci Function\nDESCRIPTION: Command to add type annotations to the Fibonacci function using OpenAI CLI.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ (echo \"Add type annotations for this Python code\"; cat examples/fib.py) | openai complete - | black - | tee tmp && mv tmp examples/fib.py\n```\n\n----------------------------------------\n\nTITLE: Running mypy for Type Checking\nDESCRIPTION: Command to run mypy for type checking on the Fibonacci function.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ mypy examples/fib.py\n```\n\n----------------------------------------\n\nTITLE: Fixing mypy Warnings in Fibonacci Function\nDESCRIPTION: Command to fix mypy warnings in the Fibonacci function using OpenAI CLI.\nSOURCE: https://github.com/peterdemin/openai-cli/blob/main/README.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ (echo \"Fix mypy warnings in this Python code\"; cat examples/fib.py; mypy examples/fib.py) | openai complete - | black - | tee tmp && mv tmp examples/fib.py\n```"
  }
]