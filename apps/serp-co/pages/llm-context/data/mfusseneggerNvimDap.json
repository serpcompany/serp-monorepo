[
  {
    "owner": "mfussenegger",
    "repo": "nvim-dap",
    "content": "TITLE: Toggle Breakpoint in Neovim with nvim-dap (Lua)\nDESCRIPTION: This snippet uses the nvim-dap plugin to toggle a breakpoint at the current line in Neovim. It calls the `toggle_breakpoint()` function from the `dap` module.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/README.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n:lua require'dap'.toggle_breakpoint()\n```\n\n----------------------------------------\n\nTITLE: Example Key Mappings for Debugging\nDESCRIPTION: This Lua snippet provides example key mappings for common debugging actions in nvim-dap. It uses `vim.keymap.set` to bind keys to functions like continuing, stepping over, stepping into, stepping out, toggling breakpoints, setting log points, opening the REPL, running the last debug session, and showing hover/preview information. It includes mappings for both normal and visual modes.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nvim.keymap.set('n', '<F5>', function() require('dap').continue() end)\nvim.keymap.set('n', '<F10>', function() require('dap').step_over() end)\nvim.keymap.set('n', '<F11>', function() require('dap').step_into() end)\nvim.keymap.set('n', '<F12>', function() require('dap').step_out() end)\nvim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)\nvim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint() end)\nvim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)\nvim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)\nvim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)\nvim.keymap.set({'n', 'v'}, '<Leader>dh', function()\n  require('dap.ui.widgets').hover()\nend)\nvim.keymap.set({'n', 'v'}, '<Leader>dp', function()\n  require('dap.ui.widgets').preview()\nend)\nvim.keymap.set('n', '<Leader>df', function()\n  local widgets = require('dap.ui.widgets')\n  widgets.centered_float(widgets.frames)\nend)\nvim.keymap.set('n', '<Leader>ds', function()\n  local widgets = require('dap.ui.widgets')\n  widgets.centered_float(widgets.scopes)\nend)\n```\n\n----------------------------------------\n\nTITLE: Example launch.json with Basic Configurations\nDESCRIPTION: This JSON snippet provides an example of a `launch.json` file with two basic debug configurations: one for Java and another for C++. Each configuration specifies the 'type', 'request', and 'name' properties.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"java\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Java\"\n    },\n    {\n      \"type\": \"cppdbg\",\n      \"request\": \"launch\",\n      \"name\": \"Launch CPP\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Launch Configuration (Partial)\nDESCRIPTION: This snippet demonstrates a partial launch configuration with `request`, `name`, and `program` properties. Note the use of `${file}` to represent the active file name, and the `pythonPath` property set to a function that returns the path to the python interpreter. This snippet is part of a larger launch configuration example.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nrequest = 'launch';\nname = \"Launch file\";\nprogram = \"${file}\";\npythonPath = function()\n  return '/usr/bin/python'\nend;\n```\n\n----------------------------------------\n\nTITLE: Continue Execution in Neovim with nvim-dap (Lua)\nDESCRIPTION: This snippet uses the nvim-dap plugin to continue the execution of the debugging session. It calls the `continue()` function from the `dap` module to resume the program execution.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/README.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n:lua require'dap'.continue()\n```\n\n----------------------------------------\n\nTITLE: launch.json with OS-Specific Properties\nDESCRIPTION: This JSON snippet illustrates how to define system-specific properties within a `launch.json` file using 'linux', 'osx', and 'windows' sub-objects.  Each sub-object contains properties that override the base properties when running on the corresponding operating system.  This example configures the debugger path for cppdbg on different platforms.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"cppdbg\",\n  \"request\": \"launch\",\n  \"name\": \"Launch CPP\",\n  \"linux\": {\n    \"MIMode\": \"gdb\",\n    \"miDebuggerPath\": \"/usr/bin/gdb\"\n  },\n  \"osx\": {\n    \"MIMode\": \"lldb\",\n    \"miDebuggerPath\": \"/usr/local/bin/lldb-mi\"\n  },\n  \"windows\": {\n    \"MIMode\": \"gdb\",\n    \"miDebuggerPath\": \"C:\\\\MinGw\\\\bin\\\\gdb.exe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Debug Adapter\nDESCRIPTION: Registers the `debugpy` debug adapter for Python under the type `python`. It specifies the command to execute to launch the debug adapter, along with any necessary arguments. The command uses the environment variable `HOME` to find the Python executable.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\ndap.adapters.python = {\n  type = 'executable';\n  command = os.getenv('HOME') .. '/.virtualenvs/tools/bin/python';\n  args = { '-m', 'debugpy.adapter' };\n}\n```\n\n----------------------------------------\n\nTITLE: Step Over in Neovim with nvim-dap (Lua)\nDESCRIPTION: This snippet uses the nvim-dap plugin to step over the current line of code during a debugging session.  It calls the `step_over()` function from the `dap` module.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/README.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n:lua require'dap'.step_over()\n```\n\n----------------------------------------\n\nTITLE: Sending a Request to the Debug Adapter\nDESCRIPTION: This snippet demonstrates how to send a request to the debug adapter using `session:request`, providing a callback function to handle the result.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\nlocal session = assert(require(\"dap\").session(), \"has active session\")\nlocal arguments = {\n  expression = \"1 + 2\"\n}\n---@param err dap.ErrorResponse\n---@param result dap.EvaluateResponse\nlocal function on_result(err, result)\n  vim.print(err or \"No error\")\n  vim.print(result or \"No result\")\nend\nsession:request(\"evaluate\", arguments, on_result)\n```\n\n----------------------------------------\n\nTITLE: Step Into in Neovim with nvim-dap (Lua)\nDESCRIPTION: This snippet uses the nvim-dap plugin to step into a function call during a debugging session. It calls the `step_into()` function from the `dap` module to move into the called function's code.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/README.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n:lua require'dap'.step_into()\n```\n\n----------------------------------------\n\nTITLE: Open REPL in Neovim with nvim-dap (Lua)\nDESCRIPTION: This snippet uses the nvim-dap plugin to open the built-in REPL (Read-Eval-Print Loop) for inspecting the state of the application during debugging. It calls the `repl.open()` function from the `dap` module.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/README.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n:lua require'dap'.repl.open()\n```\n\n----------------------------------------\n\nTITLE: Lua Function to Abort Debug Session\nDESCRIPTION: This snippet illustrates how to use a Lua function within a launch configuration to prompt the user for a path and abort the debug session if no path is provided. `dap.ABORT` is returned to signal that the debug session should not start.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nprogram = function()\n  local path = vim.fn.input({\n    prompt = 'Path to executable: ',\n    default = vim.fn.getcwd() .. '/',\n    completion = 'file'\n  })\n  return (path and path ~= \"\") and path or dap.ABORT\nend\n```\n\n----------------------------------------\n\nTITLE: launch.json with Input Placeholder\nDESCRIPTION: This JSON snippet demonstrates the use of input placeholders in `launch.json` to prompt the user for input. It defines an input with the id 'myPrompt' of type 'pickString' and uses it in the 'program' property of the launch configuration.  The user will be prompted to select the program to run.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"name\": \"Launch\",\n      \"program\": \"${input:myPrompt}\"\n    }\n  ],\n  \"inputs\": [\n    {\n      \"id\": \"myPrompt\",\n      \"type\": \"pickString\",\n      \"description\": \"Program to run: \",\n      \"default\": \"foobar\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adapter Configuration Function\nDESCRIPTION: Example of setting `dap.adapters.<name>` to a function which defers the resolving of the adapter configuration until a configuration is used. This example starts a java-debug adapter asynchronously using an external command to retrieve the port.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ndap.adapters.java = function(callback, config)\n  M.execute_command({command = 'vscode.java.startDebugSession'}, function(err0, port)\n    assert(not err0, vim.inspect(err0))\n    callback({ type = 'server'; host = '127.0.0.1'; port = port; })\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Signs with sign_define()\nDESCRIPTION: This Lua snippet demonstrates how to customize the signs used by nvim-dap to represent breakpoints, log points, and other debugging states. It uses the `vim.fn.sign_define()` function to modify the appearance of the 'DapBreakpoint' sign, setting the text, text highlight, line highlight, and number highlight.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nvim.fn.sign_define('DapBreakpoint', {text='🛑', texthl='', linehl='', numhl=''})\n```\n\n----------------------------------------\n\nTITLE: Using nvim-dap widgets to view frames in sidebar (Lua)\nDESCRIPTION: This snippet demonstrates how to use nvim-dap widgets to create a sidebar that displays the current frames during a debugging session. It requires the `dap.ui.widgets` module. The `open()` method displays the sidebar.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\n  local widgets = require('dap.ui.widgets')\n  local my_sidebar = widgets.sidebar(widgets.frames)\n  my_sidebar.open()\n```\n\n----------------------------------------\n\nTITLE: Using nvim-dap widgets to view scopes in floating window (Lua)\nDESCRIPTION: This snippet demonstrates how to display the current scopes in a centered floating window using nvim-dap widgets.  It requires the `dap.ui.widgets` module.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\n  local widgets = require('dap.ui.widgets')\n  widgets.centered_float(widgets.scopes)\n```\n\n----------------------------------------\n\nTITLE: Debuggee Configuration for Python\nDESCRIPTION: Example of a debuggee configuration for Python. It demonstrates how to set the `type`, `request`, and `name` properties, which are required for any debug configuration. The configuration is stored under the `python` filetype.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\ndap.configurations.python = {\n  {\n    type = 'python';\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Breakpoints in Lua\nDESCRIPTION: This snippet demonstrates how to use the `set_exception_breakpoints` function in nvim-dap to configure when the debugger should break on exceptions. It shows different ways to specify exception filters, including using default settings, specifying individual exception types, and using fallback tables.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\n-- Ask user to stop on which kinds of exceptions\nrequire'dap'.set_exception_breakpoints()\n-- don't stop on exceptions\nrequire'dap'.set_exception_breakpoints({})\n-- stop only on certain exceptions (debugpy offers \"raised\", \"uncaught\")\nrequire'dap'.set_exception_breakpoints({\"uncaughted\"})\nrequire'dap'.set_exception_breakpoints({\"raised\", \"uncaught\"})\n-- use default settings of debug adapter\nrequire'dap'.set_exception_breakpoints(\"default\")\n```\n\n----------------------------------------\n\nTITLE: Using nvim-dap widgets to hover and view expression value (Lua)\nDESCRIPTION: This snippet demonstrates how to display the value of the expression under the cursor in a floating window using nvim-dap widgets. It requires the `dap.ui.widgets` module.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\n  require('dap.ui.widgets').hover()\n```\n\n----------------------------------------\n\nTITLE: Extending REPL Commands in Lua\nDESCRIPTION: This snippet demonstrates how to extend the built-in REPL commands in nvim-dap. It shows how to add new aliases for existing commands and how to define custom commands that can be invoked from the REPL.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nlocal repl = require 'dap.repl'\nrepl.commands = vim.tbl_extend('force', repl.commands, {\n  -- Add a new alias for the existing .exit command\n  exit = {'exit', '.exit', '.bye'},\n  -- Add your own commands; run `.echo hello world` to invoke\n  -- this function with the text \"hello world\"\n  custom_commands = {\n    ['.echo'] = function(text)\n      dap.repl.append(text)\n    end,\n    -- Hook up a new command to an existing dap function\n    ['.restart'] = dap.restart,\n  },\n}\n)\n```\n\n----------------------------------------\n\nTITLE: External Terminal Configuration - Lua\nDESCRIPTION: Configures nvim-dap to launch an external terminal for debugging. It specifies the command and arguments required to launch the desired terminal application (e.g., Alacritty). This setup requires a terminal emulator to be available and configured correctly.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\ndap.defaults.fallback.external_terminal = {\n  command = '/usr/bin/alacritty';\n  args = {'-e'};\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a configuration provider (Lua)\nDESCRIPTION: This snippet demonstrates how to register a config provider which is called by nvim-dap to get a suitable |dap-configuration| to use. The key for the table is a plugin-id. The value is a function that takes a buffer number as parameter and must return |dap-configuration| entries as a list.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\n  local dap = require(\"dap\")\n  dap.providers.configs[\"mydummy_provider\"] = function(bufnr)\n    return {\n      {\n        name = \"This config always shows up\",\n        type = \"gdb\",\n        request = \"launch\",\n        program = \"/usr/bin/zig\",\n        args = {\"run\", \"${file}\"},\n        cwd = \"${workspaceFolder}\",\n      },\n    }\n  end\n```\n\n----------------------------------------\n\nTITLE: Picking a Process with Filter (function)\nDESCRIPTION: This snippet demonstrates how to use `dap.utils.pick_process` to display a prompt for selecting a process, filtering the processes by name using a Lua function.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_39\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap.utils\").pick_process({\n  filter = function(proc) return vim.endswith(proc.name, \"sway\") end\n})\n```\n\n----------------------------------------\n\nTITLE: Picking a File with Filter (string)\nDESCRIPTION: This snippet demonstrates how to use `dap.utils.pick_file` to display a prompt for selecting a file, filtering the files by name using a string pattern and disabling executable-only filtering.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap.utils\").pick_file({ filter = \".*%.py\", executables = false })\n```\n\n----------------------------------------\n\nTITLE: Picking a File with Filter (function)\nDESCRIPTION: This snippet demonstrates how to use `dap.utils.pick_file` to display a prompt for selecting a file, filtering the files by name using a Lua function and disabling executable-only filtering.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap.utils\").pick_file({\n  executables = false,\n  filter = function(filepath)\n    return vim.endswith(filepath, \".py\")\n  end,\n})\n```\n\n----------------------------------------\n\nTITLE: Customize Integrated Terminal Command - Lua\nDESCRIPTION: Configures the command used to create a split window for the integrated terminal in nvim-dap. This allows for customizing the terminal's layout and size within Neovim's UI. The example uses '50vsplit new' to create a vertical split occupying 50% of the available space.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\ndap.defaults.fallback.terminal_win_cmd = '50vsplit new'\n```\n\n----------------------------------------\n\nTITLE: Global Terminal Configuration - Lua\nDESCRIPTION: Sets a global terminal command for all debug adapters in nvim-dap, then overrides it for python. This configuration uses 'tabnew' for all adapters and 'belowright new' for python. This example showcases how to configure a generic debugging terminal and apply customizations for specific debugging adapters.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\n-- Use \"tabnew\" for all debug adapters\ndap.defaults.fallback.terminal_win_cmd = 'tabnew'\n-- Except for python\ndap.defaults.python.terminal_win_cmd = 'belowright new'\n```\n\n----------------------------------------\n\nTITLE: Output Event Handling Customization - Lua\nDESCRIPTION: Overrides the default output handling in nvim-dap with a custom handler. This allows for ignoring or modifying output events based on custom logic. It demonstrates how to intercept `output_event` and `session` parameters to implement custom handling.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\n---@param session dap.Session\n---@param output_event dap.OutputEvent\ndap.defaults.fallback.on_output = function(session, output_event)\n  -- ignore all outputs\nend\n```\n\n----------------------------------------\n\nTITLE: Lua Function as Launch Configuration Value\nDESCRIPTION: This snippet shows how to use a Lua function to dynamically determine the value of a property in a launch configuration.  The function returns a coroutine which suspends and uses `vim.ui.select` to prompt the user for input, then resumes the `dap_run_co` with the chosen value.  This example demonstrates asynchronous operation during debug configuration.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfoo = function()\n  return coroutine.create(function(dap_run_co)\n    local items = {'one', 'two'}\n    vim.ui.select(items, { label = 'foo> '}, function(choice)\n      coroutine.resume(dap_run_co, choice)\n    end)\n  end)\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a listener for the 'terminated' event (Lua)\nDESCRIPTION: This snippet demonstrates how to register a listener function that is called before the internal nvim-dap handlers for the `event_terminated` event. The listener prints a message when a session is terminated. It requires the `dap` module. `session` and `body` contain the session and event payload respectively.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\n  local dap = require('dap')\n  dap.listeners.before['event_terminated']['my-plugin'] = function(session, body)\n    print('Session terminated', vim.inspect(session), vim.inspect(body))\n  end\n```\n\n----------------------------------------\n\nTITLE: Registering an 'on_config' hook (Lua)\nDESCRIPTION: This snippet demonstrates how to register a function to pre-process the |dap-configuration| when a debug session starts. The key for the table is a plugin-id. The value is a function that takes and returns a |dap-configuration|.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\n  local dap = require(\"dap\")\n  dap.listeners.on_config[\"dummy-noop\"] = function(config)\n    return vim.deepcopy(config)\n  end\n```\n\n----------------------------------------\n\nTITLE: Overriding JSON Decode Function with json5 Parser\nDESCRIPTION: This snippet shows how to override the default JSON decoding function in nvim-dap to use a json5 parser. This allows the use of json5 features like trailing commas in launch.json files. It requires a 3rd-party json5 parser to be installed.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap.ext.vscode').json_decode = require'json5'.parse\n```\n\n----------------------------------------\n\nTITLE: Adapter Configuration with Enrich Config\nDESCRIPTION: Example of adapter configuration using the `enrich_config` property. This property is a function that allows an adapter to enrich a configuration with additional information dynamically before the debug session starts. In this case, it injects an `extra_property` into the configuration.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal adapter = {\n  type = 'server';\n  host = '127.0.0.1';\n  port = 8080;\n  enrich_config = function(config, on_config)\n    local final_config = vim.deepcopy(config)\n    final_config.extra_property = 'This got injected by the adapter'\n    on_config(final_config)\n  end;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Exception Breakpoints via Fallback in Lua\nDESCRIPTION: This snippet shows how to configure default exception breakpoints using the `defaults.fallback` table in nvim-dap. This allows you to specify a global default for exception breakpoints that will be used if no other configuration is specified.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap').defaults.fallback.exception_breakpoints = {'raised'}\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Breakpoints per Adapter Type in Lua\nDESCRIPTION: This snippet illustrates how to configure exception breakpoints for a specific adapter type in nvim-dap. This allows you to customize exception breakpoint behavior based on the debugger being used (e.g., 'python').\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap').defaults.python.exception_breakpoints = {'raised'}\n```\n\n----------------------------------------\n\nTITLE: Disable auto-continue for Java - Lua\nDESCRIPTION: Disables the auto-continue behavior for Java debugging sessions within nvim-dap. Setting `auto_continue_if_many_stopped` to `false` is useful in multithreaded applications where multiple threads may stop simultaneously, ensuring the debugger doesn't automatically resume a thread when another is already stopped.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\ndap.defaults.java.auto_continue_if_many_stopped = false\n```\n\n----------------------------------------\n\nTITLE: Force External Terminal - Lua\nDESCRIPTION: Forces nvim-dap to use an external terminal for debugging, even if the debug adapter doesn't provide an option to choose between internal and external terminals. This configuration overrides the adapter's default behavior and always launches the debugee in a separate terminal window.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\ndap.defaults.fallback.force_external_terminal = true\n```\n\n----------------------------------------\n\nTITLE: Focus Terminal Configuration - Lua\nDESCRIPTION: Configures nvim-dap to shift focus to the integrated terminal when it opens. This ensures that the terminal receives immediate focus after it's created, allowing for direct interaction with the debugee's output and input. By default, focus remains on the current buffer.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require('dap')\ndap.defaults.fallback.focus_terminal = true\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Lua\nDESCRIPTION: This snippet demonstrates how to set the log level for nvim-dap.  It sets the log level to 'TRACE', providing the most verbose logging output.  The log file is located in the `cache` folder within the standard path.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nrequire('dap').set_log_level('TRACE')\n```\n\n----------------------------------------\n\nTITLE: Set autostart configuration - Lua\nDESCRIPTION: Sets the name of a debug configuration to autostart when evaluating an expression in the REPL without an active session. This simplifies debugging by automatically starting the specified configuration (e.g., 'nluarepl') when needed.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\ndap.defaults.fallback.autostart = \"nluarepl\"\n```\n\n----------------------------------------\n\nTITLE: Using nvim-dap widgets to view scopes in sidebar (Lua)\nDESCRIPTION: This snippet demonstrates how to use nvim-dap widgets to create a sidebar that displays the current scopes during a debugging session. It requires the `dap.ui.widgets` module.  The `open()` method displays the sidebar.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\n  local widgets = require('dap.ui.widgets')\n  local my_sidebar = widgets.sidebar(widgets.scopes)\n  my_sidebar.open()\n```\n\n----------------------------------------\n\nTITLE: Customizing buffer and window creation with nvim-dap widgets (Lua)\nDESCRIPTION: This snippet demonstrates how to customize the buffer and window creation using the low-level builder of nvim-dap widgets. It requires the `dap.ui.widgets` module, and provides functions that create and return a buffer and a window, respectively.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\n  local widgets = require('dap.ui.widgets')\n  widgets.builder(widgets.scopes)\n    .new_buf(function_that_creates_and_returns_a_buffer)\n    .new_win(function_that_creates_and_returns_a_window)\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Resulting windows Configuration\nDESCRIPTION: This JSON represents the final configuration on a windows system after applying the OS-specific properties. It merges the base configuration with the properties defined under the 'windows' sub-object. Note the escaped backslashes in the file path.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"cppdbg\",\n  \"request\": \"launch\",\n  \"name\": \"Launch CPP\",\n  \"MIMode\": \"gdb\",\n  \"miDebuggerPath\": \"C:\\\\MinGw\\\\bin\\\\gdb.exe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting linux Configuration\nDESCRIPTION: This JSON represents the final configuration on a linux system after applying the OS-specific properties from the previous example. It combines the base configuration with the properties defined under the 'linux' sub-object.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"cppdbg\",\n  \"request\": \"launch\",\n  \"name\": \"Launch CPP\",\n  \"MIMode\": \"gdb\",\n  \"miDebuggerPath\": \"/usr/bin/gdb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Request with Coroutine\nDESCRIPTION: This snippet demonstrates how to send a request to the debug adapter using `session:request` within a coroutine, eliminating the need for a callback function.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\nlocal session = assert(require(\"dap\").session(), \"has active session\")\nlocal arguments = {\n  expression = \"1 + 2\"\n}\ncoroutine.wrap(function()\n  local err, result = session:request(\"evaluate\", arguments)\n  vim.print(err or \"No error\")\n  vim.print(result or \"No result\")\nend)()\n```\n\n----------------------------------------\n\nTITLE: Printing Cache Path in Lua\nDESCRIPTION: This snippet shows how to print the location of the cache folder, which is where the nvim-dap log file is stored.  This is useful for finding the log file and inspecting its contents.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nprint(vim.fn.stdpath('cache'))\n```\n\n----------------------------------------\n\nTITLE: Splitting a String\nDESCRIPTION: This snippet demonstrates how to split a string on whitespace using `dap.utils.splitstr`, handling quoted strings correctly.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap.utils\").splitstr(\"Hello world\")\n-- result: {\"Hello\", \"world\"}\n\nrequire(\"dap.utils\").splitstr(\"Keeps 'a quoted string' intact\")\n-- result: {\"Keeps\", \"a quoted string\", \"intact\"}\n```\n\n----------------------------------------\n\nTITLE: Attaching Autocompletion to REPL Buffer\nDESCRIPTION: This vimscript snippet demonstrates how to automatically attach the nvim-dap autocompletion functionality to the REPL buffer. This is achieved by using an autocommand that triggers when a file with the `dap-repl` filetype is opened, which then calls the `require('dap.ext.autocompl').attach()` function.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_13\n\nLANGUAGE: vim\nCODE:\n```\nau FileType dap-repl lua require('dap.ext.autocompl').attach()\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notice to Source Files\nDESCRIPTION: This code snippet provides the template for adding a GNU General Public License notice to the start of source code files. It includes copyright information, licensing terms, and a link to the full license. This ensures proper attribution and informs users of their rights under the GPL.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/LICENSE.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Terminal Programs\nDESCRIPTION: This code snippet provides a template for displaying a short GNU General Public License notice in an interactive terminal program. It includes copyright information and instructions on how to view the full warranty and licensing details. This helps users understand the terms of use directly from the program's interface.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/LICENSE.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Picking a Process with Filter (string)\nDESCRIPTION: This snippet demonstrates how to use `dap.utils.pick_process` to display a prompt for selecting a process, filtering the processes by name using a string pattern.\nSOURCE: https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt#_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"dap.utils\").pick_process({ filter = \"sway\" })\n```"
  }
]