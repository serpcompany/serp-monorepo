[
  {
    "owner": "spatie",
    "repo": "laravel-activitylog",
    "content": "TITLE: Advanced Activity Logging with Context and Properties\nDESCRIPTION: This example demonstrates more advanced activity logging with additional context including the subject model, causer (user), and custom properties. It also shows how to retrieve these values from a logged activity.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->performedOn($anEloquentModel)\n   ->causedBy($user)\n   ->withProperties(['customProperty' => 'customValue'])\n   ->log('Look, I logged something');\n\n$lastLoggedActivity = Activity::all()->last();\n\n$lastLoggedActivity->subject; //returns an instance of an eloquent model\n$lastLoggedActivity->causer; //returns an instance of your user model\n$lastLoggedActivity->getExtraProperty('customProperty'); //returns 'customValue'\n$lastLoggedActivity->description; //returns 'Look, I logged something'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Model Event Logging in Laravel\nDESCRIPTION: Example of implementing the LogsActivity trait in a Laravel model to enable automatic event logging. Shows basic configuration using LogOptions to specify which attributes to track.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\nuse Spatie\\Activitylog\\LogOptions;\n\nclass NewsItem extends Model\n{\n    use LogsActivity;\n\n    protected $fillable = ['name', 'text'];\n\n    public function getActivitylogOptions(): LogOptions\n    {\n        return LogOptions::defaults()\n        ->logOnly(['name', 'text']);\n        // Chain fluent methods for configuration options\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Basic Activity in Laravel\nDESCRIPTION: This snippet demonstrates the simplest way to log an activity using the package's activity() helper function. It creates a new activity log entry with the provided description.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()->log('Look, I logged something');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Logs in Laravel\nDESCRIPTION: Example of retrieving all activity logs using the Activity model. This demonstrates how to access the logs stored in the activity_log table.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nActivity::all();\n```\n\n----------------------------------------\n\nTITLE: Logging Activity in Laravel using ActivityLog\nDESCRIPTION: This snippet demonstrates how to log activity using the activity() helper function in Laravel. It shows how to log a simple message and how to associate the activity with a model.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()->log('Look mum, I logged something');\n\n$user = Auth::user();\n$user->name = 'updated name';\n$user->save();\n\nactivity()\n   ->performedOn($user)\n   ->log('User name updated');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Changes from Activity Log\nDESCRIPTION: This example shows the structure of data returned when accessing model changes through the activity log. The changes() method returns an array with both current and previous attribute values.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[\n   'attributes' => [\n        'name' => 'updated name',\n        'text' => 'Lorum',\n    ],\n    'old' => [\n        'name' => 'original name',\n        'text' => 'Lorum',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Complex Batch Logging Example in Laravel ActivityLog\nDESCRIPTION: A comprehensive example demonstrating batch logging with multiple create, update, and delete operations. It also shows how to retrieve and inspect the batch activities.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Activitylog\\Facades\\LogBatch;\nuse Spatie\\Activitylog\\Models\\Activity;\n\nLogBatch::startBatch();\n\n$author = Author::create(['name' => 'Philip K. Dick']);\n$book = Book::create(['name' => 'A Scanner Brightly', 'author_id' => $author->id]);\n$book->update(['name' => 'A Scanner Darkly']);\n$book2 = Book::create(['name' => 'Paycheck', 'author_id' => $author->id]);\n\n$author->delete();\n\n$batchUuid = LogBatch::getUuid(); // save batch id to retrieve activities later\nLogBatch::endBatch();\n\n$batchActivities = Activity::forBatch($batchUuid)->get();\nvar_dump($batchActivities); // A collection of Activity models...\n// They will be in order: Author;created, Book;created, Book;updated,\n//      Book;created, Author;deleted, Book;deleted and Book;deleted\n```\n\n----------------------------------------\n\nTITLE: Manually Logging Activity in Laravel\nDESCRIPTION: This snippet demonstrates how to manually log activity using the activity() helper function in Laravel. It shows how to specify the causer, subject, and properties of the activity.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->performedOn($anEloquentModel)\n   ->causedBy($user)\n   ->withProperties(['customProperty' => 'customValue'])\n   ->log('Look, I logged something');\n```\n\n----------------------------------------\n\nTITLE: LogOptions Additional Configuration Methods\nDESCRIPTION: Collection of methods for fine-tuning activity logging behavior including logFillable, dontLogFillable, logOnlyDirty, and more.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-options.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * log changes to all the $fillable attributes of the model\n */\npublic function logFillable(): LogOption;\n\n/**\n * Stop logging $fillable attributes of the model\n */\npublic function dontLogFillable(): LogOption;\n\n/**\n * Log changes that has actually changed after the update\n */\npublic function logOnlyDirty(): LogOption;\n\n/**\n * Log changes only if these attributes changed\n */\npublic function logOnly(array $attributes): LogOption;\n\n/**\n * Exclude these attributes from being logged\n */\npublic function logExcept(array $attributes): LogOption;\n\n/**\n * Don't trigger an activity if these attributes changed logged\n */\npublic function dontLogIfAttributesChangedOnly(array $attributes): LogOption;\n\n/**\n * Dont store empty logs. Storing empty logs can happen when you only\n * want to log a certain attribute but only another changes.\n */\npublic function dontSubmitEmptyLogs(): LogOption;\n\n/**\n * Allow storing empty logs. Storing empty logs can happen when you only\n * want to log a certain attribute but only another changes.\n */\npublic function submitEmptyLogs(): LogOption;\n\n/**\n * Customize log name\n */\npublic function useLogName(string $logName): LogOption;\n\n/**\n * Skip using mutators for these attributes when logged\n */\npublic function useAttributeRawValues(array $attributes): LogOption;\n\n/**\n * Customize log description using callback\n */\npublic function setDescriptionForEvent(Closure $callback): LogOption;\n```\n\n----------------------------------------\n\nTITLE: Basic Activity Logging in Laravel\nDESCRIPTION: Demonstrates the most basic way to log an activity and retrieve it using the Activity model.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()->log('Look mum, I logged something');\n```\n\nLANGUAGE: php\nCODE:\n```\n$lastActivity = Activity::all()->last(); //returns the last logged activity\n\n$lastActivity->description; //returns 'Look mum, I logged something';\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Causer in Laravel\nDESCRIPTION: Demonstrates how to set who or what caused the activity using causedBy() or its alias by().\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->causedBy($userModel)\n   ->performedOn($someContentModel)\n   ->log('edited');\n\n$lastActivity = Activity::all()->last(); //returns the last logged activity\n\n$lastActivity->causer; //returns the model that was passed to `causedBy`;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Causer with CauserResolver in Laravel\nDESCRIPTION: Demonstrates how to set a global causer for activity logging using CauserResolver facade. The example shows setting a product owner as the causer and accessing the causer details from the activity log.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/define-causer-for-runtime.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// in a queue job or controller\n\nuse Spatie\\Activitylog\\Facades\\CauserResolver;\n\n// ... other code\n\n$product = Product::first(1);\n$causer = $product->owner;\n\nCauserResolver::setCauser($causer);\n\n$product->update(['name' => 'New name']);\n\nActivity::all()->last()->causer; // Product Model\nActivity::all()->last()->causer->id; // Product#1 Owner\n```\n\n----------------------------------------\n\nTITLE: Basic Activity Logging in Laravel\nDESCRIPTION: Simple example of logging an activity using the activity() helper function. This creates a basic log entry with a description.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()->log('Look mum, I logged something');\n```\n\n----------------------------------------\n\nTITLE: Basic LogBatch Usage Example\nDESCRIPTION: Demonstrates how to use LogBatch to group multiple activities together with a shared UUID. Shows starting a batch, getting its UUID, logging activities, and ending the batch.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-batch.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nLogBatch::startBatch();\n\nLogBatch::getUuid(); // 15c72460-4998-49ac-a0a3-647cc6f312ef\n\n$log = activity()->log('log look mom, I did something...');\n$author = Author::first();\n$author->delete(); // deletes books too\n\nActivity::latest()->get();\n// Author Deleted,  batch_uuid: 15c72460-4998-49ac-a0a3-647cc6f312ef\n// Book 1 Deleted,  batch_uuid: 15c72460-4998-49ac-a0a3-647cc6f312ef\n// Book 2 Deleted,  batch_uuid: 15c72460-4998-49ac-a0a3-647cc6f312ef\n// log look mom, I did something..., batch_uuid: 15c72460-4998-49ac-a0a3-647cc6f312ef\n$log->batch_uuid; // 15c72460-4998-49ac-a0a3-647cc6f312ef\n\nLogBatch::endBatch();\n```\n\n----------------------------------------\n\nTITLE: Logging Activity in Laravel with ActivityLog\nDESCRIPTION: This snippet demonstrates how to log activity using the ActivityLog package in Laravel. It shows various methods to record activity, including using the activity() helper function and the Activity facade.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->performedOn($anEloquentModel)\n   ->causedBy($user)\n   ->withProperties(['customProperty' => 'customValue'])\n   ->log('Look, I logged something');\n\nactivity()->log('Look, I logged something');\n\nActivity::log('Look, I logged something');\n```\n\n----------------------------------------\n\nTITLE: Batching Activities Using Callback in Laravel ActivityLog\nDESCRIPTION: Shows how to use LogBatch::withinBatch() to batch activities using a closure. All activities executed within the closure will be included in the same batch.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Activitylog\\Facades\\LogBatch;\n\nLogBatch::withinBatch(function(string $uuid) {\n    $uuid; // 5cce9cb3-3144-4d35-9015-830cf0f20691\n    activity()->log('my message');\n    $item = NewsItem::create(['name' => 'new batch']);\n    $item->update(['name' => 'updated']);\n    $item->delete();\n});\n\nActivity::latest()->get(); // batch_uuid: 5cce9cb3-3144-4d35-9015-830cf0f20691\n```\n\n----------------------------------------\n\nTITLE: Basic Activity Log Model Implementation in Laravel\nDESCRIPTION: Demonstrates the minimal setup required to implement activity logging in a Laravel model using the LogsActivity trait and LogOptions configuration.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-options.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\nuse Spatie\\Activitylog\\LogOptions;\n\nclass YourModel extends Model\n{\n    use LogsActivity;\n\n    public function getActivitylogOptions(): LogOptions\n    {\n        return LogOptions::defaults();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Activity Logs with tapActivity Method\nDESCRIPTION: This example shows how to customize activity logs before they are saved using the tapActivity method in the observed model. This allows for modifying properties or adding custom fields to the activity record.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\nuse Spatie\\Activitylog\\Contracts\\Activity;\n\nclass NewsItem extends Model\n{\n    use LogsActivity;\n\n    public function tapActivity(Activity $activity, string $eventName)\n    {\n        $activity->description = \"activity.logs.message.{$eventName}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Activity Logging with Properties and Relationships\nDESCRIPTION: Advanced example showing how to log an activity with subject model, causer, and custom properties. It also demonstrates how to retrieve and access the properties of logged activities.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->performedOn($anEloquentModel)\n   ->causedBy($user)\n   ->withProperties(['customProperty' => 'customValue'])\n   ->log('Look mum, I logged something');\n\n$lastLoggedActivity = Activity::all()->last();\n\n$lastLoggedActivity->subject; //returns an instance of an eloquent model\n$lastLoggedActivity->causer; //returns an instance of your user model\n$lastLoggedActivity->getExtraProperty('customProperty'); //returns 'customValue'\n$lastLoggedActivity->description; //returns 'Look mum, I logged something'\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Subject in Laravel\nDESCRIPTION: Shows how to specify the object on which the activity is performed using performedOn() or its alias on().\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->performedOn($someContentModel)\n   ->log('edited');\n\n$lastActivity = Activity::all()->last(); //returns the last logged activity\n\n$lastActivity->subject; //returns the model that was passed to `performedOn`;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Properties for Activity\nDESCRIPTION: Shows how to add custom properties to an activity log entry using withProperties() and how to retrieve them.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->causedBy($userModel)\n   ->performedOn($someContentModel)\n   ->withProperties(['key' => 'value'])\n   ->log('edited');\n\n$lastActivity = Activity::all()->last(); //returns the last logged activity\n\n$lastActivity->getExtraProperty('key'); //returns 'value'\n\n$lastActivity->where('properties->key', 'value')->get(); // get all activity where the `key` custom property is 'value'\n```\n\n----------------------------------------\n\nTITLE: Using inLog Scope for Activity Retrieval\nDESCRIPTION: Demonstrates the use of the inLog scope to retrieve activities from single or multiple log names, supporting both individual parameters and arrays.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/using-multiple-logs.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nActivity::inLog('other-log')->get();\n\n//you can pass multiple log names to the scope\nActivity::inLog('default', 'other-log')->get();\n\n//passing an array is just as good\nActivity::inLog(['default', 'other-log'])->get();\n```\n\n----------------------------------------\n\nTITLE: Model Event Logging in Laravel\nDESCRIPTION: Example demonstrating automatic model event logging. When a model is updated, the changes are automatically logged and can be retrieved from the activity log.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$newsItem->name = 'updated name';\n$newsItem->save();\n\n//updating the newsItem will cause an activity being logged\n$activity = Activity::all()->last();\n\n$activity->description; //returns 'updated'\n$activity->subject; //returns the instance of NewsItem that was created\n```\n\n----------------------------------------\n\nTITLE: Using Custom Pipe to Modify Activity Log in Laravel Controller\nDESCRIPTION: This snippet shows how to apply a custom pipe to modify the activity log for a NewsItem model. It demonstrates creating, updating, and retrieving the modified log changes.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/manipulate-changes-array.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ... in your controller/job/middleware\n\nNewsItem::addLogChange(new RemoveKeyFromLogChangesPipe('name'));\n\n$article = NewsItem::create(['name' => 'new article', 'text' => 'new article text']);\n$article->update(['name' => 'update article', 'text' => 'update article text']);\n\nActivity::all()->last()->changes();\n/*\n    'attributes' => [\n        'text' => 'updated text',\n    ],\n    'old' => [\n        'text' => 'original text',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Logs in Laravel\nDESCRIPTION: This snippet shows how to retrieve activity logs using the ActivityLog package. It demonstrates querying the activity log, including filtering by causer, subject, and log name.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nActivity::all();\n\nActivity::causedBy($user)->get();\n\nActivity::causedBy($user)\n   ->forSubject($article)\n   ->get();\n\nActivity::inLog('default')->get();\n```\n\n----------------------------------------\n\nTITLE: Maintaining LogBatch Across Multiple Jobs/Requests in Laravel\nDESCRIPTION: Shows how to keep a LogBatch open across multiple queue jobs or requests by using a unique UUID. This is useful for logging activities that span multiple processes.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Activitylog\\Facades\\LogBatch;\nuse Illuminate\\Bus\\Batch;\nuse Illuminate\\Support\\Str;\n\n$uuid =  Str::uuid();\n\nBus::batch([\n    // First job will open a batch\n    new SomeJob('some value', $uuid), // pass uuid as a payload to the job\n    new AnotherJob($uuid), // pass uuid as a payload to the job\n    new WorkJob('work work work', $uuid), // pass uuid as a payload to the job\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->catch(function (Batch $batch, Throwable $e) {\n    // First batch job failure detected...\n})->finally(function (Batch $batch) use ($uuid) {\n    // The batch has finished executing...\n    LogBatch::getUuid() === $uuid // true\n    LogBatch::endBatch();\n})->dispatch();\n\n// Later on..\nActivity::forBatch($uuid)->get(); // all the activity that happend in the batch\n```\n\n----------------------------------------\n\nTITLE: Customizing Activity Description\nDESCRIPTION: Demonstrates how to customize the activity description using a callback function in LogOptions.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\nuse Spatie\\Activitylog\\LogOptions;\n\nclass NewsItem extends Model\n{\n    use LogsActivity;\n\n    protected $fillable = ['name', 'text'];\n\n    public function getActivitylogOptions(): LogOptions\n    {\n        return LogOptions::defaults()\n        ->setDescriptionForEvent(fn(string $eventName) => \"This model has been {$eventName}\");\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Attributes in Laravel Activity Logs\nDESCRIPTION: This snippet shows how to exclude specific attributes from being logged when using wildcard logging with the dontLogIfAttributesChangedOnly() method. Even if these excluded attributes change, they will not appear in the activity log.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\nuse Spatie\\Activitylog\\LogOptions;\n\nclass NewsItem extends Model\n{\n    use LogsActivity;\n\n   public function getActivitylogOptions(): LogOptions\n    {\n        return LogOptions::defaults()\n        ->logAll()\n        ->dontLogIfAttributesChangedOnly(['text'])\n        ->logOnlyDirty();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Logged Events in Laravel Model\nDESCRIPTION: Shows how to customize which model events are automatically logged by modifying the $recordEvents property.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\n\nclass NewsItem extends Model\n{\n    use LogsActivity;\n\n    //only the `deleted` event will get logged automatically\n    protected static $recordEvents = ['deleted'];\n}\n```\n\n----------------------------------------\n\nTITLE: Tapping Activity Before Logging\nDESCRIPTION: Demonstrates how to modify an activity instance before it's saved using the tap() method.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Activitylog\\Contracts\\Activity;\n\nactivity()\n   ->causedBy($userModel)\n   ->performedOn($someContentModel)\n   ->tap(function(Activity $activity) {\n      $activity->my_custom_field = 'my special value';\n   })\n   ->log('edited');\n\n$lastActivity = Activity::all()->last();\n\n$lastActivity->my_custom_field; // returns 'my special value'\n```\n\n----------------------------------------\n\nTITLE: Laravel Activity Log Configuration Options\nDESCRIPTION: The default configuration file for the activity log package, containing settings for enabling/disabling logging, record retention, model configuration, and database connection options.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    /*\n     * If set to false, no activities will be saved to the database.\n     */\n    'enabled' => env('ACTIVITY_LOGGER_ENABLED', true),\n\n    /*\n     * When the clean-command is executed, all recording activities older than\n     * the number of days specified here will be deleted.\n     */\n    'delete_records_older_than_days' => 365,\n\n    /*\n     * If no log name is passed to the activity() helper\n     * we use this default log name.\n     */\n    'default_log_name' => 'default',\n\n    /*\n     * You can specify an auth driver here that gets user models.\n     * If this is null we'll use the current Laravel auth driver.\n     */\n    'default_auth_driver' => null,\n\n    /*\n     * If set to true, the subject returns soft deleted models.\n     */\n    'subject_returns_soft_deleted_models' => false,\n\n    /*\n     * This model will be used to log activity.\n     * It should implement the Spatie\\Activitylog\\Contracts\\Activity interface\n     * and extend Illuminate\\Database\\Eloquent\\Model.\n     */\n    'activity_model' => \\Spatie\\Activitylog\\Models\\Activity::class,\n\n    /*\n     * This is the name of the table that will be created by the migration and\n     * used by the Activity model shipped with this package.\n     */\n    'table_name' => env('ACTIVITY_LOGGER_TABLE_NAME', 'activity_log'),\n\n    /*\n     * This is the database connection that will be used by the migration and\n     * the Activity model shipped with this package. In case it's not set\n     * Laravel's database.default will be used instead.\n     */\n    'database_connection' => env('ACTIVITY_LOGGER_DB_CONNECTION'),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Activity Logging for Pivot Models\nDESCRIPTION: This snippet demonstrates how to configure activity logging for pivot models by adding a primary key column and enabling incrementing. This is necessary because pivot models typically don't have primary keys by default.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\Pivot;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\n\nfinal class PivotModel extends Pivot\n{\n    use LogsActivity;\n\n    public $incrementing = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Activity Logging in Laravel PHP\nDESCRIPTION: Shows how to disable all logging activities for the current request using the activity helper function. Logging can be re-enabled using enableLogging().\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/disabling-logging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()->disableLogging();\n```\n\n----------------------------------------\n\nTITLE: Customizing Logged Properties in Laravel ActivityLog\nDESCRIPTION: This example shows how to customize which properties of a model are logged when using Laravel ActivityLog. It demonstrates logging only specific attributes and excluding others.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->performedOn($user)\n   ->withProperties(['key' => 'value'])\n   ->log('User name updated');\n\n$user->update(['name' => 'update']); // Logs 'updated' event with changes\n\n$user->activity()->update(['name' => 'update']); // Won't log anything\n```\n\n----------------------------------------\n\nTITLE: Manipulating Attribute Changes in Laravel ActivityLog\nDESCRIPTION: This snippet demonstrates how to manipulate attribute changes before they are logged using the ActivityLog package in Laravel. It uses the tapActivity() method to modify the properties of the activity.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/_index.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected static function bootActivityLog()\n{\n    parent::bootActivityLog();\n\n    static::tapActivity(function (Activity $activity, string $eventName) {\n        $activity->properties = $activity->properties->merge([\n            'modified_attributes' => array_merge(\n                $activity->properties['attributes'] ?? [],\n                $activity->properties['old'] ?? []\n            ),\n        ]);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Logging to Default Activity Log in Laravel\nDESCRIPTION: Demonstrates basic activity logging using the default log name. Shows how to create a log entry and retrieve the log name from the last activity.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/using-multiple-logs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()->log('hi');\n\n$lastActivity = Spatie\\Activitylog\\Models\\Activity::all()->last();\n\n$lastActivity->log_name; //returns 'default';\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Changes in Activity Log\nDESCRIPTION: Example showing the structure of the changes array returned by $activity->changes. It contains both the old values and the current attributes after the change.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[\n   'old' => [\n        'name' => 'original name',\n        'text' => 'Lorum',\n    ],\n    'attributes' => [\n        'name' => 'updated name',\n        'text' => 'Lorum',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Default LogOptions Configuration Properties\nDESCRIPTION: Lists all default configuration properties available in LogOptions class for customizing activity logging behavior.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-options.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic ?string $logName = null;\n\npublic bool $submitEmptyLogs = true;\n\npublic bool $logFillable = false;\n\npublic bool $logOnlyDirty = false;\n\npublic bool $logUnguarded = false;\n\npublic array $logAttributes = [];\n\npublic array $logExceptAttributes = [];\n\npublic array $dontLogIfAttributesChangedOnly = [];\n\npublic array $attributeRawValues = [];\n\npublic ?Closure $descriptionForEvent = null;\n```\n\n----------------------------------------\n\nTITLE: Running Code Without Activity Logging in Laravel PHP\nDESCRIPTION: Demonstrates how to execute a specific code block without generating any activity logs using the withoutLogs() method. This prevents both model events and explicit logging calls from being recorded.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/disabling-logging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nactivity()->withoutLogs(function () {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Activity Logging after Disabling\nDESCRIPTION: This snippet demonstrates how to re-enable activity logging after it has been disabled using the enableLogging() method. This allows for selective logging of model updates.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$newsItem = NewsItem::create([\n   'name' => 'original name',\n   'text' => 'Lorum'\n]);\n\n// Updating with logging disabled\n$newsItem->disableLogging();\n\n$newsItem->update(['name' => 'The new name is not logged']);\n\n// Updating with logging enabled\n$newsItem->enableLogging();\n\n$newsItem->update(['name' => 'The new name is logged']);\n```\n\n----------------------------------------\n\nTITLE: Starting and Ending a Batch in Laravel ActivityLog\nDESCRIPTION: Demonstrates how to start a batch, perform multiple activities, and end the batch using LogBatch facade. This allows grouping multiple activities under a single batch UUID.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Activitylog\\Facades\\LogBatch;\nuse Spatie\\Activitylog\\Models\\Activity;\n\nLogBatch::startBatch();\n$author = Author::create(['name' => 'Philip K. Dick']);\n$book = Book::create(['name' => 'A Scanner Brightly', 'author_id' => $author->id]);\n$book->update(['name' => 'A Scanner Darkly']);\n$author->delete();\nLogBatch::endBatch();\n```\n\n----------------------------------------\n\nTITLE: Running Activity Log Cleanup Command in Laravel\nDESCRIPTION: Executes the artisan command to clean up old activity log records based on the configured retention period.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/cleaning-up-the-log.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan activitylog:clean\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Laravel Activity Logging\nDESCRIPTION: This example demonstrates how to use placeholders in activity logging to dynamically insert values from the subject, causer, and properties. The placeholders (:subject.name, :causer.name, :properties.laravel) are replaced with the actual values when the log is retrieved.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/using-placeholders.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n    ->performedOn($article)\n    ->causedBy($user)\n    ->withProperties(['laravel' => 'awesome'])\n    ->log('The subject name is :subject.name, the causer name is :causer.name and Laravel is :properties.laravel');\n\n$lastActivity = Activity::all()->last();\n$lastActivity->description; //returns 'The subject name is article name, the causer name is user name and Laravel is awesome';\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Activity Log Package via Composer\nDESCRIPTION: Command to install the spatie/laravel-activitylog package using Composer package manager.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-activitylog\n```\n\n----------------------------------------\n\nTITLE: Disabling Activity Logging at Runtime\nDESCRIPTION: This example shows how to disable activity logging for a specific model instance at runtime using the disableLogging() method. Updates to the model will not be logged until logging is re-enabled.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$newsItem = NewsItem::create([\n   'name' => 'original name',\n   'text' => 'Lorum'\n]);\n\n// Updating with logging disabled\n$newsItem->disableLogging();\n\n$newsItem->update(['name' => 'The new name is not logged']);\n```\n\n----------------------------------------\n\nTITLE: Setting Model-Specific Log Name\nDESCRIPTION: Demonstrates how to configure a custom log name for a specific model by implementing the getActivitylogOptions() method.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/using-multiple-logs.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getActivitylogOptions(): LogOptions\n{\n    return LogOptions::defaults()\n        ->useLogName('custom_log_name_for_this_model');\n}\n```\n\n----------------------------------------\n\nTITLE: Handling LogBatch in a Job Class in Laravel\nDESCRIPTION: Demonstrates how to start a batch and set a batch UUID within a job class. This is part of the process for maintaining a batch across multiple jobs.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SomeJob\n{\n    public function handle(string $value, ?string $batchUuid = null)\n    {\n        LogBatch::startBatch();\n        if($batchUuid) LogBatch::setBatch($batchUuid);\n\n        // other code ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Logging Model Instance\nDESCRIPTION: Demonstrates how model creation is logged and what data is captured in the activity log. Shows the structure of the logged data including description and changes.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newsItem = NewsItem::create([\n   'name' => 'original name',\n   'text' => 'Lorum'\n]);\n\n//creating the newsItem will cause an activity being logged\n$activity = Activity::all()->last();\n\n$activity->description; //returns 'created'\n$activity->subject; //returns the instance of NewsItem that was created\n$activity->changes; //returns ['attributes' => ['name' => 'original name', 'text' => 'Lorum']];\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Event for Activity\nDESCRIPTION: Shows how to set a custom event name for activity logs using the event() method.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n    ->causedBy($userModel)\n    ->performedOn($someContentModel)\n    ->event('verified')\n    ->log('The user has verified the content model.');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Activity for a Model in Laravel\nDESCRIPTION: This snippet demonstrates how to retrieve the latest activity for a specific model using the ActivityLog package in Laravel. It uses the latestLoggedActivity() method on the model.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$lastLoggedActivity = $userModel->latestLoggedActivity;\n```\n\n----------------------------------------\n\nTITLE: Resolve Method in CauserResolver\nDESCRIPTION: The resolve method signature which handles resolving the causer based on various arguments. It checks for override closure first, then validates the result causer, and finally returns the override causer or delegates to getCauser().\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/causer-resolver.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Resolve causer based different arguments first we'll check for override closure\n * Then check for the result causer if it valid. In other case will return the\n * override causer defined by the user or delegate to the getCauser() method\n *\n * @param Model|int|null $subject\n * @return null|Model\n * @throws InvalidArgumentException\n * @throws CouldNotLogActivity\n */\npublic function resolve(Model | int | string | null $subject = null) : ?Model;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Causer in Laravel Activity Log\nDESCRIPTION: Example of using the setCauser method to define a global causer for all activity logs. This sets a specific User model as the causer for subsequent activity log entries.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/causer-resolver.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nCauserResolver::setCauser(User::find(1));\n\n$log = activity()->log('log look mom, I did something...');\n$log->causer; // User Model with id of 1\n```\n\n----------------------------------------\n\nTITLE: Using LogOptions to log uncasted attributes in Laravel Activity Log\nDESCRIPTION: Example of using the LogOptions::useAttributeRawValues() method added in version 4.3.0 to log uncasted attributes instead of their casted values.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Spatie\\Activitylog\\LogOptions::useAttributeRawValues()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Activity Logger in Laravel\nDESCRIPTION: This snippet illustrates how to use a custom activity logger in Laravel ActivityLog. It shows how to create an instance of the activity logger and use it to log activity with various parameters.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Activitylog\\ActivityLogger;\n\n$logger = app(ActivityLogger::class);\n\n$logger\n    ->performedOn($anEloquentModel)\n    ->causedBy($user)\n    ->withProperties(['customProperty' => 'customValue'])\n    ->log('The subject name is');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activities by Log Name\nDESCRIPTION: Shows how to query and retrieve activities using where clause to filter by log name.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/using-multiple-logs.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nActivity::where('log_name' , 'other-log')->get(); //returns all activity from the 'other-log'\n```\n\n----------------------------------------\n\nTITLE: Preventing Empty Logs in Laravel Activity Logging\nDESCRIPTION: This snippet demonstrates how to prevent the activity logger from storing empty logs using dontSubmitEmptyLogs(). This is useful when you only want to log a specific attribute but only other attributes have changed.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Spatie\\Activitylog\\Traits\\LogsActivity;\nuse Spatie\\Activitylog\\LogOptions;\n\nclass NewsItem extends Model\n{\n    use LogsActivity;\n\n    protected $fillable = ['name', 'text'];\n\n   public function getActivitylogOptions(): LogOptions\n    {\n        return LogOptions::defaults()\n        ->logOnly(['text'])\n        ->logOnlyDirty()\n        ->dontSubmitEmptyLogs();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Set Batch UUID Method\nDESCRIPTION: Method to set a specific UUID for the current batch, useful for maintaining batch consistency across multiple requests or queue jobs.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-batch.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Set uuid for the current open batch, it can be used to keep the batch\n * open throughout multiple requests or in a batch queue job.\n */\npublic function setBatch(string $uuid): void;\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Actions with CausesActivity Trait\nDESCRIPTION: This snippet demonstrates how to retrieve all activities caused by the currently authenticated user. The CausesActivity trait provides an actions relationship that returns all activities caused by the model.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\\Auth::user()->actions;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Created Date for Activity\nDESCRIPTION: Demonstrates how to set a custom created_at timestamp for activity logs.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/logging-activity.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n    ->causedBy($userModel)\n    ->performedOn($someContentModel)\n    ->createdAt(now()->subDays(10))\n    ->log('created');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activities by Batch UUID in Laravel ActivityLog\nDESCRIPTION: Shows how to save the batch UUID and later retrieve all activities related to that batch using the Activity model's forBatch scope.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ... started batch and other code\n$batchUuid = LogBatch::getUuid(); // save batch id to retrieve activities later\nLogBatch::endBatch();\n\n$batchActivities = Activity::forBatch($batchUuid)->get();\n```\n\n----------------------------------------\n\nTITLE: Cleaning Specific Log Channel in Laravel\nDESCRIPTION: Runs the cleanup command for a specific log channel by providing the channel name as an argument.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/cleaning-up-the-log.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan activitylog:clean my_log_channel\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Logged Activity for a Model in Laravel\nDESCRIPTION: This code snippet shows how to retrieve all logged activity for a specific model using the ActivityLog package in Laravel. It uses the loggedActivity() relationship on the model.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/_index.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$activities = $userModel->loggedActivity;\n```\n\n----------------------------------------\n\nTITLE: End Batch Method Definition\nDESCRIPTION: Method signature for ending the current activity batch.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-batch.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function endBatch(): void;\n```\n\n----------------------------------------\n\nTITLE: Execute Within Batch Method\nDESCRIPTION: Method to execute a callback within a new batch context, automatically handling batch start and end.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-batch.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Start new batch, execute the callback passed in uuid, end the batch.\n */\n public function withinBatch(Closure $callback): mixed;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Batch is Open in Laravel ActivityLog\nDESCRIPTION: Demonstrates how to check if a batch is currently open using the LogBatch facade. This is useful in scenarios like middleware or queue jobs to avoid opening nested batches.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/batch-logs.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// in middleware\nLogBatch::startBatch();\n\n//... Other middlewares\n\nif(LogBatch::isOpen()) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Pipe for Laravel Activity Log\nDESCRIPTION: This code snippet shows the basic structure for creating a custom pipe that implements the LoggablePipe interface. It includes the required handle method to modify the EventLogBag.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/manipulate-changes-array.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass YourPipe implements LoggablePipe\n{\n    public function handle(EventLogBag $event, Closure $next): EventLogBag\n    {\n        // your changes to the $event\n\n        return $next($event);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LogOptions Method: logAll\nDESCRIPTION: Method to enable logging of all model attributes, equivalent to logOnly(['*']).\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-options.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Log all attributes on the model\n */\npublic function logAll(): LogOption;\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Pipe to Laravel Model\nDESCRIPTION: This snippet demonstrates how to apply a custom pipe to a Laravel model. It shows both ad-hoc application and automatic application during model boot.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/manipulate-changes-array.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nYourModel::addLogChange(new YourPipe);\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected static function booted(): void\n{\n    static::addLogChange(new YourPipe);\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Activity on a Specific Log Name in Laravel\nDESCRIPTION: This code snippet shows how to log activity on a specific log name using the ActivityLog package in Laravel. It demonstrates setting a custom log name for the activity.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/_index.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nactivity('custom-log-name')\n   ->performedOn($anEloquentModel)\n   ->causedBy($user)\n   ->log('Look, I logged something');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Pipe to Remove Keys from Log Changes in PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom pipe that removes specified keys from the changes array in Laravel's Activity Log. It implements the LoggablePipe interface and uses the handle method to modify the EventLogBag.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/manipulate-changes-array.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// RemoveKeyFromLogChangesPipe.php\n\nuse Spatie\\Activitylog\\Contracts\\LoggablePipe;\nuse Spatie\\Activitylog\\EventLogBag;\n\nclass RemoveKeyFromLogChangesPipe implements LoggablePipe\n{\n    public function __construct(protected string $field){}\n\n    public function handle(EventLogBag $event, Closure $next): EventLogBag\n    {\n        Arr::forget($event->changes, [\"attributes.{$this->field}\", \"old.{$this->field}\"]);\n\n        return $next($event);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting custom batch UUID in Laravel Activity Log\nDESCRIPTION: Example of using the LogBatch::setBatch() method added in version 4.1.0 to maintain batch identifiers across requests or multiple jobs.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Spatie\\Activitylog\\LogBatch::setBatch(string $uuid)\n```\n\n----------------------------------------\n\nTITLE: Logging Model Deletion\nDESCRIPTION: Example of how model deletion is logged, showing the final state of the model before deletion.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$newsItem->delete();\n\n//deleting the newsItem will cause an activity being logged\n$activity = Activity::all()->last();\n\n$activity->description; //returns 'deleted'\n$activity->changes; //returns ['attributes' => ['name' => 'updated name', 'text' => 'Lorum']];\n```\n\n----------------------------------------\n\nTITLE: Publishing Activity Log Migrations in Laravel\nDESCRIPTION: Artisan command to publish the migration files needed for the activity log table.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Activitylog\\ActivitylogServiceProvider\" --tag=\"activitylog-migrations\"\n```\n\n----------------------------------------\n\nTITLE: ResolveUsing Method in CauserResolver\nDESCRIPTION: The resolveUsing method which allows overriding the causer resolver with a custom callback function. This provides flexibility in determining how the causer is resolved.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/causer-resolver.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Override the resolver using callback\n */\npublic function resolveUsing(Closure $callback): static;\n```\n\n----------------------------------------\n\nTITLE: Customizing Retention Period for Activity Log Cleanup\nDESCRIPTION: Overrides the default retention period by specifying the number of days to keep logs using the --days option.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/cleaning-up-the-log.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan activitylog:clean --days=7\n```\n\n----------------------------------------\n\nTITLE: Scheduling Activity Log Cleanup in Laravel Kernel\nDESCRIPTION: Configures the Laravel scheduler to run the activity log cleanup command daily, automating the maintenance process.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/cleaning-up-the-log.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//app/Console/Kernel.php\n\nprotected function schedule(Schedule $schedule)\n{\n   $schedule->command('activitylog:clean')->daily();\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing MySQL Activity Log Table After Cleanup\nDESCRIPTION: Executes MySQL commands to optimize or analyze the activity_log table, rebuilding indexes and reclaiming space after a cleanup operation.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/basic-usage/cleaning-up-the-log.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nOPTIMIZE TABLE activity_log;\n```\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE TABLE activity_log;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Database Connection for ActivityLog in Laravel\nDESCRIPTION: This code snippet shows how to use a custom database connection for activity logging in Laravel. It demonstrates setting the database connection in the activity() helper function.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/_index.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nactivity()\n   ->useLog('admin')\n   ->withProperties(['customProperty' => 'customValue'])\n   ->log('Look, I logged something');\n```\n\n----------------------------------------\n\nTITLE: Defining EventBag Properties in PHP for Laravel ActivityLog\nDESCRIPTION: This code snippet defines the properties of the EventBag class used in the Laravel ActivityLog package. It includes the event name, the model in question, changes array, and current applied options.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/event-bag.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Event Name\npublic string $event,\n\n// Model in question\npublic Model $model,\n\n// changes array\npublic array $changes,\n\n// current applied options\npublic ?LogOptions $options = null\n```\n\n----------------------------------------\n\nTITLE: LogOptions Method: logUnguarded\nDESCRIPTION: Method to enable logging of all unguarded model attributes, respecting wildcards and other log methods.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-options.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * log changes to all the $guarded attributes of the model\n */\npublic function logUnguarded(): LogOption;\n```\n\n----------------------------------------\n\nTITLE: Temporarily disabling activity logging\nDESCRIPTION: Example of using the ActivityLogger::withoutLogs() method added in version 3.13.0 to temporarily disable activity logging for a specific operation.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Spatie\\Activitylog\\ActivityLogger::withoutLogs()\n```\n\n----------------------------------------\n\nTITLE: SetCauser Method in CauserResolver\nDESCRIPTION: The setCauser method signature which allows overriding the default causer with a specific model instance. This takes priority over the resolveUsing method when determining the causer.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/causer-resolver.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Override default causer\n */\npublic function setCauser(?Model $causer): static;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Old Activity Logs in Laravel\nDESCRIPTION: This snippet demonstrates how to clean up old activity logs using the ActivityLog package. It shows the command to delete records older than the specified number of days.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/_index.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp artisan activitylog:clean\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Activity Log via Composer\nDESCRIPTION: Command to install the Laravel Activity Log package using Composer package manager.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-activitylog\n```\n\n----------------------------------------\n\nTITLE: Tapping into activity logging process\nDESCRIPTION: Examples of using the tap methods introduced in version 3.2.0 to modify an activity instance before it's saved.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nActivityLogger::tap()\nLogsActivity::tapActivity()\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for Activity Log in Laravel\nDESCRIPTION: Artisan command to execute the migrations and create the activity_log table in the database.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Logs from Database\nDESCRIPTION: This snippet shows how to retrieve all activity logs from the database using the Activity model provided by the package.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nActivity::all();\n```\n\n----------------------------------------\n\nTITLE: Publishing Activity Log Configuration in Laravel\nDESCRIPTION: Artisan command to publish the configuration file for customizing the activity log behavior.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Activitylog\\ActivitylogServiceProvider\" --tag=\"activitylog-config\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Model Event Logging Example\nDESCRIPTION: This snippet demonstrates how the package automatically logs model changes when configured for event logging. It shows updating a model and accessing the resulting activity log.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$newsItem->name = 'updated name';\n$newsItem->save();\n\n//updating the newsItem will cause the logging of an activity\n$activity = Activity::all()->last();\n\n$activity->description; //returns 'updated'\n$activity->subject; //returns the instance of NewsItem that was saved\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for Activity Log\nDESCRIPTION: Artisan command to execute the migrations and create the activity_log table in the database.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Header\nDESCRIPTION: YAML frontmatter defining the documentation page metadata including title, slogan, GitHub repository URL and branch information.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: v4\nslogan: Log the activities of your users\ngithubUrl: https://github.com/spatie/laravel-activitylog\nbranch: main\n---\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration File for Activity Log\nDESCRIPTION: Artisan command to publish the configuration file for customizing the behavior of the Activity Log package.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Activitylog\\ActivitylogServiceProvider\" --tag=\"activitylog-config\"\n```\n\n----------------------------------------\n\nTITLE: Setting custom event in Activity Logger\nDESCRIPTION: Example of using the ActivityLogger::event() method added in version 3.14.0 to set a custom event type for the activity log entry.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Spatie\\Activitylog\\ActivityLogger::event()\n```\n\n----------------------------------------\n\nTITLE: Setting created_at timestamp manually\nDESCRIPTION: Example showing how to manually set the created_at date for an activity log entry, a feature added in version 3.10.0.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Example of manually setting created_at date for activity log\n```\n\n----------------------------------------\n\nTITLE: LogOptions Method: defaults\nDESCRIPTION: Static method to initialize LogOptions with default configuration values.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-options.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Start configuring model with the default options.\n */\npublic static function defaults(): LogOption;\n```\n\n----------------------------------------\n\nTITLE: Start Batch Method Definition\nDESCRIPTION: Method signature for starting a new activity batch.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-batch.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function startBatch(): void;\n```\n\n----------------------------------------\n\nTITLE: Check Batch Status Method\nDESCRIPTION: Method to check if there's currently an open batch of activities.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/api/log-batch.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Check if there's an open batch\n */\npublic function isOpen(): bool;\n```\n\n----------------------------------------\n\nTITLE: Publishing Migration Files for Activity Log\nDESCRIPTION: Artisan command to publish the migration files needed to create the activity_log table in the database.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Activitylog\\ActivitylogServiceProvider\" --tag=\"activitylog-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Activity Log Migrations in Laravel\nDESCRIPTION: These commands publish the migration files for the Activity Log package and then run the migrations to create the necessary database tables.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/UPGRADING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Activitylog\\ActivitylogServiceProvider\" --tag=\"activitylog-migrations\"\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Activity Log Package\nDESCRIPTION: Command to run the test suite for the Laravel Activity Log package during development or contribution.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Activity Log v4 with Composer\nDESCRIPTION: This command updates the spatie/laravel-activitylog package to version 4.0.0 or higher using Composer.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/UPGRADING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-activitylog \"^4.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Updating and Logging Model Changes\nDESCRIPTION: Shows how model updates are logged and the structure of the change log including both new and old values.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/logging-model-events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$newsItem->name = 'updated name';\n$newsItem->save();\n\n//updating the newsItem will cause an activity being logged\n$activity = Activity::all()->last();\n\n$activity->description; //returns 'updated'\n$activity->subject; //returns the instance of NewsItem that was created\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Log Name for Activities\nDESCRIPTION: Shows how to log activities to a custom-named log instead of the default log by specifying the log name in the activity() function.\nSOURCE: https://github.com/spatie/laravel-activitylog/blob/main/docs/advanced-usage/using-multiple-logs.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nactivity('other-log')->log(\"hi\");\n\nActivity::all()->last()->log_name; //returns 'other-log';\n```"
  }
]