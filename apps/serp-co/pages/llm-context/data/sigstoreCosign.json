[
  {
    "owner": "sigstore",
    "repo": "cosign",
    "content": "TITLE: Cosign Generate-Key-Pair Examples\nDESCRIPTION: Examples demonstrating how to generate key-pairs in various environments including local storage, cloud key management services (Azure, AWS, GCP), Hashicorp Vault, Kubernetes, GitHub, and GitLab.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate-key-pair.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign generate-key-pair [--kms KMSPATH]\n\n  # generate key-pair and write to cosign.key and cosign.pub files\n  cosign generate-key-pair\n\n  # generate key-pair and write to custom named my-name.key and my-name.pub files\n  cosign generate-key-pair --output-key-prefix my-name\n\n  # generate a key-pair in Azure Key Vault\n  cosign generate-key-pair --kms azurekms://[VAULT_NAME][VAULT_URI]/[KEY]\n\n  # generate a key-pair in AWS KMS\n  cosign generate-key-pair --kms awskms://[ENDPOINT]/[ID/ALIAS/ARN]\n\n  # generate a key-pair in Google Cloud KMS\n  cosign generate-key-pair --kms gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY]\n\n  # generate a key-pair in Hashicorp Vault\n  cosign generate-key-pair --kms hashivault://[KEY]\n\n  # generate a key-pair in Kubernetes Secret\n  cosign generate-key-pair k8s://[NAMESPACE]/[NAME]\n\n  # generate a key-pair in GitHub\n  cosign generate-key-pair github://[OWNER]/[PROJECT_NAME]\n\n  # generate a key-pair in GitLab with project name\n  cosign generate-key-pair gitlab://[OWNER]/[PROJECT_NAME]\n\n  # generate a key-pair in GitLab with project id\n  cosign generate-key-pair gitlab://[PROJECT_ID]\n\nCAVEATS:\n  This command interactively prompts for a password. You can use\n  the COSIGN_PASSWORD environment variable to provide one.\n```\n\n----------------------------------------\n\nTITLE: Verifying a Container Image with Public Key in Cosign\nDESCRIPTION: This snippet demonstrates how to verify a container image signature using a public key. It checks if at least one Cosign signature matches the provided public key and outputs the signature payload.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign verify --key cosign.pub $IMAGE_URI:1h\nThe following checks were performed on these signatures:\n  - The cosign claims were validated\n  - The signatures were verified against the specified public key\n{\"Critical\":{\"Identity\":{\"docker-reference\":\"\"},\"Image\":{\"Docker-manifest-digest\":\"sha256:87ef60f558bad79beea6425a3b28989f01dd417164150ab3baab98dcbf04def8\"},\"Type\":\"cosign container image signature\"},\"Optional\":null}\n```\n\n----------------------------------------\n\nTITLE: Using the Cosign Generate-Key-Pair Command\nDESCRIPTION: The basic command syntax for generating key-pairs with cosign. This creates a key-pair for signing container images and artifacts.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate-key-pair.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign generate-key-pair [flags]\n```\n\n----------------------------------------\n\nTITLE: Verifying a Container Image with Certificate Identity in Cosign\nDESCRIPTION: This snippet shows how to verify a container image signature by specifying the expected certificate identity and OIDC issuer. These flags are required for validating keyless signatures.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncosign verify $IMAGE --certificate-identity=$IDENTITY --certificate-oidc-issuer=$OIDC_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Signing a Container Image with Keyless Signing in Cosign\nDESCRIPTION: This snippet shows the process of signing a container image using Cosign's default keyless signing method. It demonstrates the interactive flow including authentication and transparency log entry creation.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n cosign sign $IMAGE\n\nGenerating ephemeral keys...\nRetrieving signed certificate...\n\n\tNote that there may be personally identifiable information associated with this signed artifact.\n\tThis may include the email address associated with the account with which you authenticate.\n\tThis information will be used for signing this artifact and will be stored in public transparency logs and cannot be removed later.\n\nBy typing 'y', you attest that you grant (or have permission to grant) and agree to have this information stored permanently in transparency logs.\nAre you sure you would like to continue? [y/N] y\nYour browser will now be opened to:\nhttps://oauth2.sigstore.dev/auth/auth?access_type=online&client_id=sigstore&code_challenge=OrXitVKUZm2lEWHVt1oQWR4HZvn0rSlKhLcltglYxCY&code_challenge_method=S256&nonce=2KvOWeTFxYfxyzHtssvlIXmY6Jk&redirect_uri=http%3A%2F%2Flocalhost%3A57102%2Fauth%2Fcallback&response_type=code&scope=openid+email&state=2KvOWfbQJ1caqScgjwibzK2qJmb\nSuccessfully verified SCT...\ntlog entry created with index: 12086900\nPushing signature to: $IMAGE\n```\n\n----------------------------------------\n\nTITLE: Creating and Verifying In-Toto Attestations with Cosign\nDESCRIPTION: This snippet demonstrates how to create and sign an in-toto attestation using Cosign, and then verify it.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign attest --predicate <file> --key cosign.key $IMAGE_URI_DIGEST\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign verify-attestation --key cosign.pub $IMAGE_URI\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Container Images with Cosign\nDESCRIPTION: This snippet demonstrates how to sign a container image using Cosign and a private key, then verify the signature. The signature includes an annotation 'sig=original' and the verification output is formatted using jq.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign sign --key cosign.key -a sig=original $IMAGE_URI_DIGEST\nEnter password for private key:\nPushing signature to: dlorenc/demo:sha256-97fc222cee7991b5b061d4d4afdb5f3428fcb0c9054e1690313786befa1e4e36.sig\n$ cosign verify --key cosign.pub dlorenc/demo | jq .\n{\n  \"Critical\": {\n    \"Identity\": {\n      \"docker-reference\": \"\"\n    },\n    \"Image\": {\n      \"Docker-manifest-digest\": \"97fc222cee7991b5b061d4d4afdb5f3428fcb0c9054e1690313786befa1e4e36\"\n    },\n    \"Type\": \"cosign container image signature\"\n  },\n  \"Optional\": {\n    \"sig\": \"original\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Artifact with Cosign\nDESCRIPTION: Example of verifying a signed artifact using Cosign with a public key.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign verify --key cosign.pub  us-central1-docker.pkg.dev/dlorenc-vmtest2/test/artifact@sha256:551e6cce7ed2e5c914998f931b277bc879e675b74843e6f29bc17f3b5f692bef\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - The claims were present in the transparency log\n  - The signatures were integrated into the transparency log when the certificate was valid\n  - The signatures were verified against the specified public key\n  - The code-signing certificate was verified using trusted certificate authority certificates\n\n{\"Critical\":{\"Identity\":{\"docker-reference\":\"\"},\"Image\":{\"Docker-manifest-digest\":\"sha256:551e6cce7ed2e5c914998f931b277bc879e675b74843e6f29bc17f3b5f692bef\"},\"Type\":\"cosign container image signature\"},\"Optional\":null}\n```\n\n----------------------------------------\n\nTITLE: Examples of cosign sign Command Usage\nDESCRIPTION: Comprehensive examples showing different ways to sign container images using cosign with various key sources including local keys, environment variables, cloud KMS providers, and Kubernetes secrets.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  cosign sign --key <key path>|<kms uri> [--payload <path>] [-a key=value] [--upload=true|false] [-f] [-r] <image digest uri>\n\n  # sign a container image with the Sigstore OIDC flow\n  cosign sign <IMAGE DIGEST>\n\n  # sign a container image with a local key pair file\n  cosign sign --key cosign.key <IMAGE DIGEST>\n\n  # sign a multi-arch container image AND all referenced, discrete images\n  cosign sign --key cosign.key --recursive <MULTI-ARCH IMAGE DIGEST>\n\n  # sign a container image and add annotations\n  cosign sign --key cosign.key -a key1=value1 -a key2=value2 <IMAGE DIGEST>\n\n  # sign a container image with a key stored in an environment variable\n  cosign sign --key env://[ENV_VAR] <IMAGE DIGEST>\n\n  # sign a container image with a key pair stored in Azure Key Vault\n  cosign sign --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <IMAGE DIGEST>\n\n  # sign a container image with a key pair stored in AWS KMS\n  cosign sign --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <IMAGE DIGEST>\n\n  # sign a container image with a key pair stored in Google Cloud KMS\n  cosign sign --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY]/versions/[VERSION] <IMAGE DIGEST>\n\n  # sign a container image with a key pair stored in Hashicorp Vault\n  cosign sign --key hashivault://[KEY] <IMAGE DIGEST>\n\n  # sign a container image with a key pair stored in a Kubernetes secret\n  cosign sign --key k8s://[NAMESPACE]/[KEY] <IMAGE DIGEST>\n\n  # sign a container image with a key, attaching a certificate and certificate chain\n  cosign sign --key cosign.key --cert cosign.crt --cert-chain chain.crt <IMAGE DIGEST>\n\n  # sign a container in a registry which does not fully support OCI media types\n  COSIGN_DOCKER_MEDIA_TYPES=1 cosign sign --key cosign.key legacy-registry.example.com/my/image@<DIGEST>\n\n  # sign a container image and upload to the transparency log\n  cosign sign --key cosign.key <IMAGE DIGEST>\n\n  # sign a container image and skip uploading to the transparency log\n  cosign sign --key cosign.key --tlog-upload=false <IMAGE DIGEST>\n\n  # sign a container image by manually setting the container image identity\n  cosign sign --sign-container-identity <NEW IMAGE DIGEST> <IMAGE DIGEST>\n\n  # sign a container image and honor the creation timestamp of the signature\n  cosign sign --key cosign.key --record-creation-timestamp <IMAGE DIGEST>\n```\n\n----------------------------------------\n\nTITLE: Cosign Sign Command Options\nDESCRIPTION: This code block lists all available options for the 'cosign sign' command, including flags for registry settings, certificate handling, OIDC configuration, and signature output. Each option is accompanied by a brief description of its purpose.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n  -a, --annotations strings                                                                      extra key=value pairs to sign\n      --attachment string                                                                        DEPRECATED, related image attachment to sign (sbom), default none\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --certificate string                                                                       path to the X.509 certificate in PEM format to include in the OCI Signature\n      --certificate-chain string                                                                 path to a list of CA X.509 certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Included in the OCI Signature\n      --fulcio-auth-flow string                                                                  fulcio interactive oauth2 flow to use for certificate from fulcio. Defaults to determining the flow based on the runtime environment. (options) normal|device|token|client_credentials\n      --fulcio-url string                                                                        address of sigstore PKI server (default \"https://fulcio.sigstore.dev\")\n  -h, --help                                                                                     help for sign\n      --identity-token string                                                                    identity token to use for certificate from fulcio. the token or a path to a file containing the token is accepted.\n      --insecure-skip-verify                                                                     skip verifying fulcio published to the SCT (this should only be used for testing).\n      --issue-certificate                                                                        issue a code signing certificate from Fulcio, even if a key is provided\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --key string                                                                               path to the private key file, KMS URI or Kubernetes Secret\n      --oidc-client-id string                                                                    OIDC client ID for application (default \"sigstore\")\n      --oidc-client-secret-file string                                                           Path to file containing OIDC client secret for application\n      --oidc-disable-ambient-providers                                                           Disable ambient OIDC providers. When true, ambient credentials will not be read\n      --oidc-issuer string                                                                       OIDC provider to be used to issue ID token (default \"https://oauth2.sigstore.dev/auth\")\n      --oidc-provider string                                                                     Specify the provider to get the OIDC token from (Optional). If unset, all options will be tried. Options include: [spiffe, google, github-actions, filesystem, buildkite-agent]\n      --oidc-redirect-url string                                                                 OIDC redirect URL (Optional). The default oidc-redirect-url is 'http://localhost:0/auth/callback'.\n      --output-certificate string                                                                write the certificate to FILE\n      --output-payload string                                                                    write the signed payload to FILE\n      --output-signature string                                                                  write the signature to FILE\n      --payload string                                                                           path to a payload file to use rather than generating one\n      --record-creation-timestamp                                                                set the createdAt timestamp in the signature artifact to the time it was created; by default, cosign sets this to the zero value\n  -r, --recursive                                                                                if a multi-arch image is specified, additionally sign each discrete image\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-referrers-mode registryReferrersMode                                            mode for fetching references from the registry. allowed: legacy, oci-1-1\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-url string                                                                         address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --sign-container-identity string                                                           manually set the .critical.docker-reference field for the signed identity, which is useful when image proxies are being used where the pull reference should match the signature\n      --sk                                                                                       whether to use a hardware security key\n      --slot string                                                                              security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-client-cacert string                                                           path to the X.509 CA certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-cert string                                                             path to the X.509 certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-key string                                                              path to the X.509 private key file in PEM format to be used, together with the 'timestamp-client-cert' value, for the connection to the TSA Server\n      --timestamp-server-name string                                                             SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the TSA Server\n      --timestamp-server-url string                                                              url to the Timestamp RFC3161 server, default none. Must be the path to the API to request timestamp responses, e.g. https://freetsa.org/tsr\n      --tlog-upload                                                                              whether or not to upload to the tlog (default true)\n      --upload                                                                                   whether to upload the signature (default true)\n  -y, --yes                                                                                      skip confirmation prompts for non-destructive operations\n```\n\n----------------------------------------\n\nTITLE: Verifying a Container Image in Air-gapped Environment with Public Key in Cosign\nDESCRIPTION: This snippet shows how to verify a container image in an air-gapped environment using a public key. It uses the --offline and --local-image flags to perform verification without network access.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncosign verify --key cosign.pub --offline --local-image ./path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Verifying a Container Image in Air-gapped Environment with Certificate in Cosign\nDESCRIPTION: This snippet demonstrates how to verify a container image in an air-gapped environment using certificate identity and OIDC issuer. It uses the --offline and --local-image flags to perform verification without network access.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncosign verify --certificate-identity $CERT_IDENTITY --certificate-oidc-issuer $CERT_OIDC_ISSUER --offline --local-image ./path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Installing Cosign from Source Code with Go\nDESCRIPTION: This snippet shows how to clone the Cosign repository and install it using Go. It requires Go 1.22+ and builds the tool from source for development purposes.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/sigstore/cosign\n$ cd cosign\n$ go install ./cmd/cosign\n$ $(go env GOPATH)/bin/cosign\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Signature with Timestamp in Cosign\nDESCRIPTION: Demonstrates verifying a container signature with a timestamp certificate chain in Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify --timestamp-certificate-chain=<path-to-PEM-encodeded-chain> <other flags> <artifact>\n```\n\n----------------------------------------\n\nTITLE: Installing Cosign in a Dockerfile using Multi-stage Build\nDESCRIPTION: This snippet demonstrates how to install Cosign inside a Dockerfile using a multi-stage build approach. It copies the Cosign binary from an official image to a minimal static base image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nFROM ghcr.io/sigstore/cosign/cosign:v2.4.1 as cosign-bin\n\n# Source: https://github.com/chainguard-images/static\nFROM cgr.dev/chainguard/static:latest\nCOPY --from=cosign-bin /ko-app/cosign /usr/local/bin/cosign\nENTRYPOINT [ \"cosign\" ]\n```\n\n----------------------------------------\n\nTITLE: Cosign Verify Command Examples\nDESCRIPTION: Comprehensive examples showing different ways to use the cosign verify command, including verification with different key sources (local files, URLs, KMS), multiple images, annotation verification, and various certificate options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  # verify cosign claims and signing certificates on the image with the transparency log\n  cosign verify <IMAGE>\n\n  # verify multiple images\n  cosign verify <IMAGE_1> <IMAGE_2> ...\n\n  # additionally verify specified annotations\n  cosign verify -a key1=val1 -a key2=val2 <IMAGE>\n\n  # verify image with an on-disk public key\n  cosign verify --key cosign.pub <IMAGE>\n\n  # verify image with an on-disk public key, manually specifying the\n  # signature digest algorithm\n  cosign verify --key cosign.pub --signature-digest-algorithm sha512 <IMAGE>\n\n  # verify image with an on-disk signed image from 'cosign save'\n  cosign verify --key cosign.pub --local-image <PATH>\n\n  # verify image with local certificate and certificate chain\n  cosign verify --cert cosign.crt --cert-chain chain.crt <IMAGE>\n\n  # verify image with local certificate and certificate bundles of CA roots\n  # and (optionally) CA intermediates\n  cosign verify --cert cosign.crt --ca-roots ca-roots.pem --ca-intermediates ca-intermediates.pem <IMAGE>\n\n  # verify image using keyless verification with the given certificate\n  # chain and identity parameters, without Fulcio roots (for BYO PKI):\n  cosign verify --cert-chain chain.crt --certificate-oidc-issuer https://issuer.example.com --certificate-identity foo@example.com <IMAGE>\n\n  # verify image with public key provided by URL\n  cosign verify --key https://host.for/[FILE] <IMAGE>\n\n  # verify image with a key stored in an environment variable\n  cosign verify --key env://[ENV_VAR] <IMAGE>\n\n  # verify image with public key stored in Google Cloud KMS\n  cosign verify --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY] <IMAGE>\n\n  # verify image with public key stored in Hashicorp Vault\n  cosign verify --key hashivault://[KEY] <IMAGE>\n\n  # verify image with public key stored in a Kubernetes secret\n  cosign verify --key k8s://[NAMESPACE]/[KEY] <IMAGE>\n\n  # verify image with public key stored in GitLab with project name\n  cosign verify --key gitlab://[OWNER]/[PROJECT_NAME] <IMAGE>\n\n  # verify image with public key stored in GitLab with project id\n  cosign verify --key gitlab://[PROJECT_ID] <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Displaying Cosign Verify Command Options in Bash\nDESCRIPTION: This snippet shows the full list of command-line options available for the 'cosign verify' command. It includes options for registry connections, certificate handling, signature verification, and output formatting.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n  -a, --annotations strings                                                                      extra key=value pairs to sign\n      --attachment string                                                                        DEPRECATED, related image attachment to verify (sbom), default none\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --ca-intermediates string                                                                  path to a file of intermediate CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. The flag is optional and must be used together with --ca-roots, conflicts with --certificate-chain.\n      --ca-roots string                                                                          path to a bundle file of CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. Conflicts with --certificate-chain.\n      --certificate string                                                                       path to the public certificate. The certificate will be verified against the Fulcio roots if the --certificate-chain option is not passed.\n      --certificate-chain string                                                                 path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Conflicts with --ca-roots and --ca-intermediates.\n      --certificate-github-workflow-name string                                                  contains the workflow claim from the GitHub OIDC Identity token that contains the name of the executed workflow.\n      --certificate-github-workflow-ref string                                                   contains the ref claim from the GitHub OIDC Identity token that contains the git ref that the workflow run was based upon.\n      --certificate-github-workflow-repository string                                            contains the repository claim from the GitHub OIDC Identity token that contains the repository that the workflow run was based upon\n      --certificate-github-workflow-sha string                                                   contains the sha claim from the GitHub OIDC Identity token that contains the commit SHA that the workflow run was based upon.\n      --certificate-github-workflow-trigger string                                               contains the event_name claim from the GitHub OIDC Identity token that contains the name of the event that triggered the workflow run\n      --certificate-identity string                                                              The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-identity-regexp string                                                       A regular expression alternative to --certificate-identity. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-oidc-issuer string                                                           The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --certificate-oidc-issuer-regexp string                                                    A regular expression alternative to --certificate-oidc-issuer. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --check-claims                                                                             whether to check the claims found (default true)\n      --experimental-oci11                                                                       set to true to enable experimental OCI 1.1 behaviour\n  -h, --help                                                                                     help for verify\n      --insecure-ignore-sct                                                                      when set, verification will not check that a certificate contains an embedded SCT, a proof of inclusion in a certificate transparency log\n      --insecure-ignore-tlog                                                                     ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log. Artifacts cannot be publicly verified when not included in a log\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --key string                                                                               path to the public key file, KMS URI or Kubernetes Secret\n      --local-image                                                                              whether the specified image is a path to an image saved locally via 'cosign save'\n      --max-workers int                                                                          the amount of maximum workers for parallel executions (default 10)\n      --new-bundle-format                                                                        expect the signature/attestation to be packaged in a Sigstore bundle\n      --offline                                                                                  only allow offline verification\n  -o, --output string                                                                            output format for the signing image information (json|text) (default \"json\")\n      --payload string                                                                           payload path or remote URL\n      --private-infrastructure                                                                   skip transparency log verification when verifying artifacts in a privately deployed infrastructure\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-url string                                                                         address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --sct string                                                                               path to a detached Signed Certificate Timestamp, formatted as a RFC6962 AddChainResponse struct. If a certificate contains an SCT, verification will check both the detached and embedded SCTs.\n      --signature string                                                                         signature content or path or remote URL\n      --signature-digest-algorithm string                                                        digest algorithm to use when processing a signature (sha224|sha256|sha384|sha512) (default \"sha256\")\n      --sk                                                                                       whether to use a hardware security key\n      --slot string                                                                              security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-certificate-chain string                                                       path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamp\n      --trusted-root string                                                                      Path to a Sigstore TrustedRoot JSON file. Requires --new-bundle-format to be set.\n```\n\n----------------------------------------\n\nTITLE: Saving an Image Locally for Air-gapped Verification in Cosign\nDESCRIPTION: This snippet shows how to save an image locally for later verification in an air-gapped environment. It first initializes Cosign to get the latest TUF root and then saves the image to a local directory.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncosign initialize # This will pull in the latest TUF root\ncosign save $IMAGE_NAME --dir ./path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying eBPF Modules with Cosign\nDESCRIPTION: This snippet shows how to build an eBPF module using the bee tool, push it to a registry, sign it with Cosign, and then verify the signature.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ bee build ./examples/tcpconnect/tcpconnect.c localhost:5000/tcpconnect:test\n$ bee push localhost:5000/tcpconnect:test\n$ cosign sign  --key cosign.key localhost:5000/tcpconnect@sha256:7a91c50d922925f152fec96ed1d84b7bc6b2079c169d68826f6cf307f22d40e6\nEnter password for private key:\nPushing signature to: localhost:5000/tcpconnect\n$ cosign verify --key cosign.pub localhost:5000/tcpconnect:test\n\nVerification for localhost:5000/tcpconnect:test --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - The signatures were verified against the specified public key\n\n[{\"critical\":{\"identity\":{\"docker-reference\":\"localhost:5000/tcpconnect\"},\"image\":{\"docker-manifest-digest\":\"sha256:7a91c50d922925f152fec96ed1d84b7bc6b2079c169d68826f6cf307f22d40e6\"},\"type\":\"cosign container image signature\"},\"optional\":null}]\n```\n\n----------------------------------------\n\nTITLE: Verifying RFC3161 Timestamps in Cosign\nDESCRIPTION: This code snippet shows the usage of the '--use-signed-timestamps' option in the cosign command. It enables verification of RFC3161 timestamps.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --use-signed-timestamps                                                                    verify rfc3161 timestamps\n```\n\n----------------------------------------\n\nTITLE: Signing Tekton Bundles with Cosign\nDESCRIPTION: This snippet shows how to push a Tekton bundle using the tkn CLI and then sign it using Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ tkn bundle push us.gcr.io/dlorenc-vmtest2/pipeline:latest -f task-output-image.yaml\nCreating Tekton Bundle:\n        - Added TaskRun:  to image\n\nPushed Tekton Bundle to us.gcr.io/dlorenc-vmtest2/pipeline@sha256:124e1fdee94fe5c5f902bc94da2d6e2fea243934c74e76c2368acdc8d3ac7155\n$ cosign sign --key cosign.key us.gcr.io/dlorenc-vmtest2/pipeline@sha256:124e1fdee94fe5c5f902bc94da2d6e2fea243934c74e76c2368acdc8d3ac7155\nEnter password for private key:\ntlog entry created with index: 5086\nPushing signature to: us.gcr.io/dlorenc-vmtest2/demo:sha256-124e1fdee94fe5c5f902bc94da2d6e2fea243934c74e76c2368acdc8d3ac7155.sig\n```\n\n----------------------------------------\n\nTITLE: Cosign Verify-Blob Usage Examples in Bash\nDESCRIPTION: This snippet provides various examples of using the 'cosign verify-blob' command. It demonstrates verification using different key types, certificates, and key management systems, as well as handling signatures from different sources.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n cosign verify-blob (--key <key path>|<key url>|<kms uri>)|(--certificate <cert>) --signature <sig> <blob>\n\n  # Verify a simple blob and message\n  cosign verify-blob --key cosign.pub (--signature <sig path>|<sig url> msg)\n\n  # Verify a signature with certificate and CA certificate chain\n  cosign verify-blob --certificate cert.pem --certificate-chain certchain.pem --signature $sig <blob>\n\n  # Verify a signature with CA roots and optional intermediate certificates\n  cosign verify-blob --certificate cert.pem --ca-roots caroots.pem [--ca-intermediates caintermediates.pem] --signature $sig <blob>\n\n  # Verify a signature from an environment variable\n  cosign verify-blob --key cosign.pub --signature $sig msg\n\n  # verify a signature with public key provided by URL\n  cosign verify-blob --key https://host.for/<FILE> --signature $sig msg\n\n  # verify a signature with signature and key provided by URL\n  cosign verify-blob --key https://host.for/<FILE> --signature https://example.com/<SIG>\n\n  # Verify a signature against Azure Key Vault\n  cosign verify-blob --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] --signature $sig <blob>\n\n  # Verify a signature against AWS KMS\n  cosign verify-blob --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] --signature $sig <blob>\n\n  # Verify a signature against Google Cloud KMS\n  cosign verify-blob --key gcpkms://projects/[PROJECT ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY] --signature $sig <blob>\n\n  # Verify a signature against Hashicorp Vault\n  cosign verify-blob --key hashivault://[KEY] --signature $sig <blob>\n\n  # Verify a signature against GitLab with project name\n  cosign verify-blob --key gitlab://[OWNER]/[PROJECT_NAME]  --signature $sig <blob>\n\n  # Verify a signature against GitLab with project id\n  cosign verify-blob --key gitlab://[PROJECT_ID]  --signature $sig <blob>\n\n  # Verify a signature against a certificate\n  cosign verify-blob --certificate <cert> --signature $sig <blob>\n```\n\n----------------------------------------\n\nTITLE: Sigstore Bundle Manifest JSON Format\nDESCRIPTION: JSON response format for a Sigstore bundle manifest. It includes the manifest metadata, the empty configuration object, layer information for the bundle blob, and the subject reference to the target image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"schemaVersion\": 2,\n  \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.empty.v1+json\",\n    \"digest\": \"sha256:44136fa3...\",\n    \"size\": 2\n  },\n  \"layers\": [\n    {\n      \"digest\": \"sha256:cafed00d...\",\n      \"mediaType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"size\": 4971\n    }\n  ],\n  \"subject\": {\n    \"digest\": \"sha256:c00010ff...\",\n    \"mediaType\": \"application/vnd.oci.image.index.v1+json\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Signing Payload Format Example\nDESCRIPTION: Example of the Simple Signing payload format that includes critical identity and image information, along with optional user-specified claims. This is the standard payload format for Cosign container image signatures.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"critical\": {\n           \"identity\": {\n               \"docker-reference\": \"testing/manifest\"\n           },\n           \"image\": {\n               \"Docker-manifest-digest\": \"sha256:20be...fe55\"\n           },\n           \"type\": \"cosign container image signature\"\n    },\n    \"optional\": {\n           \"creator\": \"atomic\",\n           \"timestamp\": 1458239713\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign Verify-Blob Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'cosign verify-blob' command. It verifies a signature on a supplied blob using specified key references, which can be a key, certificate, or KMS reference.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify-blob [flags]\n```\n\n----------------------------------------\n\nTITLE: Uploading and Signing Blobs with Cosign\nDESCRIPTION: This snippet demonstrates how to upload an artifact as a blob using Cosign, generate a URI, and sign it. It also shows how to download and verify the blob.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"my first artifact\" > artifact\n$ BLOB_SUM=$(shasum -a 256 artifact | cut -d' ' -f 1) && echo \"$BLOB_SUM\"\nc69d72c98b55258f9026f984e4656f0e9fd3ef024ea3fac1d7e5c7e6249f1626\n$ BLOB_NAME=my-artifact-$(uuidgen | head -c 8 | tr 'A-Z' 'a-z')\n$ BLOB_URI=ttl.sh/$BLOB_NAME:1h\n\n$ BLOB_URI_DIGEST=$(cosign upload blob -f artifact $BLOB_URI) && echo \"$BLOB_URI_DIGEST\"\nUploading file from [artifact] to [ttl.sh/my-artifact-f42c22e0:5m] with media type [text/plain]\nFile [artifact] is available directly at [ttl.sh/v2/my-artifact-f42c22e0/blobs/sha256:c69d72c98b55258f9026f984e4656f0e9fd3ef024ea3fac1d7e5c7e6249f1626]\nUploaded image to:\nttl.sh/my-artifact-f42c22e0@sha256:790d47850411e902aabebc3a684eeb78fcae853d4dd6e1cc554d70db7f05f99f\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -L ttl.sh/v2/$BLOB_NAME/blobs/sha256:$BLOB_SUM > artifact-fetched\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cat artifact-fetched | shasum -a 256\nc69d72c98b55258f9026f984e4656f0e9fd3ef024ea3fac1d7e5c7e6249f1626  -\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign sign --key cosign.key $BLOB_URI_DIGEST\nEnter password for private key:\nPushing signature to: ttl.sh/my-artifact-f42c22e0\n```\n\n----------------------------------------\n\nTITLE: Using cosign sign Command Syntax\nDESCRIPTION: Basic syntax for the cosign sign command with available flags.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncosign sign [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Vulnerability Scan Attestation Structure in JSON\nDESCRIPTION: JSON schema definition for Cosign's vulnerability scan attestation format. The structure includes subject information, predicate type specification, and detailed scan results including invocation parameters, scanner details, and metadata timestamps.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/COSIGN_VULN_ATTESTATION_SPEC.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"subject\": [\n    {\n      ...\n    }\n  ],\n  \"predicateType\": \"https://cosign.sigstore.dev/attestation/vuln/v1\",\n  \"predicate\": {\n    \"invocation\": {\n      \"parameters\": [],\n      \"uri\": \"\",\n      \"event_id\": \"\",\n      \"builder.id\": \"\"\n    },\n    \"scanner\": {\n      \"uri\": \"\",\n      \"version\": \"\",\n      \"db\": {\n        \"uri\": \"\",\n        \"version\": \"\"\n      },\n      \"result\": {}\n    },\n    \"metadata\": {\n      \"scanStartedOn\": \"\",\n      \"scanFinishedOn\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Attest-Blob Command Options\nDESCRIPTION: Comprehensive list of command-line options available for the attest-blob command, including options for certificate handling, authentication, signature output, and integration with external services like Fulcio and Rekor.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest-blob.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --bundle string                     write everything required to verify the blob to a FILE\n      --certificate string                path to the X.509 certificate in PEM format to include in the OCI Signature\n      --certificate-chain string          path to a list of CA X.509 certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Included in the OCI Signature\n      --fulcio-auth-flow string           fulcio interactive oauth2 flow to use for certificate from fulcio. Defaults to determining the flow based on the runtime environment. (options) normal|device|token|client_credentials\n      --fulcio-url string                 address of sigstore PKI server (default \"https://fulcio.sigstore.dev\")\n      --hash string                       hash of blob in hexadecimal (base16). Used if you want to sign an artifact stored elsewhere and have the hash\n  -h, --help                              help for attest-blob\n      --identity-token string             identity token to use for certificate from fulcio. the token or a path to a file containing the token is accepted.\n      --insecure-skip-verify              skip verifying fulcio published to the SCT (this should only be used for testing).\n      --key string                        path to the private key file, KMS URI or Kubernetes Secret\n      --new-bundle-format                 output bundle in new format that contains all verification material\n      --oidc-client-id string             OIDC client ID for application (default \"sigstore\")\n      --oidc-client-secret-file string    Path to file containing OIDC client secret for application\n      --oidc-disable-ambient-providers    Disable ambient OIDC providers. When true, ambient credentials will not be read\n      --oidc-issuer string                OIDC provider to be used to issue ID token (default \"https://oauth2.sigstore.dev/auth\")\n      --oidc-provider string              Specify the provider to get the OIDC token from (Optional). If unset, all options will be tried. Options include: [spiffe, google, github-actions, filesystem, buildkite-agent]\n      --oidc-redirect-url string          OIDC redirect URL (Optional). The default oidc-redirect-url is 'http://localhost:0/auth/callback'.\n      --output-attestation string         write the attestation to FILE\n      --output-certificate string         write the certificate to FILE\n      --output-signature string           write the signature to FILE\n      --predicate string                  path to the predicate file.\n      --rekor-entry-type string           specifies the type to be used for a rekor entry upload (dsse|intoto) (default \"dsse\")\n      --rekor-url string                  address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --rfc3161-timestamp-bundle string   path to an RFC 3161 timestamp bundle FILE\n      --sk                                whether to use a hardware security key\n      --slot string                       security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-client-cacert string    path to the X.509 CA certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-cert string      path to the X.509 certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-key string       path to the X.509 private key file in PEM format to be used, together with the 'timestamp-client-cert' value, for the connection to the TSA Server\n      --timestamp-server-name string      SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the TSA Server\n      --timestamp-server-url string       url to the Timestamp RFC3161 server, default none. Must be the path to the API to request timestamp responses, e.g. https://freetsa.org/tsr\n      --tlog-upload                       whether or not to upload to the tlog (default true)\n      --type string                       specify a predicate type (slsaprovenance|slsaprovenance02|slsaprovenance1|link|spdx|spdxjson|cyclonedx|vuln|openvex|custom) or an URI (default \"custom\")\n  -y, --yes                               skip confirmation prompts for non-destructive operations\n```\n\n----------------------------------------\n\nTITLE: Cosign Attest Command Examples\nDESCRIPTION: Provides multiple examples of using the 'cosign attest' command with different key storage options, predicate files, and image types. Includes examples for local key pairs, cloud KMS services, and special cases like stdin input and legacy registries.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign attest --key <key path>|<kms uri> [--predicate <path>] [--a key=value] [--no-upload=true|false] [--record-creation-timestamp=true|false] [--f] [--r] <image uri>\n\n  # attach an attestation to a container image Google sign-in\n  cosign attest --timeout 90s --predicate <FILE> --type <TYPE> <IMAGE>\n\n  # attach an attestation to a container image with a local key pair file\n  cosign attest --predicate <FILE> --type <TYPE> --key cosign.key <IMAGE>\n\n  # attach an attestation to a container image with a key pair stored in Azure Key Vault\n  cosign attest --predicate <FILE> --type <TYPE> --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <IMAGE>\n\n  # attach an attestation to a container image with a key pair stored in AWS KMS\n  cosign attest --predicate <FILE> --type <TYPE> --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <IMAGE>\n\n  # attach an attestation to a container image with a key pair stored in Google Cloud KMS\n  cosign attest --predicate <FILE> --type <TYPE> --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY]/versions/[VERSION] <IMAGE>\n\n  # attach an attestation to a container image with a key pair stored in Hashicorp Vault\n  cosign attest --predicate <FILE> --type <TYPE> --key hashivault://[KEY] <IMAGE>\n\n  # attach an attestation to a container image with a local key pair file, including a certificate and certificate chain\n  cosign attest --predicate <FILE> --type <TYPE> --key cosign.key --cert cosign.crt --cert-chain chain.crt <IMAGE>\n\n  # attach an attestation to a container image which does not fully support OCI media types\n  COSIGN_DOCKER_MEDIA_TYPES=1 cosign attest --predicate <FILE> --type <TYPE> --key cosign.key legacy-registry.example.com/my/image\n\n  # supply attestation via stdin\n  echo <PAYLOAD> | cosign attest --predicate - <IMAGE>\n\n  # attach an attestation to a container image and honor the creation timestamp of the signature\n  cosign attest --predicate <FILE> --type <TYPE> --key cosign.key --record-creation-timestamp <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Cosign Verify-Blob Command Options in Bash\nDESCRIPTION: This snippet lists all available options for the 'cosign verify-blob' command. It includes options for specifying bundles, certificates, identity verification, OIDC issuers, and various other configuration settings for the verification process.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --bundle string                                   path to bundle FILE\n      --ca-intermediates string                         path to a file of intermediate CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. The flag is optional and must be used together with --ca-roots, conflicts with --certificate-chain.\n      --ca-roots string                                 path to a bundle file of CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. Conflicts with --certificate-chain.\n      --certificate string                              path to the public certificate. The certificate will be verified against the Fulcio roots if the --certificate-chain option is not passed.\n      --certificate-chain string                        path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Conflicts with --ca-roots and --ca-intermediates.\n      --certificate-github-workflow-name string         contains the workflow claim from the GitHub OIDC Identity token that contains the name of the executed workflow.\n      --certificate-github-workflow-ref string          contains the ref claim from the GitHub OIDC Identity token that contains the git ref that the workflow run was based upon.\n      --certificate-github-workflow-repository string   contains the repository claim from the GitHub OIDC Identity token that contains the repository that the workflow run was based upon\n      --certificate-github-workflow-sha string          contains the sha claim from the GitHub OIDC Identity token that contains the commit SHA that the workflow run was based upon.\n      --certificate-github-workflow-trigger string      contains the event_name claim from the GitHub OIDC Identity token that contains the name of the event that triggered the workflow run\n      --certificate-identity string                     The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-identity-regexp string              A regular expression alternative to --certificate-identity. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-oidc-issuer string                  The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --certificate-oidc-issuer-regexp string           A regular expression alternative to --certificate-oidc-issuer. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --experimental-oci11                              set to true to enable experimental OCI 1.1 behaviour\n  -h, --help                                            help for verify-blob\n      --insecure-ignore-sct                             when set, verification will not check that a certificate contains an embedded SCT, a proof of inclusion in a certificate transparency log\n      --insecure-ignore-tlog                            ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log. Artifacts cannot be publicly verified when not included in a log\n      --key string                                      path to the public key file, KMS URI or Kubernetes Secret\n      --max-workers int                                 the amount of maximum workers for parallel executions (default 10)\n      --new-bundle-format                               expect the signature/attestation to be packaged in a Sigstore bundle\n      --offline                                         only allow offline verification\n      --private-infrastructure                          skip transparency log verification when verifying artifacts in a privately deployed infrastructure\n      --rekor-url string                                address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --rfc3161-timestamp string                        path to RFC3161 timestamp FILE\n      --sct string                                      path to a detached Signed Certificate Timestamp, formatted as a RFC6962 AddChainResponse struct. If a certificate contains an SCT, verification will check both the detached and embedded SCTs.\n      --signature string                                signature content or path or remote URL\n      --sk                                              whether to use a hardware security key\n      --slot string                                     security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-certificate-chain string              path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamp\n      --trusted-root string                             Path to a Sigstore TrustedRoot JSON file. Requires --new-bundle-format to be set.\n      --use-signed-timestamps                           verify rfc3161 timestamps\n```\n\n----------------------------------------\n\nTITLE: Cosign Initialize Usage Examples in Bash\nDESCRIPTION: Various examples of using the 'cosign initialize' command, demonstrating different scenarios such as using custom mirrors, out-of-band root keys, and verifying root checksums. These examples show the flexibility of the initialize command in different deployment contexts.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_initialize.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign initialize --mirror <url> --out <file>\n\n# initialize root with distributed root keys, default mirror, and default out path.\ncosign initialize\n\n# initialize with an out-of-band root key file, using the default mirror.\ncosign initialize --root <url>\n\n# initialize with an out-of-band root key file and custom repository mirror.\ncosign initialize --mirror <url> --root <url>\n\n# initialize with an out-of-band root key file and custom repository mirror while verifying root checksum.\ncosign initialize --mirror <url> --root <url> --root-checksum <sha256>\n```\n\n----------------------------------------\n\nTITLE: Cosign Verify-Attestation Usage Examples\nDESCRIPTION: Comprehensive examples showing different ways to verify attestations including using local keys, remote keys, cloud KMS services, and policy validation using Rego or CUE.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-attestation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign verify-attestation --key <key path>|<key url>|<kms uri> <image uri> [<image uri> ...]\n\n  # verify cosign attestations on the image against the transparency log\n  cosign verify-attestation <IMAGE>\n\n  # verify multiple images\n  cosign verify-attestation <IMAGE_1> <IMAGE_2> ...\n\n  # additionally verify specified annotations\n  cosign verify-attestation -a key1=val1 -a key2=val2 <IMAGE>\n\n  # verify image with public key\n  cosign verify-attestation --key cosign.pub <IMAGE>\n\n  # verify image attestations with an on-disk signed image from 'cosign save'\n  cosign verify-attestation --key cosign.pub --local-image <PATH>\n\n  # verify image with public key provided by URL\n  cosign verify-attestation --key https://host.for/<FILE> <IMAGE>\n\n  # verify image with public key stored in Google Cloud KMS\n  cosign verify-attestation --key gcpkms://projects/<PROJECT>/locations/global/keyRings/<KEYRING>/cryptoKeys/<KEY> <IMAGE>\n\n  # verify image with public key stored in Hashicorp Vault\n  cosign verify-attestation --key hashivault:///<KEY> <IMAGE>\n\n  # verify image with public key stored in GitLab with project name\n  cosign verify-attestation --key gitlab://[OWNER]/[PROJECT_NAME] <IMAGE>\n\n  # verify image with public key stored in GitLab with project id\n  cosign verify-attestation --key gitlab://[PROJECT_ID] <IMAGE>\n\n  # verify image with public key and validate attestation based on Rego policy\n  cosign verify-attestation --key cosign.pub --type <PREDICATE_TYPE> --policy <REGO_POLICY> <IMAGE>\n\n  # verify image with public key and validate attestation based on CUE policy\n  cosign verify-attestation --key cosign.pub --type <PREDICATE_TYPE> --policy <CUE_POLICY> <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Cosign Public-Key Command Options\nDESCRIPTION: Available flags for the cosign public-key command, including options for specifying key paths, output files, and hardware security key settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_public-key.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help             help for public-key\n    --key string       path to the private key file, KMS URI or Kubernetes Secret\n    --outfile string   path to a payload file to use rather than generating one\n    --sk               whether to use a hardware security key\n    --slot string      security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Attest Command\nDESCRIPTION: Shows the basic syntax for using the 'cosign attest' command with various flags.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign attest [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Attest-Blob Command Examples\nDESCRIPTION: Examples demonstrating how to attach attestations to blobs using different key storage methods, including local key pairs, cloud KMS services (Azure, AWS, Google Cloud, Hashicorp Vault), and accepting attestation data via stdin.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest-blob.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign attest-blob --key <key path>|<kms uri> [--predicate <path>] [--a key=value] [--f] [--r] <BLOB uri>\n\n  # attach an attestation to a blob with a local key pair file and print the attestation\n  cosign attest-blob --predicate <FILE> --type <TYPE> --key cosign.key --output-attestation <path> <BLOB>\n\n  # attach an attestation to a blob with a key pair stored in Azure Key Vault\n  cosign attest-blob --predicate <FILE> --type <TYPE> --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <BLOB>\n\n  # attach an attestation to a blob with a key pair stored in AWS KMS\n  cosign attest-blob --predicate <FILE> --type <TYPE> --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <BLOB>\n\n  # attach an attestation to a blob with a key pair stored in Google Cloud KMS\n  cosign attest-blob --predicate <FILE> --type <TYPE> --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY]/versions/[VERSION] <BLOB>\n\n  # attach an attestation to a blob with a key pair stored in Hashicorp Vault\n  cosign attest-blob --predicate <FILE> --type <TYPE> --key hashivault://[KEY] <BLOB>\n\n  # supply attestation via stdin\n  echo <PAYLOAD> | cosign attest-blob --predicate - --yes\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional command line options inherited from parent commands, including output file configuration, timeout settings, and verbose logging options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Copy Command Examples\nDESCRIPTION: Examples demonstrating various use cases of the cosign copy command, including copying images with signatures, copying only specific artifacts, overwriting destinations, and platform-specific copying.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_copy.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign copy <source image> <destination image>\n\n  # copy a container image and its signatures\n  cosign copy example.com/src:latest example.com/dest:latest\n\n  # copy the signatures only\n  cosign copy --only=sig example.com/src example.com/dest\n\n  # copy the signatures, attestations, sbom only\n  cosign copy --only=sig,att,sbom example.com/src example.com/dest\n\n  # overwrite destination image and signatures\n  cosign copy -f example.com/src example.com/dest\n\n  # copy a container image and its signatures for a specific platform\n  cosign copy --platform=linux/amd64 example.com/src:latest example.com/dest:latest\n```\n\n----------------------------------------\n\nTITLE: Cosign Dockerfile Verification Examples\nDESCRIPTION: Various examples of using the cosign dockerfile verify command, including verifying with different key sources (local files, URLs, cloud KMS), verifying only base images, and verifying with specific annotations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile_verify.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign dockerfile verify --key <key path>|<key url>|<kms uri> <path/to/Dockerfile>\n\n  # verify cosign claims and signing certificates on the FROM images in the Dockerfile\n  cosign dockerfile verify <path/to/Dockerfile>\n\n  # only verify the base image (the last FROM image)\n  cosign dockerfile verify --base-image-only <path/to/Dockerfile>\n\n  # additionally verify specified annotations\n  cosign dockerfile verify -a key1=val1 -a key2=val2 <path/to/Dockerfile>\n\n  # verify images with public key\n  cosign dockerfile verify --key cosign.pub <path/to/Dockerfile>\n\n  # verify images with public key provided by URL\n  cosign dockerfile verify --key https://host.for/<FILE> <path/to/Dockerfile>\n\n  # verify images with public key stored in Azure Key Vault\n  cosign dockerfile verify --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <path/to/Dockerfile>\n\n  # verify images with public key stored in AWS KMS\n  cosign dockerfile verify --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <path/to/Dockerfile>\n\n  # verify images with public key stored in Google Cloud KMS\n  cosign dockerfile verify --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY] <path/to/Dockerfile>\n\n  # verify images with public key stored in Hashicorp Vault\n  cosign dockerfile verify --key hashivault://[KEY] <path/to/Dockerfile>\n```\n\n----------------------------------------\n\nTITLE: Cosign Trusted Root Creation Command Options\nDESCRIPTION: Available options for the 'cosign trusted-root create' command. These options allow users to specify certificate chains, CTFE keys, Rekor keys, timestamp certificates, and output paths.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_trusted-root_create.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --certificate-chain stringArray             path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate.\n      --ctfe-key stringArray                      path to a PEM-encoded public key used by certificate authority for certificate transparency log.\n      --ctfe-start-time stringArray               RFC 3339 string describing validity start time for key use by certificate transparency log.\n  -h, --help                                      help for create\n      --out string                                path to output trusted root\n      --rekor-key stringArray                     path to a PEM-encoded public key used by transparency log like Rekor.\n      --rekor-start-time stringArray              RFC 3339 string describing validity start time for key use by transparency log like Rekor.\n      --timestamp-certificate-chain stringArray   path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign Login Command\nDESCRIPTION: The basic syntax for using the cosign login command to authenticate with a container registry. It accepts options and the server address as arguments.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_login.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign login [OPTIONS] [SERVER] [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Download SBOM Command Options\nDESCRIPTION: List of all available options for the cosign download sbom command, including registry authentication, HTTP settings, and attachment configuration options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_sbom.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for sbom\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --platform string                                                                          download SBOM for a specific platform image\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Public Key Extraction Examples with cosign\nDESCRIPTION: Examples showing how to extract public keys from various sources including local files, URLs, and cloud key management systems like Azure KMS, AWS KMS, Google Cloud KMS, and Hashicorp Vault.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_public-key.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# extract public key from private key to a specified out file.\ncosign public-key --key <PRIVATE KEY FILE> --outfile <OUTPUT>\n\n# extract public key from URL.\ncosign public-key --key https://host.for/<FILE> --outfile <OUTPUT>\n\n# extract public key from Azure Key Vault\ncosign public-key --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY]\n\n# extract public key from AWS KMS\ncosign public-key --key awskms://[ENDPOINT]/[ID/ALIAS/ARN]\n\n# extract public key from Google Cloud KMS\ncosign public-key --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY]\n\n# extract public key from Hashicorp Vault KMS\ncosign public-key --key hashivault://[KEY]\n\n# extract public key from GitLab with project name\ncosign public-key --key gitlab://[OWNER]/[PROJECT_NAME] <IMAGE>\n\n# extract public key from GitLab with project id\ncosign public-key --key gitlab://[PROJECT_ID] <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Upload Blob Command in Bash\nDESCRIPTION: Examples of using the 'cosign upload blob' command to upload blobs to container image addresses. Demonstrates various use cases including setting OS and platform fields, adding annotations, and uploading multiple blobs.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_blob.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign upload blob -f <blob ref> <image uri>\n\n# upload a blob named foo to the location specified by <IMAGE>\ncosign upload blob -f foo <IMAGE>\n\n# upload a blob named foo to the location specified by <IMAGE>, setting the os field to \"MYOS\".\ncosign upload blob -f foo:MYOS <IMAGE>\n\n# upload a blob named foo to the location specified by <IMAGE>, setting the os field to \"MYOS\" and the platform field to \"MYPLATFORM\".\ncosign upload blob -f foo:MYOS/MYPLATFORM <IMAGE>\n\n# upload two blobs named foo-darwin and foo-linux to the location specified by <IMAGE>, setting the os fields\ncosign upload blob -f foo-darwin:darwin -f foo-linux:linux <IMAGE>\n\n# upload a blob named foo to the location specified by <IMAGE>, setting annotations mykey=myvalue.\ncosign upload blob -a mykey=myvalue -f foo <IMAGE>\n\n# upload two blobs named foo-darwin and foo-linux to the location specified by <IMAGE>, setting annotations\ncosign upload blob -a mykey=myvalue -a myotherkey=\"my other value\" -f foo-darwin:darwin -f foo-linux:linux <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach Signature Command Options\nDESCRIPTION: Available command-line options for the cosign attach signature command, including registry authentication, signature components, and security settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_signature.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --certificate string                                                                       path to the X.509 certificate in PEM format to include in the OCI Signature\n      --certificate-chain string                                                                 path to a list of CA X.509 certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Included in the OCI Signature\n  -h, --help                                                                                     help for signature\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --payload string                                                                           path to the payload covered by the signature\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-response string                                                                    path to the rekor bundle\n      --signature string                                                                         path to the signature, or {-} for stdin\n      --tsr string                                                                               path to the Time Stamped Signature Response from RFC3161 compliant TSA\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Cosign Generic Predicate Attestation\nDESCRIPTION: This example demonstrates the JSON structure of a Cosign generic predicate attestation containing a data file with the content 'foo'. The attestation includes the In-Toto statement type, predicate type, subject information with container image reference and digest, and the predicate with data and timestamp.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/COSIGN_PREDICATE_SPEC.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://cosign.sigstore.dev/attestation/v1\",\n  \"subject\": [\n    {\n      \"name\": \"us.gcr.io/dlorenc-vmtest2/demo\",\n      \"digest\": {\n        \"sha256\": \"124e1fdee94fe5c5f902bc94da2d6e2fea243934c74e76c2368acdc8d3ac7155\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"Data\": \"foo\\n\",\n    \"Timestamp\": \"2021-08-11T14:51:09Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Verify Command Basic Syntax\nDESCRIPTION: The basic command syntax for the cosign verify command, which is used to verify signatures on container images.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Import Key Pair Examples\nDESCRIPTION: Example commands demonstrating how to import PEM-encoded RSA or EC private keys with different output naming conventions. Includes a caveat about password requirements.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_import-key-pair.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncosign import-key-pair  --key openssl.key --output-key-prefix my-key\n\n# import PEM-encoded RSA or EC private key and write to import-cosign.key and import-cosign.pub files\ncosign import-key-pair --key <key path>\n\n# import PEM-encoded RSA or EC private key and write to my-key.key and my-key.pub files\ncosign import-key-pair --key <key path> --output-key-prefix my-key\n\nCAVEATS:\n  This command interactively prompts for a password. You can use\n  the COSIGN_PASSWORD environment variable to provide one.\n```\n\n----------------------------------------\n\nTITLE: Single SBOM Manifest Example with SPDX Format\nDESCRIPTION: Example of an OCI Image Manifest V1 containing a single SBOM in SPDX format. Shows basic structure with schema version, config, and single layer containing the SBOM.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SBOM_SPEC.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 233,\n    \"digest\": \"sha256:83bd5fb5b39f65f28e50a86d48fa79c07880befc292d92eebdc18531054b070c\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"text/spdx\",\n      \"size\": 246,\n      \"digest\": \"sha256:ed3ad03d3b87843b5419d7dce9d50a3e0f45554b2ba93bf378611cae6b450cff\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Available Options for cosign save Command\nDESCRIPTION: List of all available options and flags for the cosign save command, including options for registry authentication, HTTP protocol usage, and directory specification.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_save.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --dir string                                                                               path to dir where the signed image should be stored on disk\n  -h, --help                                                                                     help for save\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Cosign Manifest Verify Usage Examples\nDESCRIPTION: This code block provides multiple examples of how to use the 'cosign manifest verify' command with different options and key sources. It covers verifying with local keys, URLs, cloud key management services, and specific annotations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest_verify.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign manifest verify --key <key path>|<key url>|<kms uri> <path/to/manifest>\n\n  # verify cosign claims and signing certificates on images in the manifest\n  cosign manifest verify <path/to/my-deployment.yaml>\n\n  # additionally verify specified annotations\n  cosign manifest verify -a key1=val1 -a key2=val2 <path/to/my-deployment.yaml>\n\n  # verify images with public key\n  cosign manifest verify --key cosign.pub <path/to/my-deployment.yaml>\n\n  # verify images with public key provided by URL\n  cosign manifest verify --key https://host.for/<FILE> <path/to/my-deployment.yaml>\n\n  # verify images with public key stored in Azure Key Vault\n  cosign manifest verify --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <path/to/my-deployment.yaml>\n\n  # verify images with public key stored in AWS KMS\n  cosign manifest verify --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <path/to/my-deployment.yaml>\n\n  # verify images with public key stored in Google Cloud KMS\n  cosign manifest verify --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY] <path/to/my-deployment.yaml>\n\n  # verify images with public key stored in Hashicorp Vault\n  cosign manifest verify --key hashivault://[KEY] <path/to/my-deployment.yaml>\n```\n\n----------------------------------------\n\nTITLE: Tag Signing Example\nDESCRIPTION: Example of signing a specific tag->digest mapping with annotations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ docker push $IMAGE_URI\nThe push refers to repository [dlorenc/demo]\n994393dc58e7: Pushed\n5m: digest: sha256:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870 size: 528\n$ TAG=sign-me\n$ cosign sign --key cosign.key -a tag=$TAG $IMAGE_URI_DIGEST\nEnter password for private key:\nPushing signature to: dlorenc/demo:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870.sig\n```\n\n----------------------------------------\n\nTITLE: Cosign Download Attestation Command Options\nDESCRIPTION: Available command-line flags and options for customizing the attestation download behavior, including registry authentication and security settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_attestation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for attestation\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --platform string                                                                          download attestation for a specific platform image\n      --predicate-type string                                                                    download attestation with matching predicateType\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Multiple SBOM Manifest Example with SPDX and CycloneDX\nDESCRIPTION: Example showing how multiple SBOMs in different formats (SPDX and CycloneDX) can be attached to a single manifest using multiple layers.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SBOM_SPEC.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 233,\n    \"digest\": \"sha256:83bd5fb5b39f65f28e50a86d48fa79c07880befc292d92eebdc18531054b070c\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"text/spdx\",\n      \"size\": 246,\n      \"digest\": \"sha256:ed3ad03d3b87843b5419d7dce9d50a3e0f45554b2ba93bf378611cae6b450cff\"\n    },\n    {\n      \"mediaType\": \"application/vnd.cyclonedx\",\n      \"size\": 462,\n      \"digest\": \"sha256:e0851a4aa13657fc8dcd01e0e5e08cb817123ccb82e2c604b34f9ec9c1755e3f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Verify-Attestation Command Options\nDESCRIPTION: This code block lists all available options for the 'cosign verify-attestation' command. It includes options for configuring registry connections, specifying certificates and keys, setting identity and OIDC parameters, and controlling verification behavior.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-attestation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --ca-intermediates string                                                                  path to a file of intermediate CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. The flag is optional and must be used together with --ca-roots, conflicts with --certificate-chain.\n      --ca-roots string                                                                         path to a bundle file of CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. Conflicts with --certificate-chain.\n      --certificate string                                                                       path to the public certificate. The certificate will be verified against the Fulcio roots if the --certificate-chain option is not passed.\n      --certificate-chain string                                                                 path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Conflicts with --ca-roots and --ca-intermediates.\n      --certificate-github-workflow-name string                                                  contains the workflow claim from the GitHub OIDC Identity token that contains the name of the executed workflow.\n      --certificate-github-workflow-ref string                                                   contains the ref claim from the GitHub OIDC Identity token that contains the git ref that the workflow run was based upon.\n      --certificate-github-workflow-repository string                                            contains the repository claim from the GitHub OIDC Identity token that contains the repository that the workflow run was based upon\n      --certificate-github-workflow-sha string                                                   contains the sha claim from the GitHub OIDC Identity token that contains the commit SHA that the workflow run was based upon.\n      --certificate-github-workflow-trigger string                                               contains the event_name claim from the GitHub OIDC Identity token that contains the name of the event that triggered the workflow run\n      --certificate-identity string                                                              The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-identity-regexp string                                                       A regular expression alternative to --certificate-identity. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-oidc-issuer string                                                           The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --certificate-oidc-issuer-regexp string                                                    A regular expression alternative to --certificate-oidc-issuer. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --check-claims                                                                             whether to check the claims found (default true)\n      --experimental-oci11                                                                       set to true to enable experimental OCI 1.1 behaviour\n  -h, --help                                                                                     help for verify-attestation\n      --insecure-ignore-sct                                                                      when set, verification will not check that a certificate contains an embedded SCT, a proof of inclusion in a certificate transparency log\n      --insecure-ignore-tlog                                                                     ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log. Artifacts cannot be publicly verified when not included in a log\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --key string                                                                               path to the public key file, KMS URI or Kubernetes Secret\n      --local-image                                                                              whether the specified image is a path to an image saved locally via 'cosign save'\n      --max-workers int                                                                          the amount of maximum workers for parallel executions (default 10)\n      --new-bundle-format                                                                        expect the signature/attestation to be packaged in a Sigstore bundle\n      --offline                                                                                  only allow offline verification\n  -o, --output string                                                                            output format for the signing image information (json|text) (default \"json\")\n      --policy strings                                                                           specify CUE or Rego files with policies to be used for validation\n      --private-infrastructure                                                                   skip transparency log verification when verifying artifacts in a privately deployed infrastructure\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-url string                                                                         address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --sct string                                                                               path to a detached Signed Certificate Timestamp, formatted as a RFC6962 AddChainResponse struct. If a certificate contains an SCT, verification will check both the detached and embedded SCTs.\n      --sk                                                                                       whether to use a hardware security key\n      --slot string                                                                              security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-certificate-chain string                                                       path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamp\n      --trusted-root string                                                                      Path to a Sigstore TrustedRoot JSON file. Requires --new-bundle-format to be set.\n      --type string                                                                              specify a predicate type (slsaprovenance|slsaprovenance02|slsaprovenance1|link|spdx|spdxjson|cyclonedx|vuln|openvex|custom) or an URI (default \"custom\")\n      --use-signed-timestamps                                                                    verify rfc3161 timestamps\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign Initialize Command in Bash\nDESCRIPTION: Basic syntax for running the 'cosign initialize' command with optional flags. This command initializes the SigStore root and can be customized with various options such as specifying a mirror URL or an out-of-band root file.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_initialize.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign initialize [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign CLI Options Configuration\nDESCRIPTION: Defines the global command line options available for the cosign tool, including help flag, output file specification, timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for cosign\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Verifying Blob Signature with Timestamp in Cosign\nDESCRIPTION: Demonstrates verifying a blob signature with a timestamp certificate chain and bundle in Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify-blob --rfc3161-timestamp=<output-path> --timestamp-certificate-chain=<path-to-PEM-encoded-chain> --bundle=<output-path> <other flags> <blob>\n```\n\n----------------------------------------\n\nTITLE: Cosign Sign-Blob Usage Examples\nDESCRIPTION: Demonstrates various ways to sign blobs using different key storage options including local keys, environment variables, and cloud KMS services\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign-blob.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign sign-blob --key <key path>|<kms uri> <blob>\n\n  # sign a blob with Google sign-in (experimental)\n  cosign sign-blob <FILE> --output-signature <FILE> --output-certificate <FILE>\n\n  # sign a blob with a local key pair file\n  cosign sign-blob --key cosign.key <FILE>\n\n  # sign a blob with a key stored in an environment variable\n  cosign sign-blob --key env://[ENV_VAR] <FILE>\n\n  # sign a blob with a key pair stored in Azure Key Vault\n  cosign sign-blob --key azurekms://[VAULT_NAME][VAULT_URI]/[KEY] <FILE>\n\n  # sign a blob with a key pair stored in AWS KMS\n  cosign sign-blob --key awskms://[ENDPOINT]/[ID/ALIAS/ARN] <FILE>\n\n  # sign a blob with a key pair stored in Google Cloud KMS\n  cosign sign-blob --key gcpkms://projects/[PROJECT]/locations/global/keyRings/[KEYRING]/cryptoKeys/[KEY] <FILE>\n\n  # sign a blob with a key pair stored in Hashicorp Vault\n  cosign sign-blob --key hashivault://[KEY] <FILE>\n```\n\n----------------------------------------\n\nTITLE: Implementing Annotations in Sigstore Bundle Manifest\nDESCRIPTION: This JSON snippet illustrates how to include annotations in a Sigstore bundle manifest. It shows the use of 'dev.sigstore.bundle.content', 'dev.sigstore.bundle.predicateType', and 'org.opencontainers.image.created' annotations to provide additional context about the bundle's content and creation time.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"schemaVersion\": 2,\n  \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n  \"annotations\": {\n    \"dev.sigstore.bundle.content\": \"dsse-envelope\",\n    \"dev.sigstore.bundle.predicateType\": \"https://slsa.dev/provenance/v1\",\n    \"org.opencontainers.image.created\": \"2024-03-08T18:18:20.406Z\"\n  },\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.empty.v1+json\",\n    \"digest\": \"sha256:44136fa3...\",\n    \"size\": 2\n  },\n  \"layers\": [\n    {\n      \"digest\": \"sha256:cafed00d...\",\n      \"mediaType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"size\": 4971\n    }\n  ],\n  \"subject\": {\n    \"digest\": \"sha256:c00010ff...\",\n    \"mediaType\": \"application/vnd.oci.image.index.v1+json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Artifact with Cosign\nDESCRIPTION: Example of signing an artifact using Cosign with a private key.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign sign --key cosign.key us-central1-docker.pkg.dev/dlorenc-vmtest2/test/artifact@sha256:551e6cce7ed2e5c914998f931b277bc879e675b74843e6f29bc17f3b5f692bef\nEnter password for private key:\nPushing signature to: us-central1-docker.pkg.dev/dlorenc-vmtest2/test/artifact:sha256-551e6cce7ed2e5c914998f931b277bc879e675b74843e6f29bc17f3b5f692bef.sig\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completion for Cosign\nDESCRIPTION: Commands for loading and installing Bash completion for cosign. Shows how to apply completions temporarily for the current session or permanently by installing to system completion directories.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ source <(cosign completion bash)\n# To load completions for each session, execute once:\n# Linux:\n$ cosign completion bash > /etc/bash_completion.d/cosign\n# macOS:\n$ cosign completion bash > /usr/local/etc/bash_completion.d/cosign\n```\n\n----------------------------------------\n\nTITLE: Examining Container Signature Manifests with Crane\nDESCRIPTION: This snippet demonstrates how to inspect the manifest of a signed image using crane. It reveals the signature structure stored as an annotation in the OCI image manifest, showing how Cosign embeds signatures in the registry.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ crane manifest dlorenc/demo@sha256:71f70e5d29bde87f988740665257c35b1c6f52dafa20fab4ba16b3b1f4c6ba0e\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 233,\n    \"digest\": \"sha256:3b25a088710d03f39be26629d22eb68cd277a01673b9cb461c4c24fbf8c81c89\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.oci.descriptor.v1+json\",\n      \"size\": 217,\n      \"digest\": \"sha256:0e79a356609f038089088ec46fd95f4649d04de989487220b1a0adbcc63fadae\",\n      \"annotations\": {\n        \"dev.sigstore.cosign/signature\": \"5uNZKEP9rm8zxAL0VVX7McMmyArzLqtxMTNPjPO2ns+5GJpBeXg+i9ILU+WjmGAKBCqiexTxzLC1/nkOzD4cDA==\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sigstore Bundle Blob\nDESCRIPTION: HTTP request to retrieve the actual Sigstore bundle blob using its digest. This fetches the JSON-serialized bundle content that contains the verification material and message signature.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /v2/foo/blobs/uploads/?digest=cafed00d...\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach Attestation Usage Examples\nDESCRIPTION: Examples demonstrating how to attach single attestations, multiple attestations, and attestation bundles to container images.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_attestation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign attach attestation --attestation <attestation file path> <image uri>\n\n  # attach attestations from multiple files to a container image\n  cosign attach attestation --attestation <attestation file path> --attestation <attestation file path> <image uri>\n\n  # attach attestation from bundle files in form of JSONLines to a container image\n  # https://github.com/in-toto/attestation/blob/main/spec/v1.0-draft/bundle.md\n  cosign attach attestation --attestation <attestation bundle file path> <image uri>\n```\n\n----------------------------------------\n\nTITLE: Using the cosign save Command\nDESCRIPTION: Basic syntax for the cosign save command which saves container images and their signatures to disk at a specified directory.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_save.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign save [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach SBOM Example Usage\nDESCRIPTION: Example showing how to attach an SBOM to a specified container image URI.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_sbom.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign attach sbom <image uri>\n```\n\n----------------------------------------\n\nTITLE: Storing Certificate as Layer Annotation in OCI Image Manifest\nDESCRIPTION: Example showing how a PEM-encoded certificate is stored as an annotation on the layer descriptor in an OCI Image Manifest using the key 'dev.cosignproject.cosign/certificate'.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"annotations\": {\n     \"dev.sigstore.cosign/certificate\": \"-----BEGIN CERTIFICATE-----\\nMIICrjCCAjSgAwIBAgIUAM4mURWUSkg06fmHmFfTmerYKaUwCgYIKoZIzj0EAwMw\\nKjEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MREwDwYDVQQDEwhzaWdzdG9yZTAeFw0y\\nMTA0MDExNTU5MDZaFw0yMTA0MDExNjE4NTlaMDoxGzAZBgNVBAoMEmRsb3JlbmNA\\nZ29vZ2xlLmNvbTEbMBkGA1UEAwwSZGxvcmVuY0Bnb29nbGUuY29tMFkwEwYHKoZI\\nzj0CAQYIKoZIzj0DAQcDQgAE3R0ZtpfBd3Y8DaXuB1gM8JPlhsDIEfXO/WsMJEN1\\n4hEn8wajX2HklqL7igZPFICv6tBUGylIHp2mTH2Nhv38mqOCASYwggEiMA4GA1Ud\\nDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAMBgNVHRMBAf8EAjAAMB0G\\nA1UdDgQWBBTy3UWIop0bNrdNgSrVHHD10qSASTAfBgNVHSMEGDAWgBTIxR0AQZok\\nKTJRJOsNrkrtSgbT7DCBjQYIKwYBBQUHAQEEgYAwfjB8BggrBgEFBQcwAoZwaHR0\\ncDovL3ByaXZhdGVjYS1jb250ZW50LTYwM2ZlN2U3LTAwMDAtMjIyNy1iZjc1LWY0\\nZjVlODBkMjk1NC5zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2NhMzZhMWU5NjI0MmI5\\nZmNiMTQ2L2NhLmNydDAdBgNVHREEFjAUgRJkbG9yZW5jQGdvb2dsZS5jb20wCgYI\\nKoZIzj0EAwMDaAAwZQIwC15Gtd9F6W9lmJuoXMym9DfWlBpK5HEPak38WPXqowRp\\n6p+2/3jSLkFT5Nn5fuISAjEAouVlX4zH2rlkfg45HnDJax7o6ZV+E0/6BdAms44D\\nEj6T/GLK6XJSB28haSPRWB7k\\n-----END CERTIFICATE-----\\n\",\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Cosign Download Signature Usage\nDESCRIPTION: An example showing how to use the 'cosign download signature' command with an image URI.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_signature.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncosign download signature <image uri>\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Sign-Blob Command Usage\nDESCRIPTION: Shows the basic command syntax for signing blobs with cosign\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign-blob.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign sign-blob [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Download SBOM Usage Example\nDESCRIPTION: Example of how to use the cosign download sbom command with an image URI.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_sbom.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign download sbom <image uri>\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach Signature Command Examples\nDESCRIPTION: Examples demonstrating various ways to use the cosign attach signature command, including attaching payloads, signatures, and Rekor responses to container images.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_signature.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign attach signature [--payload <path>] [--signature < path>] [--rekor-response < path>] <image uri>\n\n\t\tcosign attach signature command attaches payload, signature, rekor-bundle, etc in a new layer of provided image.\n\t\t\n\t\t# Attach signature can attach payload to a supplied image\n\t\tcosign attach signature --payload <payload.json>  $IMAGE\n\n\t\t# Attach signature can attach payload, signature to a supplied image\n\t\tcosign attach signature --payload <payload.json> --signature <base64 signature file> $IMAGE\n\n\t\t# Attach signature can attach payload, signature, time stamped response to a supplied image\n\t\tcosign attach signature --payload <payload.json> --signature <base64 signature file> --tsr=<file> $IMAGE\n\n\t\t# Attach signature attaches payload, signature and rekor-bundle via rekor-response to a supplied image\n\t\tcosign attach signature --payload <payload.json> --signature <base64 signature file>  --rekor-response <proper rekor-response format file> $IMAGE\n\n\t\t# Attach signature attaches payload, signature and rekor-bundle directly to a supplied image\n\t\tcosign attach signature --payload <payload.json> --signature <base64 signature file>  --rekor-response <rekor-bundle file> $IMAGE\n```\n\n----------------------------------------\n\nTITLE: Storing Certificate Chain as Layer Annotation in OCI Image Manifest\nDESCRIPTION: Example showing how a PEM-encoded certificate chain is stored as an annotation on the layer descriptor in an OCI Image Manifest using the key 'dev.cosignproject.cosign/chain'.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"annotations\": {\n      \"dev.sigstore.cosign/chain\": \"-----BEGIN CERTIFICATE-----\\nMIIB+DCCAX6gAwIBAgITNVkDZoCiofPDsy7dfm6geLbuhzAKBggqhkjOPQQDAzAq\\nMRUwEwYDVQQKEwxzaWdzdG9yZS5kZXYxETAPBgNVBAMTCHNpZ3N0b3JlMB4XDTIx\\nMDMwNzAzMjAyOVoXDTMxMDIyMzAzMjAyOVowKjEVMBMGA1UEChMMc2lnc3RvcmUu\\nZGV2MREwDwYDVQQDEwhzaWdzdG9yZTB2MBAGByqGSM49AgEGBSuBBAAiA2IABLSy\\nA7Ii5k+pNO8ZEWY0ylemWDowOkNa3kL+GZE5Z5GWehL9/A9bRNA3RbrsZ5i0Jcas\\ntaRL7Sp5fp/jD5dxqc/UdTVnlvS16an+2Yfswe/QuLolRUCrcOE2+2iA5+tzd6Nm\\nMGQwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYDVR0OBBYE\\nFMjFHQBBmiQpMlEk6w2uSu1KBtPsMB8GA1UdIwQYMBaAFMjFHQBBmiQpMlEk6w2u\\nSu1KBtPsMAoGCCqGSM49BAMDA2gAMGUCMH8liWJfMui6vXXBhjDgY4MwslmN/TJx\\nVe/83WrFomwmNf056y1X48F9c4m3a3ozXAIxAKjRay5/aj/jsKKGIkmQatjI8uup\\nHr/+CxFvaJWmpYqNkLDGRU+9orzh5hI2RrcuaQ==\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Rekor Bundle JSON Format\nDESCRIPTION: Sample JSON structure containing a Rekor transparency log entry bundle. Includes signed entry timestamp, payload data, and log metadata required for verification.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SignedEntryTimestamp\": \"MEUCIQDHiGUesxPpn+qRONLmKlNIVPhl9gBMnwNeIQmRkRmZVQIgRxPpuYQDZR/8lYKcEfiQn5b+7VDoJIC72ZWHO9ZCp1A=\",\n  \"Payload\": {\n    \"body\": \"eyJhcGlWZXJzaW9uIjoiMC4wLjEiLCJzcGVjIjp7ImRhdGEiOnsiaGFzaCI6eyJhbGdvcml0aG0iOiJzaGEyNTYiLCJ2YWx1ZSI6ImE0NDkyYjBlYWJkZDIzMTJmMDYzMjkwYWJkNzk3ZDlkNzFhM2FiMjhiZDY1YTJjMTg5YjBkZjBkMzliOGMzYjkifX0sInNpZ25hdHVyZSI6eyJjb250ZW50IjoiTUVRQ0lDTmRYeTNiWHAxRE1PTDZOUGZYMzVnSjI3YnpsZHdTdkNBTnd5ZE9RVWlqQWlCQWg5WlJwQ3AzYlg5eE9UbEhTR2w0cFVGd0ZtUFJJWGZpY09pRTBHM1Vzdz09IiwiZm9ybWF0IjoieDUwOSIsInB1YmxpY0tleSI6eyJjb250ZW50IjoiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVTmxla05EUVdkRFowRjNTVUpCWjBsVVZISk9aa013YkZSSmRWSXZWR0UyWm14MWFtdFFOWHBaTDFSQlMwSm5aM0ZvYTJwUFVGRlJSRUY2UVhFS1RWSlZkMFYzV1VSV1VWRkxSWGQ0ZW1GWFpIcGtSemw1V2xNMWExcFlXWGhGVkVGUVFtZE9Wa0pCVFZSRFNFNXdXak5PTUdJelNteE5RalJZUkZSSmVBcE5SRmw1VFdwSmVFMUVaM2RPUm05WVJGUkplRTFFV1hsTmFrbDRUV3BuZDAweGIzZEJSRUphVFVKTlIwSjVjVWRUVFRRNVFXZEZSME5EY1VkVFRUUTVDa0YzUlVoQk1FbEJRazFGV1M4ck4yRktjRmRLVFhjNWVrTmljMDFrT0hOQlRUTmxSbk5OTjBSbFpFZGlXRzlNUjJ4YUwyZHBNR2h5WTBaU1NWVTRiM2NLUzBKeU1ISkVTRE5QVkZaSWJVdFVZMkV2SzIweGQxQjNTVzlZTTFGUVYycG5aMFYwVFVsSlFrdFVRVTlDWjA1V1NGRTRRa0ZtT0VWQ1FVMURRalJCZHdwRmQxbEVWbEl3YkVKQmQzZERaMWxKUzNkWlFrSlJWVWhCZDAxM1JFRlpSRlpTTUZSQlVVZ3ZRa0ZKZDBGRVFXUkNaMDVXU0ZFMFJVWm5VVlZ5WVRoTENuSnJaMjAzVGtsNFRrNXBVMkpZVG00eFdFVkxhRzFyZDBoM1dVUldVakJxUWtKbmQwWnZRVlY1VFZWa1FVVkhZVXBEYTNsVlUxUnlSR0UxU3pkVmIwY0tNQ3QzZDJkWk1FZERRM05IUVZGVlJrSjNSVUpDU1VkQlRVZzBkMlpCV1VsTGQxbENRbEZWU0UxQlMwZGpSMmd3WkVoQk5reDVPWGRqYld3eVdWaFNiQXBaTWtWMFdUSTVkV1JIVm5Wa1F6QXlUVVJPYlZwVVpHeE9lVEIzVFVSQmQweFVTWGxOYW1OMFdXMVpNMDVUTVcxT1Ixa3hXbFJuZDFwRVNUVk9WRkYxQ21NelVuWmpiVVp1V2xNMWJtSXlPVzVpUjFab1kwZHNla3h0VG5aaVV6bHFXVlJOTWxsVVJteFBWRmw1VGtSS2FVOVhXbXBaYWtVd1RtazVhbGxUTldvS1kyNVJkMHBCV1VSV1VqQlNRVkZJTDBKQ2IzZEhTVVZYWTBoS2NHVlhSak5aVjFKdlpESkdRVm95T1haYU1uaHNURzFPZG1KVVFVdENaMmR4YUd0cVR3cFFVVkZFUVhkT2NFRkVRbTFCYWtWQk1UQlVSR015Wm1oUFZrRlVNWFJzZFM4MmMzWnhSbEZ1YkRaWU9YZGhNbXRUU2t0RGJqUkZZbFJFYTNwYVJYb3lDblppUWtwb2FFZ3ZjbWRXUjFKMU5tWkJha1ZCYkhsb05uUmhZelJZVFRaS2IzVlZlRWtyTjFnelFtUTFXVXR5WlRGS1dFOWhia0ZaYW1adldHNTVUSFFLZDNCSVFWb3paVzFhY0VWa00yeHFTVEF3Vm04S0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvPSJ9fX0sImtpbmQiOiJyZWtvcmQifQ==\",\n    \"integratedTime\": 1624396085,\n    \"logIndex\": 5179,\n    \"logID\": \"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Attest-Blob Command\nDESCRIPTION: The basic command syntax for attesting blobs with cosign, showing the required and optional flags.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest-blob.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign attest-blob [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging into a Specific Registry with Cosign\nDESCRIPTION: An example of how to use the cosign login command to authenticate with a specific registry (reg.example.com) using a username and password.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_login.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign login reg.example.com -u AzureDiamond -p hunter2\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign Manifest Verify Command\nDESCRIPTION: This snippet shows the basic syntax for running the 'cosign manifest verify' command. It allows users to verify all signatures of images specified in a manifest by checking claims against the transparency log.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest_verify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign manifest verify [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Sign Inherited Options\nDESCRIPTION: This code block lists options that are inherited from parent commands for the 'cosign sign' command. These options include specifying an output file, setting a timeout, and enabling verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Command Usage Examples\nDESCRIPTION: Demonstrates common usage patterns for verifying blob attestations including signature verification using public keys.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob-attestation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n cosign verify-blob-attestation (--key <key path>|<key url>|<kms uri>) --signature <sig> [path to BLOB]\n\n  # Verify a simple blob attestation with a DSSE style signature\n  cosign verify-blob-attestation --key cosign.pub (--signature <sig path>|<sig url>)[path to BLOB]\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for Cosign Generate\nDESCRIPTION: Examples showing different ways to use the cosign generate command, including basic usage, adding annotations, and integration with GPG\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign generate [--a key=value] <image uri>\n\n  # Generate a simple payload for an image\n  cosign generate <IMAGE>\n\n  # Generate a payload with specific annotations\n  cosign generate -a foo=bar <IMAGE>\n\n  # Use this payload in another tool\n  gpg --output image.sig --detach-sig <(cosign generate <IMAGE>)\n```\n\n----------------------------------------\n\nTITLE: Listing Cosign Verify Command Options\nDESCRIPTION: A comprehensive list of command-line options available for the 'cosign verify' command, including options for registry connections, certificate validation, signature verification, and more. These options control how cosign connects to registries, validates certificates, and verifies digital signatures on container images.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile_verify.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n  -a, --annotations strings                                                                      extra key=value pairs to sign\n      --attachment string                                                                        DEPRECATED, related image attachment to verify (sbom), default none\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --base-image-only                                                                          only verify the base image (the last FROM image in the Dockerfile)\n      --ca-intermediates string                                                                  path to a file of intermediate CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. The flag is optional and must be used together with --ca-roots, conflicts with --certificate-chain.\n      --ca-roots string                                                                          path to a bundle file of CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. Conflicts with --certificate-chain.\n      --certificate string                                                                       path to the public certificate. The certificate will be verified against the Fulcio roots if the --certificate-chain option is not passed.\n      --certificate-chain string                                                                 path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Conflicts with --ca-roots and --ca-intermediates.\n      --certificate-github-workflow-name string                                                  contains the workflow claim from the GitHub OIDC Identity token that contains the name of the executed workflow.\n      --certificate-github-workflow-ref string                                                   contains the ref claim from the GitHub OIDC Identity token that contains the git ref that the workflow run was based upon.\n      --certificate-github-workflow-repository string                                            contains the repository claim from the GitHub OIDC Identity token that contains the repository that the workflow run was based upon\n      --certificate-github-workflow-sha string                                                   contains the sha claim from the GitHub OIDC Identity token that contains the commit SHA that the workflow run was based upon.\n      --certificate-github-workflow-trigger string                                               contains the event_name claim from the GitHub OIDC Identity token that contains the name of the event that triggered the workflow run\n      --certificate-identity string                                                              The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-identity-regexp string                                                       A regular expression alternative to --certificate-identity. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-oidc-issuer string                                                           The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --certificate-oidc-issuer-regexp string                                                    A regular expression alternative to --certificate-oidc-issuer. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --check-claims                                                                             whether to check the claims found (default true)\n      --experimental-oci11                                                                       set to true to enable experimental OCI 1.1 behaviour\n  -h, --help                                                                                     help for verify\n      --insecure-ignore-sct                                                                      when set, verification will not check that a certificate contains an embedded SCT, a proof of inclusion in a certificate transparency log\n      --insecure-ignore-tlog                                                                     ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log. Artifacts cannot be publicly verified when not included in a log\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --key string                                                                               path to the public key file, KMS URI or Kubernetes Secret\n      --local-image                                                                              whether the specified image is a path to an image saved locally via 'cosign save'\n      --max-workers int                                                                          the amount of maximum workers for parallel executions (default 10)\n      --new-bundle-format                                                                        expect the signature/attestation to be packaged in a Sigstore bundle\n      --offline                                                                                  only allow offline verification\n  -o, --output string                                                                            output format for the signing image information (json|text) (default \"json\")\n      --payload string                                                                           payload path or remote URL\n      --private-infrastructure                                                                   skip transparency log verification when verifying artifacts in a privately deployed infrastructure\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-url string                                                                         address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --sct string                                                                               path to a detached Signed Certificate Timestamp, formatted as a RFC6962 AddChainResponse struct. If a certificate contains an SCT, verification will check both the detached and embedded SCTs.\n      --signature string                                                                         signature content or path or remote URL\n      --signature-digest-algorithm string                                                        digest algorithm to use when processing a signature (sha224|sha256|sha384|sha512) (default \"sha256\")\n      --sk                                                                                       whether to use a hardware security key\n      --slot string                                                                              security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-certificate-chain string                                                       path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamp\n```\n\n----------------------------------------\n\nTITLE: Cosign Login Command Options\nDESCRIPTION: List of available options for the cosign login command, including help, password input methods, and username specification.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_login.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for login\n  -p, --password string   Password\n      --password-stdin    Take the password from stdin\n  -u, --username string   Username\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Named Signature Reference with Cosign\nDESCRIPTION: This snippet shows how to tag a signature with a memorable name using crane, then sign that signature with a counter-signature. It demonstrates creating a chain of signatures for a container image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ crane tag $(cosign triangulate $IMAGE_URI) mysignature\n2021/02/15 20:22:55 dlorenc/demo:mysignature: digest: sha256:71f70e5d29bde87f988740665257c35b1c6f52dafa20fab4ba16b3b1f4c6ba0e size: 556\n$ cosign sign --key cosign.key -a sig=counter dlorenc/demo:mysignature\nEnter password for private key:\nPushing signature to: dlorenc/demo:sha256-71f70e5d29bde87f988740665257c35b1c6f52dafa20fab4ba16b3b1f4c6ba0e.sig\n$ cosign verify --key cosign.pub dlorenc/demo:mysignature\n{\"Critical\":{\"Identity\":{\"docker-reference\":\"\"},\"Image\":{\"Docker-manifest-digest\":\"71f70e5d29bde87f988740665257c35b1c6f52dafa20fab4ba16b3b1f4c6ba0e\"},\"Type\":\"cosign container image signature\"},\"Optional\":{\"sig\":\"counter\"}}\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Scan Predicate JSON Structure\nDESCRIPTION: Illustrates the JSON structure of a vulnerability scan predicate, including invocation details, scanner information, and the full scan result.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/COSIGN_VULN_ATTESTATION_SPEC.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"predicate\": {\n    \"invocation\": {\n      \"parameters\": [\n        \"--format=json\"\n      ],\n      \"uri\": \"https://github.com/developer-guy/alpine/actions/runs/1071875574\",\n      \"event_id\": \"1071875574\",\n      \"builder.id\": \"github actions\"\n    },\n    \"scanner\": {\n      \"uri\": \"pkg:github/aquasecurity/trivy@244fd47e07d1004f0aed9\",\n      \"version\": \"0.19.2\",\n      \"db\": {\n        \"uri\": \"pkg:github/aquasecurity/trivy-db/commit/4c76bb580b2736d67751410fa4ab66d2b6b9b27d\",\n        \"version\": \"v1-2021080612\"\n      },\n      \"result\": {\n        \"SchemaVersion\": 2,\n        \"ArtifactName\": \"alpine:3.12\",\n        \"ArtifactType\": \"container_image\",\n        \"Metadata\": {\n          \"OS\": {\n            \"Family\": \"alpine\",\n            \"Name\": \"3.12.9\"\n          },\n          \"ImageID\": \"sha256:b0925e0819214cd29937af66dbaf0e6fe239997faea60922cc890f9984512507\",\n          \"DiffIDs\": [\n            \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n          ],\n          \"RepoTags\": [\n            \"alpine:3.12\"\n          ],\n          \"RepoDigests\": [\n            \"alpine@sha256:d9459083f962de6bd980ae6a05be2a4cf670df6a1d898157bceb420342bec280\"\n          ],\n          \"ImageConfig\": {\n            \"architecture\": \"amd64\",\n            \"container\": \"385e1cc96cc7482dfb6847e293bb24baecd3f48a49791b9b45e297204b160287\",\n            \"created\": \"2021-11-12T17:20:08.442217528Z\",\n            \"docker_version\": \"20.10.7\",\n            \"history\": [\n              {\n                \"created\": \"2021-11-12T17:20:08.190319702Z\",\n                \"created_by\": \"/bin/sh -c #(nop) ADD file:8f5bc5ce64ef781adadca88e4004e17affc72e6f20dbd08b9c478def12fe1dd3 in / \"\n              },\n              {\n                \"created\": \"2021-11-12T17:20:08.442217528Z\",\n                \"created_by\": \"/bin/sh -c #(nop)  CMD [\\\"/bin/sh\\\"]\",\n                \"empty_layer\": true\n              }\n            ],\n            \"os\": \"linux\",\n            \"rootfs\": {\n              \"type\": \"layers\",\n              \"diff_ids\": [\n                \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n              ]\n            },\n            \"config\": {\n              \"Cmd\": [\n                \"/bin/sh\"\n              ],\n              \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Import Key Pair Command\nDESCRIPTION: Basic command syntax for importing a PEM-encoded RSA or EC private key for signing with Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_import-key-pair.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncosign import-key-pair [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options for Cosign Generate\nDESCRIPTION: Available command-line options for the cosign generate command, including registry configuration and authentication options\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n  -a, --annotations strings                                                                      extra key=value pairs to sign\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for generate\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Creating OCI Manifest for Sigstore Bundle\nDESCRIPTION: HTTP request to create a manifest that associates the Sigstore bundle blob with its target image. The manifest uses the OCI image manifest format with the Sigstore bundle as a layer and references the target image in the subject field.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT /v2/foo/manifests/sha256:badf00d...\nContent-Type: application/vnd.oci.image.manifest.v1+json\n\n{\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"schemaVersion\": 2,\n  \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.empty.v1+json\",\n    \"digest\": \"sha256:44136fa3...\",\n    \"size\": 2\n  },\n  \"layers\": [\n    {\n      \"digest\": \"sha256:cafed00d...\",\n      \"mediaType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"size\": 4971\n    }\n  ],\n  \"subject\": {\n    \"digest\": \"sha256:c00010ff...\",\n    \"mediaType\": \"application/vnd.oci.image.index.v1+json\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Identity via Environment Variable in Cosign\nDESCRIPTION: Demonstrates how to set the certificate identity flag using an environment variable instead of a command line flag in Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCOSIGN_CERTIFICATE_IDENTITY=email\n```\n\n----------------------------------------\n\nTITLE: Primary Cosign Attestation Command Options\nDESCRIPTION: Comprehensive list of command line options for Cosign's attestation functionality, including registry configuration, authentication, security settings, and attestation-specific parameters.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --certificate string                                                                       path to the X.509 certificate in PEM format to include in the OCI Signature\n      --certificate-chain string                                                                 path to a list of CA X.509 certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Included in the OCI Signature\n      --fulcio-auth-flow string                                                                  fulcio interactive oauth2 flow to use for certificate from fulcio. Defaults to determining the flow based on the runtime environment. (options) normal|device|token|client_credentials\n      --fulcio-url string                                                                        address of sigstore PKI server (default \"https://fulcio.sigstore.dev\")\n  -h, --help                                                                                     help for attest\n      --identity-token string                                                                    identity token to use for certificate from fulcio. the token or a path to a file containing the token is accepted.\n      --insecure-skip-verify                                                                     skip verifying fulcio published to the SCT (this should only be used for testing).\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --key string                                                                               path to the private key file, KMS URI or Kubernetes Secret\n      --new-bundle-format                                                                        attach a Sigstore bundle using OCI referrers API\n      --no-upload                                                                                do not upload the generated attestation\n      --oidc-client-id string                                                                    OIDC client ID for application (default \"sigstore\")\n      --oidc-client-secret-file string                                                           Path to file containing OIDC client secret for application\n      --oidc-disable-ambient-providers                                                           Disable ambient OIDC providers. When true, ambient credentials will not be read\n      --oidc-issuer string                                                                       OIDC provider to be used to issue ID token (default \"https://oauth2.sigstore.dev/auth\")\n      --oidc-provider string                                                                     Specify the provider to get the OIDC token from (Optional). If unset, all options will be tried. Options include: [spiffe, google, github-actions, filesystem, buildkite-agent]\n      --oidc-redirect-url string                                                                 OIDC redirect URL (Optional). The default oidc-redirect-url is 'http://localhost:0/auth/callback'.\n      --predicate string                                                                         path to the predicate file.\n      --record-creation-timestamp                                                                set the createdAt timestamp in the attestation artifact to the time it was created; by default, cosign sets this to the zero value\n  -r, --recursive                                                                                if a multi-arch image is specified, additionally sign each discrete image\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-entry-type string                                                                  specifies the type to be used for a rekor entry upload (dsse|intoto) (default \"dsse\")\n      --rekor-url string                                                                         address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --replace                                                                                  \n      --sk                                                                                       whether to use a hardware security key\n      --slot string                                                                              security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-client-cacert string                                                           path to the X.509 CA certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-cert string                                                             path to the X.509 certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-key string                                                              path to the X.509 private key file in PEM format to be used, together with the 'timestamp-client-cert' value, for the connection to the TSA Server\n      --timestamp-server-name string                                                             SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the TSA Server\n      --timestamp-server-url string                                                              url to the Timestamp RFC3161 server, default none. Must be the path to the API to request timestamp responses, e.g. https://freetsa.org/tsr\n      --tlog-upload                                                                              whether or not to upload to the tlog (default true)\n      --type string                                                                              specify a predicate type (slsaprovenance|slsaprovenance02|slsaprovenance1|link|spdx|spdxjson|cyclonedx|vuln|openvex|custom) or an URI (default \"custom\")\n  -y, --yes                                                                                      skip confirmation prompts for non-destructive operations\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for cosign tree\nDESCRIPTION: Detailed list of available options/flags specific to the cosign tree command, including registry authentication, security settings, and attachment configuration options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_tree.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for tree\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Using the cosign tree Command\nDESCRIPTION: Basic syntax for the cosign tree command, which displays supply chain security related artifacts for an image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_tree.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign tree [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Referrers Tag for Registry Compatibility\nDESCRIPTION: HTTP request to create a referrers index using the tag scheme for registries that don't support the referrers API. This index contains references to all artifacts associated with a specific image digest.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /v2/foo/manifests/sha256-c00010ff...\nContent-Type: application/vnd.oci.image.index.v1+json\n\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n  \"manifests\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"digest\": \"sha256:badf00d..\",\n      \"size\": 779,\n      \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach SBOM Command Options\nDESCRIPTION: Complete list of available flags and options for the 'cosign attach sbom' command, including registry settings, authentication options, and SBOM format specifications.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_sbom.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for sbom\n      --input-format string                                                                      type of sbom input format (json|xml|text)\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-referrers-mode registryReferrersMode                                            mode for fetching references from the registry. allowed: legacy, oci-1-1\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --sbom string                                                                              path to the sbom, or {-} for stdin\n      --type string                                                                              type of sbom (spdx|cyclonedx|syft) (default \"spdx\")\n```\n\n----------------------------------------\n\nTITLE: Cosign Download Signature Command Options\nDESCRIPTION: List of available options for the 'cosign download signature' command, including flags for registry authentication, security settings, and attachment handling.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_signature.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for signature\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Storing Payload Reference in OCI Image Manifest\nDESCRIPTION: Example showing how the payload is referenced in an OCI Image Manifest as a layer with a specific mediaType indicating its purpose as a Cosign simple signing payload.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    <omitted for brevity>\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.dev.cosign.simplesigning.v1+json\",\n      \"size\": 210,\n      \"digest\": \"sha256:1119abab63e605dcc281019bad0424744178b6f61ba57378701fe7391994c999\",\n    },\n    <other layers here>\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Dockerfile Images with Cosign\nDESCRIPTION: The basic syntax for the cosign dockerfile verify command, which is used to verify signatures on images specified in a Dockerfile against the transparency log.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile_verify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign dockerfile verify [flags]\n```\n\n----------------------------------------\n\nTITLE: Uploading and Signing WASM Modules with Cosign\nDESCRIPTION: This snippet demonstrates how to upload a WASM module using Cosign and then sign it.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ cosign upload wasm -f hello.wasm us.gcr.io/dlorenc-vmtest2/wasm\n$ cosign sign --key cosign.key us.gcr.io/dlorenc-vmtest2/wasm@sha256:9e7a511fb3130ee4641baf1adc0400bed674d4afc3f1b81bb581c3c8f613f812\nEnter password for private key:\ntlog entry created with index: 5198\nPushing signature to: us.gcr.io/dlorenc-vmtest2/wasm:sha256-9e7a511fb3130ee4641baf1adc0400bed674d4afc3f1b81bb581c3c8f613f812.sig\n```\n\n----------------------------------------\n\nTITLE: Generate-Key Command Options\nDESCRIPTION: Available flags and options for customizing the key generation process, including management key configuration, PIN policies, slot selection, and touch policies.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_generate-key.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                    help for generate-key\n      --management-key string   management key, uses default if empty\n      --pin-policy string       PIN policy for slot (never|once|always)\n      --random-management-key   if set to true, generates a new random management key and deletes it after\n      --slot string             Slot to use for generated key (authentication|signature|card-authentication|key-management)\n      --touch-policy string     Touch policy for slot (never|always|cached)\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Sigstore Bundles in OCI Image Index\nDESCRIPTION: This JSON snippet shows the structure of an OCI image index containing multiple Sigstore attestation bundles. It demonstrates how bundles appear without annotations, making it difficult to distinguish between them.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n  \"schemaVersion\": 2,\n  \"manifests\": [\n    {\n      \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"digest\": \"sha256:facefeed\",\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\"\n    },\n    {\n      \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"digest\": \"sha256:d0d0caca\",\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using cosign public-key Command\nDESCRIPTION: The basic command syntax for retrieving a public key using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_public-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign public-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Storing Signature as Layer Annotation in OCI Image Manifest\nDESCRIPTION: Example showing how a base64-encoded signature is stored as an annotation on the layer descriptor in an OCI Image Manifest using the key 'dev.cosignproject.cosign/signature'.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"annotations\": {\n    \"dev.cosignproject.cosign/signature\": \"MEUCIBKI9FIC+YD3m/lWViyPxsJsbnIHj86sSbb7L3qvpEFoAiEA2ZChO/67CuAPQKJLBVsAc7bs9hBK8RpsdfjBsByGKJM=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach Attestation Command Options\nDESCRIPTION: Available command-line options for customizing attestation attachment behavior, including registry authentication and security settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_attestation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --attestation stringArray                                                                  path to the attestation envelope\n  -h, --help                                                                                     help for attestation\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Referrers Response JSON Format\nDESCRIPTION: JSON response format from either the referrers API or referrers tag retrieval. It lists all the artifacts associated with an image, including their mediaType, digest, size, and artifactType.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n  \"manifests\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"digest\": \"sha256:badf00d..\",\n      \"size\": 779,\n      \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trivy Scan Result JSON Structure\nDESCRIPTION: Shows the detailed JSON structure of a Trivy vulnerability scan result, including metadata about the scanned image and found vulnerabilities.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/COSIGN_VULN_ATTESTATION_SPEC.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SchemaVersion\": 2,\n  \"ArtifactName\": \"alpine:3.12\",\n  \"ArtifactType\": \"container_image\",\n  \"Metadata\": {\n    \"OS\": {\n      \"Family\": \"alpine\",\n      \"Name\": \"3.12.9\"\n    },\n    \"ImageID\": \"sha256:b0925e0819214cd29937af66dbaf0e6fe239997faea60922cc890f9984512507\",\n    \"DiffIDs\": [\n      \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n    ],\n    \"RepoTags\": [\n      \"alpine:3.12\"\n    ],\n    \"RepoDigests\": [\n      \"alpine@sha256:d9459083f962de6bd980ae6a05be2a4cf670df6a1d898157bceb420342bec280\"\n    ],\n    \"ImageConfig\": {\n      \"architecture\": \"amd64\",\n      \"container\": \"385e1cc96cc7482dfb6847e293bb24baecd3f48a49791b9b45e297204b160287\",\n      \"created\": \"2021-11-12T17:20:08.442217528Z\",\n      \"docker_version\": \"20.10.7\",\n      \"history\": [\n        {\n          \"created\": \"2021-11-12T17:20:08.190319702Z\",\n          \"created_by\": \"/bin/sh -c #(nop) ADD file:8f5bc5ce64ef781adadca88e4004e17affc72e6f20dbd08b9c478def12fe1dd3 in / \"\n        },\n        {\n          \"created\": \"2021-11-12T17:20:08.442217528Z\",\n          \"created_by\": \"/bin/sh -c #(nop)  CMD [\\\"/bin/sh\\\"]\",\n          \"empty_layer\": true\n        }\n      ],\n      \"os\": \"linux\",\n      \"rootfs\": {\n        \"type\": \"layers\",\n        \"diff_ids\": [\n          \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n        ]\n      },\n      \"config\": {\n        \"Cmd\": [\n          \"/bin/sh\"\n        ],\n        \"Env\": [\n          \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n        ],\n        \"Image\": \"sha256:7d1c1e4b291dc9519b43a2b9c9330655927f6dfde90d36ef5fd16b2ae0f28bbc\"\n      }\n    }\n  },\n  \"Results\": [\n    {\n      \"Target\": \"alpine:3.12 (alpine 3.12.9)\",\n      \"Class\": \"os-pkgs\",\n      \"Type\": \"alpine\",\n      \"Vulnerabilities\": [\n        {\n          \"VulnerabilityID\": \"CVE-2021-28831\",\n          \"PkgName\": \"busybox\",\n          \"InstalledVersion\": \"1.31.1-r21\",\n          \"FixedVersion\": \"1.32.1-r4\",\n          \"Layer\": {\n            \"Digest\": \"sha256:8572bc8fb8a32061648dd183b2c0451c82be1bd053a4ea8fae991436b92faebb\",\n            \"DiffID\": \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n          },\n          \"SeveritySource\": \"nvd\",\n          \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2021-28831\",\n          \"Title\": \"busybox: invalid free or segmentation fault via malformed gzip data\",\n          \"Description\": \"decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.\",\n          \"Severity\": \"HIGH\",\n          \"CweIDs\": [\n            \"CWE-755\"\n          ],\n          \"CVSS\": {\n            \"nvd\": {\n              \"V2Vector\": \"AV:N/AC:L/Au:N/C:N/I:N/A:P\",\n              \"V3Vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n              \"V2Score\": 5,\n              \"V3Score\": 7.5\n            },\n            \"redhat\": {\n              \"V3Vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n              \"V3Score\": 7.5\n            }\n          },\n          \"References\": [\n            \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28831\",\n            \"https://git.busybox.net/busybox/commit/?id=f25d254dfd4243698c31a4f3153d4ac72aa9e9bd\",\n            \"https://lists.debian.org/debian-lts-announce/2021/04/msg00001.html\",\n            \"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3UDQGJRECXFS5EZVDH2OI45FMO436AC4/\",\n            \"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z7ZIFKPRR32ZYA3WAA2NXFA3QHHOU6FJ/\",\n            \"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZASBW7QRRLY5V2R44MQ4QQM4CZIDHM2U/\",\n            \"https://security.gentoo.org/glsa/202105-09\",\n            \"https://ubuntu.com/security/notices/USN-5179-1\"\n          ],\n          \"PublishedDate\": \"2021-03-19T05:15:00Z\",\n          \"LastModifiedDate\": \"2021-05-26T10:15:00Z\"\n        },\n        {\n          \"VulnerabilityID\": \"CVE-2021-28831\",\n          \"PkgName\": \"ssl_client\",\n          \"InstalledVersion\": \"1.31.1-r21\",\n          \"FixedVersion\": \"1.32.1-r4\",\n          \"Layer\": {\n            \"Digest\": \"sha256:8572bc8fb8a32061648dd183b2c0451c82be1bd053a4ea8fae991436b92faebb\",\n            \"DiffID\": \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n          },\n          \"SeveritySource\": \"nvd\",\n          \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2021-28831\",\n          \"Title\": \"busybox: invalid free or segmentation fault via malformed gzip data\",\n          \"Description\": \"decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.\",\n          \"Severity\": \"HIGH\",\n          \"CweIDs\": [\n            \"CWE-755\"\n          ],\n          \"CVSS\": {\n            \"nvd\": {\n              \"V2Vector\": \"AV:N/AC:L/Au:N/C:N/I:N/A:P\",\n              \"V3Vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n              \"V2Score\": 5,\n              \"V3Score\": 7.5\n            },\n            \"redhat\": {\n              \"V3Vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n              \"V3Score\": 7.5\n            }\n          },\n          \"References\": [\n            \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28831\",\n            \"https://git.busybox.net/busybox/commit/?id=f25d254dfd4243698c31a4f3153d4ac72aa9e9bd\",\n            \"https://lists.debian.org/debian-lts-announce/2021/04/msg00001.html\",\n            \"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3UDQGJRECXFS5EZVDH2OI45FMO436AC4/\",\n            \"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z7ZIFKPRR32ZYA3WAA2NXFA3QHHOU6FJ/\",\n            \"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZASBW7QRRLY5V2R44MQ4QQM4CZIDHM2U/\",\n            \"https://security.gentoo.org/glsa/202105-09\",\n            \"https://ubuntu.com/security/notices/USN-5179-1\"\n          ],\n          \"PublishedDate\": \"2021-03-19T05:15:00Z\",\n          \"LastModifiedDate\": \"2021-05-26T10:15:00Z\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Container with Timestamp in Cosign\nDESCRIPTION: Shows how to sign a container image with a timestamp server URL in Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncosign sign --timestamp-server-url=<url> <container>\n```\n\n----------------------------------------\n\nTITLE: Basic Generate-Key Command Usage\nDESCRIPTION: Basic command syntax for generating a new signing key on a hardware token using cosign piv-tool.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_generate-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign piv-tool generate-key [flags]\n```\n\n----------------------------------------\n\nTITLE: WASM Upload Command Options\nDESCRIPTION: Available command line flags and options for the WASM upload command, including registry authentication, security, and connection settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_wasm.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -f, --file string                                                                              path to the wasm file to upload\n  -h, --help                                                                                     help for wasm\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Cosign Download Attestation Example Usage\nDESCRIPTION: Example showing how to download attestations for a specific image URI with optional predicate type filter.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_attestation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign download attestation <image uri> [--predicate-type]\n```\n\n----------------------------------------\n\nTITLE: Scoped SBOM Manifest Example\nDESCRIPTION: Example demonstrating how to scope an SBOM to a specific layer using annotations. The SBOM references only a single layer rather than the entire image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SBOM_SPEC.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 233,\n    \"digest\": \"sha256:83bd5fb5b39f65f28e50a86d48fa79c07880befc292d92eebdc18531054b070c\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"text/spdx\",\n      \"size\": 246,\n      \"digest\": \"sha256:ed3ad03d3b87843b5419d7dce9d50a3e0f45554b2ba93bf378611cae6b450cff\",\n      \"annotations\": {\n        \"dev.sigstore.sbom.scope\": \"layer=sha256:a69d803ab2179a570eda27135989ee850de53bbd98efc8f0284f13700a94149f\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Load Command Options\nDESCRIPTION: List of available options for the 'cosign load' command, including flags for registry authentication, security settings, and file paths.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_load.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --dir string                                                                               path to directory where the signed image is stored on disk\n  -h, --help                                                                                     help for load\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Example Certificate Chain in PEM Format\nDESCRIPTION: Sample PEM-encoded certificate chain containing multiple certificates used for verification. Shows standard chain format with multiple BEGIN/END certificate blocks.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_1\n\nLANGUAGE: pem\nCODE:\n```\n----BEGIN CERTIFICATE-----\nMIIB+DCCAX6gAwIBAgITNVkDZoCiofPDsy7dfm6geLbuhzAKBggqhkjOPQQDAzAq\nMRUwEwYDVQQKEwxzaWdzdG9yZS5kZXYxETAPBgNVBAMTCHNpZ3N0b3JlMB4XDTIx\nMDMwNzAzMjAyOVoXDTMxMDIyMzAzMjAyOVowKjEVMBMGA1UEChMMc2lnc3RvcmUu\nZGV2MREwDwYDVQQDEwhzaWdzdG9yZTB2MBAGByqGSM49AgEGBSuBBAAiA2IABLSy\nA7Ii5k+pNO8ZEWY0ylemWDowOkNa3kL+GZE5Z5GWehL9/A9bRNA3RbrsZ5i0Jcas\ntaRL7Sp5fp/jD5dxqc/UdTVnlvS16an+2Yfswe/QuLolRUCrcOE2+2iA5+tzd6Nm\nMGQwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYDVR0OBBYE\nFMjFHQBBmiQpMlEk6w2uSu1KBtPsMB8GA1UdIwQYMBaAFMjFHQBBmiQpMlEk6w2u\nSu1KBtPsMAoGCCqGSM49BAMDA2gAMGUCMH8liWJfMui6vXXBhjDgY4MwslmN/TJx\nVe/83WrFomwmNf056y1X48F9c4m3a3ozXAIxAKjRay5/aj/jsKKGIkmQatjI8uup\nHr/+CxFvaJWmpYqNkLDGRU+9orzh5hI2RrcuaQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICVTCCAT2gAwIBAgIQAUrAOaxMcCVQ6AwcDagmRzANBgkqhkiG9w0BAQsFADAh\nMR8wHQYDVQQDDBZZdWJpY28gUElWIEF0dGVzdGF0aW9uMCAXDTE2MDMxNDAwMDAw\nMFoYDzIwNTIwNDE3MDAwMDAwWjAlMSMwIQYDVQQDDBpZdWJpS2V5IFBJViBBdHRl\nc3RhdGlvbiA5YzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABFfnSOVAZLOTOYRs\nn4BeD3cMYHFvtwBsK8X0yJ21NKUwJ3fvnqdq0qGeIT92zstNLEWCqP3qMkhs9sh4\nwP1tHTGjTjBMMBEGCisGAQQBgsQKAwMEAwUCBjAUBgorBgEEAYLECgMHBAYCBADH\nkP4wEAYKKwYBBAGCxAoDCAQCAwIwDwYKKwYBBAGCxAoDCQQBAzANBgkqhkiG9w0B\nAQsFAAOCAQEAVRtRFpmgFD+rQqBG92HArMQ+j1FMX23QL9Z76IhaSElmN6cjgsv3\n8pJM8GL+ih6vVyCHeU6GoE9Bgj2XB02ZgkmWihnaJX2WG4VOm2dN3SqDmWFp4KLJ\nvuzVXEHWuGevwMAOsvMkmXP8HI2npaCPBmprirExbv6bxSyng4ZNHmgdzqmjYyt+\nd+ELe3xEeYYqQYx+IswHPRE5mGk/PO4hysk79mhwRNuvmygDbI8Emwvp3Pgzlgr1\nGyp4apdU7AXEwysEQIb034aPrTlpmxh90SnTZFs2DHOvCjCPPAmoWfuQUwPhSPRb\n92pXqODWYqpW8+IRED5e42Ncu9XtDgS5Pw==\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Cosign Triangulate Command Options\nDESCRIPTION: Available options for the triangulate command, including registry connection settings, authentication options, and attachment type specification.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_triangulate.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -h, --help                                                                                     help for triangulate\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --type string                                                                              related attachment to triangulate (attestation|sbom|signature|digest), default signature (sbom is deprecated) (default \"signature\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Sigstore Bundle Blob to OCI Registry\nDESCRIPTION: HTTP request to upload a Sigstore bundle as a blob to an OCI registry. The bundle is stored in its JSON-serialized form as a content-addressable blob identified by its SHA-256 digest.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/foo/blobs/uploads/?digest=cafed00d...\nContent-Type: application/octet-stream\n\n{\"mediaType\":\"application/vnd.dev.sigstore.bundle.v0.3+json\", ...}\n```\n\n----------------------------------------\n\nTITLE: Available Options for Cosign Bundle Create Command\nDESCRIPTION: Complete list of flags available for the 'cosign bundle create' command, including artifact path, attestation, certificate, and output options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_bundle_create.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --artifact string            path to artifact FILE\n      --attestation string         path to attestation FILE\n      --bundle string              path to old format bundle FILE\n      --certificate string         path to the signing certificate, likely from Fulco.\n  -h, --help                       help for create\n      --ignore-tlog                ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log.\n      --key string                 path to the public key file, KMS URI or Kubernetes Secret\n      --out string                 path to output bundle\n      --rekor-url string           address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --rfc3161-timestamp string   path to RFC3161 timestamp FILE\n      --signature string           path to base64-encoded signature over attestation in DSSE format\n      --sk                         whether to use a hardware security key\n      --slot string                security key slot to use for generated key (authentication|signature|card-authentication|key-management) (default \"signature\")\n```\n\n----------------------------------------\n\nTITLE: Cosign Upload Blob Command Options\nDESCRIPTION: Available options for the 'cosign upload blob' command, including flags for HTTP registry allowance, insecure registry connections, annotations, attachment tag prefixes, and registry authentication.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_blob.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n  -a, --annotation stringToString                                                                annotations to set (default [])\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --ct string                                                                                content type to set\n  -f, --files strings                                                                            <filepath>:[platform/arch]\n  -h, --help                                                                                     help for blob\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Attach SBOM Command\nDESCRIPTION: Basic command syntax for attaching an SBOM to a container image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_sbom.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign attach sbom [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Triangulate Command Example\nDESCRIPTION: Example showing how to use the triangulate command with an image reference.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_triangulate.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign triangulate <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Example Certificate in PEM Format\nDESCRIPTION: Sample PEM-encoded x509 certificate used for signature verification. Shows the standard certificate format with header/footer markers and base64-encoded content.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_0\n\nLANGUAGE: pem\nCODE:\n```\n-----BEGIN CERTIFICATE-----\nMIICrjCCAjSgAwIBAgIUAM4mURWUSkg06fmHmFfTmerYKaUwCgYIKoZIzj0EAwMw\nKjEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MREwDwYDVQQDEwhzaWdzdG9yZTAeFw0y\nMTA0MDExNTU5MDZaFw0yMTA0MDExNjE4NTlaMDoxGzAZBgNVBAoMEmRsb3JlbmNA\nZ29vZ2xlLmNvbTEbMBkGA1UEAwwSZGxvcmVuY0Bnb29nbGUuY29tMFkwEwYHKoZI\nzj0CAQYIKoZIzj0DAQcDQgAE3R0ZtpfBd3Y8DaXuB1gM8JPlhsDIEfXO/WsMJEN1\n4hEn8wajX2HklqL7igZPFICv6tBUGylIHp2mTH2Nhv38mqOCASYwggEiMA4GA1Ud\nDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzAMBgNVHRMBAf8EAjAAMB0G\nA1UdDgQWBBTy3UWIop0bNrdNgSrVHHD10qSASTAfBgNVHSMEGDAWgBTIxR0AQZok\nKTJRJOsNrkrtSgbT7DCBjQYIKwYBBQUHAQEEgYAwfjB8BggrBgEFBQcwAoZwaHR0\ncDovL3ByaXZhdGVjYS1jb250ZW50LTYwM2ZlN2U3LTAwMDAtMjIyNy1iZjc1LWY0\nZjVlODBkMjk1NC5zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2NhMzZhMWU5NjI0MmI5\nZmNiMTQ2L2NhLmNydDAdBgNVHREEFjAUgRJkbG9yZW5jQGdvb2dsZS5jb20wCgYI\nKoZIzj0EAwMDaAAwZQIwC15Gtd9F6W9lmJuoXMym9DfWlBpK5HEPak38WPXqowRp\n6p+2/3jSLkFT5Nn5fuISAjEAouVlX4zH2rlkfg45HnDJax7o6ZV+E0/6BdAms44D\nEj6T/GLK6XJSB28haSPRWB7k\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Cosign Initialize Command Options in Markdown\nDESCRIPTION: Detailed list of available options for the 'cosign initialize' command. These options allow users to customize the initialization process, including specifying custom mirrors, root files, and checksums for enhanced security and flexibility.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_initialize.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n  -h, --help                   help for initialize\n      --mirror string          GCS bucket to a SigStore TUF repository, or HTTP(S) base URL, or file:/// for local filestore remote (air-gap) (default \"https://tuf-repo-cdn.sigstore.dev\")\n      --root string            path to trusted initial root. defaults to embedded root\n      --root-checksum string   checksum of the initial root, required if root is downloaded via http(s). expects sha256 by default, can be changed to sha512 by providing sha512:<checksum>\n```\n\n----------------------------------------\n\nTITLE: Displaying Cosign Manifest Verify Command Options\nDESCRIPTION: Shows the specific options available for the 'cosign manifest verify' command, including the option to verify RFC3161 timestamps.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest_verify.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --use-signed-timestamps                                                                    verify rfc3161 timestamps\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Clean Command\nDESCRIPTION: Basic usage of the cosign clean command to remove signatures from an image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_clean.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign clean [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Verify-Attestation Command\nDESCRIPTION: The basic command syntax for verifying attestations using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-attestation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify-attestation [flags]\n```\n\n----------------------------------------\n\nTITLE: Sigstore Bundle JSON Structure\nDESCRIPTION: JSON format of the Sigstore bundle content, showing its basic structure with mediaType, verificationMaterial, and messageSignature fields. This is the actual content that gets stored and retrieved as a blob.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n  \"verificationMaterial\": {...},\n  \"messageSignature\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Trivy Container Image Scan in Shell\nDESCRIPTION: Demonstrates how to run a Trivy vulnerability scan on an Alpine 3.12 container image and output the results in JSON format.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/COSIGN_VULN_ATTESTATION_SPEC.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ trivy image -f json alpine:3.12\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach Signature Command Syntax\nDESCRIPTION: The basic syntax for the cosign attach signature command, which is used to attach signatures to container images.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_signature.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign attach signature [flags]\n```\n\n----------------------------------------\n\nTITLE: Encrypted Private Key Format in PEM\nDESCRIPTION: Example of the PEM format used for storing encrypted private keys in Cosign. Keys are encrypted using scrypt KDF and nacl/secretbox.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n-----BEGIN ENCRYPTED SIGSTORE PRIVATE KEY-----\n...\n-----END ENCRYPTED SIGSTORE PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Bundle Create Command\nDESCRIPTION: Basic command syntax for creating a Sigstore protobuf bundle by supplying signed material.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_bundle_create.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign bundle create [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Triangulate Command Syntax\nDESCRIPTION: The basic syntax for the cosign triangulate command which outputs the location where cosign stores the specified artifact type.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_triangulate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign triangulate [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign Trusted Root Creation Command\nDESCRIPTION: Command syntax for creating a Sigstore protobuf trusted root using cosign. This command allows users to supply verification material to create the trusted root.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_trusted-root_create.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncosign trusted-root create [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Download SBOM Command Syntax\nDESCRIPTION: Shows the basic syntax for the cosign download sbom command with flags.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_sbom.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign download sbom [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Generate-Key-Pair Command Options\nDESCRIPTION: Available command-line flags specific to the generate-key-pair command, including help documentation and options for specifying KMS services and output filenames.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate-key-pair.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                       help for generate-key-pair\n      --kms string                 create key pair in KMS service to use for signing\n      --output-key-prefix cosign   name used for generated .pub and .key files (defaults to cosign) (default \"cosign\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sigstore Bundle Manifest\nDESCRIPTION: HTTP request to retrieve the OCI manifest for a specific Sigstore bundle using its digest. This manifest contains references to the bundle blob and the subject image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /v2/foo/manifests/sha256:badf00d..\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Cosign\nDESCRIPTION: Command to execute all unit tests for the Cosign project. Ensures that all tests pass without failures or errors.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Alpine Linux Container Vulnerability Report JSON\nDESCRIPTION: Detailed vulnerability scan results for alpine:3.12 Docker image showing CVE findings for busybox and ssl_client packages. Includes severity ratings, CVSS scores, references, and vulnerability descriptions.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/COSIGN_VULN_ATTESTATION_SPEC.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Image\": \"sha256:7d1c1e4b291dc9519b43a2b9c9330655927f6dfde90d36ef5fd16b2ae0f28bbc\",\n  \"Results\": [\n    {\n      \"Target\": \"alpine:3.12 (alpine 3.12.9)\",\n      \"Class\": \"os-pkgs\",\n      \"Type\": \"alpine\",\n      \"Vulnerabilities\": [\n        {\n          \"VulnerabilityID\": \"CVE-2021-28831\",\n          \"PkgName\": \"busybox\",\n          \"InstalledVersion\": \"1.31.1-r21\",\n          \"FixedVersion\": \"1.32.1-r4\",\n          \"Layer\": {\n            \"Digest\": \"sha256:8572bc8fb8a32061648dd183b2c0451c82be1bd053a4ea8fae991436b92faebb\",\n            \"DiffID\": \"sha256:eb4bde6b29a6746e0779f80a09ca6f0806de61475059f7d56d6e20f6cc2e15f7\"\n          },\n          \"SeveritySource\": \"nvd\",\n          \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2021-28831\",\n          \"Title\": \"busybox: invalid free or segmentation fault via malformed gzip data\"\n        }\n      ]\n    }\n  ],\n  \"metadata\": {\n    \"scanStartedOn\": \"2021-08-06T17:45:50.52Z\",\n    \"scanFinishedOn\": \"2021-08-06T17:50:50.52Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PIV Tool Attestation Command\nDESCRIPTION: Base command for managing hardware token attestations in Cosign. Supports output formatting and slot selection for key generation.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_attestation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign piv-tool attestation [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of cosign tree Command\nDESCRIPTION: Example showing how to use the cosign tree command with a container image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_tree.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  cosign tree <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Building Cosign and Conformance Executables\nDESCRIPTION: Commands to build both the Cosign main executable and the conformance test adapter. These are prerequisites for running conformance tests.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake cosign conformance\n```\n\n----------------------------------------\n\nTITLE: Displaying ASCII Output from Cosign Version Command\nDESCRIPTION: Demonstrates the expected ASCII art output format of the 'cosign version' command, including the Cosign logo and version metadata details such as Git version, commit hash, Git tree state, build date, Go version, compiler, and platform.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign version\n  ______   ______        _______. __    _______ .__   __.\n /      | /  __  \\      /       ||  |  /  _____||  \\ |  |\n|  ,----'|  |  |  |    |   (----`|  | |  |  __  |   \\|  |\n|  |     |  |  |  |     \\   \\    |  | |  | |_ | |  . `  |\n|  `----.|  `--'  | .----)   |   |  | |  |__| | |  |\\   |\n \\______| \\______/  |_______/    |__|  \\______| |__| \\__|\ncosign: A tool for Container Signing, Verification and Storage in an OCI registry.\n\nGitVersion:    [vX.Y.Z or devel]\nGitCommit:     [hash or unknown]\nGitTreeState:  [clean or dirty]\nBuildDate:     [yyyy-MM-ddThh:mm:ss or unknown]\nGoVersion:     go1.A.B\nCompiler:      gc\nPlatform:      os/arch\n```\n\n----------------------------------------\n\nTITLE: Installing Zsh Completion for Cosign\nDESCRIPTION: Commands for enabling and installing Zsh completion for cosign. Includes the steps to enable shell completion in Zsh if not already enabled, and how to install cosign completions.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\n# If shell completion is not already enabled in your environment,\n# you will need to enable it.  You can execute the following once:\n$ echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n# To load completions for each session, execute once:\n$ cosign completion zsh > \"${fpath[1]}/_cosign\"\n# You will need to start a new shell for this setup to take effect.\n```\n\n----------------------------------------\n\nTITLE: Deprecation Warning Message Format in Cosign CLI\nDESCRIPTION: Example format for deprecation warning messages that are displayed when users invoke deprecated behavior in Cosign. The message includes the deprecated behavior, removal date, GitHub issue link, and suggested alternative.\nSOURCE: https://github.com/sigstore/cosign/blob/main/VERSIONING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nWARNING: $BEHAVIOR is deprecated and will be removed in a Cosign release\nsoon after $DEPRECATION_DATE (see $GITHUB_ISSUE_LINK). Instead, please\n$ALTERNATIVE.\n```\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Initialize in Markdown\nDESCRIPTION: Options inherited from parent commands that can be used with the 'cosign initialize' command. These options provide additional functionality such as output logging, command timeout settings, and verbose debug output.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_initialize.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Copy Command Options\nDESCRIPTION: Detailed list of available flags and options for the cosign copy command, including registry configuration, security settings, and filtering options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_copy.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -f, --force                                                                                    overwrite destination image(s), if necessary\n  -h, --help                                                                                     help for copy\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --only strings                                                                             custom string array to only copy specific items, this flag is comma delimited. ex: --only=sig,att,sbom\n      --platform string                                                                          only copy container image and its signatures for a specific platform image\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --sig-only                                                                                 [DEPRECATED] only copy the image signature\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Clean Command\nDESCRIPTION: Options inherited from parent commands, including output file specification, timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_clean.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign PIV Tool Unblock Command in Bash\nDESCRIPTION: This command unblocks the hardware token and sets a new PIN. It can be run with various options to specify the new PIN and existing PUK.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_unblock.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign piv-tool unblock [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Download Signature Command\nDESCRIPTION: Basic usage of the 'cosign download signature' command to download signatures from a container image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_signature.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncosign download signature [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional options inherited from parent commands that affect the generate-key operation, including input handling, output logging, timeout settings, and verbosity control.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_generate-key.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign Environment Variables Command in Bash\nDESCRIPTION: This command prints Cosign environment variables. It can be customized with flags to show descriptions and sensitive values.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_env.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign env [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Clean Command Example\nDESCRIPTION: Example of using the cosign clean command with an image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_clean.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign clean <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Cosign PIV Tool Set PUK Command Options\nDESCRIPTION: These are the specific options available for the 'set-puk' command. They allow specifying help output, new PUK, and old PUK values.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-puk.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help             help for set-puk\n      --new-puk string   new PUK, uses default if empty\n      --old-puk string   existing PUK, uses default if empty\n```\n\n----------------------------------------\n\nTITLE: Example OCI Image Manifest with Attestation in JSON\nDESCRIPTION: An example of an OCI Image Manifest V1 containing one attestation as a layer. The attestation uses the DSSE envelope format with mediaType 'application/vnd.dsse.envelope.v1+json'.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/ATTESTATION_SPEC.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 233,\n    \"digest\": \"sha256:83bd5fb5b39f65f28e50a86d48fa79c07880befc292d92eebdc18531054b070c\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.dsse.envelope.v1+json\",\n      \"size\": 246,\n      \"digest\": \"sha256:ed3ad03d3b87843b5419d7dce9d50a3e0f45554b2ba93bf378611cae6b450cff\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cosign Environment Command Options in Bash\nDESCRIPTION: These are the specific options available for the 'cosign env' command. They allow users to control the display of help information, environment variable descriptions, and sensitive values.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_env.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                    help for env\n      --show-descriptions       show descriptions for environment variables (default true)\n      --show-sensitive-values   show values of sensitive environment variables\n```\n\n----------------------------------------\n\nTITLE: Setting PIN Using Cosign PIV Tool Command\nDESCRIPTION: Main command syntax for setting a PIN on a hardware token using cosign piv-tool.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-pin.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign piv-tool set-pin [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Options inherited from parent commands that can be used with the 'cosign bundle create' command, including output file specification, timeout settings, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_bundle_create.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Download Signature\nDESCRIPTION: Options inherited from parent commands, including output file specification, timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_signature.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Import Key Pair Options\nDESCRIPTION: Command-specific options for the import-key-pair command, including parameters for specifying the key file, output naming, and confirmation behavior.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_import-key-pair.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help                       help for import-key-pair\n  -k, --key string                 import key pair to use for signing\n  -o, --output-key-prefix string   name used for outputted key pairs (default \"import-cosign\")\n  -y, --yes                        skip confirmation prompts for overwriting existing key\n```\n\n----------------------------------------\n\nTITLE: Installing Fish Completion for Cosign\nDESCRIPTION: Commands for loading and installing Fish shell completion for cosign. Shows how to apply completions temporarily for the current session or permanently by installing to fish completions directory.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n$ cosign completion fish | source\n# To load completions for each session, execute once:\n$ cosign completion fish > ~/.config/fish/completions/cosign.fish\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options for Cosign Attach\nDESCRIPTION: Lists the options inherited from parent commands including output file configuration, timeout settings, and verbosity control.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional command line options inherited from parent commands, including output file specification, timeout duration, and verbose logging options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Basic Reset Command Usage\nDESCRIPTION: The basic command syntax for resetting a hardware token using cosign piv-tool.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_reset.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign piv-tool reset [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Attach Command Options\nDESCRIPTION: Shows the basic help option available for the cosign attach command.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for attach\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Cosign Manifest Verify Command\nDESCRIPTION: Displays the options inherited from parent commands, including output file specification, timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest_verify.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing a New Release Version\nDESCRIPTION: Shell commands to create a signed Git tag for the new release version and push it to the upstream repository. This triggers the release process.\nSOURCE: https://github.com/sigstore/cosign/blob/main/release/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ export RELEASE_TAG=<release version, eg \"v2.0.2\">\n$ git tag -s ${RELEASE_TAG} -m \"${RELEASE_TAG}\"\n$ git push upstream ${RELEASE_TAG}\n```\n\n----------------------------------------\n\nTITLE: Cosign Download Inherited Options\nDESCRIPTION: Global options inherited from parent commands including output file configuration, timeout settings, and verbosity control.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Parent Command Options\nDESCRIPTION: Options inherited from the parent cosign command, including output file configuration, timeout settings, and verbose mode.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attest-blob.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Displaying Annotated Sigstore Bundles in OCI Image Index\nDESCRIPTION: This JSON snippet demonstrates how annotations are reflected in the OCI image index for multiple Sigstore bundles. It shows how the annotations provide clear distinctions between different types of attestations, their content, and creation times.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n  \"schemaVersion\": 2,\n  \"manifests\": [\n    {\n      \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"digest\": \"sha256:facefeed\",\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"annotations\": {\n        \"dev.sigstore.bundle.content\": \"message-signature\",\n        \"org.opencontainers.image.created\": \"2024-03-07T18:17:38.000Z\"\n      }\n    },\n    {\n      \"artifactType\": \"application/vnd.dev.sigstore.bundle.v0.3+json\",\n      \"digest\": \"sha256:d0d0caca\",\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"annotations\": {\n        \"dev.sigstore.bundle.content\": \"dsse-envelope\",\n        \"dev.sigstore.bundle.predicateType\": \"https://slsa.dev/provenance/v1\",\n        \"org.opencontainers.image.created\": \"2024-03-08T18:18:20.406Z\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks for Cosign\nDESCRIPTION: Command to perform linting checks on the Cosign codebase. Helps maintain code quality and consistency.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Cosign Download Base Command Options\nDESCRIPTION: Command line options available for the base 'cosign download' command, showing the help flag option.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for download\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Version Command\nDESCRIPTION: Shows the basic syntax for running the cosign version command to display version information.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_version.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign version [flags]\n```\n\n----------------------------------------\n\nTITLE: Cosign Copy Inherited Options\nDESCRIPTION: Options that are inherited from parent commands and can be used with the copy command, including output file configuration, timeout settings, and verbosity controls.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_copy.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign PIV Tool Set-PIN Options\nDESCRIPTION: Specific options available for the set-pin command including new and old PIN configuration.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-pin.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for set-pin\n      --new-pin string   new PIN, uses default if empty\n      --old-pin string   existing PIN, uses default if empty\n```\n\n----------------------------------------\n\nTITLE: Set Management Key Command Options\nDESCRIPTION: Available specific flags for the set-management-key command including new key configuration, old key specification, and random key generation options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-management-key.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                    help for set-management-key\n      --new-key string          new management key, uses default if empty\n      --old-key string          existing management key, uses default if empty\n      --random-management-key   if set to true, generates a new random management key and deletes it after\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for cosign upload Command\nDESCRIPTION: This code snippet shows the available options specific to the 'cosign upload' command. It includes a help option for displaying command usage information.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for upload\n```\n\n----------------------------------------\n\nTITLE: Basic Dockerfile Command Options\nDESCRIPTION: Core command line options for the cosign dockerfile command, showing the help flag option.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for dockerfile\n```\n\n----------------------------------------\n\nTITLE: Loading Signed Image with Cosign\nDESCRIPTION: Example command for loading a signed image from a directory to a remote registry using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_load.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncosign load --dir <path to directory> <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Command Options for 'cosign trusted-root'\nDESCRIPTION: This snippet shows the help options available for the 'cosign trusted-root' command. It includes the help flag that provides command usage information.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_trusted-root.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for trusted-root\n```\n\n----------------------------------------\n\nTITLE: Configuring Inherited CLI Options in Cosign\nDESCRIPTION: Command line options that are available across multiple Cosign commands. Includes options for directing output to a file, setting command timeout duration (defaults to 3 minutes), and enabling verbose debug logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-attestation.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Login Command\nDESCRIPTION: Options inherited from parent commands that can be used with the login command, including output file specification, timeout setting, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_login.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Triangulate Command Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the triangulate command, including output file specification, timeout settings, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_triangulate.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Basic WASM Upload Command\nDESCRIPTION: The basic command syntax for uploading a WASM module using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_wasm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign upload wasm [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Cosign PKCS11-Tool List-Tokens Command\nDESCRIPTION: The basic command syntax for listing all PKCS11 tokens linked to a PKCS11 module using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool_list-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign pkcs11-tool list-tokens [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Output from Cosign Version Command\nDESCRIPTION: Shows the expected JSON output format when using the 'cosign version --json' command. The JSON structure includes metadata fields such as Git version, commit hash, Git tree state, build date, Go version, compiler, and platform.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CLI.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign version --json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitVersion\": \"[vX.Y.Z or devel]\",\n  \"gitCommit\": \"[hash or unknown]\",\n  \"gitTreeState\": \"[clean or dirty]\",\n  \"buildDate\": \"[yyyy-MM-ddThh:mm:ss or unknown]\",\n  \"goVersion\": \"go1.A.B\",\n  \"compiler\": \"gc\",\n  \"platform\": \"os/arch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Download Attestation Command\nDESCRIPTION: Basic command syntax for downloading attestations using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_attestation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign download attestation [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the reset command, including input control, output logging, timeout settings, and debug verbosity.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_reset.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Sign-Blob Inherited Options\nDESCRIPTION: Shows command options inherited from parent commands including output file configuration and timeout settings\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign-blob.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Options for Cosign PKCS11 Tool\nDESCRIPTION: This snippet shows the options inherited from parent commands for the 'cosign pkcs11-tool' command. It includes options for output file, timeout, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign PIV Tool Unblock Command in Markdown\nDESCRIPTION: Lists the options inherited from parent commands, including no-input, output-file, timeout, and verbose options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_unblock.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Copy Command Syntax\nDESCRIPTION: The basic syntax for the cosign copy command, which requires source and destination image parameters.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_copy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign copy [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign PIV Tool\nDESCRIPTION: This snippet displays the options inherited from parent commands. It includes options for specifying an output file, setting a timeout duration, and enabling verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Parent Command Options Inherited by list-keys-uris\nDESCRIPTION: Options inherited from parent commands that apply to the list-keys-uris command, including flags for non-interactive operation, output redirection, command timeout, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool_list-keys-uris.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Base Command Syntax for Cosign Generate\nDESCRIPTION: The basic syntax for the cosign generate command with flags\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Cosign PIV Tool\nDESCRIPTION: This snippet shows the available options for the 'cosign piv-tool' command. It includes options for help and skipping warnings and confirmations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help       help for piv-tool\n  -f, --no-input   skip warnings and confirmations\n```\n\n----------------------------------------\n\nTITLE: Getting Git Log of Changes Since Last Release\nDESCRIPTION: Git command to list all pull request titles merged since a specific date, useful for preparing release notes.\nSOURCE: https://github.com/sigstore/cosign/blob/main/release/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit log --pretty=\"* %s\" --after=\"YYYY-MM-DD\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Upload Blob Command\nDESCRIPTION: Options inherited from parent commands for the 'cosign upload blob' command, including output file specification, timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_blob.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Command Options for Cosign Bundle\nDESCRIPTION: Lists the available options specific to the cosign bundle command, showing just the help flag option.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_bundle.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for bundle\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sigstore Bundles via Referrers API\nDESCRIPTION: HTTP request to retrieve all artifacts associated with an image using the OCI referrers API. This returns an image index listing all artifacts (including Sigstore bundles) linked to the specified image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /v2/foo/referrers/sha256:c000100ff...\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Shows the options inherited from parent commands including output file specification, timeout duration, and verbosity settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_bundle.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Global Options for Cosign Commands\nDESCRIPTION: Shows the global options inherited from parent commands, including output file configuration, timeout settings, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_version.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Sign-Blob Command Options\nDESCRIPTION: Lists all available command line options for the sign-blob command including authentication, output, and security configurations\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_sign-blob.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --b64                              whether to base64 encode the output (default true)\n      --bundle string                    write everything required to verify the blob to a FILE\n      --fulcio-auth-flow string          fulcio interactive oauth2 flow to use for certificate from fulcio. Defaults to determining the flow based on the runtime environment. (options) normal|device|token|client_credentials\n      --fulcio-url string                address of sigstore PKI server (default \"https://fulcio.sigstore.dev\")\n  -h, --help                             help for sign-blob\n      --identity-token string            identity token to use for certificate from fulcio. the token or a path to a file containing the token is accepted.\n      --insecure-skip-verify             skip verifying fulcio published to the SCT (this should only be used for testing).\n      --issue-certificate                issue a code signing certificate from Fulcio, even if a key is provided\n      --key string                       path to the private key file, KMS URI or Kubernetes Secret\n      --new-bundle-format                output bundle in new format that contains all verification material\n      --oidc-client-id string           OIDC client ID for application (default \"sigstore\")\n      --oidc-client-secret-file string   Path to file containing OIDC client secret for application\n      --oidc-disable-ambient-providers   Disable ambient OIDC providers. When true, ambient credentials will not be read\n      --oidc-issuer string              OIDC provider to be used to issue ID token (default \"https://oauth2.sigstore.dev/auth\")\n      --oidc-provider string             Specify the provider to get the OIDC token from (Optional). If unset, all options will be tried. Options include: [spiffe, google, github-actions, filesystem, buildkite-agent]\n      --oidc-redirect-url string         OIDC redirect URL (Optional). The default oidc-redirect-url is 'http://localhost:0/auth/callback'.\n      --output string                    write the signature to FILE\n      --output-certificate string        write the certificate to FILE\n      --output-signature string          write the signature to FILE\n      --rekor-url string                address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --rfc3161-timestamp string         write the RFC3161 timestamp to a file\n      --sk                               whether to use a hardware security key\n      --slot string                      security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-client-cacert string   path to the X.509 CA certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-cert string     path to the X.509 certificate file in PEM format to be used for the connection to the TSA Server\n      --timestamp-client-key string     path to the X.509 private key file in PEM format to be used, together with the 'timestamp-client-cert' value, for the connection to the TSA Server\n      --timestamp-server-name string     SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the TSA Server\n      --timestamp-server-url string      url to the Timestamp RFC3161 server, default none. Must be the path to the API to request timestamp responses, e.g. https://freetsa.org/tsr\n      --tlog-upload                      whether or not to upload to the tlog (default true)\n  -y, --yes                              skip confirmation prompts for non-destructive operations\n```\n\n----------------------------------------\n\nTITLE: Cosign Inherited Command Options\nDESCRIPTION: Global options that apply to all cosign commands, inherited from parent commands, including output file configuration, timeout settings, and verbosity controls.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_import-key-pair.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sigstore Bundles via Referrers Tag (Fallback)\nDESCRIPTION: HTTP request to retrieve artifacts using the referrers tag scheme when the registry doesn't support the referrers API. This is used as a fallback mechanism for compatibility.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/BUNDLE_SPEC.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /v2/foo/manifests/sha256-c000100ff...\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Commands\nDESCRIPTION: This code block lists the options inherited from parent commands in cosign. It includes options for specifying output file, setting timeout duration, and enabling verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Completion Command Options\nDESCRIPTION: The available options specific to the cosign completion command. Currently, only the help flag is available.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Cosign Clean Command Options\nDESCRIPTION: Available options for the cosign clean command, including flags for registry authentication, HTTP allowance, and attachment tag prefixes.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_clean.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n  -f, --force                                                                                    do not prompt for confirmation\n  -h, --help                                                                                     help for clean\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --type CLEAN_TYPE                                                                          a type of clean: <signature|attestation|sbom|all> (sbom is deprecated) (default all)\n```\n\n----------------------------------------\n\nTITLE: Cosign Command Options - Primary Flags\nDESCRIPTION: Main command flags for Cosign including trusted root path and timestamp verification settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile_verify.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--trusted-root string                                                                      Path to a Sigstore TrustedRoot JSON file. Requires --new-bundle-format to be set.\n--use-signed-timestamps                                                                    verify rfc3161 timestamps\n```\n\n----------------------------------------\n\nTITLE: Listing Cosign Verify Command Options in Bash\nDESCRIPTION: This code snippet presents the available command-line options for the 'cosign verify' command. It includes options for registry access, certificate handling, security settings, and output formatting. The options are designed to provide flexibility in verifying signatures and attestations across different environments and use cases.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest_verify.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --allow-http-registry                                                                      whether to allow using HTTP protocol while connecting to registries. Don't use this for anything but testing\n      --allow-insecure-registry                                                                  whether to allow insecure connections to registries (e.g., with expired or self-signed TLS certificates). Don't use this for anything but testing\n  -a, --annotations strings                                                                      extra key=value pairs to sign\n      --attachment string                                                                        DEPRECATED, related image attachment to verify (sbom), default none\n      --attachment-tag-prefix [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]   optional custom prefix to use for attached image tags. Attachment images are tagged as: [AttachmentTagPrefix]sha256-[TargetImageDigest].[AttachmentName]\n      --ca-intermediates string                                                                  path to a file of intermediate CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. The flag is optional and must be used together with --ca-roots, conflicts with --certificate-chain.\n      --ca-roots string                                                                          path to a bundle file of CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. Conflicts with --certificate-chain.\n      --certificate string                                                                       path to the public certificate. The certificate will be verified against the Fulcio roots if the --certificate-chain option is not passed.\n      --certificate-chain string                                                                 path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Conflicts with --ca-roots and --ca-intermediates.\n      --certificate-github-workflow-name string                                                  contains the workflow claim from the GitHub OIDC Identity token that contains the name of the executed workflow.\n      --certificate-github-workflow-ref string                                                   contains the ref claim from the GitHub OIDC Identity token that contains the git ref that the workflow run was based upon.\n      --certificate-github-workflow-repository string                                            contains the repository claim from the GitHub OIDC Identity token that contains the repository that the workflow run was based upon\n      --certificate-github-workflow-sha string                                                   contains the sha claim from the GitHub OIDC Identity token that contains the commit SHA that the workflow run was based upon.\n      --certificate-github-workflow-trigger string                                               contains the event_name claim from the GitHub OIDC Identity token that contains the name of the event that triggered the workflow run\n      --certificate-identity string                                                              The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-identity-regexp string                                                       A regular expression alternative to --certificate-identity. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-oidc-issuer string                                                           The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --certificate-oidc-issuer-regexp string                                                    A regular expression alternative to --certificate-oidc-issuer. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --check-claims                                                                             whether to check the claims found (default true)\n      --experimental-oci11                                                                       set to true to enable experimental OCI 1.1 behaviour\n  -h, --help                                                                                     help for verify\n      --insecure-ignore-sct                                                                      when set, verification will not check that a certificate contains an embedded SCT, a proof of inclusion in a certificate transparency log\n      --insecure-ignore-tlog                                                                     ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log. Artifacts cannot be publicly verified when not included in a log\n      --k8s-keychain                                                                             whether to use the kubernetes keychain instead of the default keychain (supports workload identity).\n      --key string                                                                               path to the public key file, KMS URI or Kubernetes Secret\n      --local-image                                                                              whether the specified image is a path to an image saved locally via 'cosign save'\n      --max-workers int                                                                          the amount of maximum workers for parallel executions (default 10)\n      --new-bundle-format                                                                        expect the signature/attestation to be packaged in a Sigstore bundle\n      --offline                                                                                  only allow offline verification\n  -o, --output string                                                                            output format for the signing image information (json|text) (default \"json\")\n      --payload string                                                                           payload path or remote URL\n      --private-infrastructure                                                                   skip transparency log verification when verifying artifacts in a privately deployed infrastructure\n      --registry-cacert string                                                                   path to the X.509 CA certificate file in PEM format to be used for the connection to the registry\n      --registry-client-cert string                                                              path to the X.509 certificate file in PEM format to be used for the connection to the registry\n      --registry-client-key string                                                               path to the X.509 private key file in PEM format to be used, together with the 'registry-client-cert' value, for the connection to the registry\n      --registry-password string                                                                 registry basic auth password\n      --registry-server-name string                                                              SAN name to use as the 'ServerName' tls.Config field to verify the mTLS connection to the registry\n      --registry-token string                                                                    registry bearer auth token\n      --registry-username string                                                                 registry basic auth username\n      --rekor-url string                                                                         address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --sct string                                                                               path to a detached Signed Certificate Timestamp, formatted as a RFC6962 AddChainResponse struct. If a certificate contains an SCT, verification will check both the detached and embedded SCTs.\n      --signature string                                                                         signature content or path or remote URL\n      --signature-digest-algorithm string                                                        digest algorithm to use when processing a signature (sha224|sha256|sha384|sha512) (default \"sha256\")\n      --sk                                                                                       whether to use a hardware security key\n      --slot string                                                                              security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-certificate-chain string                                                       path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamp\n      --trusted-root string                                                                      Path to a Sigstore TrustedRoot JSON file. Requires --new-bundle-format to be set.\n```\n\n----------------------------------------\n\nTITLE: Cosign Command Options - Inherited Flags\nDESCRIPTION: Global options inherited from parent commands including output file configuration, timeout settings, and verbosity control.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_dockerfile_verify.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Building Cosign with Make\nDESCRIPTION: Command to build Cosign locally using the Make tool. This is a prerequisite step for development and testing.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake cosign\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Global options inherited from parent commands including timeout, verbosity, and output settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-pin.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Cosign PKCS11-Tool List-Tokens\nDESCRIPTION: Options specific to the list-tokens command, including help flag and the path to the PKCS11 module.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool_list-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for list-tokens\n      --module-path string   absolute path to the PKCS11 module\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Common flags inherited from parent commands that control input handling, output logging, timeout settings, and verbosity.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-management-key.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: PIV Tool Attestation Command Options\nDESCRIPTION: Specific options for the attestation command including output format selection and slot specification for key generation.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_attestation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help            help for attestation\n  -o, --output string   format to output attestation information in. (text|json) (default \"text\")\n      --slot string     Slot to use for generated key (authentication|signature|card-authentication|key-management)\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests for Cosign\nDESCRIPTION: Command to execute the conformance tests for Cosign, ensuring compatibility and adherence to standards.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake conformance-tests\n```\n\n----------------------------------------\n\nTITLE: Example of Using cosign save Command\nDESCRIPTION: Example showing how to use the cosign save command with a specified directory path and target image.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_save.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign save --dir <path to directory> <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Cosign\nDESCRIPTION: Command to generate updated documentation for the Cosign project. Ensures that documentation reflects the latest changes.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake docgen\n```\n\n----------------------------------------\n\nTITLE: Cosign Global Command Options\nDESCRIPTION: The global options that can be used with any cosign command, including the completion command. These include output file specification, timeout configuration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Lists all available options and flags for the verify-blob-attestation command including configuration for certificates, verification settings, and security parameters.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob-attestation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --bundle string                                   path to bundle FILE\n      --ca-intermediates string                         path to a file of intermediate CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. The flag is optional and must be used together with --ca-roots, conflicts with --certificate-chain.\n      --ca-roots string                                 path to a bundle file of CA certificates in PEM format which will be needed when building the certificate chains for the signing certificate. Conflicts with --certificate-chain.\n      --certificate string                              path to the public certificate. The certificate will be verified against the Fulcio roots if the --certificate-chain option is not passed.\n      --certificate-chain string                        path to a list of CA certificates in PEM format which will be needed when building the certificate chain for the signing certificate. Must start with the parent intermediate CA certificate of the signing certificate and end with the root certificate. Conflicts with --ca-roots and --ca-intermediates.\n      --certificate-github-workflow-name string         contains the workflow claim from the GitHub OIDC Identity token that contains the name of the executed workflow.\n      --certificate-github-workflow-ref string          contains the ref claim from the GitHub OIDC Identity token that contains the git ref that the workflow run was based upon.\n      --certificate-github-workflow-repository string   contains the repository claim from the GitHub OIDC Identity token that contains the repository that the workflow run was based upon\n      --certificate-github-workflow-sha string          contains the sha claim from the GitHub OIDC Identity token that contains the commit SHA that the workflow run was based upon.\n      --certificate-github-workflow-trigger string      contains the event_name claim from the GitHub OIDC Identity token that contains the name of the event that triggered the workflow run\n      --certificate-identity string                     The identity expected in a valid Fulcio certificate. Valid values include email address, DNS names, IP addresses, and URIs. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-identity-regexp string              A regular expression alternative to --certificate-identity. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-identity or --certificate-identity-regexp must be set for keyless flows.\n      --certificate-oidc-issuer string                  The OIDC issuer expected in a valid Fulcio certificate, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --certificate-oidc-issuer-regexp string           A regular expression alternative to --certificate-oidc-issuer. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --certificate-oidc-issuer or --certificate-oidc-issuer-regexp must be set for keyless flows.\n      --check-claims                                    if true, verifies the provided blob's sha256 digest exists as an in-toto subject within the attestation. If false, only the DSSE envelope is verified. (default true)\n      --experimental-oci11                              set to true to enable experimental OCI 1.1 behaviour\n  -h, --help                                            help for verify-blob-attestation\n      --insecure-ignore-sct                             when set, verification will not check that a certificate contains an embedded SCT, a proof of inclusion in a certificate transparency log\n      --insecure-ignore-tlog                            ignore transparency log verification, to be used when an artifact signature has not been uploaded to the transparency log. Artifacts cannot be publicly verified when not included in a log\n      --key string                                      path to the public key file, KMS URI or Kubernetes Secret\n      --max-workers int                                 the amount of maximum workers for parallel executions (default 10)\n      --new-bundle-format                               expect the signature/attestation to be packaged in a Sigstore bundle\n      --offline                                         only allow offline verification\n      --private-infrastructure                          skip transparency log verification when verifying artifacts in a privately deployed infrastructure\n      --rekor-url string                                address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --rfc3161-timestamp string                        path to RFC3161 timestamp FILE\n      --sct string                                      path to a detached Signed Certificate Timestamp, formatted as a RFC6962 AddChainResponse struct. If a certificate contains an SCT, verification will check both the detached and embedded SCTs.\n      --signature string                                path to base64-encoded signature over attestation in DSSE format\n      --sk                                              whether to use a hardware security key\n      --slot string                                     security key slot to use for generated key (default: signature) (authentication|signature|card-authentication|key-management)\n      --timestamp-certificate-chain string              path to PEM-encoded certificate chain file for the RFC3161 timestamp authority. Must contain the root CA certificate. Optionally may contain intermediate CA certificates, and may contain the leaf TSA certificate if not present in the timestamp\n      --trusted-root string                             Path to a Sigstore TrustedRoot JSON file. Requires --new-bundle-format to be set.\n      --type string                                     specify a predicate type (slsaprovenance|slsaprovenance02|slsaprovenance1|link|spdx|spdxjson|cyclonedx|vuln|openvex|custom) or an URI (default \"custom\")\n      --use-signed-timestamps                           verify rfc3161 timestamps\n```\n\n----------------------------------------\n\nTITLE: Using Cosign Completion Command Syntax\nDESCRIPTION: The basic syntax for the cosign completion command. This command generates shell completion scripts for the specified shell (bash, zsh, fish, or powershell).\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign completion [bash|zsh|fish|powershell]\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax\nDESCRIPTION: Shows the basic syntax for the verify-blob-attestation command.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob-attestation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify-blob-attestation [flags]\n```\n\n----------------------------------------\n\nTITLE: Base Image Layer Signing Example\nDESCRIPTION: Example JSON manifest showing how base image layers can be signed using annotations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 7023,\n    \"digest\": \"sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n      \"size\": 32654,\n      \"digest\": \"sha256:9834876dcfb05cb167a5c24953eba58c4ac89b1adf57f28f2f9d09af107ee8f0\"\n    },\n    {\n      \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n      \"size\": 16724,\n      \"digest\": \"sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b\",\n      \"annotations\": {\n        \"dev.cosign.signature.baseimage\": \"Ejy6ipGJjUzMDoQFePWixqPBYF0iSnIvpMWps3mlcYNSEcRRZelL7GzimKXaMjxfhy5bshNGvDT5QoUJ0tqUAg==\"\n      }\n    },\n    {\n      \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n      \"size\": 73109,\n      \"digest\": \"sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Completion for Cosign\nDESCRIPTION: Commands for loading and installing PowerShell completion for cosign. Shows how to apply completions temporarily for the current session or permanently by sourcing a completion file from the PowerShell profile.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_completion.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nPS> cosign completion powershell | Out-String | Invoke-Expression\n# To load completions for every new session, run:\nPS> cosign completion powershell > cosign.ps1\n# and source this file from your PowerShell profile.\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Environment Command in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'cosign env' command. They provide functionality for logging output to a file, setting command timeouts, and enabling verbose debug output.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_env.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: WASM Upload Example\nDESCRIPTION: Example showing how to upload a WASM file to a specific image URI using the -f flag to specify the file path.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_wasm.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncosign upload wasm -f foo.wasm <image uri>\n```\n\n----------------------------------------\n\nTITLE: Cosign Download Attestation Inherited Options\nDESCRIPTION: Additional command options inherited from parent commands, including output and timeout configuration.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_attestation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for Cosign Generate-Key-Pair\nDESCRIPTION: Command-line options inherited from parent commands, including output file specification, timeout duration, and debug output verbosity.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate-key-pair.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Download SBOM Inherited Command Options\nDESCRIPTION: Options that are inherited from parent commands that can be used with the download sbom command.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_download_sbom.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options in Cosign\nDESCRIPTION: Global options inherited from parent commands that can be used with the public-key command, including timeout and verbosity settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_public-key.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    --output-file string   log output to a file\n-t, --timeout duration     timeout for commands (default 3m0s)\n-d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign Trusted Root Creation\nDESCRIPTION: Options inherited from parent commands for the 'cosign trusted-root create' command. These options provide functionality for logging output to a file, setting command timeouts, and enabling verbose debug output.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_trusted-root_create.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Cosign Manifest Command\nDESCRIPTION: Displays options inherited from parent commands, including output file specification, timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Referenced Payload in OCI Image Layer\nDESCRIPTION: Example showing how a payload is referenced as a layer in an OCI Image Manifest, including its content-addressable digest, size, and mediaType that identifies it as a Cosign simple signing payload.\nSOURCE: https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.dev.cosign.simplesigning.v1+json\",\n  \"size\": 210,\n  \"digest\": \"sha256:1119abab63e605dcc281019bad0424744178b6f61ba57378701fe7391994c999\",\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands for PKCS11-Tool\nDESCRIPTION: Options that are inherited from parent commands, including flags for skipping confirmations, logging outputs, setting timeouts, and enabling verbose mode.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool_list-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that are inherited from parent commands and can be used with the tree command, including output file specification, timeout duration, and verbosity control.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_tree.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Cosign PIV Tool Commands\nDESCRIPTION: These options are inherited from parent commands and apply to all PIV tool commands. They include options for skipping confirmations, logging output, setting timeouts, and enabling verbose output.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-puk.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for cosign upload Command\nDESCRIPTION: This code block displays the options inherited from parent commands. It includes options for specifying an output file, setting a timeout duration, and enabling verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign PIV Tool Unblock Command Options in Markdown\nDESCRIPTION: Lists the specific options available for the 'cosign piv-tool unblock' command, including help, new PIN, and PUK options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_unblock.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n  -h, --help             help for unblock\n      --new-PIN string   new PIN, uses default if empty\n      --puk string       existing PUK, uses default if empty\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands when using 'cosign attach sbom', including output file specification, timeout settings, and verbosity controls.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_sbom.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Attach Signature Inherited Options\nDESCRIPTION: Command-line options inherited from parent commands that can be used with the cosign attach signature command.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_signature.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands, including output file specification, timeout settings, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_upload_wasm.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Displaying PKCS11 Tool Options in Cosign\nDESCRIPTION: This snippet shows the available options for the 'cosign pkcs11-tool' command. It includes options for help and skipping warnings and confirmations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help       help for pkcs11-tool\n  -f, --no-input   skip warnings and confirmations\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Cosign Manifest Command\nDESCRIPTION: Shows the available options specific to the 'cosign manifest' command. In this case, only the help option is available.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for manifest\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Lists options that are inherited from parent commands including output file configuration and timeout settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_verify-blob-attestation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that affect the behavior of the attach attestation command.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_attestation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for Cosign Generate\nDESCRIPTION: Options inherited from parent commands that can be used with the generate command\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_generate.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands when using cosign save, including output file specification, timeout configuration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_save.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Cosign Version Command Options\nDESCRIPTION: Lists the available flags specific to the version command, including help and JSON output options.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_version.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for version\n      --json   print JSON instead of text\n```\n\n----------------------------------------\n\nTITLE: Cosign Load Inherited Options\nDESCRIPTION: Options inherited from parent commands for the 'cosign load' command, including output file, timeout, and verbosity settings.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_load.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: This snippet displays options that are inherited from parent commands. It includes options for output file specification, command timeout duration, and verbose logging.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_trusted-root.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Basic Cosign Attach Attestation Command\nDESCRIPTION: The basic command syntax for attaching attestations to container images using cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_attach_attestation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign attach attestation [flags]\n```\n\n----------------------------------------\n\nTITLE: Public Key Format in PEM\nDESCRIPTION: Standard PKIX format for storing public keys with PEM encoding.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAELigCnlLNKgOglRTx1D7JhI7eRw99\nQolE9Jo4QUxnbMy5nUuBL+UZF9qqfm/Dg1BNeHRThHzWh2ki9vAEgWEDOw==\n-----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Inherited PIV Tool Command Options\nDESCRIPTION: Global options inherited from parent commands including timeout settings, verbosity controls, and output configurations.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_attestation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --no-input             skip warnings and confirmations\n      --output-file string   log output to a file\n  -t, --timeout duration     timeout for commands (default 3m0s)\n  -d, --verbose              log debug output\n```\n\n----------------------------------------\n\nTITLE: Pushing Artifact with ORAS\nDESCRIPTION: Example of pushing an artifact to a registry using ORAS tool.\nSOURCE: https://github.com/sigstore/cosign/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ oras push us-central1-docker.pkg.dev/dlorenc-vmtest2/test/artifact ./cosign\nUploading f53604826795 cosign\nPushed us-central1-docker.pkg.dev/dlorenc-vmtest2/test/artifact\nDigest: sha256:551e6cce7ed2e5c914998f931b277bc879e675b74843e6f29bc17f3b5f692bef\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for cosign pkcs11-tool list-keys-uris\nDESCRIPTION: Options specific to the list-keys-uris command including help flag, module path specification, PIN configuration, and slot ID selection.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool_list-keys-uris.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                 help for list-keys-uris\n      --module-path string   absolute path to the PKCS11 module\n      --pin string           pin of the PKCS11 slot, uses environment variable COSIGN_PKCS11_PIN if empty\n      --slot-id uint         id of the PKCS11 slot, uses 0 if empty\n```\n\n----------------------------------------\n\nTITLE: Cosign v1.6.0 Changelog Entries\nDESCRIPTION: Markdown formatted changelog containing categorized updates including security fixes, enhancements, bug fixes and documentation changes for Cosign v1.6.0.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.6.0\n\n## Security Fixes\n\n* CVE-2022-23649 - Make sure signature in Rekor bundle matches signature being verified\n\n## Enhancements\n\n* Change Fulcio URL default to be fulcio.sigstore.dev\n* Add CertExtensions func to extract all extensions\n* Add a dummy.go file to allow vendoring config\n* Add skeleton reconciler for cosigned API CRD.\n[...additional entries truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Using the cosign pkcs11-tool list-keys-uris Command\nDESCRIPTION: Basic command syntax for listing key URIs in a PKCS11 token. This command displays URIs for all keys present in the specified PKCS11 token.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_pkcs11-tool_list-keys-uris.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign pkcs11-tool list-keys-uris [flags]\n```\n\n----------------------------------------\n\nTITLE: Getting List of Contributors Since Last Release\nDESCRIPTION: Git command to list all unique authors who contributed since a specific date, useful for acknowledging contributors in release notes.\nSOURCE: https://github.com/sigstore/cosign/blob/main/release/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit log --pretty=\"* %an\" --after=\"YYYY-MM-DD\" | sort -u\n```\n\n----------------------------------------\n\nTITLE: Executing Cosign PIV Tool Set PUK Command\nDESCRIPTION: This command sets the PUK (PIN Unblocking Key) on a hardware token. It can be used with optional flags to specify new and old PUK values.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-puk.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncosign piv-tool set-puk [flags]\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes\nDESCRIPTION: Sequential markdown documentation of Cosign release versions detailing features, bug fixes, and contributors for each release\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v2.5.0\n\nv2.5.0 includes an implementation of the new bundle specification,\nattesting and verifying OCI image attestations uploaded as OCI artifacts.\nThis feature is currently gated behind the `--new-bundle-format` flag\nwhen running `cosign attest`.\n\n## Features\n\n* Add support for new bundle specification for attesting/verifying OCI image attestations (#3889)\n* Feat/non filename completions (#4115)\n* Add TSA certificate related flags and fields for cosign attest (#4079)\n```\n\n----------------------------------------\n\nTITLE: Basic Set Management Key Command\nDESCRIPTION: The base command for setting a hardware token management key in Cosign PIV tool.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_set-management-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign piv-tool set-management-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header for Cosign Project in Go\nDESCRIPTION: This code snippet represents the standard Apache License 2.0 header used in Go source files for the Sigstore Cosign project. It includes copyright information, license reference, and conditions for use, reproduction, and distribution of the software.\nSOURCE: https://github.com/sigstore/cosign/blob/main/hack/boilerplate/boilerplate.go.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2022 The Sigstore Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Reset Command Help Options\nDESCRIPTION: Available help options specific to the reset command.\nSOURCE: https://github.com/sigstore/cosign/blob/main/doc/cosign_piv-tool_reset.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for reset\n```\n\n----------------------------------------\n\nTITLE: Installing Conformance Test Runner for Cosign\nDESCRIPTION: Command to install the conformance test runner, which is required for running conformance tests on Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake conformance-runner\n```\n\n----------------------------------------\n\nTITLE: Signing Blob with Timestamp in Cosign\nDESCRIPTION: Shows how to sign a blob with a timestamp server URL and output the RFC3161 timestamp and bundle in Cosign.\nSOURCE: https://github.com/sigstore/cosign/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncosign sign-blob --timestamp-server-url=<url> --rfc3161-timestamp=<output-path> --bundle=<output-path> <blob>\n```"
  }
]