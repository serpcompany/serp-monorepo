[
  {
    "owner": "microsoft",
    "repo": "bcapps",
    "content": "TITLE: Downloading Edit in Excel File in AL\nDESCRIPTION: This procedure demonstrates how to download an Edit in Excel file, incorporating filters based on specific criteria. It uses the `Edit in Excel` and `Edit in Excel Filters` codeunits. The `AddFieldV2` method is used to define filters based on the journal batch name and template name. The `EditPageInExcel` function then generates and downloads the Excel file. Prerequisites include the Business Central environment and associated codeunits.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Edit in Excel/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nprocedure Example()\nvar\n    EditinExcel: Codeunit \"Edit in Excel\";\n    EditinExcelFilters: Codeunit \"Edit in Excel Filters\";\n    FileName: Text;\nbegin\n    EditinExcelFilters.AddFieldV2('Journal_Batch_Name', Enum::\"Edit in Excel Filter Type\"::Equal, JournalBatchName, Enum::\"Edit in Excel Edm Type\"::\"Edm.String\");\n    EditinExcelFilters.AddFieldV2('Journal_Template_Name', Enum::\"Edit in Excel Filter Type\"::Equal, JournalTemplateName, Enum::\"Edit in Excel Edm Type\"::\"Edm.String\");\n    FileName := StrSubstNo('%1 (%2, %3)', CurrPage.Caption, JournalBatchName, JournalTemplateName);\n    EditinExcel.EditPageInExcel(CopyStr(CurrPage.Caption, 1, 240), Page::\"Example page\", EditinExcelFilters, FileName);\nend;\n```\n\n----------------------------------------\n\nTITLE: Adding a Translated Field with Drilldown in AL\nDESCRIPTION: This code snippet demonstrates how to add a field to a Business Central page that displays a translated value.  The field includes an OnDrillDown trigger that opens the Translation page, allowing users to view and edit translations for the field. It uses the Translation codeunit to show the translations. The Caption and ToolTip properties are set for user interface clarity.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Translation/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\n    field(TranslatedName; TranslatedName)     \n    {\n        Caption = 'Translated Name';         \n        ApplicationArea = All;\n        ToolTip = 'Specifies the name translated locally.';\n\n        trigger OnDrillDown()\n        var\n            Translation: Codeunit Translation;\n        begin\n            Translation.Show(Rec, FieldNo(Name));\n        end;\n    }\n```\n\n----------------------------------------\n\nTITLE: Controlling Upgrade Code Execution with UpgradeTag in AL\nDESCRIPTION: This AL code snippet demonstrates a pattern for ensuring that upgrade operations run only once by utilizing the UpgradeTag table or API. The logic checks if an UpgradeTagValue has already been set; if so, it exits early to prevent duplicate execution. Otherwise, it performs the upgrade tasks via DoUpgrade(), and then sets the UpgradeTagValue to record completion. Dependencies include the presence of the UpgradeTag facility in the AL environment, and the UpgradeTagValue must uniquely identify the upgrade logic block. Inputs include UpgradeTagValue (the tag identifier), and outputs are the side-effects of DoUpgrade() and the persisted upgrade tag. This pattern must be integrated within upgrade codeunits for safety and only used for upgrade-related routines.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Upgrade Tags/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nif UpgradeTag.HasUpgradeTag(UpgradeTagValue) then\n  exit;\n\nDoUpgrade();\n\nUpgradeTag.SetUpgradeTag(UpgradeTagValue);\n```\n\n----------------------------------------\n\nTITLE: Creating Filters for Excel in AL\nDESCRIPTION: This procedure demonstrates how to create and combine filters to be used with Business Central's Edit in Excel functionality. It showcases the usage of the `EditinExcelFilters` codeunit and `AddFieldV2` method to define filters with different types of comparisons (Equal, OR, and Range). Multiple filters can be added to the `EditinExcelFilters` codeunit and combined. The example demonstrates how to create filters for boolean, string, and decimal data types.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Edit in Excel/README.md#_snippet_3\n\nLANGUAGE: AL\nCODE:\n```\nprocedure CreateExcelFilters()\nvar\n    EditinExcelFilters: Codeunit \"Edit in Excel Filters\";\nbegin\n    // Let's add a simple filter \"Blocked = False\"\n    EditinExcelFilters.AddFieldV2('Blocked', Enum::\"Edit in Excel Filter Type\"::Equal, 'false', Enum::\"Edit in Excel Edm Type\"::\"Edm.Boolean\");\n\n    // Now the filter \"No. = 10000|20000\"\n    EditinExcelFilters.AddFieldV2('No_', Enum::\"Edit in Excel Filter Collection Type\"::\"or\", Enum::\"Edit in Excel Edm Type\"::\"Edm.String\")\n                        .AddFilterValue(Enum::\"Edit in Excel Filter Type\"::Equal, '10000')\n                        .AddFilterValue(Enum::\"Edit in Excel Filter Type\"::Equal, '20000');\n\n    // Finally let's add a range, \"Amount = 1000..2000\"\n    EditinExcelFilters.AddFieldV2('Amount', Enum::\"Edit in Excel Filter Collection Type\"::\"and\", Enum::\"Edit in Excel Edm Type\"::\"Edm.Decimal\")\n                        .AddFilterValue(Enum::\"Edit in Excel Filter Type\"::\"Greater or Equal\", '1000')\n                        .AddFilterValue(Enum::\"Edit in Excel Filter Type\"::\"Less or Equal\", '2000');\n\n    // Since we did not clear EditinExcelFilters in between, the current filter is \"(Blocked = false) and (No_ = 10000|20000) and (Amount = 1000..2000)\"\n    // In other words, all the filters are added together.\nend;\n```\n\n----------------------------------------\n\nTITLE: Overriding Edit in Excel Functionality in AL\nDESCRIPTION: This event subscriber example demonstrates how to override the default behavior of the Edit in Excel feature in Business Central. It subscribes to the `OnEditInExcelWithFilters` event of the `Edit in Excel` codeunit. The subscriber allows modification of the filters before the Excel file is generated.  Setting `Handled := True` within the event handler completely overrides the default process.  Dependencies include the Business Central environment and relevant codeunits.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Edit in Excel/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Edit in Excel\", 'OnEditInExcelWithFilters', '', false, false)]\nlocal procedure OnEditInExcelWithFilters(ServiceName: Text[240]; var EditinExcelFilters: Codeunit \"Edit in Excel Filters\"; SearchFilter: Text; var Handled: Boolean)\nbegin\n    // Note: Since EditinExcelFilters is sent by var, you can simply modify the filters and not handle the entire flow by not setting Handled := True\n    if HandleOnEditInExcel(ServiceName, EditinExcelFilters, SearchFilter) then\n        Handled := True;\nend;\n```\n\n----------------------------------------\n\nTITLE: Archiving data before deletion using Data Archive API in AL\nDESCRIPTION: Demonstrates the usage of the Data Archive API within an AL procedure to create a new archive, save records, and finalize the archive. Dependencies include the 'Data Archive' system codeunit and record variables such as Customer and RecordRef. The snippet uses DataArchiveInterface to create an archive with a given name, obtain a RecordRef from an existing record, save that record to the archive, and then save the entire archive. This flows supports app objects in preserving data prior to deletion.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Data Archive/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nprocedure Foo()\nvar \n    DataArchive: Codeunit \"Data Archive\";  // System App\n    Customer: Record Customer;\n    RecRef: RecordRef;\n    NewArchiveNo: Integer;\nbegin\n    ...\n    NewArchiveNo := DataArchiveInterface.Create('New Archive');\n    ...\n    RecRef.GetTable(Customer);\n    DataArchiveInterface.SaveRecord(RecRef);\n    ...\n    DataArchiveInterface.Save();\n    ...\nend;\n```\n\n----------------------------------------\n\nTITLE: Authorizing SharePoint Client Using AL\nDESCRIPTION: This snippet demonstrates how to use the SharePoint Authorization interface and the SharePoint Auth codeunit to obtain an authorization object, which will be used to authenticate API requests. Prerequisites include the \"SharePoint Authorization module\" and supplying credentials such as Microsoft Entra Tenant ID, ClientId, ClientSecret, and Scope. The expected input is the client credentials, and the output is a configured SharePointAuthorization object ready for further client operations.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointAuth: Codeunit \"SharePoint Auth.\";\n    SharePointAuthorization: Interface \"SharePoint Authorization\";\nbegin\n    SharePointAuthorization := SharePointAuth.CreateAuthorizationCode('<MicrosoftEntraTenantId>', '<ClientId>', '<ClientSecret>', '<Scope>');\n```\n\n----------------------------------------\n\nTITLE: Initializing SharePoint Client in AL\nDESCRIPTION: This snippet shows how to initialize the SharePoint Client codeunit before making any API calls. It requires the SharePoint site or subsite address (BaseUrl) and a SharePointAuthorization instance. The operation sets up the client for further requests and does not return a value; errors during initialization should be handled accordingly.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SPClient: Codeunit \"SharePoint Client\";\nbegin        \n    SPClient.Initialize('<BaseUrl>', SharePointAuthorization);\n```\n\n----------------------------------------\n\nTITLE: Adding Translation via Code in AL\nDESCRIPTION: This code snippet demonstrates how to add a translation for a specific field on a record using the Translation codeunit. It takes the ExtensionId, PageID, LanguageID, and TranslatedName as parameters. It retrieves the record using the PageID, and then calls the Set method of the Translation codeunit to add the translation if the LanguageID is different from the GlobalLanguage. It relies on the existence of the AssistedSetup record and the Translation codeunit.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Translation/README.md#_snippet_2\n\nLANGUAGE: AL\nCODE:\n```\n    procedure AddSetupAssistantTranslation(ExtensionId: Guid; PageID: Integer; LanguageID: Integer; TranslatedName: Text)\n    var\n        AssistedSetup: Record \"Assisted Setup\";\n        Translation: Codeunit Translation;\n    begin\n        if not AssistedSetup.Get(PageID) then\n            exit;\n        if LanguageID <> GlobalLanguage() THEN\n            Translation.Set(AssistedSetup, AssistedSetup.FIELDNO(Name), LanguageID, TranslatedName);\n    end;\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Key Authorization for Azure Storage API in AL\nDESCRIPTION: Defines an AL procedure that creates an authorization interface for Azure Storage Services using a Shared Key. It uses the 'Storage Service Authorization' codeunit's CreateSharedKey method. Requires passing a valid shared key string. The procedure returns an interface instance that can be used to authenticate REST API calls. Suitable for clients intending to authenticate via Access Key method without embedding credential storage in the module.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Azure Storage Services Authorization/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\n[NonDebuggable]\nprocedure GetSharedKeyAuthorization(): Interface \"Storage Service Authorization\"\nvar\n    StorageServiceAuthorization: Codeunit \"Storage Service Authorization\";\nbegin\n    exit(StorageServiceAuthorization.CreateSharedKey('<my shared key>'));\nend;\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Excel File in AL\nDESCRIPTION: This procedure provides the steps to generate a custom Excel file using Business Central's Edit in Excel functionalities. It initializes an `EditinExcelWorkbook`, adds columns to the file, sets filters (created elsewhere), and then downloads the generated Excel file.  Requires the `Edit in Excel Workbook` and `Edit in Excel Filters` codeunits. Key parameters include the ServiceName, Filters, and SearchFilter.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Edit in Excel/README.md#_snippet_2\n\nLANGUAGE: AL\nCODE:\n```\nprocedure CreateExcelFile(ServiceName: Text[250]; EditinExcelFilters: Codeunit \"Edit in Excel Filters\"; SearchFilter: Text)\nvar\n    EditinExcelWorkbook: Codeunit \"Edit in Excel Workbook\";\n    FileName: Text;\nbegin\n    // Initialize the workbook\n    EditinExcelWorkbook.Initialize(ServiceName);\n\n    // Add columns that should be shown to the user\n    EditinExcelWorkbook.AddColumn(Rec.FieldCaption(Code), 'Code');\n    EditinExcelWorkbook.AddColumn(Rec.FieldCaption(Name), 'Name');\n\n    // Add any filters from the page (see below for how to create filters). Note: It's allowed to filter on columns not added to the excel file\n    EditinExcelWorkbook.SetFilters(EditinExcelFilters);\n\n    // Download the excel file\n    FileName := 'ExcelFileName.xlsx';\n    DownloadFromStream(EditinExcelWorkbook.ExportToStream(), DialogTitleTxt, '', '*.*', FileName);\nend;\n```\n\n----------------------------------------\n\nTITLE: Creating SAS (Shared Access Signature) Authorization for Azure Storage API in AL\nDESCRIPTION: Defines an AL procedure to create an authorization interface for Azure Storage Services using a Shared Access Signature (SAS). It initializes lists of services, resources, and permissions that the SAS token will grant access to, sets an expiry date, and then calls the CreateAccountSAS method on 'Storage Service Authorization' codeunit with the signing key and these parameters. This allows fine-grained and time-limited authorization for REST API requests. Prerequisites include valid enums for SAS types and a signing key. Returns an interface suitable for authenticating against Azure Storage REST API using SAS tokens.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Azure Storage Services Authorization/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\n[NonDebuggable]\nprocedure GetSASAuthorization(): Interface \"Storage Service Authorization\"\nvar\n    StorageServiceAuthorization: Codeunit \"Storage Service Authorization\";\n    Services: List of [Enum \"SAS Service Type\"];\n    Resources: List of [Enum \"SAS Resource Type\"];\n    Permissions: List of [Enum \"SAS Permission\"];\n    Expiry: DateTime;\nbegin\n    Services.Add(Enum::\"SAS Service Type\"::Blob);\n    Services.Add(Enum::\"SAS Service Type\"::File);\n\n    Resources.Add(Enum::\"SAS Resource Type\"::Object);\n\n    Permissions.Add(Enum::\"SAS Permission\"::List);\n    Expiry := CurrentDateTime() + 5;\n\n    exit(StorageServiceAuthorization.CreateAccountSAS('<signing key',\n                                                    StorageServiceAuthorization.GetDefaultAPIVersion(),\n                                                    Services,\n                                                    Resources,\n                                                    Permissions,\n                                                    Expiry));\nend;\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Blob with AL\nDESCRIPTION: Demonstrates how to initialize authorization using a shared key, create a container, and upload a simple text blob to Azure Blob Storage using the provided AL codeunits. It requires initializing the container client and blob client with the storage account name and authorization.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Azure Blob Services API/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    procedure CreateMyFirstBlob()\n    var\n        ABSContainerClient: Codeunit \"ABS Container Client\";\n        ABSBlobClient: Codeunit \"ABS Blob Client\";\n        StorageServiceAuthorization: Codeunit \"Storage Service Authorization\";\n        Response: Codeunit \"ABS Operation Response\";\n        Authorization: Interface \"Storage Service Authorization\";\n    begin\n        Authorization := StorageServiceAuthorization.CreateSharedKey('<my shared key>');\n\n        ABSContainerClient.Initialize('<storage account name>', Authorization);\n        ABSContainerClient.CreateContainer('<my fist container>');\n\n        ABSBlobClient.Initialize('<storage account name>', '<my fist container>', Authorization);\n        ABSBlobClient.PutBlobBlockBlobText('<my first blob>', 'Yay! This is my first BLOB in Azure Blob Storage services!')\n    end;\n```\n\n----------------------------------------\n\nTITLE: Fetching Translation on Record Load in AL\nDESCRIPTION: This code snippet shows how to fetch and display a translated value when a record is loaded on a Business Central page. The OnAfterGetRecord trigger is used to retrieve the translation using the Translation codeunit and populate the TranslatedName field. It depends on the Translation codeunit and the TranslatedName field being defined on the page.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Translation/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\n    trigger OnAfterGetRecord()\n    var\n        Translation: Codeunit Translation;\n    begin\n        HelpAvailable := '';\n        VideoAvailable := '';\n        if \"Help Url\" <> '' then\n            HelpAvailable := HelpLinkTxt;\n        if \"Video Url\" <> '' then\n            VideoAvailable := VideoLinkTxt;\n        TranslatedName := Translation.Get(Rec, FieldNo(Name));\n    end;\n```\n\n----------------------------------------\n\nTITLE: Creating a Privacy Notice using AL procedure\nDESCRIPTION: This snippet demonstrates creating a privacy notice by invoking the CreatePrivacyNotice method on the 'Privacy Notice' codeunit, specifying the notice name and description. Dependencies include the 'Privacy Notice' codeunit and relevant data fields. It encapsulates the creation process for a specified privacy notice, expecting 'Microsoft Teams' as example inputs.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nprocedure CreatePrivacyNotice()\nvar\n    PrivacyNotice: Codeunit \"Privacy Notice\";\nbegin\n    PrivacyNotice.CreatePrivacyNotice('Microsoft Teams', 'Microsoft Teams');\nend;\n```\n\n----------------------------------------\n\nTITLE: Retrieving All SharePoint Lists via AL\nDESCRIPTION: This snippet retrieves all available SharePoint lists using the GetLists method. It returns a temporary record of type 'SharePoint List' containing details for each list. Prerequisites are an initialized SPClient and permissions to access the lists. The input is a temporary SharePointList record, and the output is the same record populated with list data.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_2\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\nbegin\n    SPClient.GetLists(SharePointList);\n```\n\n----------------------------------------\n\nTITLE: Override Privacy Notice Page Display via Event Subscriber in AL\nDESCRIPTION: This snippet overrides the default privacy notice display by subscribing to the 'OnBeforeShowPrivacyNotice' event. It checks for the specific notice ID, calls a custom display function, and sets the 'Handled' flag to true to prevent default behavior. Dependencies include the event system and 'Privacy Notice' record, enabling customization of the privacy notice presentation.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_5\n\nLANGUAGE: AL\nCODE:\n```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Privacy Notice\", 'OnBeforeShowPrivacyNotice', '', false, false)]\nlocal procedure OverrideTeamsPrivacyNotice(PrivacyNotice: Record \"Privacy Notice\"; var Handled: Boolean)\nbegin\n    if Handled then\n        exit;\n    if PrivacyNotice.ID <> 'MICROSOFT TEAMS' then\n        exit;\n\n    ShowOwnPrivacyNoticeAndSetApprovalState(PrivacyNotice);\n    Handled := true;\nend;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscribed Azure AD SKUs using AL\nDESCRIPTION: This AL procedure demonstrates how to iterate through all subscribed Azure AD SKUs using the 'Azure AD Licensing' codeunit. It retrieves the SKU ID, Part Number, Prepaid Units, and Consumed Units for each SKU using functions like NextSubscribedSKU(), SubscribedSKUId(), SubscribedSKUPartNumber(), SubscribedSKUPrepaidUnitsInEnabledState(), and SubscribedSKUConsumedUnits(). The retrieved data is then inserted into a custom table represented by the 'SKU' variable (Record \"YOUR SKU TABLE\").\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Azure AD Licensing/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nprocedure GetSKUs()\nvar\n    SKU: Record \"YOUR SKU TABLE\";\n    AzureADLic: codeunit \"Azure AD Licensing\";\nbegin\n    while AzureADLic.NextSubscribedSKU() do begin\n        SKU.id := AzureADLic.SubscribedSKUId();\n        SKU.PartNumber := AzureADLic.SubscribedSKUPartNumber();\n        SKU.PrepaidUnitsInEnabledState := AzureADLic.SubscribedSKUPrepaidUnitsInEnabledState();\n        SKU.ConsumedUnits := AzureADLic.SubscribedSKUConsumedUnits();\n        SKU.insert();\n    end;\nend;\n```\n\n----------------------------------------\n\nTITLE: Confirm Privacy Notice Approval and Call External Service in AL\nDESCRIPTION: This snippet confirms if a user has approved a specified privacy notice before proceeding to call an external service. It uses the ConfirmPrivacyNoticeApproval method, exiting early if not approved. It depends on the 'Privacy Notice' codeunit and triggers external service calls. It ensures compliance before integrating external operations.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_2\n\nLANGUAGE: AL\nCODE:\n```\nprocedure CallTeamsService()\nvar\n    PrivacyNotice: Codeunit \"Privacy Notice\";\nbegin\n    if not PrivacyNotice.ConfirmPrivacyNoticeApproval('Microsoft Teams') then\n        exit;\n\n    ExternalServiceCallToTeams();\nend;\n```\n\n----------------------------------------\n\nTITLE: Getting Files in Folder with AL\nDESCRIPTION: This snippet lists all files in a specified folder using the folder's Server Relative Url. The method populates a SharePointFile temporary record. Ensure both SharePointFolder and SharePointFile records are provided as parameters; output is the list of files.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_15\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointFolder: Record \"SharePoint Folder\";\n    SharePointFile: Record \"SharePoint File\";\nbegin\n    SPClient.GetFolderFilesByServerRelativeUrl(SharePointFolder.\"Server Relative Url\", SharePointFile);\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Folder in AL\nDESCRIPTION: This snippet uploads a file to a SharePoint folder using a file selection dialog. Uses Server Relative Url and a SharePointFile temporary record to store the result. Returns details of the uploaded file; user interaction is required for file selection.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_16\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointFolder: Record \"SharePoint Folder\";\n    SharePointFile: Record \"SharePoint File\";\nbegin\n    SPClient.AddFileToFolder(SharePointFolder.\"Server Relative Url\", SharePointFile);\n```\n\n----------------------------------------\n\nTITLE: Using NoSeries.PeekNextNo to get the next serial number in AL\nDESCRIPTION: This snippet demonstrates how to use the new NoSeries.PeekNextNo function to preview the next number in a No. Series without modifying the database. It simplifies code readability and ensures consistent number generation.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Business Foundation/App/NoSeries/readme_refactoring.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nDocNo := NoSeries.PeekNextNo(GenJnlBatch.\"No. Series\", EndDateReq);\n```\n\n----------------------------------------\n\nTITLE: Writing a Data-Driven AI Test Procedure in AL\nDESCRIPTION: Example AL test procedure demonstrating how to write a data-driven test for a copilot feature using the BC Copilot Test Toolkit. It utilizes the 'AIT Test Context' codeunit to retrieve input ('Question') and expected output ('ExpectedOutput') from a dataset, calls a hypothetical 'CopilotFeature.CallLLM' function, and uses the 'Assert' codeunit to compare the actual output with the expected output. This procedure is designed to be executed for each line in the corresponding dataset.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Tools/AI Test Toolkit/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\n\t[Test]\n\tprocedure TestCopilotFeature()\n\tvar\n        AITestContext: Codeunit \"AIT Test Context\";\n\t\tQuestion: Text;\n\t\tOutput: Integer;\n        ExpectedOutput: Integer;\n\tbegin\n\t\t// [Scenario] AI Test\n\n\t\t// Get the input from the dataset\n\t\tTestInput := AITestContext.GetQuestion().ValueAsText();\n\n\t\t// Call the LLM to get an output\n\t\tOutput := CopilotFeature.CallLLM(Question);\n\n        // Get the expected output from the dataset\n\t\tExpectedOutput := AITestContext.GetExpectedData().ValueAsInteger();\n\n\t\t// Assert the result\n        Assert.AreEqual(ExpectedOutput, Output, '');\n\tend;\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Items by Title with AL\nDESCRIPTION: This code retrieves list items for a given list, specified by its title, using GetListItems. Requires a populated SharePointList temporary record to access the Title property. The method returns a temporary SharePointListItem record with the data. Ensure correct list title is used as input; output is a SharePointListItem table of items.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_4\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\nbegin\n    SPClient.GetListItems(SharePointList.Title, SharePointListItem);\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Items by Id with AL\nDESCRIPTION: This snippet fetches items from a SharePoint list using its unique Id, filling a temporary SharePointListItem record. A valid SharePointList record with the Id property is required. Input is the list Id; output is a populated SharePointListItem temporary table.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_5\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\nbegin\n    SPClient.GetListItems(SharePointList.Id, SharePointListItem);\n```\n\n----------------------------------------\n\nTITLE: LookupDateTime Procedure in AL\nDESCRIPTION: This procedure, `LookupDateTime`, displays a date-time input dialog. It takes an initial DateTime value as input. The dialog, represented by the \"Date-Time Dialog\" page, is shown modally.  The procedure sets the initial value, runs the dialog, and then retrieves the newly selected date-time, returning it as the result of the function. It requires the \"Date-Time Dialog\" page to be defined.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Date-Time Dialog/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nprocedure LookupDateTime(InitialValue: DateTime): DateTime\nvar\n    DateTimeDialog: Page \"Date-Time Dialog\";\n    NewValue: DateTime;\nbegin\n    DateTimeDialog.SetDateTime(InitialValue);\n\n    if DateTimeDialog.RunModal() = Action::OK then\n        NewValue := DateTimeDialog.GetDateTime();\n\n    exit(NewValue);\nend;\n```\n\n----------------------------------------\n\nTITLE: Set Privacy Notice Approval State to Approved in AL\nDESCRIPTION: This snippet sets the approval state of a specified privacy notice to 'Agreed' using the SetApprovalState method. Dependencies include the 'Privacy Notice' codeunit and 'Privacy Notice Approval State' enum. It programmatically approves a privacy notice, automating approval workflows.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_4\n\nLANGUAGE: AL\nCODE:\n```\nprocedure ApproveTeamsIntegration()\nvar\n    PrivacyNotice: Codeunit \"Privacy Notice\";\nbegin\n    PrivacyNotice.SetApprovalState('Microsoft Teams', \"Privacy Notice Approval State\"::Agreed);\nend;\n```\n\n----------------------------------------\n\nTITLE: Selecting Pages using AL\nDESCRIPTION: This AL procedure `SelectPage` allows a user to select a page object from a list. It first filters a `AllObjWithCaption` record to include only pages.  Then it sets up a `Objects` page to display the filtered objects.  The `LookupMode` property allows the page to return a selected record. The procedure then calls the page and either gets the selected record into the `Result` parameter or returns false.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Object Selection/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\nprocedure SelectPage(var Result: Record AllObjWithCaption): Boolean\nvar\n    AllObjects: Record AllObjWithCaption;\n    ObjType: Option TableData,Table,,Report,,Codeunit,XMLport,MenuSuite,Page,Query,System,FieldNumber;\n    Objects: Page Objects;\nbegin\n    // Filter the table to consist of only pages\n    AllObjects.FilterGroup(2);\n    AllObjects.SetRange(\"Object Type\", ObjType::Page);\n    AllObjects.FilterGroup(0);\n\n    Objects.SetRecord(AllObjects);\n    Objects.SetTableView(AllObjects);\n    Objects.LookupMode := true;\n\n    if Objects.RunModal = ACTION::LookupOK then begin\n        Objects.GetRecord(Result);\n        exit(true);\n    end;\n\n    exit(false);\nend;\n```\n\n----------------------------------------\n\nTITLE: Defining Default Role Center via Event Subscriber in AL\nDESCRIPTION: This AL code snippet demonstrates how to use an event subscriber to define a default role center in Business Central. It subscribes to the 'OnBeforeGetDefaultRoleCenter' event, checks if the event has already been handled, and if not, sets the RoleCenterId to the desired page and sets Handled to true.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Default Role Center/README.md#_snippet_0\n\nLANGUAGE: AL\nCODE:\n```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Default Role Center\", 'OnBeforeGetDefaultRoleCenter', '', false, false)]\nlocal procedure SetRoleCenter(var RoleCenterId: Integer; var Handled: Boolean)\nbegin\n    // Do not overwrite already defined default role center\n    if Handled then\n        exit;\n        \n    RoleCenterId := Page::MyAwesomeRoleCenterPage;\n\n    // Set Handled to true so that other subscribers know that a default role center has been defined\n    Handled := true;\nend;\n```\n\n----------------------------------------\n\nTITLE: Getting the next serial number with NoSeries.GetNextNo in AL\nDESCRIPTION: This example illustrates how to retrieve the next serial number and optionally save it to the database, highlighting the differences between legacy and new procedures. It offers options for batch processing to ensure database consistency.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Business Foundation/App/NoSeries/readme_refactoring.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\nif DocNo = NoSeries.PeekNextNo(GenJnlBatch.\"No. Series\", EndDateReq) then\n    NoSeries.GetNextNo(GenJnlBatch.\"No. Series\", EndDateReq);\n```\n\nLANGUAGE: AL\nCODE:\n```\nif DocNo = NoSeriesBatch.GetNextNo(GenJnlBatch.\"No. Series\", EndDateReq) then\n    NoSeriesBatch.SaveState();\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Folder Without UI in AL\nDESCRIPTION: This code uploads a file to a SharePoint folder using a specified file name and InStream, bypassing the UI dialog. Inputs are folder URL, file name, InStream, and an output SharePointFile record with file details on success. Useful for automated or programmatic uploads.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_17\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointFolder: Record \"SharePoint Folder\";\n    SharePointFile: Record \"SharePoint File\";\n    FileInStream: InStream;\nbegin\n    SPClient.AddFileToFolder(SharePointFolder.\"Server Relative Url\", '<FileName>', FileInStream, SharePointFile);\n```\n\n----------------------------------------\n\nTITLE: Downloading File from SharePoint in AL\nDESCRIPTION: This snippet downloads a specified file from SharePoint using its OdataId and file name. The file is delivered to the client; no return value is provided. Requires a valid SharePointFile record as parameter.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_18\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointFile: Record \"SharePoint File\";\nbegin\n    SPClient.DownloadFileContent(SharePointFile.OdataId, SharePointFile.Name); \n```\n\n----------------------------------------\n\nTITLE: Uploading Attachment to List Item in AL\nDESCRIPTION: This snippet uploads an attachment to a SharePoint list item, displaying a file upload dialog. It uses the list Id and list item Id as inputs, returning a temporary record for the created attachment. User interaction is required to select the file; output is an updated SharePointListItemAttachment record.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_9\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointListItemAttachment: Record \"SharePoint List Item Atch\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\nbegin   \n    SPClient.CreateListItemAttachment(SharePointListItem.\"List Id\", SharePointListItem.Id, SharePointListItemAttachment);\n```\n\n----------------------------------------\n\nTITLE: Uploading Attachment Without UI in AL\nDESCRIPTION: This code uploads a file to a SharePoint list item using an InStream and a specified file name, without interactive UI. Needs list Id, list item Id, file name, a valid InStream object, and produces a temporary SharePointListItemAttachment record. This enables background or automated uploads.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_10\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointListItemAttachment: Record \"SharePoint List Item Atch\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\n    FileInStream: InStream;\nbegin   \n    SPClient.CreateListItemAttachment(SharePointListItem.\"List Id\", SharePointListItem.Id, '<FileName>', InStream, SharePointListItemAttachment);\n```\n\n----------------------------------------\n\nTITLE: Initializing No. Series with the new AL approach\nDESCRIPTION: This code demonstrates how to initialize a No. Series with the new method, including handling related series and using the GetNextNo function. It improves clarity over the old approach by explicitly setting and checking series dependencies.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Business Foundation/App/NoSeries/readme_refactoring.md#_snippet_2\n\nLANGUAGE: AL\nCODE:\n```\nif \"No.\" = '' then begin\n    GLSetup.Get();\n    GLSetup.TestField(\"Bank Account Nos.\");\n    \"No. Series\" := GLSetup.\"Bank Account Nos.\";\n    if NoSeries.AreRelated(GLSetup.\"Bank Account Nos.\", xRec.\"No. Series\") then\n        \"No. Series\" := xRec.\"No. Series\";\n    \"No.\" := NoSeries.GetNextNo(\"No. Series\");\nend;\n```\n\n----------------------------------------\n\nTITLE: LookupDate Procedure in AL\nDESCRIPTION: This procedure, `LookupDate`, is designed to gather date input from the user. It also uses the \"Date-Time Dialog\" page, configuring it to accept only date input using `UseDateOnly()`. It takes an initial date value, sets it, runs the modal dialog, and then retrieves the new date. The resulting date is returned. This also depends on the \"Date-Time Dialog\" page and requires its definition.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Date-Time Dialog/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\nprocedure LookupDate(InitialValue: Date): Date\nvar\n    DateDialog: Page \"Date-Time Dialog\";\n    NewValue: Date;\nbegin\n    DateDialog.UseDateOnly()\n    DateDialog.SetDate(InitialValue);\n\n    if DateDialog.RunModal() = Action::OK then\n        NewValue := DateDialog.GetDate();\n\n    exit(NewValue);\nend;\n```\n\n----------------------------------------\n\nTITLE: Creating List Item by Id in AL\nDESCRIPTION: This code creates a SharePoint list item based on the list's Id and entity type. Required parameters are list Id, entity type, and item name; output is a temporary record with the newly created item's details. The method should be called after ensuring the SharePointList record is populated.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_7\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\nbegin\n    SPClient.CreateListItem(SharePointList.Id, SharePointList.\"List Item Entity Type\", '<ListItemName>', SharePointListItem);\n```\n\n----------------------------------------\n\nTITLE: Override 'Edit in Excel' Functionality via Event Subscriber in AL\nDESCRIPTION: This snippet handles overriding the 'Edit in Excel' feature by subscribing to the relevant event. It calls a custom handler function; if successful, it sets the 'Handled' flag to true. Dependencies include event subscription system and a custom handler procedure, facilitating tailored Excel editing behavior.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_6\n\nLANGUAGE: AL\nCODE:\n```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Edit in Excel\", 'OnEditInExcel', '', false, false)]\nlocal procedure OnEditInExcel(ServiceName: Text[240]; ODataFilter: Text; SearchFilter: Text; var Handled: Boolean)\nbegin\n    if HandleOnEditInExcel(ServiceName, ODataFilter, SearchFilter) then\n        Handled := True;\nend;\n```\n\n----------------------------------------\n\nTITLE: Retrieving SharePoint API Diagnostics in AL\nDESCRIPTION: This snippet demonstrates how to retrieve diagnostic and error details from the last SharePoint API call using the Diagnostics codeunit. After an unsuccessful operation (such as failing to get the root folder), the GetDiagnostics method provides status codes, error messages, and throttle information. Inputs are the SharePointList and SharePointFolder records; output is a SharePointDiagnostics object with diagnostic details.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_20\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\n    SharePointFolder: Record \"SharePoint Folder\" temporary;\n    SharePointDiagnostics: Codeunit \"SharePoint  Diagnostics\";\nbegin\n    if not SPClient.GetDocumentLibraryRootFolder(SharePointList.OdataId, SharePointFolder) then\n        SharePointDiagnostics := SpClient.GetDiagnostics();        \n```\n\n----------------------------------------\n\nTITLE: Creating List Item by Title in AL\nDESCRIPTION: This snippet creates a new list item using the list's title and entity type. The CreateListItem method needs the list title, entity type, list item name, and a SharePointListItem record to store result. Inputs: list title, entity type, and list item name; output: a SharePointListItem temporary record with the created item info.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_6\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\nbegin\n    SPClient.CreateListItem(SharePointList.Title, SharePointList.\"List Item Entity Type\", '<ListItemName>', SharePointListItem);\n```\n\n----------------------------------------\n\nTITLE: Installing BCContainerHelper Module - PowerShell\nDESCRIPTION: Installs the BCContainerHelper PowerShell module from the PowerShell Gallery. The -AllowPrerelease parameter is used to ensure the latest available (potentially prerelease) version of the module is installed, which is often required for compatibility with recent Business Central versions or features. This module is a fundamental prerequisite for interacting with Business Central Docker containers via PowerShell.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/LOCAL_DEV_ENV.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module BCContainerHelper -AllowPrerelease\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Business Central Dev Container - PowerShell\nDESCRIPTION: Executes the NewDevEnv.ps1 script to create or connect to a Business Central development container with the specified name ('BCApps-Dev'). This command also automatically sets up the necessary launch.json and settings.json files within your VS Code workspace to enable debugging and connecting to the newly created or existing container. This is the minimal command to get a functional environment running and connected to VS Code.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/LOCAL_DEV_ENV.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build\\scripts\\DevEnv\\NewDevEnv.ps1 -ContainerName 'BCApps-Dev'\n```\n\n----------------------------------------\n\nTITLE: Check Privacy Notice Approval State without User Prompt in AL\nDESCRIPTION: This snippet queries the current approval state of a privacy notice without prompting the user for confirmation. If the state is not 'Agreed,' it exits; otherwise, it proceeds to call an external service. It relies on the GetPrivacyNoticeApprovalState method and the 'Privacy Notice' codeunit, enabling silent checks of approval status.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_3\n\nLANGUAGE: AL\nCODE:\n```\nprocedure CallTeamsService()\nvar\n    PrivacyNotice: Codeunit \"Privacy Notice\";\nbegin\n    if PrivacyNotice.GetPrivacyNoticeApprovalState('Microsoft Teams') <> \"Privacy Notice Approval State\"::Agreed then\n        exit;\n\n    ExternalServiceCallToTeams();\nend;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attachments by List Item in AL\nDESCRIPTION: This snippet uses the GetListItemAttachments method to fetch attachments for a given list item by its list Id and item Id, returning a temporary record of attachment data. Ensure the SharePointListItem record contains valid 'List Id' and 'Id'. The output is a SharePointListItemAttachment table populated with the attachments found.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_8\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointListItemAttachment: Record \"SharePoint List Item Atch\" temporary;\n    SharePointListItem: Record \"SharePoint List Item\" temporary;\nbegin\n    SPClient.GetListItemAttachments(SharePointListItem.\"List Id\", SharePointListItem.Id, SharePointListItemAttachment);\n```\n\n----------------------------------------\n\nTITLE: Downloading List Item Attachment in AL\nDESCRIPTION: This snippet downloads a specific attachment from a list item to the client using the list Id, list item Id, and file name. Requires a populated SharePointListItemAttachment record; no value is returned, but the file is delivered to the client machine.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_11\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointListItemAttachment: Record \"SharePoint List Item Atch\" temporary;\nbegin\n    SPClient.DownloadListItemAttachmentContent(SharePointListItemAttachment.\"List Id\", SharePointListItemAttachment.\"List Item Id\", SharePointListItemAttachment.\"File Name\");    \n```\n\n----------------------------------------\n\nTITLE: Creating SharePoint List Using AL\nDESCRIPTION: This snippet creates a new SharePoint list using the CreateList method, accepting a list title and description. It returns a temporary SharePointList record holding the created list's information. The method requires the client to be initialized and the user to have create permissions on the site. Inputs are the title and description; output is a populated SharePointList record.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_3\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\nbegin\n    SPClient.CreateList('List Title', 'List Description', SharePointList);\n```\n\n----------------------------------------\n\nTITLE: Getting Root Folder of SharePoint List in AL\nDESCRIPTION: This code retrieves the root folder of a specified SharePoint list using the GetDocumentLibraryRootFolder method and the list's OdataId. Returns a SharePointFolder temporary record containing root folder information. Inputs are SharePointList OdataId and a SharePointFolder record for output.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_12\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointList: Record \"SharePoint List\" temporary;\n    SharePointFolder: Record \"SharePoint Folder\" temporary;\nbegin\n    SPClient.GetDocumentLibraryRootFolder(SharePointList.OdataId, SharePointFolder);\n```\n\n----------------------------------------\n\nTITLE: Getting Sub Folders by Server Relative URL in AL\nDESCRIPTION: This snippet retrieves all sub folders under a given parent folder by its server relative URL, returning a temporary SharePointFolder table. Requires the parent folder's Server Relative Url. The operation fills the output SharePointFolder record with details of each sub folder.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_13\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    ParentSharePointFolder, SharePointFolder: Record \"SharePoint Folder\";\nbegin\n    SPClient.GetSubFoldersByServerRelativeUrl(ParentSharePointFolder.\"Server Relative Url\", SharePointFolder);\n```\n\n----------------------------------------\n\nTITLE: Maintaining backwards compatibility during No. Series initialization in AL\nDESCRIPTION: This snippet shows how to invoke obsolete event handlers to support legacy behavior while initializing No. Series, ensuring compatibility with older code or extensions. It wraps the initialization logic with event calls for pre- and post-processing.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Business Foundation/App/NoSeries/readme_refactoring.md#_snippet_3\n\nLANGUAGE: AL\nCODE:\n```\nif \"No.\" = '' then begin\n    GLSetup.Get();\n    GLSetup.TestField(\"Bank Account Nos.\");\n    NoSeriesManagement.RaiseObsoleteOnBeforeInitSeries(GLSetup.\"Bank Account Nos.\", xRec.\"No. Series\", 0D, \"No.\", \"No. Series\", IsHandled);\n    if not IsHandled then begin\n        \"No. Series\" := GLSetup.\"Bank Account Nos.\";\n        if NoSeries.AreRelated(GLSetup.\"Bank Account Nos.\", xRec.\"No. Series\") then\n            \"No. Series\" := xRec.\"No. Series\";\n        \"No.\" := NoSeries.GetNextNo(\"No. Series\");\n        NoSeriesManagement.RaiseObsoleteOnAfterInitSeries(\"No. Series\", GLSetup.\"Bank Account Nos.\", 0D, \"No.\");\n    end;\nend;\n```\n\n----------------------------------------\n\nTITLE: Updating List Item Metadata in AL\nDESCRIPTION: This snippet updates a specific metadata field for a list item or file using the UpdateListItemMetaDataField method, which requires the list name, item Id, entity type, metadata field name, and the new value. The file must be accessed as a list item to update its metadata. No return value is specified.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_19\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    SharePointFile: Record \"SharePoint File\";\nbegin\n    SharePointClient.UpdateListItemMetaDataField('Maintenance', 10, 'SP.Data.MaintenanceItem', 'WorkOrderNo', 'TEST0001'); \n```\n\n----------------------------------------\n\nTITLE: Creating Sub Folders in Folder with AL\nDESCRIPTION: This code creates a new sub folder within a parent folder, specified by concatenating the Server Relative Url and sub folder name. Returns a SharePointFolder temporary record with the sub folder data. Required input is the parent folder's URL and sub folder name.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/SharePoint/README.md#_snippet_14\n\nLANGUAGE: AL\nCODE:\n```\nvar\n    ParentSharePointFolder, SharePointFolder: Record \"SharePoint Folder\";\nbegin\n    SPClient.CreateFolder(ParentSharePointFolder.\"Server Relative Url\" + '/<SubFolderName>', SharePointFolder);\n```\n\n----------------------------------------\n\nTITLE: Register Default Privacy Notices via Event Subscriber in AL\nDESCRIPTION: This snippet registers a default privacy notice during system startup or registration by subscribing to the 'OnRegisterPrivacyNotices' event. It sets the notice ID and associated service name, then inserts the notice record. Dependencies include the 'Privacy Notice' record and event subscription system. It facilitates initializing default notices automatically.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Privacy Notice\", 'OnRegisterPrivacyNotices', '', false, false)]\nlocal procedure CreatePrivacyNoticeRegistrations(var TempPrivacyNotice: Record \"Privacy Notice\" temporary)\nbegin\n    TempPrivacyNotice.ID := 'Microsoft Teams';\n    TempPrivacyNotice.\"Integration Service Name\" := 'Microsoft Teams';\n    if not TempPrivacyNotice.Insert() then;\nend;\n```\n\n----------------------------------------\n\nTITLE: Simulating No. Series number without actual update in AL\nDESCRIPTION: This code demonstrates how to simulate the generation of a next document number based on No. Series details, without modifying the actual series. It enables testing or starting from a specific number for planning purposes.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Business Foundation/App/NoSeries/readme_refactoring.md#_snippet_5\n\nLANGUAGE: AL\nCODE:\n```\n\"Document No.\" := NoSeriesBatch.SimulateGetNextNo(GenJnlBatch.\"No. Series\", Rec.\"Posting Date\", \"Document No.\");\n```\n\n----------------------------------------\n\nTITLE: Defining Test Datasets in JSONL Format\nDESCRIPTION: Example dataset structure in JSONL format for use with the BC Copilot Test Toolkit. Each line represents a single test case as a JSON object. Keys like 'name', 'question', and 'expected_data' are shown, which can be accessed within the AL test codeunit using methods like 'AITestContext.GetQuestion()' and 'AITestContext.GetExpectedData()'. While the structure is flexible, using these standard keys simplifies data retrieval in tests.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Tools/AI Test Toolkit/README.md#_snippet_1\n\nLANGUAGE: JSONL\nCODE:\n```\n{\"name\": \"Test01\", \"question\": \"A question\", \"expected_data\": 5}\n{\"name\": \"Test02\", \"question\": \"A second question\", \"expected_data\": 2}\n{\"name\": \"Test03\", \"question\": \"A third question\", \"expected_data\": 2}\n```\n\n----------------------------------------\n\nTITLE: Creating Dev Container and Publishing System App - PowerShell\nDESCRIPTION: Runs the NewDevEnv.ps1 script to set up the container and VS Code, while also compiling and publishing a specific AL application defined by the -ProjectPaths parameter. In this example, it targets the System Application located at '.\\src\\System Application\\App'. This is useful for developing and testing against a modified or custom version of the System Application.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/LOCAL_DEV_ENV.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build\\scripts\\DevEnv\\NewDevEnv.ps1 -ContainerName 'BCApps-Dev' -ProjectPaths '.\\src\\System Application\\App'\n```\n\n----------------------------------------\n\nTITLE: Creating Dev Container and Publishing System Apps/Tests - PowerShell\nDESCRIPTION: Executes the NewDevEnv.ps1 script to create the container and configure VS Code, and then compiles and publishes all AL applications found within the directory specified by the -ProjectPaths parameter, including subdirectories due to the wildcard (*). This command is used to publish both the main System Application and its associated test apps, providing a full environment for development and testing.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/LOCAL_DEV_ENV.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build\\scripts\\DevEnv\\NewDevEnv.ps1 -ContainerName 'BCApps-Dev' -ProjectPaths '.\\src\\System Application\\*'\n```\n\n----------------------------------------\n\nTITLE: Batch processing for delayed No. Series update in AL\nDESCRIPTION: This example covers batch processing of No. Series during posting, utilizing the new No Series Batch codeunit to streamline document numbering, improve readability, and maintain data consistency.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/Business Foundation/App/NoSeries/readme_refactoring.md#_snippet_4\n\nLANGUAGE: AL\nCODE:\n```\nLastDocNo := GenJnlLine2.\"Document No.\";\nGenJnlLine2.\"Document No.\" := NoSeriesBatch.GetNextNo(GenJnlLine2.\"Posting No. Series\", GenJnlLine2.\"Posting Date\");\nLastPostedDocNo := GenJnlLine2.\"Document No.\";\nNoSeriesBatch.SaveState();\n```\n\n----------------------------------------\n\nTITLE: Default Approval Logic for Privacy Notices in AL\nDESCRIPTION: This snippet describes logic, likely within the 'PrivacyNoticeImpl' codeunit, to determine if a privacy notice should be approved by default based on the integration ID. Returning true signals automatic approval for specific scenarios, streamlining approval processes without user intervention until manual review. It interacts with methods like GetPrivacyNoticeApprovalState and approval record existence.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Privacy Notice/README.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Service Plans for Each Azure AD SKU using AL\nDESCRIPTION: This AL procedure shows how to retrieve service plan details associated with each subscribed Azure AD SKU using the 'Azure AD Licensing' codeunit. It first iterates through the SKUs using NextSubscribedSKU(). For each SKU, it resets the service plan enumerator using ResetServicePlans() and then iterates through the associated plans using NextServicePlan(). Inside the inner loop, it retrieves the Service Plan ID, Name, and the parent SKU ID using ServicePlanId(), ServicePlanName(), and SubscribedSKUId() respectively, inserting the data into a custom table represented by the 'Plan' variable (Record \"YOUR PLAN TABLE\").\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/App/Azure AD Licensing/README.md#_snippet_1\n\nLANGUAGE: AL\nCODE:\n```\nprocedure GetPlansBySKUs()\nvar\n    Plan: Record \"YOUR PLAN TABLE\";\n    AzureADLic: codeunit \"Azure AD Licensing\";\nbegin\n    while AzureADLic.NextSubscribedSKU() do begin\n        AzureADLic.ResetServicePlans();\n        while AzureADLic.NextServicePlan() do begin\n            Plan.ServicePlanId := AzureADLic.ServicePlanId();\n            Plan.ServicePlanName := AzureADLic.ServicePlanName();\n            Plan.SKUId := AzureADLic.SubscribedSKUId();\n            Plan.insert();\n        end;\n    end;\nend;\n```\n\n----------------------------------------\n\nTITLE: Installing VSCODE Extensions via Bash Script\nDESCRIPTION: This script uses the 'code' command to install various VSCODE extensions needed for development. It includes extensions for C#, XML, Docker, PowerShell, REST Client, and version control tools.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/Test Library/Azure AD Plan/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\ncode --install-extension ms-vscode.csharp\ncode --install-extension ms-dotnettools.csharp\ncode --install-extension dotjoshjohnson.xml\ncode --install-extension ms-azuretools.vscode-docker\ncode --install-extension ms-vscode.powershell\ncode --install-extension humao.rest-client\ncode --install-extension eamodio.gitlens\ncode --install-extension donjayamanne.githistory\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure SDK Client in Python\nDESCRIPTION: This Python snippet initializes an Azure SDK client for resource management, establishing authentication via environment variables. It enables interaction with Azure resources for automation scripts and resource provisioning.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/Test Library/Data Classification/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\ncredential = DefaultAzureCredential()\nsubscription_id = os.environ[\"AZURE_SUBSCRIPTION_ID\"]\nclient = ResourceManagementClient(credential, subscription_id)\n\n# Example: list resource groups\nfor rg in client.resource_groups.list():\n    print(rg.name)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function for API Request Handling\nDESCRIPTION: This JavaScript snippet defines an asynchronous function to handle API requests, sending data via fetch and processing JSON responses. It is used for client-side communication with backend services in web applications.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/Test Library/Data Classification/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function fetchData(apiUrl, requestData) {\n    try {\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestData)\n        });\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: C# Class for Data Processing in BCApps\nDESCRIPTION: This C# class provides methods for processing data objects within the BCApps context, including validation and transformation routines. It relies on .NET libraries for data handling and is used to prepare data before storage or API responses.\nSOURCE: https://github.com/microsoft/bcapps/blob/main/src/System Application/Test Library/Data Classification/README.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\n\npublic class DataProcessor {\n    public bool ValidateData(Dictionary<string, object> data) {\n        if (data == null || data.Count == 0) {\n            return false;\n        }\n        // Additional validation logic\n        return true;\n    }\n\n    public Dictionary<string, object> TransformData(Dictionary<string, object> data) {\n        var transformed = new Dictionary<string, object>(data);\n        // Example transformation: add timestamp\n        transformed[\"processedTime\"] = DateTime.UtcNow;\n        return transformed;\n    }\n}\n```"
  }
]