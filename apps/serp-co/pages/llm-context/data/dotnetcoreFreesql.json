[
  {
    "owner": "dotnetcore",
    "repo": "freesql",
    "content": "TITLE: Initializing FreeSql with SQLite and Defining Entities in C#\nDESCRIPTION: Demonstrates setting up the FreeSql ORM for a SQLite database using `FreeSqlBuilder`, enabling automatic database structure synchronization, and defining entity classes `Song`, `Song_tag`, and `Tag` with relationships and mapping attributes like `[Column(IsIdentity = true)]`. Requires the `FreeSql.Provider.Sqlite` package. The `IFreeSql` instance should typically be configured as a singleton.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic IFreeSql fsql = new FreeSql.FreeSqlBuilder()\n  .UseConnectionString(FreeSql.DataType.Sqlite, @\"Data Source=document.db\")\n  .UseAutoSyncStructure(true) //automatically synchronize the entity structure to the database\n  .Build(); //be sure to define as singleton mode\n\nclass Song {\n  [Column(IsIdentity = true)]\n  public int Id { get; set; }\n  public string Title { get; set; }\n  public string Url { get; set; }\n  public DateTime CreateTime { get; set; }\n  \n  public ICollection<Tag> Tags { get; set; }\n}\nclass Song_tag {\n  public int Song_id { get; set; }\n  public Song Song { get; set; }\n  \n  public int Tag_id { get; set; }\n  public Tag Tag { get; set; }\n}\nclass Tag {\n  [Column(IsIdentity = true)]\n  public int Id { get; set; }\n  public string Name { get; set; }\n  \n  public int? Parent_id { get; set; }\n  public Tag Parent { get; set; }\n  \n  public ICollection<Song> Songs { get; set; }\n  public ICollection<Tag> Tags { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with FreeSql using LINQ-like Expressions in C#\nDESCRIPTION: Shows how to perform database queries using FreeSql's fluent API (`Select`). Examples include querying based on nested properties (e.g., `a.Parent.Parent.Name`), including related collections with filtering (`IncludeMany`), using `Any` for existence checks within collections, applying conditional `Where` clauses (`WhereIf`), implementing pagination (`Page`, `Count`), and ordering results (`OrderByDescending`). Assumes `fsql` is initialized and entities are defined.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//OneToOne、ManyToOne\nfsql.Select<Tag>().Where(a => a.Parent.Parent.Name == \"English\").ToList();\n\n//OneToMany\nfsql.Select<Tag>().IncludeMany(a => a.Tags, then => then.Where(sub => sub.Name == \"foo\")).ToList();\n\n//ManyToMany\nfsql.Select<Song>()\n  .IncludeMany(a => a.Tags, then => then.Where(sub => sub.Name == \"foo\"))\n  .Where(s => s.Tags.Any(t => t.Name == \"Chinese\"))\n  .ToList();\n\n//Other\nfsql.Select<YourType>()\n  .Where(a => a.IsDelete == 0)\n  .WhereIf(keyword != null, a => a.UserName.Contains(keyword))\n  .WhereIf(role_id > 0, a => a.RoleId == role_id)\n  .Where(a => a.Nodes.Any(t => t.Parent.Id == t.UserId))\n  .Count(out var total)\n  .Page(page, size)\n  .OrderByDescending(a => a.Id)\n  .ToList()\n```\n\n----------------------------------------\n\nTITLE: Advanced Querying Techniques in FreeSql C#\nDESCRIPTION: Provides examples of advanced FreeSql querying features. This includes using `Contains` for SQL `IN` clauses, performing date comparisons (`a.CreateTime.Date == DateTime.Today`), ordering randomly (`Guid.NewGuid`), limiting the number of results (`Limit`), and projecting data into custom anonymous types with nested subqueries. Assumes `fsql` is initialized and relevant entities (`Song`, `Tag`, `SongTag`) exist.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nfsql.Select<Song>().Where(a => new[] { 1, 2, 3 }.Contains(a.Id)).ToList();\n\nfsql.Select<Song>().Where(a => a.CreateTime.Date == DateTime.Today).ToList();\n\nfsql.Select<Song>().OrderBy(a => Guid.NewGuid()).Limit(10).ToList();\n\nfsql.Select<Song>().ToList(a => new\n{\n    a.Id,\n    Tags = fsql.Select<Tag>().ToList(),\n    SongTags = fsql.Select<SongTag>().Where(b => b.TopicId == a.Id).ToList()\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Repository Pattern with Cascade Save and Transactions in FreeSql C#\nDESCRIPTION: Demonstrates using the FreeSql Repository pattern (`BaseRepository<T>`) obtained via dependency injection (`ioc.GetService`). It shows how to enable cascade saving for related entities (`EnableCascadeSave = true`) and insert a parent entity (`Tag`) with its children (`Tags`) within a transaction managed declaratively by the `[Transactional]` attribute. Requires the `FreeSql.Repository` package and an IoC container setup.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Transactional]\npublic void Add() {\n  var repo = ioc.GetService<BaseRepository<Tag>>();\n  repo.DbContextOptions.EnableCascadeSave = true;\n\n  var item = new Tag {\n    Name = \"testaddsublist\",\n    Tags = new[] {\n      new Tag { Name = \"sub1\" },\n      new Tag { Name = \"sub2\" }\n    }\n  };\n  repo.Insert(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Custom FreeSql Adapter in C#\nDESCRIPTION: Demonstrates how to extend FreeSql's compatibility by creating a custom adapter. A new class `Mssql2000Adapter` inherits from `FreeSql.Custom.CustomAdapter` and overrides database-specific behavior, such as the SQL command to retrieve the last inserted identity (`InsertAfterGetIdentitySql`). The example then shows initializing `FreeSqlBuilder` with `DataType.Custom`, providing a `SqlConnection` connection string, building the `IFreeSql` instance, and finally applying the custom adapter using `fsql.SetCustomAdapter()`. This allows using FreeSql with databases not natively supported, like SQL Server 2000, although some features like automatic migrations might be limited.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Providers/FreeSql.Provider.Custom/readme.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nclass Mssql2000Adapter : FreeSql.Custom.CustomAdapter\n{\n    public override string InsertAfterGetIdentitySql => \"SELECT SCOPE_IDENTITY()\";\n    //可以重写更多的设置\n}\n\nstatic IFreeSql fsql = new FreeSqlBuilder()\n    .UseConnectionString(DataType.Custom, () => new SqlConnection(@\"Data Source=...\"))\n    .Build(); //be sure to define as singleton mode\n\nfsql.SetCustomAdapter(new Mssql2000Adapter());\n```\n\n----------------------------------------\n\nTITLE: Reading Android Assets Using AssetManager in Xamarin.Android (C#)\nDESCRIPTION: Demonstrates accessing an asset file bundled with an Android application using the Assets property from an Activity instance in Xamarin.Android. Requires the asset file (e.g., \\\"my_asset.txt\\\") to be present in the Assets directory with Build Action set to \\\"AndroidAsset\\\". Upon execution, the snippet opens the asset file in an InputStream for further processing. Input: asset file name (hardcoded: \\\"my_asset.txt\\\"). Output: an InputStream to read bytes or text from the asset file. Dependencies: Xamarin.Android, Activity context.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Examples/xamarinFormApp/xamarinFormApp.Android/Assets/AboutAssets.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReadAsset : Activity\n{\n    protected override void OnCreate (Bundle bundle)\n    {\n        base.OnCreate (bundle);\n\n        InputStream input = Assets.Open (\"my_asset.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmark Results: FreeSql ToList vs Dapper Query\nDESCRIPTION: Console output presenting performance benchmarks comparing FreeSql's `ToList()` operation directly against Dapper's `Query()` for fetching entities. It shows the elapsed time for retrieving 131072 entity records, highlighting FreeSql's performance in this specific materialization scenario.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nElapsed: 00:00:00.6707125; ToList Entity Counts: 131072; ORM: FreeSql*\n\nElapsed: 00:00:00.6495301; Query Entity Counts: 131072; ORM: Dapper\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmark Results: FreeSql vs Dapper Querying\nDESCRIPTION: Console output showing performance benchmarks comparing FreeSql and Dapper ORMs. It lists the elapsed time for querying a large number of records (131072) into Entities, Tuples, and dynamic objects using both ORMs, indicating competitive performance for FreeSql across various result types.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nElapsed: 00:00:00.6733199; Query Entity Counts: 131072; ORM: Dapper\n\nElapsed: 00:00:00.4554230; Query Tuple Counts: 131072; ORM: Dapper\n\nElapsed: 00:00:00.6846146; Query Dynamic Counts: 131072; ORM: Dapper\n\nElapsed: 00:00:00.6818111; Query Entity Counts: 131072; ORM: FreeSql*\n\nElapsed: 00:00:00.6060042; Query Tuple Counts: 131072; ORM: FreeSql*\n\nElapsed: 00:00:00.4211323; Query ToList<Tuple> Counts: 131072; ORM: FreeSql*\n\nElapsed: 00:00:01.0236285; Query Dynamic Counts: 131072; ORM: FreeSql*\n```\n\n----------------------------------------\n\nTITLE: Configuring FreeSql with CustomMySql Provider in C#\nDESCRIPTION: Demonstrates how to initialize a FreeSql instance using `FreeSqlBuilder` to connect to a MySQL-compatible database via the generic `CustomMySql` data type. It uses `UseConnectionFactory` to provide a factory function for creating `MySqlConnection` objects, disables automatic command parameterization (`UseNoneCommandParameter`), enables command logging (`UseMonitorCommand`), and sets the specific ADO.NET provider factory (`MySqlConnectorFactory.Instance`) after building. This setup allows using FreeSql's features with databases that understand MySQL syntax but might require their specific ADO.NET driver.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Providers/FreeSql.Provider.Custom/readme.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar fsql = new FreeSqlBuilder()\n    .UseConnectionFactory(DataType.CustomMySql, () => \n        new MySqlConnection(\"Data Source=...\"))\n    .UseNoneCommandParameter(true)\n    .UseMonitorCommand(cmd => Console.WriteLine(cmd.CommandText))\n    .Build();\nfsql.SetDbProviderFactory(MySqlConnectorFactory.Instance);\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL/OpenGauss Connection String\nDESCRIPTION: Provides a sample connection string format for connecting to a PostgreSQL or compatible database like Huawei OpenGauss. It specifies essential parameters such as Host, Port, Username, Password, Database name, and connection pooling settings (No Reset On Close, Pooling enabled, Minimum Pool Size). This format is necessary when configuring applications, like those using FreeSql, to connect to the database.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Providers/FreeSql.Provider.Custom/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nHost=127.0.0.1;Port=15432;Username=qadmin;Password=******;Database=db;No Reset On Close=true;Pooling=true;Minimum Pool Size=1\n```\n\n----------------------------------------\n\nTITLE: Configuring pg_hba.conf for PostgreSQL/OpenGauss Authentication\nDESCRIPTION: Shows example lines for the `pg_hba.conf` file, which controls client authentication in PostgreSQL and compatible databases like OpenGauss. The first line allows connections from any IP address (`0.0.0.0/0`) using `sha256` password authentication for all databases and users. The second line allows connections from the local machine (`127.0.0.1/32`) using the `trust` method (no password required) for all databases and users. These settings are crucial for resolving connection authentication errors.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Providers/FreeSql.Provider.Custom/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhost    all             all             0.0.0.0/0               sha256\nhost    all             all             127.0.0.1/32            trust\n```\n\n----------------------------------------\n\nTITLE: Initializing Typeface from Asset File in Xamarin.Android (C#)\nDESCRIPTION: Illustrates how to load a custom font from the Assets directory using Typeface.CreateFromAsset in Xamarin.Android. The code requires that a font file (here, \\\"fonts/samplefont.ttf\\\") exists under the Assets/fonts directory and is set with the correct Build Action. The method returns a Typeface object that can later be used for setting fonts on UI elements. Dependencies: Xamarin.Android, Typeface, Android.Content.Context. Input: font asset path. Output: Typeface instance. Limitations include handling of file-not-found exceptions and the use of proper context.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Examples/xamarinFormApp/xamarinFormApp.Android/Assets/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Configuring postgresql.conf Password Encryption Type\nDESCRIPTION: Illustrates setting the `password_encryption_type` parameter within the `postgresql.conf` file. Setting this value to `1` configures a specific password encryption method (often MD5 in older contexts or SCRAM-SHA-256 depending on the version and overall configuration). This setting is relevant when troubleshooting authentication issues, particularly ensuring compatibility between client and server authentication mechanisms, as mentioned in the context of a Huawei/OpenGauss error.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Providers/FreeSql.Provider.Custom/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npassword_encryption_type = 1\n```\n\n----------------------------------------\n\nTITLE: Example Generated Android 'Resource' Class Structure in C#\nDESCRIPTION: This C# code snippet shows an example structure of the 'Resource' class automatically generated by the Android build system (often referred to as 'R.java' in native Android). It contains nested static classes corresponding to resource types (like 'drawable', 'layout', 'strings'). Each nested class holds constant integer fields that serve as unique IDs for the resources defined in the project's 'Resources' directory. These IDs are used by Android APIs to access the actual resources at runtime.\nSOURCE: https://github.com/dotnetcore/freesql/blob/master/Examples/xamarinFormApp/xamarinFormApp.Android/Resources/AboutResources.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```"
  }
]